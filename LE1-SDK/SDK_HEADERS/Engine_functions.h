/*
#############################################################################################
# Mass Effect 1 (Legendary Edition) (2.0.0.48602) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51
# ========================================================================================= #
# File: Engine_functions.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/


#pragma once
#include <Windows.h>
#include <cstdio>
#include "../SdkInitializer.h"



#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Functions
# ========================================================================================= #
*/

// Function Engine.Engine.BioShowDebugMessageBox
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sMessage                       ( CPF_Parm | CPF_NeedCtorLink )

void UEngine::BioShowDebugMessageBox ( struct FString sMessage )
{
	static UFunction* pFnBioShowDebugMessageBox = NULL;

	if ( ! pFnBioShowDebugMessageBox )
		pFnBioShowDebugMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 19657 ];

	UEngine_execBioShowDebugMessageBox_Parms BioShowDebugMessageBox_Parms;
	memcpy ( &BioShowDebugMessageBox_Parms.sMessage, &sMessage, 0x10 );

	pFnBioShowDebugMessageBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioShowDebugMessageBox, &BioShowDebugMessageBox_Parms, NULL );

	pFnBioShowDebugMessageBox->FunctionFlags |= 0x400;
};

// Function Engine.Engine.AddOverlayWrapped
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   Font                           ( CPF_Parm )
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          ScaleX                         ( CPF_Parm )
// float                          ScaleY                         ( CPF_Parm )
// float                          WrapWidth                      ( CPF_Parm )

void UEngine::AddOverlayWrapped ( class UFont* Font, struct FString Text, float X, float Y, float ScaleX, float ScaleY, float WrapWidth )
{
	static UFunction* pFnAddOverlayWrapped = NULL;

	if ( ! pFnAddOverlayWrapped )
		pFnAddOverlayWrapped = (UFunction*) UObject::GObjObjects()->Data[ 19649 ];

	UEngine_execAddOverlayWrapped_Parms AddOverlayWrapped_Parms;
	AddOverlayWrapped_Parms.Font = Font;
	memcpy ( &AddOverlayWrapped_Parms.Text, &Text, 0x10 );
	AddOverlayWrapped_Parms.X = X;
	AddOverlayWrapped_Parms.Y = Y;
	AddOverlayWrapped_Parms.ScaleX = ScaleX;
	AddOverlayWrapped_Parms.ScaleY = ScaleY;
	AddOverlayWrapped_Parms.WrapWidth = WrapWidth;

	pFnAddOverlayWrapped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddOverlayWrapped, &AddOverlayWrapped_Parms, NULL );

	pFnAddOverlayWrapped->FunctionFlags |= 0x400;
};

// Function Engine.Engine.AddOverlay
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   Font                           ( CPF_Parm )
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          ScaleX                         ( CPF_Parm )
// float                          ScaleY                         ( CPF_Parm )
// unsigned long                  bIsCentered                    ( CPF_Parm )

void UEngine::AddOverlay ( class UFont* Font, struct FString Text, float X, float Y, float ScaleX, float ScaleY, unsigned long bIsCentered )
{
	static UFunction* pFnAddOverlay = NULL;

	if ( ! pFnAddOverlay )
		pFnAddOverlay = (UFunction*) UObject::GObjObjects()->Data[ 19641 ];

	UEngine_execAddOverlay_Parms AddOverlay_Parms;
	AddOverlay_Parms.Font = Font;
	memcpy ( &AddOverlay_Parms.Text, &Text, 0x10 );
	AddOverlay_Parms.X = X;
	AddOverlay_Parms.Y = Y;
	AddOverlay_Parms.ScaleX = ScaleX;
	AddOverlay_Parms.ScaleY = ScaleY;
	AddOverlay_Parms.bIsCentered = bIsCentered;

	pFnAddOverlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddOverlay, &AddOverlay_Parms, NULL );

	pFnAddOverlay->FunctionFlags |= 0x400;
};

// Function Engine.Engine.RemoveAllOverlays
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UEngine::RemoveAllOverlays ( )
{
	static UFunction* pFnRemoveAllOverlays = NULL;

	if ( ! pFnRemoveAllOverlays )
		pFnRemoveAllOverlays = (UFunction*) UObject::GObjObjects()->Data[ 19640 ];

	UEngine_execRemoveAllOverlays_Parms RemoveAllOverlays_Parms;

	pFnRemoveAllOverlays->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveAllOverlays, &RemoveAllOverlays_Parms, NULL );

	pFnRemoveAllOverlays->FunctionFlags |= 0x400;
};

// Function Engine.Engine.StopMovie
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bDelayStopUntilGameHasRendered ( CPF_Parm )

void UEngine::StopMovie ( unsigned long bDelayStopUntilGameHasRendered )
{
	static UFunction* pFnStopMovie = NULL;

	if ( ! pFnStopMovie )
		pFnStopMovie = (UFunction*) UObject::GObjObjects()->Data[ 19638 ];

	UEngine_execStopMovie_Parms StopMovie_Parms;
	StopMovie_Parms.bDelayStopUntilGameHasRendered = bDelayStopUntilGameHasRendered;

	pFnStopMovie->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopMovie, &StopMovie_Parms, NULL );

	pFnStopMovie->FunctionFlags |= 0x400;
};

// Function Engine.Engine.PlayLoadMapMovie
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UEngine::PlayLoadMapMovie ( )
{
	static UFunction* pFnPlayLoadMapMovie = NULL;

	if ( ! pFnPlayLoadMapMovie )
		pFnPlayLoadMapMovie = (UFunction*) UObject::GObjObjects()->Data[ 19636 ];

	UEngine_execPlayLoadMapMovie_Parms PlayLoadMapMovie_Parms;

	pFnPlayLoadMapMovie->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayLoadMapMovie, &PlayLoadMapMovie_Parms, NULL );

	pFnPlayLoadMapMovie->FunctionFlags |= 0x400;

	return PlayLoadMapMovie_Parms.ReturnValue;
};

// Function Engine.Engine.GetLastMovieName
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UEngine::GetLastMovieName ( )
{
	static UFunction* pFnGetLastMovieName = NULL;

	if ( ! pFnGetLastMovieName )
		pFnGetLastMovieName = (UFunction*) UObject::GObjObjects()->Data[ 19634 ];

	UEngine_execGetLastMovieName_Parms GetLastMovieName_Parms;

	pFnGetLastMovieName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLastMovieName, &GetLastMovieName_Parms, NULL );

	pFnGetLastMovieName->FunctionFlags |= 0x400;

	return GetLastMovieName_Parms.ReturnValue;
};

// Function Engine.Engine.GetAudioDevice
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAudioDevice*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAudioDevice* UEngine::GetAudioDevice ( )
{
	static UFunction* pFnGetAudioDevice = NULL;

	if ( ! pFnGetAudioDevice )
		pFnGetAudioDevice = (UFunction*) UObject::GObjObjects()->Data[ 19632 ];

	UEngine_execGetAudioDevice_Parms GetAudioDevice_Parms;

	pFnGetAudioDevice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAudioDevice, &GetAudioDevice_Parms, NULL );

	pFnGetAudioDevice->FunctionFlags |= 0x400;

	return GetAudioDevice_Parms.ReturnValue;
};

// Function Engine.Engine.IsSplitScreen
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UEngine::IsSplitScreen ( )
{
	static UFunction* pFnIsSplitScreen = NULL;

	if ( ! pFnIsSplitScreen )
		pFnIsSplitScreen = (UFunction*) UObject::GObjObjects()->Data[ 16333 ];

	UEngine_execIsSplitScreen_Parms IsSplitScreen_Parms;

	pFnIsSplitScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSplitScreen, &IsSplitScreen_Parms, NULL );

	pFnIsSplitScreen->FunctionFlags |= 0x400;

	return IsSplitScreen_Parms.ReturnValue;
};

// Function Engine.Engine.GetAdditionalFont
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            AdditionalFontIndex            ( CPF_Parm )

class UFont* UEngine::GetAdditionalFont ( int AdditionalFontIndex )
{
	static UFunction* pFnGetAdditionalFont = NULL;

	if ( ! pFnGetAdditionalFont )
		pFnGetAdditionalFont = (UFunction*) UObject::GObjObjects()->Data[ 19629 ];

	UEngine_execGetAdditionalFont_Parms GetAdditionalFont_Parms;
	GetAdditionalFont_Parms.AdditionalFontIndex = AdditionalFontIndex;

	pFnGetAdditionalFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAdditionalFont, &GetAdditionalFont_Parms, NULL );

	pFnGetAdditionalFont->FunctionFlags |= 0x400;

	return GetAdditionalFont_Parms.ReturnValue;
};

// Function Engine.Engine.GetSubtitleFont
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFont* UEngine::GetSubtitleFont ( )
{
	static UFunction* pFnGetSubtitleFont = NULL;

	if ( ! pFnGetSubtitleFont )
		pFnGetSubtitleFont = (UFunction*) UObject::GObjObjects()->Data[ 19627 ];

	UEngine_execGetSubtitleFont_Parms GetSubtitleFont_Parms;

	pFnGetSubtitleFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSubtitleFont, &GetSubtitleFont_Parms, NULL );

	pFnGetSubtitleFont->FunctionFlags |= 0x400;

	return GetSubtitleFont_Parms.ReturnValue;
};

// Function Engine.Engine.GetLargeFont
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFont* UEngine::GetLargeFont ( )
{
	static UFunction* pFnGetLargeFont = NULL;

	if ( ! pFnGetLargeFont )
		pFnGetLargeFont = (UFunction*) UObject::GObjObjects()->Data[ 18443 ];

	UEngine_execGetLargeFont_Parms GetLargeFont_Parms;

	pFnGetLargeFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLargeFont, &GetLargeFont_Parms, NULL );

	pFnGetLargeFont->FunctionFlags |= 0x400;

	return GetLargeFont_Parms.ReturnValue;
};

// Function Engine.Engine.GetMediumFont
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFont* UEngine::GetMediumFont ( )
{
	static UFunction* pFnGetMediumFont = NULL;

	if ( ! pFnGetMediumFont )
		pFnGetMediumFont = (UFunction*) UObject::GObjObjects()->Data[ 18441 ];

	UEngine_execGetMediumFont_Parms GetMediumFont_Parms;

	pFnGetMediumFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMediumFont, &GetMediumFont_Parms, NULL );

	pFnGetMediumFont->FunctionFlags |= 0x400;

	return GetMediumFont_Parms.ReturnValue;
};

// Function Engine.Engine.GetSmallFont
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFont* UEngine::GetSmallFont ( )
{
	static UFunction* pFnGetSmallFont = NULL;

	if ( ! pFnGetSmallFont )
		pFnGetSmallFont = (UFunction*) UObject::GObjObjects()->Data[ 11701 ];

	UEngine_execGetSmallFont_Parms GetSmallFont_Parms;

	pFnGetSmallFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSmallFont, &GetSmallFont_Parms, NULL );

	pFnGetSmallFont->FunctionFlags |= 0x400;

	return GetSmallFont_Parms.ReturnValue;
};

// Function Engine.Engine.GetTinyFont
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFont* UEngine::GetTinyFont ( )
{
	static UFunction* pFnGetTinyFont = NULL;

	if ( ! pFnGetTinyFont )
		pFnGetTinyFont = (UFunction*) UObject::GObjObjects()->Data[ 18327 ];

	UEngine_execGetTinyFont_Parms GetTinyFont_Parms;

	pFnGetTinyFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTinyFont, &GetTinyFont_Parms, NULL );

	pFnGetTinyFont->FunctionFlags |= 0x400;

	return GetTinyFont_Parms.ReturnValue;
};

// Function Engine.Engine.GetBuildDate
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UEngine::GetBuildDate ( )
{
	static UFunction* pFnGetBuildDate = NULL;

	if ( ! pFnGetBuildDate )
		pFnGetBuildDate = (UFunction*) UObject::GObjObjects()->Data[ 19625 ];

	UEngine_execGetBuildDate_Parms GetBuildDate_Parms;

	pFnGetBuildDate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBuildDate, &GetBuildDate_Parms, NULL );

	pFnGetBuildDate->FunctionFlags |= 0x400;

	return GetBuildDate_Parms.ReturnValue;
};

// Function Engine.Engine.GetCurrentWorldInfo
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AWorldInfo*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AWorldInfo* UEngine::GetCurrentWorldInfo ( )
{
	static UFunction* pFnGetCurrentWorldInfo = NULL;

	if ( ! pFnGetCurrentWorldInfo )
		pFnGetCurrentWorldInfo = (UFunction*) UObject::GObjObjects()->Data[ 19623 ];

	UEngine_execGetCurrentWorldInfo_Parms GetCurrentWorldInfo_Parms;

	pFnGetCurrentWorldInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentWorldInfo, &GetCurrentWorldInfo_Parms, NULL );

	pFnGetCurrentWorldInfo->FunctionFlags |= 0x400;

	return GetCurrentWorldInfo_Parms.ReturnValue;
};

// Function Engine.Engine.IsGame
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UEngine::IsGame ( )
{
	static UFunction* pFnIsGame = NULL;

	if ( ! pFnIsGame )
		pFnIsGame = (UFunction*) UObject::GObjObjects()->Data[ 9727 ];

	UEngine_execIsGame_Parms IsGame_Parms;

	pFnIsGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsGame, &IsGame_Parms, NULL );

	pFnIsGame->FunctionFlags |= 0x400;

	return IsGame_Parms.ReturnValue;
};

// Function Engine.Engine.IsEditor
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UEngine::IsEditor ( )
{
	static UFunction* pFnIsEditor = NULL;

	if ( ! pFnIsEditor )
		pFnIsEditor = (UFunction*) UObject::GObjObjects()->Data[ 9729 ];

	UEngine_execIsEditor_Parms IsEditor_Parms;

	pFnIsEditor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEditor, &IsEditor_Parms, NULL );

	pFnIsEditor->FunctionFlags |= 0x400;

	return IsEditor_Parms.ReturnValue;
};

// Function Engine.Engine.GamerProfileSavingMessageBoxCheck
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )
// class UObject*                 oMsgBox                        ( CPF_Parm )

void UEngine::GamerProfileSavingMessageBoxCheck ( float fDeltaT, class UObject* oMsgBox )
{
	static UFunction* pFnGamerProfileSavingMessageBoxCheck = NULL;

	if ( ! pFnGamerProfileSavingMessageBoxCheck )
		pFnGamerProfileSavingMessageBoxCheck = (UFunction*) UObject::GObjObjects()->Data[ 19620 ];

	UEngine_execGamerProfileSavingMessageBoxCheck_Parms GamerProfileSavingMessageBoxCheck_Parms;
	GamerProfileSavingMessageBoxCheck_Parms.fDeltaT = fDeltaT;
	GamerProfileSavingMessageBoxCheck_Parms.oMsgBox = oMsgBox;

	pFnGamerProfileSavingMessageBoxCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGamerProfileSavingMessageBoxCheck, &GamerProfileSavingMessageBoxCheck_Parms, NULL );

	pFnGamerProfileSavingMessageBoxCheck->FunctionFlags |= 0x400;
};

// Function Engine.Engine.InitializeGamerProfileEx
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioSFPanel*             i_oPanel                       ( CPF_Parm )

void UEngine::InitializeGamerProfileEx ( class UBioSFPanel* i_oPanel )
{
	static UFunction* pFnInitializeGamerProfileEx = NULL;

	if ( ! pFnInitializeGamerProfileEx )
		pFnInitializeGamerProfileEx = (UFunction*) UObject::GObjObjects()->Data[ 19618 ];

	UEngine_execInitializeGamerProfileEx_Parms InitializeGamerProfileEx_Parms;
	InitializeGamerProfileEx_Parms.i_oPanel = i_oPanel;

	pFnInitializeGamerProfileEx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeGamerProfileEx, &InitializeGamerProfileEx_Parms, NULL );

	pFnInitializeGamerProfileEx->FunctionFlags |= 0x400;
};

// Function Engine.Engine.InitializeGamerProfile
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            i_dwDeviceSelectionId          ( CPF_Parm )

void UEngine::InitializeGamerProfile ( int i_dwDeviceSelectionId )
{
	static UFunction* pFnInitializeGamerProfile = NULL;

	if ( ! pFnInitializeGamerProfile )
		pFnInitializeGamerProfile = (UFunction*) UObject::GObjObjects()->Data[ 19616 ];

	UEngine_execInitializeGamerProfile_Parms InitializeGamerProfile_Parms;
	InitializeGamerProfile_Parms.i_dwDeviceSelectionId = i_dwDeviceSelectionId;

	pFnInitializeGamerProfile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeGamerProfile, &InitializeGamerProfile_Parms, NULL );

	pFnInitializeGamerProfile->FunctionFlags |= 0x400;
};

// Function Engine.Engine.IsShip
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UEngine::IsShip ( )
{
	static UFunction* pFnIsShip = NULL;

	if ( ! pFnIsShip )
		pFnIsShip = (UFunction*) UObject::GObjObjects()->Data[ 19614 ];

	UEngine_execIsShip_Parms IsShip_Parms;

	pFnIsShip->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsShip, &IsShip_Parms, NULL );

	pFnIsShip->FunctionFlags |= 0x400;

	return IsShip_Parms.ReturnValue;
};

// Function Engine.GameEngine.GetOnlineSubsystem
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UOnlineSubsystem*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineSubsystem* UGameEngine::GetOnlineSubsystem ( )
{
	static UFunction* pFnGetOnlineSubsystem = NULL;

	if ( ! pFnGetOnlineSubsystem )
		pFnGetOnlineSubsystem = (UFunction*) UObject::GObjObjects()->Data[ 10099 ];

	UGameEngine_execGetOnlineSubsystem_Parms GetOnlineSubsystem_Parms;

	pFnGetOnlineSubsystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOnlineSubsystem, &GetOnlineSubsystem_Parms, NULL );

	pFnGetOnlineSubsystem->FunctionFlags |= 0x400;

	return GetOnlineSubsystem_Parms.ReturnValue;
};

// Function Engine.GameEngine.ShouldUseNonLatentOcclusion
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameEngine::ShouldUseNonLatentOcclusion ( )
{
	static UFunction* pFnShouldUseNonLatentOcclusion = NULL;

	if ( ! pFnShouldUseNonLatentOcclusion )
		pFnShouldUseNonLatentOcclusion = (UFunction*) UObject::GObjObjects()->Data[ 20415 ];

	UGameEngine_execShouldUseNonLatentOcclusion_Parms ShouldUseNonLatentOcclusion_Parms;

	pFnShouldUseNonLatentOcclusion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldUseNonLatentOcclusion, &ShouldUseNonLatentOcclusion_Parms, NULL );

	pFnShouldUseNonLatentOcclusion->FunctionFlags |= 0x400;

	return ShouldUseNonLatentOcclusion_Parms.ReturnValue;
};

// Function Engine.GameEngine.TriggerLargeOcclusionChange
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UGameEngine::TriggerLargeOcclusionChange ( )
{
	static UFunction* pFnTriggerLargeOcclusionChange = NULL;

	if ( ! pFnTriggerLargeOcclusionChange )
		pFnTriggerLargeOcclusionChange = (UFunction*) UObject::GObjObjects()->Data[ 20414 ];

	UGameEngine_execTriggerLargeOcclusionChange_Parms TriggerLargeOcclusionChange_Parms;

	pFnTriggerLargeOcclusionChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTriggerLargeOcclusionChange, &TriggerLargeOcclusionChange_Parms, NULL );

	pFnTriggerLargeOcclusionChange->FunctionFlags |= 0x400;
};

// Function Engine.GameEngine.SkipFrames
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nFrames                        ( CPF_Parm )

void UGameEngine::SkipFrames ( int nFrames )
{
	static UFunction* pFnSkipFrames = NULL;

	if ( ! pFnSkipFrames )
		pFnSkipFrames = (UFunction*) UObject::GObjObjects()->Data[ 20412 ];

	UGameEngine_execSkipFrames_Parms SkipFrames_Parms;
	SkipFrames_Parms.nFrames = nFrames;

	pFnSkipFrames->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSkipFrames, &SkipFrames_Parms, NULL );

	pFnSkipFrames->FunctionFlags |= 0x400;
};

// Function Engine.GameEngine.DestroyNamedNetDriver
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   NetDriverName                  ( CPF_Parm )

void UGameEngine::DestroyNamedNetDriver ( struct FName NetDriverName )
{
	static UFunction* pFnDestroyNamedNetDriver = NULL;

	if ( ! pFnDestroyNamedNetDriver )
		pFnDestroyNamedNetDriver = (UFunction*) UObject::GObjObjects()->Data[ 20410 ];

	UGameEngine_execDestroyNamedNetDriver_Parms DestroyNamedNetDriver_Parms;
	memcpy ( &DestroyNamedNetDriver_Parms.NetDriverName, &NetDriverName, 0x8 );

	pFnDestroyNamedNetDriver->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDestroyNamedNetDriver, &DestroyNamedNetDriver_Parms, NULL );

	pFnDestroyNamedNetDriver->FunctionFlags |= 0x400;
};

// Function Engine.GameEngine.CreateNamedNetDriver
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NetDriverName                  ( CPF_Parm )

bool UGameEngine::CreateNamedNetDriver ( struct FName NetDriverName )
{
	static UFunction* pFnCreateNamedNetDriver = NULL;

	if ( ! pFnCreateNamedNetDriver )
		pFnCreateNamedNetDriver = (UFunction*) UObject::GObjObjects()->Data[ 20407 ];

	UGameEngine_execCreateNamedNetDriver_Parms CreateNamedNetDriver_Parms;
	memcpy ( &CreateNamedNetDriver_Parms.NetDriverName, &NetDriverName, 0x8 );

	pFnCreateNamedNetDriver->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateNamedNetDriver, &CreateNamedNetDriver_Parms, NULL );

	pFnCreateNamedNetDriver->FunctionFlags |= 0x400;

	return CreateNamedNetDriver_Parms.ReturnValue;
};

// Function Engine.Actor.GetPrimarySkelMeshComponent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class USkeletalMeshComponent* AActor::GetPrimarySkelMeshComponent ( )
{
	static UFunction* pFnGetPrimarySkelMeshComponent = NULL;

	if ( ! pFnGetPrimarySkelMeshComponent )
		pFnGetPrimarySkelMeshComponent = (UFunction*) UObject::GObjObjects()->Data[ 7367 ];

	AActor_execGetPrimarySkelMeshComponent_Parms GetPrimarySkelMeshComponent_Parms;

	pFnGetPrimarySkelMeshComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPrimarySkelMeshComponent, &GetPrimarySkelMeshComponent_Parms, NULL );

	pFnGetPrimarySkelMeshComponent->FunctionFlags |= 0x400;

	return GetPrimarySkelMeshComponent_Parms.ReturnValue;
};

// Function Engine.Actor.WillOverlap
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 PosA                           ( CPF_Parm )
// struct FVector                 VelA                           ( CPF_Parm )
// struct FVector                 PosB                           ( CPF_Parm )
// struct FVector                 VelB                           ( CPF_Parm )
// float                          StepSize                       ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// float                          Time                           ( CPF_Parm | CPF_OutParm )

bool AActor::WillOverlap ( struct FVector PosA, struct FVector VelA, struct FVector PosB, struct FVector VelB, float StepSize, float Radius, float* Time )
{
	static UFunction* pFnWillOverlap = NULL;

	if ( ! pFnWillOverlap )
		pFnWillOverlap = (UFunction*) UObject::GObjObjects()->Data[ 7358 ];

	AActor_execWillOverlap_Parms WillOverlap_Parms;
	memcpy ( &WillOverlap_Parms.PosA, &PosA, 0xC );
	memcpy ( &WillOverlap_Parms.VelA, &VelA, 0xC );
	memcpy ( &WillOverlap_Parms.PosB, &PosB, 0xC );
	memcpy ( &WillOverlap_Parms.VelB, &VelB, 0xC );
	WillOverlap_Parms.StepSize = StepSize;
	WillOverlap_Parms.Radius = Radius;

	pFnWillOverlap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWillOverlap, &WillOverlap_Parms, NULL );

	pFnWillOverlap->FunctionFlags |= 0x400;

	if ( Time )
		*Time = WillOverlap_Parms.Time;

	return WillOverlap_Parms.ReturnValue;
};

// Function Engine.Actor.GetAvoidanceVector
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 GoalLocation                   ( CPF_Parm )
// float                          CollisionRadius                ( CPF_Parm )
// float                          MaxSpeed                       ( CPF_Parm )
// int                            NumSamples                     ( CPF_OptionalParm | CPF_Parm )
// float                          VelocityStepRate               ( CPF_OptionalParm | CPF_Parm )
// float                          MaxTimeTilOverlap              ( CPF_OptionalParm | CPF_Parm )
// struct TArray<class AActor*>   Obstacles                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FVector AActor::GetAvoidanceVector ( struct FVector GoalLocation, float CollisionRadius, float MaxSpeed, int NumSamples, float VelocityStepRate, float MaxTimeTilOverlap, struct TArray<class AActor*>* Obstacles )
{
	static UFunction* pFnGetAvoidanceVector = NULL;

	if ( ! pFnGetAvoidanceVector )
		pFnGetAvoidanceVector = (UFunction*) UObject::GObjObjects()->Data[ 7348 ];

	AActor_execGetAvoidanceVector_Parms GetAvoidanceVector_Parms;
	memcpy ( &GetAvoidanceVector_Parms.GoalLocation, &GoalLocation, 0xC );
	GetAvoidanceVector_Parms.CollisionRadius = CollisionRadius;
	GetAvoidanceVector_Parms.MaxSpeed = MaxSpeed;
	GetAvoidanceVector_Parms.NumSamples = NumSamples;
	GetAvoidanceVector_Parms.VelocityStepRate = VelocityStepRate;
	GetAvoidanceVector_Parms.MaxTimeTilOverlap = MaxTimeTilOverlap;

	pFnGetAvoidanceVector->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAvoidanceVector, &GetAvoidanceVector_Parms, NULL );

	pFnGetAvoidanceVector->FunctionFlags |= 0x400;

	if ( Obstacles )
		memcpy ( Obstacles, &GetAvoidanceVector_Parms.Obstacles, 0x10 );

	return GetAvoidanceVector_Parms.ReturnValue;
};

// Function Engine.Actor.IsClient
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsClient ( )
{
	static UFunction* pFnIsClient = NULL;

	if ( ! pFnIsClient )
		pFnIsClient = (UFunction*) UObject::GObjObjects()->Data[ 7346 ];

	AActor_execIsClient_Parms IsClient_Parms;

	this->ProcessEvent ( pFnIsClient, &IsClient_Parms, NULL );

	return IsClient_Parms.ReturnValue;
};

// Function Engine.Actor.IsServer
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsServer ( )
{
	static UFunction* pFnIsServer = NULL;

	if ( ! pFnIsServer )
		pFnIsServer = (UFunction*) UObject::GObjObjects()->Data[ 7344 ];

	AActor_execIsServer_Parms IsServer_Parms;

	this->ProcessEvent ( pFnIsServer, &IsServer_Parms, NULL );

	return IsServer_Parms.ReturnValue;
};

// Function Engine.Actor.IsOwningClient
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsOwningClient ( )
{
	static UFunction* pFnIsOwningClient = NULL;

	if ( ! pFnIsOwningClient )
		pFnIsOwningClient = (UFunction*) UObject::GObjObjects()->Data[ 7342 ];

	AActor_execIsOwningClient_Parms IsOwningClient_Parms;

	this->ProcessEvent ( pFnIsOwningClient, &IsOwningClient_Parms, NULL );

	return IsOwningClient_Parms.ReturnValue;
};

// Function Engine.Actor.ReplicationEnded
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void AActor::eventReplicationEnded ( )
{
	static UFunction* pFnReplicationEnded = NULL;

	if ( ! pFnReplicationEnded )
		pFnReplicationEnded = (UFunction*) UObject::GObjObjects()->Data[ 7341 ];

	AActor_eventReplicationEnded_Parms ReplicationEnded_Parms;

	this->ProcessEvent ( pFnReplicationEnded, &ReplicationEnded_Parms, NULL );
};

// Function Engine.Actor.PostDemoRewind
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void AActor::eventPostDemoRewind ( )
{
	static UFunction* pFnPostDemoRewind = NULL;

	if ( ! pFnPostDemoRewind )
		pFnPostDemoRewind = (UFunction*) UObject::GObjObjects()->Data[ 7340 ];

	AActor_eventPostDemoRewind_Parms PostDemoRewind_Parms;

	this->ProcessEvent ( pFnPostDemoRewind, &PostDemoRewind_Parms, NULL );
};

// Function Engine.Actor.AnimTreeUpdated
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm | CPF_EditInline )

void AActor::eventAnimTreeUpdated ( class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnAnimTreeUpdated = NULL;

	if ( ! pFnAnimTreeUpdated )
		pFnAnimTreeUpdated = (UFunction*) UObject::GObjObjects()->Data[ 7338 ];

	AActor_eventAnimTreeUpdated_Parms AnimTreeUpdated_Parms;
	AnimTreeUpdated_Parms.SkelMesh = SkelMesh;

	this->ProcessEvent ( pFnAnimTreeUpdated, &AnimTreeUpdated_Parms, NULL );
};

// Function Engine.Actor.SupportsKismetModification
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USequenceOp*             AskingOp                       ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AActor::SupportsKismetModification ( class USequenceOp* AskingOp, struct FString* Reason )
{
	static UFunction* pFnSupportsKismetModification = NULL;

	if ( ! pFnSupportsKismetModification )
		pFnSupportsKismetModification = (UFunction*) UObject::GObjObjects()->Data[ 7334 ];

	AActor_execSupportsKismetModification_Parms SupportsKismetModification_Parms;
	SupportsKismetModification_Parms.AskingOp = AskingOp;

	pFnSupportsKismetModification->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSupportsKismetModification, &SupportsKismetModification_Parms, NULL );

	pFnSupportsKismetModification->FunctionFlags |= 0x400;

	if ( Reason )
		memcpy ( Reason, &SupportsKismetModification_Parms.Reason, 0x10 );

	return SupportsKismetModification_Parms.ReturnValue;
};

// Function Engine.Actor.TrailsNotifyEnd
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UAnimNotify_Trails*      AnimNotifyData                 ( CPF_Const | CPF_Parm )

void AActor::eventTrailsNotifyEnd ( class UAnimNotify_Trails* AnimNotifyData )
{
	static UFunction* pFnTrailsNotifyEnd = NULL;

	if ( ! pFnTrailsNotifyEnd )
		pFnTrailsNotifyEnd = (UFunction*) UObject::GObjObjects()->Data[ 7332 ];

	AActor_eventTrailsNotifyEnd_Parms TrailsNotifyEnd_Parms;
	TrailsNotifyEnd_Parms.AnimNotifyData = AnimNotifyData;

	this->ProcessEvent ( pFnTrailsNotifyEnd, &TrailsNotifyEnd_Parms, NULL );
};

// Function Engine.Actor.TrailsNotifyTick
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UAnimNotify_Trails*      AnimNotifyData                 ( CPF_Const | CPF_Parm )

void AActor::eventTrailsNotifyTick ( class UAnimNotify_Trails* AnimNotifyData )
{
	static UFunction* pFnTrailsNotifyTick = NULL;

	if ( ! pFnTrailsNotifyTick )
		pFnTrailsNotifyTick = (UFunction*) UObject::GObjObjects()->Data[ 7330 ];

	AActor_eventTrailsNotifyTick_Parms TrailsNotifyTick_Parms;
	TrailsNotifyTick_Parms.AnimNotifyData = AnimNotifyData;

	this->ProcessEvent ( pFnTrailsNotifyTick, &TrailsNotifyTick_Parms, NULL );
};

// Function Engine.Actor.TrailsNotify
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UAnimNotify_Trails*      AnimNotifyData                 ( CPF_Const | CPF_Parm )

void AActor::eventTrailsNotify ( class UAnimNotify_Trails* AnimNotifyData )
{
	static UFunction* pFnTrailsNotify = NULL;

	if ( ! pFnTrailsNotify )
		pFnTrailsNotify = (UFunction*) UObject::GObjObjects()->Data[ 7328 ];

	AActor_eventTrailsNotify_Parms TrailsNotify_Parms;
	TrailsNotify_Parms.AnimNotifyData = AnimNotifyData;

	this->ProcessEvent ( pFnTrailsNotify, &TrailsNotify_Parms, NULL );
};

// Function Engine.Actor.PlayParticleEffect
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UAnimNotify_PlayParticleEffect* AnimNotifyData                 ( CPF_Const | CPF_Parm )

void AActor::eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData )
{
	static UFunction* pFnPlayParticleEffect = NULL;

	if ( ! pFnPlayParticleEffect )
		pFnPlayParticleEffect = (UFunction*) UObject::GObjObjects()->Data[ 7326 ];

	AActor_eventPlayParticleEffect_Parms PlayParticleEffect_Parms;
	PlayParticleEffect_Parms.AnimNotifyData = AnimNotifyData;

	this->ProcessEvent ( pFnPlayParticleEffect, &PlayParticleEffect_Parms, NULL );
};

// Function Engine.Actor.GetAimAdhesionExtent
// [0x00420102] 
// Parameters infos:
// float                          Width                          ( CPF_Parm | CPF_OutParm )
// float                          Height                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 Center                         ( CPF_Parm | CPF_OutParm )

void AActor::GetAimAdhesionExtent ( float* Width, float* Height, struct FVector* Center )
{
	static UFunction* pFnGetAimAdhesionExtent = NULL;

	if ( ! pFnGetAimAdhesionExtent )
		pFnGetAimAdhesionExtent = (UFunction*) UObject::GObjObjects()->Data[ 7321 ];

	AActor_execGetAimAdhesionExtent_Parms GetAimAdhesionExtent_Parms;

	this->ProcessEvent ( pFnGetAimAdhesionExtent, &GetAimAdhesionExtent_Parms, NULL );

	if ( Width )
		*Width = GetAimAdhesionExtent_Parms.Width;

	if ( Height )
		*Height = GetAimAdhesionExtent_Parms.Height;

	if ( Center )
		memcpy ( Center, &GetAimAdhesionExtent_Parms.Center, 0xC );
};

// Function Engine.Actor.GetAimFrictionExtent
// [0x00420102] 
// Parameters infos:
// float                          Width                          ( CPF_Parm | CPF_OutParm )
// float                          Height                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 Center                         ( CPF_Parm | CPF_OutParm )

void AActor::GetAimFrictionExtent ( float* Width, float* Height, struct FVector* Center )
{
	static UFunction* pFnGetAimFrictionExtent = NULL;

	if ( ! pFnGetAimFrictionExtent )
		pFnGetAimFrictionExtent = (UFunction*) UObject::GObjObjects()->Data[ 7316 ];

	AActor_execGetAimFrictionExtent_Parms GetAimFrictionExtent_Parms;

	this->ProcessEvent ( pFnGetAimFrictionExtent, &GetAimFrictionExtent_Parms, NULL );

	if ( Width )
		*Width = GetAimFrictionExtent_Parms.Width;

	if ( Height )
		*Height = GetAimFrictionExtent_Parms.Height;

	if ( Center )
		memcpy ( Center, &GetAimFrictionExtent_Parms.Center, 0xC );
};

// Function Engine.Actor.IsInPersistentLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsInPersistentLevel ( )
{
	static UFunction* pFnIsInPersistentLevel = NULL;

	if ( ! pFnIsInPersistentLevel )
		pFnIsInPersistentLevel = (UFunction*) UObject::GObjObjects()->Data[ 7314 ];

	AActor_execIsInPersistentLevel_Parms IsInPersistentLevel_Parms;

	pFnIsInPersistentLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInPersistentLevel, &IsInPersistentLevel_Parms, NULL );

	pFnIsInPersistentLevel->FunctionFlags |= 0x400;

	return IsInPersistentLevel_Parms.ReturnValue;
};

// Function Engine.Actor.SetActive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void AActor::SetActive ( unsigned long bActive )
{
	static UFunction* pFnSetActive = NULL;

	if ( ! pFnSetActive )
		pFnSetActive = (UFunction*) UObject::GObjObjects()->Data[ 7312 ];

	AActor_execSetActive_Parms SetActive_Parms;
	SetActive_Parms.bActive = bActive;

	pFnSetActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActive, &SetActive_Parms, NULL );

	pFnSetActive->FunctionFlags |= 0x400;
};

// Function Engine.Actor.RemoveModule
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USFXModule*              Module                         ( CPF_Parm )

void AActor::RemoveModule ( class USFXModule* Module )
{
	static UFunction* pFnRemoveModule = NULL;

	if ( ! pFnRemoveModule )
		pFnRemoveModule = (UFunction*) UObject::GObjObjects()->Data[ 7310 ];

	AActor_execRemoveModule_Parms RemoveModule_Parms;
	RemoveModule_Parms.Module = Module;

	pFnRemoveModule->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveModule, &RemoveModule_Parms, NULL );

	pFnRemoveModule->FunctionFlags |= 0x400;
};

// Function Engine.Actor.GetModule
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USFXModule*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  ModuleClass                    ( CPF_Parm )

class USFXModule* AActor::GetModule ( class UClass* ModuleClass )
{
	static UFunction* pFnGetModule = NULL;

	if ( ! pFnGetModule )
		pFnGetModule = (UFunction*) UObject::GObjObjects()->Data[ 6848 ];

	AActor_execGetModule_Parms GetModule_Parms;
	GetModule_Parms.ModuleClass = ModuleClass;

	pFnGetModule->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetModule, &GetModule_Parms, NULL );

	pFnGetModule->FunctionFlags |= 0x400;

	return GetModule_Parms.ReturnValue;
};

// Function Engine.Actor.ExceededPhysicsThreshold
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  InstigatedBy                   ( CPF_Parm )

void AActor::eventExceededPhysicsThreshold ( class AActor* InstigatedBy )
{
	static UFunction* pFnExceededPhysicsThreshold = NULL;

	if ( ! pFnExceededPhysicsThreshold )
		pFnExceededPhysicsThreshold = (UFunction*) UObject::GObjObjects()->Data[ 7306 ];

	AActor_eventExceededPhysicsThreshold_Parms ExceededPhysicsThreshold_Parms;
	ExceededPhysicsThreshold_Parms.InstigatedBy = InstigatedBy;

	this->ProcessEvent ( pFnExceededPhysicsThreshold, &ExceededPhysicsThreshold_Parms, NULL );
};

// Function Engine.Actor.OnRigidBodySpringOverextension
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class URB_BodyInstance*        BodyInstance                   ( CPF_Parm )

void AActor::eventOnRigidBodySpringOverextension ( class URB_BodyInstance* BodyInstance )
{
	static UFunction* pFnOnRigidBodySpringOverextension = NULL;

	if ( ! pFnOnRigidBodySpringOverextension )
		pFnOnRigidBodySpringOverextension = (UFunction*) UObject::GObjObjects()->Data[ 7304 ];

	AActor_eventOnRigidBodySpringOverextension_Parms OnRigidBodySpringOverextension_Parms;
	OnRigidBodySpringOverextension_Parms.BodyInstance = BodyInstance;

	this->ProcessEvent ( pFnOnRigidBodySpringOverextension, &OnRigidBodySpringOverextension_Parms, NULL );
};

// Function Engine.Actor.GetPackageGuid
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FGuid                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PackageName                    ( CPF_Parm )

struct FGuid AActor::GetPackageGuid ( struct FName PackageName )
{
	static UFunction* pFnGetPackageGuid = NULL;

	if ( ! pFnGetPackageGuid )
		pFnGetPackageGuid = (UFunction*) UObject::GObjObjects()->Data[ 7301 ];

	AActor_execGetPackageGuid_Parms GetPackageGuid_Parms;
	memcpy ( &GetPackageGuid_Parms.PackageName, &PackageName, 0x8 );

	pFnGetPackageGuid->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPackageGuid, &GetPackageGuid_Parms, NULL );

	pFnGetPackageGuid->FunctionFlags |= 0x400;

	return GetPackageGuid_Parms.ReturnValue;
};

// Function Engine.Actor.GetSaveObjectClass
// [0x00022002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* AActor::GetSaveObjectClass ( )
{
	static UFunction* pFnGetSaveObjectClass = NULL;

	if ( ! pFnGetSaveObjectClass )
		pFnGetSaveObjectClass = (UFunction*) UObject::GObjObjects()->Data[ 7299 ];

	AActor_execGetSaveObjectClass_Parms GetSaveObjectClass_Parms;

	this->ProcessEvent ( pFnGetSaveObjectClass, &GetSaveObjectClass_Parms, NULL );

	return GetSaveObjectClass_Parms.ReturnValue;
};

// Function Engine.Actor.PostInitAnimTree
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void AActor::PostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 7297 ];

	AActor_execPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	pFnPostInitAnimTree->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );

	pFnPostInitAnimTree->FunctionFlags |= 0x400;
};

// Function Engine.Actor.RootMotionExtracted
// [0x00420900] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )
// struct FBoneAtom               ExtractedRootMotionDelta       ( CPF_Parm | CPF_OutParm )

void AActor::eventRootMotionExtracted ( class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta )
{
	static UFunction* pFnRootMotionExtracted = NULL;

	if ( ! pFnRootMotionExtracted )
		pFnRootMotionExtracted = (UFunction*) UObject::GObjObjects()->Data[ 7294 ];

	AActor_eventRootMotionExtracted_Parms RootMotionExtracted_Parms;
	RootMotionExtracted_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnRootMotionExtracted, &RootMotionExtracted_Parms, NULL );

	if ( ExtractedRootMotionDelta )
		memcpy ( ExtractedRootMotionDelta, &RootMotionExtracted_Parms.ExtractedRootMotionDelta, 0x20 );
};

// Function Engine.Actor.RootMotionModeChanged
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void AActor::eventRootMotionModeChanged ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnRootMotionModeChanged = NULL;

	if ( ! pFnRootMotionModeChanged )
		pFnRootMotionModeChanged = (UFunction*) UObject::GObjObjects()->Data[ 7292 ];

	AActor_eventRootMotionModeChanged_Parms RootMotionModeChanged_Parms;
	RootMotionModeChanged_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnRootMotionModeChanged, &RootMotionModeChanged_Parms, NULL );
};

// Function Engine.Actor.PostRenderFor
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void AActor::eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnPostRenderFor = NULL;

	if ( ! pFnPostRenderFor )
		pFnPostRenderFor = (UFunction*) UObject::GObjObjects()->Data[ 7287 ];

	AActor_eventPostRenderFor_Parms PostRenderFor_Parms;
	PostRenderFor_Parms.PC = PC;
	PostRenderFor_Parms.Canvas = Canvas;
	memcpy ( &PostRenderFor_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &PostRenderFor_Parms.CameraDir, &CameraDir, 0xC );

	this->ProcessEvent ( pFnPostRenderFor, &PostRenderFor_Parms, NULL );
};

// Function Engine.Actor.NativePostRenderFor
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void AActor::NativePostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnNativePostRenderFor = NULL;

	if ( ! pFnNativePostRenderFor )
		pFnNativePostRenderFor = (UFunction*) UObject::GObjObjects()->Data[ 7282 ];

	AActor_execNativePostRenderFor_Parms NativePostRenderFor_Parms;
	NativePostRenderFor_Parms.PC = PC;
	NativePostRenderFor_Parms.Canvas = Canvas;
	memcpy ( &NativePostRenderFor_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &NativePostRenderFor_Parms.CameraDir, &CameraDir, 0xC );

	pFnNativePostRenderFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativePostRenderFor, &NativePostRenderFor_Parms, NULL );

	pFnNativePostRenderFor->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetHUDLocation
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewHUDLocation                 ( CPF_Parm )

void AActor::SetHUDLocation ( struct FVector NewHUDLocation )
{
	static UFunction* pFnSetHUDLocation = NULL;

	if ( ! pFnSetHUDLocation )
		pFnSetHUDLocation = (UFunction*) UObject::GObjObjects()->Data[ 7280 ];

	AActor_execSetHUDLocation_Parms SetHUDLocation_Parms;
	memcpy ( &SetHUDLocation_Parms.NewHUDLocation, &NewHUDLocation, 0xC );

	pFnSetHUDLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHUDLocation, &SetHUDLocation_Parms, NULL );

	pFnSetHUDLocation->FunctionFlags |= 0x400;
};

// Function Engine.Actor.OnRanOver
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class ASVehicle*               Vehicle                        ( CPF_Parm )
// class UPrimitiveComponent*     RunOverComponent               ( CPF_Parm | CPF_EditInline )
// int                            WheelIndex                     ( CPF_Parm )

void AActor::eventOnRanOver ( class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex )
{
	static UFunction* pFnOnRanOver = NULL;

	if ( ! pFnOnRanOver )
		pFnOnRanOver = (UFunction*) UObject::GObjObjects()->Data[ 7276 ];

	AActor_eventOnRanOver_Parms OnRanOver_Parms;
	OnRanOver_Parms.Vehicle = Vehicle;
	OnRanOver_Parms.RunOverComponent = RunOverComponent;
	OnRanOver_Parms.WheelIndex = WheelIndex;

	this->ProcessEvent ( pFnOnRanOver, &OnRanOver_Parms, NULL );
};

// Function Engine.Actor.RigidBodyCollision
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     HitComponent                   ( CPF_Parm | CPF_EditInline )
// class UPrimitiveComponent*     OtherComponent                 ( CPF_Parm | CPF_EditInline )
// int                            ContactIndex                   ( CPF_Parm )
// struct FCollisionImpactData    RigidCollisionData             ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AActor::eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData )
{
	static UFunction* pFnRigidBodyCollision = NULL;

	if ( ! pFnRigidBodyCollision )
		pFnRigidBodyCollision = (UFunction*) UObject::GObjObjects()->Data[ 7271 ];

	AActor_eventRigidBodyCollision_Parms RigidBodyCollision_Parms;
	RigidBodyCollision_Parms.HitComponent = HitComponent;
	RigidBodyCollision_Parms.OtherComponent = OtherComponent;
	RigidBodyCollision_Parms.ContactIndex = ContactIndex;

	this->ProcessEvent ( pFnRigidBodyCollision, &RigidBodyCollision_Parms, NULL );

	if ( RigidCollisionData )
		memcpy ( RigidCollisionData, &RigidBodyCollision_Parms.RigidCollisionData, 0x28 );
};

// Function Engine.Actor.InterpolationChanged
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void AActor::eventInterpolationChanged ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationChanged = NULL;

	if ( ! pFnInterpolationChanged )
		pFnInterpolationChanged = (UFunction*) UObject::GObjObjects()->Data[ 7269 ];

	AActor_eventInterpolationChanged_Parms InterpolationChanged_Parms;
	InterpolationChanged_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationChanged, &InterpolationChanged_Parms, NULL );
};

// Function Engine.Actor.InterpolationFinished
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void AActor::eventInterpolationFinished ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationFinished = NULL;

	if ( ! pFnInterpolationFinished )
		pFnInterpolationFinished = (UFunction*) UObject::GObjObjects()->Data[ 7267 ];

	AActor_eventInterpolationFinished_Parms InterpolationFinished_Parms;
	InterpolationFinished_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationFinished, &InterpolationFinished_Parms, NULL );
};

// Function Engine.Actor.InterpolationStarted
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )
// class UInterpGroupInst*        GroupInst                      ( CPF_Parm )

void AActor::eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst )
{
	static UFunction* pFnInterpolationStarted = NULL;

	if ( ! pFnInterpolationStarted )
		pFnInterpolationStarted = (UFunction*) UObject::GObjObjects()->Data[ 7264 ];

	AActor_eventInterpolationStarted_Parms InterpolationStarted_Parms;
	InterpolationStarted_Parms.InterpAction = InterpAction;
	InterpolationStarted_Parms.GroupInst = GroupInst;

	this->ProcessEvent ( pFnInterpolationStarted, &InterpolationStarted_Parms, NULL );
};

// Function Engine.Actor.PickedUpBy
// [0x00020000] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AActor::PickedUpBy ( class APawn* P )
{
	static UFunction* pFnPickedUpBy = NULL;

	if ( ! pFnPickedUpBy )
		pFnPickedUpBy = (UFunction*) UObject::GObjObjects()->Data[ 7262 ];

	AActor_execPickedUpBy_Parms PickedUpBy_Parms;
	PickedUpBy_Parms.P = P;

	this->ProcessEvent ( pFnPickedUpBy, &PickedUpBy_Parms, NULL );
};

// Function Engine.Actor.SpawnedByKismet
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventSpawnedByKismet ( )
{
	static UFunction* pFnSpawnedByKismet = NULL;

	if ( ! pFnSpawnedByKismet )
		pFnSpawnedByKismet = (UFunction*) UObject::GObjObjects()->Data[ 7261 ];

	AActor_eventSpawnedByKismet_Parms SpawnedByKismet_Parms;

	this->ProcessEvent ( pFnSpawnedByKismet, &SpawnedByKismet_Parms, NULL );
};

// Function Engine.Actor.GetTargetLocation
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  RequestedBy                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRequestAlternateLoc           ( CPF_OptionalParm | CPF_Parm )

struct FVector AActor::GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc )
{
	static UFunction* pFnGetTargetLocation = NULL;

	if ( ! pFnGetTargetLocation )
		pFnGetTargetLocation = (UFunction*) UObject::GObjObjects()->Data[ 7257 ];

	AActor_execGetTargetLocation_Parms GetTargetLocation_Parms;
	GetTargetLocation_Parms.RequestedBy = RequestedBy;
	GetTargetLocation_Parms.bRequestAlternateLoc = bRequestAlternateLoc;

	pFnGetTargetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTargetLocation, &GetTargetLocation_Parms, NULL );

	pFnGetTargetLocation->FunctionFlags |= 0x400;

	return GetTargetLocation_Parms.ReturnValue;
};

// Function Engine.Actor.FindGoodEndView
// [0x00420102] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// struct FRotator                GoodRotation                   ( CPF_Parm | CPF_OutParm )

void AActor::FindGoodEndView ( class APlayerController* PC, struct FRotator* GoodRotation )
{
	static UFunction* pFnFindGoodEndView = NULL;

	if ( ! pFnFindGoodEndView )
		pFnFindGoodEndView = (UFunction*) UObject::GObjObjects()->Data[ 7254 ];

	AActor_execFindGoodEndView_Parms FindGoodEndView_Parms;
	FindGoodEndView_Parms.PC = PC;

	this->ProcessEvent ( pFnFindGoodEndView, &FindGoodEndView_Parms, NULL );

	if ( GoodRotation )
		memcpy ( GoodRotation, &FindGoodEndView_Parms.GoodRotation, 0xC );
};

// Function Engine.Actor.NotifyLocalPlayerTeamReceived
// [0x00020100] 
// Parameters infos:

void AActor::NotifyLocalPlayerTeamReceived ( )
{
	static UFunction* pFnNotifyLocalPlayerTeamReceived = NULL;

	if ( ! pFnNotifyLocalPlayerTeamReceived )
		pFnNotifyLocalPlayerTeamReceived = (UFunction*) UObject::GObjObjects()->Data[ 7253 ];

	AActor_execNotifyLocalPlayerTeamReceived_Parms NotifyLocalPlayerTeamReceived_Parms;

	this->ProcessEvent ( pFnNotifyLocalPlayerTeamReceived, &NotifyLocalPlayerTeamReceived_Parms, NULL );
};

// Function Engine.Actor.GetLocationStringFor
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

struct FString AActor::GetLocationStringFor ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnGetLocationStringFor = NULL;

	if ( ! pFnGetLocationStringFor )
		pFnGetLocationStringFor = (UFunction*) UObject::GObjObjects()->Data[ 7250 ];

	AActor_execGetLocationStringFor_Parms GetLocationStringFor_Parms;
	GetLocationStringFor_Parms.PRI = PRI;

	this->ProcessEvent ( pFnGetLocationStringFor, &GetLocationStringFor_Parms, NULL );

	return GetLocationStringFor_Parms.ReturnValue;
};

// Function Engine.Actor.ScriptGetTeamNum
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AActor::eventScriptGetTeamNum ( )
{
	static UFunction* pFnScriptGetTeamNum = NULL;

	if ( ! pFnScriptGetTeamNum )
		pFnScriptGetTeamNum = (UFunction*) UObject::GObjObjects()->Data[ 7248 ];

	AActor_eventScriptGetTeamNum_Parms ScriptGetTeamNum_Parms;

	this->ProcessEvent ( pFnScriptGetTeamNum, &ScriptGetTeamNum_Parms, NULL );

	return ScriptGetTeamNum_Parms.ReturnValue;
};

// Function Engine.Actor.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AActor::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = (UFunction*) UObject::GObjObjects()->Data[ 7246 ];

	AActor_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.Actor.PawnBaseDied
// [0x00020000] 
// Parameters infos:

void AActor::PawnBaseDied ( )
{
	static UFunction* pFnPawnBaseDied = NULL;

	if ( ! pFnPawnBaseDied )
		pFnPawnBaseDied = (UFunction*) UObject::GObjObjects()->Data[ 7245 ];

	AActor_execPawnBaseDied_Parms PawnBaseDied_Parms;

	this->ProcessEvent ( pFnPawnBaseDied, &PawnBaseDied_Parms, NULL );
};

// Function Engine.Actor.IsPlayerOwned
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsPlayerOwned ( )
{
	static UFunction* pFnIsPlayerOwned = NULL;

	if ( ! pFnIsPlayerOwned )
		pFnIsPlayerOwned = (UFunction*) UObject::GObjObjects()->Data[ 7243 ];

	AActor_execIsPlayerOwned_Parms IsPlayerOwned_Parms;

	pFnIsPlayerOwned->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayerOwned, &IsPlayerOwned_Parms, NULL );

	pFnIsPlayerOwned->FunctionFlags |= 0x400;

	return IsPlayerOwned_Parms.ReturnValue;
};

// Function Engine.Actor.GetActorEyesViewPoint
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void AActor::eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetActorEyesViewPoint = NULL;

	if ( ! pFnGetActorEyesViewPoint )
		pFnGetActorEyesViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 7240 ];

	AActor_eventGetActorEyesViewPoint_Parms GetActorEyesViewPoint_Parms;

	this->ProcessEvent ( pFnGetActorEyesViewPoint, &GetActorEyesViewPoint_Parms, NULL );

	if ( out_Location )
		memcpy ( out_Location, &GetActorEyesViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetActorEyesViewPoint_Parms.out_Rotation, 0xC );
};

// Function Engine.Actor.IsStationary
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsStationary ( )
{
	static UFunction* pFnIsStationary = NULL;

	if ( ! pFnIsStationary )
		pFnIsStationary = (UFunction*) UObject::GObjObjects()->Data[ 7238 ];

	AActor_execIsStationary_Parms IsStationary_Parms;

	this->ProcessEvent ( pFnIsStationary, &IsStationary_Parms, NULL );

	return IsStationary_Parms.ReturnValue;
};

// Function Engine.Actor.GetActorFaceFXAsset
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UFaceFXAsset*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFaceFXAsset* AActor::eventGetActorFaceFXAsset ( )
{
	static UFunction* pFnGetActorFaceFXAsset = NULL;

	if ( ! pFnGetActorFaceFXAsset )
		pFnGetActorFaceFXAsset = (UFunction*) UObject::GObjObjects()->Data[ 7236 ];

	AActor_eventGetActorFaceFXAsset_Parms GetActorFaceFXAsset_Parms;

	this->ProcessEvent ( pFnGetActorFaceFXAsset, &GetActorFaceFXAsset_Parms, NULL );

	return GetActorFaceFXAsset_Parms.ReturnValue;
};

// Function Engine.Actor.CanActorPlayFaceFXAnim
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::CanActorPlayFaceFXAnim ( )
{
	static UFunction* pFnCanActorPlayFaceFXAnim = NULL;

	if ( ! pFnCanActorPlayFaceFXAnim )
		pFnCanActorPlayFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 7234 ];

	AActor_execCanActorPlayFaceFXAnim_Parms CanActorPlayFaceFXAnim_Parms;

	this->ProcessEvent ( pFnCanActorPlayFaceFXAnim, &CanActorPlayFaceFXAnim_Parms, NULL );

	return CanActorPlayFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.Actor.IsActorPlayingFaceFXAnim
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsActorPlayingFaceFXAnim ( )
{
	static UFunction* pFnIsActorPlayingFaceFXAnim = NULL;

	if ( ! pFnIsActorPlayingFaceFXAnim )
		pFnIsActorPlayingFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 7232 ];

	AActor_execIsActorPlayingFaceFXAnim_Parms IsActorPlayingFaceFXAnim_Parms;

	this->ProcessEvent ( pFnIsActorPlayingFaceFXAnim, &IsActorPlayingFaceFXAnim_Parms, NULL );

	return IsActorPlayingFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.Actor.SetSkelControlScale
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FName                   SkelControlName                ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void AActor::eventSetSkelControlScale ( struct FName SkelControlName, float Scale )
{
	static UFunction* pFnSetSkelControlScale = NULL;

	if ( ! pFnSetSkelControlScale )
		pFnSetSkelControlScale = (UFunction*) UObject::GObjObjects()->Data[ 7229 ];

	AActor_eventSetSkelControlScale_Parms SetSkelControlScale_Parms;
	memcpy ( &SetSkelControlScale_Parms.SkelControlName, &SkelControlName, 0x8 );
	SetSkelControlScale_Parms.Scale = Scale;

	this->ProcessEvent ( pFnSetSkelControlScale, &SetSkelControlScale_Parms, NULL );
};

// Function Engine.Actor.SetMorphWeight
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FName                   MorphNodeName                  ( CPF_Parm )
// float                          MorphWeight                    ( CPF_Parm )

void AActor::eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight )
{
	static UFunction* pFnSetMorphWeight = NULL;

	if ( ! pFnSetMorphWeight )
		pFnSetMorphWeight = (UFunction*) UObject::GObjObjects()->Data[ 7226 ];

	AActor_eventSetMorphWeight_Parms SetMorphWeight_Parms;
	memcpy ( &SetMorphWeight_Parms.MorphNodeName, &MorphNodeName, 0x8 );
	SetMorphWeight_Parms.MorphWeight = MorphWeight;

	this->ProcessEvent ( pFnSetMorphWeight, &SetMorphWeight_Parms, NULL );
};

// Function Engine.Actor.StopActorFaceFXAnim
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventStopActorFaceFXAnim ( )
{
	static UFunction* pFnStopActorFaceFXAnim = NULL;

	if ( ! pFnStopActorFaceFXAnim )
		pFnStopActorFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 7225 ];

	AActor_eventStopActorFaceFXAnim_Parms StopActorFaceFXAnim_Parms;

	this->ProcessEvent ( pFnStopActorFaceFXAnim, &StopActorFaceFXAnim_Parms, NULL );
};

// Function Engine.Actor.PlayActorFaceFXAnim
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )
// struct FString                 GroupName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SeqName                        ( CPF_Parm | CPF_NeedCtorLink )
// class USoundCue*               SoundCueToPlay                 ( CPF_Parm )

bool AActor::eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay )
{
	static UFunction* pFnPlayActorFaceFXAnim = NULL;

	if ( ! pFnPlayActorFaceFXAnim )
		pFnPlayActorFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 7219 ];

	AActor_eventPlayActorFaceFXAnim_Parms PlayActorFaceFXAnim_Parms;
	PlayActorFaceFXAnim_Parms.AnimSet = AnimSet;
	memcpy ( &PlayActorFaceFXAnim_Parms.GroupName, &GroupName, 0x10 );
	memcpy ( &PlayActorFaceFXAnim_Parms.SeqName, &SeqName, 0x10 );
	PlayActorFaceFXAnim_Parms.SoundCueToPlay = SoundCueToPlay;

	this->ProcessEvent ( pFnPlayActorFaceFXAnim, &PlayActorFaceFXAnim_Parms, NULL );

	return PlayActorFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.Actor.FinishAnimControl
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void AActor::eventFinishAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnFinishAnimControl = NULL;

	if ( ! pFnFinishAnimControl )
		pFnFinishAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 7217 ];

	AActor_eventFinishAnimControl_Parms FinishAnimControl_Parms;
	FinishAnimControl_Parms.InInterpGroup = InInterpGroup;

	this->ProcessEvent ( pFnFinishAnimControl, &FinishAnimControl_Parms, NULL );
};

// Function Engine.Actor.SetAnimPosition
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )

void AActor::eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping )
{
	static UFunction* pFnSetAnimPosition = NULL;

	if ( ! pFnSetAnimPosition )
		pFnSetAnimPosition = (UFunction*) UObject::GObjObjects()->Data[ 7210 ];

	AActor_eventSetAnimPosition_Parms SetAnimPosition_Parms;
	memcpy ( &SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	SetAnimPosition_Parms.InPosition = InPosition;
	SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	SetAnimPosition_Parms.bLooping = bLooping;

	this->ProcessEvent ( pFnSetAnimPosition, &SetAnimPosition_Parms, NULL );
};

// Function Engine.Actor.BeginAnimControl
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void AActor::eventBeginAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnBeginAnimControl = NULL;

	if ( ! pFnBeginAnimControl )
		pFnBeginAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 7208 ];

	AActor_eventBeginAnimControl_Parms BeginAnimControl_Parms;
	BeginAnimControl_Parms.InInterpGroup = InInterpGroup;

	this->ProcessEvent ( pFnBeginAnimControl, &BeginAnimControl_Parms, NULL );
};

// Function Engine.Actor.OnAnimPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )

void AActor::eventOnAnimPlay ( class UAnimNodeSequence* SeqNode )
{
	static UFunction* pFnOnAnimPlay = NULL;

	if ( ! pFnOnAnimPlay )
		pFnOnAnimPlay = (UFunction*) UObject::GObjObjects()->Data[ 7206 ];

	AActor_eventOnAnimPlay_Parms OnAnimPlay_Parms;
	OnAnimPlay_Parms.SeqNode = SeqNode;

	this->ProcessEvent ( pFnOnAnimPlay, &OnAnimPlay_Parms, NULL );
};

// Function Engine.Actor.OnAnimEnd
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void AActor::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 7202 ];

	AActor_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function Engine.Actor.OnMakeNoise
// [0x00020102] 
// Parameters infos:
// class USeqAct_MakeNoise*       Action                         ( CPF_Parm )

void AActor::OnMakeNoise ( class USeqAct_MakeNoise* Action )
{
	static UFunction* pFnOnMakeNoise = NULL;

	if ( ! pFnOnMakeNoise )
		pFnOnMakeNoise = (UFunction*) UObject::GObjObjects()->Data[ 7198 ];

	AActor_execOnMakeNoise_Parms OnMakeNoise_Parms;
	OnMakeNoise_Parms.Action = Action;

	this->ProcessEvent ( pFnOnMakeNoise, &OnMakeNoise_Parms, NULL );
};

// Function Engine.Actor.DoKismetAttachment
// [0x00020002] 
// Parameters infos:
// class AActor*                  Attachment                     ( CPF_Parm )
// class USeqAct_AttachToActor*   Action                         ( CPF_Parm )

void AActor::DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action )
{
	static UFunction* pFnDoKismetAttachment = NULL;

	if ( ! pFnDoKismetAttachment )
		pFnDoKismetAttachment = (UFunction*) UObject::GObjObjects()->Data[ 7190 ];

	AActor_execDoKismetAttachment_Parms DoKismetAttachment_Parms;
	DoKismetAttachment_Parms.Attachment = Attachment;
	DoKismetAttachment_Parms.Action = Action;

	this->ProcessEvent ( pFnDoKismetAttachment, &DoKismetAttachment_Parms, NULL );
};

// Function Engine.Actor.OnAttachToActor
// [0x00020002] 
// Parameters infos:
// class USeqAct_AttachToActor*   Action                         ( CPF_Parm )

void AActor::OnAttachToActor ( class USeqAct_AttachToActor* Action )
{
	static UFunction* pFnOnAttachToActor = NULL;

	if ( ! pFnOnAttachToActor )
		pFnOnAttachToActor = (UFunction*) UObject::GObjObjects()->Data[ 7183 ];

	AActor_execOnAttachToActor_Parms OnAttachToActor_Parms;
	OnAttachToActor_Parms.Action = Action;

	this->ProcessEvent ( pFnOnAttachToActor, &OnAttachToActor_Parms, NULL );
};

// Function Engine.Actor.BioEnqueueDoKismetAttachment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  InAttachment                   ( CPF_Parm )
// unsigned long                  bInDetach                      ( CPF_Parm )
// unsigned long                  bInHardAttach                  ( CPF_Parm )
// struct FName                   InBoneName                     ( CPF_Parm )
// unsigned long                  bInUseRelativeOffset           ( CPF_Parm )
// struct FVector                 InRelativeOffset               ( CPF_Parm )
// unsigned long                  bInUseRelativeRotation         ( CPF_Parm )
// struct FRotator                InRelativeRotation             ( CPF_Parm )

void AActor::BioEnqueueDoKismetAttachment ( class AActor* InAttachment, unsigned long bInDetach, unsigned long bInHardAttach, struct FName InBoneName, unsigned long bInUseRelativeOffset, struct FVector InRelativeOffset, unsigned long bInUseRelativeRotation, struct FRotator InRelativeRotation )
{
	static UFunction* pFnBioEnqueueDoKismetAttachment = NULL;

	if ( ! pFnBioEnqueueDoKismetAttachment )
		pFnBioEnqueueDoKismetAttachment = (UFunction*) UObject::GObjObjects()->Data[ 7174 ];

	AActor_execBioEnqueueDoKismetAttachment_Parms BioEnqueueDoKismetAttachment_Parms;
	BioEnqueueDoKismetAttachment_Parms.InAttachment = InAttachment;
	BioEnqueueDoKismetAttachment_Parms.bInDetach = bInDetach;
	BioEnqueueDoKismetAttachment_Parms.bInHardAttach = bInHardAttach;
	memcpy ( &BioEnqueueDoKismetAttachment_Parms.InBoneName, &InBoneName, 0x8 );
	BioEnqueueDoKismetAttachment_Parms.bInUseRelativeOffset = bInUseRelativeOffset;
	memcpy ( &BioEnqueueDoKismetAttachment_Parms.InRelativeOffset, &InRelativeOffset, 0xC );
	BioEnqueueDoKismetAttachment_Parms.bInUseRelativeRotation = bInUseRelativeRotation;
	memcpy ( &BioEnqueueDoKismetAttachment_Parms.InRelativeRotation, &InRelativeRotation, 0xC );

	pFnBioEnqueueDoKismetAttachment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioEnqueueDoKismetAttachment, &BioEnqueueDoKismetAttachment_Parms, NULL );

	pFnBioEnqueueDoKismetAttachment->FunctionFlags |= 0x400;
};

// Function Engine.Actor.BioDoKismetAttachment
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  InAttachment                   ( CPF_Parm )
// unsigned long                  bInDetach                      ( CPF_Parm )
// unsigned long                  bInHardAttach                  ( CPF_Parm )
// struct FName                   InBoneName                     ( CPF_Parm )
// unsigned long                  bInUseRelativeOffset           ( CPF_Parm )
// struct FVector                 InRelativeOffset               ( CPF_Parm )
// unsigned long                  bInUseRelativeRotation         ( CPF_Parm )
// struct FRotator                InRelativeRotation             ( CPF_Parm )

void AActor::eventBioDoKismetAttachment ( class AActor* InAttachment, unsigned long bInDetach, unsigned long bInHardAttach, struct FName InBoneName, unsigned long bInUseRelativeOffset, struct FVector InRelativeOffset, unsigned long bInUseRelativeRotation, struct FRotator InRelativeRotation )
{
	static UFunction* pFnBioDoKismetAttachment = NULL;

	if ( ! pFnBioDoKismetAttachment )
		pFnBioDoKismetAttachment = (UFunction*) UObject::GObjObjects()->Data[ 7156 ];

	AActor_eventBioDoKismetAttachment_Parms BioDoKismetAttachment_Parms;
	BioDoKismetAttachment_Parms.InAttachment = InAttachment;
	BioDoKismetAttachment_Parms.bInDetach = bInDetach;
	BioDoKismetAttachment_Parms.bInHardAttach = bInHardAttach;
	memcpy ( &BioDoKismetAttachment_Parms.InBoneName, &InBoneName, 0x8 );
	BioDoKismetAttachment_Parms.bInUseRelativeOffset = bInUseRelativeOffset;
	memcpy ( &BioDoKismetAttachment_Parms.InRelativeOffset, &InRelativeOffset, 0xC );
	BioDoKismetAttachment_Parms.bInUseRelativeRotation = bInUseRelativeRotation;
	memcpy ( &BioDoKismetAttachment_Parms.InRelativeRotation, &InRelativeRotation, 0xC );

	this->ProcessEvent ( pFnBioDoKismetAttachment, &BioDoKismetAttachment_Parms, NULL );
};

// Function Engine.Actor.OnToggleHidden
// [0x00020102] 
// Parameters infos:
// class USeqAct_ToggleHidden*    Action                         ( CPF_Parm )

void AActor::OnToggleHidden ( class USeqAct_ToggleHidden* Action )
{
	static UFunction* pFnOnToggleHidden = NULL;

	if ( ! pFnOnToggleHidden )
		pFnOnToggleHidden = (UFunction*) UObject::GObjObjects()->Data[ 7148 ];

	AActor_execOnToggleHidden_Parms OnToggleHidden_Parms;
	OnToggleHidden_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggleHidden, &OnToggleHidden_Parms, NULL );
};

// Function Engine.Actor.OnChangeCollision
// [0x00020002] 
// Parameters infos:
// class USeqAct_ChangeCollision* Action                         ( CPF_Parm )

void AActor::OnChangeCollision ( class USeqAct_ChangeCollision* Action )
{
	static UFunction* pFnOnChangeCollision = NULL;

	if ( ! pFnOnChangeCollision )
		pFnOnChangeCollision = (UFunction*) UObject::GObjObjects()->Data[ 7138 ];

	AActor_execOnChangeCollision_Parms OnChangeCollision_Parms;
	OnChangeCollision_Parms.Action = Action;

	this->ProcessEvent ( pFnOnChangeCollision, &OnChangeCollision_Parms, NULL );
};

// Function Engine.Actor.OnSetPhysics
// [0x00020102] 
// Parameters infos:
// class USeqAct_SetPhysics*      Action                         ( CPF_Parm )

void AActor::OnSetPhysics ( class USeqAct_SetPhysics* Action )
{
	static UFunction* pFnOnSetPhysics = NULL;

	if ( ! pFnOnSetPhysics )
		pFnOnSetPhysics = (UFunction*) UObject::GObjObjects()->Data[ 7134 ];

	AActor_execOnSetPhysics_Parms OnSetPhysics_Parms;
	OnSetPhysics_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetPhysics, &OnSetPhysics_Parms, NULL );
};

// Function Engine.Actor.OnSetBlockRigidBody
// [0x00020102] 
// Parameters infos:
// class USeqAct_SetBlockRigidBody* Action                         ( CPF_Parm )

void AActor::OnSetBlockRigidBody ( class USeqAct_SetBlockRigidBody* Action )
{
	static UFunction* pFnOnSetBlockRigidBody = NULL;

	if ( ! pFnOnSetBlockRigidBody )
		pFnOnSetBlockRigidBody = (UFunction*) UObject::GObjObjects()->Data[ 7129 ];

	AActor_execOnSetBlockRigidBody_Parms OnSetBlockRigidBody_Parms;
	OnSetBlockRigidBody_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetBlockRigidBody, &OnSetBlockRigidBody_Parms, NULL );
};

// Function Engine.Actor.OnSetVelocity
// [0x00020102] 
// Parameters infos:
// class USeqAct_SetVelocity*     Action                         ( CPF_Parm )

void AActor::OnSetVelocity ( class USeqAct_SetVelocity* Action )
{
	static UFunction* pFnOnSetVelocity = NULL;

	if ( ! pFnOnSetVelocity )
		pFnOnSetVelocity = (UFunction*) UObject::GObjObjects()->Data[ 7120 ];

	AActor_execOnSetVelocity_Parms OnSetVelocity_Parms;
	OnSetVelocity_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetVelocity, &OnSetVelocity_Parms, NULL );
};

// Function Engine.Actor.OnTeleportArrived
// [0x00020000] 
// Parameters infos:

void AActor::OnTeleportArrived ( )
{
	static UFunction* pFnOnTeleportArrived = NULL;

	if ( ! pFnOnTeleportArrived )
		pFnOnTeleportArrived = (UFunction*) UObject::GObjObjects()->Data[ 7119 ];

	AActor_execOnTeleportArrived_Parms OnTeleportArrived_Parms;

	this->ProcessEvent ( pFnOnTeleportArrived, &OnTeleportArrived_Parms, NULL );
};

// Function Engine.Actor.OnTeleport
// [0x00020102] 
// Parameters infos:
// class USeqAct_Teleport*        Action                         ( CPF_Parm )

void AActor::OnTeleport ( class USeqAct_Teleport* Action )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 7106 ];

	AActor_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.Action = Action;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function Engine.Actor.OnModifyHealth
// [0x00020102] 
// Parameters infos:
// class USeqAct_ModifyHealth*    Action                         ( CPF_Parm )

void AActor::OnModifyHealth ( class USeqAct_ModifyHealth* Action )
{
	static UFunction* pFnOnModifyHealth = NULL;

	if ( ! pFnOnModifyHealth )
		pFnOnModifyHealth = (UFunction*) UObject::GObjObjects()->Data[ 7097 ];

	AActor_execOnModifyHealth_Parms OnModifyHealth_Parms;
	OnModifyHealth_Parms.Action = Action;

	this->ProcessEvent ( pFnOnModifyHealth, &OnModifyHealth_Parms, NULL );
};

// Function Engine.Actor.PrestreamTextures
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// float                          Seconds                        ( CPF_Parm )
// unsigned long                  bEnableStreaming               ( CPF_Parm )
// int                            CinematicTextureGroups         ( CPF_OptionalParm | CPF_Parm )

void AActor::PrestreamTextures ( float Seconds, unsigned long bEnableStreaming, int CinematicTextureGroups )
{
	static UFunction* pFnPrestreamTextures = NULL;

	if ( ! pFnPrestreamTextures )
		pFnPrestreamTextures = (UFunction*) UObject::GObjObjects()->Data[ 7093 ];

	AActor_execPrestreamTextures_Parms PrestreamTextures_Parms;
	PrestreamTextures_Parms.Seconds = Seconds;
	PrestreamTextures_Parms.bEnableStreaming = bEnableStreaming;
	PrestreamTextures_Parms.CinematicTextureGroups = CinematicTextureGroups;

	pFnPrestreamTextures->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrestreamTextures, &PrestreamTextures_Parms, NULL );

	pFnPrestreamTextures->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ShutDown
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AActor::eventShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 7089 ];

	AActor_eventShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function Engine.Actor.SetNetUpdateTime
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewUpdateTime                  ( CPF_Parm )

void AActor::SetNetUpdateTime ( float NewUpdateTime )
{
	static UFunction* pFnSetNetUpdateTime = NULL;

	if ( ! pFnSetNetUpdateTime )
		pFnSetNetUpdateTime = (UFunction*) UObject::GObjObjects()->Data[ 7087 ];

	AActor_execSetNetUpdateTime_Parms SetNetUpdateTime_Parms;
	SetNetUpdateTime_Parms.NewUpdateTime = NewUpdateTime;

	pFnSetNetUpdateTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNetUpdateTime, &SetNetUpdateTime_Parms, NULL );

	pFnSetNetUpdateTime->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ForceNetRelevant
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AActor::eventForceNetRelevant ( )
{
	static UFunction* pFnForceNetRelevant = NULL;

	if ( ! pFnForceNetRelevant )
		pFnForceNetRelevant = (UFunction*) UObject::GObjObjects()->Data[ 7083 ];

	AActor_eventForceNetRelevant_Parms ForceNetRelevant_Parms;

	this->ProcessEvent ( pFnForceNetRelevant, &ForceNetRelevant_Parms, NULL );
};

// Function Engine.Actor.OnDestroy
// [0x00020102] 
// Parameters infos:
// class USeqAct_Destroy*         Action                         ( CPF_Parm )

void AActor::OnDestroy ( class USeqAct_Destroy* Action )
{
	static UFunction* pFnOnDestroy = NULL;

	if ( ! pFnOnDestroy )
		pFnOnDestroy = (UFunction*) UObject::GObjObjects()->Data[ 7075 ];

	AActor_execOnDestroy_Parms OnDestroy_Parms;
	OnDestroy_Parms.Action = Action;

	this->ProcessEvent ( pFnOnDestroy, &OnDestroy_Parms, NULL );
};

// Function Engine.Actor.ClearLatentAction
// [0x00024103] ( FUNC_Final )
// Parameters infos:
// class UClass*                  actionClass                    ( CPF_Parm )
// unsigned long                  bAborted                       ( CPF_OptionalParm | CPF_Parm )
// class USeqAct_Latent*          exceptionAction                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bCancelled                     ( CPF_OptionalParm | CPF_Parm )

void AActor::ClearLatentAction ( class UClass* actionClass, unsigned long bAborted, class USeqAct_Latent* exceptionAction, unsigned long bCancelled )
{
	static UFunction* pFnClearLatentAction = NULL;

	if ( ! pFnClearLatentAction )
		pFnClearLatentAction = (UFunction*) UObject::GObjObjects()->Data[ 7068 ];

	AActor_execClearLatentAction_Parms ClearLatentAction_Parms;
	ClearLatentAction_Parms.actionClass = actionClass;
	ClearLatentAction_Parms.bAborted = bAborted;
	ClearLatentAction_Parms.exceptionAction = exceptionAction;
	ClearLatentAction_Parms.bCancelled = bCancelled;

	this->ProcessEvent ( pFnClearLatentAction, &ClearLatentAction_Parms, NULL );
};

// Function Engine.Actor.FindEventsOfClass
// [0x00424103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  EventClass                     ( CPF_Parm )
// unsigned long                  bIncludeDisabled               ( CPF_OptionalParm | CPF_Parm )
// struct TArray<class USequenceEvent*> out_EventList                  ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AActor::FindEventsOfClass ( class UClass* EventClass, unsigned long bIncludeDisabled, struct TArray<class USequenceEvent*>* out_EventList )
{
	static UFunction* pFnFindEventsOfClass = NULL;

	if ( ! pFnFindEventsOfClass )
		pFnFindEventsOfClass = (UFunction*) UObject::GObjObjects()->Data[ 7057 ];

	AActor_execFindEventsOfClass_Parms FindEventsOfClass_Parms;
	FindEventsOfClass_Parms.EventClass = EventClass;
	FindEventsOfClass_Parms.bIncludeDisabled = bIncludeDisabled;

	this->ProcessEvent ( pFnFindEventsOfClass, &FindEventsOfClass_Parms, NULL );

	if ( out_EventList )
		memcpy ( out_EventList, &FindEventsOfClass_Parms.out_EventList, 0x10 );

	return FindEventsOfClass_Parms.ReturnValue;
};

// Function Engine.Actor.ActivateEventClass
// [0x00424103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  InClass                        ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )
// struct TArray<class USequenceEvent*> EventList                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct TArray<int>             ActivateIndices                ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct TArray<class USequenceEvent*> ActivatedEvents                ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AActor::ActivateEventClass ( class UClass* InClass, class AActor* InInstigator, unsigned long bTest, struct TArray<class USequenceEvent*>* EventList, struct TArray<int>* ActivateIndices, struct TArray<class USequenceEvent*>* ActivatedEvents )
{
	static UFunction* pFnActivateEventClass = NULL;

	if ( ! pFnActivateEventClass )
		pFnActivateEventClass = (UFunction*) UObject::GObjObjects()->Data[ 7026 ];

	AActor_execActivateEventClass_Parms ActivateEventClass_Parms;
	ActivateEventClass_Parms.InClass = InClass;
	ActivateEventClass_Parms.InInstigator = InInstigator;
	ActivateEventClass_Parms.bTest = bTest;

	this->ProcessEvent ( pFnActivateEventClass, &ActivateEventClass_Parms, NULL );

	if ( EventList )
		memcpy ( EventList, &ActivateEventClass_Parms.EventList, 0x10 );

	if ( ActivateIndices )
		memcpy ( ActivateIndices, &ActivateEventClass_Parms.ActivateIndices, 0x10 );

	if ( ActivatedEvents )
		memcpy ( ActivatedEvents, &ActivateEventClass_Parms.ActivatedEvents, 0x10 );

	return ActivateEventClass_Parms.ReturnValue;
};

// Function Engine.Actor.TriggerGlobalEventClass
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  InEventClass                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// int                            ActivateIndex                  ( CPF_OptionalParm | CPF_Parm )

bool AActor::TriggerGlobalEventClass ( class UClass* InEventClass, class AActor* InInstigator, int ActivateIndex )
{
	static UFunction* pFnTriggerGlobalEventClass = NULL;

	if ( ! pFnTriggerGlobalEventClass )
		pFnTriggerGlobalEventClass = (UFunction*) UObject::GObjObjects()->Data[ 7029 ];

	AActor_execTriggerGlobalEventClass_Parms TriggerGlobalEventClass_Parms;
	TriggerGlobalEventClass_Parms.InEventClass = InEventClass;
	TriggerGlobalEventClass_Parms.InInstigator = InInstigator;
	TriggerGlobalEventClass_Parms.ActivateIndex = ActivateIndex;

	this->ProcessEvent ( pFnTriggerGlobalEventClass, &TriggerGlobalEventClass_Parms, NULL );

	return TriggerGlobalEventClass_Parms.ReturnValue;
};

// Function Engine.Actor.ReceivedNewEvent
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USequenceEvent*          Evt                            ( CPF_Parm )

void AActor::eventReceivedNewEvent ( class USequenceEvent* Evt )
{
	static UFunction* pFnReceivedNewEvent = NULL;

	if ( ! pFnReceivedNewEvent )
		pFnReceivedNewEvent = (UFunction*) UObject::GObjObjects()->Data[ 7027 ];

	AActor_eventReceivedNewEvent_Parms ReceivedNewEvent_Parms;
	ReceivedNewEvent_Parms.Evt = Evt;

	this->ProcessEvent ( pFnReceivedNewEvent, &ReceivedNewEvent_Parms, NULL );
};

// Function Engine.Actor.TriggerEventClass
// [0x00424102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  InEventClass                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// int                            ActivateIndex                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )
// struct TArray<class USequenceEvent*> ActivatedEvents                ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AActor::TriggerEventClass ( class UClass* InEventClass, class AActor* InInstigator, int ActivateIndex, unsigned long bTest, struct TArray<class USequenceEvent*>* ActivatedEvents )
{
	static UFunction* pFnTriggerEventClass = NULL;

	if ( ! pFnTriggerEventClass )
		pFnTriggerEventClass = (UFunction*) UObject::GObjObjects()->Data[ 7016 ];

	AActor_execTriggerEventClass_Parms TriggerEventClass_Parms;
	TriggerEventClass_Parms.InEventClass = InEventClass;
	TriggerEventClass_Parms.InInstigator = InInstigator;
	TriggerEventClass_Parms.ActivateIndex = ActivateIndex;
	TriggerEventClass_Parms.bTest = bTest;

	this->ProcessEvent ( pFnTriggerEventClass, &TriggerEventClass_Parms, NULL );

	if ( ActivatedEvents )
		memcpy ( ActivatedEvents, &TriggerEventClass_Parms.ActivatedEvents, 0x10 );

	return TriggerEventClass_Parms.ReturnValue;
};

// Function Engine.Actor.EffectIsRelevant
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// unsigned long                  bForceDedicated                ( CPF_Parm )
// float                          CullDistance                   ( CPF_OptionalParm | CPF_Parm )

bool AActor::EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance )
{
	static UFunction* pFnEffectIsRelevant = NULL;

	if ( ! pFnEffectIsRelevant )
		pFnEffectIsRelevant = (UFunction*) UObject::GObjObjects()->Data[ 7001 ];

	AActor_execEffectIsRelevant_Parms EffectIsRelevant_Parms;
	memcpy ( &EffectIsRelevant_Parms.SpawnLocation, &SpawnLocation, 0xC );
	EffectIsRelevant_Parms.bForceDedicated = bForceDedicated;
	EffectIsRelevant_Parms.CullDistance = CullDistance;

	this->ProcessEvent ( pFnEffectIsRelevant, &EffectIsRelevant_Parms, NULL );

	return EffectIsRelevant_Parms.ReturnValue;
};

// Function Engine.Actor.CheckMaxEffectDistance
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// float                          CullDistance                   ( CPF_OptionalParm | CPF_Parm )

bool AActor::CheckMaxEffectDistance ( class APlayerController* P, struct FVector SpawnLocation, float CullDistance )
{
	static UFunction* pFnCheckMaxEffectDistance = NULL;

	if ( ! pFnCheckMaxEffectDistance )
		pFnCheckMaxEffectDistance = (UFunction*) UObject::GObjObjects()->Data[ 6991 ];

	AActor_execCheckMaxEffectDistance_Parms CheckMaxEffectDistance_Parms;
	CheckMaxEffectDistance_Parms.P = P;
	memcpy ( &CheckMaxEffectDistance_Parms.SpawnLocation, &SpawnLocation, 0xC );
	CheckMaxEffectDistance_Parms.CullDistance = CullDistance;

	this->ProcessEvent ( pFnCheckMaxEffectDistance, &CheckMaxEffectDistance_Parms, NULL );

	return CheckMaxEffectDistance_Parms.ReturnValue;
};

// Function Engine.Actor.ApplyFluidSurfaceImpact
// [0x00020102] 
// Parameters infos:
// class AFluidSurfaceActor*      Fluid                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void AActor::ApplyFluidSurfaceImpact ( class AFluidSurfaceActor* Fluid, struct FVector HitLocation )
{
	static UFunction* pFnApplyFluidSurfaceImpact = NULL;

	if ( ! pFnApplyFluidSurfaceImpact )
		pFnApplyFluidSurfaceImpact = (UFunction*) UObject::GObjObjects()->Data[ 6981 ];

	AActor_execApplyFluidSurfaceImpact_Parms ApplyFluidSurfaceImpact_Parms;
	ApplyFluidSurfaceImpact_Parms.Fluid = Fluid;
	memcpy ( &ApplyFluidSurfaceImpact_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnApplyFluidSurfaceImpact, &ApplyFluidSurfaceImpact_Parms, NULL );
};

// Function Engine.Actor.CanSplash
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::CanSplash ( )
{
	static UFunction* pFnCanSplash = NULL;

	if ( ! pFnCanSplash )
		pFnCanSplash = (UFunction*) UObject::GObjObjects()->Data[ 6979 ];

	AActor_execCanSplash_Parms CanSplash_Parms;

	this->ProcessEvent ( pFnCanSplash, &CanSplash_Parms, NULL );

	return CanSplash_Parms.ReturnValue;
};

// Function Engine.Actor.PlayTeleportEffect
// [0x00020000] 
// Parameters infos:
// unsigned long                  bOut                           ( CPF_Parm )
// unsigned long                  bSound                         ( CPF_Parm )

void AActor::PlayTeleportEffect ( unsigned long bOut, unsigned long bSound )
{
	static UFunction* pFnPlayTeleportEffect = NULL;

	if ( ! pFnPlayTeleportEffect )
		pFnPlayTeleportEffect = (UFunction*) UObject::GObjObjects()->Data[ 6976 ];

	AActor_execPlayTeleportEffect_Parms PlayTeleportEffect_Parms;
	PlayTeleportEffect_Parms.bOut = bOut;
	PlayTeleportEffect_Parms.bSound = bSound;

	this->ProcessEvent ( pFnPlayTeleportEffect, &PlayTeleportEffect_Parms, NULL );
};

// Function Engine.Actor.IsInPain
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsInPain ( )
{
	static UFunction* pFnIsInPain = NULL;

	if ( ! pFnIsInPain )
		pFnIsInPain = (UFunction*) UObject::GObjObjects()->Data[ 6971 ];

	AActor_execIsInPain_Parms IsInPain_Parms;

	this->ProcessEvent ( pFnIsInPain, &IsInPain_Parms, NULL );

	return IsInPain_Parms.ReturnValue;
};

// Function Engine.Actor.IsInVolume
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AVolume*                 aVolume                        ( CPF_Parm )

bool AActor::IsInVolume ( class AVolume* aVolume )
{
	static UFunction* pFnIsInVolume = NULL;

	if ( ! pFnIsInVolume )
		pFnIsInVolume = (UFunction*) UObject::GObjObjects()->Data[ 6967 ];

	AActor_execIsInVolume_Parms IsInVolume_Parms;
	IsInVolume_Parms.aVolume = aVolume;

	this->ProcessEvent ( pFnIsInVolume, &IsInVolume_Parms, NULL );

	return IsInVolume_Parms.ReturnValue;
};

// Function Engine.Actor.Reset
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventReset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 6966 ];

	AActor_eventReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Actor.GetFaceFXAudioComponent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAudioComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UAudioComponent* AActor::eventGetFaceFXAudioComponent ( )
{
	static UFunction* pFnGetFaceFXAudioComponent = NULL;

	if ( ! pFnGetFaceFXAudioComponent )
		pFnGetFaceFXAudioComponent = (UFunction*) UObject::GObjObjects()->Data[ 6964 ];

	AActor_eventGetFaceFXAudioComponent_Parms GetFaceFXAudioComponent_Parms;

	this->ProcessEvent ( pFnGetFaceFXAudioComponent, &GetFaceFXAudioComponent_Parms, NULL );

	return GetFaceFXAudioComponent_Parms.ReturnValue;
};

// Function Engine.Actor.ModifyHearSoundComponent
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class UAudioComponent*         AC                             ( CPF_Parm | CPF_EditInline )

void AActor::eventModifyHearSoundComponent ( class UAudioComponent* AC )
{
	static UFunction* pFnModifyHearSoundComponent = NULL;

	if ( ! pFnModifyHearSoundComponent )
		pFnModifyHearSoundComponent = (UFunction*) UObject::GObjObjects()->Data[ 6962 ];

	AActor_eventModifyHearSoundComponent_Parms ModifyHearSoundComponent_Parms;
	ModifyHearSoundComponent_Parms.AC = AC;

	this->ProcessEvent ( pFnModifyHearSoundComponent, &ModifyHearSoundComponent_Parms, NULL );
};

// Function Engine.Actor.GetPhysicsName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AActor::GetPhysicsName ( )
{
	static UFunction* pFnGetPhysicsName = NULL;

	if ( ! pFnGetPhysicsName )
		pFnGetPhysicsName = (UFunction*) UObject::GObjObjects()->Data[ 6959 ];

	AActor_execGetPhysicsName_Parms GetPhysicsName_Parms;

	this->ProcessEvent ( pFnGetPhysicsName, &GetPhysicsName_Parms, NULL );

	return GetPhysicsName_Parms.ReturnValue;
};

// Function Engine.Actor.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AActor::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 6926 ];

	AActor_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Actor.GetDebugName
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AActor::GetDebugName ( )
{
	static UFunction* pFnGetDebugName = NULL;

	if ( ! pFnGetDebugName )
		pFnGetDebugName = (UFunction*) UObject::GObjObjects()->Data[ 6924 ];

	AActor_execGetDebugName_Parms GetDebugName_Parms;

	this->ProcessEvent ( pFnGetDebugName, &GetDebugName_Parms, NULL );

	return GetDebugName_Parms.ReturnValue;
};

// Function Engine.Actor.MatchStarting
// [0x00020000] 
// Parameters infos:

void AActor::MatchStarting ( )
{
	static UFunction* pFnMatchStarting = NULL;

	if ( ! pFnMatchStarting )
		pFnMatchStarting = (UFunction*) UObject::GObjObjects()->Data[ 6923 ];

	AActor_execMatchStarting_Parms MatchStarting_Parms;

	this->ProcessEvent ( pFnMatchStarting, &MatchStarting_Parms, NULL );
};

// Function Engine.Actor.GetLocalString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )

struct FString AActor::GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 )
{
	static UFunction* pFnGetLocalString = NULL;

	if ( ! pFnGetLocalString )
		pFnGetLocalString = (UFunction*) UObject::GObjObjects()->Data[ 6918 ];

	AActor_execGetLocalString_Parms GetLocalString_Parms;
	GetLocalString_Parms.Switch = Switch;
	GetLocalString_Parms.RelatedPRI = RelatedPRI;
	GetLocalString_Parms.RelatedPRI01 = RelatedPRI01;

	this->ProcessEvent ( pFnGetLocalString, &GetLocalString_Parms, NULL );

	return GetLocalString_Parms.ReturnValue;
};

// Function Engine.Actor.ReplaceText
// [0x00422002] 
// Parameters infos:
// struct FString                 Replace                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 With                           ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Text                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AActor::ReplaceText ( struct FString Replace, struct FString With, struct FString* Text )
{
	static UFunction* pFnReplaceText = NULL;

	if ( ! pFnReplaceText )
		pFnReplaceText = (UFunction*) UObject::GObjObjects()->Data[ 6912 ];

	AActor_execReplaceText_Parms ReplaceText_Parms;
	memcpy ( &ReplaceText_Parms.Replace, &Replace, 0x10 );
	memcpy ( &ReplaceText_Parms.With, &With, 0x10 );

	this->ProcessEvent ( pFnReplaceText, &ReplaceText_Parms, NULL );

	if ( Text )
		memcpy ( Text, &ReplaceText_Parms.Text, 0x10 );
};

// Function Engine.Actor.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AActor::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = (UFunction*) UObject::GObjObjects()->Data[ 6910 ];

	AActor_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.Actor.GetItemName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 FullName                       ( CPF_Parm | CPF_NeedCtorLink )

struct FString AActor::GetItemName ( struct FString FullName )
{
	static UFunction* pFnGetItemName = NULL;

	if ( ! pFnGetItemName )
		pFnGetItemName = (UFunction*) UObject::GObjObjects()->Data[ 6906 ];

	AActor_execGetItemName_Parms GetItemName_Parms;
	memcpy ( &GetItemName_Parms.FullName, &FullName, 0x10 );

	this->ProcessEvent ( pFnGetItemName, &GetItemName_Parms, NULL );

	return GetItemName_Parms.ReturnValue;
};

// Function Engine.Actor.CalcCamera
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaTime                     ( CPF_Parm )
// struct FVector                 out_CamLoc                     ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_CamRot                     ( CPF_Parm | CPF_OutParm )
// float                          out_FOV                        ( CPF_Parm | CPF_OutParm )

bool AActor::CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV )
{
	static UFunction* pFnCalcCamera = NULL;

	if ( ! pFnCalcCamera )
		pFnCalcCamera = (UFunction*) UObject::GObjObjects()->Data[ 6897 ];

	AActor_execCalcCamera_Parms CalcCamera_Parms;
	CalcCamera_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnCalcCamera, &CalcCamera_Parms, NULL );

	if ( out_CamLoc )
		memcpy ( out_CamLoc, &CalcCamera_Parms.out_CamLoc, 0xC );

	if ( out_CamRot )
		memcpy ( out_CamRot, &CalcCamera_Parms.out_CamRot, 0xC );

	if ( out_FOV )
		*out_FOV = CalcCamera_Parms.out_FOV;

	return CalcCamera_Parms.ReturnValue;
};

// Function Engine.Actor.EndViewTarget
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AActor::eventEndViewTarget ( class APlayerController* PC )
{
	static UFunction* pFnEndViewTarget = NULL;

	if ( ! pFnEndViewTarget )
		pFnEndViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 6895 ];

	AActor_eventEndViewTarget_Parms EndViewTarget_Parms;
	EndViewTarget_Parms.PC = PC;

	this->ProcessEvent ( pFnEndViewTarget, &EndViewTarget_Parms, NULL );
};

// Function Engine.Actor.BecomeViewTarget
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AActor::eventBecomeViewTarget ( class APlayerController* PC )
{
	static UFunction* pFnBecomeViewTarget = NULL;

	if ( ! pFnBecomeViewTarget )
		pFnBecomeViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 6893 ];

	AActor_eventBecomeViewTarget_Parms BecomeViewTarget_Parms;
	BecomeViewTarget_Parms.PC = PC;

	this->ProcessEvent ( pFnBecomeViewTarget, &BecomeViewTarget_Parms, NULL );
};

// Function Engine.Actor.CheckForErrors
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::CheckForErrors ( )
{
	static UFunction* pFnCheckForErrors = NULL;

	if ( ! pFnCheckForErrors )
		pFnCheckForErrors = (UFunction*) UObject::GObjObjects()->Data[ 6891 ];

	AActor_execCheckForErrors_Parms CheckForErrors_Parms;

	this->ProcessEvent ( pFnCheckForErrors, &CheckForErrors_Parms, NULL );

	return CheckForErrors_Parms.ReturnValue;
};

// Function Engine.Actor.DebugFreezeGame
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ActorToLookAt                  ( CPF_OptionalParm | CPF_Parm )

void AActor::eventDebugFreezeGame ( class AActor* ActorToLookAt )
{
	static UFunction* pFnDebugFreezeGame = NULL;

	if ( ! pFnDebugFreezeGame )
		pFnDebugFreezeGame = (UFunction*) UObject::GObjObjects()->Data[ 6886 ];

	AActor_eventDebugFreezeGame_Parms DebugFreezeGame_Parms;
	DebugFreezeGame_Parms.ActorToLookAt = ActorToLookAt;

	this->ProcessEvent ( pFnDebugFreezeGame, &DebugFreezeGame_Parms, NULL );
};

// Function Engine.Actor.GetGravityZ
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AActor::GetGravityZ ( )
{
	static UFunction* pFnGetGravityZ = NULL;

	if ( ! pFnGetGravityZ )
		pFnGetGravityZ = (UFunction*) UObject::GObjObjects()->Data[ 6884 ];

	AActor_execGetGravityZ_Parms GetGravityZ_Parms;

	pFnGetGravityZ->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGravityZ, &GetGravityZ_Parms, NULL );

	pFnGetGravityZ->FunctionFlags |= 0x400;

	return GetGravityZ_Parms.ReturnValue;
};

// Function Engine.Actor.CheckHitInfo
// [0x00420103] ( FUNC_Final )
// Parameters infos:
// class UPrimitiveComponent*     FallBackComponent              ( CPF_Parm | CPF_EditInline )
// struct FVector                 Dir                            ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm | CPF_OutParm )
// struct FVector                 out_HitLocation                ( CPF_Parm | CPF_OutParm )

void AActor::CheckHitInfo ( class UPrimitiveComponent* FallBackComponent, struct FVector Dir, struct FTraceHitInfo* HitInfo, struct FVector* out_HitLocation )
{
	static UFunction* pFnCheckHitInfo = NULL;

	if ( ! pFnCheckHitInfo )
		pFnCheckHitInfo = (UFunction*) UObject::GObjObjects()->Data[ 6873 ];

	AActor_execCheckHitInfo_Parms CheckHitInfo_Parms;
	CheckHitInfo_Parms.FallBackComponent = FallBackComponent;
	memcpy ( &CheckHitInfo_Parms.Dir, &Dir, 0xC );

	this->ProcessEvent ( pFnCheckHitInfo, &CheckHitInfo_Parms, NULL );

	if ( HitInfo )
		memcpy ( HitInfo, &CheckHitInfo_Parms.HitInfo, 0x28 );

	if ( out_HitLocation )
		memcpy ( out_HitLocation, &CheckHitInfo_Parms.out_HitLocation, 0xC );
};

// Function Engine.Actor.TakeRadiusDamage
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// class UDamageType*             pDamage                        ( CPF_OptionalParm | CPF_Parm )
// float                          DamageFalloffExponent          ( CPF_OptionalParm | CPF_Parm )

void AActor::eventTakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, class UDamageType* pDamage, float DamageFalloffExponent )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 6854 ];

	AActor_eventTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;
	TakeRadiusDamage_Parms.pDamage = pDamage;
	TakeRadiusDamage_Parms.DamageFalloffExponent = DamageFalloffExponent;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.Actor.HealDamage
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )
// class AController*             Healer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

bool AActor::eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType )
{
	static UFunction* pFnHealDamage = NULL;

	if ( ! pFnHealDamage )
		pFnHealDamage = (UFunction*) UObject::GObjObjects()->Data[ 6849 ];

	AActor_eventHealDamage_Parms HealDamage_Parms;
	HealDamage_Parms.Amount = Amount;
	HealDamage_Parms.Healer = Healer;
	HealDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnHealDamage, &HealDamage_Parms, NULL );

	return HealDamage_Parms.ReturnValue;
};

// Function Engine.Actor.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// float                          DamageAmount                   ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )
// class UDamageType*             pDamage                        ( CPF_OptionalParm | CPF_Parm )

void AActor::eventTakeDamage ( float DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UDamageType* pDamage )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 6834 ];

	AActor_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.DamageAmount = DamageAmount;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x28 );
	TakeDamage_Parms.DamageCauser = DamageCauser;
	TakeDamage_Parms.pDamage = pDamage;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.Actor.KilledBy
// [0x00020000] 
// Parameters infos:
// class APawn*                   EventInstigator                ( CPF_Parm )

void AActor::KilledBy ( class APawn* EventInstigator )
{
	static UFunction* pFnKilledBy = NULL;

	if ( ! pFnKilledBy )
		pFnKilledBy = (UFunction*) UObject::GObjObjects()->Data[ 6832 ];

	AActor_execKilledBy_Parms KilledBy_Parms;
	KilledBy_Parms.EventInstigator = EventInstigator;

	this->ProcessEvent ( pFnKilledBy, &KilledBy_Parms, NULL );
};

// Function Engine.Actor.HurtRadius
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// class AActor*                  IgnoredActor                   ( CPF_OptionalParm | CPF_Parm )
// class AController*             InstigatedByController         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDoFullDamage                  ( CPF_OptionalParm | CPF_Parm )
// class UDamageType*             pDamage                        ( CPF_OptionalParm | CPF_Parm )

bool AActor::HurtRadius ( float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage, class UDamageType* pDamage )
{
	static UFunction* pFnHurtRadius = NULL;

	if ( ! pFnHurtRadius )
		pFnHurtRadius = (UFunction*) UObject::GObjObjects()->Data[ 6808 ];

	AActor_execHurtRadius_Parms HurtRadius_Parms;
	HurtRadius_Parms.BaseDamage = BaseDamage;
	HurtRadius_Parms.DamageRadius = DamageRadius;
	HurtRadius_Parms.DamageType = DamageType;
	HurtRadius_Parms.Momentum = Momentum;
	memcpy ( &HurtRadius_Parms.HurtOrigin, &HurtOrigin, 0xC );
	HurtRadius_Parms.IgnoredActor = IgnoredActor;
	HurtRadius_Parms.InstigatedByController = InstigatedByController;
	HurtRadius_Parms.bDoFullDamage = bDoFullDamage;
	HurtRadius_Parms.pDamage = pDamage;

	this->ProcessEvent ( pFnHurtRadius, &HurtRadius_Parms, NULL );

	return HurtRadius_Parms.ReturnValue;
};

// Function Engine.Actor.StopsProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AProjectile*             P                              ( CPF_Parm )

bool AActor::StopsProjectile ( class AProjectile* P )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = (UFunction*) UObject::GObjObjects()->Data[ 6803 ];

	AActor_execStopsProjectile_Parms StopsProjectile_Parms;
	StopsProjectile_Parms.P = P;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );

	return StopsProjectile_Parms.ReturnValue;
};

// Function Engine.Actor.NotifySkelControlBeyondLimit
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USkelControlLookAt*      LookAt                         ( CPF_Parm )

void AActor::eventNotifySkelControlBeyondLimit ( class USkelControlLookAt* LookAt )
{
	static UFunction* pFnNotifySkelControlBeyondLimit = NULL;

	if ( ! pFnNotifySkelControlBeyondLimit )
		pFnNotifySkelControlBeyondLimit = (UFunction*) UObject::GObjObjects()->Data[ 6801 ];

	AActor_eventNotifySkelControlBeyondLimit_Parms NotifySkelControlBeyondLimit_Parms;
	NotifySkelControlBeyondLimit_Parms.LookAt = LookAt;

	this->ProcessEvent ( pFnNotifySkelControlBeyondLimit, &NotifySkelControlBeyondLimit_Parms, NULL );
};

// Function Engine.Actor.ConstraintBrokenNotify
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ConOwner                       ( CPF_Parm )
// class URB_ConstraintSetup*     ConSetup                       ( CPF_Parm )
// class URB_ConstraintInstance*  ConInstance                    ( CPF_Parm )

void AActor::eventConstraintBrokenNotify ( class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance )
{
	static UFunction* pFnConstraintBrokenNotify = NULL;

	if ( ! pFnConstraintBrokenNotify )
		pFnConstraintBrokenNotify = (UFunction*) UObject::GObjObjects()->Data[ 6797 ];

	AActor_eventConstraintBrokenNotify_Parms ConstraintBrokenNotify_Parms;
	ConstraintBrokenNotify_Parms.ConOwner = ConOwner;
	ConstraintBrokenNotify_Parms.ConSetup = ConSetup;
	ConstraintBrokenNotify_Parms.ConInstance = ConInstance;

	this->ProcessEvent ( pFnConstraintBrokenNotify, &ConstraintBrokenNotify_Parms, NULL );
};

// Function Engine.Actor.SetInitialState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AActor::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = (UFunction*) UObject::GObjObjects()->Data[ 6793 ];

	AActor_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function Engine.Actor.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 6791 ];

	AActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Actor.BroadcastLocalizedTeamMessage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            TeamIndex                      ( CPF_Parm )
// class UClass*                  InMessageClass                 ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AActor::eventBroadcastLocalizedTeamMessage ( int TeamIndex, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnBroadcastLocalizedTeamMessage = NULL;

	if ( ! pFnBroadcastLocalizedTeamMessage )
		pFnBroadcastLocalizedTeamMessage = (UFunction*) UObject::GObjObjects()->Data[ 6784 ];

	AActor_eventBroadcastLocalizedTeamMessage_Parms BroadcastLocalizedTeamMessage_Parms;
	BroadcastLocalizedTeamMessage_Parms.TeamIndex = TeamIndex;
	BroadcastLocalizedTeamMessage_Parms.InMessageClass = InMessageClass;
	BroadcastLocalizedTeamMessage_Parms.Switch = Switch;
	BroadcastLocalizedTeamMessage_Parms.RelatedPRI = RelatedPRI;
	BroadcastLocalizedTeamMessage_Parms.RelatedPRI01 = RelatedPRI01;
	BroadcastLocalizedTeamMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnBroadcastLocalizedTeamMessage, &BroadcastLocalizedTeamMessage_Parms, NULL );
};

// Function Engine.Actor.BioBeginPlay
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventBioBeginPlay ( )
{
	static UFunction* pFnBioBeginPlay = NULL;

	if ( ! pFnBioBeginPlay )
		pFnBioBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 6783 ];

	AActor_eventBioBeginPlay_Parms BioBeginPlay_Parms;

	this->ProcessEvent ( pFnBioBeginPlay, &BioBeginPlay_Parms, NULL );
};

// Function Engine.Actor.BroadcastLocalizedMessage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class UClass*                  InMessageClass                 ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AActor::eventBroadcastLocalizedMessage ( class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnBroadcastLocalizedMessage = NULL;

	if ( ! pFnBroadcastLocalizedMessage )
		pFnBroadcastLocalizedMessage = (UFunction*) UObject::GObjObjects()->Data[ 6776 ];

	AActor_eventBroadcastLocalizedMessage_Parms BroadcastLocalizedMessage_Parms;
	BroadcastLocalizedMessage_Parms.InMessageClass = InMessageClass;
	BroadcastLocalizedMessage_Parms.Switch = Switch;
	BroadcastLocalizedMessage_Parms.RelatedPRI = RelatedPRI;
	BroadcastLocalizedMessage_Parms.RelatedPRI01 = RelatedPRI01;
	BroadcastLocalizedMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnBroadcastLocalizedMessage, &BroadcastLocalizedMessage_Parms, NULL );
};

// Function Engine.Actor.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AActor::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 6767 ];

	AActor_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.Actor.FindActorsOfClass
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ActorClass                     ( CPF_Parm )
// struct TArray<class AActor*>   out_Actors                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AActor::FindActorsOfClass ( class UClass* ActorClass, struct TArray<class AActor*>* out_Actors )
{
	static UFunction* pFnFindActorsOfClass = NULL;

	if ( ! pFnFindActorsOfClass )
		pFnFindActorsOfClass = (UFunction*) UObject::GObjObjects()->Data[ 6761 ];

	AActor_execFindActorsOfClass_Parms FindActorsOfClass_Parms;
	FindActorsOfClass_Parms.ActorClass = ActorClass;

	this->ProcessEvent ( pFnFindActorsOfClass, &FindActorsOfClass_Parms, NULL );

	if ( out_Actors )
		memcpy ( out_Actors, &FindActorsOfClass_Parms.out_Actors, 0x10 );

	return FindActorsOfClass_Parms.ReturnValue;
};

// Function Engine.Actor.GetALocalPlayerController
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class APlayerController* AActor::GetALocalPlayerController ( )
{
	static UFunction* pFnGetALocalPlayerController = NULL;

	if ( ! pFnGetALocalPlayerController )
		pFnGetALocalPlayerController = (UFunction*) UObject::GObjObjects()->Data[ 6759 ];

	AActor_execGetALocalPlayerController_Parms GetALocalPlayerController_Parms;

	pFnGetALocalPlayerController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetALocalPlayerController, &GetALocalPlayerController_Parms, NULL );

	pFnGetALocalPlayerController->FunctionFlags |= 0x400;

	return GetALocalPlayerController_Parms.ReturnValue;
};

// Function Engine.Actor.LocalPlayerControllers
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm | CPF_OutParm )

void AActor::LocalPlayerControllers ( class UClass* BaseClass, class APlayerController** PC )
{
	static UFunction* pFnLocalPlayerControllers = NULL;

	if ( ! pFnLocalPlayerControllers )
		pFnLocalPlayerControllers = (UFunction*) UObject::GObjObjects()->Data[ 6756 ];

	AActor_execLocalPlayerControllers_Parms LocalPlayerControllers_Parms;
	LocalPlayerControllers_Parms.BaseClass = BaseClass;

	pFnLocalPlayerControllers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLocalPlayerControllers, &LocalPlayerControllers_Parms, NULL );

	pFnLocalPlayerControllers->FunctionFlags |= 0x400;

	if ( PC )
		*PC = LocalPlayerControllers_Parms.PC;
};

// Function Engine.Actor.AllOwnedComponents
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class UActorComponent*         OutComponent                   ( CPF_Parm | CPF_OutParm | CPF_EditInline )

void AActor::AllOwnedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent )
{
	static UFunction* pFnAllOwnedComponents = NULL;

	if ( ! pFnAllOwnedComponents )
		pFnAllOwnedComponents = (UFunction*) UObject::GObjObjects()->Data[ 6753 ];

	AActor_execAllOwnedComponents_Parms AllOwnedComponents_Parms;
	AllOwnedComponents_Parms.BaseClass = BaseClass;

	pFnAllOwnedComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllOwnedComponents, &AllOwnedComponents_Parms, NULL );

	pFnAllOwnedComponents->FunctionFlags |= 0x400;

	if ( OutComponent )
		*OutComponent = AllOwnedComponents_Parms.OutComponent;
};

// Function Engine.Actor.ComponentList
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class UActorComponent*         out_Component                  ( CPF_Parm | CPF_OutParm | CPF_EditInline )

void AActor::ComponentList ( class UClass* BaseClass, class UActorComponent** out_Component )
{
	static UFunction* pFnComponentList = NULL;

	if ( ! pFnComponentList )
		pFnComponentList = (UFunction*) UObject::GObjObjects()->Data[ 6750 ];

	AActor_execComponentList_Parms ComponentList_Parms;
	ComponentList_Parms.BaseClass = BaseClass;

	pFnComponentList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnComponentList, &ComponentList_Parms, NULL );

	pFnComponentList->FunctionFlags |= 0x400;

	if ( out_Component )
		*out_Component = ComponentList_Parms.out_Component;
};

// Function Engine.Actor.OverlappingActors
// [0x00424405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// struct FVector                 Loc                            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreHidden                  ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  out_Actor                      ( CPF_Parm | CPF_OutParm )

void AActor::OverlappingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, class AActor** out_Actor )
{
	static UFunction* pFnOverlappingActors = NULL;

	if ( ! pFnOverlappingActors )
		pFnOverlappingActors = (UFunction*) UObject::GObjObjects()->Data[ 6744 ];

	AActor_execOverlappingActors_Parms OverlappingActors_Parms;
	OverlappingActors_Parms.BaseClass = BaseClass;
	OverlappingActors_Parms.Radius = Radius;
	memcpy ( &OverlappingActors_Parms.Loc, &Loc, 0xC );
	OverlappingActors_Parms.bIgnoreHidden = bIgnoreHidden;

	pFnOverlappingActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOverlappingActors, &OverlappingActors_Parms, NULL );

	pFnOverlappingActors->FunctionFlags |= 0x400;

	if ( out_Actor )
		*out_Actor = OverlappingActors_Parms.out_Actor;
};

// Function Engine.Actor.CollidingActors
// [0x00424405] ( FUNC_Final | FUNC_Native ) iNative [0x0141]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// struct FVector                 Loc                            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUseOverlapCheck               ( CPF_OptionalParm | CPF_Parm )
// class UClass*                  InterfaceClass                 ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

void AActor::CollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bUseOverlapCheck, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo )
{
	static UFunction* pFnCollidingActors = NULL;

	if ( ! pFnCollidingActors )
		pFnCollidingActors = (UFunction*) UObject::GObjObjects()->Data[ 6736 ];

	AActor_execCollidingActors_Parms CollidingActors_Parms;
	CollidingActors_Parms.BaseClass = BaseClass;
	CollidingActors_Parms.Radius = Radius;
	memcpy ( &CollidingActors_Parms.Loc, &Loc, 0xC );
	CollidingActors_Parms.bUseOverlapCheck = bUseOverlapCheck;
	CollidingActors_Parms.InterfaceClass = InterfaceClass;

	unsigned short NativeIndex = pFnCollidingActors->iNative;
	pFnCollidingActors->iNative = 0;

	pFnCollidingActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCollidingActors, &CollidingActors_Parms, NULL );

	pFnCollidingActors->FunctionFlags |= 0x400;

	pFnCollidingActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = CollidingActors_Parms.Actor;

	if ( HitInfo )
		memcpy ( HitInfo, &CollidingActors_Parms.HitInfo, 0x28 );
};

// Function Engine.Actor.VisibleCollidingActors
// [0x00424405] ( FUNC_Final | FUNC_Native ) iNative [0x0138]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// struct FVector                 Loc                            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreHidden                  ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTraceActors                   ( CPF_OptionalParm | CPF_Parm )
// class UClass*                  InterfaceClass                 ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

void AActor::VisibleCollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, struct FVector Extent, unsigned long bTraceActors, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo )
{
	static UFunction* pFnVisibleCollidingActors = NULL;

	if ( ! pFnVisibleCollidingActors )
		pFnVisibleCollidingActors = (UFunction*) UObject::GObjObjects()->Data[ 6726 ];

	AActor_execVisibleCollidingActors_Parms VisibleCollidingActors_Parms;
	VisibleCollidingActors_Parms.BaseClass = BaseClass;
	VisibleCollidingActors_Parms.Radius = Radius;
	memcpy ( &VisibleCollidingActors_Parms.Loc, &Loc, 0xC );
	VisibleCollidingActors_Parms.bIgnoreHidden = bIgnoreHidden;
	memcpy ( &VisibleCollidingActors_Parms.Extent, &Extent, 0xC );
	VisibleCollidingActors_Parms.bTraceActors = bTraceActors;
	VisibleCollidingActors_Parms.InterfaceClass = InterfaceClass;

	unsigned short NativeIndex = pFnVisibleCollidingActors->iNative;
	pFnVisibleCollidingActors->iNative = 0;

	pFnVisibleCollidingActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVisibleCollidingActors, &VisibleCollidingActors_Parms, NULL );

	pFnVisibleCollidingActors->FunctionFlags |= 0x400;

	pFnVisibleCollidingActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = VisibleCollidingActors_Parms.Actor;

	if ( HitInfo )
		memcpy ( HitInfo, &VisibleCollidingActors_Parms.HitInfo, 0x28 );
};

// Function Engine.Actor.VisibleActors
// [0x00424405] ( FUNC_Final | FUNC_Native ) iNative [0x0137]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// float                          Radius                         ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Loc                            ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::VisibleActors ( class UClass* BaseClass, float Radius, struct FVector Loc, class AActor** Actor )
{
	static UFunction* pFnVisibleActors = NULL;

	if ( ! pFnVisibleActors )
		pFnVisibleActors = (UFunction*) UObject::GObjObjects()->Data[ 6721 ];

	AActor_execVisibleActors_Parms VisibleActors_Parms;
	VisibleActors_Parms.BaseClass = BaseClass;
	VisibleActors_Parms.Radius = Radius;
	memcpy ( &VisibleActors_Parms.Loc, &Loc, 0xC );

	unsigned short NativeIndex = pFnVisibleActors->iNative;
	pFnVisibleActors->iNative = 0;

	pFnVisibleActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVisibleActors, &VisibleActors_Parms, NULL );

	pFnVisibleActors->FunctionFlags |= 0x400;

	pFnVisibleActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = VisibleActors_Parms.Actor;
};

// Function Engine.Actor.TraceActors
// [0x00424405] ( FUNC_Final | FUNC_Native ) iNative [0x0135]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// struct FVector                 End                            ( CPF_Parm )
// struct FVector                 Start                          ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// int                            ExtraTraceFlags                ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitLoc                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitNorm                        ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

void AActor::TraceActors ( class UClass* BaseClass, struct FVector End, struct FVector Start, struct FVector Extent, int ExtraTraceFlags, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm, struct FTraceHitInfo* HitInfo )
{
	static UFunction* pFnTraceActors = NULL;

	if ( ! pFnTraceActors )
		pFnTraceActors = (UFunction*) UObject::GObjObjects()->Data[ 6711 ];

	AActor_execTraceActors_Parms TraceActors_Parms;
	TraceActors_Parms.BaseClass = BaseClass;
	memcpy ( &TraceActors_Parms.End, &End, 0xC );
	memcpy ( &TraceActors_Parms.Start, &Start, 0xC );
	memcpy ( &TraceActors_Parms.Extent, &Extent, 0xC );
	TraceActors_Parms.ExtraTraceFlags = ExtraTraceFlags;

	unsigned short NativeIndex = pFnTraceActors->iNative;
	pFnTraceActors->iNative = 0;

	pFnTraceActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTraceActors, &TraceActors_Parms, NULL );

	pFnTraceActors->FunctionFlags |= 0x400;

	pFnTraceActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = TraceActors_Parms.Actor;

	if ( HitLoc )
		memcpy ( HitLoc, &TraceActors_Parms.HitLoc, 0xC );

	if ( HitNorm )
		memcpy ( HitNorm, &TraceActors_Parms.HitNorm, 0xC );

	if ( HitInfo )
		memcpy ( HitInfo, &TraceActors_Parms.HitInfo, 0x28 );
};

// Function Engine.Actor.TouchingActors
// [0x00424405] ( FUNC_Final | FUNC_Native ) iNative [0x0133]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// unsigned long                  bReverse                       ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::TouchingActors ( class UClass* BaseClass, unsigned long bReverse, class AActor** Actor )
{
	static UFunction* pFnTouchingActors = NULL;

	if ( ! pFnTouchingActors )
		pFnTouchingActors = (UFunction*) UObject::GObjObjects()->Data[ 6707 ];

	AActor_execTouchingActors_Parms TouchingActors_Parms;
	TouchingActors_Parms.BaseClass = BaseClass;
	TouchingActors_Parms.bReverse = bReverse;

	unsigned short NativeIndex = pFnTouchingActors->iNative;
	pFnTouchingActors->iNative = 0;

	pFnTouchingActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTouchingActors, &TouchingActors_Parms, NULL );

	pFnTouchingActors->FunctionFlags |= 0x400;

	pFnTouchingActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = TouchingActors_Parms.Actor;
};

// Function Engine.Actor.BasedActors
// [0x00420405] ( FUNC_Final | FUNC_Native ) iNative [0x0132]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::BasedActors ( class UClass* BaseClass, class AActor** Actor )
{
	static UFunction* pFnBasedActors = NULL;

	if ( ! pFnBasedActors )
		pFnBasedActors = (UFunction*) UObject::GObjObjects()->Data[ 6704 ];

	AActor_execBasedActors_Parms BasedActors_Parms;
	BasedActors_Parms.BaseClass = BaseClass;

	unsigned short NativeIndex = pFnBasedActors->iNative;
	pFnBasedActors->iNative = 0;

	pFnBasedActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBasedActors, &BasedActors_Parms, NULL );

	pFnBasedActors->FunctionFlags |= 0x400;

	pFnBasedActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = BasedActors_Parms.Actor;
};

// Function Engine.Actor.ChildActors
// [0x00420405] ( FUNC_Final | FUNC_Native ) iNative [0x0131]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::ChildActors ( class UClass* BaseClass, class AActor** Actor )
{
	static UFunction* pFnChildActors = NULL;

	if ( ! pFnChildActors )
		pFnChildActors = (UFunction*) UObject::GObjObjects()->Data[ 6701 ];

	AActor_execChildActors_Parms ChildActors_Parms;
	ChildActors_Parms.BaseClass = BaseClass;

	unsigned short NativeIndex = pFnChildActors->iNative;
	pFnChildActors->iNative = 0;

	pFnChildActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChildActors, &ChildActors_Parms, NULL );

	pFnChildActors->FunctionFlags |= 0x400;

	pFnChildActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = ChildActors_Parms.Actor;
};

// Function Engine.Actor.DynamicActors
// [0x00424405] ( FUNC_Final | FUNC_Native ) iNative [0x0139]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class UClass*                  InterfaceClass                 ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::DynamicActors ( class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor )
{
	static UFunction* pFnDynamicActors = NULL;

	if ( ! pFnDynamicActors )
		pFnDynamicActors = (UFunction*) UObject::GObjObjects()->Data[ 6697 ];

	AActor_execDynamicActors_Parms DynamicActors_Parms;
	DynamicActors_Parms.BaseClass = BaseClass;
	DynamicActors_Parms.InterfaceClass = InterfaceClass;

	unsigned short NativeIndex = pFnDynamicActors->iNative;
	pFnDynamicActors->iNative = 0;

	pFnDynamicActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDynamicActors, &DynamicActors_Parms, NULL );

	pFnDynamicActors->FunctionFlags |= 0x400;

	pFnDynamicActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = DynamicActors_Parms.Actor;
};

// Function Engine.Actor.AllActors
// [0x00424405] ( FUNC_Final | FUNC_Native ) iNative [0x0130]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class UClass*                  InterfaceClass                 ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::AllActors ( class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor )
{
	static UFunction* pFnAllActors = NULL;

	if ( ! pFnAllActors )
		pFnAllActors = (UFunction*) UObject::GObjObjects()->Data[ 6693 ];

	AActor_execAllActors_Parms AllActors_Parms;
	AllActors_Parms.BaseClass = BaseClass;
	AllActors_Parms.InterfaceClass = InterfaceClass;

	unsigned short NativeIndex = pFnAllActors->iNative;
	pFnAllActors->iNative = 0;

	pFnAllActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllActors, &AllActors_Parms, NULL );

	pFnAllActors->FunctionFlags |= 0x400;

	pFnAllActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = AllActors_Parms.Actor;
};

// Function Engine.Actor.GetURLMap
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0223]
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AActor::GetURLMap ( )
{
	static UFunction* pFnGetURLMap = NULL;

	if ( ! pFnGetURLMap )
		pFnGetURLMap = (UFunction*) UObject::GObjObjects()->Data[ 6691 ];

	AActor_execGetURLMap_Parms GetURLMap_Parms;

	unsigned short NativeIndex = pFnGetURLMap->iNative;
	pFnGetURLMap->iNative = 0;

	pFnGetURLMap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetURLMap, &GetURLMap_Parms, NULL );

	pFnGetURLMap->FunctionFlags |= 0x400;

	pFnGetURLMap->iNative = NativeIndex;

	return GetURLMap_Parms.ReturnValue;
};

// Function Engine.Actor.PostTeleport
// [0x00020000] 
// Parameters infos:
// class ATeleporter*             OutTeleporter                  ( CPF_Parm )

void AActor::PostTeleport ( class ATeleporter* OutTeleporter )
{
	static UFunction* pFnPostTeleport = NULL;

	if ( ! pFnPostTeleport )
		pFnPostTeleport = (UFunction*) UObject::GObjObjects()->Data[ 6689 ];

	AActor_execPostTeleport_Parms PostTeleport_Parms;
	PostTeleport_Parms.OutTeleporter = OutTeleporter;

	this->ProcessEvent ( pFnPostTeleport, &PostTeleport_Parms, NULL );
};

// Function Engine.Actor.PreTeleport
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATeleporter*             InTeleporter                   ( CPF_Parm )

bool AActor::PreTeleport ( class ATeleporter* InTeleporter )
{
	static UFunction* pFnPreTeleport = NULL;

	if ( ! pFnPreTeleport )
		pFnPreTeleport = (UFunction*) UObject::GObjObjects()->Data[ 6686 ];

	AActor_execPreTeleport_Parms PreTeleport_Parms;
	PreTeleport_Parms.InTeleporter = InTeleporter;

	this->ProcessEvent ( pFnPreTeleport, &PreTeleport_Parms, NULL );

	return PreTeleport_Parms.ReturnValue;
};

// Function Engine.Actor.GetDestination
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             C                              ( CPF_Parm )

struct FVector AActor::GetDestination ( class AController* C )
{
	static UFunction* pFnGetDestination = NULL;

	if ( ! pFnGetDestination )
		pFnGetDestination = (UFunction*) UObject::GObjObjects()->Data[ 6683 ];

	AActor_execGetDestination_Parms GetDestination_Parms;
	GetDestination_Parms.C = C;

	pFnGetDestination->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDestination, &GetDestination_Parms, NULL );

	pFnGetDestination->FunctionFlags |= 0x400;

	return GetDestination_Parms.ReturnValue;
};

// Function Engine.Actor.SuggestTossVelocity
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Destination                    ( CPF_Parm )
// struct FVector                 Start                          ( CPF_Parm )
// float                          TossSpeed                      ( CPF_Parm )
// float                          BaseTossZ                      ( CPF_OptionalParm | CPF_Parm )
// float                          DesiredZPct                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 CollisionSize                  ( CPF_OptionalParm | CPF_Parm )
// float                          TerminalVelocity               ( CPF_OptionalParm | CPF_Parm )
// float                          OverrideGravityZ               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOnlyTraceUp                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 TossVelocity                   ( CPF_Parm | CPF_OutParm )

bool AActor::SuggestTossVelocity ( struct FVector Destination, struct FVector Start, float TossSpeed, float BaseTossZ, float DesiredZPct, struct FVector CollisionSize, float TerminalVelocity, float OverrideGravityZ, unsigned long bOnlyTraceUp, struct FVector* TossVelocity )
{
	static UFunction* pFnSuggestTossVelocity = NULL;

	if ( ! pFnSuggestTossVelocity )
		pFnSuggestTossVelocity = (UFunction*) UObject::GObjObjects()->Data[ 6671 ];

	AActor_execSuggestTossVelocity_Parms SuggestTossVelocity_Parms;
	memcpy ( &SuggestTossVelocity_Parms.Destination, &Destination, 0xC );
	memcpy ( &SuggestTossVelocity_Parms.Start, &Start, 0xC );
	SuggestTossVelocity_Parms.TossSpeed = TossSpeed;
	SuggestTossVelocity_Parms.BaseTossZ = BaseTossZ;
	SuggestTossVelocity_Parms.DesiredZPct = DesiredZPct;
	memcpy ( &SuggestTossVelocity_Parms.CollisionSize, &CollisionSize, 0xC );
	SuggestTossVelocity_Parms.TerminalVelocity = TerminalVelocity;
	SuggestTossVelocity_Parms.OverrideGravityZ = OverrideGravityZ;
	SuggestTossVelocity_Parms.bOnlyTraceUp = bOnlyTraceUp;

	pFnSuggestTossVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSuggestTossVelocity, &SuggestTossVelocity_Parms, NULL );

	pFnSuggestTossVelocity->FunctionFlags |= 0x400;

	if ( TossVelocity )
		memcpy ( TossVelocity, &SuggestTossVelocity_Parms.TossVelocity, 0xC );

	return SuggestTossVelocity_Parms.ReturnValue;
};

// Function Engine.Actor.PlayerCanSeeMe
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0214]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::PlayerCanSeeMe ( )
{
	static UFunction* pFnPlayerCanSeeMe = NULL;

	if ( ! pFnPlayerCanSeeMe )
		pFnPlayerCanSeeMe = (UFunction*) UObject::GObjObjects()->Data[ 6669 ];

	AActor_execPlayerCanSeeMe_Parms PlayerCanSeeMe_Parms;

	unsigned short NativeIndex = pFnPlayerCanSeeMe->iNative;
	pFnPlayerCanSeeMe->iNative = 0;

	pFnPlayerCanSeeMe->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayerCanSeeMe, &PlayerCanSeeMe_Parms, NULL );

	pFnPlayerCanSeeMe->FunctionFlags |= 0x400;

	pFnPlayerCanSeeMe->iNative = NativeIndex;

	return PlayerCanSeeMe_Parms.ReturnValue;
};

// Function Engine.Actor.MakeNoiseAt
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          Loudness                       ( CPF_Parm )
// struct FVector                 vLoc                           ( CPF_Parm )
// struct FName                   NoiseType                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDampenNoise                   ( CPF_OptionalParm | CPF_Parm )

void AActor::MakeNoiseAt ( float Loudness, struct FVector vLoc, struct FName NoiseType, unsigned long bDampenNoise )
{
	static UFunction* pFnMakeNoiseAt = NULL;

	if ( ! pFnMakeNoiseAt )
		pFnMakeNoiseAt = (UFunction*) UObject::GObjObjects()->Data[ 6664 ];

	AActor_execMakeNoiseAt_Parms MakeNoiseAt_Parms;
	MakeNoiseAt_Parms.Loudness = Loudness;
	memcpy ( &MakeNoiseAt_Parms.vLoc, &vLoc, 0xC );
	memcpy ( &MakeNoiseAt_Parms.NoiseType, &NoiseType, 0x8 );
	MakeNoiseAt_Parms.bDampenNoise = bDampenNoise;

	pFnMakeNoiseAt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMakeNoiseAt, &MakeNoiseAt_Parms, NULL );

	pFnMakeNoiseAt->FunctionFlags |= 0x400;
};

// Function Engine.Actor.MakeNoise
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x0200]
// Parameters infos:
// float                          Loudness                       ( CPF_Parm )
// struct FName                   NoiseType                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDampenNoise                   ( CPF_OptionalParm | CPF_Parm )

void AActor::MakeNoise ( float Loudness, struct FName NoiseType, unsigned long bDampenNoise )
{
	static UFunction* pFnMakeNoise = NULL;

	if ( ! pFnMakeNoise )
		pFnMakeNoise = (UFunction*) UObject::GObjObjects()->Data[ 6660 ];

	AActor_execMakeNoise_Parms MakeNoise_Parms;
	MakeNoise_Parms.Loudness = Loudness;
	memcpy ( &MakeNoise_Parms.NoiseType, &NoiseType, 0x8 );
	MakeNoise_Parms.bDampenNoise = bDampenNoise;

	unsigned short NativeIndex = pFnMakeNoise->iNative;
	pFnMakeNoise->iNative = 0;

	pFnMakeNoise->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMakeNoise, &MakeNoise_Parms, NULL );

	pFnMakeNoise->FunctionFlags |= 0x400;

	pFnMakeNoise->iNative = NativeIndex;
};

// Function Engine.Actor.PlaySound
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USoundCue*               InSoundCue                     ( CPF_Parm )
// unsigned long                  bNotReplicated                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoRepToOwner                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bStopWhenOwnerDestroyed        ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SoundLocation                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoRepToRelevant               ( CPF_OptionalParm | CPF_Parm )

void AActor::PlaySound ( class USoundCue* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant )
{
	static UFunction* pFnPlaySound = NULL;

	if ( ! pFnPlaySound )
		pFnPlaySound = (UFunction*) UObject::GObjObjects()->Data[ 6653 ];

	AActor_execPlaySound_Parms PlaySound_Parms;
	PlaySound_Parms.InSoundCue = InSoundCue;
	PlaySound_Parms.bNotReplicated = bNotReplicated;
	PlaySound_Parms.bNoRepToOwner = bNoRepToOwner;
	PlaySound_Parms.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	memcpy ( &PlaySound_Parms.SoundLocation, &SoundLocation, 0xC );
	PlaySound_Parms.bNoRepToRelevant = bNoRepToRelevant;

	pFnPlaySound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlaySound, &PlaySound_Parms, NULL );

	pFnPlaySound->FunctionFlags |= 0x400;
};

// Function Engine.Actor.CreateAudioComponent
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAudioComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class USoundCue*               InSoundCue                     ( CPF_Parm )
// unsigned long                  bPlay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bStopWhenOwnerDestroyed        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUseLocation                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SourceLocation                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAttachToSelf                  ( CPF_OptionalParm | CPF_Parm )

class UAudioComponent* AActor::CreateAudioComponent ( class USoundCue* InSoundCue, unsigned long bPlay, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation, unsigned long bAttachToSelf )
{
	static UFunction* pFnCreateAudioComponent = NULL;

	if ( ! pFnCreateAudioComponent )
		pFnCreateAudioComponent = (UFunction*) UObject::GObjObjects()->Data[ 6645 ];

	AActor_execCreateAudioComponent_Parms CreateAudioComponent_Parms;
	CreateAudioComponent_Parms.InSoundCue = InSoundCue;
	CreateAudioComponent_Parms.bPlay = bPlay;
	CreateAudioComponent_Parms.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	CreateAudioComponent_Parms.bUseLocation = bUseLocation;
	memcpy ( &CreateAudioComponent_Parms.SourceLocation, &SourceLocation, 0xC );
	CreateAudioComponent_Parms.bAttachToSelf = bAttachToSelf;

	pFnCreateAudioComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateAudioComponent, &CreateAudioComponent_Parms, NULL );

	pFnCreateAudioComponent->FunctionFlags |= 0x400;

	return CreateAudioComponent_Parms.ReturnValue;
};

// Function Engine.Actor.ResetTimerTimeDilation
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   TimerName                      ( CPF_Const | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

void AActor::ResetTimerTimeDilation ( struct FName TimerName, class UObject* inObj )
{
	static UFunction* pFnResetTimerTimeDilation = NULL;

	if ( ! pFnResetTimerTimeDilation )
		pFnResetTimerTimeDilation = (UFunction*) UObject::GObjObjects()->Data[ 6642 ];

	AActor_execResetTimerTimeDilation_Parms ResetTimerTimeDilation_Parms;
	memcpy ( &ResetTimerTimeDilation_Parms.TimerName, &TimerName, 0x8 );
	ResetTimerTimeDilation_Parms.inObj = inObj;

	pFnResetTimerTimeDilation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetTimerTimeDilation, &ResetTimerTimeDilation_Parms, NULL );

	pFnResetTimerTimeDilation->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ModifyTimerTimeDilation
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   TimerName                      ( CPF_Const | CPF_Parm )
// float                          InTimerTimeDilation            ( CPF_Const | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

void AActor::ModifyTimerTimeDilation ( struct FName TimerName, float InTimerTimeDilation, class UObject* inObj )
{
	static UFunction* pFnModifyTimerTimeDilation = NULL;

	if ( ! pFnModifyTimerTimeDilation )
		pFnModifyTimerTimeDilation = (UFunction*) UObject::GObjObjects()->Data[ 6638 ];

	AActor_execModifyTimerTimeDilation_Parms ModifyTimerTimeDilation_Parms;
	memcpy ( &ModifyTimerTimeDilation_Parms.TimerName, &TimerName, 0x8 );
	ModifyTimerTimeDilation_Parms.InTimerTimeDilation = InTimerTimeDilation;
	ModifyTimerTimeDilation_Parms.inObj = inObj;

	pFnModifyTimerTimeDilation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnModifyTimerTimeDilation, &ModifyTimerTimeDilation_Parms, NULL );

	pFnModifyTimerTimeDilation->FunctionFlags |= 0x400;
};

// Function Engine.Actor.GetRemainingTimeForTimer
// [0x00024103] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   TimerFuncName                  ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

float AActor::GetRemainingTimeForTimer ( struct FName TimerFuncName, class UObject* inObj )
{
	static UFunction* pFnGetRemainingTimeForTimer = NULL;

	if ( ! pFnGetRemainingTimeForTimer )
		pFnGetRemainingTimeForTimer = (UFunction*) UObject::GObjObjects()->Data[ 6632 ];

	AActor_execGetRemainingTimeForTimer_Parms GetRemainingTimeForTimer_Parms;
	memcpy ( &GetRemainingTimeForTimer_Parms.TimerFuncName, &TimerFuncName, 0x8 );
	GetRemainingTimeForTimer_Parms.inObj = inObj;

	this->ProcessEvent ( pFnGetRemainingTimeForTimer, &GetRemainingTimeForTimer_Parms, NULL );

	return GetRemainingTimeForTimer_Parms.ReturnValue;
};

// Function Engine.Actor.GetTimerRate
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   TimerFuncName                  ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

float AActor::GetTimerRate ( struct FName TimerFuncName, class UObject* inObj )
{
	static UFunction* pFnGetTimerRate = NULL;

	if ( ! pFnGetTimerRate )
		pFnGetTimerRate = (UFunction*) UObject::GObjObjects()->Data[ 6628 ];

	AActor_execGetTimerRate_Parms GetTimerRate_Parms;
	memcpy ( &GetTimerRate_Parms.TimerFuncName, &TimerFuncName, 0x8 );
	GetTimerRate_Parms.inObj = inObj;

	pFnGetTimerRate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTimerRate, &GetTimerRate_Parms, NULL );

	pFnGetTimerRate->FunctionFlags |= 0x400;

	return GetTimerRate_Parms.ReturnValue;
};

// Function Engine.Actor.GetTimerCount
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   inTimerFunc                    ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

float AActor::GetTimerCount ( struct FName inTimerFunc, class UObject* inObj )
{
	static UFunction* pFnGetTimerCount = NULL;

	if ( ! pFnGetTimerCount )
		pFnGetTimerCount = (UFunction*) UObject::GObjObjects()->Data[ 6624 ];

	AActor_execGetTimerCount_Parms GetTimerCount_Parms;
	memcpy ( &GetTimerCount_Parms.inTimerFunc, &inTimerFunc, 0x8 );
	GetTimerCount_Parms.inObj = inObj;

	pFnGetTimerCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTimerCount, &GetTimerCount_Parms, NULL );

	pFnGetTimerCount->FunctionFlags |= 0x400;

	return GetTimerCount_Parms.ReturnValue;
};

// Function Engine.Actor.IsTimerActive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   inTimerFunc                    ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

bool AActor::IsTimerActive ( struct FName inTimerFunc, class UObject* inObj )
{
	static UFunction* pFnIsTimerActive = NULL;

	if ( ! pFnIsTimerActive )
		pFnIsTimerActive = (UFunction*) UObject::GObjObjects()->Data[ 6620 ];

	AActor_execIsTimerActive_Parms IsTimerActive_Parms;
	memcpy ( &IsTimerActive_Parms.inTimerFunc, &inTimerFunc, 0x8 );
	IsTimerActive_Parms.inObj = inObj;

	pFnIsTimerActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTimerActive, &IsTimerActive_Parms, NULL );

	pFnIsTimerActive->FunctionFlags |= 0x400;

	return IsTimerActive_Parms.ReturnValue;
};

// Function Engine.Actor.PauseTimer
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bPause                         ( CPF_Parm )
// struct FName                   inTimerFunc                    ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

void AActor::PauseTimer ( unsigned long bPause, struct FName inTimerFunc, class UObject* inObj )
{
	static UFunction* pFnPauseTimer = NULL;

	if ( ! pFnPauseTimer )
		pFnPauseTimer = (UFunction*) UObject::GObjObjects()->Data[ 6616 ];

	AActor_execPauseTimer_Parms PauseTimer_Parms;
	PauseTimer_Parms.bPause = bPause;
	memcpy ( &PauseTimer_Parms.inTimerFunc, &inTimerFunc, 0x8 );
	PauseTimer_Parms.inObj = inObj;

	pFnPauseTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPauseTimer, &PauseTimer_Parms, NULL );

	pFnPauseTimer->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ClearAllTimers
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

void AActor::ClearAllTimers ( class UObject* inObj )
{
	static UFunction* pFnClearAllTimers = NULL;

	if ( ! pFnClearAllTimers )
		pFnClearAllTimers = (UFunction*) UObject::GObjObjects()->Data[ 6614 ];

	AActor_execClearAllTimers_Parms ClearAllTimers_Parms;
	ClearAllTimers_Parms.inObj = inObj;

	pFnClearAllTimers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearAllTimers, &ClearAllTimers_Parms, NULL );

	pFnClearAllTimers->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ClearTimer
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   inTimerFunc                    ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

void AActor::ClearTimer ( struct FName inTimerFunc, class UObject* inObj )
{
	static UFunction* pFnClearTimer = NULL;

	if ( ! pFnClearTimer )
		pFnClearTimer = (UFunction*) UObject::GObjObjects()->Data[ 6611 ];

	AActor_execClearTimer_Parms ClearTimer_Parms;
	memcpy ( &ClearTimer_Parms.inTimerFunc, &inTimerFunc, 0x8 );
	ClearTimer_Parms.inObj = inObj;

	pFnClearTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearTimer, &ClearTimer_Parms, NULL );

	pFnClearTimer->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetTimer
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x0118]
// Parameters infos:
// float                          InRate                         ( CPF_Parm )
// unsigned long                  inbLoop                        ( CPF_OptionalParm | CPF_Parm )
// struct FName                   inTimerFunc                    ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

void AActor::SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj )
{
	static UFunction* pFnSetTimer = NULL;

	if ( ! pFnSetTimer )
		pFnSetTimer = (UFunction*) UObject::GObjObjects()->Data[ 6606 ];

	AActor_execSetTimer_Parms SetTimer_Parms;
	SetTimer_Parms.InRate = InRate;
	SetTimer_Parms.inbLoop = inbLoop;
	memcpy ( &SetTimer_Parms.inTimerFunc, &inTimerFunc, 0x8 );
	SetTimer_Parms.inObj = inObj;

	unsigned short NativeIndex = pFnSetTimer->iNative;
	pFnSetTimer->iNative = 0;

	pFnSetTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTimer, &SetTimer_Parms, NULL );

	pFnSetTimer->FunctionFlags |= 0x400;

	pFnSetTimer->iNative = NativeIndex;
};

// Function Engine.Actor.TornOff
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventTornOff ( )
{
	static UFunction* pFnTornOff = NULL;

	if ( ! pFnTornOff )
		pFnTornOff = (UFunction*) UObject::GObjObjects()->Data[ 6605 ];

	AActor_eventTornOff_Parms TornOff_Parms;

	this->ProcessEvent ( pFnTornOff, &TornOff_Parms, NULL );
};

// Function Engine.Actor.Destroy
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0117]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::Destroy ( )
{
	static UFunction* pFnDestroy = NULL;

	if ( ! pFnDestroy )
		pFnDestroy = (UFunction*) UObject::GObjObjects()->Data[ 6603 ];

	AActor_execDestroy_Parms Destroy_Parms;

	unsigned short NativeIndex = pFnDestroy->iNative;
	pFnDestroy->iNative = 0;

	pFnDestroy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDestroy, &Destroy_Parms, NULL );

	pFnDestroy->FunctionFlags |= 0x400;

	pFnDestroy->iNative = NativeIndex;

	return Destroy_Parms.ReturnValue;
};

// Function Engine.Actor.Spawn
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  SpawnClass                     ( CPF_Parm )
// class AActor*                  SpawnOwner                     ( CPF_OptionalParm | CPF_Parm )
// struct FName                   SpawnTag                       ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                SpawnRotation                  ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  ActorTemplate                  ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 pActorType                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoCollisionFail               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bFindSafeLocation              ( CPF_OptionalParm | CPF_Parm )

class AActor* AActor::Spawn ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* ActorTemplate, class UObject* pActorType, unsigned long bNoCollisionFail, unsigned long bFindSafeLocation )
{
	static UFunction* pFnSpawn = NULL;

	if ( ! pFnSpawn )
		pFnSpawn = (UFunction*) UObject::GObjObjects()->Data[ 6592 ];

	AActor_execSpawn_Parms Spawn_Parms;
	Spawn_Parms.SpawnClass = SpawnClass;
	Spawn_Parms.SpawnOwner = SpawnOwner;
	memcpy ( &Spawn_Parms.SpawnTag, &SpawnTag, 0x8 );
	memcpy ( &Spawn_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &Spawn_Parms.SpawnRotation, &SpawnRotation, 0xC );
	Spawn_Parms.ActorTemplate = ActorTemplate;
	Spawn_Parms.pActorType = pActorType;
	Spawn_Parms.bNoCollisionFail = bNoCollisionFail;
	Spawn_Parms.bFindSafeLocation = bFindSafeLocation;

	pFnSpawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawn, &Spawn_Parms, NULL );

	pFnSpawn->FunctionFlags |= 0x400;

	return Spawn_Parms.ReturnValue;
};

// Function Engine.Actor.GetBoundingCylinder
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          CollisionRadius                ( CPF_Parm | CPF_OutParm )
// float                          CollisionHeight                ( CPF_Parm | CPF_OutParm )

void AActor::GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight )
{
	static UFunction* pFnGetBoundingCylinder = NULL;

	if ( ! pFnGetBoundingCylinder )
		pFnGetBoundingCylinder = (UFunction*) UObject::GObjObjects()->Data[ 6589 ];

	AActor_execGetBoundingCylinder_Parms GetBoundingCylinder_Parms;

	pFnGetBoundingCylinder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundingCylinder, &GetBoundingCylinder_Parms, NULL );

	pFnGetBoundingCylinder->FunctionFlags |= 0x400;

	if ( CollisionRadius )
		*CollisionRadius = GetBoundingCylinder_Parms.CollisionRadius;

	if ( CollisionHeight )
		*CollisionHeight = GetBoundingCylinder_Parms.CollisionHeight;
};

// Function Engine.Actor.GetComponentsBoundingBox
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FBox                    ActorBox                       ( CPF_Parm | CPF_OutParm )

void AActor::GetComponentsBoundingBox ( struct FBox* ActorBox )
{
	static UFunction* pFnGetComponentsBoundingBox = NULL;

	if ( ! pFnGetComponentsBoundingBox )
		pFnGetComponentsBoundingBox = (UFunction*) UObject::GObjObjects()->Data[ 6587 ];

	AActor_execGetComponentsBoundingBox_Parms GetComponentsBoundingBox_Parms;

	pFnGetComponentsBoundingBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetComponentsBoundingBox, &GetComponentsBoundingBox_Parms, NULL );

	pFnGetComponentsBoundingBox->FunctionFlags |= 0x400;

	if ( ActorBox )
		memcpy ( ActorBox, &GetComponentsBoundingBox_Parms.ActorBox, 0x1C );
};

// Function Engine.Actor.IsOverlapping
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool AActor::IsOverlapping ( class AActor* A )
{
	static UFunction* pFnIsOverlapping = NULL;

	if ( ! pFnIsOverlapping )
		pFnIsOverlapping = (UFunction*) UObject::GObjObjects()->Data[ 6584 ];

	AActor_execIsOverlapping_Parms IsOverlapping_Parms;
	IsOverlapping_Parms.A = A;

	pFnIsOverlapping->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsOverlapping, &IsOverlapping_Parms, NULL );

	pFnIsOverlapping->FunctionFlags |= 0x400;

	return IsOverlapping_Parms.ReturnValue;
};

// Function Engine.Actor.ContainsPoint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Spot                           ( CPF_Parm )

bool AActor::ContainsPoint ( struct FVector Spot )
{
	static UFunction* pFnContainsPoint = NULL;

	if ( ! pFnContainsPoint )
		pFnContainsPoint = (UFunction*) UObject::GObjObjects()->Data[ 6581 ];

	AActor_execContainsPoint_Parms ContainsPoint_Parms;
	memcpy ( &ContainsPoint_Parms.Spot, &Spot, 0xC );

	pFnContainsPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnContainsPoint, &ContainsPoint_Parms, NULL );

	pFnContainsPoint->FunctionFlags |= 0x400;

	return ContainsPoint_Parms.ReturnValue;
};

// Function Engine.Actor.FindSpot
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 BoxExtent                      ( CPF_Parm )
// struct FVector                 SpotLocation                   ( CPF_Parm | CPF_OutParm )

bool AActor::FindSpot ( struct FVector BoxExtent, struct FVector* SpotLocation )
{
	static UFunction* pFnFindSpot = NULL;

	if ( ! pFnFindSpot )
		pFnFindSpot = (UFunction*) UObject::GObjObjects()->Data[ 6577 ];

	AActor_execFindSpot_Parms FindSpot_Parms;
	memcpy ( &FindSpot_Parms.BoxExtent, &BoxExtent, 0xC );

	pFnFindSpot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSpot, &FindSpot_Parms, NULL );

	pFnFindSpot->FunctionFlags |= 0x400;

	if ( SpotLocation )
		memcpy ( SpotLocation, &FindSpot_Parms.SpotLocation, 0xC );

	return FindSpot_Parms.ReturnValue;
};

// Function Engine.Actor.TraceAllPhysicsAssetInteractions
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USkeletalMeshComponent*  SkelMeshComp                   ( CPF_Parm | CPF_EditInline )
// struct FVector                 EndTrace                       ( CPF_Parm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// struct TArray<struct FImpactInfo> out_Hits                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AActor::TraceAllPhysicsAssetInteractions ( class USkeletalMeshComponent* SkelMeshComp, struct FVector EndTrace, struct FVector StartTrace, struct FVector Extent, struct TArray<struct FImpactInfo>* out_Hits )
{
	static UFunction* pFnTraceAllPhysicsAssetInteractions = NULL;

	if ( ! pFnTraceAllPhysicsAssetInteractions )
		pFnTraceAllPhysicsAssetInteractions = (UFunction*) UObject::GObjObjects()->Data[ 6569 ];

	AActor_execTraceAllPhysicsAssetInteractions_Parms TraceAllPhysicsAssetInteractions_Parms;
	TraceAllPhysicsAssetInteractions_Parms.SkelMeshComp = SkelMeshComp;
	memcpy ( &TraceAllPhysicsAssetInteractions_Parms.EndTrace, &EndTrace, 0xC );
	memcpy ( &TraceAllPhysicsAssetInteractions_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &TraceAllPhysicsAssetInteractions_Parms.Extent, &Extent, 0xC );

	pFnTraceAllPhysicsAssetInteractions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTraceAllPhysicsAssetInteractions, &TraceAllPhysicsAssetInteractions_Parms, NULL );

	pFnTraceAllPhysicsAssetInteractions->FunctionFlags |= 0x400;

	if ( out_Hits )
		memcpy ( out_Hits, &TraceAllPhysicsAssetInteractions_Parms.out_Hits, 0x10 );

	return TraceAllPhysicsAssetInteractions_Parms.ReturnValue;
};

// Function Engine.Actor.FastTrace
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x0224]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TraceEnd                       ( CPF_Parm )
// struct FVector                 TraceStart                     ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 BoxExtent                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTraceBullet                   ( CPF_OptionalParm | CPF_Parm )

bool AActor::FastTrace ( struct FVector TraceEnd, struct FVector TraceStart, struct FVector BoxExtent, unsigned long bTraceBullet )
{
	static UFunction* pFnFastTrace = NULL;

	if ( ! pFnFastTrace )
		pFnFastTrace = (UFunction*) UObject::GObjObjects()->Data[ 6563 ];

	AActor_execFastTrace_Parms FastTrace_Parms;
	memcpy ( &FastTrace_Parms.TraceEnd, &TraceEnd, 0xC );
	memcpy ( &FastTrace_Parms.TraceStart, &TraceStart, 0xC );
	memcpy ( &FastTrace_Parms.BoxExtent, &BoxExtent, 0xC );
	FastTrace_Parms.bTraceBullet = bTraceBullet;

	unsigned short NativeIndex = pFnFastTrace->iNative;
	pFnFastTrace->iNative = 0;

	pFnFastTrace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFastTrace, &FastTrace_Parms, NULL );

	pFnFastTrace->FunctionFlags |= 0x400;

	pFnFastTrace->iNative = NativeIndex;

	return FastTrace_Parms.ReturnValue;
};

// Function Engine.Actor.PointCheckComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPrimitiveComponent*     InComponent                    ( CPF_Parm | CPF_EditInline )
// struct FVector                 PointLocation                  ( CPF_Parm )
// struct FVector                 PointExtent                    ( CPF_Parm )

bool AActor::PointCheckComponent ( class UPrimitiveComponent* InComponent, struct FVector PointLocation, struct FVector PointExtent )
{
	static UFunction* pFnPointCheckComponent = NULL;

	if ( ! pFnPointCheckComponent )
		pFnPointCheckComponent = (UFunction*) UObject::GObjObjects()->Data[ 6558 ];

	AActor_execPointCheckComponent_Parms PointCheckComponent_Parms;
	PointCheckComponent_Parms.InComponent = InComponent;
	memcpy ( &PointCheckComponent_Parms.PointLocation, &PointLocation, 0xC );
	memcpy ( &PointCheckComponent_Parms.PointExtent, &PointExtent, 0xC );

	pFnPointCheckComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPointCheckComponent, &PointCheckComponent_Parms, NULL );

	pFnPointCheckComponent->FunctionFlags |= 0x400;

	return PointCheckComponent_Parms.ReturnValue;
};

// Function Engine.Actor.TraceComponent
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPrimitiveComponent*     InComponent                    ( CPF_Parm | CPF_EditInline )
// struct FVector                 TraceEnd                       ( CPF_Parm )
// struct FVector                 TraceStart                     ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bComplexCollision              ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitNormal                      ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool AActor::TraceComponent ( class UPrimitiveComponent* InComponent, struct FVector TraceEnd, struct FVector TraceStart, struct FVector Extent, unsigned long bComplexCollision, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo )
{
	static UFunction* pFnTraceComponent = NULL;

	if ( ! pFnTraceComponent )
		pFnTraceComponent = (UFunction*) UObject::GObjObjects()->Data[ 6548 ];

	AActor_execTraceComponent_Parms TraceComponent_Parms;
	TraceComponent_Parms.InComponent = InComponent;
	memcpy ( &TraceComponent_Parms.TraceEnd, &TraceEnd, 0xC );
	memcpy ( &TraceComponent_Parms.TraceStart, &TraceStart, 0xC );
	memcpy ( &TraceComponent_Parms.Extent, &Extent, 0xC );
	TraceComponent_Parms.bComplexCollision = bComplexCollision;

	pFnTraceComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTraceComponent, &TraceComponent_Parms, NULL );

	pFnTraceComponent->FunctionFlags |= 0x400;

	if ( HitLocation )
		memcpy ( HitLocation, &TraceComponent_Parms.HitLocation, 0xC );

	if ( HitNormal )
		memcpy ( HitNormal, &TraceComponent_Parms.HitNormal, 0xC );

	if ( HitInfo )
		memcpy ( HitInfo, &TraceComponent_Parms.HitInfo, 0x28 );

	return TraceComponent_Parms.ReturnValue;
};

// Function Engine.Actor.Trace
// [0x00424401] ( FUNC_Final | FUNC_Native ) iNative [0x0115]
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TraceEnd                       ( CPF_Parm )
// struct FVector                 TraceStart                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTraceActors                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// int                            ExtraTraceFlags                ( CPF_OptionalParm | CPF_Parm )
// int                            ExtraProgrammerFlags           ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitNormal                      ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

class AActor* AActor::Trace ( struct FVector TraceEnd, struct FVector TraceStart, unsigned long bTraceActors, struct FVector Extent, int ExtraTraceFlags, int ExtraProgrammerFlags, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo )
{
	static UFunction* pFnTrace = NULL;

	if ( ! pFnTrace )
		pFnTrace = (UFunction*) UObject::GObjObjects()->Data[ 6537 ];

	AActor_execTrace_Parms Trace_Parms;
	memcpy ( &Trace_Parms.TraceEnd, &TraceEnd, 0xC );
	memcpy ( &Trace_Parms.TraceStart, &TraceStart, 0xC );
	Trace_Parms.bTraceActors = bTraceActors;
	memcpy ( &Trace_Parms.Extent, &Extent, 0xC );
	Trace_Parms.ExtraTraceFlags = ExtraTraceFlags;
	Trace_Parms.ExtraProgrammerFlags = ExtraProgrammerFlags;

	unsigned short NativeIndex = pFnTrace->iNative;
	pFnTrace->iNative = 0;

	pFnTrace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrace, &Trace_Parms, NULL );

	pFnTrace->FunctionFlags |= 0x400;

	pFnTrace->iNative = NativeIndex;

	if ( HitLocation )
		memcpy ( HitLocation, &Trace_Parms.HitLocation, 0xC );

	if ( HitNormal )
		memcpy ( HitNormal, &Trace_Parms.HitNormal, 0xC );

	if ( HitInfo )
		memcpy ( HitInfo, &Trace_Parms.HitInfo, 0x28 );

	return Trace_Parms.ReturnValue;
};

// Function Engine.Actor.VolumeBasedDestroy
// [0x00020102] 
// Parameters infos:
// class APhysicsVolume*          PV                             ( CPF_Parm )

void AActor::VolumeBasedDestroy ( class APhysicsVolume* PV )
{
	static UFunction* pFnVolumeBasedDestroy = NULL;

	if ( ! pFnVolumeBasedDestroy )
		pFnVolumeBasedDestroy = (UFunction*) UObject::GObjObjects()->Data[ 6535 ];

	AActor_execVolumeBasedDestroy_Parms VolumeBasedDestroy_Parms;
	VolumeBasedDestroy_Parms.PV = PV;

	this->ProcessEvent ( pFnVolumeBasedDestroy, &VolumeBasedDestroy_Parms, NULL );
};

// Function Engine.Actor.OutsideWorldBounds
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AActor::eventOutsideWorldBounds ( )
{
	static UFunction* pFnOutsideWorldBounds = NULL;

	if ( ! pFnOutsideWorldBounds )
		pFnOutsideWorldBounds = (UFunction*) UObject::GObjObjects()->Data[ 6534 ];

	AActor_eventOutsideWorldBounds_Parms OutsideWorldBounds_Parms;

	this->ProcessEvent ( pFnOutsideWorldBounds, &OutsideWorldBounds_Parms, NULL );
};

// Function Engine.Actor.FellOutOfWorld
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void AActor::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 6532 ];

	AActor_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function Engine.Actor.UsedBy
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   User                           ( CPF_Parm )

bool AActor::UsedBy ( class APawn* User )
{
	static UFunction* pFnUsedBy = NULL;

	if ( ! pFnUsedBy )
		pFnUsedBy = (UFunction*) UObject::GObjObjects()->Data[ 6529 ];

	AActor_execUsedBy_Parms UsedBy_Parms;
	UsedBy_Parms.User = User;

	this->ProcessEvent ( pFnUsedBy, &UsedBy_Parms, NULL );

	return UsedBy_Parms.ReturnValue;
};

// Function Engine.Actor.OverRotated
// [0x00420900] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                out_Desired                    ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Actual                     ( CPF_Parm | CPF_OutParm )

bool AActor::eventOverRotated ( struct FRotator* out_Desired, struct FRotator* out_Actual )
{
	static UFunction* pFnOverRotated = NULL;

	if ( ! pFnOverRotated )
		pFnOverRotated = (UFunction*) UObject::GObjObjects()->Data[ 6525 ];

	AActor_eventOverRotated_Parms OverRotated_Parms;

	this->ProcessEvent ( pFnOverRotated, &OverRotated_Parms, NULL );

	if ( out_Desired )
		memcpy ( out_Desired, &OverRotated_Parms.out_Desired, 0xC );

	if ( out_Actual )
		memcpy ( out_Actual, &OverRotated_Parms.out_Actual, 0xC );

	return OverRotated_Parms.ReturnValue;
};

// Function Engine.Actor.ClampRotation
// [0x00420501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                rBase                          ( CPF_Parm )
// struct FRotator                rUpperLimits                   ( CPF_Parm )
// struct FRotator                rLowerLimits                   ( CPF_Parm )
// struct FRotator                out_Rot                        ( CPF_Parm | CPF_OutParm )

bool AActor::ClampRotation ( struct FRotator rBase, struct FRotator rUpperLimits, struct FRotator rLowerLimits, struct FRotator* out_Rot )
{
	static UFunction* pFnClampRotation = NULL;

	if ( ! pFnClampRotation )
		pFnClampRotation = (UFunction*) UObject::GObjObjects()->Data[ 6519 ];

	AActor_execClampRotation_Parms ClampRotation_Parms;
	memcpy ( &ClampRotation_Parms.rBase, &rBase, 0xC );
	memcpy ( &ClampRotation_Parms.rUpperLimits, &rUpperLimits, 0xC );
	memcpy ( &ClampRotation_Parms.rLowerLimits, &rLowerLimits, 0xC );

	pFnClampRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClampRotation, &ClampRotation_Parms, NULL );

	pFnClampRotation->FunctionFlags |= 0x400;

	if ( out_Rot )
		memcpy ( out_Rot, &ClampRotation_Parms.out_Rot, 0xC );

	return ClampRotation_Parms.ReturnValue;
};

// Function Engine.Actor.OnSleepRBPhysics
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventOnSleepRBPhysics ( )
{
	static UFunction* pFnOnSleepRBPhysics = NULL;

	if ( ! pFnOnSleepRBPhysics )
		pFnOnSleepRBPhysics = (UFunction*) UObject::GObjObjects()->Data[ 6518 ];

	AActor_eventOnSleepRBPhysics_Parms OnSleepRBPhysics_Parms;

	this->ProcessEvent ( pFnOnSleepRBPhysics, &OnSleepRBPhysics_Parms, NULL );
};

// Function Engine.Actor.OnWakeRBPhysics
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventOnWakeRBPhysics ( )
{
	static UFunction* pFnOnWakeRBPhysics = NULL;

	if ( ! pFnOnWakeRBPhysics )
		pFnOnWakeRBPhysics = (UFunction*) UObject::GObjObjects()->Data[ 6517 ];

	AActor_eventOnWakeRBPhysics_Parms OnWakeRBPhysics_Parms;

	this->ProcessEvent ( pFnOnWakeRBPhysics, &OnWakeRBPhysics_Parms, NULL );
};

// Function Engine.Actor.RanInto
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventRanInto ( class AActor* Other )
{
	static UFunction* pFnRanInto = NULL;

	if ( ! pFnRanInto )
		pFnRanInto = (UFunction*) UObject::GObjObjects()->Data[ 6515 ];

	AActor_eventRanInto_Parms RanInto_Parms;
	RanInto_Parms.Other = Other;

	this->ProcessEvent ( pFnRanInto, &RanInto_Parms, NULL );
};

// Function Engine.Actor.EncroachedBy
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = (UFunction*) UObject::GObjObjects()->Data[ 6513 ];

	AActor_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function Engine.Actor.EncroachingOn
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AActor::eventEncroachingOn ( class AActor* Other )
{
	static UFunction* pFnEncroachingOn = NULL;

	if ( ! pFnEncroachingOn )
		pFnEncroachingOn = (UFunction*) UObject::GObjObjects()->Data[ 6510 ];

	AActor_eventEncroachingOn_Parms EncroachingOn_Parms;
	EncroachingOn_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachingOn, &EncroachingOn_Parms, NULL );

	return EncroachingOn_Parms.ReturnValue;
};

// Function Engine.Actor.CollisionChanged
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventCollisionChanged ( )
{
	static UFunction* pFnCollisionChanged = NULL;

	if ( ! pFnCollisionChanged )
		pFnCollisionChanged = (UFunction*) UObject::GObjObjects()->Data[ 6509 ];

	AActor_eventCollisionChanged_Parms CollisionChanged_Parms;

	this->ProcessEvent ( pFnCollisionChanged, &CollisionChanged_Parms, NULL );
};

// Function Engine.Actor.SpecialHandling
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

class AActor* AActor::eventSpecialHandling ( class APawn* Other )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = (UFunction*) UObject::GObjObjects()->Data[ 6506 ];

	AActor_eventSpecialHandling_Parms SpecialHandling_Parms;
	SpecialHandling_Parms.Other = Other;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );

	return SpecialHandling_Parms.ReturnValue;
};

// Function Engine.Actor.Detach
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventDetach ( class AActor* Other )
{
	static UFunction* pFnDetach = NULL;

	if ( ! pFnDetach )
		pFnDetach = (UFunction*) UObject::GObjObjects()->Data[ 6504 ];

	AActor_eventDetach_Parms Detach_Parms;
	Detach_Parms.Other = Other;

	this->ProcessEvent ( pFnDetach, &Detach_Parms, NULL );
};

// Function Engine.Actor.Attach
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventAttach ( class AActor* Other )
{
	static UFunction* pFnAttach = NULL;

	if ( ! pFnAttach )
		pFnAttach = (UFunction*) UObject::GObjObjects()->Data[ 6502 ];

	AActor_eventAttach_Parms Attach_Parms;
	Attach_Parms.Other = Other;

	this->ProcessEvent ( pFnAttach, &Attach_Parms, NULL );
};

// Function Engine.Actor.BaseChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventBaseChange ( )
{
	static UFunction* pFnBaseChange = NULL;

	if ( ! pFnBaseChange )
		pFnBaseChange = (UFunction*) UObject::GObjObjects()->Data[ 6501 ];

	AActor_eventBaseChange_Parms BaseChange_Parms;

	this->ProcessEvent ( pFnBaseChange, &BaseChange_Parms, NULL );
};

// Function Engine.Actor.Bump
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AActor::eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal )
{
	static UFunction* pFnBump = NULL;

	if ( ! pFnBump )
		pFnBump = (UFunction*) UObject::GObjObjects()->Data[ 6497 ];

	AActor_eventBump_Parms Bump_Parms;
	Bump_Parms.Other = Other;
	Bump_Parms.OtherComp = OtherComp;
	memcpy ( &Bump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnBump, &Bump_Parms, NULL );
};

// Function Engine.Actor.UnTouch
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 6495 ];

	AActor_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function Engine.Actor.PostTouch
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventPostTouch ( class AActor* Other )
{
	static UFunction* pFnPostTouch = NULL;

	if ( ! pFnPostTouch )
		pFnPostTouch = (UFunction*) UObject::GObjObjects()->Data[ 6493 ];

	AActor_eventPostTouch_Parms PostTouch_Parms;
	PostTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnPostTouch, &PostTouch_Parms, NULL );
};

// Function Engine.Actor.Touch
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AActor::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 6488 ];

	AActor_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.Actor.PhysicsVolumeChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APhysicsVolume*          NewVolume                      ( CPF_Parm )

void AActor::eventPhysicsVolumeChange ( class APhysicsVolume* NewVolume )
{
	static UFunction* pFnPhysicsVolumeChange = NULL;

	if ( ! pFnPhysicsVolumeChange )
		pFnPhysicsVolumeChange = (UFunction*) UObject::GObjObjects()->Data[ 6486 ];

	AActor_eventPhysicsVolumeChange_Parms PhysicsVolumeChange_Parms;
	PhysicsVolumeChange_Parms.NewVolume = NewVolume;

	this->ProcessEvent ( pFnPhysicsVolumeChange, &PhysicsVolumeChange_Parms, NULL );
};

// Function Engine.Actor.Landed
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void AActor::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 6483 ];

	AActor_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function Engine.Actor.Falling
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventFalling ( )
{
	static UFunction* pFnFalling = NULL;

	if ( ! pFnFalling )
		pFnFalling = (UFunction*) UObject::GObjObjects()->Data[ 6482 ];

	AActor_eventFalling_Parms Falling_Parms;

	this->ProcessEvent ( pFnFalling, &Falling_Parms, NULL );
};

// Function Engine.Actor.HitWall
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void AActor::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 6477 ];

	AActor_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function Engine.Actor.Timer
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 6476 ];

	AActor_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Engine.Actor.Tick
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void AActor::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 6474 ];

	AActor_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.Actor.LostChild
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventLostChild ( class AActor* Other )
{
	static UFunction* pFnLostChild = NULL;

	if ( ! pFnLostChild )
		pFnLostChild = (UFunction*) UObject::GObjObjects()->Data[ 6472 ];

	AActor_eventLostChild_Parms LostChild_Parms;
	LostChild_Parms.Other = Other;

	this->ProcessEvent ( pFnLostChild, &LostChild_Parms, NULL );
};

// Function Engine.Actor.GainedChild
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventGainedChild ( class AActor* Other )
{
	static UFunction* pFnGainedChild = NULL;

	if ( ! pFnGainedChild )
		pFnGainedChild = (UFunction*) UObject::GObjObjects()->Data[ 6470 ];

	AActor_eventGainedChild_Parms GainedChild_Parms;
	GainedChild_Parms.Other = Other;

	this->ProcessEvent ( pFnGainedChild, &GainedChild_Parms, NULL );
};

// Function Engine.Actor.Destroyed
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 6469 ];

	AActor_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Actor.GetWasInVehicleTransitionStatus
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::GetWasInVehicleTransitionStatus ( )
{
	static UFunction* pFnGetWasInVehicleTransitionStatus = NULL;

	if ( ! pFnGetWasInVehicleTransitionStatus )
		pFnGetWasInVehicleTransitionStatus = (UFunction*) UObject::GObjObjects()->Data[ 6467 ];

	AActor_execGetWasInVehicleTransitionStatus_Parms GetWasInVehicleTransitionStatus_Parms;

	pFnGetWasInVehicleTransitionStatus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWasInVehicleTransitionStatus, &GetWasInVehicleTransitionStatus_Parms, NULL );

	pFnGetWasInVehicleTransitionStatus->FunctionFlags |= 0x400;

	return GetWasInVehicleTransitionStatus_Parms.ReturnValue;
};

// Function Engine.Actor.SetWasInVehicleTransitionStatus
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bStatus                        ( CPF_Parm )

void AActor::SetWasInVehicleTransitionStatus ( unsigned long bStatus )
{
	static UFunction* pFnSetWasInVehicleTransitionStatus = NULL;

	if ( ! pFnSetWasInVehicleTransitionStatus )
		pFnSetWasInVehicleTransitionStatus = (UFunction*) UObject::GObjObjects()->Data[ 6465 ];

	AActor_execSetWasInVehicleTransitionStatus_Parms SetWasInVehicleTransitionStatus_Parms;
	SetWasInVehicleTransitionStatus_Parms.bStatus = bStatus;

	pFnSetWasInVehicleTransitionStatus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWasInVehicleTransitionStatus, &SetWasInVehicleTransitionStatus_Parms, NULL );

	pFnSetWasInVehicleTransitionStatus->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetTickIsDisabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInDisabled                    ( CPF_Parm )

void AActor::SetTickIsDisabled ( unsigned long bInDisabled )
{
	static UFunction* pFnSetTickIsDisabled = NULL;

	if ( ! pFnSetTickIsDisabled )
		pFnSetTickIsDisabled = (UFunction*) UObject::GObjObjects()->Data[ 6463 ];

	AActor_execSetTickIsDisabled_Parms SetTickIsDisabled_Parms;
	SetTickIsDisabled_Parms.bInDisabled = bInDisabled;

	pFnSetTickIsDisabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTickIsDisabled, &SetTickIsDisabled_Parms, NULL );

	pFnSetTickIsDisabled->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetTickGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewTickGroup                   ( CPF_Parm )

void AActor::SetTickGroup ( unsigned char NewTickGroup )
{
	static UFunction* pFnSetTickGroup = NULL;

	if ( ! pFnSetTickGroup )
		pFnSetTickGroup = (UFunction*) UObject::GObjObjects()->Data[ 6461 ];

	AActor_execSetTickGroup_Parms SetTickGroup_Parms;
	SetTickGroup_Parms.NewTickGroup = NewTickGroup;

	pFnSetTickGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTickGroup, &SetTickGroup_Parms, NULL );

	pFnSetTickGroup->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ReattachComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         ComponentToReattach            ( CPF_Parm | CPF_EditInline )

void AActor::ReattachComponent ( class UActorComponent* ComponentToReattach )
{
	static UFunction* pFnReattachComponent = NULL;

	if ( ! pFnReattachComponent )
		pFnReattachComponent = (UFunction*) UObject::GObjObjects()->Data[ 6459 ];

	AActor_execReattachComponent_Parms ReattachComponent_Parms;
	ReattachComponent_Parms.ComponentToReattach = ComponentToReattach;

	pFnReattachComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReattachComponent, &ReattachComponent_Parms, NULL );

	pFnReattachComponent->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DetachComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         ExComponent                    ( CPF_Parm | CPF_EditInline )

void AActor::DetachComponent ( class UActorComponent* ExComponent )
{
	static UFunction* pFnDetachComponent = NULL;

	if ( ! pFnDetachComponent )
		pFnDetachComponent = (UFunction*) UObject::GObjObjects()->Data[ 6457 ];

	AActor_execDetachComponent_Parms DetachComponent_Parms;
	DetachComponent_Parms.ExComponent = ExComponent;

	pFnDetachComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetachComponent, &DetachComponent_Parms, NULL );

	pFnDetachComponent->FunctionFlags |= 0x400;
};

// Function Engine.Actor.AttachComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         NewComponent                   ( CPF_Parm | CPF_EditInline )

void AActor::AttachComponent ( class UActorComponent* NewComponent )
{
	static UFunction* pFnAttachComponent = NULL;

	if ( ! pFnAttachComponent )
		pFnAttachComponent = (UFunction*) UObject::GObjObjects()->Data[ 6455 ];

	AActor_execAttachComponent_Parms AttachComponent_Parms;
	AttachComponent_Parms.NewComponent = NewComponent;

	pFnAttachComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachComponent, &AttachComponent_Parms, NULL );

	pFnAttachComponent->FunctionFlags |= 0x400;
};

// Function Engine.Actor.UnClock
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          Time                           ( CPF_Parm | CPF_OutParm )

void AActor::UnClock ( float* Time )
{
	static UFunction* pFnUnClock = NULL;

	if ( ! pFnUnClock )
		pFnUnClock = (UFunction*) UObject::GObjObjects()->Data[ 6453 ];

	AActor_execUnClock_Parms UnClock_Parms;

	pFnUnClock->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnClock, &UnClock_Parms, NULL );

	pFnUnClock->FunctionFlags |= 0x400;

	if ( Time )
		*Time = UnClock_Parms.Time;
};

// Function Engine.Actor.Clock
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          Time                           ( CPF_Parm | CPF_OutParm )

void AActor::Clock ( float* Time )
{
	static UFunction* pFnClock = NULL;

	if ( ! pFnClock )
		pFnClock = (UFunction*) UObject::GObjObjects()->Data[ 6451 ];

	AActor_execClock_Parms Clock_Parms;

	pFnClock->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClock, &Clock_Parms, NULL );

	pFnClock->FunctionFlags |= 0x400;

	if ( Time )
		*Time = Clock_Parms.Time;
};

// Function Engine.Actor.SetPhysics
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0F82]
// Parameters infos:
// unsigned char                  newPhysics                     ( CPF_Parm )

void AActor::SetPhysics ( unsigned char newPhysics )
{
	static UFunction* pFnSetPhysics = NULL;

	if ( ! pFnSetPhysics )
		pFnSetPhysics = (UFunction*) UObject::GObjObjects()->Data[ 6449 ];

	AActor_execSetPhysics_Parms SetPhysics_Parms;
	SetPhysics_Parms.newPhysics = newPhysics;

	unsigned short NativeIndex = pFnSetPhysics->iNative;
	pFnSetPhysics->iNative = 0;

	pFnSetPhysics->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPhysics, &SetPhysics_Parms, NULL );

	pFnSetPhysics->FunctionFlags |= 0x400;

	pFnSetPhysics->iNative = NativeIndex;
};

// Function Engine.Actor.SetOnlyOwnerSee
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewOnlyOwnerSee               ( CPF_Parm )

void AActor::SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee )
{
	static UFunction* pFnSetOnlyOwnerSee = NULL;

	if ( ! pFnSetOnlyOwnerSee )
		pFnSetOnlyOwnerSee = (UFunction*) UObject::GObjObjects()->Data[ 6447 ];

	AActor_execSetOnlyOwnerSee_Parms SetOnlyOwnerSee_Parms;
	SetOnlyOwnerSee_Parms.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	pFnSetOnlyOwnerSee->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOnlyOwnerSee, &SetOnlyOwnerSee_Parms, NULL );

	pFnSetOnlyOwnerSee->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugMarker
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 LineStart                      ( CPF_Parm )
// int                            Scale                          ( CPF_Parm )
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned long                  bIsPersistent                  ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugMarker ( struct FVector LineStart, int Scale, unsigned char R, unsigned char G, unsigned char B, unsigned long bIsPersistent )
{
	static UFunction* pFnDrawDebugMarker = NULL;

	if ( ! pFnDrawDebugMarker )
		pFnDrawDebugMarker = (UFunction*) UObject::GObjObjects()->Data[ 6440 ];

	AActor_execDrawDebugMarker_Parms DrawDebugMarker_Parms;
	memcpy ( &DrawDebugMarker_Parms.LineStart, &LineStart, 0xC );
	DrawDebugMarker_Parms.Scale = Scale;
	DrawDebugMarker_Parms.R = R;
	DrawDebugMarker_Parms.G = G;
	DrawDebugMarker_Parms.B = B;
	DrawDebugMarker_Parms.bIsPersistent = bIsPersistent;

	pFnDrawDebugMarker->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugMarker, &DrawDebugMarker_Parms, NULL );

	pFnDrawDebugMarker->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetHidden
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewHidden                     ( CPF_Parm )

void AActor::SetHidden ( unsigned long bNewHidden )
{
	static UFunction* pFnSetHidden = NULL;

	if ( ! pFnSetHidden )
		pFnSetHidden = (UFunction*) UObject::GObjObjects()->Data[ 6438 ];

	AActor_execSetHidden_Parms SetHidden_Parms;
	SetHidden_Parms.bNewHidden = bNewHidden;

	pFnSetHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHidden, &SetHidden_Parms, NULL );

	pFnSetHidden->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ChartData
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 DataName                       ( CPF_Parm | CPF_NeedCtorLink )
// float                          DataValue                      ( CPF_Parm )

void AActor::ChartData ( struct FString DataName, float DataValue )
{
	static UFunction* pFnChartData = NULL;

	if ( ! pFnChartData )
		pFnChartData = (UFunction*) UObject::GObjObjects()->Data[ 6435 ];

	AActor_execChartData_Parms ChartData_Parms;
	memcpy ( &ChartData_Parms.DataName, &DataName, 0x10 );
	ChartData_Parms.DataValue = DataValue;

	pFnChartData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChartData, &ChartData_Parms, NULL );

	pFnChartData->FunctionFlags |= 0x400;
};

// Function Engine.Actor.FlushDebugStrings
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AActor::FlushDebugStrings ( )
{
	static UFunction* pFnFlushDebugStrings = NULL;

	if ( ! pFnFlushDebugStrings )
		pFnFlushDebugStrings = (UFunction*) UObject::GObjObjects()->Data[ 6434 ];

	AActor_execFlushDebugStrings_Parms FlushDebugStrings_Parms;

	pFnFlushDebugStrings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlushDebugStrings, &FlushDebugStrings_Parms, NULL );

	pFnFlushDebugStrings->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugFrustrum
// [0x00426401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )
// struct FMatrix                 FrustumToWorld                 ( CPF_Const | CPF_Parm | CPF_OutParm )

void AActor::DrawDebugFrustrum ( unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines, struct FMatrix* FrustumToWorld )
{
	static UFunction* pFnDrawDebugFrustrum = NULL;

	if ( ! pFnDrawDebugFrustrum )
		pFnDrawDebugFrustrum = (UFunction*) UObject::GObjObjects()->Data[ 6428 ];

	AActor_execDrawDebugFrustrum_Parms DrawDebugFrustrum_Parms;
	DrawDebugFrustrum_Parms.R = R;
	DrawDebugFrustrum_Parms.G = G;
	DrawDebugFrustrum_Parms.B = B;
	DrawDebugFrustrum_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugFrustrum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugFrustrum, &DrawDebugFrustrum_Parms, NULL );

	pFnDrawDebugFrustrum->FunctionFlags |= 0x400;

	if ( FrustumToWorld )
		memcpy ( FrustumToWorld, &DrawDebugFrustrum_Parms.FrustumToWorld, 0x40 );
};

// Function Engine.Actor.DrawDebugString
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 TextLocation                   ( CPF_Parm )
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// class AActor*                  TestBaseActor                  ( CPF_OptionalParm | CPF_Parm )
// struct FColor                  TextColor                      ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugString ( struct FVector TextLocation, struct FString Text, class AActor* TestBaseActor, struct FColor TextColor, float Duration )
{
	static UFunction* pFnDrawDebugString = NULL;

	if ( ! pFnDrawDebugString )
		pFnDrawDebugString = (UFunction*) UObject::GObjObjects()->Data[ 6422 ];

	AActor_execDrawDebugString_Parms DrawDebugString_Parms;
	memcpy ( &DrawDebugString_Parms.TextLocation, &TextLocation, 0xC );
	memcpy ( &DrawDebugString_Parms.Text, &Text, 0x10 );
	DrawDebugString_Parms.TestBaseActor = TestBaseActor;
	memcpy ( &DrawDebugString_Parms.TextColor, &TextColor, 0x4 );
	DrawDebugString_Parms.Duration = Duration;

	pFnDrawDebugString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugString, &DrawDebugString_Parms, NULL );

	pFnDrawDebugString->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugCone
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Origin                         ( CPF_Parm )
// struct FVector                 Direction                      ( CPF_Parm )
// float                          Length                         ( CPF_Parm )
// float                          AngleWidth                     ( CPF_Parm )
// float                          AngleHeight                    ( CPF_Parm )
// int                            NumSides                       ( CPF_Parm )
// struct FColor                  DrawColor                      ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugCone ( struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, struct FColor DrawColor, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugCone = NULL;

	if ( ! pFnDrawDebugCone )
		pFnDrawDebugCone = (UFunction*) UObject::GObjObjects()->Data[ 6413 ];

	AActor_execDrawDebugCone_Parms DrawDebugCone_Parms;
	memcpy ( &DrawDebugCone_Parms.Origin, &Origin, 0xC );
	memcpy ( &DrawDebugCone_Parms.Direction, &Direction, 0xC );
	DrawDebugCone_Parms.Length = Length;
	DrawDebugCone_Parms.AngleWidth = AngleWidth;
	DrawDebugCone_Parms.AngleHeight = AngleHeight;
	DrawDebugCone_Parms.NumSides = NumSides;
	memcpy ( &DrawDebugCone_Parms.DrawColor, &DrawColor, 0x4 );
	DrawDebugCone_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugCone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugCone, &DrawDebugCone_Parms, NULL );

	pFnDrawDebugCone->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugCylinder
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Start                          ( CPF_Parm )
// struct FVector                 End                            ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// int                            Segments                       ( CPF_Parm )
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugCylinder ( struct FVector Start, struct FVector End, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugCylinder = NULL;

	if ( ! pFnDrawDebugCylinder )
		pFnDrawDebugCylinder = (UFunction*) UObject::GObjObjects()->Data[ 6404 ];

	AActor_execDrawDebugCylinder_Parms DrawDebugCylinder_Parms;
	memcpy ( &DrawDebugCylinder_Parms.Start, &Start, 0xC );
	memcpy ( &DrawDebugCylinder_Parms.End, &End, 0xC );
	DrawDebugCylinder_Parms.Radius = Radius;
	DrawDebugCylinder_Parms.Segments = Segments;
	DrawDebugCylinder_Parms.R = R;
	DrawDebugCylinder_Parms.G = G;
	DrawDebugCylinder_Parms.B = B;
	DrawDebugCylinder_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugCylinder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugCylinder, &DrawDebugCylinder_Parms, NULL );

	pFnDrawDebugCylinder->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugSphere
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Center                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// int                            Segments                       ( CPF_Parm )
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugSphere ( struct FVector Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugSphere = NULL;

	if ( ! pFnDrawDebugSphere )
		pFnDrawDebugSphere = (UFunction*) UObject::GObjObjects()->Data[ 6396 ];

	AActor_execDrawDebugSphere_Parms DrawDebugSphere_Parms;
	memcpy ( &DrawDebugSphere_Parms.Center, &Center, 0xC );
	DrawDebugSphere_Parms.Radius = Radius;
	DrawDebugSphere_Parms.Segments = Segments;
	DrawDebugSphere_Parms.R = R;
	DrawDebugSphere_Parms.G = G;
	DrawDebugSphere_Parms.B = B;
	DrawDebugSphere_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugSphere->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugSphere, &DrawDebugSphere_Parms, NULL );

	pFnDrawDebugSphere->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugCoordinateSystem
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 AxisLoc                        ( CPF_Parm )
// struct FRotator                AxisRot                        ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugCoordinateSystem ( struct FVector AxisLoc, struct FRotator AxisRot, float Scale, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugCoordinateSystem = NULL;

	if ( ! pFnDrawDebugCoordinateSystem )
		pFnDrawDebugCoordinateSystem = (UFunction*) UObject::GObjObjects()->Data[ 6391 ];

	AActor_execDrawDebugCoordinateSystem_Parms DrawDebugCoordinateSystem_Parms;
	memcpy ( &DrawDebugCoordinateSystem_Parms.AxisLoc, &AxisLoc, 0xC );
	memcpy ( &DrawDebugCoordinateSystem_Parms.AxisRot, &AxisRot, 0xC );
	DrawDebugCoordinateSystem_Parms.Scale = Scale;
	DrawDebugCoordinateSystem_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugCoordinateSystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugCoordinateSystem, &DrawDebugCoordinateSystem_Parms, NULL );

	pFnDrawDebugCoordinateSystem->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugStar
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Position                       ( CPF_Parm )
// float                          Size                           ( CPF_Parm )
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugStar ( struct FVector Position, float Size, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugStar = NULL;

	if ( ! pFnDrawDebugStar )
		pFnDrawDebugStar = (UFunction*) UObject::GObjObjects()->Data[ 6384 ];

	AActor_execDrawDebugStar_Parms DrawDebugStar_Parms;
	memcpy ( &DrawDebugStar_Parms.Position, &Position, 0xC );
	DrawDebugStar_Parms.Size = Size;
	DrawDebugStar_Parms.R = R;
	DrawDebugStar_Parms.G = G;
	DrawDebugStar_Parms.B = B;
	DrawDebugStar_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugStar->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugStar, &DrawDebugStar_Parms, NULL );

	pFnDrawDebugStar->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugBox
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Center                         ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugBox ( struct FVector Center, struct FVector Extent, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugBox = NULL;

	if ( ! pFnDrawDebugBox )
		pFnDrawDebugBox = (UFunction*) UObject::GObjObjects()->Data[ 6377 ];

	AActor_execDrawDebugBox_Parms DrawDebugBox_Parms;
	memcpy ( &DrawDebugBox_Parms.Center, &Center, 0xC );
	memcpy ( &DrawDebugBox_Parms.Extent, &Extent, 0xC );
	DrawDebugBox_Parms.R = R;
	DrawDebugBox_Parms.G = G;
	DrawDebugBox_Parms.B = B;
	DrawDebugBox_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugBox, &DrawDebugBox_Parms, NULL );

	pFnDrawDebugBox->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugPoint
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Position                       ( CPF_Parm )
// float                          Size                           ( CPF_Parm )
// struct FLinearColor            PointColor                     ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugPoint ( struct FVector Position, float Size, struct FLinearColor PointColor, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugPoint = NULL;

	if ( ! pFnDrawDebugPoint )
		pFnDrawDebugPoint = (UFunction*) UObject::GObjObjects()->Data[ 6372 ];

	AActor_execDrawDebugPoint_Parms DrawDebugPoint_Parms;
	memcpy ( &DrawDebugPoint_Parms.Position, &Position, 0xC );
	DrawDebugPoint_Parms.Size = Size;
	memcpy ( &DrawDebugPoint_Parms.PointColor, &PointColor, 0x10 );
	DrawDebugPoint_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugPoint, &DrawDebugPoint_Parms, NULL );

	pFnDrawDebugPoint->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugLine
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 LineStart                      ( CPF_Parm )
// struct FVector                 LineEnd                        ( CPF_Parm )
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugLine ( struct FVector LineStart, struct FVector LineEnd, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugLine = NULL;

	if ( ! pFnDrawDebugLine )
		pFnDrawDebugLine = (UFunction*) UObject::GObjObjects()->Data[ 6365 ];

	AActor_execDrawDebugLine_Parms DrawDebugLine_Parms;
	memcpy ( &DrawDebugLine_Parms.LineStart, &LineStart, 0xC );
	memcpy ( &DrawDebugLine_Parms.LineEnd, &LineEnd, 0xC );
	DrawDebugLine_Parms.R = R;
	DrawDebugLine_Parms.G = G;
	DrawDebugLine_Parms.B = B;
	DrawDebugLine_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugLine, &DrawDebugLine_Parms, NULL );

	pFnDrawDebugLine->FunctionFlags |= 0x400;
};

// Function Engine.Actor.FlushPersistentDebugLines
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AActor::FlushPersistentDebugLines ( )
{
	static UFunction* pFnFlushPersistentDebugLines = NULL;

	if ( ! pFnFlushPersistentDebugLines )
		pFnFlushPersistentDebugLines = (UFunction*) UObject::GObjObjects()->Data[ 6364 ];

	AActor_execFlushPersistentDebugLines_Parms FlushPersistentDebugLines_Parms;

	pFnFlushPersistentDebugLines->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlushPersistentDebugLines, &FlushPersistentDebugLines_Parms, NULL );

	pFnFlushPersistentDebugLines->FunctionFlags |= 0x400;
};

// Function Engine.Actor.GetBasedPosition
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBasedPosition          BP                             ( CPF_Parm )

struct FVector AActor::GetBasedPosition ( struct FBasedPosition BP )
{
	static UFunction* pFnGetBasedPosition = NULL;

	if ( ! pFnGetBasedPosition )
		pFnGetBasedPosition = (UFunction*) UObject::GObjObjects()->Data[ 6361 ];

	AActor_execGetBasedPosition_Parms GetBasedPosition_Parms;
	memcpy ( &GetBasedPosition_Parms.BP, &BP, 0x38 );

	pFnGetBasedPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBasedPosition, &GetBasedPosition_Parms, NULL );

	pFnGetBasedPosition->FunctionFlags |= 0x400;

	return GetBasedPosition_Parms.ReturnValue;
};

// Function Engine.Actor.SetBasedPosition
// [0x00426401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 pos                            ( CPF_Parm )
// class AActor*                  ForcedBase                     ( CPF_OptionalParm | CPF_Parm )
// struct FBasedPosition          BP                             ( CPF_Parm | CPF_OutParm )

void AActor::SetBasedPosition ( struct FVector pos, class AActor* ForcedBase, struct FBasedPosition* BP )
{
	static UFunction* pFnSetBasedPosition = NULL;

	if ( ! pFnSetBasedPosition )
		pFnSetBasedPosition = (UFunction*) UObject::GObjObjects()->Data[ 6357 ];

	AActor_execSetBasedPosition_Parms SetBasedPosition_Parms;
	memcpy ( &SetBasedPosition_Parms.pos, &pos, 0xC );
	SetBasedPosition_Parms.ForcedBase = ForcedBase;

	pFnSetBasedPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBasedPosition, &SetBasedPosition_Parms, NULL );

	pFnSetBasedPosition->FunctionFlags |= 0x400;

	if ( BP )
		memcpy ( BP, &SetBasedPosition_Parms.BP, 0x38 );
};

// Function Engine.Actor.BP2Vect
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBasedPosition          BP                             ( CPF_Parm )

struct FVector AActor::BP2Vect ( struct FBasedPosition BP )
{
	static UFunction* pFnBP2Vect = NULL;

	if ( ! pFnBP2Vect )
		pFnBP2Vect = (UFunction*) UObject::GObjObjects()->Data[ 6354 ];

	AActor_execBP2Vect_Parms BP2Vect_Parms;
	memcpy ( &BP2Vect_Parms.BP, &BP, 0x38 );

	pFnBP2Vect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBP2Vect, &BP2Vect_Parms, NULL );

	pFnBP2Vect->FunctionFlags |= 0x400;

	return BP2Vect_Parms.ReturnValue;
};

// Function Engine.Actor.Vect2BP
// [0x00426401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 pos                            ( CPF_Parm )
// class AActor*                  ForcedBase                     ( CPF_OptionalParm | CPF_Parm )
// struct FBasedPosition          BP                             ( CPF_Parm | CPF_OutParm )

void AActor::Vect2BP ( struct FVector pos, class AActor* ForcedBase, struct FBasedPosition* BP )
{
	static UFunction* pFnVect2BP = NULL;

	if ( ! pFnVect2BP )
		pFnVect2BP = (UFunction*) UObject::GObjObjects()->Data[ 6350 ];

	AActor_execVect2BP_Parms Vect2BP_Parms;
	memcpy ( &Vect2BP_Parms.pos, &pos, 0xC );
	Vect2BP_Parms.ForcedBase = ForcedBase;

	pFnVect2BP->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVect2BP, &Vect2BP_Parms, NULL );

	pFnVect2BP->FunctionFlags |= 0x400;

	if ( BP )
		memcpy ( BP, &Vect2BP_Parms.BP, 0x38 );
};

// Function Engine.Actor.SetForcedInitialReplicatedProperty
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UProperty*               PropToReplicate                ( CPF_Parm )
// unsigned long                  bAdd                           ( CPF_Parm )

void AActor::SetForcedInitialReplicatedProperty ( class UProperty* PropToReplicate, unsigned long bAdd )
{
	static UFunction* pFnSetForcedInitialReplicatedProperty = NULL;

	if ( ! pFnSetForcedInitialReplicatedProperty )
		pFnSetForcedInitialReplicatedProperty = (UFunction*) UObject::GObjObjects()->Data[ 6347 ];

	AActor_execSetForcedInitialReplicatedProperty_Parms SetForcedInitialReplicatedProperty_Parms;
	SetForcedInitialReplicatedProperty_Parms.PropToReplicate = PropToReplicate;
	SetForcedInitialReplicatedProperty_Parms.bAdd = bAdd;

	pFnSetForcedInitialReplicatedProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetForcedInitialReplicatedProperty, &SetForcedInitialReplicatedProperty_Parms, NULL );

	pFnSetForcedInitialReplicatedProperty->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ReplicatedDataBinding
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AActor::eventReplicatedDataBinding ( struct FName VarName )
{
	static UFunction* pFnReplicatedDataBinding = NULL;

	if ( ! pFnReplicatedDataBinding )
		pFnReplicatedDataBinding = (UFunction*) UObject::GObjObjects()->Data[ 6345 ];

	AActor_eventReplicatedDataBinding_Parms ReplicatedDataBinding_Parms;
	memcpy ( &ReplicatedDataBinding_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedDataBinding, &ReplicatedDataBinding_Parms, NULL );
};

// Function Engine.Actor.ReplicatedEvent
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 6343 ];

	AActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.Actor.IsOwnedBy
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TestActor                      ( CPF_Parm )

bool AActor::IsOwnedBy ( class AActor* TestActor )
{
	static UFunction* pFnIsOwnedBy = NULL;

	if ( ! pFnIsOwnedBy )
		pFnIsOwnedBy = (UFunction*) UObject::GObjObjects()->Data[ 6340 ];

	AActor_execIsOwnedBy_Parms IsOwnedBy_Parms;
	IsOwnedBy_Parms.TestActor = TestActor;

	pFnIsOwnedBy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsOwnedBy, &IsOwnedBy_Parms, NULL );

	pFnIsOwnedBy->FunctionFlags |= 0x400;

	return IsOwnedBy_Parms.ReturnValue;
};

// Function Engine.Actor.GetBaseMost
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* AActor::GetBaseMost ( )
{
	static UFunction* pFnGetBaseMost = NULL;

	if ( ! pFnGetBaseMost )
		pFnGetBaseMost = (UFunction*) UObject::GObjObjects()->Data[ 6338 ];

	AActor_execGetBaseMost_Parms GetBaseMost_Parms;

	pFnGetBaseMost->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBaseMost, &GetBaseMost_Parms, NULL );

	pFnGetBaseMost->FunctionFlags |= 0x400;

	return GetBaseMost_Parms.ReturnValue;
};

// Function Engine.Actor.IsBasedOn
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TestActor                      ( CPF_Parm )

bool AActor::IsBasedOn ( class AActor* TestActor )
{
	static UFunction* pFnIsBasedOn = NULL;

	if ( ! pFnIsBasedOn )
		pFnIsBasedOn = (UFunction*) UObject::GObjObjects()->Data[ 6335 ];

	AActor_execIsBasedOn_Parms IsBasedOn_Parms;
	IsBasedOn_Parms.TestActor = TestActor;

	pFnIsBasedOn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsBasedOn, &IsBasedOn_Parms, NULL );

	pFnIsBasedOn->FunctionFlags |= 0x400;

	return IsBasedOn_Parms.ReturnValue;
};

// Function Engine.Actor.FindBase
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AActor::FindBase ( )
{
	static UFunction* pFnFindBase = NULL;

	if ( ! pFnFindBase )
		pFnFindBase = (UFunction*) UObject::GObjObjects()->Data[ 6334 ];

	AActor_execFindBase_Parms FindBase_Parms;

	pFnFindBase->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindBase, &FindBase_Parms, NULL );

	pFnFindBase->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetOwner
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0110]
// Parameters infos:
// class AActor*                  NewOwner                       ( CPF_Parm )

void AActor::SetOwner ( class AActor* NewOwner )
{
	static UFunction* pFnSetOwner = NULL;

	if ( ! pFnSetOwner )
		pFnSetOwner = (UFunction*) UObject::GObjObjects()->Data[ 6332 ];

	AActor_execSetOwner_Parms SetOwner_Parms;
	SetOwner_Parms.NewOwner = NewOwner;

	unsigned short NativeIndex = pFnSetOwner->iNative;
	pFnSetOwner->iNative = 0;

	pFnSetOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOwner, &SetOwner_Parms, NULL );

	pFnSetOwner->FunctionFlags |= 0x400;

	pFnSetOwner->iNative = NativeIndex;
};

// Function Engine.Actor.SetBase
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x012A]
// Parameters infos:
// class AActor*                  NewBase                        ( CPF_Parm )
// struct FVector                 NewFloor                       ( CPF_OptionalParm | CPF_Parm )
// class USkeletalMeshComponent*  SkelComp                       ( CPF_OptionalParm | CPF_Parm | CPF_EditInline )
// struct FName                   AttachName                     ( CPF_OptionalParm | CPF_Parm )

void AActor::SetBase ( class AActor* NewBase, struct FVector NewFloor, class USkeletalMeshComponent* SkelComp, struct FName AttachName )
{
	static UFunction* pFnSetBase = NULL;

	if ( ! pFnSetBase )
		pFnSetBase = (UFunction*) UObject::GObjObjects()->Data[ 6327 ];

	AActor_execSetBase_Parms SetBase_Parms;
	SetBase_Parms.NewBase = NewBase;
	memcpy ( &SetBase_Parms.NewFloor, &NewFloor, 0xC );
	SetBase_Parms.SkelComp = SkelComp;
	memcpy ( &SetBase_Parms.AttachName, &AttachName, 0x8 );

	unsigned short NativeIndex = pFnSetBase->iNative;
	pFnSetBase->iNative = 0;

	pFnSetBase->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBase, &SetBase_Parms, NULL );

	pFnSetBase->FunctionFlags |= 0x400;

	pFnSetBase->iNative = NativeIndex;
};

// Function Engine.Actor.GetTerminalVelocity
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AActor::GetTerminalVelocity ( )
{
	static UFunction* pFnGetTerminalVelocity = NULL;

	if ( ! pFnGetTerminalVelocity )
		pFnGetTerminalVelocity = (UFunction*) UObject::GObjObjects()->Data[ 6325 ];

	AActor_execGetTerminalVelocity_Parms GetTerminalVelocity_Parms;

	pFnGetTerminalVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTerminalVelocity, &GetTerminalVelocity_Parms, NULL );

	pFnGetTerminalVelocity->FunctionFlags |= 0x400;

	return GetTerminalVelocity_Parms.ReturnValue;
};

// Function Engine.Actor.AutonomousPhysics
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0F83]
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void AActor::AutonomousPhysics ( float DeltaSeconds )
{
	static UFunction* pFnAutonomousPhysics = NULL;

	if ( ! pFnAutonomousPhysics )
		pFnAutonomousPhysics = (UFunction*) UObject::GObjObjects()->Data[ 6323 ];

	AActor_execAutonomousPhysics_Parms AutonomousPhysics_Parms;
	AutonomousPhysics_Parms.DeltaSeconds = DeltaSeconds;

	unsigned short NativeIndex = pFnAutonomousPhysics->iNative;
	pFnAutonomousPhysics->iNative = 0;

	pFnAutonomousPhysics->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAutonomousPhysics, &AutonomousPhysics_Parms, NULL );

	pFnAutonomousPhysics->FunctionFlags |= 0x400;

	pFnAutonomousPhysics->iNative = NativeIndex;
};

// Function Engine.Actor.MoveSmooth
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0F81]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Delta                          ( CPF_Parm )

bool AActor::MoveSmooth ( struct FVector Delta )
{
	static UFunction* pFnMoveSmooth = NULL;

	if ( ! pFnMoveSmooth )
		pFnMoveSmooth = (UFunction*) UObject::GObjObjects()->Data[ 6320 ];

	AActor_execMoveSmooth_Parms MoveSmooth_Parms;
	memcpy ( &MoveSmooth_Parms.Delta, &Delta, 0xC );

	unsigned short NativeIndex = pFnMoveSmooth->iNative;
	pFnMoveSmooth->iNative = 0;

	pFnMoveSmooth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveSmooth, &MoveSmooth_Parms, NULL );

	pFnMoveSmooth->FunctionFlags |= 0x400;

	pFnMoveSmooth->iNative = NativeIndex;

	return MoveSmooth_Parms.ReturnValue;
};

// Function Engine.Actor.fixedTurn
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Current                        ( CPF_Parm )
// int                            Desired                        ( CPF_Parm )
// int                            DeltaRate                      ( CPF_Parm )

int AActor::fixedTurn ( int Current, int Desired, int DeltaRate )
{
	static UFunction* pFnfixedTurn = NULL;

	if ( ! pFnfixedTurn )
		pFnfixedTurn = (UFunction*) UObject::GObjObjects()->Data[ 6315 ];

	AActor_execfixedTurn_Parms fixedTurn_Parms;
	fixedTurn_Parms.Current = Current;
	fixedTurn_Parms.Desired = Desired;
	fixedTurn_Parms.DeltaRate = DeltaRate;

	pFnfixedTurn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnfixedTurn, &fixedTurn_Parms, NULL );

	pFnfixedTurn->FunctionFlags |= 0x400;

	return fixedTurn_Parms.ReturnValue;
};

// Function Engine.Actor.SetHardAttach
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewHardAttach                 ( CPF_OptionalParm | CPF_Parm )

void AActor::SetHardAttach ( unsigned long bNewHardAttach )
{
	static UFunction* pFnSetHardAttach = NULL;

	if ( ! pFnSetHardAttach )
		pFnSetHardAttach = (UFunction*) UObject::GObjObjects()->Data[ 6313 ];

	AActor_execSetHardAttach_Parms SetHardAttach_Parms;
	SetHardAttach_Parms.bNewHardAttach = bNewHardAttach;

	pFnSetHardAttach->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHardAttach, &SetHardAttach_Parms, NULL );

	pFnSetHardAttach->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetRelativeLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 NewLocation                    ( CPF_Parm )

bool AActor::SetRelativeLocation ( struct FVector NewLocation )
{
	static UFunction* pFnSetRelativeLocation = NULL;

	if ( ! pFnSetRelativeLocation )
		pFnSetRelativeLocation = (UFunction*) UObject::GObjObjects()->Data[ 6310 ];

	AActor_execSetRelativeLocation_Parms SetRelativeLocation_Parms;
	memcpy ( &SetRelativeLocation_Parms.NewLocation, &NewLocation, 0xC );

	pFnSetRelativeLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRelativeLocation, &SetRelativeLocation_Parms, NULL );

	pFnSetRelativeLocation->FunctionFlags |= 0x400;

	return SetRelativeLocation_Parms.ReturnValue;
};

// Function Engine.Actor.SetRelativeRotation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                NewRotation                    ( CPF_Parm )

bool AActor::SetRelativeRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnSetRelativeRotation = NULL;

	if ( ! pFnSetRelativeRotation )
		pFnSetRelativeRotation = (UFunction*) UObject::GObjObjects()->Data[ 6307 ];

	AActor_execSetRelativeRotation_Parms SetRelativeRotation_Parms;
	memcpy ( &SetRelativeRotation_Parms.NewRotation, &NewRotation, 0xC );

	pFnSetRelativeRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRelativeRotation, &SetRelativeRotation_Parms, NULL );

	pFnSetRelativeRotation->FunctionFlags |= 0x400;

	return SetRelativeRotation_Parms.ReturnValue;
};

// Function Engine.Actor.SetZone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bForceRefresh                  ( CPF_Parm )

void AActor::SetZone ( unsigned long bForceRefresh )
{
	static UFunction* pFnSetZone = NULL;

	if ( ! pFnSetZone )
		pFnSetZone = (UFunction*) UObject::GObjObjects()->Data[ 6305 ];

	AActor_execSetZone_Parms SetZone_Parms;
	SetZone_Parms.bForceRefresh = bForceRefresh;

	pFnSetZone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetZone, &SetZone_Parms, NULL );

	pFnSetZone->FunctionFlags |= 0x400;
};

// Function Engine.Actor.MovingWhichWay
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Amount                         ( CPF_Parm | CPF_OutParm )

unsigned char AActor::MovingWhichWay ( float* Amount )
{
	static UFunction* pFnMovingWhichWay = NULL;

	if ( ! pFnMovingWhichWay )
		pFnMovingWhichWay = (UFunction*) UObject::GObjObjects()->Data[ 6302 ];

	AActor_execMovingWhichWay_Parms MovingWhichWay_Parms;

	pFnMovingWhichWay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMovingWhichWay, &MovingWhichWay_Parms, NULL );

	pFnMovingWhichWay->FunctionFlags |= 0x400;

	if ( Amount )
		*Amount = MovingWhichWay_Parms.Amount;

	return MovingWhichWay_Parms.ReturnValue;
};

// Function Engine.Actor.SetRotation
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x012B]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                NewRotation                    ( CPF_Parm )

bool AActor::SetRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnSetRotation = NULL;

	if ( ! pFnSetRotation )
		pFnSetRotation = (UFunction*) UObject::GObjObjects()->Data[ 6299 ];

	AActor_execSetRotation_Parms SetRotation_Parms;
	memcpy ( &SetRotation_Parms.NewRotation, &NewRotation, 0xC );

	unsigned short NativeIndex = pFnSetRotation->iNative;
	pFnSetRotation->iNative = 0;

	pFnSetRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRotation, &SetRotation_Parms, NULL );

	pFnSetRotation->FunctionFlags |= 0x400;

	pFnSetRotation->iNative = NativeIndex;

	return SetRotation_Parms.ReturnValue;
};

// Function Engine.Actor.SetLocation
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x010B]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 NewLocation                    ( CPF_Parm )

bool AActor::SetLocation ( struct FVector NewLocation )
{
	static UFunction* pFnSetLocation = NULL;

	if ( ! pFnSetLocation )
		pFnSetLocation = (UFunction*) UObject::GObjObjects()->Data[ 6296 ];

	AActor_execSetLocation_Parms SetLocation_Parms;
	memcpy ( &SetLocation_Parms.NewLocation, &NewLocation, 0xC );

	unsigned short NativeIndex = pFnSetLocation->iNative;
	pFnSetLocation->iNative = 0;

	pFnSetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLocation, &SetLocation_Parms, NULL );

	pFnSetLocation->FunctionFlags |= 0x400;

	pFnSetLocation->iNative = NativeIndex;

	return SetLocation_Parms.ReturnValue;
};

// Function Engine.Actor.Move
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x010A]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Delta                          ( CPF_Parm )

bool AActor::Move ( struct FVector Delta )
{
	static UFunction* pFnMove = NULL;

	if ( ! pFnMove )
		pFnMove = (UFunction*) UObject::GObjObjects()->Data[ 6293 ];

	AActor_execMove_Parms Move_Parms;
	memcpy ( &Move_Parms.Delta, &Delta, 0xC );

	unsigned short NativeIndex = pFnMove->iNative;
	pFnMove->iNative = 0;

	pFnMove->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMove, &Move_Parms, NULL );

	pFnMove->FunctionFlags |= 0x400;

	pFnMove->iNative = NativeIndex;

	return Move_Parms.ReturnValue;
};

// Function Engine.Actor.SetDrawScale3D
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewScale3D                     ( CPF_Parm )

void AActor::SetDrawScale3D ( struct FVector NewScale3D )
{
	static UFunction* pFnSetDrawScale3D = NULL;

	if ( ! pFnSetDrawScale3D )
		pFnSetDrawScale3D = (UFunction*) UObject::GObjObjects()->Data[ 6291 ];

	AActor_execSetDrawScale3D_Parms SetDrawScale3D_Parms;
	memcpy ( &SetDrawScale3D_Parms.NewScale3D, &NewScale3D, 0xC );

	pFnSetDrawScale3D->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDrawScale3D, &SetDrawScale3D_Parms, NULL );

	pFnSetDrawScale3D->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetDrawScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewScale                       ( CPF_Parm )

void AActor::SetDrawScale ( float NewScale )
{
	static UFunction* pFnSetDrawScale = NULL;

	if ( ! pFnSetDrawScale )
		pFnSetDrawScale = (UFunction*) UObject::GObjObjects()->Data[ 6289 ];

	AActor_execSetDrawScale_Parms SetDrawScale_Parms;
	SetDrawScale_Parms.NewScale = NewScale;

	pFnSetDrawScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDrawScale, &SetDrawScale_Parms, NULL );

	pFnSetDrawScale->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetCollisionType
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewCollisionType               ( CPF_Parm )

void AActor::SetCollisionType ( unsigned char NewCollisionType )
{
	static UFunction* pFnSetCollisionType = NULL;

	if ( ! pFnSetCollisionType )
		pFnSetCollisionType = (UFunction*) UObject::GObjObjects()->Data[ 6287 ];

	AActor_execSetCollisionType_Parms SetCollisionType_Parms;
	SetCollisionType_Parms.NewCollisionType = NewCollisionType;

	pFnSetCollisionType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCollisionType, &SetCollisionType_Parms, NULL );

	pFnSetCollisionType->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetCollisionSize
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x011B]
// Parameters infos:
// float                          NewRadius                      ( CPF_Parm )
// float                          NewHeight                      ( CPF_Parm )

void AActor::SetCollisionSize ( float NewRadius, float NewHeight )
{
	static UFunction* pFnSetCollisionSize = NULL;

	if ( ! pFnSetCollisionSize )
		pFnSetCollisionSize = (UFunction*) UObject::GObjObjects()->Data[ 6284 ];

	AActor_execSetCollisionSize_Parms SetCollisionSize_Parms;
	SetCollisionSize_Parms.NewRadius = NewRadius;
	SetCollisionSize_Parms.NewHeight = NewHeight;

	unsigned short NativeIndex = pFnSetCollisionSize->iNative;
	pFnSetCollisionSize->iNative = 0;

	pFnSetCollisionSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCollisionSize, &SetCollisionSize_Parms, NULL );

	pFnSetCollisionSize->FunctionFlags |= 0x400;

	pFnSetCollisionSize->iNative = NativeIndex;
};

// Function Engine.Actor.SetCollision
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x0106]
// Parameters infos:
// unsigned long                  bNewColActors                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNewBlockActors                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNewIgnoreEncroachers          ( CPF_OptionalParm | CPF_Parm )

void AActor::SetCollision ( unsigned long bNewColActors, unsigned long bNewBlockActors, unsigned long bNewIgnoreEncroachers )
{
	static UFunction* pFnSetCollision = NULL;

	if ( ! pFnSetCollision )
		pFnSetCollision = (UFunction*) UObject::GObjObjects()->Data[ 6280 ];

	AActor_execSetCollision_Parms SetCollision_Parms;
	SetCollision_Parms.bNewColActors = bNewColActors;
	SetCollision_Parms.bNewBlockActors = bNewBlockActors;
	SetCollision_Parms.bNewIgnoreEncroachers = bNewIgnoreEncroachers;

	unsigned short NativeIndex = pFnSetCollision->iNative;
	pFnSetCollision->iNative = 0;

	pFnSetCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCollision, &SetCollision_Parms, NULL );

	pFnSetCollision->FunctionFlags |= 0x400;

	pFnSetCollision->iNative = NativeIndex;
};

// Function Engine.Actor.FinishAnim
// [0x00020409] ( FUNC_Final | FUNC_Native ) iNative [0x0105]
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )

void AActor::FinishAnim ( class UAnimNodeSequence* SeqNode )
{
	static UFunction* pFnFinishAnim = NULL;

	if ( ! pFnFinishAnim )
		pFnFinishAnim = (UFunction*) UObject::GObjObjects()->Data[ 6278 ];

	AActor_execFinishAnim_Parms FinishAnim_Parms;
	FinishAnim_Parms.SeqNode = SeqNode;

	unsigned short NativeIndex = pFnFinishAnim->iNative;
	pFnFinishAnim->iNative = 0;

	pFnFinishAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFinishAnim, &FinishAnim_Parms, NULL );

	pFnFinishAnim->FunctionFlags |= 0x400;

	pFnFinishAnim->iNative = NativeIndex;
};

// Function Engine.Actor.Sleep
// [0x00020409] ( FUNC_Final | FUNC_Native ) iNative [0x0100]
// Parameters infos:
// float                          Seconds                        ( CPF_Parm )

void AActor::Sleep ( float Seconds )
{
	static UFunction* pFnSleep = NULL;

	if ( ! pFnSleep )
		pFnSleep = (UFunction*) UObject::GObjObjects()->Data[ 6276 ];

	AActor_execSleep_Parms Sleep_Parms;
	Sleep_Parms.Seconds = Seconds;

	unsigned short NativeIndex = pFnSleep->iNative;
	pFnSleep->iNative = 0;

	pFnSleep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSleep, &Sleep_Parms, NULL );

	pFnSleep->FunctionFlags |= 0x400;

	pFnSleep->iNative = NativeIndex;
};

// Function Engine.Actor.ConsoleCommand
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bWriteToLog                    ( CPF_OptionalParm | CPF_Parm )

struct FString AActor::ConsoleCommand ( struct FString Command, unsigned long bWriteToLog )
{
	static UFunction* pFnConsoleCommand = NULL;

	if ( ! pFnConsoleCommand )
		pFnConsoleCommand = (UFunction*) UObject::GObjObjects()->Data[ 6272 ];

	AActor_execConsoleCommand_Parms ConsoleCommand_Parms;
	memcpy ( &ConsoleCommand_Parms.Command, &Command, 0x10 );
	ConsoleCommand_Parms.bWriteToLog = bWriteToLog;

	pFnConsoleCommand->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConsoleCommand, &ConsoleCommand_Parms, NULL );

	pFnConsoleCommand->FunctionFlags |= 0x400;

	return ConsoleCommand_Parms.ReturnValue;
};

// Function Engine.Actor.ForceUpdateComponents
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bCollisionUpdate               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTransformOnly                 ( CPF_OptionalParm | CPF_Parm )

void AActor::ForceUpdateComponents ( unsigned long bCollisionUpdate, unsigned long bTransformOnly )
{
	static UFunction* pFnForceUpdateComponents = NULL;

	if ( ! pFnForceUpdateComponents )
		pFnForceUpdateComponents = (UFunction*) UObject::GObjObjects()->Data[ 6269 ];

	AActor_execForceUpdateComponents_Parms ForceUpdateComponents_Parms;
	ForceUpdateComponents_Parms.bCollisionUpdate = bCollisionUpdate;
	ForceUpdateComponents_Parms.bTransformOnly = bTransformOnly;

	pFnForceUpdateComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceUpdateComponents, &ForceUpdateComponents_Parms, NULL );

	pFnForceUpdateComponents->FunctionFlags |= 0x400;
};

// Function Engine.Volume.ProcessActorSetVolume
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AVolume::eventProcessActorSetVolume ( class AActor* Other )
{
	static UFunction* pFnProcessActorSetVolume = NULL;

	if ( ! pFnProcessActorSetVolume )
		pFnProcessActorSetVolume = (UFunction*) UObject::GObjObjects()->Data[ 13590 ];

	AVolume_eventProcessActorSetVolume_Parms ProcessActorSetVolume_Parms;
	ProcessActorSetVolume_Parms.Other = Other;

	this->ProcessEvent ( pFnProcessActorSetVolume, &ProcessActorSetVolume_Parms, NULL );
};

// Function Engine.Volume.CollisionChanged
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AVolume::eventCollisionChanged ( )
{
	static UFunction* pFnCollisionChanged = NULL;

	if ( ! pFnCollisionChanged )
		pFnCollisionChanged = (UFunction*) UObject::GObjObjects()->Data[ 13589 ];

	AVolume_eventCollisionChanged_Parms CollisionChanged_Parms;

	this->ProcessEvent ( pFnCollisionChanged, &CollisionChanged_Parms, NULL );
};

// Function Engine.Volume.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AVolume::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 13587 ];

	AVolume_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.Volume.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AVolume::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 13572 ];

	AVolume_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Volume.GetLocationStringFor
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

struct FString AVolume::GetLocationStringFor ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnGetLocationStringFor = NULL;

	if ( ! pFnGetLocationStringFor )
		pFnGetLocationStringFor = (UFunction*) UObject::GObjObjects()->Data[ 13568 ];

	AVolume_execGetLocationStringFor_Parms GetLocationStringFor_Parms;
	GetLocationStringFor_Parms.PRI = PRI;

	this->ProcessEvent ( pFnGetLocationStringFor, &GetLocationStringFor_Parms, NULL );

	return GetLocationStringFor_Parms.ReturnValue;
};

// Function Engine.Volume.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 13566 ];

	AVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Volume.LineCheck
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 End                            ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FVector                 Start                          ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FVector                 Extent                         ( CPF_Const | CPF_Parm | CPF_OutParm )

bool AVolume::LineCheck ( struct FVector* End, struct FVector* Start, struct FVector* Extent )
{
	static UFunction* pFnLineCheck = NULL;

	if ( ! pFnLineCheck )
		pFnLineCheck = (UFunction*) UObject::GObjObjects()->Data[ 13561 ];

	AVolume_execLineCheck_Parms LineCheck_Parms;

	pFnLineCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLineCheck, &LineCheck_Parms, NULL );

	pFnLineCheck->FunctionFlags |= 0x400;

	if ( End )
		memcpy ( End, &LineCheck_Parms.End, 0xC );

	if ( Start )
		memcpy ( Start, &LineCheck_Parms.Start, 0xC );

	if ( Extent )
		memcpy ( Extent, &LineCheck_Parms.Extent, 0xC );

	return LineCheck_Parms.ReturnValue;
};

// Function Engine.Volume.EncompassesPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Loc                            ( CPF_Parm )

bool AVolume::EncompassesPoint ( struct FVector Loc )
{
	static UFunction* pFnEncompassesPoint = NULL;

	if ( ! pFnEncompassesPoint )
		pFnEncompassesPoint = (UFunction*) UObject::GObjObjects()->Data[ 13558 ];

	AVolume_execEncompassesPoint_Parms EncompassesPoint_Parms;
	memcpy ( &EncompassesPoint_Parms.Loc, &Loc, 0xC );

	pFnEncompassesPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEncompassesPoint, &EncompassesPoint_Parms, NULL );

	pFnEncompassesPoint->FunctionFlags |= 0x400;

	return EncompassesPoint_Parms.ReturnValue;
};

// Function Engine.Volume.Encompasses
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AVolume::Encompasses ( class AActor* Other )
{
	static UFunction* pFnEncompasses = NULL;

	if ( ! pFnEncompasses )
		pFnEncompasses = (UFunction*) UObject::GObjObjects()->Data[ 13555 ];

	AVolume_execEncompasses_Parms Encompasses_Parms;
	Encompasses_Parms.Other = Other;

	pFnEncompasses->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEncompasses, &Encompasses_Parms, NULL );

	pFnEncompasses->FunctionFlags |= 0x400;

	return Encompasses_Parms.ReturnValue;
};

// Function Engine.BlockingVolume.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ABlockingVolume::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 16081 ];

	ABlockingVolume_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.DynamicBlockingVolume.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ADynamicBlockingVolume_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void ADynamicBlockingVolume::ApplyCheckpointRecord ( struct ADynamicBlockingVolume_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 19069 ];

	ADynamicBlockingVolume_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x1C );
};

// Function Engine.DynamicBlockingVolume.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ADynamicBlockingVolume_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void ADynamicBlockingVolume::CreateCheckpointRecord ( struct ADynamicBlockingVolume_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 19067 ];

	ADynamicBlockingVolume_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x1C );
};

// Function Engine.DynamicBlockingVolume.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ADynamicBlockingVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 19065 ];

	ADynamicBlockingVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.LevelStreamingVolume.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ALevelStreamingVolume_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void ALevelStreamingVolume::ApplyCheckpointRecord ( struct ALevelStreamingVolume_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 23350 ];

	ALevelStreamingVolume_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.LevelStreamingVolume.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ALevelStreamingVolume_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void ALevelStreamingVolume::CreateCheckpointRecord ( struct ALevelStreamingVolume_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 23348 ];

	ALevelStreamingVolume_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.LevelStreamingVolume.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ALevelStreamingVolume::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 23345 ];

	ALevelStreamingVolume_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.PhysicsVolume.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct APhysicsVolume_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void APhysicsVolume::ApplyCheckpointRecord ( struct APhysicsVolume_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 18751 ];

	APhysicsVolume_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.PhysicsVolume.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct APhysicsVolume_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void APhysicsVolume::CreateCheckpointRecord ( struct APhysicsVolume_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 18749 ];

	APhysicsVolume_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.PhysicsVolume.ShouldSaveForCheckpoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APhysicsVolume::ShouldSaveForCheckpoint ( )
{
	static UFunction* pFnShouldSaveForCheckpoint = NULL;

	if ( ! pFnShouldSaveForCheckpoint )
		pFnShouldSaveForCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 18747 ];

	APhysicsVolume_execShouldSaveForCheckpoint_Parms ShouldSaveForCheckpoint_Parms;

	this->ProcessEvent ( pFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Parms, NULL );

	return ShouldSaveForCheckpoint_Parms.ReturnValue;
};

// Function Engine.PhysicsVolume.OnSetDamageInstigator
// [0x00020002] 
// Parameters infos:
// class USeqAct_SetDamageInstigator* Action                         ( CPF_Parm )

void APhysicsVolume::OnSetDamageInstigator ( class USeqAct_SetDamageInstigator* Action )
{
	static UFunction* pFnOnSetDamageInstigator = NULL;

	if ( ! pFnOnSetDamageInstigator )
		pFnOnSetDamageInstigator = (UFunction*) UObject::GObjObjects()->Data[ 18743 ];

	APhysicsVolume_execOnSetDamageInstigator_Parms OnSetDamageInstigator_Parms;
	OnSetDamageInstigator_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetDamageInstigator, &OnSetDamageInstigator_Parms, NULL );
};

// Function Engine.PhysicsVolume.NotifyPawnBecameViewTarget
// [0x00020000] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )

void APhysicsVolume::NotifyPawnBecameViewTarget ( class APawn* P, class APlayerController* PC )
{
	static UFunction* pFnNotifyPawnBecameViewTarget = NULL;

	if ( ! pFnNotifyPawnBecameViewTarget )
		pFnNotifyPawnBecameViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 18740 ];

	APhysicsVolume_execNotifyPawnBecameViewTarget_Parms NotifyPawnBecameViewTarget_Parms;
	NotifyPawnBecameViewTarget_Parms.P = P;
	NotifyPawnBecameViewTarget_Parms.PC = PC;

	this->ProcessEvent ( pFnNotifyPawnBecameViewTarget, &NotifyPawnBecameViewTarget_Parms, NULL );
};

// Function Engine.PhysicsVolume.ModifyPlayer
// [0x00020000] 
// Parameters infos:
// class APawn*                   PlayerPawn                     ( CPF_Parm )

void APhysicsVolume::ModifyPlayer ( class APawn* PlayerPawn )
{
	static UFunction* pFnModifyPlayer = NULL;

	if ( ! pFnModifyPlayer )
		pFnModifyPlayer = (UFunction*) UObject::GObjObjects()->Data[ 18738 ];

	APhysicsVolume_execModifyPlayer_Parms ModifyPlayer_Parms;
	ModifyPlayer_Parms.PlayerPawn = PlayerPawn;

	this->ProcessEvent ( pFnModifyPlayer, &ModifyPlayer_Parms, NULL );
};

// Function Engine.PhysicsVolume.CausePainTo
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APhysicsVolume::CausePainTo ( class AActor* Other )
{
	static UFunction* pFnCausePainTo = NULL;

	if ( ! pFnCausePainTo )
		pFnCausePainTo = (UFunction*) UObject::GObjObjects()->Data[ 18733 ];

	APhysicsVolume_execCausePainTo_Parms CausePainTo_Parms;
	CausePainTo_Parms.Other = Other;

	this->ProcessEvent ( pFnCausePainTo, &CausePainTo_Parms, NULL );
};

// Function Engine.PhysicsVolume.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void APhysicsVolume::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 18724 ];

	APhysicsVolume_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.PhysicsVolume.TimerPop
// [0x00020002] 
// Parameters infos:
// class AVolumeTimer*            T                              ( CPF_Parm )

void APhysicsVolume::TimerPop ( class AVolumeTimer* T )
{
	static UFunction* pFnTimerPop = NULL;

	if ( ! pFnTimerPop )
		pFnTimerPop = (UFunction*) UObject::GObjObjects()->Data[ 18721 ];

	APhysicsVolume_execTimerPop_Parms TimerPop_Parms;
	TimerPop_Parms.T = T;

	this->ProcessEvent ( pFnTimerPop, &TimerPop_Parms, NULL );
};

// Function Engine.PhysicsVolume.CollisionChanged
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void APhysicsVolume::eventCollisionChanged ( )
{
	static UFunction* pFnCollisionChanged = NULL;

	if ( ! pFnCollisionChanged )
		pFnCollisionChanged = (UFunction*) UObject::GObjObjects()->Data[ 18720 ];

	APhysicsVolume_eventCollisionChanged_Parms CollisionChanged_Parms;

	this->ProcessEvent ( pFnCollisionChanged, &CollisionChanged_Parms, NULL );
};

// Function Engine.PhysicsVolume.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void APhysicsVolume::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 18718 ];

	APhysicsVolume_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.PhysicsVolume.PawnLeavingVolume
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void APhysicsVolume::eventPawnLeavingVolume ( class APawn* Other )
{
	static UFunction* pFnPawnLeavingVolume = NULL;

	if ( ! pFnPawnLeavingVolume )
		pFnPawnLeavingVolume = (UFunction*) UObject::GObjObjects()->Data[ 18716 ];

	APhysicsVolume_eventPawnLeavingVolume_Parms PawnLeavingVolume_Parms;
	PawnLeavingVolume_Parms.Other = Other;

	this->ProcessEvent ( pFnPawnLeavingVolume, &PawnLeavingVolume_Parms, NULL );
};

// Function Engine.PhysicsVolume.PawnEnteredVolume
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void APhysicsVolume::eventPawnEnteredVolume ( class APawn* Other )
{
	static UFunction* pFnPawnEnteredVolume = NULL;

	if ( ! pFnPawnEnteredVolume )
		pFnPawnEnteredVolume = (UFunction*) UObject::GObjObjects()->Data[ 18714 ];

	APhysicsVolume_eventPawnEnteredVolume_Parms PawnEnteredVolume_Parms;
	PawnEnteredVolume_Parms.Other = Other;

	this->ProcessEvent ( pFnPawnEnteredVolume, &PawnEnteredVolume_Parms, NULL );
};

// Function Engine.PhysicsVolume.ActorLeavingVolume
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APhysicsVolume::eventActorLeavingVolume ( class AActor* Other )
{
	static UFunction* pFnActorLeavingVolume = NULL;

	if ( ! pFnActorLeavingVolume )
		pFnActorLeavingVolume = (UFunction*) UObject::GObjObjects()->Data[ 18712 ];

	APhysicsVolume_eventActorLeavingVolume_Parms ActorLeavingVolume_Parms;
	ActorLeavingVolume_Parms.Other = Other;

	this->ProcessEvent ( pFnActorLeavingVolume, &ActorLeavingVolume_Parms, NULL );
};

// Function Engine.PhysicsVolume.ActorEnteredVolume
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APhysicsVolume::eventActorEnteredVolume ( class AActor* Other )
{
	static UFunction* pFnActorEnteredVolume = NULL;

	if ( ! pFnActorEnteredVolume )
		pFnActorEnteredVolume = (UFunction*) UObject::GObjObjects()->Data[ 18710 ];

	APhysicsVolume_eventActorEnteredVolume_Parms ActorEnteredVolume_Parms;
	ActorEnteredVolume_Parms.Other = Other;

	this->ProcessEvent ( pFnActorEnteredVolume, &ActorEnteredVolume_Parms, NULL );
};

// Function Engine.PhysicsVolume.PhysicsChangedFor
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APhysicsVolume::eventPhysicsChangedFor ( class AActor* Other )
{
	static UFunction* pFnPhysicsChangedFor = NULL;

	if ( ! pFnPhysicsChangedFor )
		pFnPhysicsChangedFor = (UFunction*) UObject::GObjObjects()->Data[ 18708 ];

	APhysicsVolume_eventPhysicsChangedFor_Parms PhysicsChangedFor_Parms;
	PhysicsChangedFor_Parms.Other = Other;

	this->ProcessEvent ( pFnPhysicsChangedFor, &PhysicsChangedFor_Parms, NULL );
};

// Function Engine.PhysicsVolume.Reset
// [0x00020002] 
// Parameters infos:

void APhysicsVolume::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 18707 ];

	APhysicsVolume_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.PhysicsVolume.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APhysicsVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 18703 ];

	APhysicsVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.PhysicsVolume.GetRBPhysicsGravityScaling
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APhysicsVolume::GetRBPhysicsGravityScaling ( )
{
	static UFunction* pFnGetRBPhysicsGravityScaling = NULL;

	if ( ! pFnGetRBPhysicsGravityScaling )
		pFnGetRBPhysicsGravityScaling = (UFunction*) UObject::GObjObjects()->Data[ 18701 ];

	APhysicsVolume_execGetRBPhysicsGravityScaling_Parms GetRBPhysicsGravityScaling_Parms;

	pFnGetRBPhysicsGravityScaling->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRBPhysicsGravityScaling, &GetRBPhysicsGravityScaling_Parms, NULL );

	pFnGetRBPhysicsGravityScaling->FunctionFlags |= 0x400;

	return GetRBPhysicsGravityScaling_Parms.ReturnValue;
};

// Function Engine.PhysicsVolume.GetZoneVelocityForActor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TheActor                       ( CPF_Parm )

struct FVector APhysicsVolume::GetZoneVelocityForActor ( class AActor* TheActor )
{
	static UFunction* pFnGetZoneVelocityForActor = NULL;

	if ( ! pFnGetZoneVelocityForActor )
		pFnGetZoneVelocityForActor = (UFunction*) UObject::GObjObjects()->Data[ 18698 ];

	APhysicsVolume_execGetZoneVelocityForActor_Parms GetZoneVelocityForActor_Parms;
	GetZoneVelocityForActor_Parms.TheActor = TheActor;

	pFnGetZoneVelocityForActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetZoneVelocityForActor, &GetZoneVelocityForActor_Parms, NULL );

	pFnGetZoneVelocityForActor->FunctionFlags |= 0x400;

	return GetZoneVelocityForActor_Parms.ReturnValue;
};

// Function Engine.PhysicsVolume.GetGravityZ
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APhysicsVolume::GetGravityZ ( )
{
	static UFunction* pFnGetGravityZ = NULL;

	if ( ! pFnGetGravityZ )
		pFnGetGravityZ = (UFunction*) UObject::GObjObjects()->Data[ 18696 ];

	APhysicsVolume_execGetGravityZ_Parms GetGravityZ_Parms;

	pFnGetGravityZ->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGravityZ, &GetGravityZ_Parms, NULL );

	pFnGetGravityZ->FunctionFlags |= 0x400;

	return GetGravityZ_Parms.ReturnValue;
};

// Function Engine.DefaultPhysicsVolume.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ADefaultPhysicsVolume::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 18768 ];

	ADefaultPhysicsVolume_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.LadderVolume.PhysicsChangedFor
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ALadderVolume::eventPhysicsChangedFor ( class AActor* Other )
{
	static UFunction* pFnPhysicsChangedFor = NULL;

	if ( ! pFnPhysicsChangedFor )
		pFnPhysicsChangedFor = (UFunction*) UObject::GObjObjects()->Data[ 23306 ];

	ALadderVolume_eventPhysicsChangedFor_Parms PhysicsChangedFor_Parms;
	PhysicsChangedFor_Parms.Other = Other;

	this->ProcessEvent ( pFnPhysicsChangedFor, &PhysicsChangedFor_Parms, NULL );
};

// Function Engine.LadderVolume.PawnLeavingVolume
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ALadderVolume::eventPawnLeavingVolume ( class APawn* P )
{
	static UFunction* pFnPawnLeavingVolume = NULL;

	if ( ! pFnPawnLeavingVolume )
		pFnPawnLeavingVolume = (UFunction*) UObject::GObjObjects()->Data[ 23303 ];

	ALadderVolume_eventPawnLeavingVolume_Parms PawnLeavingVolume_Parms;
	PawnLeavingVolume_Parms.P = P;

	this->ProcessEvent ( pFnPawnLeavingVolume, &PawnLeavingVolume_Parms, NULL );
};

// Function Engine.LadderVolume.PawnEnteredVolume
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ALadderVolume::eventPawnEnteredVolume ( class APawn* P )
{
	static UFunction* pFnPawnEnteredVolume = NULL;

	if ( ! pFnPawnEnteredVolume )
		pFnPawnEnteredVolume = (UFunction*) UObject::GObjObjects()->Data[ 23298 ];

	ALadderVolume_eventPawnEnteredVolume_Parms PawnEnteredVolume_Parms;
	PawnEnteredVolume_Parms.P = P;

	this->ProcessEvent ( pFnPawnEnteredVolume, &PawnEnteredVolume_Parms, NULL );
};

// Function Engine.LadderVolume.InUse
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Ignored                        ( CPF_Parm )

bool ALadderVolume::InUse ( class APawn* Ignored )
{
	static UFunction* pFnInUse = NULL;

	if ( ! pFnInUse )
		pFnInUse = (UFunction*) UObject::GObjObjects()->Data[ 13665 ];

	ALadderVolume_execInUse_Parms InUse_Parms;
	InUse_Parms.Ignored = Ignored;

	this->ProcessEvent ( pFnInUse, &InUse_Parms, NULL );

	return InUse_Parms.ReturnValue;
};

// Function Engine.LadderVolume.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ALadderVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 23288 ];

	ALadderVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.PostProcessVolume.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void APostProcessVolume::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 28549 ];

	APostProcessVolume_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.ReverbVolume.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AReverbVolume::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 13596 ];

	AReverbVolume_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function Engine.TriggerVolume.StopsProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AProjectile*             P                              ( CPF_Parm )

bool ATriggerVolume::StopsProjectile ( class AProjectile* P )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = (UFunction*) UObject::GObjObjects()->Data[ 19134 ];

	ATriggerVolume_execStopsProjectile_Parms StopsProjectile_Parms;
	StopsProjectile_Parms.P = P;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );

	return StopsProjectile_Parms.ReturnValue;
};

// Function Engine.TriggerVolume.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATriggerVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 19133 ];

	ATriggerVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.CarriedObject.NotReachableBy
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ACarriedObject::eventNotReachableBy ( class APawn* P )
{
	static UFunction* pFnNotReachableBy = NULL;

	if ( ! pFnNotReachableBy )
		pFnNotReachableBy = (UFunction*) UObject::GObjObjects()->Data[ 16678 ];

	ACarriedObject_eventNotReachableBy_Parms NotReachableBy_Parms;
	NotReachableBy_Parms.P = P;

	this->ProcessEvent ( pFnNotReachableBy, &NotReachableBy_Parms, NULL );
};

// Function Engine.DroppedPickup.RecheckValidTouch
// [0x00020000] 
// Parameters infos:

void ADroppedPickup::RecheckValidTouch ( )
{
	static UFunction* pFnRecheckValidTouch = NULL;

	if ( ! pFnRecheckValidTouch )
		pFnRecheckValidTouch = (UFunction*) UObject::GObjObjects()->Data[ 19028 ];

	ADroppedPickup_execRecheckValidTouch_Parms RecheckValidTouch_Parms;

	this->ProcessEvent ( pFnRecheckValidTouch, &RecheckValidTouch_Parms, NULL );
};

// Function Engine.DroppedPickup.PickedUpBy
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ADroppedPickup::PickedUpBy ( class APawn* P )
{
	static UFunction* pFnPickedUpBy = NULL;

	if ( ! pFnPickedUpBy )
		pFnPickedUpBy = (UFunction*) UObject::GObjObjects()->Data[ 19026 ];

	ADroppedPickup_execPickedUpBy_Parms PickedUpBy_Parms;
	PickedUpBy_Parms.P = P;

	this->ProcessEvent ( pFnPickedUpBy, &PickedUpBy_Parms, NULL );
};

// Function Engine.DroppedPickup.GiveTo
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ADroppedPickup::GiveTo ( class APawn* P )
{
	static UFunction* pFnGiveTo = NULL;

	if ( ! pFnGiveTo )
		pFnGiveTo = (UFunction*) UObject::GObjObjects()->Data[ 19023 ];

	ADroppedPickup_execGiveTo_Parms GiveTo_Parms;
	GiveTo_Parms.P = P;

	this->ProcessEvent ( pFnGiveTo, &GiveTo_Parms, NULL );
};

// Function Engine.DroppedPickup.Landed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void ADroppedPickup::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 19020 ];

	ADroppedPickup_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function Engine.DroppedPickup.DetourWeight
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )
// float                          PathWeight                     ( CPF_Parm )

float ADroppedPickup::DetourWeight ( class APawn* Other, float PathWeight )
{
	static UFunction* pFnDetourWeight = NULL;

	if ( ! pFnDetourWeight )
		pFnDetourWeight = (UFunction*) UObject::GObjObjects()->Data[ 19014 ];

	ADroppedPickup_execDetourWeight_Parms DetourWeight_Parms;
	DetourWeight_Parms.Other = Other;
	DetourWeight_Parms.PathWeight = PathWeight;

	this->ProcessEvent ( pFnDetourWeight, &DetourWeight_Parms, NULL );

	return DetourWeight_Parms.ReturnValue;
};

// Function Engine.DroppedPickup.EncroachedBy
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ADroppedPickup::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = (UFunction*) UObject::GObjObjects()->Data[ 19012 ];

	ADroppedPickup_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function Engine.DroppedPickup.SetPickupParticles
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UParticleSystemComponent* PickupParticles                ( CPF_Parm | CPF_EditInline )

void ADroppedPickup::eventSetPickupParticles ( class UParticleSystemComponent* PickupParticles )
{
	static UFunction* pFnSetPickupParticles = NULL;

	if ( ! pFnSetPickupParticles )
		pFnSetPickupParticles = (UFunction*) UObject::GObjObjects()->Data[ 19008 ];

	ADroppedPickup_eventSetPickupParticles_Parms SetPickupParticles_Parms;
	SetPickupParticles_Parms.PickupParticles = PickupParticles;

	this->ProcessEvent ( pFnSetPickupParticles, &SetPickupParticles_Parms, NULL );
};

// Function Engine.DroppedPickup.SetPickupMesh
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     PickupMesh                     ( CPF_Parm | CPF_EditInline )

void ADroppedPickup::eventSetPickupMesh ( class UPrimitiveComponent* PickupMesh )
{
	static UFunction* pFnSetPickupMesh = NULL;

	if ( ! pFnSetPickupMesh )
		pFnSetPickupMesh = (UFunction*) UObject::GObjObjects()->Data[ 19005 ];

	ADroppedPickup_eventSetPickupMesh_Parms SetPickupMesh_Parms;
	SetPickupMesh_Parms.PickupMesh = PickupMesh;

	this->ProcessEvent ( pFnSetPickupMesh, &SetPickupMesh_Parms, NULL );
};

// Function Engine.DroppedPickup.Reset
// [0x00020002] 
// Parameters infos:

void ADroppedPickup::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 19004 ];

	ADroppedPickup_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.DroppedPickup.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ADroppedPickup::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 18999 ];

	ADroppedPickup_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.DroppedPickup.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ADroppedPickup::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 18997 ];

	ADroppedPickup_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.DroppedPickup.RemoveFromNavigation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ADroppedPickup::RemoveFromNavigation ( )
{
	static UFunction* pFnRemoveFromNavigation = NULL;

	if ( ! pFnRemoveFromNavigation )
		pFnRemoveFromNavigation = (UFunction*) UObject::GObjObjects()->Data[ 18996 ];

	ADroppedPickup_execRemoveFromNavigation_Parms RemoveFromNavigation_Parms;

	pFnRemoveFromNavigation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveFromNavigation, &RemoveFromNavigation_Parms, NULL );

	pFnRemoveFromNavigation->FunctionFlags |= 0x400;
};

// Function Engine.DroppedPickup.AddToNavigation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ADroppedPickup::AddToNavigation ( )
{
	static UFunction* pFnAddToNavigation = NULL;

	if ( ! pFnAddToNavigation )
		pFnAddToNavigation = (UFunction*) UObject::GObjObjects()->Data[ 18995 ];

	ADroppedPickup_execAddToNavigation_Parms AddToNavigation_Parms;

	pFnAddToNavigation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddToNavigation, &AddToNavigation_Parms, NULL );

	pFnAddToNavigation->FunctionFlags |= 0x400;
};

// Function Engine.DynamicSMActor.SetLightEnvironmentToNotBeDynamic
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void ADynamicSMActor::SetLightEnvironmentToNotBeDynamic ( )
{
	static UFunction* pFnSetLightEnvironmentToNotBeDynamic = NULL;

	if ( ! pFnSetLightEnvironmentToNotBeDynamic )
		pFnSetLightEnvironmentToNotBeDynamic = (UFunction*) UObject::GObjObjects()->Data[ 19126 ];

	ADynamicSMActor_execSetLightEnvironmentToNotBeDynamic_Parms SetLightEnvironmentToNotBeDynamic_Parms;

	this->ProcessEvent ( pFnSetLightEnvironmentToNotBeDynamic, &SetLightEnvironmentToNotBeDynamic_Parms, NULL );
};

// Function Engine.DynamicSMActor.Detach
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ADynamicSMActor::eventDetach ( class AActor* Other )
{
	static UFunction* pFnDetach = NULL;

	if ( ! pFnDetach )
		pFnDetach = (UFunction*) UObject::GObjObjects()->Data[ 19120 ];

	ADynamicSMActor_eventDetach_Parms Detach_Parms;
	Detach_Parms.Other = Other;

	this->ProcessEvent ( pFnDetach, &Detach_Parms, NULL );
};

// Function Engine.DynamicSMActor.Attach
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ADynamicSMActor::eventAttach ( class AActor* Other )
{
	static UFunction* pFnAttach = NULL;

	if ( ! pFnAttach )
		pFnAttach = (UFunction*) UObject::GObjObjects()->Data[ 19117 ];

	ADynamicSMActor_eventAttach_Parms Attach_Parms;
	Attach_Parms.Other = Other;

	this->ProcessEvent ( pFnAttach, &Attach_Parms, NULL );
};

// Function Engine.DynamicSMActor.CanBasePawn
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool ADynamicSMActor::CanBasePawn ( class APawn* P )
{
	static UFunction* pFnCanBasePawn = NULL;

	if ( ! pFnCanBasePawn )
		pFnCanBasePawn = (UFunction*) UObject::GObjObjects()->Data[ 19112 ];

	ADynamicSMActor_execCanBasePawn_Parms CanBasePawn_Parms;
	CanBasePawn_Parms.P = P;

	this->ProcessEvent ( pFnCanBasePawn, &CanBasePawn_Parms, NULL );

	return CanBasePawn_Parms.ReturnValue;
};

// Function Engine.DynamicSMActor.SetStaticMesh
// [0x00024002] 
// Parameters infos:
// class UStaticMesh*             NewMesh                        ( CPF_Parm )
// struct FVector                 NewTranslation                 ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                NewRotation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 NewScale3D                     ( CPF_OptionalParm | CPF_Parm )

void ADynamicSMActor::SetStaticMesh ( class UStaticMesh* NewMesh, struct FVector NewTranslation, struct FRotator NewRotation, struct FVector NewScale3D )
{
	static UFunction* pFnSetStaticMesh = NULL;

	if ( ! pFnSetStaticMesh )
		pFnSetStaticMesh = (UFunction*) UObject::GObjObjects()->Data[ 19107 ];

	ADynamicSMActor_execSetStaticMesh_Parms SetStaticMesh_Parms;
	SetStaticMesh_Parms.NewMesh = NewMesh;
	memcpy ( &SetStaticMesh_Parms.NewTranslation, &NewTranslation, 0xC );
	memcpy ( &SetStaticMesh_Parms.NewRotation, &NewRotation, 0xC );
	memcpy ( &SetStaticMesh_Parms.NewScale3D, &NewScale3D, 0xC );

	this->ProcessEvent ( pFnSetStaticMesh, &SetStaticMesh_Parms, NULL );
};

// Function Engine.DynamicSMActor.OnSetMaterial
// [0x00020002] 
// Parameters infos:
// class USeqAct_SetMaterial*     Action                         ( CPF_Parm )

void ADynamicSMActor::OnSetMaterial ( class USeqAct_SetMaterial* Action )
{
	static UFunction* pFnOnSetMaterial = NULL;

	if ( ! pFnOnSetMaterial )
		pFnOnSetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 19103 ];

	ADynamicSMActor_execOnSetMaterial_Parms OnSetMaterial_Parms;
	OnSetMaterial_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetMaterial, &OnSetMaterial_Parms, NULL );
};

// Function Engine.DynamicSMActor.OnSetMesh
// [0x00020002] 
// Parameters infos:
// class USeqAct_SetMesh*         Action                         ( CPF_Parm )

void ADynamicSMActor::OnSetMesh ( class USeqAct_SetMesh* Action )
{
	static UFunction* pFnOnSetMesh = NULL;

	if ( ! pFnOnSetMesh )
		pFnOnSetMesh = (UFunction*) UObject::GObjObjects()->Data[ 19096 ];

	ADynamicSMActor_execOnSetMesh_Parms OnSetMesh_Parms;
	OnSetMesh_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetMesh, &OnSetMesh_Parms, NULL );
};

// Function Engine.DynamicSMActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ADynamicSMActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 19089 ];

	ADynamicSMActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.DynamicSMActor.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ADynamicSMActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 19085 ];

	ADynamicSMActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.InterpActor.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AInterpActor_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void AInterpActor::ApplyCheckpointRecord ( struct AInterpActor_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 22657 ];

	AInterpActor_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x20 );
};

// Function Engine.InterpActor.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AInterpActor_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void AInterpActor::CreateCheckpointRecord ( struct AInterpActor_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 22655 ];

	AInterpActor_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x20 );
};

// Function Engine.InterpActor.ShouldSaveForCheckpoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AInterpActor::ShouldSaveForCheckpoint ( )
{
	static UFunction* pFnShouldSaveForCheckpoint = NULL;

	if ( ! pFnShouldSaveForCheckpoint )
		pFnShouldSaveForCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 22653 ];

	AInterpActor_execShouldSaveForCheckpoint_Parms ShouldSaveForCheckpoint_Parms;

	this->ProcessEvent ( pFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Parms, NULL );

	return ShouldSaveForCheckpoint_Parms.ReturnValue;
};

// Function Engine.InterpActor.ShutDown
// [0x00020102] 
// Parameters infos:

void AInterpActor::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 22652 ];

	AInterpActor_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function Engine.InterpActor.InterpolationChanged
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void AInterpActor::eventInterpolationChanged ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationChanged = NULL;

	if ( ! pFnInterpolationChanged )
		pFnInterpolationChanged = (UFunction*) UObject::GObjObjects()->Data[ 22650 ];

	AInterpActor_eventInterpolationChanged_Parms InterpolationChanged_Parms;
	InterpolationChanged_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationChanged, &InterpolationChanged_Parms, NULL );
};

// Function Engine.InterpActor.InterpolationFinished
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void AInterpActor::eventInterpolationFinished ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationFinished = NULL;

	if ( ! pFnInterpolationFinished )
		pFnInterpolationFinished = (UFunction*) UObject::GObjObjects()->Data[ 22640 ];

	AInterpActor_eventInterpolationFinished_Parms InterpolationFinished_Parms;
	InterpolationFinished_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationFinished, &InterpolationFinished_Parms, NULL );
};

// Function Engine.InterpActor.InterpolationStarted
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )
// class UInterpGroupInst*        GroupInst                      ( CPF_Parm )

void AInterpActor::eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst )
{
	static UFunction* pFnInterpolationStarted = NULL;

	if ( ! pFnInterpolationStarted )
		pFnInterpolationStarted = (UFunction*) UObject::GObjObjects()->Data[ 22636 ];

	AInterpActor_eventInterpolationStarted_Parms InterpolationStarted_Parms;
	InterpolationStarted_Parms.InterpAction = InterpAction;
	InterpolationStarted_Parms.GroupInst = GroupInst;

	this->ProcessEvent ( pFnInterpolationStarted, &InterpolationStarted_Parms, NULL );
};

// Function Engine.InterpActor.PlayMovingSound
// [0x00020102] 
// Parameters infos:
// unsigned long                  bClosing                       ( CPF_Parm )

void AInterpActor::PlayMovingSound ( unsigned long bClosing )
{
	static UFunction* pFnPlayMovingSound = NULL;

	if ( ! pFnPlayMovingSound )
		pFnPlayMovingSound = (UFunction*) UObject::GObjObjects()->Data[ 22630 ];

	AInterpActor_execPlayMovingSound_Parms PlayMovingSound_Parms;
	PlayMovingSound_Parms.bClosing = bClosing;

	this->ProcessEvent ( pFnPlayMovingSound, &PlayMovingSound_Parms, NULL );
};

// Function Engine.InterpActor.FinishedOpen
// [0x00020002] 
// Parameters infos:

void AInterpActor::FinishedOpen ( )
{
	static UFunction* pFnFinishedOpen = NULL;

	if ( ! pFnFinishedOpen )
		pFnFinishedOpen = (UFunction*) UObject::GObjObjects()->Data[ 22627 ];

	AInterpActor_execFinishedOpen_Parms FinishedOpen_Parms;

	this->ProcessEvent ( pFnFinishedOpen, &FinishedOpen_Parms, NULL );
};

// Function Engine.InterpActor.Restart
// [0x00020002] 
// Parameters infos:

void AInterpActor::Restart ( )
{
	static UFunction* pFnRestart = NULL;

	if ( ! pFnRestart )
		pFnRestart = (UFunction*) UObject::GObjObjects()->Data[ 22625 ];

	AInterpActor_execRestart_Parms Restart_Parms;

	this->ProcessEvent ( pFnRestart, &Restart_Parms, NULL );
};

// Function Engine.InterpActor.Detach
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AInterpActor::eventDetach ( class AActor* Other )
{
	static UFunction* pFnDetach = NULL;

	if ( ! pFnDetach )
		pFnDetach = (UFunction*) UObject::GObjObjects()->Data[ 22621 ];

	AInterpActor_eventDetach_Parms Detach_Parms;
	Detach_Parms.Other = Other;

	this->ProcessEvent ( pFnDetach, &Detach_Parms, NULL );
};

// Function Engine.InterpActor.Attach
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AInterpActor::eventAttach ( class AActor* Other )
{
	static UFunction* pFnAttach = NULL;

	if ( ! pFnAttach )
		pFnAttach = (UFunction*) UObject::GObjObjects()->Data[ 22617 ];

	AInterpActor_eventAttach_Parms Attach_Parms;
	Attach_Parms.Other = Other;

	this->ProcessEvent ( pFnAttach, &Attach_Parms, NULL );
};

// Function Engine.InterpActor.RanInto
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AInterpActor::eventRanInto ( class AActor* Other )
{
	static UFunction* pFnRanInto = NULL;

	if ( ! pFnRanInto )
		pFnRanInto = (UFunction*) UObject::GObjObjects()->Data[ 22612 ];

	AInterpActor_eventRanInto_Parms RanInto_Parms;
	RanInto_Parms.Other = Other;

	this->ProcessEvent ( pFnRanInto, &RanInto_Parms, NULL );
};

// Function Engine.InterpActor.EncroachingOn
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AInterpActor::eventEncroachingOn ( class AActor* Other )
{
	static UFunction* pFnEncroachingOn = NULL;

	if ( ! pFnEncroachingOn )
		pFnEncroachingOn = (UFunction*) UObject::GObjObjects()->Data[ 22597 ];

	AInterpActor_eventEncroachingOn_Parms EncroachingOn_Parms;
	EncroachingOn_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachingOn, &EncroachingOn_Parms, NULL );

	return EncroachingOn_Parms.ReturnValue;
};

// Function Engine.InterpActor.SetShadowParentOnAllAttachedComponents
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AInterpActor::SetShadowParentOnAllAttachedComponents ( )
{
	static UFunction* pFnSetShadowParentOnAllAttachedComponents = NULL;

	if ( ! pFnSetShadowParentOnAllAttachedComponents )
		pFnSetShadowParentOnAllAttachedComponents = (UFunction*) UObject::GObjObjects()->Data[ 22596 ];

	AInterpActor_execSetShadowParentOnAllAttachedComponents_Parms SetShadowParentOnAllAttachedComponents_Parms;

	pFnSetShadowParentOnAllAttachedComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetShadowParentOnAllAttachedComponents, &SetShadowParentOnAllAttachedComponents_Parms, NULL );

	pFnSetShadowParentOnAllAttachedComponents->FunctionFlags |= 0x400;
};

// Function Engine.InterpActor.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AInterpActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 22590 ];

	AInterpActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Emitter.HideSelf
// [0x00020100] 
// Parameters infos:

void AEmitter::HideSelf ( )
{
	static UFunction* pFnHideSelf = NULL;

	if ( ! pFnHideSelf )
		pFnHideSelf = (UFunction*) UObject::GObjObjects()->Data[ 19477 ];

	AEmitter_execHideSelf_Parms HideSelf_Parms;

	this->ProcessEvent ( pFnHideSelf, &HideSelf_Parms, NULL );
};

// Function Engine.Emitter.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AEmitter_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void AEmitter::ApplyCheckpointRecord ( struct AEmitter_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 19475 ];

	AEmitter_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.Emitter.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AEmitter_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void AEmitter::CreateCheckpointRecord ( struct AEmitter_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 19473 ];

	AEmitter_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.Emitter.ShouldSaveForCheckpoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AEmitter::ShouldSaveForCheckpoint ( )
{
	static UFunction* pFnShouldSaveForCheckpoint = NULL;

	if ( ! pFnShouldSaveForCheckpoint )
		pFnShouldSaveForCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 19471 ];

	AEmitter_execShouldSaveForCheckpoint_Parms ShouldSaveForCheckpoint_Parms;

	this->ProcessEvent ( pFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Parms, NULL );

	return ShouldSaveForCheckpoint_Parms.ReturnValue;
};

// Function Engine.Emitter.OnSetParticleSysParam
// [0x00020102] 
// Parameters infos:
// class USeqAct_SetParticleSysParam* Action                         ( CPF_Parm )

void AEmitter::OnSetParticleSysParam ( class USeqAct_SetParticleSysParam* Action )
{
	static UFunction* pFnOnSetParticleSysParam = NULL;

	if ( ! pFnOnSetParticleSysParam )
		pFnOnSetParticleSysParam = (UFunction*) UObject::GObjObjects()->Data[ 19463 ];

	AEmitter_execOnSetParticleSysParam_Parms OnSetParticleSysParam_Parms;
	OnSetParticleSysParam_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetParticleSysParam, &OnSetParticleSysParam_Parms, NULL );
};

// Function Engine.Emitter.SetActorParameter
// [0x00020102] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class AActor*                  Param                          ( CPF_Parm )

void AEmitter::SetActorParameter ( struct FName ParameterName, class AActor* Param )
{
	static UFunction* pFnSetActorParameter = NULL;

	if ( ! pFnSetActorParameter )
		pFnSetActorParameter = (UFunction*) UObject::GObjObjects()->Data[ 19460 ];

	AEmitter_execSetActorParameter_Parms SetActorParameter_Parms;
	memcpy ( &SetActorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetActorParameter_Parms.Param = Param;

	this->ProcessEvent ( pFnSetActorParameter, &SetActorParameter_Parms, NULL );
};

// Function Engine.Emitter.SetExtColorParameter
// [0x00020102] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// unsigned char                  Red                            ( CPF_Parm )
// unsigned char                  Green                          ( CPF_Parm )
// unsigned char                  Blue                           ( CPF_Parm )
// unsigned char                  Alpha                          ( CPF_Parm )

void AEmitter::SetExtColorParameter ( struct FName ParameterName, unsigned char Red, unsigned char Green, unsigned char Blue, unsigned char Alpha )
{
	static UFunction* pFnSetExtColorParameter = NULL;

	if ( ! pFnSetExtColorParameter )
		pFnSetExtColorParameter = (UFunction*) UObject::GObjObjects()->Data[ 19453 ];

	AEmitter_execSetExtColorParameter_Parms SetExtColorParameter_Parms;
	memcpy ( &SetExtColorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetExtColorParameter_Parms.Red = Red;
	SetExtColorParameter_Parms.Green = Green;
	SetExtColorParameter_Parms.Blue = Blue;
	SetExtColorParameter_Parms.Alpha = Alpha;

	this->ProcessEvent ( pFnSetExtColorParameter, &SetExtColorParameter_Parms, NULL );
};

// Function Engine.Emitter.SetColorParameter
// [0x00020102] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FColor                  Param                          ( CPF_Parm )

void AEmitter::SetColorParameter ( struct FName ParameterName, struct FColor Param )
{
	static UFunction* pFnSetColorParameter = NULL;

	if ( ! pFnSetColorParameter )
		pFnSetColorParameter = (UFunction*) UObject::GObjObjects()->Data[ 19450 ];

	AEmitter_execSetColorParameter_Parms SetColorParameter_Parms;
	memcpy ( &SetColorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetColorParameter_Parms.Param, &Param, 0x4 );

	this->ProcessEvent ( pFnSetColorParameter, &SetColorParameter_Parms, NULL );
};

// Function Engine.Emitter.SetVectorParameter
// [0x00020102] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FVector                 Param                          ( CPF_Parm )

void AEmitter::SetVectorParameter ( struct FName ParameterName, struct FVector Param )
{
	static UFunction* pFnSetVectorParameter = NULL;

	if ( ! pFnSetVectorParameter )
		pFnSetVectorParameter = (UFunction*) UObject::GObjObjects()->Data[ 19447 ];

	AEmitter_execSetVectorParameter_Parms SetVectorParameter_Parms;
	memcpy ( &SetVectorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetVectorParameter_Parms.Param, &Param, 0xC );

	this->ProcessEvent ( pFnSetVectorParameter, &SetVectorParameter_Parms, NULL );
};

// Function Engine.Emitter.SetFloatParameter
// [0x00020102] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Param                          ( CPF_Parm )

void AEmitter::SetFloatParameter ( struct FName ParameterName, float Param )
{
	static UFunction* pFnSetFloatParameter = NULL;

	if ( ! pFnSetFloatParameter )
		pFnSetFloatParameter = (UFunction*) UObject::GObjObjects()->Data[ 19444 ];

	AEmitter_execSetFloatParameter_Parms SetFloatParameter_Parms;
	memcpy ( &SetFloatParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetFloatParameter_Parms.Param = Param;

	this->ProcessEvent ( pFnSetFloatParameter, &SetFloatParameter_Parms, NULL );
};

// Function Engine.Emitter.ShutDown
// [0x00020102] 
// Parameters infos:

void AEmitter::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 19443 ];

	AEmitter_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function Engine.Emitter.OnParticleEventGenerator
// [0x00020000] 
// Parameters infos:
// class USeqAct_ParticleEventGenerator* Action                         ( CPF_Parm )

void AEmitter::OnParticleEventGenerator ( class USeqAct_ParticleEventGenerator* Action )
{
	static UFunction* pFnOnParticleEventGenerator = NULL;

	if ( ! pFnOnParticleEventGenerator )
		pFnOnParticleEventGenerator = (UFunction*) UObject::GObjObjects()->Data[ 19441 ];

	AEmitter_execOnParticleEventGenerator_Parms OnParticleEventGenerator_Parms;
	OnParticleEventGenerator_Parms.Action = Action;

	this->ProcessEvent ( pFnOnParticleEventGenerator, &OnParticleEventGenerator_Parms, NULL );
};

// Function Engine.Emitter.OnToggle
// [0x00020002] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AEmitter::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 19439 ];

	AEmitter_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.Emitter.OnParticleSystemFinished
// [0x00020102] 
// Parameters infos:
// class UParticleSystemComponent* FinishedComponent              ( CPF_Parm | CPF_EditInline )

void AEmitter::OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent )
{
	static UFunction* pFnOnParticleSystemFinished = NULL;

	if ( ! pFnOnParticleSystemFinished )
		pFnOnParticleSystemFinished = (UFunction*) UObject::GObjObjects()->Data[ 19436 ];

	AEmitter_execOnParticleSystemFinished_Parms OnParticleSystemFinished_Parms;
	OnParticleSystemFinished_Parms.FinishedComponent = FinishedComponent;

	this->ProcessEvent ( pFnOnParticleSystemFinished, &OnParticleSystemFinished_Parms, NULL );
};

// Function Engine.Emitter.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AEmitter::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 19434 ];

	AEmitter_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.Emitter.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AEmitter::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 19431 ];

	AEmitter_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Emitter.ResetPSC
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AEmitter::ResetPSC ( )
{
	static UFunction* pFnResetPSC = NULL;

	if ( ! pFnResetPSC )
		pFnResetPSC = (UFunction*) UObject::GObjObjects()->Data[ 19430 ];

	AEmitter_execResetPSC_Parms ResetPSC_Parms;

	pFnResetPSC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetPSC, &ResetPSC_Parms, NULL );

	pFnResetPSC->FunctionFlags |= 0x400;
};

// Function Engine.Emitter.SetTemplate
// [0x00024C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// class UParticleSystem*         NewTemplate                    ( CPF_Parm )
// unsigned long                  bDestroyOnFinish               ( CPF_OptionalParm | CPF_Parm )

void AEmitter::eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = (UFunction*) UObject::GObjObjects()->Data[ 19427 ];

	AEmitter_eventSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.NewTemplate = NewTemplate;
	SetTemplate_Parms.bDestroyOnFinish = bDestroyOnFinish;

	pFnSetTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );

	pFnSetTemplate->FunctionFlags |= 0x400;
};

// Function Engine.EmitterPool.SpawnEmitterCustomLifetime
// [0x00020002] 
// Parameters infos:
// class UParticleSystemComponent* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class UParticleSystem*         EmitterTemplate                ( CPF_Parm )

class UParticleSystemComponent* AEmitterPool::SpawnEmitterCustomLifetime ( class UParticleSystem* EmitterTemplate )
{
	static UFunction* pFnSpawnEmitterCustomLifetime = NULL;

	if ( ! pFnSpawnEmitterCustomLifetime )
		pFnSpawnEmitterCustomLifetime = (UFunction*) UObject::GObjObjects()->Data[ 19550 ];

	AEmitterPool_execSpawnEmitterCustomLifetime_Parms SpawnEmitterCustomLifetime_Parms;
	SpawnEmitterCustomLifetime_Parms.EmitterTemplate = EmitterTemplate;

	this->ProcessEvent ( pFnSpawnEmitterCustomLifetime, &SpawnEmitterCustomLifetime_Parms, NULL );

	return SpawnEmitterCustomLifetime_Parms.ReturnValue;
};

// Function Engine.EmitterPool.SpawnEmitterMeshAttachment
// [0x00024002] 
// Parameters infos:
// class UParticleSystemComponent* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class UParticleSystem*         EmitterTemplate                ( CPF_Parm )
// class USkeletalMeshComponent*  Mesh                           ( CPF_Parm | CPF_EditInline )
// struct FName                   AttachPointName                ( CPF_Parm )
// unsigned long                  bAttachToSocket                ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 RelativeLoc                    ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                RelativeRot                    ( CPF_OptionalParm | CPF_Parm )

class UParticleSystemComponent* AEmitterPool::SpawnEmitterMeshAttachment ( class UParticleSystem* EmitterTemplate, class USkeletalMeshComponent* Mesh, struct FName AttachPointName, unsigned long bAttachToSocket, struct FVector RelativeLoc, struct FRotator RelativeRot )
{
	static UFunction* pFnSpawnEmitterMeshAttachment = NULL;

	if ( ! pFnSpawnEmitterMeshAttachment )
		pFnSpawnEmitterMeshAttachment = (UFunction*) UObject::GObjObjects()->Data[ 19541 ];

	AEmitterPool_execSpawnEmitterMeshAttachment_Parms SpawnEmitterMeshAttachment_Parms;
	SpawnEmitterMeshAttachment_Parms.EmitterTemplate = EmitterTemplate;
	SpawnEmitterMeshAttachment_Parms.Mesh = Mesh;
	memcpy ( &SpawnEmitterMeshAttachment_Parms.AttachPointName, &AttachPointName, 0x8 );
	SpawnEmitterMeshAttachment_Parms.bAttachToSocket = bAttachToSocket;
	memcpy ( &SpawnEmitterMeshAttachment_Parms.RelativeLoc, &RelativeLoc, 0xC );
	memcpy ( &SpawnEmitterMeshAttachment_Parms.RelativeRot, &RelativeRot, 0xC );

	this->ProcessEvent ( pFnSpawnEmitterMeshAttachment, &SpawnEmitterMeshAttachment_Parms, NULL );

	return SpawnEmitterMeshAttachment_Parms.ReturnValue;
};

// Function Engine.EmitterPool.SpawnEmitter
// [0x00024002] 
// Parameters infos:
// class UParticleSystemComponent* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class UParticleSystem*         EmitterTemplate                ( CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// struct FRotator                SpawnRotation                  ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  AttachToActor                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bInheritScaleFromBase          ( CPF_OptionalParm | CPF_Parm )

class UParticleSystemComponent* AEmitterPool::SpawnEmitter ( class UParticleSystem* EmitterTemplate, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* AttachToActor, unsigned long bInheritScaleFromBase )
{
	static UFunction* pFnSpawnEmitter = NULL;

	if ( ! pFnSpawnEmitter )
		pFnSpawnEmitter = (UFunction*) UObject::GObjObjects()->Data[ 9725 ];

	AEmitterPool_execSpawnEmitter_Parms SpawnEmitter_Parms;
	SpawnEmitter_Parms.EmitterTemplate = EmitterTemplate;
	memcpy ( &SpawnEmitter_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &SpawnEmitter_Parms.SpawnRotation, &SpawnRotation, 0xC );
	SpawnEmitter_Parms.AttachToActor = AttachToActor;
	SpawnEmitter_Parms.bInheritScaleFromBase = bInheritScaleFromBase;

	this->ProcessEvent ( pFnSpawnEmitter, &SpawnEmitter_Parms, NULL );

	return SpawnEmitter_Parms.ReturnValue;
};

// Function Engine.EmitterPool.GetPooledComponent
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class UParticleSystem*         EmitterTemplate                ( CPF_Parm )

class UParticleSystemComponent* AEmitterPool::GetPooledComponent ( class UParticleSystem* EmitterTemplate )
{
	static UFunction* pFnGetPooledComponent = NULL;

	if ( ! pFnGetPooledComponent )
		pFnGetPooledComponent = (UFunction*) UObject::GObjObjects()->Data[ 19531 ];

	AEmitterPool_execGetPooledComponent_Parms GetPooledComponent_Parms;
	GetPooledComponent_Parms.EmitterTemplate = EmitterTemplate;

	pFnGetPooledComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPooledComponent, &GetPooledComponent_Parms, NULL );

	pFnGetPooledComponent->FunctionFlags |= 0x400;

	return GetPooledComponent_Parms.ReturnValue;
};

// Function Engine.EmitterPool.GetFreeMatInstConsts
// [0x00084401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInstanceConstant* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bCreateNewObject               ( CPF_OptionalParm | CPF_Parm )

class UMaterialInstanceConstant* AEmitterPool::GetFreeMatInstConsts ( unsigned long bCreateNewObject )
{
	static UFunction* pFnGetFreeMatInstConsts = NULL;

	if ( ! pFnGetFreeMatInstConsts )
		pFnGetFreeMatInstConsts = (UFunction*) UObject::GObjObjects()->Data[ 19528 ];

	AEmitterPool_execGetFreeMatInstConsts_Parms GetFreeMatInstConsts_Parms;
	GetFreeMatInstConsts_Parms.bCreateNewObject = bCreateNewObject;

	pFnGetFreeMatInstConsts->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFreeMatInstConsts, &GetFreeMatInstConsts_Parms, NULL );

	pFnGetFreeMatInstConsts->FunctionFlags |= 0x400;

	return GetFreeMatInstConsts_Parms.ReturnValue;
};

// Function Engine.EmitterPool.FreeMaterialInstanceConstants
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UStaticMeshComponent*    SMC                            ( CPF_Parm | CPF_EditInline )

void AEmitterPool::FreeMaterialInstanceConstants ( class UStaticMeshComponent* SMC )
{
	static UFunction* pFnFreeMaterialInstanceConstants = NULL;

	if ( ! pFnFreeMaterialInstanceConstants )
		pFnFreeMaterialInstanceConstants = (UFunction*) UObject::GObjObjects()->Data[ 19526 ];

	AEmitterPool_execFreeMaterialInstanceConstants_Parms FreeMaterialInstanceConstants_Parms;
	FreeMaterialInstanceConstants_Parms.SMC = SMC;

	pFnFreeMaterialInstanceConstants->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFreeMaterialInstanceConstants, &FreeMaterialInstanceConstants_Parms, NULL );

	pFnFreeMaterialInstanceConstants->FunctionFlags |= 0x400;
};

// Function Engine.EmitterPool.GetFreeStaticMeshComponent
// [0x00084401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UStaticMeshComponent*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// unsigned long                  bCreateNewObject               ( CPF_OptionalParm | CPF_Parm )

class UStaticMeshComponent* AEmitterPool::GetFreeStaticMeshComponent ( unsigned long bCreateNewObject )
{
	static UFunction* pFnGetFreeStaticMeshComponent = NULL;

	if ( ! pFnGetFreeStaticMeshComponent )
		pFnGetFreeStaticMeshComponent = (UFunction*) UObject::GObjObjects()->Data[ 19523 ];

	AEmitterPool_execGetFreeStaticMeshComponent_Parms GetFreeStaticMeshComponent_Parms;
	GetFreeStaticMeshComponent_Parms.bCreateNewObject = bCreateNewObject;

	pFnGetFreeStaticMeshComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFreeStaticMeshComponent, &GetFreeStaticMeshComponent_Parms, NULL );

	pFnGetFreeStaticMeshComponent->FunctionFlags |= 0x400;

	return GetFreeStaticMeshComponent_Parms.ReturnValue;
};

// Function Engine.EmitterPool.FreeStaticMeshComponents
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )

void AEmitterPool::FreeStaticMeshComponents ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnFreeStaticMeshComponents = NULL;

	if ( ! pFnFreeStaticMeshComponents )
		pFnFreeStaticMeshComponents = (UFunction*) UObject::GObjObjects()->Data[ 19521 ];

	AEmitterPool_execFreeStaticMeshComponents_Parms FreeStaticMeshComponents_Parms;
	FreeStaticMeshComponents_Parms.PSC = PSC;

	pFnFreeStaticMeshComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFreeStaticMeshComponents, &FreeStaticMeshComponents_Parms, NULL );

	pFnFreeStaticMeshComponents->FunctionFlags |= 0x400;
};

// Function Engine.EmitterPool.ReturnToPool
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )

void AEmitterPool::ReturnToPool ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnReturnToPool = NULL;

	if ( ! pFnReturnToPool )
		pFnReturnToPool = (UFunction*) UObject::GObjObjects()->Data[ 19518 ];

	AEmitterPool_execReturnToPool_Parms ReturnToPool_Parms;
	ReturnToPool_Parms.PSC = PSC;

	pFnReturnToPool->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReturnToPool, &ReturnToPool_Parms, NULL );

	pFnReturnToPool->FunctionFlags |= 0x400;
};

// Function Engine.EmitterPool.ClearPoolComponents
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AEmitterPool::ClearPoolComponents ( )
{
	static UFunction* pFnClearPoolComponents = NULL;

	if ( ! pFnClearPoolComponents )
		pFnClearPoolComponents = (UFunction*) UObject::GObjObjects()->Data[ 19519 ];

	AEmitterPool_execClearPoolComponents_Parms ClearPoolComponents_Parms;

	pFnClearPoolComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearPoolComponents, &ClearPoolComponents_Parms, NULL );

	pFnClearPoolComponents->FunctionFlags |= 0x400;
};

// Function Engine.EmitterPool.OnParticleSystemFinished
// [0x00020002] 
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )

void AEmitterPool::OnParticleSystemFinished ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnOnParticleSystemFinished = NULL;

	if ( ! pFnOnParticleSystemFinished )
		pFnOnParticleSystemFinished = (UFunction*) UObject::GObjObjects()->Data[ 19515 ];

	AEmitterPool_execOnParticleSystemFinished_Parms OnParticleSystemFinished_Parms;
	OnParticleSystemFinished_Parms.PSC = PSC;

	this->ProcessEvent ( pFnOnParticleSystemFinished, &OnParticleSystemFinished_Parms, NULL );
};

// Function Engine.HUD.OnLostFocusPause
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  Enable                         ( CPF_Parm )

void AHUD::eventOnLostFocusPause ( unsigned long Enable )
{
	static UFunction* pFnOnLostFocusPause = NULL;

	if ( ! pFnOnLostFocusPause )
		pFnOnLostFocusPause = (UFunction*) UObject::GObjObjects()->Data[ 18450 ];

	AHUD_eventOnLostFocusPause_Parms OnLostFocusPause_Parms;
	OnLostFocusPause_Parms.Enable = Enable;

	this->ProcessEvent ( pFnOnLostFocusPause, &OnLostFocusPause_Parms, NULL );
};

// Function Engine.HUD.PlayerOwnerDied
// [0x00020000] 
// Parameters infos:

void AHUD::PlayerOwnerDied ( )
{
	static UFunction* pFnPlayerOwnerDied = NULL;

	if ( ! pFnPlayerOwnerDied )
		pFnPlayerOwnerDied = (UFunction*) UObject::GObjObjects()->Data[ 18449 ];

	AHUD_execPlayerOwnerDied_Parms PlayerOwnerDied_Parms;

	this->ProcessEvent ( pFnPlayerOwnerDied, &PlayerOwnerDied_Parms, NULL );
};

// Function Engine.HUD.GetRYGColorRamp
// [0x00022002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Pct                            ( CPF_Parm )

struct FColor AHUD::GetRYGColorRamp ( float Pct )
{
	static UFunction* pFnGetRYGColorRamp = NULL;

	if ( ! pFnGetRYGColorRamp )
		pFnGetRYGColorRamp = (UFunction*) UObject::GObjObjects()->Data[ 18445 ];

	AHUD_execGetRYGColorRamp_Parms GetRYGColorRamp_Parms;
	GetRYGColorRamp_Parms.Pct = Pct;

	this->ProcessEvent ( pFnGetRYGColorRamp, &GetRYGColorRamp_Parms, NULL );

	return GetRYGColorRamp_Parms.ReturnValue;
};

// Function Engine.HUD.GetFontSizeIndex
// [0x00022002] 
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FontSize                       ( CPF_Parm )

class UFont* AHUD::GetFontSizeIndex ( int FontSize )
{
	static UFunction* pFnGetFontSizeIndex = NULL;

	if ( ! pFnGetFontSizeIndex )
		pFnGetFontSizeIndex = (UFunction*) UObject::GObjObjects()->Data[ 18438 ];

	AHUD_execGetFontSizeIndex_Parms GetFontSizeIndex_Parms;
	GetFontSizeIndex_Parms.FontSize = FontSize;

	this->ProcessEvent ( pFnGetFontSizeIndex, &GetFontSizeIndex_Parms, NULL );

	return GetFontSizeIndex_Parms.ReturnValue;
};

// Function Engine.HUD.DisplayKismetMessages
// [0x00020002] 
// Parameters infos:

void AHUD::DisplayKismetMessages ( )
{
	static UFunction* pFnDisplayKismetMessages = NULL;

	if ( ! pFnDisplayKismetMessages )
		pFnDisplayKismetMessages = (UFunction*) UObject::GObjObjects()->Data[ 18434 ];

	AHUD_execDisplayKismetMessages_Parms DisplayKismetMessages_Parms;

	this->ProcessEvent ( pFnDisplayKismetMessages, &DisplayKismetMessages_Parms, NULL );
};

// Function Engine.HUD.DisplayLocalMessages
// [0x00020002] 
// Parameters infos:

void AHUD::DisplayLocalMessages ( )
{
	static UFunction* pFnDisplayLocalMessages = NULL;

	if ( ! pFnDisplayLocalMessages )
		pFnDisplayLocalMessages = (UFunction*) UObject::GObjObjects()->Data[ 18422 ];

	AHUD_execDisplayLocalMessages_Parms DisplayLocalMessages_Parms;

	this->ProcessEvent ( pFnDisplayLocalMessages, &DisplayLocalMessages_Parms, NULL );
};

// Function Engine.HUD.DrawMessageText
// [0x00820002] 
// Parameters infos:
// struct FHudLocalizedMessage    LocalMessage                   ( CPF_Parm | CPF_NeedCtorLink )
// float                          ScreenX                        ( CPF_Parm )
// float                          ScreenY                        ( CPF_Parm )

void AHUD::DrawMessageText ( struct FHudLocalizedMessage LocalMessage, float ScreenX, float ScreenY )
{
	static UFunction* pFnDrawMessageText = NULL;

	if ( ! pFnDrawMessageText )
		pFnDrawMessageText = (UFunction*) UObject::GObjObjects()->Data[ 18417 ];

	AHUD_execDrawMessageText_Parms DrawMessageText_Parms;
	memcpy ( &DrawMessageText_Parms.LocalMessage, &LocalMessage, 0x50 );
	DrawMessageText_Parms.ScreenX = ScreenX;
	DrawMessageText_Parms.ScreenY = ScreenY;

	this->ProcessEvent ( pFnDrawMessageText, &DrawMessageText_Parms, NULL );
};

// Function Engine.HUD.DrawMessage
// [0x00420002] 
// Parameters infos:
// int                            I                              ( CPF_Parm )
// float                          PosY                           ( CPF_Parm )
// float                          dx                             ( CPF_Parm | CPF_OutParm )
// float                          DY                             ( CPF_Parm | CPF_OutParm )

void AHUD::DrawMessage ( int I, float PosY, float* dx, float* DY )
{
	static UFunction* pFnDrawMessage = NULL;

	if ( ! pFnDrawMessage )
		pFnDrawMessage = (UFunction*) UObject::GObjObjects()->Data[ 18409 ];

	AHUD_execDrawMessage_Parms DrawMessage_Parms;
	DrawMessage_Parms.I = I;
	DrawMessage_Parms.PosY = PosY;

	this->ProcessEvent ( pFnDrawMessage, &DrawMessage_Parms, NULL );

	if ( dx )
		*dx = DrawMessage_Parms.dx;

	if ( DY )
		*DY = DrawMessage_Parms.DY;
};

// Function Engine.HUD.GetScreenCoords
// [0x00420002] 
// Parameters infos:
// float                          PosY                           ( CPF_Parm )
// float                          ScreenX                        ( CPF_Parm | CPF_OutParm )
// float                          ScreenY                        ( CPF_Parm | CPF_OutParm )
// struct FHudLocalizedMessage    InMessage                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AHUD::GetScreenCoords ( float PosY, float* ScreenX, float* ScreenY, struct FHudLocalizedMessage* InMessage )
{
	static UFunction* pFnGetScreenCoords = NULL;

	if ( ! pFnGetScreenCoords )
		pFnGetScreenCoords = (UFunction*) UObject::GObjObjects()->Data[ 18404 ];

	AHUD_execGetScreenCoords_Parms GetScreenCoords_Parms;
	GetScreenCoords_Parms.PosY = PosY;

	this->ProcessEvent ( pFnGetScreenCoords, &GetScreenCoords_Parms, NULL );

	if ( ScreenX )
		*ScreenX = GetScreenCoords_Parms.ScreenX;

	if ( ScreenY )
		*ScreenY = GetScreenCoords_Parms.ScreenY;

	if ( InMessage )
		memcpy ( InMessage, &GetScreenCoords_Parms.InMessage, 0x50 );
};

// Function Engine.HUD.AddLocalizedMessage
// [0x00024002] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class UClass*                  InMessageClass                 ( CPF_Parm )
// struct FString                 CriticalString                 ( CPF_Parm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_Parm )
// float                          Position                       ( CPF_Parm )
// float                          Lifetime                       ( CPF_Parm )
// int                            FontSize                       ( CPF_Parm )
// struct FColor                  DrawColor                      ( CPF_Parm )
// int                            MessageCount                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AHUD::AddLocalizedMessage ( int Index, class UClass* InMessageClass, struct FString CriticalString, int Switch, float Position, float Lifetime, int FontSize, struct FColor DrawColor, int MessageCount, class UObject* OptionalObject )
{
	static UFunction* pFnAddLocalizedMessage = NULL;

	if ( ! pFnAddLocalizedMessage )
		pFnAddLocalizedMessage = (UFunction*) UObject::GObjObjects()->Data[ 18393 ];

	AHUD_execAddLocalizedMessage_Parms AddLocalizedMessage_Parms;
	AddLocalizedMessage_Parms.Index = Index;
	AddLocalizedMessage_Parms.InMessageClass = InMessageClass;
	memcpy ( &AddLocalizedMessage_Parms.CriticalString, &CriticalString, 0x10 );
	AddLocalizedMessage_Parms.Switch = Switch;
	AddLocalizedMessage_Parms.Position = Position;
	AddLocalizedMessage_Parms.Lifetime = Lifetime;
	AddLocalizedMessage_Parms.FontSize = FontSize;
	memcpy ( &AddLocalizedMessage_Parms.DrawColor, &DrawColor, 0x4 );
	AddLocalizedMessage_Parms.MessageCount = MessageCount;
	AddLocalizedMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnAddLocalizedMessage, &AddLocalizedMessage_Parms, NULL );
};

// Function Engine.HUD.LocalizedMessage
// [0x00024002] 
// Parameters infos:
// class UClass*                  InMessageClass                 ( CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_Parm )
// struct FString                 CriticalString                 ( CPF_Parm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_Parm )
// float                          Position                       ( CPF_Parm )
// float                          Lifetime                       ( CPF_Parm )
// int                            FontSize                       ( CPF_Parm )
// struct FColor                  DrawColor                      ( CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AHUD::LocalizedMessage ( class UClass* InMessageClass, class APlayerReplicationInfo* RelatedPRI, struct FString CriticalString, int Switch, float Position, float Lifetime, int FontSize, struct FColor DrawColor, class UObject* OptionalObject )
{
	static UFunction* pFnLocalizedMessage = NULL;

	if ( ! pFnLocalizedMessage )
		pFnLocalizedMessage = (UFunction*) UObject::GObjObjects()->Data[ 18373 ];

	AHUD_execLocalizedMessage_Parms LocalizedMessage_Parms;
	LocalizedMessage_Parms.InMessageClass = InMessageClass;
	LocalizedMessage_Parms.RelatedPRI = RelatedPRI;
	memcpy ( &LocalizedMessage_Parms.CriticalString, &CriticalString, 0x10 );
	LocalizedMessage_Parms.Switch = Switch;
	LocalizedMessage_Parms.Position = Position;
	LocalizedMessage_Parms.Lifetime = Lifetime;
	LocalizedMessage_Parms.FontSize = FontSize;
	memcpy ( &LocalizedMessage_Parms.DrawColor, &DrawColor, 0x4 );
	LocalizedMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnLocalizedMessage, &LocalizedMessage_Parms, NULL );
};

// Function Engine.HUD.AddConsoleMessage
// [0x00024002] 
// Parameters infos:
// struct FString                 M                              ( CPF_Parm | CPF_NeedCtorLink )
// class UClass*                  InMessageClass                 ( CPF_Parm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// float                          Lifetime                       ( CPF_OptionalParm | CPF_Parm )

void AHUD::AddConsoleMessage ( struct FString M, class UClass* InMessageClass, class APlayerReplicationInfo* PRI, float Lifetime )
{
	static UFunction* pFnAddConsoleMessage = NULL;

	if ( ! pFnAddConsoleMessage )
		pFnAddConsoleMessage = (UFunction*) UObject::GObjObjects()->Data[ 18361 ];

	AHUD_execAddConsoleMessage_Parms AddConsoleMessage_Parms;
	memcpy ( &AddConsoleMessage_Parms.M, &M, 0x10 );
	AddConsoleMessage_Parms.InMessageClass = InMessageClass;
	AddConsoleMessage_Parms.PRI = PRI;
	AddConsoleMessage_Parms.Lifetime = Lifetime;

	this->ProcessEvent ( pFnAddConsoleMessage, &AddConsoleMessage_Parms, NULL );
};

// Function Engine.HUD.DisplayConsoleMessages
// [0x00020002] 
// Parameters infos:

void AHUD::DisplayConsoleMessages ( )
{
	static UFunction* pFnDisplayConsoleMessages = NULL;

	if ( ! pFnDisplayConsoleMessages )
		pFnDisplayConsoleMessages = (UFunction*) UObject::GObjObjects()->Data[ 18352 ];

	AHUD_execDisplayConsoleMessages_Parms DisplayConsoleMessages_Parms;

	this->ProcessEvent ( pFnDisplayConsoleMessages, &DisplayConsoleMessages_Parms, NULL );
};

// Function Engine.HUD.Message
// [0x00024002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   MsgType                        ( CPF_Parm )
// float                          Lifetime                       ( CPF_OptionalParm | CPF_Parm )

void AHUD::Message ( class APlayerReplicationInfo* PRI, struct FString msg, struct FName MsgType, float Lifetime )
{
	static UFunction* pFnMessage = NULL;

	if ( ! pFnMessage )
		pFnMessage = (UFunction*) UObject::GObjObjects()->Data[ 18346 ];

	AHUD_execMessage_Parms Message_Parms;
	Message_Parms.PRI = PRI;
	memcpy ( &Message_Parms.msg, &msg, 0x10 );
	memcpy ( &Message_Parms.MsgType, &MsgType, 0x8 );
	Message_Parms.Lifetime = Lifetime;

	this->ProcessEvent ( pFnMessage, &Message_Parms, NULL );
};

// Function Engine.HUD.ClearMessage
// [0x00420002] 
// Parameters infos:
// struct FHudLocalizedMessage    M                              ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AHUD::ClearMessage ( struct FHudLocalizedMessage* M )
{
	static UFunction* pFnClearMessage = NULL;

	if ( ! pFnClearMessage )
		pFnClearMessage = (UFunction*) UObject::GObjObjects()->Data[ 18344 ];

	AHUD_execClearMessage_Parms ClearMessage_Parms;

	this->ProcessEvent ( pFnClearMessage, &ClearMessage_Parms, NULL );

	if ( M )
		memcpy ( M, &ClearMessage_Parms.M, 0x50 );
};

// Function Engine.HUD.DisplayBadConnectionAlert
// [0x00020000] 
// Parameters infos:

void AHUD::DisplayBadConnectionAlert ( )
{
	static UFunction* pFnDisplayBadConnectionAlert = NULL;

	if ( ! pFnDisplayBadConnectionAlert )
		pFnDisplayBadConnectionAlert = (UFunction*) UObject::GObjObjects()->Data[ 18343 ];

	AHUD_execDisplayBadConnectionAlert_Parms DisplayBadConnectionAlert_Parms;

	this->ProcessEvent ( pFnDisplayBadConnectionAlert, &DisplayBadConnectionAlert_Parms, NULL );
};

// Function Engine.HUD.DrawEngineHUD
// [0x00020002] 
// Parameters infos:

void AHUD::DrawEngineHUD ( )
{
	static UFunction* pFnDrawEngineHUD = NULL;

	if ( ! pFnDrawEngineHUD )
		pFnDrawEngineHUD = (UFunction*) UObject::GObjObjects()->Data[ 18337 ];

	AHUD_execDrawEngineHUD_Parms DrawEngineHUD_Parms;

	this->ProcessEvent ( pFnDrawEngineHUD, &DrawEngineHUD_Parms, NULL );
};

// Function Engine.HUD.DrawDemoHUD
// [0x00020000] 
// Parameters infos:

void AHUD::DrawDemoHUD ( )
{
	static UFunction* pFnDrawDemoHUD = NULL;

	if ( ! pFnDrawDemoHUD )
		pFnDrawDemoHUD = (UFunction*) UObject::GObjObjects()->Data[ 18336 ];

	AHUD_execDrawDemoHUD_Parms DrawDemoHUD_Parms;

	this->ProcessEvent ( pFnDrawDemoHUD, &DrawDemoHUD_Parms, NULL );
};

// Function Engine.HUD.DrawHUD
// [0x00020002] 
// Parameters infos:

void AHUD::DrawHUD ( )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 18332 ];

	AHUD_execDrawHUD_Parms DrawHUD_Parms;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.HUD.PostRender
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AHUD::eventPostRender ( )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = (UFunction*) UObject::GObjObjects()->Data[ 18320 ];

	AHUD_eventPostRender_Parms PostRender_Parms;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );
};

// Function Engine.HUD.PreCalcValues
// [0x00020002] 
// Parameters infos:

void AHUD::PreCalcValues ( )
{
	static UFunction* pFnPreCalcValues = NULL;

	if ( ! pFnPreCalcValues )
		pFnPreCalcValues = (UFunction*) UObject::GObjObjects()->Data[ 18313 ];

	AHUD_execPreCalcValues_Parms PreCalcValues_Parms;

	this->ProcessEvent ( pFnPreCalcValues, &PreCalcValues_Parms, NULL );
};

// Function Engine.HUD.DrawRoute
// [0x00020002] 
// Parameters infos:
// class APawn*                   Target                         ( CPF_Parm )

void AHUD::DrawRoute ( class APawn* Target )
{
	static UFunction* pFnDrawRoute = NULL;

	if ( ! pFnDrawRoute )
		pFnDrawRoute = (UFunction*) UObject::GObjObjects()->Data[ 18304 ];

	AHUD_execDrawRoute_Parms DrawRoute_Parms;
	DrawRoute_Parms.Target = Target;

	this->ProcessEvent ( pFnDrawRoute, &DrawRoute_Parms, NULL );
};

// Function Engine.HUD.FXStop
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// class UClass*                  aClass                         ( CPF_Parm )

void AHUD::FXStop ( class UClass* aClass )
{
	static UFunction* pFnFXStop = NULL;

	if ( ! pFnFXStop )
		pFnFXStop = (UFunction*) UObject::GObjObjects()->Data[ 18298 ];

	AHUD_execFXStop_Parms FXStop_Parms;
	FXStop_Parms.aClass = aClass;

	this->ProcessEvent ( pFnFXStop, &FXStop_Parms, NULL );
};

// Function Engine.HUD.FXPlay
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// class UClass*                  aClass                         ( CPF_Parm )
// struct FString                 FXAnimPath                     ( CPF_Parm | CPF_NeedCtorLink )

void AHUD::FXPlay ( class UClass* aClass, struct FString FXAnimPath )
{
	static UFunction* pFnFXPlay = NULL;

	if ( ! pFnFXPlay )
		pFnFXPlay = (UFunction*) UObject::GObjObjects()->Data[ 18288 ];

	AHUD_execFXPlay_Parms FXPlay_Parms;
	FXPlay_Parms.aClass = aClass;
	memcpy ( &FXPlay_Parms.FXAnimPath, &FXAnimPath, 0x10 );

	this->ProcessEvent ( pFnFXPlay, &FXPlay_Parms, NULL );
};

// Function Engine.HUD.ShouldDisplayDebug
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DebugType                      ( CPF_Parm )

bool AHUD::ShouldDisplayDebug ( struct FName DebugType )
{
	static UFunction* pFnShouldDisplayDebug = NULL;

	if ( ! pFnShouldDisplayDebug )
		pFnShouldDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 6940 ];

	AHUD_execShouldDisplayDebug_Parms ShouldDisplayDebug_Parms;
	memcpy ( &ShouldDisplayDebug_Parms.DebugType, &DebugType, 0x8 );

	this->ProcessEvent ( pFnShouldDisplayDebug, &ShouldDisplayDebug_Parms, NULL );

	return ShouldDisplayDebug_Parms.ReturnValue;
};

// Function Engine.HUD.ShowDebug
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   DebugType                      ( CPF_OptionalParm | CPF_Parm )

void AHUD::ShowDebug ( struct FName DebugType )
{
	static UFunction* pFnShowDebug = NULL;

	if ( ! pFnShowDebug )
		pFnShowDebug = (UFunction*) UObject::GObjObjects()->Data[ 18282 ];

	AHUD_execShowDebug_Parms ShowDebug_Parms;
	memcpy ( &ShowDebug_Parms.DebugType, &DebugType, 0x8 );

	this->ProcessEvent ( pFnShowDebug, &ShowDebug_Parms, NULL );
};

// Function Engine.HUD.ShowGameDebug
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AHUD::ShowGameDebug ( )
{
	static UFunction* pFnShowGameDebug = NULL;

	if ( ! pFnShowGameDebug )
		pFnShowGameDebug = (UFunction*) UObject::GObjObjects()->Data[ 18280 ];

	AHUD_execShowGameDebug_Parms ShowGameDebug_Parms;

	this->ProcessEvent ( pFnShowGameDebug, &ShowGameDebug_Parms, NULL );
};

// Function Engine.HUD.SetShowScores
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bNewValue                      ( CPF_Parm )

void AHUD::SetShowScores ( unsigned long bNewValue )
{
	static UFunction* pFnSetShowScores = NULL;

	if ( ! pFnSetShowScores )
		pFnSetShowScores = (UFunction*) UObject::GObjObjects()->Data[ 18278 ];

	AHUD_execSetShowScores_Parms SetShowScores_Parms;
	SetShowScores_Parms.bNewValue = bNewValue;

	this->ProcessEvent ( pFnSetShowScores, &SetShowScores_Parms, NULL );
};

// Function Engine.HUD.ShowScores
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AHUD::ShowScores ( )
{
	static UFunction* pFnShowScores = NULL;

	if ( ! pFnShowScores )
		pFnShowScores = (UFunction*) UObject::GObjObjects()->Data[ 18276 ];

	AHUD_execShowScores_Parms ShowScores_Parms;

	this->ProcessEvent ( pFnShowScores, &ShowScores_Parms, NULL );
};

// Function Engine.HUD.ShowHUD
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AHUD::ShowHUD ( )
{
	static UFunction* pFnShowHUD = NULL;

	if ( ! pFnShowHUD )
		pFnShowHUD = (UFunction*) UObject::GObjObjects()->Data[ 18275 ];

	AHUD_execShowHUD_Parms ShowHUD_Parms;

	this->ProcessEvent ( pFnShowHUD, &ShowHUD_Parms, NULL );
};

// Function Engine.HUD.ToggleHUD
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AHUD::ToggleHUD ( )
{
	static UFunction* pFnToggleHUD = NULL;

	if ( ! pFnToggleHUD )
		pFnToggleHUD = (UFunction*) UObject::GObjObjects()->Data[ 18274 ];

	AHUD_execToggleHUD_Parms ToggleHUD_Parms;

	this->ProcessEvent ( pFnToggleHUD, &ToggleHUD_Parms, NULL );
};

// Function Engine.HUD.AddPostRenderedActor
// [0x00020002] 
// Parameters infos:
// class AActor*                  A                              ( CPF_Parm )

void AHUD::AddPostRenderedActor ( class AActor* A )
{
	static UFunction* pFnAddPostRenderedActor = NULL;

	if ( ! pFnAddPostRenderedActor )
		pFnAddPostRenderedActor = (UFunction*) UObject::GObjObjects()->Data[ 18271 ];

	AHUD_execAddPostRenderedActor_Parms AddPostRenderedActor_Parms;
	AddPostRenderedActor_Parms.A = A;

	this->ProcessEvent ( pFnAddPostRenderedActor, &AddPostRenderedActor_Parms, NULL );
};

// Function Engine.HUD.RemovePostRenderedActor
// [0x00020002] 
// Parameters infos:
// class AActor*                  A                              ( CPF_Parm )

void AHUD::RemovePostRenderedActor ( class AActor* A )
{
	static UFunction* pFnRemovePostRenderedActor = NULL;

	if ( ! pFnRemovePostRenderedActor )
		pFnRemovePostRenderedActor = (UFunction*) UObject::GObjObjects()->Data[ 18268 ];

	AHUD_execRemovePostRenderedActor_Parms RemovePostRenderedActor_Parms;
	RemovePostRenderedActor_Parms.A = A;

	this->ProcessEvent ( pFnRemovePostRenderedActor, &RemovePostRenderedActor_Parms, NULL );
};

// Function Engine.HUD.DrawActorOverlays
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ViewPoint                      ( CPF_Parm )
// struct FRotator                ViewRotation                   ( CPF_Parm )

void AHUD::DrawActorOverlays ( struct FVector ViewPoint, struct FRotator ViewRotation )
{
	static UFunction* pFnDrawActorOverlays = NULL;

	if ( ! pFnDrawActorOverlays )
		pFnDrawActorOverlays = (UFunction*) UObject::GObjObjects()->Data[ 18265 ];

	AHUD_execDrawActorOverlays_Parms DrawActorOverlays_Parms;
	memcpy ( &DrawActorOverlays_Parms.ViewPoint, &ViewPoint, 0xC );
	memcpy ( &DrawActorOverlays_Parms.ViewRotation, &ViewRotation, 0xC );

	pFnDrawActorOverlays->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawActorOverlays, &DrawActorOverlays_Parms, NULL );

	pFnDrawActorOverlays->FunctionFlags |= 0x400;
};

// Function Engine.HUD.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AHUD::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 18264 ];

	AHUD_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.HUD.SpawnScoreBoard
// [0x00020002] 
// Parameters infos:
// class UClass*                  ScoringType                    ( CPF_Parm )

void AHUD::SpawnScoreBoard ( class UClass* ScoringType )
{
	static UFunction* pFnSpawnScoreBoard = NULL;

	if ( ! pFnSpawnScoreBoard )
		pFnSpawnScoreBoard = (UFunction*) UObject::GObjObjects()->Data[ 18261 ];

	AHUD_execSpawnScoreBoard_Parms SpawnScoreBoard_Parms;
	SpawnScoreBoard_Parms.ScoringType = ScoringType;

	this->ProcessEvent ( pFnSpawnScoreBoard, &SpawnScoreBoard_Parms, NULL );
};

// Function Engine.HUD.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AHUD::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 18259 ];

	AHUD_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.HUD.Draw2DLine
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            X1                             ( CPF_Parm )
// int                            Y1                             ( CPF_Parm )
// int                            X2                             ( CPF_Parm )
// int                            Y2                             ( CPF_Parm )
// struct FColor                  LineColor                      ( CPF_Parm )

void AHUD::Draw2DLine ( int X1, int Y1, int X2, int Y2, struct FColor LineColor )
{
	static UFunction* pFnDraw2DLine = NULL;

	if ( ! pFnDraw2DLine )
		pFnDraw2DLine = (UFunction*) UObject::GObjObjects()->Data[ 18253 ];

	AHUD_execDraw2DLine_Parms Draw2DLine_Parms;
	Draw2DLine_Parms.X1 = X1;
	Draw2DLine_Parms.Y1 = Y1;
	Draw2DLine_Parms.X2 = X2;
	Draw2DLine_Parms.Y2 = Y2;
	memcpy ( &Draw2DLine_Parms.LineColor, &LineColor, 0x4 );

	pFnDraw2DLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDraw2DLine, &Draw2DLine_Parms, NULL );

	pFnDraw2DLine->FunctionFlags |= 0x400;
};

// Function Engine.HUD.Draw3DLine
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Start                          ( CPF_Parm )
// struct FVector                 End                            ( CPF_Parm )
// struct FColor                  LineColor                      ( CPF_Parm )

void AHUD::Draw3DLine ( struct FVector Start, struct FVector End, struct FColor LineColor )
{
	static UFunction* pFnDraw3DLine = NULL;

	if ( ! pFnDraw3DLine )
		pFnDraw3DLine = (UFunction*) UObject::GObjObjects()->Data[ 18249 ];

	AHUD_execDraw3DLine_Parms Draw3DLine_Parms;
	memcpy ( &Draw3DLine_Parms.Start, &Start, 0xC );
	memcpy ( &Draw3DLine_Parms.End, &End, 0xC );
	memcpy ( &Draw3DLine_Parms.LineColor, &LineColor, 0x4 );

	pFnDraw3DLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDraw3DLine, &Draw3DLine_Parms, NULL );

	pFnDraw3DLine->FunctionFlags |= 0x400;
};

// Function Engine.AutoTestManager.CheckForSentinelRun
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AAutoTestManager::CheckForSentinelRun ( )
{
	static UFunction* pFnCheckForSentinelRun = NULL;

	if ( ! pFnCheckForSentinelRun )
		pFnCheckForSentinelRun = (UFunction*) UObject::GObjObjects()->Data[ 13777 ];

	AAutoTestManager_execCheckForSentinelRun_Parms CheckForSentinelRun_Parms;

	this->ProcessEvent ( pFnCheckForSentinelRun, &CheckForSentinelRun_Parms, NULL );

	return CheckForSentinelRun_Parms.ReturnValue;
};

// Function Engine.AutoTestManager.StartMatch
// [0x00020002] 
// Parameters infos:

void AAutoTestManager::StartMatch ( )
{
	static UFunction* pFnStartMatch = NULL;

	if ( ! pFnStartMatch )
		pFnStartMatch = (UFunction*) UObject::GObjObjects()->Data[ 13775 ];

	AAutoTestManager_execStartMatch_Parms StartMatch_Parms;

	this->ProcessEvent ( pFnStartMatch, &StartMatch_Parms, NULL );
};

// Function Engine.AutoTestManager.GetNextAutomatedTestingMap
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AAutoTestManager::GetNextAutomatedTestingMap ( )
{
	static UFunction* pFnGetNextAutomatedTestingMap = NULL;

	if ( ! pFnGetNextAutomatedTestingMap )
		pFnGetNextAutomatedTestingMap = (UFunction*) UObject::GObjObjects()->Data[ 13769 ];

	AAutoTestManager_execGetNextAutomatedTestingMap_Parms GetNextAutomatedTestingMap_Parms;

	this->ProcessEvent ( pFnGetNextAutomatedTestingMap, &GetNextAutomatedTestingMap_Parms, NULL );

	return GetNextAutomatedTestingMap_Parms.ReturnValue;
};

// Function Engine.AutoTestManager.IncrementNumberOfMatchesPlayed
// [0x00020002] 
// Parameters infos:

void AAutoTestManager::IncrementNumberOfMatchesPlayed ( )
{
	static UFunction* pFnIncrementNumberOfMatchesPlayed = NULL;

	if ( ! pFnIncrementNumberOfMatchesPlayed )
		pFnIncrementNumberOfMatchesPlayed = (UFunction*) UObject::GObjObjects()->Data[ 13768 ];

	AAutoTestManager_execIncrementNumberOfMatchesPlayed_Parms IncrementNumberOfMatchesPlayed_Parms;

	this->ProcessEvent ( pFnIncrementNumberOfMatchesPlayed, &IncrementNumberOfMatchesPlayed_Parms, NULL );
};

// Function Engine.AutoTestManager.IncrementAutomatedTestingMapIndex
// [0x00020002] 
// Parameters infos:

void AAutoTestManager::IncrementAutomatedTestingMapIndex ( )
{
	static UFunction* pFnIncrementAutomatedTestingMapIndex = NULL;

	if ( ! pFnIncrementAutomatedTestingMapIndex )
		pFnIncrementAutomatedTestingMapIndex = (UFunction*) UObject::GObjObjects()->Data[ 13766 ];

	AAutoTestManager_execIncrementAutomatedTestingMapIndex_Parms IncrementAutomatedTestingMapIndex_Parms;

	this->ProcessEvent ( pFnIncrementAutomatedTestingMapIndex, &IncrementAutomatedTestingMapIndex_Parms, NULL );
};

// Function Engine.AutoTestManager.CloseAutomatedMapTestTimer
// [0x00020002] 
// Parameters infos:

void AAutoTestManager::CloseAutomatedMapTestTimer ( )
{
	static UFunction* pFnCloseAutomatedMapTestTimer = NULL;

	if ( ! pFnCloseAutomatedMapTestTimer )
		pFnCloseAutomatedMapTestTimer = (UFunction*) UObject::GObjObjects()->Data[ 13765 ];

	AAutoTestManager_execCloseAutomatedMapTestTimer_Parms CloseAutomatedMapTestTimer_Parms;

	this->ProcessEvent ( pFnCloseAutomatedMapTestTimer, &CloseAutomatedMapTestTimer_Parms, NULL );
};

// Function Engine.AutoTestManager.StartAutomatedMapTestTimerWorker
// [0x00020002] 
// Parameters infos:

void AAutoTestManager::StartAutomatedMapTestTimerWorker ( )
{
	static UFunction* pFnStartAutomatedMapTestTimerWorker = NULL;

	if ( ! pFnStartAutomatedMapTestTimerWorker )
		pFnStartAutomatedMapTestTimerWorker = (UFunction*) UObject::GObjObjects()->Data[ 13762 ];

	AAutoTestManager_execStartAutomatedMapTestTimerWorker_Parms StartAutomatedMapTestTimerWorker_Parms;

	this->ProcessEvent ( pFnStartAutomatedMapTestTimerWorker, &StartAutomatedMapTestTimerWorker_Parms, NULL );
};

// Function Engine.AutoTestManager.StartAutomatedMapTestTimer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AAutoTestManager::eventStartAutomatedMapTestTimer ( )
{
	static UFunction* pFnStartAutomatedMapTestTimer = NULL;

	if ( ! pFnStartAutomatedMapTestTimer )
		pFnStartAutomatedMapTestTimer = (UFunction*) UObject::GObjObjects()->Data[ 13761 ];

	AAutoTestManager_eventStartAutomatedMapTestTimer_Parms StartAutomatedMapTestTimer_Parms;

	this->ProcessEvent ( pFnStartAutomatedMapTestTimer, &StartAutomatedMapTestTimer_Parms, NULL );
};

// Function Engine.AutoTestManager.DoTimeBasedSentinelStatGathering
// [0x00020002] 
// Parameters infos:

void AAutoTestManager::DoTimeBasedSentinelStatGathering ( )
{
	static UFunction* pFnDoTimeBasedSentinelStatGathering = NULL;

	if ( ! pFnDoTimeBasedSentinelStatGathering )
		pFnDoTimeBasedSentinelStatGathering = (UFunction*) UObject::GObjObjects()->Data[ 13757 ];

	AAutoTestManager_execDoTimeBasedSentinelStatGathering_Parms DoTimeBasedSentinelStatGathering_Parms;

	this->ProcessEvent ( pFnDoTimeBasedSentinelStatGathering, &DoTimeBasedSentinelStatGathering_Parms, NULL );
};

// Function Engine.AutoTestManager.DoSentinel_ViewDependentMemoryAtSpecificLocation
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 InLocation                     ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FRotator                InRotation                     ( CPF_Const | CPF_Parm | CPF_OutParm )

void AAutoTestManager::DoSentinel_ViewDependentMemoryAtSpecificLocation ( struct FVector* InLocation, struct FRotator* InRotation )
{
	static UFunction* pFnDoSentinel_ViewDependentMemoryAtSpecificLocation = NULL;

	if ( ! pFnDoSentinel_ViewDependentMemoryAtSpecificLocation )
		pFnDoSentinel_ViewDependentMemoryAtSpecificLocation = (UFunction*) UObject::GObjObjects()->Data[ 13754 ];

	AAutoTestManager_execDoSentinel_ViewDependentMemoryAtSpecificLocation_Parms DoSentinel_ViewDependentMemoryAtSpecificLocation_Parms;

	pFnDoSentinel_ViewDependentMemoryAtSpecificLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoSentinel_ViewDependentMemoryAtSpecificLocation, &DoSentinel_ViewDependentMemoryAtSpecificLocation_Parms, NULL );

	pFnDoSentinel_ViewDependentMemoryAtSpecificLocation->FunctionFlags |= 0x400;

	if ( InLocation )
		memcpy ( InLocation, &DoSentinel_ViewDependentMemoryAtSpecificLocation_Parms.InLocation, 0xC );

	if ( InRotation )
		memcpy ( InRotation, &DoSentinel_ViewDependentMemoryAtSpecificLocation_Parms.InRotation, 0xC );
};

// Function Engine.AutoTestManager.DoSentinel_PerfAtSpecificLocation
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 InLocation                     ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FRotator                InRotation                     ( CPF_Const | CPF_Parm | CPF_OutParm )

void AAutoTestManager::DoSentinel_PerfAtSpecificLocation ( struct FVector* InLocation, struct FRotator* InRotation )
{
	static UFunction* pFnDoSentinel_PerfAtSpecificLocation = NULL;

	if ( ! pFnDoSentinel_PerfAtSpecificLocation )
		pFnDoSentinel_PerfAtSpecificLocation = (UFunction*) UObject::GObjObjects()->Data[ 13751 ];

	AAutoTestManager_execDoSentinel_PerfAtSpecificLocation_Parms DoSentinel_PerfAtSpecificLocation_Parms;

	pFnDoSentinel_PerfAtSpecificLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoSentinel_PerfAtSpecificLocation, &DoSentinel_PerfAtSpecificLocation_Parms, NULL );

	pFnDoSentinel_PerfAtSpecificLocation->FunctionFlags |= 0x400;

	if ( InLocation )
		memcpy ( InLocation, &DoSentinel_PerfAtSpecificLocation_Parms.InLocation, 0xC );

	if ( InRotation )
		memcpy ( InRotation, &DoSentinel_PerfAtSpecificLocation_Parms.InRotation, 0xC );
};

// Function Engine.AutoTestManager.DoSentinel_MemoryAtSpecificLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 InLocation                     ( CPF_Const | CPF_Parm )
// struct FRotator                InRotation                     ( CPF_Const | CPF_Parm )

void AAutoTestManager::DoSentinel_MemoryAtSpecificLocation ( struct FVector InLocation, struct FRotator InRotation )
{
	static UFunction* pFnDoSentinel_MemoryAtSpecificLocation = NULL;

	if ( ! pFnDoSentinel_MemoryAtSpecificLocation )
		pFnDoSentinel_MemoryAtSpecificLocation = (UFunction*) UObject::GObjObjects()->Data[ 13748 ];

	AAutoTestManager_execDoSentinel_MemoryAtSpecificLocation_Parms DoSentinel_MemoryAtSpecificLocation_Parms;
	memcpy ( &DoSentinel_MemoryAtSpecificLocation_Parms.InLocation, &InLocation, 0xC );
	memcpy ( &DoSentinel_MemoryAtSpecificLocation_Parms.InRotation, &InRotation, 0xC );

	pFnDoSentinel_MemoryAtSpecificLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoSentinel_MemoryAtSpecificLocation, &DoSentinel_MemoryAtSpecificLocation_Parms, NULL );

	pFnDoSentinel_MemoryAtSpecificLocation->FunctionFlags |= 0x400;
};

// Function Engine.AutoTestManager.GetTravelLocations
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FName                   LevelName                      ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )
// struct TArray<struct FVector>  TravelPoints                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AAutoTestManager::GetTravelLocations ( struct FName LevelName, class APlayerController* PC, struct TArray<struct FVector>* TravelPoints )
{
	static UFunction* pFnGetTravelLocations = NULL;

	if ( ! pFnGetTravelLocations )
		pFnGetTravelLocations = (UFunction*) UObject::GObjObjects()->Data[ 13743 ];

	AAutoTestManager_execGetTravelLocations_Parms GetTravelLocations_Parms;
	memcpy ( &GetTravelLocations_Parms.LevelName, &LevelName, 0x8 );
	GetTravelLocations_Parms.PC = PC;

	pFnGetTravelLocations->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTravelLocations, &GetTravelLocations_Parms, NULL );

	pFnGetTravelLocations->FunctionFlags |= 0x400;

	if ( TravelPoints )
		memcpy ( TravelPoints, &GetTravelLocations_Parms.TravelPoints, 0x10 );
};

// Function Engine.AutoTestManager.HandlePerLoadedMapAudioStats
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AAutoTestManager::HandlePerLoadedMapAudioStats ( )
{
	static UFunction* pFnHandlePerLoadedMapAudioStats = NULL;

	if ( ! pFnHandlePerLoadedMapAudioStats )
		pFnHandlePerLoadedMapAudioStats = (UFunction*) UObject::GObjObjects()->Data[ 13742 ];

	AAutoTestManager_execHandlePerLoadedMapAudioStats_Parms HandlePerLoadedMapAudioStats_Parms;

	pFnHandlePerLoadedMapAudioStats->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHandlePerLoadedMapAudioStats, &HandlePerLoadedMapAudioStats_Parms, NULL );

	pFnHandlePerLoadedMapAudioStats->FunctionFlags |= 0x400;
};

// Function Engine.AutoTestManager.DoSentinelActionPerLoadedMap
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AAutoTestManager::DoSentinelActionPerLoadedMap ( )
{
	static UFunction* pFnDoSentinelActionPerLoadedMap = NULL;

	if ( ! pFnDoSentinelActionPerLoadedMap )
		pFnDoSentinelActionPerLoadedMap = (UFunction*) UObject::GObjObjects()->Data[ 13741 ];

	AAutoTestManager_execDoSentinelActionPerLoadedMap_Parms DoSentinelActionPerLoadedMap_Parms;

	pFnDoSentinelActionPerLoadedMap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoSentinelActionPerLoadedMap, &DoSentinelActionPerLoadedMap_Parms, NULL );

	pFnDoSentinelActionPerLoadedMap->FunctionFlags |= 0x400;
};

// Function Engine.AutoTestManager.DoTravelTheWorld
// [0x00020002] 
// Parameters infos:

void AAutoTestManager::DoTravelTheWorld ( )
{
	static UFunction* pFnDoTravelTheWorld = NULL;

	if ( ! pFnDoTravelTheWorld )
		pFnDoTravelTheWorld = (UFunction*) UObject::GObjObjects()->Data[ 13708 ];

	AAutoTestManager_execDoTravelTheWorld_Parms DoTravelTheWorld_Parms;

	this->ProcessEvent ( pFnDoTravelTheWorld, &DoTravelTheWorld_Parms, NULL );
};

// Function Engine.AutoTestManager.EndSentinelRun
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  RunResult                      ( CPF_Parm )

void AAutoTestManager::EndSentinelRun ( unsigned char RunResult )
{
	static UFunction* pFnEndSentinelRun = NULL;

	if ( ! pFnEndSentinelRun )
		pFnEndSentinelRun = (UFunction*) UObject::GObjObjects()->Data[ 13706 ];

	AAutoTestManager_execEndSentinelRun_Parms EndSentinelRun_Parms;
	EndSentinelRun_Parms.RunResult = RunResult;

	pFnEndSentinelRun->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndSentinelRun, &EndSentinelRun_Parms, NULL );

	pFnEndSentinelRun->FunctionFlags |= 0x400;
};

// Function Engine.AutoTestManager.AddSentinelPerTimePeriodStats
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 InLocation                     ( CPF_Const | CPF_Parm )
// struct FRotator                InRotation                     ( CPF_Const | CPF_Parm )

void AAutoTestManager::AddSentinelPerTimePeriodStats ( struct FVector InLocation, struct FRotator InRotation )
{
	static UFunction* pFnAddSentinelPerTimePeriodStats = NULL;

	if ( ! pFnAddSentinelPerTimePeriodStats )
		pFnAddSentinelPerTimePeriodStats = (UFunction*) UObject::GObjObjects()->Data[ 13703 ];

	AAutoTestManager_execAddSentinelPerTimePeriodStats_Parms AddSentinelPerTimePeriodStats_Parms;
	memcpy ( &AddSentinelPerTimePeriodStats_Parms.InLocation, &InLocation, 0xC );
	memcpy ( &AddSentinelPerTimePeriodStats_Parms.InRotation, &InRotation, 0xC );

	pFnAddSentinelPerTimePeriodStats->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSentinelPerTimePeriodStats, &AddSentinelPerTimePeriodStats_Parms, NULL );

	pFnAddSentinelPerTimePeriodStats->FunctionFlags |= 0x400;
};

// Function Engine.AutoTestManager.BeginSentinelRun
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 TaskDescription                ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 TaskParameter                  ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 TagDesc                        ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

void AAutoTestManager::BeginSentinelRun ( struct FString TaskDescription, struct FString TaskParameter, struct FString TagDesc )
{
	static UFunction* pFnBeginSentinelRun = NULL;

	if ( ! pFnBeginSentinelRun )
		pFnBeginSentinelRun = (UFunction*) UObject::GObjObjects()->Data[ 13699 ];

	AAutoTestManager_execBeginSentinelRun_Parms BeginSentinelRun_Parms;
	memcpy ( &BeginSentinelRun_Parms.TaskDescription, &TaskDescription, 0x10 );
	memcpy ( &BeginSentinelRun_Parms.TaskParameter, &TaskParameter, 0x10 );
	memcpy ( &BeginSentinelRun_Parms.TagDesc, &TagDesc, 0x10 );

	pFnBeginSentinelRun->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBeginSentinelRun, &BeginSentinelRun_Parms, NULL );

	pFnBeginSentinelRun->FunctionFlags |= 0x400;
};

// Function Engine.AutoTestManager.InitializeOptions
// [0x00020002] 
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )

void AAutoTestManager::InitializeOptions ( struct FString Options )
{
	static UFunction* pFnInitializeOptions = NULL;

	if ( ! pFnInitializeOptions )
		pFnInitializeOptions = (UFunction*) UObject::GObjObjects()->Data[ 13682 ];

	AAutoTestManager_execInitializeOptions_Parms InitializeOptions_Parms;
	memcpy ( &InitializeOptions_Parms.Options, &Options, 0x10 );

	this->ProcessEvent ( pFnInitializeOptions, &InitializeOptions_Parms, NULL );
};

// Function Engine.AutoTestManager.Timer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AAutoTestManager::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 13678 ];

	AAutoTestManager_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Engine.AutoTestManager.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AAutoTestManager::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 13677 ];

	AAutoTestManager_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.CoverGroup.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ACoverGroup::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 17489 ];

	ACoverGroup_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.CoverGroup.ToggleGroup
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ACoverGroup::ToggleGroup ( )
{
	static UFunction* pFnToggleGroup = NULL;

	if ( ! pFnToggleGroup )
		pFnToggleGroup = (UFunction*) UObject::GObjObjects()->Data[ 17488 ];

	ACoverGroup_execToggleGroup_Parms ToggleGroup_Parms;

	pFnToggleGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnToggleGroup, &ToggleGroup_Parms, NULL );

	pFnToggleGroup->FunctionFlags |= 0x400;
};

// Function Engine.CoverGroup.DisableGroup
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ACoverGroup::DisableGroup ( )
{
	static UFunction* pFnDisableGroup = NULL;

	if ( ! pFnDisableGroup )
		pFnDisableGroup = (UFunction*) UObject::GObjObjects()->Data[ 17487 ];

	ACoverGroup_execDisableGroup_Parms DisableGroup_Parms;

	pFnDisableGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableGroup, &DisableGroup_Parms, NULL );

	pFnDisableGroup->FunctionFlags |= 0x400;
};

// Function Engine.CoverGroup.EnableGroup
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ACoverGroup::EnableGroup ( )
{
	static UFunction* pFnEnableGroup = NULL;

	if ( ! pFnEnableGroup )
		pFnEnableGroup = (UFunction*) UObject::GObjObjects()->Data[ 17486 ];

	ACoverGroup_execEnableGroup_Parms EnableGroup_Parms;

	pFnEnableGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableGroup, &EnableGroup_Parms, NULL );

	pFnEnableGroup->FunctionFlags |= 0x400;
};

// Function Engine.FileWriter.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AFileWriter::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 20031 ];

	AFileWriter_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.FileWriter.Logf
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 logString                      ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void AFileWriter::Logf ( struct FString logString )
{
	static UFunction* pFnLogf = NULL;

	if ( ! pFnLogf )
		pFnLogf = (UFunction*) UObject::GObjObjects()->Data[ 20029 ];

	AFileWriter_execLogf_Parms Logf_Parms;
	memcpy ( &Logf_Parms.logString, &logString, 0x10 );

	pFnLogf->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogf, &Logf_Parms, NULL );

	pFnLogf->FunctionFlags |= 0x400;
};

// Function Engine.FileWriter.CloseFile
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AFileWriter::CloseFile ( )
{
	static UFunction* pFnCloseFile = NULL;

	if ( ! pFnCloseFile )
		pFnCloseFile = (UFunction*) UObject::GObjObjects()->Data[ 20028 ];

	AFileWriter_execCloseFile_Parms CloseFile_Parms;

	pFnCloseFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCloseFile, &CloseFile_Parms, NULL );

	pFnCloseFile->FunctionFlags |= 0x400;
};

// Function Engine.FileWriter.OpenFile
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InFilename                     ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// unsigned char                  InFileType                     ( CPF_OptionalParm | CPF_Parm )
// struct FString                 InExtension                    ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bUnique                        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncludeTimeStamp              ( CPF_OptionalParm | CPF_Parm )

bool AFileWriter::OpenFile ( struct FString InFilename, unsigned char InFileType, struct FString InExtension, unsigned long bUnique, unsigned long bIncludeTimeStamp )
{
	static UFunction* pFnOpenFile = NULL;

	if ( ! pFnOpenFile )
		pFnOpenFile = (UFunction*) UObject::GObjObjects()->Data[ 20021 ];

	AFileWriter_execOpenFile_Parms OpenFile_Parms;
	memcpy ( &OpenFile_Parms.InFilename, &InFilename, 0x10 );
	OpenFile_Parms.InFileType = InFileType;
	memcpy ( &OpenFile_Parms.InExtension, &InExtension, 0x10 );
	OpenFile_Parms.bUnique = bUnique;
	OpenFile_Parms.bIncludeTimeStamp = bIncludeTimeStamp;

	pFnOpenFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpenFile, &OpenFile_Parms, NULL );

	pFnOpenFile->FunctionFlags |= 0x400;

	return OpenFile_Parms.ReturnValue;
};

// Function Engine.FileLog.CloseLog
// [0x00020002] 
// Parameters infos:

void AFileLog::CloseLog ( )
{
	static UFunction* pFnCloseLog = NULL;

	if ( ! pFnCloseLog )
		pFnCloseLog = (UFunction*) UObject::GObjObjects()->Data[ 20041 ];

	AFileLog_execCloseLog_Parms CloseLog_Parms;

	this->ProcessEvent ( pFnCloseLog, &CloseLog_Parms, NULL );
};

// Function Engine.FileLog.OpenLog
// [0x00024002] 
// Parameters infos:
// struct FString                 LogFilename                    ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FString                 extension                      ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bUnique                        ( CPF_OptionalParm | CPF_Parm )

void AFileLog::OpenLog ( struct FString LogFilename, struct FString extension, unsigned long bUnique )
{
	static UFunction* pFnOpenLog = NULL;

	if ( ! pFnOpenLog )
		pFnOpenLog = (UFunction*) UObject::GObjObjects()->Data[ 20037 ];

	AFileLog_execOpenLog_Parms OpenLog_Parms;
	memcpy ( &OpenLog_Parms.LogFilename, &LogFilename, 0x10 );
	memcpy ( &OpenLog_Parms.extension, &extension, 0x10 );
	OpenLog_Parms.bUnique = bUnique;

	this->ProcessEvent ( pFnOpenLog, &OpenLog_Parms, NULL );
};

// Function Engine.GameInfo.StandbyCheatDetected
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// unsigned char                  StandbyType                    ( CPF_Parm )

void AGameInfo::eventStandbyCheatDetected ( unsigned char StandbyType )
{
	static UFunction* pFnStandbyCheatDetected = NULL;

	if ( ! pFnStandbyCheatDetected )
		pFnStandbyCheatDetected = (UFunction*) UObject::GObjObjects()->Data[ 21108 ];

	AGameInfo_eventStandbyCheatDetected_Parms StandbyCheatDetected_Parms;
	StandbyCheatDetected_Parms.StandbyType = StandbyType;

	this->ProcessEvent ( pFnStandbyCheatDetected, &StandbyCheatDetected_Parms, NULL );
};

// Function Engine.GameInfo.EnableStandbyCheatDetection
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bIsEnabled                     ( CPF_Parm )

void AGameInfo::EnableStandbyCheatDetection ( unsigned long bIsEnabled )
{
	static UFunction* pFnEnableStandbyCheatDetection = NULL;

	if ( ! pFnEnableStandbyCheatDetection )
		pFnEnableStandbyCheatDetection = (UFunction*) UObject::GObjObjects()->Data[ 21106 ];

	AGameInfo_execEnableStandbyCheatDetection_Parms EnableStandbyCheatDetection_Parms;
	EnableStandbyCheatDetection_Parms.bIsEnabled = bIsEnabled;

	pFnEnableStandbyCheatDetection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableStandbyCheatDetection, &EnableStandbyCheatDetection_Parms, NULL );

	pFnEnableStandbyCheatDetection->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.BeginBVT
// [0x00024302] ( FUNC_Exec )
// Parameters infos:
// struct FString                 TagDesc                        ( CPF_OptionalParm | CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void AGameInfo::BeginBVT ( struct FString TagDesc )
{
	static UFunction* pFnBeginBVT = NULL;

	if ( ! pFnBeginBVT )
		pFnBeginBVT = (UFunction*) UObject::GObjObjects()->Data[ 21104 ];

	AGameInfo_execBeginBVT_Parms BeginBVT_Parms;
	memcpy ( &BeginBVT_Parms.TagDesc, &TagDesc, 0x10 );

	this->ProcessEvent ( pFnBeginBVT, &BeginBVT_Parms, NULL );
};

// Function Engine.GameInfo.CheckForSentinelRun
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::CheckForSentinelRun ( )
{
	static UFunction* pFnCheckForSentinelRun = NULL;

	if ( ! pFnCheckForSentinelRun )
		pFnCheckForSentinelRun = (UFunction*) UObject::GObjObjects()->Data[ 21102 ];

	AGameInfo_execCheckForSentinelRun_Parms CheckForSentinelRun_Parms;

	this->ProcessEvent ( pFnCheckForSentinelRun, &CheckForSentinelRun_Parms, NULL );

	return CheckForSentinelRun_Parms.ReturnValue;
};

// Function Engine.GameInfo.ShouldAutoContinueToNextRound
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::ShouldAutoContinueToNextRound ( )
{
	static UFunction* pFnShouldAutoContinueToNextRound = NULL;

	if ( ! pFnShouldAutoContinueToNextRound )
		pFnShouldAutoContinueToNextRound = (UFunction*) UObject::GObjObjects()->Data[ 21100 ];

	AGameInfo_execShouldAutoContinueToNextRound_Parms ShouldAutoContinueToNextRound_Parms;

	this->ProcessEvent ( pFnShouldAutoContinueToNextRound, &ShouldAutoContinueToNextRound_Parms, NULL );

	return ShouldAutoContinueToNextRound_Parms.ReturnValue;
};

// Function Engine.GameInfo.IsDoingASentinelRun
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::IsDoingASentinelRun ( )
{
	static UFunction* pFnIsDoingASentinelRun = NULL;

	if ( ! pFnIsDoingASentinelRun )
		pFnIsDoingASentinelRun = (UFunction*) UObject::GObjObjects()->Data[ 11832 ];

	AGameInfo_execIsDoingASentinelRun_Parms IsDoingASentinelRun_Parms;

	this->ProcessEvent ( pFnIsDoingASentinelRun, &IsDoingASentinelRun_Parms, NULL );

	return IsDoingASentinelRun_Parms.ReturnValue;
};

// Function Engine.GameInfo.IsCheckingForMemLeaks
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::IsCheckingForMemLeaks ( )
{
	static UFunction* pFnIsCheckingForMemLeaks = NULL;

	if ( ! pFnIsCheckingForMemLeaks )
		pFnIsCheckingForMemLeaks = (UFunction*) UObject::GObjObjects()->Data[ 21098 ];

	AGameInfo_execIsCheckingForMemLeaks_Parms IsCheckingForMemLeaks_Parms;

	this->ProcessEvent ( pFnIsCheckingForMemLeaks, &IsCheckingForMemLeaks_Parms, NULL );

	return IsCheckingForMemLeaks_Parms.ReturnValue;
};

// Function Engine.GameInfo.IsCheckingForFragmentation
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::IsCheckingForFragmentation ( )
{
	static UFunction* pFnIsCheckingForFragmentation = NULL;

	if ( ! pFnIsCheckingForFragmentation )
		pFnIsCheckingForFragmentation = (UFunction*) UObject::GObjObjects()->Data[ 21096 ];

	AGameInfo_execIsCheckingForFragmentation_Parms IsCheckingForFragmentation_Parms;

	this->ProcessEvent ( pFnIsCheckingForFragmentation, &IsCheckingForFragmentation_Parms, NULL );

	return IsCheckingForFragmentation_Parms.ReturnValue;
};

// Function Engine.GameInfo.IsAutomatedPerfTesting
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::IsAutomatedPerfTesting ( )
{
	static UFunction* pFnIsAutomatedPerfTesting = NULL;

	if ( ! pFnIsAutomatedPerfTesting )
		pFnIsAutomatedPerfTesting = (UFunction*) UObject::GObjObjects()->Data[ 10081 ];

	AGameInfo_execIsAutomatedPerfTesting_Parms IsAutomatedPerfTesting_Parms;

	this->ProcessEvent ( pFnIsAutomatedPerfTesting, &IsAutomatedPerfTesting_Parms, NULL );

	return IsAutomatedPerfTesting_Parms.ReturnValue;
};

// Function Engine.GameInfo.DoTravelTheWorld
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AGameInfo::DoTravelTheWorld ( )
{
	static UFunction* pFnDoTravelTheWorld = NULL;

	if ( ! pFnDoTravelTheWorld )
		pFnDoTravelTheWorld = (UFunction*) UObject::GObjObjects()->Data[ 21094 ];

	AGameInfo_execDoTravelTheWorld_Parms DoTravelTheWorld_Parms;

	this->ProcessEvent ( pFnDoTravelTheWorld, &DoTravelTheWorld_Parms, NULL );
};

// Function Engine.GameInfo.TellClientsToTravelToSession
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// class UClass*                  SearchClass                    ( CPF_Parm )
// unsigned char                  PlatformSpecificInfo           ( CPF_Parm )

void AGameInfo::TellClientsToTravelToSession ( struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo )
{
	static UFunction* pFnTellClientsToTravelToSession = NULL;

	if ( ! pFnTellClientsToTravelToSession )
		pFnTellClientsToTravelToSession = (UFunction*) UObject::GObjObjects()->Data[ 21089 ];

	AGameInfo_execTellClientsToTravelToSession_Parms TellClientsToTravelToSession_Parms;
	memcpy ( &TellClientsToTravelToSession_Parms.SessionName, &SessionName, 0x8 );
	TellClientsToTravelToSession_Parms.SearchClass = SearchClass;
	memcpy ( &TellClientsToTravelToSession_Parms.PlatformSpecificInfo, &PlatformSpecificInfo, 0x50 );

	this->ProcessEvent ( pFnTellClientsToTravelToSession, &TellClientsToTravelToSession_Parms, NULL );
};

// Function Engine.GameInfo.TellClientsToReturnToPartyHost
// [0x00020002] 
// Parameters infos:

void AGameInfo::TellClientsToReturnToPartyHost ( )
{
	static UFunction* pFnTellClientsToReturnToPartyHost = NULL;

	if ( ! pFnTellClientsToReturnToPartyHost )
		pFnTellClientsToReturnToPartyHost = (UFunction*) UObject::GObjObjects()->Data[ 21085 ];

	AGameInfo_execTellClientsToReturnToPartyHost_Parms TellClientsToReturnToPartyHost_Parms;

	this->ProcessEvent ( pFnTellClientsToReturnToPartyHost, &TellClientsToReturnToPartyHost_Parms, NULL );
};

// Function Engine.GameInfo.OnServerCreateComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void AGameInfo::OnServerCreateComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnServerCreateComplete = NULL;

	if ( ! pFnOnServerCreateComplete )
		pFnOnServerCreateComplete = (UFunction*) UObject::GObjObjects()->Data[ 21081 ];

	AGameInfo_execOnServerCreateComplete_Parms OnServerCreateComplete_Parms;
	memcpy ( &OnServerCreateComplete_Parms.SessionName, &SessionName, 0x8 );
	OnServerCreateComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnServerCreateComplete, &OnServerCreateComplete_Parms, NULL );
};

// Function Engine.GameInfo.RegisterServer
// [0x00020002] 
// Parameters infos:

void AGameInfo::RegisterServer ( )
{
	static UFunction* pFnRegisterServer = NULL;

	if ( ! pFnRegisterServer )
		pFnRegisterServer = (UFunction*) UObject::GObjObjects()->Data[ 21077 ];

	AGameInfo_execRegisterServer_Parms RegisterServer_Parms;

	this->ProcessEvent ( pFnRegisterServer, &RegisterServer_Parms, NULL );
};

// Function Engine.GameInfo.OnLoginChange
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void AGameInfo::OnLoginChange ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 21075 ];

	AGameInfo_execOnLoginChange_Parms OnLoginChange_Parms;
	OnLoginChange_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.GameInfo.OnLoginFailed
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  ErrorCode                      ( CPF_Parm )

void AGameInfo::OnLoginFailed ( unsigned char LocalUserNum, unsigned char ErrorCode )
{
	static UFunction* pFnOnLoginFailed = NULL;

	if ( ! pFnOnLoginFailed )
		pFnOnLoginFailed = (UFunction*) UObject::GObjObjects()->Data[ 21072 ];

	AGameInfo_execOnLoginFailed_Parms OnLoginFailed_Parms;
	OnLoginFailed_Parms.LocalUserNum = LocalUserNum;
	OnLoginFailed_Parms.ErrorCode = ErrorCode;

	this->ProcessEvent ( pFnOnLoginFailed, &OnLoginFailed_Parms, NULL );
};

// Function Engine.GameInfo.ClearAutoLoginDelegates
// [0x00020002] 
// Parameters infos:

void AGameInfo::ClearAutoLoginDelegates ( )
{
	static UFunction* pFnClearAutoLoginDelegates = NULL;

	if ( ! pFnClearAutoLoginDelegates )
		pFnClearAutoLoginDelegates = (UFunction*) UObject::GObjObjects()->Data[ 21071 ];

	AGameInfo_execClearAutoLoginDelegates_Parms ClearAutoLoginDelegates_Parms;

	this->ProcessEvent ( pFnClearAutoLoginDelegates, &ClearAutoLoginDelegates_Parms, NULL );
};

// Function Engine.GameInfo.ProcessServerLogin
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::ProcessServerLogin ( )
{
	static UFunction* pFnProcessServerLogin = NULL;

	if ( ! pFnProcessServerLogin )
		pFnProcessServerLogin = (UFunction*) UObject::GObjObjects()->Data[ 21067 ];

	AGameInfo_execProcessServerLogin_Parms ProcessServerLogin_Parms;

	this->ProcessEvent ( pFnProcessServerLogin, &ProcessServerLogin_Parms, NULL );

	return ProcessServerLogin_Parms.ReturnValue;
};

// Function Engine.GameInfo.MatineeCancelled
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventMatineeCancelled ( )
{
	static UFunction* pFnMatineeCancelled = NULL;

	if ( ! pFnMatineeCancelled )
		pFnMatineeCancelled = (UFunction*) UObject::GObjObjects()->Data[ 21066 ];

	AGameInfo_eventMatineeCancelled_Parms MatineeCancelled_Parms;

	this->ProcessEvent ( pFnMatineeCancelled, &MatineeCancelled_Parms, NULL );
};

// Function Engine.GameInfo.RecalculateSkillRating
// [0x00020002] 
// Parameters infos:

void AGameInfo::RecalculateSkillRating ( )
{
	static UFunction* pFnRecalculateSkillRating = NULL;

	if ( ! pFnRecalculateSkillRating )
		pFnRecalculateSkillRating = (UFunction*) UObject::GObjObjects()->Data[ 21059 ];

	AGameInfo_execRecalculateSkillRating_Parms RecalculateSkillRating_Parms;

	this->ProcessEvent ( pFnRecalculateSkillRating, &RecalculateSkillRating_Parms, NULL );
};

// Function Engine.GameInfo.UpdateGameplayMuteList
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::UpdateGameplayMuteList ( class APlayerController* PC )
{
	static UFunction* pFnUpdateGameplayMuteList = NULL;

	if ( ! pFnUpdateGameplayMuteList )
		pFnUpdateGameplayMuteList = (UFunction*) UObject::GObjObjects()->Data[ 21057 ];

	AGameInfo_execUpdateGameplayMuteList_Parms UpdateGameplayMuteList_Parms;
	UpdateGameplayMuteList_Parms.PC = PC;

	this->ProcessEvent ( pFnUpdateGameplayMuteList, &UpdateGameplayMuteList_Parms, NULL );
};

// Function Engine.GameInfo.NotifyArbitratedMatchEnd
// [0x00020002] 
// Parameters infos:

void AGameInfo::NotifyArbitratedMatchEnd ( )
{
	static UFunction* pFnNotifyArbitratedMatchEnd = NULL;

	if ( ! pFnNotifyArbitratedMatchEnd )
		pFnNotifyArbitratedMatchEnd = (UFunction*) UObject::GObjObjects()->Data[ 21055 ];

	AGameInfo_execNotifyArbitratedMatchEnd_Parms NotifyArbitratedMatchEnd_Parms;

	this->ProcessEvent ( pFnNotifyArbitratedMatchEnd, &NotifyArbitratedMatchEnd_Parms, NULL );
};

// Function Engine.GameInfo.MatchIsInProgress
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::MatchIsInProgress ( )
{
	static UFunction* pFnMatchIsInProgress = NULL;

	if ( ! pFnMatchIsInProgress )
		pFnMatchIsInProgress = (UFunction*) UObject::GObjObjects()->Data[ 21031 ];

	AGameInfo_execMatchIsInProgress_Parms MatchIsInProgress_Parms;

	this->ProcessEvent ( pFnMatchIsInProgress, &MatchIsInProgress_Parms, NULL );

	return MatchIsInProgress_Parms.ReturnValue;
};

// Function Engine.GameInfo.ArbitrationRegistrationComplete
// [0x00020000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void AGameInfo::ArbitrationRegistrationComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnArbitrationRegistrationComplete = NULL;

	if ( ! pFnArbitrationRegistrationComplete )
		pFnArbitrationRegistrationComplete = (UFunction*) UObject::GObjObjects()->Data[ 21028 ];

	AGameInfo_execArbitrationRegistrationComplete_Parms ArbitrationRegistrationComplete_Parms;
	memcpy ( &ArbitrationRegistrationComplete_Parms.SessionName, &SessionName, 0x8 );
	ArbitrationRegistrationComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnArbitrationRegistrationComplete, &ArbitrationRegistrationComplete_Parms, NULL );
};

// Function Engine.GameInfo.RegisterServerForArbitration
// [0x00020000] 
// Parameters infos:

void AGameInfo::RegisterServerForArbitration ( )
{
	static UFunction* pFnRegisterServerForArbitration = NULL;

	if ( ! pFnRegisterServerForArbitration )
		pFnRegisterServerForArbitration = (UFunction*) UObject::GObjObjects()->Data[ 21027 ];

	AGameInfo_execRegisterServerForArbitration_Parms RegisterServerForArbitration_Parms;

	this->ProcessEvent ( pFnRegisterServerForArbitration, &RegisterServerForArbitration_Parms, NULL );
};

// Function Engine.GameInfo.StartArbitratedMatch
// [0x00020000] 
// Parameters infos:

void AGameInfo::StartArbitratedMatch ( )
{
	static UFunction* pFnStartArbitratedMatch = NULL;

	if ( ! pFnStartArbitratedMatch )
		pFnStartArbitratedMatch = (UFunction*) UObject::GObjObjects()->Data[ 21026 ];

	AGameInfo_execStartArbitratedMatch_Parms StartArbitratedMatch_Parms;

	this->ProcessEvent ( pFnStartArbitratedMatch, &StartArbitratedMatch_Parms, NULL );
};

// Function Engine.GameInfo.StartArbitrationRegistration
// [0x00020000] 
// Parameters infos:

void AGameInfo::StartArbitrationRegistration ( )
{
	static UFunction* pFnStartArbitrationRegistration = NULL;

	if ( ! pFnStartArbitrationRegistration )
		pFnStartArbitrationRegistration = (UFunction*) UObject::GObjObjects()->Data[ 21025 ];

	AGameInfo_execStartArbitrationRegistration_Parms StartArbitrationRegistration_Parms;

	this->ProcessEvent ( pFnStartArbitrationRegistration, &StartArbitrationRegistration_Parms, NULL );
};

// Function Engine.GameInfo.ProcessClientRegistrationCompletion
// [0x00020000] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void AGameInfo::ProcessClientRegistrationCompletion ( class APlayerController* PC, unsigned long bWasSuccessful )
{
	static UFunction* pFnProcessClientRegistrationCompletion = NULL;

	if ( ! pFnProcessClientRegistrationCompletion )
		pFnProcessClientRegistrationCompletion = (UFunction*) UObject::GObjObjects()->Data[ 21022 ];

	AGameInfo_execProcessClientRegistrationCompletion_Parms ProcessClientRegistrationCompletion_Parms;
	ProcessClientRegistrationCompletion_Parms.PC = PC;
	ProcessClientRegistrationCompletion_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnProcessClientRegistrationCompletion, &ProcessClientRegistrationCompletion_Parms, NULL );
};

// Function Engine.GameInfo.UpdateGameSettingsCounts
// [0x00020002] 
// Parameters infos:

void AGameInfo::UpdateGameSettingsCounts ( )
{
	static UFunction* pFnUpdateGameSettingsCounts = NULL;

	if ( ! pFnUpdateGameSettingsCounts )
		pFnUpdateGameSettingsCounts = (UFunction*) UObject::GObjObjects()->Data[ 21020 ];

	AGameInfo_execUpdateGameSettingsCounts_Parms UpdateGameSettingsCounts_Parms;

	this->ProcessEvent ( pFnUpdateGameSettingsCounts, &UpdateGameSettingsCounts_Parms, NULL );
};

// Function Engine.GameInfo.SetSeamlessTravelViewTarget
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::SetSeamlessTravelViewTarget ( class APlayerController* PC )
{
	static UFunction* pFnSetSeamlessTravelViewTarget = NULL;

	if ( ! pFnSetSeamlessTravelViewTarget )
		pFnSetSeamlessTravelViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 21018 ];

	AGameInfo_execSetSeamlessTravelViewTarget_Parms SetSeamlessTravelViewTarget_Parms;
	SetSeamlessTravelViewTarget_Parms.PC = PC;

	this->ProcessEvent ( pFnSetSeamlessTravelViewTarget, &SetSeamlessTravelViewTarget_Parms, NULL );
};

// Function Engine.GameInfo.HandleSeamlessTravelPlayer
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// class AController*             C                              ( CPF_Parm | CPF_OutParm )

void AGameInfo::eventHandleSeamlessTravelPlayer ( class AController** C )
{
	static UFunction* pFnHandleSeamlessTravelPlayer = NULL;

	if ( ! pFnHandleSeamlessTravelPlayer )
		pFnHandleSeamlessTravelPlayer = (UFunction*) UObject::GObjObjects()->Data[ 21010 ];

	AGameInfo_eventHandleSeamlessTravelPlayer_Parms HandleSeamlessTravelPlayer_Parms;

	this->ProcessEvent ( pFnHandleSeamlessTravelPlayer, &HandleSeamlessTravelPlayer_Parms, NULL );

	if ( C )
		*C = HandleSeamlessTravelPlayer_Parms.C;
};

// Function Engine.GameInfo.UpdateGameSettings
// [0x00020000] 
// Parameters infos:

void AGameInfo::UpdateGameSettings ( )
{
	static UFunction* pFnUpdateGameSettings = NULL;

	if ( ! pFnUpdateGameSettings )
		pFnUpdateGameSettings = (UFunction*) UObject::GObjObjects()->Data[ 21009 ];

	AGameInfo_execUpdateGameSettings_Parms UpdateGameSettings_Parms;

	this->ProcessEvent ( pFnUpdateGameSettings, &UpdateGameSettings_Parms, NULL );
};

// Function Engine.GameInfo.PostSeamlessTravel
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventPostSeamlessTravel ( )
{
	static UFunction* pFnPostSeamlessTravel = NULL;

	if ( ! pFnPostSeamlessTravel )
		pFnPostSeamlessTravel = (UFunction*) UObject::GObjObjects()->Data[ 21007 ];

	AGameInfo_eventPostSeamlessTravel_Parms PostSeamlessTravel_Parms;

	this->ProcessEvent ( pFnPostSeamlessTravel, &PostSeamlessTravel_Parms, NULL );
};

// Function Engine.GameInfo.SwapPlayerControllers
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APlayerController*       OldPC                          ( CPF_Parm )
// class APlayerController*       NewPC                          ( CPF_Parm )

void AGameInfo::SwapPlayerControllers ( class APlayerController* OldPC, class APlayerController* NewPC )
{
	static UFunction* pFnSwapPlayerControllers = NULL;

	if ( ! pFnSwapPlayerControllers )
		pFnSwapPlayerControllers = (UFunction*) UObject::GObjObjects()->Data[ 21004 ];

	AGameInfo_execSwapPlayerControllers_Parms SwapPlayerControllers_Parms;
	SwapPlayerControllers_Parms.OldPC = OldPC;
	SwapPlayerControllers_Parms.NewPC = NewPC;

	pFnSwapPlayerControllers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwapPlayerControllers, &SwapPlayerControllers_Parms, NULL );

	pFnSwapPlayerControllers->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.GetSeamlessTravelActorList
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bToEntry                       ( CPF_Parm )
// struct TArray<class AActor*>   ActorList                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AGameInfo::eventGetSeamlessTravelActorList ( unsigned long bToEntry, struct TArray<class AActor*>* ActorList )
{
	static UFunction* pFnGetSeamlessTravelActorList = NULL;

	if ( ! pFnGetSeamlessTravelActorList )
		pFnGetSeamlessTravelActorList = (UFunction*) UObject::GObjObjects()->Data[ 20999 ];

	AGameInfo_eventGetSeamlessTravelActorList_Parms GetSeamlessTravelActorList_Parms;
	GetSeamlessTravelActorList_Parms.bToEntry = bToEntry;

	this->ProcessEvent ( pFnGetSeamlessTravelActorList, &GetSeamlessTravelActorList_Parms, NULL );

	if ( ActorList )
		memcpy ( ActorList, &GetSeamlessTravelActorList_Parms.ActorList, 0x10 );
};

// Function Engine.GameInfo.OverridePRI
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class APlayerReplicationInfo*  OldPRI                         ( CPF_Parm )

void AGameInfo::OverridePRI ( class APlayerController* PC, class APlayerReplicationInfo* OldPRI )
{
	static UFunction* pFnOverridePRI = NULL;

	if ( ! pFnOverridePRI )
		pFnOverridePRI = (UFunction*) UObject::GObjObjects()->Data[ 20996 ];

	AGameInfo_execOverridePRI_Parms OverridePRI_Parms;
	OverridePRI_Parms.PC = PC;
	OverridePRI_Parms.OldPRI = OldPRI;

	this->ProcessEvent ( pFnOverridePRI, &OverridePRI_Parms, NULL );
};

// Function Engine.GameInfo.FindInactivePRI
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       PC                             ( CPF_Parm )

bool AGameInfo::FindInactivePRI ( class APlayerController* PC )
{
	static UFunction* pFnFindInactivePRI = NULL;

	if ( ! pFnFindInactivePRI )
		pFnFindInactivePRI = (UFunction*) UObject::GObjObjects()->Data[ 20986 ];

	AGameInfo_execFindInactivePRI_Parms FindInactivePRI_Parms;
	FindInactivePRI_Parms.PC = PC;

	this->ProcessEvent ( pFnFindInactivePRI, &FindInactivePRI_Parms, NULL );

	return FindInactivePRI_Parms.ReturnValue;
};

// Function Engine.GameInfo.AddInactivePRI
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::AddInactivePRI ( class APlayerReplicationInfo* PRI, class APlayerController* PC )
{
	static UFunction* pFnAddInactivePRI = NULL;

	if ( ! pFnAddInactivePRI )
		pFnAddInactivePRI = (UFunction*) UObject::GObjObjects()->Data[ 20976 ];

	AGameInfo_execAddInactivePRI_Parms AddInactivePRI_Parms;
	AddInactivePRI_Parms.PRI = PRI;
	AddInactivePRI_Parms.PC = PC;

	this->ProcessEvent ( pFnAddInactivePRI, &AddInactivePRI_Parms, NULL );
};

// Function Engine.GameInfo.PostCommitMapChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventPostCommitMapChange ( )
{
	static UFunction* pFnPostCommitMapChange = NULL;

	if ( ! pFnPostCommitMapChange )
		pFnPostCommitMapChange = (UFunction*) UObject::GObjObjects()->Data[ 20975 ];

	AGameInfo_eventPostCommitMapChange_Parms PostCommitMapChange_Parms;

	this->ProcessEvent ( pFnPostCommitMapChange, &PostCommitMapChange_Parms, NULL );
};

// Function Engine.GameInfo.PreCommitMapChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FString                 PreviousMapName                ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 NextMapName                    ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::eventPreCommitMapChange ( struct FString PreviousMapName, struct FString NextMapName )
{
	static UFunction* pFnPreCommitMapChange = NULL;

	if ( ! pFnPreCommitMapChange )
		pFnPreCommitMapChange = (UFunction*) UObject::GObjObjects()->Data[ 20972 ];

	AGameInfo_eventPreCommitMapChange_Parms PreCommitMapChange_Parms;
	memcpy ( &PreCommitMapChange_Parms.PreviousMapName, &PreviousMapName, 0x10 );
	memcpy ( &PreCommitMapChange_Parms.NextMapName, &NextMapName, 0x10 );

	this->ProcessEvent ( pFnPreCommitMapChange, &PreCommitMapChange_Parms, NULL );
};

// Function Engine.GameInfo.AllowPausing
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       PC                             ( CPF_OptionalParm | CPF_Parm )

bool AGameInfo::AllowPausing ( class APlayerController* PC )
{
	static UFunction* pFnAllowPausing = NULL;

	if ( ! pFnAllowPausing )
		pFnAllowPausing = (UFunction*) UObject::GObjObjects()->Data[ 20967 ];

	AGameInfo_execAllowPausing_Parms AllowPausing_Parms;
	AllowPausing_Parms.PC = PC;

	this->ProcessEvent ( pFnAllowPausing, &AllowPausing_Parms, NULL );

	return AllowPausing_Parms.ReturnValue;
};

// Function Engine.GameInfo.AllowCheats
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )

bool AGameInfo::AllowCheats ( class APlayerController* P )
{
	static UFunction* pFnAllowCheats = NULL;

	if ( ! pFnAllowCheats )
		pFnAllowCheats = (UFunction*) UObject::GObjObjects()->Data[ 10122 ];

	AGameInfo_execAllowCheats_Parms AllowCheats_Parms;
	AllowCheats_Parms.P = P;

	this->ProcessEvent ( pFnAllowCheats, &AllowCheats_Parms, NULL );

	return AllowCheats_Parms.ReturnValue;
};

// Function Engine.GameInfo.AllowMutator
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MutatorClassName               ( CPF_Parm | CPF_NeedCtorLink )

bool AGameInfo::AllowMutator ( struct FString MutatorClassName )
{
	static UFunction* pFnAllowMutator = NULL;

	if ( ! pFnAllowMutator )
		pFnAllowMutator = (UFunction*) UObject::GObjObjects()->Data[ 20963 ];

	AGameInfo_execAllowMutator_Parms AllowMutator_Parms;
	memcpy ( &AllowMutator_Parms.MutatorClassName, &MutatorClassName, 0x10 );

	this->ProcessEvent ( pFnAllowMutator, &AllowMutator_Parms, NULL );

	return AllowMutator_Parms.ReturnValue;
};

// Function Engine.GameInfo.PlayerCanRestart
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       aPlayer                        ( CPF_Parm )

bool AGameInfo::PlayerCanRestart ( class APlayerController* aPlayer )
{
	static UFunction* pFnPlayerCanRestart = NULL;

	if ( ! pFnPlayerCanRestart )
		pFnPlayerCanRestart = (UFunction*) UObject::GObjObjects()->Data[ 11299 ];

	AGameInfo_execPlayerCanRestart_Parms PlayerCanRestart_Parms;
	PlayerCanRestart_Parms.aPlayer = aPlayer;

	this->ProcessEvent ( pFnPlayerCanRestart, &PlayerCanRestart_Parms, NULL );

	return PlayerCanRestart_Parms.ReturnValue;
};

// Function Engine.GameInfo.PlayerCanRestartGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       aPlayer                        ( CPF_Parm )

bool AGameInfo::PlayerCanRestartGame ( class APlayerController* aPlayer )
{
	static UFunction* pFnPlayerCanRestartGame = NULL;

	if ( ! pFnPlayerCanRestartGame )
		pFnPlayerCanRestartGame = (UFunction*) UObject::GObjObjects()->Data[ 11249 ];

	AGameInfo_execPlayerCanRestartGame_Parms PlayerCanRestartGame_Parms;
	PlayerCanRestartGame_Parms.aPlayer = aPlayer;

	this->ProcessEvent ( pFnPlayerCanRestartGame, &PlayerCanRestartGame_Parms, NULL );

	return PlayerCanRestartGame_Parms.ReturnValue;
};

// Function Engine.GameInfo.KillBots
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void AGameInfo::KillBots ( )
{
	static UFunction* pFnKillBots = NULL;

	if ( ! pFnKillBots )
		pFnKillBots = (UFunction*) UObject::GObjObjects()->Data[ 20960 ];

	AGameInfo_execKillBots_Parms KillBots_Parms;

	this->ProcessEvent ( pFnKillBots, &KillBots_Parms, NULL );
};

// Function Engine.GameInfo.DriverLeftVehicle
// [0x00020002] 
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

void AGameInfo::DriverLeftVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnDriverLeftVehicle = NULL;

	if ( ! pFnDriverLeftVehicle )
		pFnDriverLeftVehicle = (UFunction*) UObject::GObjObjects()->Data[ 20957 ];

	AGameInfo_execDriverLeftVehicle_Parms DriverLeftVehicle_Parms;
	DriverLeftVehicle_Parms.V = V;
	DriverLeftVehicle_Parms.P = P;

	this->ProcessEvent ( pFnDriverLeftVehicle, &DriverLeftVehicle_Parms, NULL );
};

// Function Engine.GameInfo.CanLeaveVehicle
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

bool AGameInfo::CanLeaveVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnCanLeaveVehicle = NULL;

	if ( ! pFnCanLeaveVehicle )
		pFnCanLeaveVehicle = (UFunction*) UObject::GObjObjects()->Data[ 20951 ];

	AGameInfo_execCanLeaveVehicle_Parms CanLeaveVehicle_Parms;
	CanLeaveVehicle_Parms.V = V;
	CanLeaveVehicle_Parms.P = P;

	this->ProcessEvent ( pFnCanLeaveVehicle, &CanLeaveVehicle_Parms, NULL );

	return CanLeaveVehicle_Parms.ReturnValue;
};

// Function Engine.GameInfo.DriverEnteredVehicle
// [0x00020002] 
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

void AGameInfo::DriverEnteredVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnDriverEnteredVehicle = NULL;

	if ( ! pFnDriverEnteredVehicle )
		pFnDriverEnteredVehicle = (UFunction*) UObject::GObjObjects()->Data[ 20948 ];

	AGameInfo_execDriverEnteredVehicle_Parms DriverEnteredVehicle_Parms;
	DriverEnteredVehicle_Parms.V = V;
	DriverEnteredVehicle_Parms.P = P;

	this->ProcessEvent ( pFnDriverEnteredVehicle, &DriverEnteredVehicle_Parms, NULL );
};

// Function Engine.GameInfo.ModifyScoreKill
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Other                          ( CPF_Parm )

void AGameInfo::ModifyScoreKill ( class AController* Killer, class AController* Other )
{
	static UFunction* pFnModifyScoreKill = NULL;

	if ( ! pFnModifyScoreKill )
		pFnModifyScoreKill = (UFunction*) UObject::GObjObjects()->Data[ 20945 ];

	AGameInfo_execModifyScoreKill_Parms ModifyScoreKill_Parms;
	ModifyScoreKill_Parms.Killer = Killer;
	ModifyScoreKill_Parms.Other = Other;

	this->ProcessEvent ( pFnModifyScoreKill, &ModifyScoreKill_Parms, NULL );
};

// Function Engine.GameInfo.ScoreKill
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Other                          ( CPF_Parm )

void AGameInfo::ScoreKill ( class AController* Killer, class AController* Other )
{
	static UFunction* pFnScoreKill = NULL;

	if ( ! pFnScoreKill )
		pFnScoreKill = (UFunction*) UObject::GObjObjects()->Data[ 20940 ];

	AGameInfo_execScoreKill_Parms ScoreKill_Parms;
	ScoreKill_Parms.Killer = Killer;
	ScoreKill_Parms.Other = Other;

	this->ProcessEvent ( pFnScoreKill, &ScoreKill_Parms, NULL );
};

// Function Engine.GameInfo.CheckScore
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Scorer                         ( CPF_Parm )

bool AGameInfo::CheckScore ( class APlayerReplicationInfo* Scorer )
{
	static UFunction* pFnCheckScore = NULL;

	if ( ! pFnCheckScore )
		pFnCheckScore = (UFunction*) UObject::GObjObjects()->Data[ 20937 ];

	AGameInfo_execCheckScore_Parms CheckScore_Parms;
	CheckScore_Parms.Scorer = Scorer;

	this->ProcessEvent ( pFnCheckScore, &CheckScore_Parms, NULL );

	return CheckScore_Parms.ReturnValue;
};

// Function Engine.GameInfo.ScoreObjective
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Scorer                         ( CPF_Parm )
// int                            Score                          ( CPF_Parm )

void AGameInfo::ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score )
{
	static UFunction* pFnScoreObjective = NULL;

	if ( ! pFnScoreObjective )
		pFnScoreObjective = (UFunction*) UObject::GObjObjects()->Data[ 20934 ];

	AGameInfo_execScoreObjective_Parms ScoreObjective_Parms;
	ScoreObjective_Parms.Scorer = Scorer;
	ScoreObjective_Parms.Score = Score;

	this->ProcessEvent ( pFnScoreObjective, &ScoreObjective_Parms, NULL );
};

// Function Engine.GameInfo.AddObjectiveScore
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Scorer                         ( CPF_Parm )
// int                            Score                          ( CPF_Parm )

void AGameInfo::AddObjectiveScore ( class APlayerReplicationInfo* Scorer, int Score )
{
	static UFunction* pFnAddObjectiveScore = NULL;

	if ( ! pFnAddObjectiveScore )
		pFnAddObjectiveScore = (UFunction*) UObject::GObjObjects()->Data[ 20931 ];

	AGameInfo_execAddObjectiveScore_Parms AddObjectiveScore_Parms;
	AddObjectiveScore_Parms.Scorer = Scorer;
	AddObjectiveScore_Parms.Score = Score;

	this->ProcessEvent ( pFnAddObjectiveScore, &AddObjectiveScore_Parms, NULL );
};

// Function Engine.GameInfo.RatePlayerStart
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerStart*            P                              ( CPF_Parm )
// unsigned char                  Team                           ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )

float AGameInfo::RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player )
{
	static UFunction* pFnRatePlayerStart = NULL;

	if ( ! pFnRatePlayerStart )
		pFnRatePlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 20922 ];

	AGameInfo_execRatePlayerStart_Parms RatePlayerStart_Parms;
	RatePlayerStart_Parms.P = P;
	RatePlayerStart_Parms.Team = Team;
	RatePlayerStart_Parms.Player = Player;

	this->ProcessEvent ( pFnRatePlayerStart, &RatePlayerStart_Parms, NULL );

	return RatePlayerStart_Parms.ReturnValue;
};

// Function Engine.GameInfo.ChoosePlayerStart
// [0x00024002] 
// Parameters infos:
// class APlayerStart*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )
// unsigned char                  InTeam                         ( CPF_OptionalParm | CPF_Parm )

class APlayerStart* AGameInfo::ChoosePlayerStart ( class AController* Player, unsigned char InTeam )
{
	static UFunction* pFnChoosePlayerStart = NULL;

	if ( ! pFnChoosePlayerStart )
		pFnChoosePlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 20913 ];

	AGameInfo_execChoosePlayerStart_Parms ChoosePlayerStart_Parms;
	ChoosePlayerStart_Parms.Player = Player;
	ChoosePlayerStart_Parms.InTeam = InTeam;

	this->ProcessEvent ( pFnChoosePlayerStart, &ChoosePlayerStart_Parms, NULL );

	return ChoosePlayerStart_Parms.ReturnValue;
};

// Function Engine.GameInfo.FindPlayerStart
// [0x00024002] 
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )
// unsigned char                  InTeam                         ( CPF_OptionalParm | CPF_Parm )
// struct FString                 IncomingName                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

class ANavigationPoint* AGameInfo::FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName )
{
	static UFunction* pFnFindPlayerStart = NULL;

	if ( ! pFnFindPlayerStart )
		pFnFindPlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 20903 ];

	AGameInfo_execFindPlayerStart_Parms FindPlayerStart_Parms;
	FindPlayerStart_Parms.Player = Player;
	FindPlayerStart_Parms.InTeam = InTeam;
	memcpy ( &FindPlayerStart_Parms.IncomingName, &IncomingName, 0x10 );

	this->ProcessEvent ( pFnFindPlayerStart, &FindPlayerStart_Parms, NULL );

	return FindPlayerStart_Parms.ReturnValue;
};

// Function Engine.GameInfo.ShouldSpawnAtStartSpot
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )

bool AGameInfo::ShouldSpawnAtStartSpot ( class AController* Player )
{
	static UFunction* pFnShouldSpawnAtStartSpot = NULL;

	if ( ! pFnShouldSpawnAtStartSpot )
		pFnShouldSpawnAtStartSpot = (UFunction*) UObject::GObjObjects()->Data[ 20899 ];

	AGameInfo_execShouldSpawnAtStartSpot_Parms ShouldSpawnAtStartSpot_Parms;
	ShouldSpawnAtStartSpot_Parms.Player = Player;

	this->ProcessEvent ( pFnShouldSpawnAtStartSpot, &ShouldSpawnAtStartSpot_Parms, NULL );

	return ShouldSpawnAtStartSpot_Parms.ReturnValue;
};

// Function Engine.GameInfo.EndLogging
// [0x00020000] 
// Parameters infos:
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::EndLogging ( struct FString Reason )
{
	static UFunction* pFnEndLogging = NULL;

	if ( ! pFnEndLogging )
		pFnEndLogging = (UFunction*) UObject::GObjObjects()->Data[ 20897 ];

	AGameInfo_execEndLogging_Parms EndLogging_Parms;
	memcpy ( &EndLogging_Parms.Reason, &Reason, 0x10 );

	this->ProcessEvent ( pFnEndLogging, &EndLogging_Parms, NULL );
};

// Function Engine.GameInfo.EndOnlineGame
// [0x00020002] 
// Parameters infos:

void AGameInfo::EndOnlineGame ( )
{
	static UFunction* pFnEndOnlineGame = NULL;

	if ( ! pFnEndOnlineGame )
		pFnEndOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 20895 ];

	AGameInfo_execEndOnlineGame_Parms EndOnlineGame_Parms;

	this->ProcessEvent ( pFnEndOnlineGame, &EndOnlineGame_Parms, NULL );
};

// Function Engine.GameInfo.PerformEndGameHandling
// [0x00020002] 
// Parameters infos:

void AGameInfo::PerformEndGameHandling ( )
{
	static UFunction* pFnPerformEndGameHandling = NULL;

	if ( ! pFnPerformEndGameHandling )
		pFnPerformEndGameHandling = (UFunction*) UObject::GObjObjects()->Data[ 20894 ];

	AGameInfo_execPerformEndGameHandling_Parms PerformEndGameHandling_Parms;

	this->ProcessEvent ( pFnPerformEndGameHandling, &PerformEndGameHandling_Parms, NULL );
};

// Function Engine.GameInfo.EndGame
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pFnEndGame = NULL;

	if ( ! pFnEndGame )
		pFnEndGame = (UFunction*) UObject::GObjObjects()->Data[ 20891 ];

	AGameInfo_execEndGame_Parms EndGame_Parms;
	EndGame_Parms.Winner = Winner;
	memcpy ( &EndGame_Parms.Reason, &Reason, 0x10 );

	this->ProcessEvent ( pFnEndGame, &EndGame_Parms, NULL );
};

// Function Engine.GameInfo.WriteOnlinePlayerScores
// [0x00020002] 
// Parameters infos:

void AGameInfo::WriteOnlinePlayerScores ( )
{
	static UFunction* pFnWriteOnlinePlayerScores = NULL;

	if ( ! pFnWriteOnlinePlayerScores )
		pFnWriteOnlinePlayerScores = (UFunction*) UObject::GObjObjects()->Data[ 20888 ];

	AGameInfo_execWriteOnlinePlayerScores_Parms WriteOnlinePlayerScores_Parms;

	this->ProcessEvent ( pFnWriteOnlinePlayerScores, &WriteOnlinePlayerScores_Parms, NULL );
};

// Function Engine.GameInfo.WriteOnlineStats
// [0x00020002] 
// Parameters infos:

void AGameInfo::WriteOnlineStats ( )
{
	static UFunction* pFnWriteOnlineStats = NULL;

	if ( ! pFnWriteOnlineStats )
		pFnWriteOnlineStats = (UFunction*) UObject::GObjObjects()->Data[ 20885 ];

	AGameInfo_execWriteOnlineStats_Parms WriteOnlineStats_Parms;

	this->ProcessEvent ( pFnWriteOnlineStats, &WriteOnlineStats_Parms, NULL );
};

// Function Engine.GameInfo.CheckEndGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )

bool AGameInfo::CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pFnCheckEndGame = NULL;

	if ( ! pFnCheckEndGame )
		pFnCheckEndGame = (UFunction*) UObject::GObjObjects()->Data[ 20880 ];

	AGameInfo_execCheckEndGame_Parms CheckEndGame_Parms;
	CheckEndGame_Parms.Winner = Winner;
	memcpy ( &CheckEndGame_Parms.Reason, &Reason, 0x10 );

	this->ProcessEvent ( pFnCheckEndGame, &CheckEndGame_Parms, NULL );

	return CheckEndGame_Parms.ReturnValue;
};

// Function Engine.GameInfo.CheckModifiedEndGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )

bool AGameInfo::CheckModifiedEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pFnCheckModifiedEndGame = NULL;

	if ( ! pFnCheckModifiedEndGame )
		pFnCheckModifiedEndGame = (UFunction*) UObject::GObjObjects()->Data[ 20874 ];

	AGameInfo_execCheckModifiedEndGame_Parms CheckModifiedEndGame_Parms;
	CheckModifiedEndGame_Parms.Winner = Winner;
	memcpy ( &CheckModifiedEndGame_Parms.Reason, &Reason, 0x10 );

	this->ProcessEvent ( pFnCheckModifiedEndGame, &CheckModifiedEndGame_Parms, NULL );

	return CheckModifiedEndGame_Parms.ReturnValue;
};

// Function Engine.GameInfo.BroadcastLocalizedTeam
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            TeamIndex                      ( CPF_Parm )
// class AActor*                  Sender                         ( CPF_Parm )
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::eventBroadcastLocalizedTeam ( int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnBroadcastLocalizedTeam = NULL;

	if ( ! pFnBroadcastLocalizedTeam )
		pFnBroadcastLocalizedTeam = (UFunction*) UObject::GObjObjects()->Data[ 20866 ];

	AGameInfo_eventBroadcastLocalizedTeam_Parms BroadcastLocalizedTeam_Parms;
	BroadcastLocalizedTeam_Parms.TeamIndex = TeamIndex;
	BroadcastLocalizedTeam_Parms.Sender = Sender;
	BroadcastLocalizedTeam_Parms.Message = Message;
	BroadcastLocalizedTeam_Parms.Switch = Switch;
	BroadcastLocalizedTeam_Parms.RelatedPRI = RelatedPRI;
	BroadcastLocalizedTeam_Parms.RelatedPRI01 = RelatedPRI01;
	BroadcastLocalizedTeam_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnBroadcastLocalizedTeam, &BroadcastLocalizedTeam_Parms, NULL );
};

// Function Engine.GameInfo.BroadcastLocalized
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Sender                         ( CPF_Parm )
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::eventBroadcastLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnBroadcastLocalized = NULL;

	if ( ! pFnBroadcastLocalized )
		pFnBroadcastLocalized = (UFunction*) UObject::GObjObjects()->Data[ 20859 ];

	AGameInfo_eventBroadcastLocalized_Parms BroadcastLocalized_Parms;
	BroadcastLocalized_Parms.Sender = Sender;
	BroadcastLocalized_Parms.Message = Message;
	BroadcastLocalized_Parms.Switch = Switch;
	BroadcastLocalized_Parms.RelatedPRI = RelatedPRI;
	BroadcastLocalized_Parms.RelatedPRI01 = RelatedPRI01;
	BroadcastLocalized_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnBroadcastLocalized, &BroadcastLocalized_Parms, NULL );
};

// Function Engine.GameInfo.BroadcastTeam
// [0x00024002] 
// Parameters infos:
// class AController*             Sender                         ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::BroadcastTeam ( class AController* Sender, struct FString msg, struct FName Type )
{
	static UFunction* pFnBroadcastTeam = NULL;

	if ( ! pFnBroadcastTeam )
		pFnBroadcastTeam = (UFunction*) UObject::GObjObjects()->Data[ 20855 ];

	AGameInfo_execBroadcastTeam_Parms BroadcastTeam_Parms;
	BroadcastTeam_Parms.Sender = Sender;
	memcpy ( &BroadcastTeam_Parms.msg, &msg, 0x10 );
	memcpy ( &BroadcastTeam_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnBroadcastTeam, &BroadcastTeam_Parms, NULL );
};

// Function Engine.GameInfo.Broadcast
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Sender                         ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::eventBroadcast ( class AActor* Sender, struct FString msg, struct FName Type )
{
	static UFunction* pFnBroadcast = NULL;

	if ( ! pFnBroadcast )
		pFnBroadcast = (UFunction*) UObject::GObjObjects()->Data[ 20851 ];

	AGameInfo_eventBroadcast_Parms Broadcast_Parms;
	Broadcast_Parms.Sender = Sender;
	memcpy ( &Broadcast_Parms.msg, &msg, 0x10 );
	memcpy ( &Broadcast_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnBroadcast, &Broadcast_Parms, NULL );
};

// Function Engine.GameInfo.RestartGame
// [0x00020002] 
// Parameters infos:

void AGameInfo::RestartGame ( )
{
	static UFunction* pFnRestartGame = NULL;

	if ( ! pFnRestartGame )
		pFnRestartGame = (UFunction*) UObject::GObjObjects()->Data[ 20840 ];

	AGameInfo_execRestartGame_Parms RestartGame_Parms;

	this->ProcessEvent ( pFnRestartGame, &RestartGame_Parms, NULL );
};

// Function Engine.GameInfo.GetTravelType
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::GetTravelType ( )
{
	static UFunction* pFnGetTravelType = NULL;

	if ( ! pFnGetTravelType )
		pFnGetTravelType = (UFunction*) UObject::GObjObjects()->Data[ 20838 ];

	AGameInfo_execGetTravelType_Parms GetTravelType_Parms;

	this->ProcessEvent ( pFnGetTravelType, &GetTravelType_Parms, NULL );

	return GetTravelType_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetNextMap
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AGameInfo::GetNextMap ( )
{
	static UFunction* pFnGetNextMap = NULL;

	if ( ! pFnGetNextMap )
		pFnGetNextMap = (UFunction*) UObject::GObjObjects()->Data[ 20836 ];

	AGameInfo_execGetNextMap_Parms GetNextMap_Parms;

	this->ProcessEvent ( pFnGetNextMap, &GetNextMap_Parms, NULL );

	return GetNextMap_Parms.ReturnValue;
};

// Function Engine.GameInfo.SendPlayer
// [0x00020002] 
// Parameters infos:
// class APlayerController*       aPlayer                        ( CPF_Parm )
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::SendPlayer ( class APlayerController* aPlayer, struct FString URL )
{
	static UFunction* pFnSendPlayer = NULL;

	if ( ! pFnSendPlayer )
		pFnSendPlayer = (UFunction*) UObject::GObjObjects()->Data[ 20833 ];

	AGameInfo_execSendPlayer_Parms SendPlayer_Parms;
	SendPlayer_Parms.aPlayer = aPlayer;
	memcpy ( &SendPlayer_Parms.URL, &URL, 0x10 );

	this->ProcessEvent ( pFnSendPlayer, &SendPlayer_Parms, NULL );
};

// Function Engine.GameInfo.PickTeam
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Current                        ( CPF_Parm )
// class AController*             C                              ( CPF_Parm )

unsigned char AGameInfo::PickTeam ( unsigned char Current, class AController* C )
{
	static UFunction* pFnPickTeam = NULL;

	if ( ! pFnPickTeam )
		pFnPickTeam = (UFunction*) UObject::GObjObjects()->Data[ 20829 ];

	AGameInfo_execPickTeam_Parms PickTeam_Parms;
	PickTeam_Parms.Current = Current;
	PickTeam_Parms.C = C;

	this->ProcessEvent ( pFnPickTeam, &PickTeam_Parms, NULL );

	return PickTeam_Parms.ReturnValue;
};

// Function Engine.GameInfo.ChangeTeam
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Other                          ( CPF_Parm )
// int                            N                              ( CPF_Parm )
// unsigned long                  bNewTeam                       ( CPF_Parm )

bool AGameInfo::ChangeTeam ( class AController* Other, int N, unsigned long bNewTeam )
{
	static UFunction* pFnChangeTeam = NULL;

	if ( ! pFnChangeTeam )
		pFnChangeTeam = (UFunction*) UObject::GObjObjects()->Data[ 10798 ];

	AGameInfo_execChangeTeam_Parms ChangeTeam_Parms;
	ChangeTeam_Parms.Other = Other;
	ChangeTeam_Parms.N = N;
	ChangeTeam_Parms.bNewTeam = bNewTeam;

	this->ProcessEvent ( pFnChangeTeam, &ChangeTeam_Parms, NULL );

	return ChangeTeam_Parms.ReturnValue;
};

// Function Engine.GameInfo.ChangeName
// [0x00020002] 
// Parameters infos:
// class AController*             Other                          ( CPF_Parm )
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// unsigned long                  bNameChange                    ( CPF_Parm )

void AGameInfo::ChangeName ( class AController* Other, struct FString S, unsigned long bNameChange )
{
	static UFunction* pFnChangeName = NULL;

	if ( ! pFnChangeName )
		pFnChangeName = (UFunction*) UObject::GObjObjects()->Data[ 20822 ];

	AGameInfo_execChangeName_Parms ChangeName_Parms;
	ChangeName_Parms.Other = Other;
	memcpy ( &ChangeName_Parms.S, &S, 0x10 );
	ChangeName_Parms.bNameChange = bNameChange;

	this->ProcessEvent ( pFnChangeName, &ChangeName_Parms, NULL );
};

// Function Engine.GameInfo.DiscardInventory
// [0x00024002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )
// class AController*             Killer                         ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::DiscardInventory ( class APawn* Other, class AController* Killer )
{
	static UFunction* pFnDiscardInventory = NULL;

	if ( ! pFnDiscardInventory )
		pFnDiscardInventory = (UFunction*) UObject::GObjObjects()->Data[ 20819 ];

	AGameInfo_execDiscardInventory_Parms DiscardInventory_Parms;
	DiscardInventory_Parms.Other = Other;
	DiscardInventory_Parms.Killer = Killer;

	this->ProcessEvent ( pFnDiscardInventory, &DiscardInventory_Parms, NULL );
};

// Function Engine.GameInfo.PickupQuery
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )

bool AGameInfo::PickupQuery ( class APawn* Other, class UClass* ItemClass, class AActor* Pickup )
{
	static UFunction* pFnPickupQuery = NULL;

	if ( ! pFnPickupQuery )
		pFnPickupQuery = (UFunction*) UObject::GObjObjects()->Data[ 19035 ];

	AGameInfo_execPickupQuery_Parms PickupQuery_Parms;
	PickupQuery_Parms.Other = Other;
	PickupQuery_Parms.ItemClass = ItemClass;
	PickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnPickupQuery, &PickupQuery_Parms, NULL );

	return PickupQuery_Parms.ReturnValue;
};

// Function Engine.GameInfo.ShouldRespawn
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APickupFactory*          Other                          ( CPF_Parm )

bool AGameInfo::ShouldRespawn ( class APickupFactory* Other )
{
	static UFunction* pFnShouldRespawn = NULL;

	if ( ! pFnShouldRespawn )
		pFnShouldRespawn = (UFunction*) UObject::GObjObjects()->Data[ 20808 ];

	AGameInfo_execShouldRespawn_Parms ShouldRespawn_Parms;
	ShouldRespawn_Parms.Other = Other;

	this->ProcessEvent ( pFnShouldRespawn, &ShouldRespawn_Parms, NULL );

	return ShouldRespawn_Parms.ReturnValue;
};

// Function Engine.GameInfo.CheckRelevance
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AGameInfo::CheckRelevance ( class AActor* Other )
{
	static UFunction* pFnCheckRelevance = NULL;

	if ( ! pFnCheckRelevance )
		pFnCheckRelevance = (UFunction*) UObject::GObjObjects()->Data[ 6773 ];

	AGameInfo_execCheckRelevance_Parms CheckRelevance_Parms;
	CheckRelevance_Parms.Other = Other;

	this->ProcessEvent ( pFnCheckRelevance, &CheckRelevance_Parms, NULL );

	return CheckRelevance_Parms.ReturnValue;
};

// Function Engine.GameInfo.ReduceDamage
// [0x00420002] 
// Parameters infos:
// class APawn*                   injured                        ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// int                            Damage                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void AGameInfo::ReduceDamage ( class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum )
{
	static UFunction* pFnReduceDamage = NULL;

	if ( ! pFnReduceDamage )
		pFnReduceDamage = (UFunction*) UObject::GObjObjects()->Data[ 20792 ];

	AGameInfo_execReduceDamage_Parms ReduceDamage_Parms;
	ReduceDamage_Parms.injured = injured;
	ReduceDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &ReduceDamage_Parms.HitLocation, &HitLocation, 0xC );
	ReduceDamage_Parms.DamageType = DamageType;
	ReduceDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnReduceDamage, &ReduceDamage_Parms, NULL );

	if ( Damage )
		*Damage = ReduceDamage_Parms.Damage;

	if ( Momentum )
		memcpy ( Momentum, &ReduceDamage_Parms.Momentum, 0xC );
};

// Function Engine.GameInfo.CanSpectate
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       Viewer                         ( CPF_Parm )
// class APlayerReplicationInfo*  ViewTarget                     ( CPF_Parm )

bool AGameInfo::CanSpectate ( class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget )
{
	static UFunction* pFnCanSpectate = NULL;

	if ( ! pFnCanSpectate )
		pFnCanSpectate = (UFunction*) UObject::GObjObjects()->Data[ 11145 ];

	AGameInfo_execCanSpectate_Parms CanSpectate_Parms;
	CanSpectate_Parms.Viewer = Viewer;
	CanSpectate_Parms.ViewTarget = ViewTarget;

	this->ProcessEvent ( pFnCanSpectate, &CanSpectate_Parms, NULL );

	return CanSpectate_Parms.ReturnValue;
};

// Function Engine.GameInfo.KickBan
// [0x00020002] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::KickBan ( struct FString S )
{
	static UFunction* pFnKickBan = NULL;

	if ( ! pFnKickBan )
		pFnKickBan = (UFunction*) UObject::GObjObjects()->Data[ 20788 ];

	AGameInfo_execKickBan_Parms KickBan_Parms;
	memcpy ( &KickBan_Parms.S, &S, 0x10 );

	this->ProcessEvent ( pFnKickBan, &KickBan_Parms, NULL );
};

// Function Engine.GameInfo.Kick
// [0x00020002] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::Kick ( struct FString S )
{
	static UFunction* pFnKick = NULL;

	if ( ! pFnKick )
		pFnKick = (UFunction*) UObject::GObjObjects()->Data[ 20786 ];

	AGameInfo_execKick_Parms Kick_Parms;
	memcpy ( &Kick_Parms.S, &S, 0x10 );

	this->ProcessEvent ( pFnKick, &Kick_Parms, NULL );
};

// Function Engine.GameInfo.ParseKillMessage
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 KillerName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 VictimName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 DeathMessage                   ( CPF_Parm | CPF_NeedCtorLink )

struct FString AGameInfo::ParseKillMessage ( struct FString KillerName, struct FString VictimName, struct FString DeathMessage )
{
	static UFunction* pFnParseKillMessage = NULL;

	if ( ! pFnParseKillMessage )
		pFnParseKillMessage = (UFunction*) UObject::GObjObjects()->Data[ 20781 ];

	AGameInfo_execParseKillMessage_Parms ParseKillMessage_Parms;
	memcpy ( &ParseKillMessage_Parms.KillerName, &KillerName, 0x10 );
	memcpy ( &ParseKillMessage_Parms.VictimName, &VictimName, 0x10 );
	memcpy ( &ParseKillMessage_Parms.DeathMessage, &DeathMessage, 0x10 );

	this->ProcessEvent ( pFnParseKillMessage, &ParseKillMessage_Parms, NULL );

	return ParseKillMessage_Parms.ReturnValue;
};

// Function Engine.GameInfo.BroadcastDeathMessage
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Other                          ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void AGameInfo::BroadcastDeathMessage ( class AController* Killer, class AController* Other, class UClass* DamageType )
{
	static UFunction* pFnBroadcastDeathMessage = NULL;

	if ( ! pFnBroadcastDeathMessage )
		pFnBroadcastDeathMessage = (UFunction*) UObject::GObjObjects()->Data[ 20776 ];

	AGameInfo_execBroadcastDeathMessage_Parms BroadcastDeathMessage_Parms;
	BroadcastDeathMessage_Parms.Killer = Killer;
	BroadcastDeathMessage_Parms.Other = Other;
	BroadcastDeathMessage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnBroadcastDeathMessage, &BroadcastDeathMessage_Parms, NULL );
};

// Function Engine.GameInfo.PreventDeath
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   KilledPawn                     ( CPF_Parm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool AGameInfo::PreventDeath ( class APawn* KilledPawn, class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnPreventDeath = NULL;

	if ( ! pFnPreventDeath )
		pFnPreventDeath = (UFunction*) UObject::GObjObjects()->Data[ 20768 ];

	AGameInfo_execPreventDeath_Parms PreventDeath_Parms;
	PreventDeath_Parms.KilledPawn = KilledPawn;
	PreventDeath_Parms.Killer = Killer;
	PreventDeath_Parms.DamageType = DamageType;
	memcpy ( &PreventDeath_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPreventDeath, &PreventDeath_Parms, NULL );

	return PreventDeath_Parms.ReturnValue;
};

// Function Engine.GameInfo.Killed
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             KilledPlayer                   ( CPF_Parm )
// class APawn*                   KilledPawn                     ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void AGameInfo::Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType )
{
	static UFunction* pFnKilled = NULL;

	if ( ! pFnKilled )
		pFnKilled = (UFunction*) UObject::GObjObjects()->Data[ 20763 ];

	AGameInfo_execKilled_Parms Killed_Parms;
	Killed_Parms.Killer = Killer;
	Killed_Parms.KilledPlayer = KilledPlayer;
	Killed_Parms.KilledPawn = KilledPawn;
	Killed_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnKilled, &Killed_Parms, NULL );
};

// Function Engine.GameInfo.NotifyKilled
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Killed                         ( CPF_Parm )
// class APawn*                   KilledPawn                     ( CPF_Parm )

void AGameInfo::NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn )
{
	static UFunction* pFnNotifyKilled = NULL;

	if ( ! pFnNotifyKilled )
		pFnNotifyKilled = (UFunction*) UObject::GObjObjects()->Data[ 20758 ];

	AGameInfo_execNotifyKilled_Parms NotifyKilled_Parms;
	NotifyKilled_Parms.Killer = Killer;
	NotifyKilled_Parms.Killed = Killed;
	NotifyKilled_Parms.KilledPawn = KilledPawn;

	this->ProcessEvent ( pFnNotifyKilled, &NotifyKilled_Parms, NULL );
};

// Function Engine.GameInfo.SetPlayerDefaults
// [0x00020002] 
// Parameters infos:
// class APawn*                   PlayerPawn                     ( CPF_Parm )

void AGameInfo::SetPlayerDefaults ( class APawn* PlayerPawn )
{
	static UFunction* pFnSetPlayerDefaults = NULL;

	if ( ! pFnSetPlayerDefaults )
		pFnSetPlayerDefaults = (UFunction*) UObject::GObjObjects()->Data[ 20754 ];

	AGameInfo_execSetPlayerDefaults_Parms SetPlayerDefaults_Parms;
	SetPlayerDefaults_Parms.PlayerPawn = PlayerPawn;

	this->ProcessEvent ( pFnSetPlayerDefaults, &SetPlayerDefaults_Parms, NULL );
};

// Function Engine.GameInfo.Mutate
// [0x00020002] 
// Parameters infos:
// struct FString                 MutateString                   ( CPF_Parm | CPF_NeedCtorLink )
// class APlayerController*       Sender                         ( CPF_Parm )

void AGameInfo::Mutate ( struct FString MutateString, class APlayerController* Sender )
{
	static UFunction* pFnMutate = NULL;

	if ( ! pFnMutate )
		pFnMutate = (UFunction*) UObject::GObjObjects()->Data[ 20751 ];

	AGameInfo_execMutate_Parms Mutate_Parms;
	memcpy ( &Mutate_Parms.MutateString, &MutateString, 0x10 );
	Mutate_Parms.Sender = Sender;

	this->ProcessEvent ( pFnMutate, &Mutate_Parms, NULL );
};

// Function Engine.GameInfo.AddDefaultInventory
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AGameInfo::eventAddDefaultInventory ( class APawn* P )
{
	static UFunction* pFnAddDefaultInventory = NULL;

	if ( ! pFnAddDefaultInventory )
		pFnAddDefaultInventory = (UFunction*) UObject::GObjObjects()->Data[ 20749 ];

	AGameInfo_eventAddDefaultInventory_Parms AddDefaultInventory_Parms;
	AddDefaultInventory_Parms.P = P;

	this->ProcessEvent ( pFnAddDefaultInventory, &AddDefaultInventory_Parms, NULL );
};

// Function Engine.GameInfo.AcceptInventory
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   PlayerPawn                     ( CPF_Parm )

void AGameInfo::eventAcceptInventory ( class APawn* PlayerPawn )
{
	static UFunction* pFnAcceptInventory = NULL;

	if ( ! pFnAcceptInventory )
		pFnAcceptInventory = (UFunction*) UObject::GObjObjects()->Data[ 20747 ];

	AGameInfo_eventAcceptInventory_Parms AcceptInventory_Parms;
	AcceptInventory_Parms.PlayerPawn = PlayerPawn;

	this->ProcessEvent ( pFnAcceptInventory, &AcceptInventory_Parms, NULL );
};

// Function Engine.GameInfo.UnregisterPlayer
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::UnregisterPlayer ( class APlayerController* PC )
{
	static UFunction* pFnUnregisterPlayer = NULL;

	if ( ! pFnUnregisterPlayer )
		pFnUnregisterPlayer = (UFunction*) UObject::GObjObjects()->Data[ 20743 ];

	AGameInfo_execUnregisterPlayer_Parms UnregisterPlayer_Parms;
	UnregisterPlayer_Parms.PC = PC;

	this->ProcessEvent ( pFnUnregisterPlayer, &UnregisterPlayer_Parms, NULL );
};

// Function Engine.GameInfo.Logout
// [0x00020002] 
// Parameters infos:
// class AController*             Exiting                        ( CPF_Parm )

void AGameInfo::Logout ( class AController* Exiting )
{
	static UFunction* pFnLogout = NULL;

	if ( ! pFnLogout )
		pFnLogout = (UFunction*) UObject::GObjObjects()->Data[ 20739 ];

	AGameInfo_execLogout_Parms Logout_Parms;
	Logout_Parms.Exiting = Exiting;

	this->ProcessEvent ( pFnLogout, &Logout_Parms, NULL );
};

// Function Engine.GameInfo.PreExit
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventPreExit ( )
{
	static UFunction* pFnPreExit = NULL;

	if ( ! pFnPreExit )
		pFnPreExit = (UFunction*) UObject::GObjObjects()->Data[ 20738 ];

	AGameInfo_eventPreExit_Parms PreExit_Parms;

	this->ProcessEvent ( pFnPreExit, &PreExit_Parms, NULL );
};

// Function Engine.GameInfo.CalculatedNetSpeed
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int AGameInfo::CalculatedNetSpeed ( )
{
	static UFunction* pFnCalculatedNetSpeed = NULL;

	if ( ! pFnCalculatedNetSpeed )
		pFnCalculatedNetSpeed = (UFunction*) UObject::GObjObjects()->Data[ 20734 ];

	AGameInfo_execCalculatedNetSpeed_Parms CalculatedNetSpeed_Parms;

	this->ProcessEvent ( pFnCalculatedNetSpeed, &CalculatedNetSpeed_Parms, NULL );

	return CalculatedNetSpeed_Parms.ReturnValue;
};

// Function Engine.GameInfo.UpdateNetSpeeds
// [0x00020002] 
// Parameters infos:

void AGameInfo::UpdateNetSpeeds ( )
{
	static UFunction* pFnUpdateNetSpeeds = NULL;

	if ( ! pFnUpdateNetSpeeds )
		pFnUpdateNetSpeeds = (UFunction*) UObject::GObjObjects()->Data[ 20729 ];

	AGameInfo_execUpdateNetSpeeds_Parms UpdateNetSpeeds_Parms;

	this->ProcessEvent ( pFnUpdateNetSpeeds, &UpdateNetSpeeds_Parms, NULL );
};

// Function Engine.GameInfo.PostLogin
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       NewPlayer                      ( CPF_Parm )

void AGameInfo::eventPostLogin ( class APlayerController* NewPlayer )
{
	static UFunction* pFnPostLogin = NULL;

	if ( ! pFnPostLogin )
		pFnPostLogin = (UFunction*) UObject::GObjObjects()->Data[ 20718 ];

	AGameInfo_eventPostLogin_Parms PostLogin_Parms;
	PostLogin_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnPostLogin, &PostLogin_Parms, NULL );
};

// Function Engine.GameInfo.GenericPlayerInitialization
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )

void AGameInfo::GenericPlayerInitialization ( class AController* C )
{
	static UFunction* pFnGenericPlayerInitialization = NULL;

	if ( ! pFnGenericPlayerInitialization )
		pFnGenericPlayerInitialization = (UFunction*) UObject::GObjObjects()->Data[ 20713 ];

	AGameInfo_execGenericPlayerInitialization_Parms GenericPlayerInitialization_Parms;
	GenericPlayerInitialization_Parms.C = C;

	this->ProcessEvent ( pFnGenericPlayerInitialization, &GenericPlayerInitialization_Parms, NULL );
};

// Function Engine.GameInfo.ReplicateStreamingStatus
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::ReplicateStreamingStatus ( class APlayerController* PC )
{
	static UFunction* pFnReplicateStreamingStatus = NULL;

	if ( ! pFnReplicateStreamingStatus )
		pFnReplicateStreamingStatus = (UFunction*) UObject::GObjObjects()->Data[ 20704 ];

	AGameInfo_execReplicateStreamingStatus_Parms ReplicateStreamingStatus_Parms;
	ReplicateStreamingStatus_Parms.PC = PC;

	this->ProcessEvent ( pFnReplicateStreamingStatus, &ReplicateStreamingStatus_Parms, NULL );
};

// Function Engine.GameInfo.GetDefaultPlayerClass
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             C                              ( CPF_Parm )

class UClass* AGameInfo::GetDefaultPlayerClass ( class AController* C )
{
	static UFunction* pFnGetDefaultPlayerClass = NULL;

	if ( ! pFnGetDefaultPlayerClass )
		pFnGetDefaultPlayerClass = (UFunction*) UObject::GObjObjects()->Data[ 20700 ];

	AGameInfo_execGetDefaultPlayerClass_Parms GetDefaultPlayerClass_Parms;
	GetDefaultPlayerClass_Parms.C = C;

	this->ProcessEvent ( pFnGetDefaultPlayerClass, &GetDefaultPlayerClass_Parms, NULL );

	return GetDefaultPlayerClass_Parms.ReturnValue;
};

// Function Engine.GameInfo.SpawnDefaultPawnFor
// [0x00020002] 
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             NewPlayer                      ( CPF_Parm )
// class ANavigationPoint*        StartSpot                      ( CPF_Parm )

class APawn* AGameInfo::SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot )
{
	static UFunction* pFnSpawnDefaultPawnFor = NULL;

	if ( ! pFnSpawnDefaultPawnFor )
		pFnSpawnDefaultPawnFor = (UFunction*) UObject::GObjObjects()->Data[ 20693 ];

	AGameInfo_execSpawnDefaultPawnFor_Parms SpawnDefaultPawnFor_Parms;
	SpawnDefaultPawnFor_Parms.NewPlayer = NewPlayer;
	SpawnDefaultPawnFor_Parms.StartSpot = StartSpot;

	this->ProcessEvent ( pFnSpawnDefaultPawnFor, &SpawnDefaultPawnFor_Parms, NULL );

	return SpawnDefaultPawnFor_Parms.ReturnValue;
};

// Function Engine.GameInfo.RestartPlayer
// [0x00020002] 
// Parameters infos:
// class AController*             NewPlayer                      ( CPF_Parm )

void AGameInfo::RestartPlayer ( class AController* NewPlayer )
{
	static UFunction* pFnRestartPlayer = NULL;

	if ( ! pFnRestartPlayer )
		pFnRestartPlayer = (UFunction*) UObject::GObjObjects()->Data[ 20681 ];

	AGameInfo_execRestartPlayer_Parms RestartPlayer_Parms;
	RestartPlayer_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnRestartPlayer, &RestartPlayer_Parms, NULL );
};

// Function Engine.GameInfo.LoadPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AGameInfo::LoadPlayer ( )
{
	static UFunction* pFnLoadPlayer = NULL;

	if ( ! pFnLoadPlayer )
		pFnLoadPlayer = (UFunction*) UObject::GObjObjects()->Data[ 20680 ];

	AGameInfo_execLoadPlayer_Parms LoadPlayer_Parms;

	pFnLoadPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadPlayer, &LoadPlayer_Parms, NULL );

	pFnLoadPlayer->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.StartBots
// [0x00020002] 
// Parameters infos:

void AGameInfo::StartBots ( )
{
	static UFunction* pFnStartBots = NULL;

	if ( ! pFnStartBots )
		pFnStartBots = (UFunction*) UObject::GObjObjects()->Data[ 20678 ];

	AGameInfo_execStartBots_Parms StartBots_Parms;

	this->ProcessEvent ( pFnStartBots, &StartBots_Parms, NULL );
};

// Function Engine.GameInfo.StartHumans
// [0x00020002] 
// Parameters infos:

void AGameInfo::StartHumans ( )
{
	static UFunction* pFnStartHumans = NULL;

	if ( ! pFnStartHumans )
		pFnStartHumans = (UFunction*) UObject::GObjObjects()->Data[ 20676 ];

	AGameInfo_execStartHumans_Parms StartHumans_Parms;

	this->ProcessEvent ( pFnStartHumans, &StartHumans_Parms, NULL );
};

// Function Engine.GameInfo.OnStartOnlineGameComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void AGameInfo::OnStartOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnStartOnlineGameComplete = NULL;

	if ( ! pFnOnStartOnlineGameComplete )
		pFnOnStartOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 20669 ];

	AGameInfo_execOnStartOnlineGameComplete_Parms OnStartOnlineGameComplete_Parms;
	memcpy ( &OnStartOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnStartOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnStartOnlineGameComplete, &OnStartOnlineGameComplete_Parms, NULL );
};

// Function Engine.GameInfo.StartOnlineGame
// [0x00020002] 
// Parameters infos:

void AGameInfo::StartOnlineGame ( )
{
	static UFunction* pFnStartOnlineGame = NULL;

	if ( ! pFnStartOnlineGame )
		pFnStartOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 20667 ];

	AGameInfo_execStartOnlineGame_Parms StartOnlineGame_Parms;

	this->ProcessEvent ( pFnStartOnlineGame, &StartOnlineGame_Parms, NULL );
};

// Function Engine.GameInfo.StartMatch
// [0x00020002] 
// Parameters infos:

void AGameInfo::StartMatch ( )
{
	static UFunction* pFnStartMatch = NULL;

	if ( ! pFnStartMatch )
		pFnStartMatch = (UFunction*) UObject::GObjObjects()->Data[ 20665 ];

	AGameInfo_execStartMatch_Parms StartMatch_Parms;

	this->ProcessEvent ( pFnStartMatch, &StartMatch_Parms, NULL );
};

// Function Engine.GameInfo.Login
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Portal                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            UniqueId                       ( CPF_Const | CPF_Parm )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class APlayerController* AGameInfo::eventLogin ( struct FString Portal, struct FString Options, struct FUniqueNetId UniqueId, struct FString* ErrorMessage )
{
	static UFunction* pFnLogin = NULL;

	if ( ! pFnLogin )
		pFnLogin = (UFunction*) UObject::GObjObjects()->Data[ 20644 ];

	AGameInfo_eventLogin_Parms Login_Parms;
	memcpy ( &Login_Parms.Portal, &Portal, 0x10 );
	memcpy ( &Login_Parms.Options, &Options, 0x10 );
	memcpy ( &Login_Parms.UniqueId, &UniqueId, 0x8 );

	this->ProcessEvent ( pFnLogin, &Login_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &Login_Parms.ErrorMessage, 0x10 );

	return Login_Parms.ReturnValue;
};

// Function Engine.GameInfo.SpawnPlayerController
// [0x00020002] 
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// struct FRotator                SpawnRotation                  ( CPF_Parm )

class APlayerController* AGameInfo::SpawnPlayerController ( struct FVector SpawnLocation, struct FRotator SpawnRotation )
{
	static UFunction* pFnSpawnPlayerController = NULL;

	if ( ! pFnSpawnPlayerController )
		pFnSpawnPlayerController = (UFunction*) UObject::GObjObjects()->Data[ 20639 ];

	AGameInfo_execSpawnPlayerController_Parms SpawnPlayerController_Parms;
	memcpy ( &SpawnPlayerController_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &SpawnPlayerController_Parms.SpawnRotation, &SpawnRotation, 0xC );

	this->ProcessEvent ( pFnSpawnPlayerController, &SpawnPlayerController_Parms, NULL );

	return SpawnPlayerController_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetNextPlayerID
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int AGameInfo::GetNextPlayerID ( )
{
	static UFunction* pFnGetNextPlayerID = NULL;

	if ( ! pFnGetNextPlayerID )
		pFnGetNextPlayerID = (UFunction*) UObject::GObjObjects()->Data[ 20637 ];

	AGameInfo_execGetNextPlayerID_Parms GetNextPlayerID_Parms;

	pFnGetNextPlayerID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNextPlayerID, &GetNextPlayerID_Parms, NULL );

	pFnGetNextPlayerID->FunctionFlags |= 0x400;

	return GetNextPlayerID_Parms.ReturnValue;
};

// Function Engine.GameInfo.AtCapacity
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bSpectator                     ( CPF_Parm )

bool AGameInfo::AtCapacity ( unsigned long bSpectator )
{
	static UFunction* pFnAtCapacity = NULL;

	if ( ! pFnAtCapacity )
		pFnAtCapacity = (UFunction*) UObject::GObjObjects()->Data[ 7592 ];

	AGameInfo_execAtCapacity_Parms AtCapacity_Parms;
	AtCapacity_Parms.bSpectator = bSpectator;

	this->ProcessEvent ( pFnAtCapacity, &AtCapacity_Parms, NULL );

	return AtCapacity_Parms.ReturnValue;
};

// Function Engine.GameInfo.PreLogin
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Address                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AGameInfo::eventPreLogin ( struct FString Options, struct FString Address, struct FString* ErrorMessage )
{
	static UFunction* pFnPreLogin = NULL;

	if ( ! pFnPreLogin )
		pFnPreLogin = (UFunction*) UObject::GObjObjects()->Data[ 20630 ];

	AGameInfo_eventPreLogin_Parms PreLogin_Parms;
	memcpy ( &PreLogin_Parms.Options, &Options, 0x10 );
	memcpy ( &PreLogin_Parms.Address, &Address, 0x10 );

	this->ProcessEvent ( pFnPreLogin, &PreLogin_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &PreLogin_Parms.ErrorMessage, 0x10 );
};

// Function Engine.GameInfo.RequiresPassword
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::RequiresPassword ( )
{
	static UFunction* pFnRequiresPassword = NULL;

	if ( ! pFnRequiresPassword )
		pFnRequiresPassword = (UFunction*) UObject::GObjObjects()->Data[ 20628 ];

	AGameInfo_execRequiresPassword_Parms RequiresPassword_Parms;

	this->ProcessEvent ( pFnRequiresPassword, &RequiresPassword_Parms, NULL );

	return RequiresPassword_Parms.ReturnValue;
};

// Function Engine.GameInfo.ProcessClientTravel
// [0x00420002] 
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FGuid                   NextMapGuid                    ( CPF_Parm )
// unsigned long                  bSeamless                      ( CPF_Parm )
// unsigned long                  bAbsolute                      ( CPF_Parm )
// struct FString                 URL                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class APlayerController* AGameInfo::ProcessClientTravel ( struct FGuid NextMapGuid, unsigned long bSeamless, unsigned long bAbsolute, struct FString* URL )
{
	static UFunction* pFnProcessClientTravel = NULL;

	if ( ! pFnProcessClientTravel )
		pFnProcessClientTravel = (UFunction*) UObject::GObjObjects()->Data[ 20620 ];

	AGameInfo_execProcessClientTravel_Parms ProcessClientTravel_Parms;
	memcpy ( &ProcessClientTravel_Parms.NextMapGuid, &NextMapGuid, 0x10 );
	ProcessClientTravel_Parms.bSeamless = bSeamless;
	ProcessClientTravel_Parms.bAbsolute = bAbsolute;

	this->ProcessEvent ( pFnProcessClientTravel, &ProcessClientTravel_Parms, NULL );

	if ( URL )
		memcpy ( URL, &ProcessClientTravel_Parms.URL, 0x10 );

	return ProcessClientTravel_Parms.ReturnValue;
};

// Function Engine.GameInfo.ProcessServerTravel
// [0x00024002] 
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bAbsolute                      ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::ProcessServerTravel ( struct FString URL, unsigned long bAbsolute )
{
	static UFunction* pFnProcessServerTravel = NULL;

	if ( ! pFnProcessServerTravel )
		pFnProcessServerTravel = (UFunction*) UObject::GObjObjects()->Data[ 20611 ];

	AGameInfo_execProcessServerTravel_Parms ProcessServerTravel_Parms;
	memcpy ( &ProcessServerTravel_Parms.URL, &URL, 0x10 );
	ProcessServerTravel_Parms.bAbsolute = bAbsolute;

	this->ProcessEvent ( pFnProcessServerTravel, &ProcessServerTravel_Parms, NULL );
};

// Function Engine.GameInfo.RemoveMutator
// [0x00020002] 
// Parameters infos:
// class AMutator*                MutatorToRemove                ( CPF_Parm )

void AGameInfo::RemoveMutator ( class AMutator* MutatorToRemove )
{
	static UFunction* pFnRemoveMutator = NULL;

	if ( ! pFnRemoveMutator )
		pFnRemoveMutator = (UFunction*) UObject::GObjObjects()->Data[ 20608 ];

	AGameInfo_execRemoveMutator_Parms RemoveMutator_Parms;
	RemoveMutator_Parms.MutatorToRemove = MutatorToRemove;

	this->ProcessEvent ( pFnRemoveMutator, &RemoveMutator_Parms, NULL );
};

// Function Engine.GameInfo.AddMutator
// [0x00024002] 
// Parameters infos:
// struct FString                 mutname                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bUserAdded                     ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::AddMutator ( struct FString mutname, unsigned long bUserAdded )
{
	static UFunction* pFnAddMutator = NULL;

	if ( ! pFnAddMutator )
		pFnAddMutator = (UFunction*) UObject::GObjObjects()->Data[ 20599 ];

	AGameInfo_execAddMutator_Parms AddMutator_Parms;
	memcpy ( &AddMutator_Parms.mutname, &mutname, 0x10 );
	AddMutator_Parms.bUserAdded = bUserAdded;

	this->ProcessEvent ( pFnAddMutator, &AddMutator_Parms, NULL );
};

// Function Engine.GameInfo.NotifyPendingConnectionLost
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventNotifyPendingConnectionLost ( )
{
	static UFunction* pFnNotifyPendingConnectionLost = NULL;

	if ( ! pFnNotifyPendingConnectionLost )
		pFnNotifyPendingConnectionLost = (UFunction*) UObject::GObjObjects()->Data[ 20598 ];

	AGameInfo_eventNotifyPendingConnectionLost_Parms NotifyPendingConnectionLost_Parms;

	this->ProcessEvent ( pFnNotifyPendingConnectionLost, &NotifyPendingConnectionLost_Parms, NULL );
};

// Function Engine.GameInfo.InitGame
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AGameInfo::eventInitGame ( struct FString Options, struct FString* ErrorMessage )
{
	static UFunction* pFnInitGame = NULL;

	if ( ! pFnInitGame )
		pFnInitGame = (UFunction*) UObject::GObjObjects()->Data[ 20579 ];

	AGameInfo_eventInitGame_Parms InitGame_Parms;
	memcpy ( &InitGame_Parms.Options, &Options, 0x10 );

	this->ProcessEvent ( pFnInitGame, &InitGame_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &InitGame_Parms.ErrorMessage, 0x10 );
};

// Function Engine.GameInfo.SetGameType
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Portal                         ( CPF_Parm | CPF_NeedCtorLink )

class UClass* AGameInfo::eventSetGameType ( struct FString MapName, struct FString Options, struct FString Portal )
{
	static UFunction* pFnSetGameType = NULL;

	if ( ! pFnSetGameType )
		pFnSetGameType = (UFunction*) UObject::GObjObjects()->Data[ 20574 ];

	AGameInfo_eventSetGameType_Parms SetGameType_Parms;
	memcpy ( &SetGameType_Parms.MapName, &MapName, 0x10 );
	memcpy ( &SetGameType_Parms.Options, &Options, 0x10 );
	memcpy ( &SetGameType_Parms.Portal, &Portal, 0x10 );

	this->ProcessEvent ( pFnSetGameType, &SetGameType_Parms, NULL );

	return SetGameType_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetDefaultGameClassPath
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Portal                         ( CPF_Parm | CPF_NeedCtorLink )

struct FString AGameInfo::eventGetDefaultGameClassPath ( struct FString MapName, struct FString Options, struct FString Portal )
{
	static UFunction* pFnGetDefaultGameClassPath = NULL;

	if ( ! pFnGetDefaultGameClassPath )
		pFnGetDefaultGameClassPath = (UFunction*) UObject::GObjObjects()->Data[ 20569 ];

	AGameInfo_eventGetDefaultGameClassPath_Parms GetDefaultGameClassPath_Parms;
	memcpy ( &GetDefaultGameClassPath_Parms.MapName, &MapName, 0x10 );
	memcpy ( &GetDefaultGameClassPath_Parms.Options, &Options, 0x10 );
	memcpy ( &GetDefaultGameClassPath_Parms.Portal, &Portal, 0x10 );

	this->ProcessEvent ( pFnGetDefaultGameClassPath, &GetDefaultGameClassPath_Parms, NULL );

	return GetDefaultGameClassPath_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetIntOption
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ParseString                    ( CPF_Parm | CPF_NeedCtorLink )
// int                            CurrentValue                   ( CPF_Parm )

int AGameInfo::GetIntOption ( struct FString Options, struct FString ParseString, int CurrentValue )
{
	static UFunction* pFnGetIntOption = NULL;

	if ( ! pFnGetIntOption )
		pFnGetIntOption = (UFunction*) UObject::GObjObjects()->Data[ 20563 ];

	AGameInfo_execGetIntOption_Parms GetIntOption_Parms;
	memcpy ( &GetIntOption_Parms.Options, &Options, 0x10 );
	memcpy ( &GetIntOption_Parms.ParseString, &ParseString, 0x10 );
	GetIntOption_Parms.CurrentValue = CurrentValue;

	this->ProcessEvent ( pFnGetIntOption, &GetIntOption_Parms, NULL );

	return GetIntOption_Parms.ReturnValue;
};

// Function Engine.GameInfo.HasOption
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 InKey                          ( CPF_Parm | CPF_NeedCtorLink )

bool AGameInfo::HasOption ( struct FString Options, struct FString InKey )
{
	static UFunction* pFnHasOption = NULL;

	if ( ! pFnHasOption )
		pFnHasOption = (UFunction*) UObject::GObjObjects()->Data[ 20556 ];

	AGameInfo_execHasOption_Parms HasOption_Parms;
	memcpy ( &HasOption_Parms.Options, &Options, 0x10 );
	memcpy ( &HasOption_Parms.InKey, &InKey, 0x10 );

	this->ProcessEvent ( pFnHasOption, &HasOption_Parms, NULL );

	return HasOption_Parms.ReturnValue;
};

// Function Engine.GameInfo.ParseOption
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 InKey                          ( CPF_Parm | CPF_NeedCtorLink )

struct FString AGameInfo::ParseOption ( struct FString Options, struct FString InKey )
{
	static UFunction* pFnParseOption = NULL;

	if ( ! pFnParseOption )
		pFnParseOption = (UFunction*) UObject::GObjObjects()->Data[ 7580 ];

	AGameInfo_execParseOption_Parms ParseOption_Parms;
	memcpy ( &ParseOption_Parms.Options, &Options, 0x10 );
	memcpy ( &ParseOption_Parms.InKey, &InKey, 0x10 );

	this->ProcessEvent ( pFnParseOption, &ParseOption_Parms, NULL );

	return ParseOption_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetKeyValue
// [0x00422002] 
// Parameters infos:
// struct FString                 Pair                           ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Key                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 Value                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AGameInfo::GetKeyValue ( struct FString Pair, struct FString* Key, struct FString* Value )
{
	static UFunction* pFnGetKeyValue = NULL;

	if ( ! pFnGetKeyValue )
		pFnGetKeyValue = (UFunction*) UObject::GObjObjects()->Data[ 20547 ];

	AGameInfo_execGetKeyValue_Parms GetKeyValue_Parms;
	memcpy ( &GetKeyValue_Parms.Pair, &Pair, 0x10 );

	this->ProcessEvent ( pFnGetKeyValue, &GetKeyValue_Parms, NULL );

	if ( Key )
		memcpy ( Key, &GetKeyValue_Parms.Key, 0x10 );

	if ( Value )
		memcpy ( Value, &GetKeyValue_Parms.Value, 0x10 );
};

// Function Engine.GameInfo.GrabOption
// [0x00422002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Options                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 Result                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AGameInfo::GrabOption ( struct FString* Options, struct FString* Result )
{
	static UFunction* pFnGrabOption = NULL;

	if ( ! pFnGrabOption )
		pFnGrabOption = (UFunction*) UObject::GObjObjects()->Data[ 20543 ];

	AGameInfo_execGrabOption_Parms GrabOption_Parms;

	this->ProcessEvent ( pFnGrabOption, &GrabOption_Parms, NULL );

	if ( Options )
		memcpy ( Options, &GrabOption_Parms.Options, 0x10 );

	if ( Result )
		memcpy ( Result, &GrabOption_Parms.Result, 0x10 );

	return GrabOption_Parms.ReturnValue;
};

// Function Engine.GameInfo.SetGameSpeed
// [0x00020002] 
// Parameters infos:
// float                          T                              ( CPF_Parm )

void AGameInfo::SetGameSpeed ( float T )
{
	static UFunction* pFnSetGameSpeed = NULL;

	if ( ! pFnSetGameSpeed )
		pFnSetGameSpeed = (UFunction*) UObject::GObjObjects()->Data[ 20541 ];

	AGameInfo_execSetGameSpeed_Parms SetGameSpeed_Parms;
	SetGameSpeed_Parms.T = T;

	this->ProcessEvent ( pFnSetGameSpeed, &SetGameSpeed_Parms, NULL );
};

// Function Engine.GameInfo.DebugPause
// [0x00020002] 
// Parameters infos:

void AGameInfo::DebugPause ( )
{
	static UFunction* pFnDebugPause = NULL;

	if ( ! pFnDebugPause )
		pFnDebugPause = (UFunction*) UObject::GObjObjects()->Data[ 20538 ];

	AGameInfo_execDebugPause_Parms DebugPause_Parms;

	this->ProcessEvent ( pFnDebugPause, &DebugPause_Parms, NULL );
};

// Function Engine.GameInfo.ForceClearUnpauseDelegates
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  PauseActor                     ( CPF_Parm )

void AGameInfo::ForceClearUnpauseDelegates ( class AActor* PauseActor )
{
	static UFunction* pFnForceClearUnpauseDelegates = NULL;

	if ( ! pFnForceClearUnpauseDelegates )
		pFnForceClearUnpauseDelegates = (UFunction*) UObject::GObjObjects()->Data[ 10069 ];

	AGameInfo_execForceClearUnpauseDelegates_Parms ForceClearUnpauseDelegates_Parms;
	ForceClearUnpauseDelegates_Parms.PauseActor = PauseActor;

	pFnForceClearUnpauseDelegates->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceClearUnpauseDelegates, &ForceClearUnpauseDelegates_Parms, NULL );

	pFnForceClearUnpauseDelegates->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.ClearPause
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventClearPause ( )
{
	static UFunction* pFnClearPause = NULL;

	if ( ! pFnClearPause )
		pFnClearPause = (UFunction*) UObject::GObjObjects()->Data[ 20534 ];

	AGameInfo_eventClearPause_Parms ClearPause_Parms;

	this->ProcessEvent ( pFnClearPause, &ClearPause_Parms, NULL );
};

// Function Engine.GameInfo.SetPause
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       PC                             ( CPF_Parm )
// struct FScriptDelegate         CanUnpauseDelegate             ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool AGameInfo::SetPause ( class APlayerController* PC, struct FScriptDelegate CanUnpauseDelegate )
{
	static UFunction* pFnSetPause = NULL;

	if ( ! pFnSetPause )
		pFnSetPause = (UFunction*) UObject::GObjObjects()->Data[ 10703 ];

	AGameInfo_execSetPause_Parms SetPause_Parms;
	SetPause_Parms.PC = PC;
	memcpy ( &SetPause_Parms.CanUnpauseDelegate, &CanUnpauseDelegate, 0x10 );

	this->ProcessEvent ( pFnSetPause, &SetPause_Parms, NULL );

	return SetPause_Parms.ReturnValue;
};

// Function Engine.GameInfo.CanUnpause
// [0x00120002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::CanUnpause ( )
{
	static UFunction* pFnCanUnpause = NULL;

	if ( ! pFnCanUnpause )
		pFnCanUnpause = (UFunction*) UObject::GObjObjects()->Data[ 20438 ];

	AGameInfo_execCanUnpause_Parms CanUnpause_Parms;

	this->ProcessEvent ( pFnCanUnpause, &CanUnpause_Parms, NULL );

	return CanUnpause_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetServerPort
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int AGameInfo::GetServerPort ( )
{
	static UFunction* pFnGetServerPort = NULL;

	if ( ! pFnGetServerPort )
		pFnGetServerPort = (UFunction*) UObject::GObjObjects()->Data[ 20525 ];

	AGameInfo_execGetServerPort_Parms GetServerPort_Parms;

	this->ProcessEvent ( pFnGetServerPort, &GetServerPort_Parms, NULL );

	return GetServerPort_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetNumPlayers
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int AGameInfo::GetNumPlayers ( )
{
	static UFunction* pFnGetNumPlayers = NULL;

	if ( ! pFnGetNumPlayers )
		pFnGetNumPlayers = (UFunction*) UObject::GObjObjects()->Data[ 20522 ];

	AGameInfo_execGetNumPlayers_Parms GetNumPlayers_Parms;

	this->ProcessEvent ( pFnGetNumPlayers, &GetNumPlayers_Parms, NULL );

	return GetNumPlayers_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetNetworkNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AGameInfo::GetNetworkNumber ( )
{
	static UFunction* pFnGetNetworkNumber = NULL;

	if ( ! pFnGetNetworkNumber )
		pFnGetNetworkNumber = (UFunction*) UObject::GObjObjects()->Data[ 20520 ];

	AGameInfo_execGetNetworkNumber_Parms GetNetworkNumber_Parms;

	pFnGetNetworkNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNetworkNumber, &GetNetworkNumber_Parms, NULL );

	pFnGetNetworkNumber->FunctionFlags |= 0x400;

	return GetNetworkNumber_Parms.ReturnValue;
};

// Function Engine.GameInfo.InitGameReplicationInfo
// [0x00020002] 
// Parameters infos:

void AGameInfo::InitGameReplicationInfo ( )
{
	static UFunction* pFnInitGameReplicationInfo = NULL;

	if ( ! pFnInitGameReplicationInfo )
		pFnInitGameReplicationInfo = (UFunction*) UObject::GObjObjects()->Data[ 20519 ];

	AGameInfo_execInitGameReplicationInfo_Parms InitGameReplicationInfo_Parms;

	this->ProcessEvent ( pFnInitGameReplicationInfo, &InitGameReplicationInfo_Parms, NULL );
};

// Function Engine.GameInfo.ForceKickPlayer
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// struct FString                 KickReason                     ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::eventForceKickPlayer ( class APlayerController* PC, struct FString KickReason )
{
	static UFunction* pFnForceKickPlayer = NULL;

	if ( ! pFnForceKickPlayer )
		pFnForceKickPlayer = (UFunction*) UObject::GObjObjects()->Data[ 20514 ];

	AGameInfo_eventForceKickPlayer_Parms ForceKickPlayer_Parms;
	ForceKickPlayer_Parms.PC = PC;
	memcpy ( &ForceKickPlayer_Parms.KickReason, &KickReason, 0x10 );

	this->ProcessEvent ( pFnForceKickPlayer, &ForceKickPlayer_Parms, NULL );
};

// Function Engine.GameInfo.KickIdler
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::eventKickIdler ( class APlayerController* PC )
{
	static UFunction* pFnKickIdler = NULL;

	if ( ! pFnKickIdler )
		pFnKickIdler = (UFunction*) UObject::GObjObjects()->Data[ 20511 ];

	AGameInfo_eventKickIdler_Parms KickIdler_Parms;
	KickIdler_Parms.PC = PC;

	this->ProcessEvent ( pFnKickIdler, &KickIdler_Parms, NULL );
};

// Function Engine.GameInfo.GameEnding
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventGameEnding ( )
{
	static UFunction* pFnGameEnding = NULL;

	if ( ! pFnGameEnding )
		pFnGameEnding = (UFunction*) UObject::GObjObjects()->Data[ 20510 ];

	AGameInfo_eventGameEnding_Parms GameEnding_Parms;

	this->ProcessEvent ( pFnGameEnding, &GameEnding_Parms, NULL );
};

// Function Engine.GameInfo.NotifyNavigationChanged
// [0x00020000] 
// Parameters infos:
// class ANavigationPoint*        N                              ( CPF_Parm )

void AGameInfo::NotifyNavigationChanged ( class ANavigationPoint* N )
{
	static UFunction* pFnNotifyNavigationChanged = NULL;

	if ( ! pFnNotifyNavigationChanged )
		pFnNotifyNavigationChanged = (UFunction*) UObject::GObjObjects()->Data[ 20508 ];

	AGameInfo_execNotifyNavigationChanged_Parms NotifyNavigationChanged_Parms;
	NotifyNavigationChanged_Parms.N = N;

	this->ProcessEvent ( pFnNotifyNavigationChanged, &NotifyNavigationChanged_Parms, NULL );
};

// Function Engine.GameInfo.DoNavFearCostFallOff
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AGameInfo::DoNavFearCostFallOff ( )
{
	static UFunction* pFnDoNavFearCostFallOff = NULL;

	if ( ! pFnDoNavFearCostFallOff )
		pFnDoNavFearCostFallOff = (UFunction*) UObject::GObjObjects()->Data[ 20507 ];

	AGameInfo_execDoNavFearCostFallOff_Parms DoNavFearCostFallOff_Parms;

	pFnDoNavFearCostFallOff->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoNavFearCostFallOff, &DoNavFearCostFallOff_Parms, NULL );

	pFnDoNavFearCostFallOff->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.Timer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 20504 ];

	AGameInfo_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Engine.GameInfo.ResetLevel
// [0x00020002] 
// Parameters infos:

void AGameInfo::ResetLevel ( )
{
	static UFunction* pFnResetLevel = NULL;

	if ( ! pFnResetLevel )
		pFnResetLevel = (UFunction*) UObject::GObjObjects()->Data[ 20495 ];

	AGameInfo_execResetLevel_Parms ResetLevel_Parms;

	this->ProcessEvent ( pFnResetLevel, &ResetLevel_Parms, NULL );
};

// Function Engine.GameInfo.ShouldReset
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ActorToReset                   ( CPF_Parm )

bool AGameInfo::ShouldReset ( class AActor* ActorToReset )
{
	static UFunction* pFnShouldReset = NULL;

	if ( ! pFnShouldReset )
		pFnShouldReset = (UFunction*) UObject::GObjObjects()->Data[ 20492 ];

	AGameInfo_execShouldReset_Parms ShouldReset_Parms;
	ShouldReset_Parms.ActorToReset = ActorToReset;

	this->ProcessEvent ( pFnShouldReset, &ShouldReset_Parms, NULL );

	return ShouldReset_Parms.ReturnValue;
};

// Function Engine.GameInfo.Reset
// [0x00020002] 
// Parameters infos:

void AGameInfo::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 20489 ];

	AGameInfo_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.GameInfo.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AGameInfo::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 20483 ];

	AGameInfo_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.GameInfo.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 20481 ];

	AGameInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.GameInfo.GetCoverReplicator
// [0x00020002] 
// Parameters infos:
// class ACoverReplicator*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ACoverReplicator* AGameInfo::GetCoverReplicator ( )
{
	static UFunction* pFnGetCoverReplicator = NULL;

	if ( ! pFnGetCoverReplicator )
		pFnGetCoverReplicator = (UFunction*) UObject::GObjObjects()->Data[ 14278 ];

	AGameInfo_execGetCoverReplicator_Parms GetCoverReplicator_Parms;

	this->ProcessEvent ( pFnGetCoverReplicator, &GetCoverReplicator_Parms, NULL );

	return GetCoverReplicator_Parms.ReturnValue;
};

// Function Engine.GameInfo.UseLowGore
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWorldInfo*              WI                             ( CPF_Parm )

bool AGameInfo::UseLowGore ( class AWorldInfo* WI )
{
	static UFunction* pFnUseLowGore = NULL;

	if ( ! pFnUseLowGore )
		pFnUseLowGore = (UFunction*) UObject::GObjObjects()->Data[ 20476 ];

	AGameInfo_execUseLowGore_Parms UseLowGore_Parms;
	UseLowGore_Parms.WI = WI;

	this->ProcessEvent ( pFnUseLowGore, &UseLowGore_Parms, NULL );

	return UseLowGore_Parms.ReturnValue;
};

// Function Engine.GameInfo.FindPlayerByID
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            PlayerID                       ( CPF_Parm )

struct FString AGameInfo::FindPlayerByID ( int PlayerID )
{
	static UFunction* pFnFindPlayerByID = NULL;

	if ( ! pFnFindPlayerByID )
		pFnFindPlayerByID = (UFunction*) UObject::GObjObjects()->Data[ 20470 ];

	AGameInfo_execFindPlayerByID_Parms FindPlayerByID_Parms;
	FindPlayerByID_Parms.PlayerID = PlayerID;

	this->ProcessEvent ( pFnFindPlayerByID, &FindPlayerByID_Parms, NULL );

	return FindPlayerByID_Parms.ReturnValue;
};

// Function Engine.GameInfo.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 20465 ];

	AGameInfo_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.GameInfo.GetMapCommonPackageName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InFilename                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 OutCommonPackageName           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AGameInfo::GetMapCommonPackageName ( struct FString* InFilename, struct FString* OutCommonPackageName )
{
	static UFunction* pFnGetMapCommonPackageName = NULL;

	if ( ! pFnGetMapCommonPackageName )
		pFnGetMapCommonPackageName = (UFunction*) UObject::GObjObjects()->Data[ 20461 ];

	AGameInfo_execGetMapCommonPackageName_Parms GetMapCommonPackageName_Parms;

	pFnGetMapCommonPackageName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMapCommonPackageName, &GetMapCommonPackageName_Parms, NULL );

	pFnGetMapCommonPackageName->FunctionFlags |= 0x400;

	if ( InFilename )
		memcpy ( InFilename, &GetMapCommonPackageName_Parms.InFilename, 0x10 );

	if ( OutCommonPackageName )
		memcpy ( OutCommonPackageName, &GetMapCommonPackageName_Parms.OutCommonPackageName, 0x10 );

	return GetMapCommonPackageName_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetSupportedGameTypes
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bCheckExt                      ( CPF_OptionalParm | CPF_Parm )
// struct FString                 InFilename                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FGameTypePrefix         OutGameType                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AGameInfo::GetSupportedGameTypes ( unsigned long bCheckExt, struct FString* InFilename, struct FGameTypePrefix* OutGameType )
{
	static UFunction* pFnGetSupportedGameTypes = NULL;

	if ( ! pFnGetSupportedGameTypes )
		pFnGetSupportedGameTypes = (UFunction*) UObject::GObjObjects()->Data[ 20456 ];

	AGameInfo_execGetSupportedGameTypes_Parms GetSupportedGameTypes_Parms;
	GetSupportedGameTypes_Parms.bCheckExt = bCheckExt;

	pFnGetSupportedGameTypes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSupportedGameTypes, &GetSupportedGameTypes_Parms, NULL );

	pFnGetSupportedGameTypes->FunctionFlags |= 0x400;

	if ( InFilename )
		memcpy ( InFilename, &GetSupportedGameTypes_Parms.InFilename, 0x10 );

	if ( OutGameType )
		memcpy ( OutGameType, &GetSupportedGameTypes_Parms.OutGameType, 0x44 );

	return GetSupportedGameTypes_Parms.ReturnValue;
};

// Function Engine.MCPTools.DoLoggedIn
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AMCPTools::DoLoggedIn ( )
{
	static UFunction* pFnDoLoggedIn = NULL;

	if ( ! pFnDoLoggedIn )
		pFnDoLoggedIn = (UFunction*) UObject::GObjObjects()->Data[ 24699 ];

	AMCPTools_execDoLoggedIn_Parms DoLoggedIn_Parms;

	pFnDoLoggedIn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoLoggedIn, &DoLoggedIn_Parms, NULL );

	pFnDoLoggedIn->FunctionFlags |= 0x400;
};

// Function Engine.MCPTools.InitGame
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AMCPTools::eventInitGame ( struct FString Options, struct FString* ErrorMessage )
{
	static UFunction* pFnInitGame = NULL;

	if ( ! pFnInitGame )
		pFnInitGame = (UFunction*) UObject::GObjObjects()->Data[ 24696 ];

	AMCPTools_eventInitGame_Parms InitGame_Parms;
	memcpy ( &InitGame_Parms.Options, &Options, 0x10 );

	this->ProcessEvent ( pFnInitGame, &InitGame_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &InitGame_Parms.ErrorMessage, 0x10 );
};

// Function Engine.MCPTools.RegisterServer
// [0x00020002] 
// Parameters infos:

void AMCPTools::RegisterServer ( )
{
	static UFunction* pFnRegisterServer = NULL;

	if ( ! pFnRegisterServer )
		pFnRegisterServer = (UFunction*) UObject::GObjObjects()->Data[ 24695 ];

	AMCPTools_execRegisterServer_Parms RegisterServer_Parms;

	this->ProcessEvent ( pFnRegisterServer, &RegisterServer_Parms, NULL );
};

// Function Engine.InternetInfo.GetBeaconText
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            I                              ( CPF_Parm )

struct FString AInternetInfo::GetBeaconText ( int I )
{
	static UFunction* pFnGetBeaconText = NULL;

	if ( ! pFnGetBeaconText )
		pFnGetBeaconText = (UFunction*) UObject::GObjObjects()->Data[ 22580 ];

	AInternetInfo_execGetBeaconText_Parms GetBeaconText_Parms;
	GetBeaconText_Parms.I = I;

	this->ProcessEvent ( pFnGetBeaconText, &GetBeaconText_Parms, NULL );

	return GetBeaconText_Parms.ReturnValue;
};

// Function Engine.InternetInfo.GetBeaconAddress
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            I                              ( CPF_Parm )

struct FString AInternetInfo::GetBeaconAddress ( int I )
{
	static UFunction* pFnGetBeaconAddress = NULL;

	if ( ! pFnGetBeaconAddress )
		pFnGetBeaconAddress = (UFunction*) UObject::GObjObjects()->Data[ 22577 ];

	AInternetInfo_execGetBeaconAddress_Parms GetBeaconAddress_Parms;
	GetBeaconAddress_Parms.I = I;

	this->ProcessEvent ( pFnGetBeaconAddress, &GetBeaconAddress_Parms, NULL );

	return GetBeaconAddress_Parms.ReturnValue;
};

// Function Engine.Mutator.NetDamage
// [0x00420002] 
// Parameters infos:
// int                            OriginalDamage                 ( CPF_Parm )
// class APawn*                   injured                        ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// int                            Damage                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void AMutator::NetDamage ( int OriginalDamage, class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum )
{
	static UFunction* pFnNetDamage = NULL;

	if ( ! pFnNetDamage )
		pFnNetDamage = (UFunction*) UObject::GObjObjects()->Data[ 24879 ];

	AMutator_execNetDamage_Parms NetDamage_Parms;
	NetDamage_Parms.OriginalDamage = OriginalDamage;
	NetDamage_Parms.injured = injured;
	NetDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NetDamage_Parms.HitLocation, &HitLocation, 0xC );
	NetDamage_Parms.DamageType = DamageType;
	NetDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnNetDamage, &NetDamage_Parms, NULL );

	if ( Damage )
		*Damage = NetDamage_Parms.Damage;

	if ( Momentum )
		memcpy ( Momentum, &NetDamage_Parms.Momentum, 0xC );
};

// Function Engine.Mutator.ScoreKill
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Killed                         ( CPF_Parm )

void AMutator::ScoreKill ( class AController* Killer, class AController* Killed )
{
	static UFunction* pFnScoreKill = NULL;

	if ( ! pFnScoreKill )
		pFnScoreKill = (UFunction*) UObject::GObjObjects()->Data[ 24876 ];

	AMutator_execScoreKill_Parms ScoreKill_Parms;
	ScoreKill_Parms.Killer = Killer;
	ScoreKill_Parms.Killed = Killed;

	this->ProcessEvent ( pFnScoreKill, &ScoreKill_Parms, NULL );
};

// Function Engine.Mutator.ScoreObjective
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Scorer                         ( CPF_Parm )
// int                            Score                          ( CPF_Parm )

void AMutator::ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score )
{
	static UFunction* pFnScoreObjective = NULL;

	if ( ! pFnScoreObjective )
		pFnScoreObjective = (UFunction*) UObject::GObjObjects()->Data[ 24873 ];

	AMutator_execScoreObjective_Parms ScoreObjective_Parms;
	ScoreObjective_Parms.Scorer = Scorer;
	ScoreObjective_Parms.Score = Score;

	this->ProcessEvent ( pFnScoreObjective, &ScoreObjective_Parms, NULL );
};

// Function Engine.Mutator.PreventDeath
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Killed                         ( CPF_Parm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool AMutator::PreventDeath ( class APawn* Killed, class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnPreventDeath = NULL;

	if ( ! pFnPreventDeath )
		pFnPreventDeath = (UFunction*) UObject::GObjObjects()->Data[ 20774 ];

	AMutator_execPreventDeath_Parms PreventDeath_Parms;
	PreventDeath_Parms.Killed = Killed;
	PreventDeath_Parms.Killer = Killer;
	PreventDeath_Parms.DamageType = DamageType;
	memcpy ( &PreventDeath_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPreventDeath, &PreventDeath_Parms, NULL );

	return PreventDeath_Parms.ReturnValue;
};

// Function Engine.Mutator.OverridePickupQuery
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )
// unsigned char                  bAllowPickup                   ( CPF_Parm | CPF_OutParm )

bool AMutator::OverridePickupQuery ( class APawn* Other, class UClass* ItemClass, class AActor* Pickup, unsigned char* bAllowPickup )
{
	static UFunction* pFnOverridePickupQuery = NULL;

	if ( ! pFnOverridePickupQuery )
		pFnOverridePickupQuery = (UFunction*) UObject::GObjObjects()->Data[ 20815 ];

	AMutator_execOverridePickupQuery_Parms OverridePickupQuery_Parms;
	OverridePickupQuery_Parms.Other = Other;
	OverridePickupQuery_Parms.ItemClass = ItemClass;
	OverridePickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnOverridePickupQuery, &OverridePickupQuery_Parms, NULL );

	if ( bAllowPickup )
		*bAllowPickup = OverridePickupQuery_Parms.bAllowPickup;

	return OverridePickupQuery_Parms.ReturnValue;
};

// Function Engine.Mutator.CheckEndGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )

bool AMutator::CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pFnCheckEndGame = NULL;

	if ( ! pFnCheckEndGame )
		pFnCheckEndGame = (UFunction*) UObject::GObjObjects()->Data[ 20878 ];

	AMutator_execCheckEndGame_Parms CheckEndGame_Parms;
	CheckEndGame_Parms.Winner = Winner;
	memcpy ( &CheckEndGame_Parms.Reason, &Reason, 0x10 );

	this->ProcessEvent ( pFnCheckEndGame, &CheckEndGame_Parms, NULL );

	return CheckEndGame_Parms.ReturnValue;
};

// Function Engine.Mutator.HandleRestartGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AMutator::HandleRestartGame ( )
{
	static UFunction* pFnHandleRestartGame = NULL;

	if ( ! pFnHandleRestartGame )
		pFnHandleRestartGame = (UFunction*) UObject::GObjObjects()->Data[ 20846 ];

	AMutator_execHandleRestartGame_Parms HandleRestartGame_Parms;

	this->ProcessEvent ( pFnHandleRestartGame, &HandleRestartGame_Parms, NULL );

	return HandleRestartGame_Parms.ReturnValue;
};

// Function Engine.Mutator.FindPlayerStart
// [0x00024002] 
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )
// unsigned char                  InTeam                         ( CPF_OptionalParm | CPF_Parm )
// struct FString                 IncomingName                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

class ANavigationPoint* AMutator::FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName )
{
	static UFunction* pFnFindPlayerStart = NULL;

	if ( ! pFnFindPlayerStart )
		pFnFindPlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 20911 ];

	AMutator_execFindPlayerStart_Parms FindPlayerStart_Parms;
	FindPlayerStart_Parms.Player = Player;
	FindPlayerStart_Parms.InTeam = InTeam;
	memcpy ( &FindPlayerStart_Parms.IncomingName, &IncomingName, 0x10 );

	this->ProcessEvent ( pFnFindPlayerStart, &FindPlayerStart_Parms, NULL );

	return FindPlayerStart_Parms.ReturnValue;
};

// Function Engine.Mutator.GetSeamlessTravelActorList
// [0x00420002] 
// Parameters infos:
// unsigned long                  bToEntry                       ( CPF_Parm )
// struct TArray<class AActor*>   ActorList                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AMutator::GetSeamlessTravelActorList ( unsigned long bToEntry, struct TArray<class AActor*>* ActorList )
{
	static UFunction* pFnGetSeamlessTravelActorList = NULL;

	if ( ! pFnGetSeamlessTravelActorList )
		pFnGetSeamlessTravelActorList = (UFunction*) UObject::GObjObjects()->Data[ 24856 ];

	AMutator_execGetSeamlessTravelActorList_Parms GetSeamlessTravelActorList_Parms;
	GetSeamlessTravelActorList_Parms.bToEntry = bToEntry;

	this->ProcessEvent ( pFnGetSeamlessTravelActorList, &GetSeamlessTravelActorList_Parms, NULL );

	if ( ActorList )
		memcpy ( ActorList, &GetSeamlessTravelActorList_Parms.ActorList, 0x10 );
};

// Function Engine.Mutator.InitMutator
// [0x00420002] 
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AMutator::InitMutator ( struct FString Options, struct FString* ErrorMessage )
{
	static UFunction* pFnInitMutator = NULL;

	if ( ! pFnInitMutator )
		pFnInitMutator = (UFunction*) UObject::GObjObjects()->Data[ 24853 ];

	AMutator_execInitMutator_Parms InitMutator_Parms;
	memcpy ( &InitMutator_Parms.Options, &Options, 0x10 );

	this->ProcessEvent ( pFnInitMutator, &InitMutator_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &InitMutator_Parms.ErrorMessage, 0x10 );
};

// Function Engine.Mutator.DriverLeftVehicle
// [0x00020002] 
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

void AMutator::DriverLeftVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnDriverLeftVehicle = NULL;

	if ( ! pFnDriverLeftVehicle )
		pFnDriverLeftVehicle = (UFunction*) UObject::GObjObjects()->Data[ 24850 ];

	AMutator_execDriverLeftVehicle_Parms DriverLeftVehicle_Parms;
	DriverLeftVehicle_Parms.V = V;
	DriverLeftVehicle_Parms.P = P;

	this->ProcessEvent ( pFnDriverLeftVehicle, &DriverLeftVehicle_Parms, NULL );
};

// Function Engine.Mutator.CanLeaveVehicle
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

bool AMutator::CanLeaveVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnCanLeaveVehicle = NULL;

	if ( ! pFnCanLeaveVehicle )
		pFnCanLeaveVehicle = (UFunction*) UObject::GObjObjects()->Data[ 20955 ];

	AMutator_execCanLeaveVehicle_Parms CanLeaveVehicle_Parms;
	CanLeaveVehicle_Parms.V = V;
	CanLeaveVehicle_Parms.P = P;

	this->ProcessEvent ( pFnCanLeaveVehicle, &CanLeaveVehicle_Parms, NULL );

	return CanLeaveVehicle_Parms.ReturnValue;
};

// Function Engine.Mutator.DriverEnteredVehicle
// [0x00020002] 
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

void AMutator::DriverEnteredVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnDriverEnteredVehicle = NULL;

	if ( ! pFnDriverEnteredVehicle )
		pFnDriverEnteredVehicle = (UFunction*) UObject::GObjObjects()->Data[ 24845 ];

	AMutator_execDriverEnteredVehicle_Parms DriverEnteredVehicle_Parms;
	DriverEnteredVehicle_Parms.V = V;
	DriverEnteredVehicle_Parms.P = P;

	this->ProcessEvent ( pFnDriverEnteredVehicle, &DriverEnteredVehicle_Parms, NULL );
};

// Function Engine.Mutator.NotifyLogin
// [0x00020002] 
// Parameters infos:
// class AController*             NewPlayer                      ( CPF_Parm )

void AMutator::NotifyLogin ( class AController* NewPlayer )
{
	static UFunction* pFnNotifyLogin = NULL;

	if ( ! pFnNotifyLogin )
		pFnNotifyLogin = (UFunction*) UObject::GObjObjects()->Data[ 24843 ];

	AMutator_execNotifyLogin_Parms NotifyLogin_Parms;
	NotifyLogin_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnNotifyLogin, &NotifyLogin_Parms, NULL );
};

// Function Engine.Mutator.NotifyLogout
// [0x00020002] 
// Parameters infos:
// class AController*             Exiting                        ( CPF_Parm )

void AMutator::NotifyLogout ( class AController* Exiting )
{
	static UFunction* pFnNotifyLogout = NULL;

	if ( ! pFnNotifyLogout )
		pFnNotifyLogout = (UFunction*) UObject::GObjObjects()->Data[ 24841 ];

	AMutator_execNotifyLogout_Parms NotifyLogout_Parms;
	NotifyLogout_Parms.Exiting = Exiting;

	this->ProcessEvent ( pFnNotifyLogout, &NotifyLogout_Parms, NULL );
};

// Function Engine.Mutator.ParseChatPercVar
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class AController*             Who                            ( CPF_Parm )
// struct FString                 Cmd                            ( CPF_Parm | CPF_NeedCtorLink )

struct FString AMutator::ParseChatPercVar ( class AController* Who, struct FString Cmd )
{
	static UFunction* pFnParseChatPercVar = NULL;

	if ( ! pFnParseChatPercVar )
		pFnParseChatPercVar = (UFunction*) UObject::GObjObjects()->Data[ 24837 ];

	AMutator_execParseChatPercVar_Parms ParseChatPercVar_Parms;
	ParseChatPercVar_Parms.Who = Who;
	memcpy ( &ParseChatPercVar_Parms.Cmd, &Cmd, 0x10 );

	this->ProcessEvent ( pFnParseChatPercVar, &ParseChatPercVar_Parms, NULL );

	return ParseChatPercVar_Parms.ReturnValue;
};

// Function Engine.Mutator.GetServerPlayers
// [0x00420000] 
// Parameters infos:
// struct FServerResponseLine     ServerState                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AMutator::GetServerPlayers ( struct FServerResponseLine* ServerState )
{
	static UFunction* pFnGetServerPlayers = NULL;

	if ( ! pFnGetServerPlayers )
		pFnGetServerPlayers = (UFunction*) UObject::GObjObjects()->Data[ 24835 ];

	AMutator_execGetServerPlayers_Parms GetServerPlayers_Parms;

	this->ProcessEvent ( pFnGetServerPlayers, &GetServerPlayers_Parms, NULL );

	if ( ServerState )
		memcpy ( ServerState, &GetServerPlayers_Parms.ServerState, 0x78 );
};

// Function Engine.Mutator.GetServerDetails
// [0x00420002] 
// Parameters infos:
// struct FServerResponseLine     ServerState                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AMutator::GetServerDetails ( struct FServerResponseLine* ServerState )
{
	static UFunction* pFnGetServerDetails = NULL;

	if ( ! pFnGetServerDetails )
		pFnGetServerDetails = (UFunction*) UObject::GObjObjects()->Data[ 24832 ];

	AMutator_execGetServerDetails_Parms GetServerDetails_Parms;

	this->ProcessEvent ( pFnGetServerDetails, &GetServerDetails_Parms, NULL );

	if ( ServerState )
		memcpy ( ServerState, &GetServerDetails_Parms.ServerState, 0x78 );
};

// Function Engine.Mutator.CheckReplacement
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AMutator::CheckReplacement ( class AActor* Other )
{
	static UFunction* pFnCheckReplacement = NULL;

	if ( ! pFnCheckReplacement )
		pFnCheckReplacement = (UFunction*) UObject::GObjObjects()->Data[ 24829 ];

	AMutator_execCheckReplacement_Parms CheckReplacement_Parms;
	CheckReplacement_Parms.Other = Other;

	this->ProcessEvent ( pFnCheckReplacement, &CheckReplacement_Parms, NULL );

	return CheckReplacement_Parms.ReturnValue;
};

// Function Engine.Mutator.CheckRelevance
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AMutator::CheckRelevance ( class AActor* Other )
{
	static UFunction* pFnCheckRelevance = NULL;

	if ( ! pFnCheckRelevance )
		pFnCheckRelevance = (UFunction*) UObject::GObjObjects()->Data[ 20806 ];

	AMutator_execCheckRelevance_Parms CheckRelevance_Parms;
	CheckRelevance_Parms.Other = Other;

	this->ProcessEvent ( pFnCheckRelevance, &CheckRelevance_Parms, NULL );

	return CheckRelevance_Parms.ReturnValue;
};

// Function Engine.Mutator.IsRelevant
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AMutator::IsRelevant ( class AActor* Other )
{
	static UFunction* pFnIsRelevant = NULL;

	if ( ! pFnIsRelevant )
		pFnIsRelevant = (UFunction*) UObject::GObjObjects()->Data[ 24823 ];

	AMutator_execIsRelevant_Parms IsRelevant_Parms;
	IsRelevant_Parms.Other = Other;

	this->ProcessEvent ( pFnIsRelevant, &IsRelevant_Parms, NULL );

	return IsRelevant_Parms.ReturnValue;
};

// Function Engine.Mutator.AlwaysKeep
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AMutator::AlwaysKeep ( class AActor* Other )
{
	static UFunction* pFnAlwaysKeep = NULL;

	if ( ! pFnAlwaysKeep )
		pFnAlwaysKeep = (UFunction*) UObject::GObjObjects()->Data[ 24820 ];

	AMutator_execAlwaysKeep_Parms AlwaysKeep_Parms;
	AlwaysKeep_Parms.Other = Other;

	this->ProcessEvent ( pFnAlwaysKeep, &AlwaysKeep_Parms, NULL );

	return AlwaysKeep_Parms.ReturnValue;
};

// Function Engine.Mutator.AddMutator
// [0x00020002] 
// Parameters infos:
// class AMutator*                M                              ( CPF_Parm )

void AMutator::AddMutator ( class AMutator* M )
{
	static UFunction* pFnAddMutator = NULL;

	if ( ! pFnAddMutator )
		pFnAddMutator = (UFunction*) UObject::GObjObjects()->Data[ 24818 ];

	AMutator_execAddMutator_Parms AddMutator_Parms;
	AddMutator_Parms.M = M;

	this->ProcessEvent ( pFnAddMutator, &AddMutator_Parms, NULL );
};

// Function Engine.Mutator.ModifyPlayer
// [0x00020002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void AMutator::ModifyPlayer ( class APawn* Other )
{
	static UFunction* pFnModifyPlayer = NULL;

	if ( ! pFnModifyPlayer )
		pFnModifyPlayer = (UFunction*) UObject::GObjObjects()->Data[ 24816 ];

	AMutator_execModifyPlayer_Parms ModifyPlayer_Parms;
	ModifyPlayer_Parms.Other = Other;

	this->ProcessEvent ( pFnModifyPlayer, &ModifyPlayer_Parms, NULL );
};

// Function Engine.Mutator.ModifyLogin
// [0x00420002] 
// Parameters infos:
// struct FString                 Portal                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 Options                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AMutator::ModifyLogin ( struct FString* Portal, struct FString* Options )
{
	static UFunction* pFnModifyLogin = NULL;

	if ( ! pFnModifyLogin )
		pFnModifyLogin = (UFunction*) UObject::GObjObjects()->Data[ 24813 ];

	AMutator_execModifyLogin_Parms ModifyLogin_Parms;

	this->ProcessEvent ( pFnModifyLogin, &ModifyLogin_Parms, NULL );

	if ( Portal )
		memcpy ( Portal, &ModifyLogin_Parms.Portal, 0x10 );

	if ( Options )
		memcpy ( Options, &ModifyLogin_Parms.Options, 0x10 );
};

// Function Engine.Mutator.Mutate
// [0x00020002] 
// Parameters infos:
// struct FString                 MutateString                   ( CPF_Parm | CPF_NeedCtorLink )
// class APlayerController*       Sender                         ( CPF_Parm )

void AMutator::Mutate ( struct FString MutateString, class APlayerController* Sender )
{
	static UFunction* pFnMutate = NULL;

	if ( ! pFnMutate )
		pFnMutate = (UFunction*) UObject::GObjObjects()->Data[ 24810 ];

	AMutator_execMutate_Parms Mutate_Parms;
	memcpy ( &Mutate_Parms.MutateString, &MutateString, 0x10 );
	Mutate_Parms.Sender = Sender;

	this->ProcessEvent ( pFnMutate, &Mutate_Parms, NULL );
};

// Function Engine.Mutator.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AMutator::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 24809 ];

	AMutator_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Mutator.MutatorIsAllowed
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AMutator::MutatorIsAllowed ( )
{
	static UFunction* pFnMutatorIsAllowed = NULL;

	if ( ! pFnMutatorIsAllowed )
		pFnMutatorIsAllowed = (UFunction*) UObject::GObjObjects()->Data[ 24807 ];

	AMutator_execMutatorIsAllowed_Parms MutatorIsAllowed_Parms;

	this->ProcessEvent ( pFnMutatorIsAllowed, &MutatorIsAllowed_Parms, NULL );

	return MutatorIsAllowed_Parms.ReturnValue;
};

// Function Engine.Mutator.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AMutator::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 24806 ];

	AMutator_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.PotentialClimbWatcher.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APotentialClimbWatcher::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 28556 ];

	APotentialClimbWatcher_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.Route.MoveOntoRoutePath
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// unsigned char                  RouteDirection                 ( CPF_OptionalParm | CPF_Parm )
// float                          DistFudgeFactor                ( CPF_OptionalParm | CPF_Parm )

int ARoute::MoveOntoRoutePath ( class APawn* P, unsigned char RouteDirection, float DistFudgeFactor )
{
	static UFunction* pFnMoveOntoRoutePath = NULL;

	if ( ! pFnMoveOntoRoutePath )
		pFnMoveOntoRoutePath = (UFunction*) UObject::GObjObjects()->Data[ 29133 ];

	ARoute_execMoveOntoRoutePath_Parms MoveOntoRoutePath_Parms;
	MoveOntoRoutePath_Parms.P = P;
	MoveOntoRoutePath_Parms.RouteDirection = RouteDirection;
	MoveOntoRoutePath_Parms.DistFudgeFactor = DistFudgeFactor;

	pFnMoveOntoRoutePath->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveOntoRoutePath, &MoveOntoRoutePath_Parms, NULL );

	pFnMoveOntoRoutePath->FunctionFlags |= 0x400;

	return MoveOntoRoutePath_Parms.ReturnValue;
};

// Function Engine.Route.ResolveRouteIndex
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Idx                            ( CPF_Parm )
// unsigned char                  RouteDirection                 ( CPF_Parm )
// unsigned char                  out_bComplete                  ( CPF_Parm | CPF_OutParm )
// unsigned char                  out_bReverse                   ( CPF_Parm | CPF_OutParm )

int ARoute::ResolveRouteIndex ( int Idx, unsigned char RouteDirection, unsigned char* out_bComplete, unsigned char* out_bReverse )
{
	static UFunction* pFnResolveRouteIndex = NULL;

	if ( ! pFnResolveRouteIndex )
		pFnResolveRouteIndex = (UFunction*) UObject::GObjObjects()->Data[ 29127 ];

	ARoute_execResolveRouteIndex_Parms ResolveRouteIndex_Parms;
	ResolveRouteIndex_Parms.Idx = Idx;
	ResolveRouteIndex_Parms.RouteDirection = RouteDirection;

	pFnResolveRouteIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveRouteIndex, &ResolveRouteIndex_Parms, NULL );

	pFnResolveRouteIndex->FunctionFlags |= 0x400;

	if ( out_bComplete )
		*out_bComplete = ResolveRouteIndex_Parms.out_bComplete;

	if ( out_bReverse )
		*out_bReverse = ResolveRouteIndex_Parms.out_bReverse;

	return ResolveRouteIndex_Parms.ReturnValue;
};

// Function Engine.WorldInfo.FindEnvironmentVolume
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AEnvironmentVolume*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TestLocation                   ( CPF_Parm )

class AEnvironmentVolume* AWorldInfo::FindEnvironmentVolume ( struct FVector TestLocation )
{
	static UFunction* pFnFindEnvironmentVolume = NULL;

	if ( ! pFnFindEnvironmentVolume )
		pFnFindEnvironmentVolume = (UFunction*) UObject::GObjObjects()->Data[ 15593 ];

	AWorldInfo_execFindEnvironmentVolume_Parms FindEnvironmentVolume_Parms;
	memcpy ( &FindEnvironmentVolume_Parms.TestLocation, &TestLocation, 0xC );

	pFnFindEnvironmentVolume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindEnvironmentVolume, &FindEnvironmentVolume_Parms, NULL );

	pFnFindEnvironmentVolume->FunctionFlags |= 0x400;

	return FindEnvironmentVolume_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsShippingBuild
// [0x00022501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsShippingBuild ( )
{
	static UFunction* pFnIsShippingBuild = NULL;

	if ( ! pFnIsShippingBuild )
		pFnIsShippingBuild = (UFunction*) UObject::GObjObjects()->Data[ 15591 ];

	AWorldInfo_execIsShippingBuild_Parms IsShippingBuild_Parms;

	pFnIsShippingBuild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsShippingBuild, &IsShippingBuild_Parms, NULL );

	pFnIsShippingBuild->FunctionFlags |= 0x400;

	return IsShippingBuild_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsFinalReleaseDebugConsoleBuild
// [0x00022501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsFinalReleaseDebugConsoleBuild ( )
{
	static UFunction* pFnIsFinalReleaseDebugConsoleBuild = NULL;

	if ( ! pFnIsFinalReleaseDebugConsoleBuild )
		pFnIsFinalReleaseDebugConsoleBuild = (UFunction*) UObject::GObjObjects()->Data[ 15589 ];

	AWorldInfo_execIsFinalReleaseDebugConsoleBuild_Parms IsFinalReleaseDebugConsoleBuild_Parms;

	pFnIsFinalReleaseDebugConsoleBuild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFinalReleaseDebugConsoleBuild, &IsFinalReleaseDebugConsoleBuild_Parms, NULL );

	pFnIsFinalReleaseDebugConsoleBuild->FunctionFlags |= 0x400;

	return IsFinalReleaseDebugConsoleBuild_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsShippingPCBuild
// [0x00022501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsShippingPCBuild ( )
{
	static UFunction* pFnIsShippingPCBuild = NULL;

	if ( ! pFnIsShippingPCBuild )
		pFnIsShippingPCBuild = (UFunction*) UObject::GObjObjects()->Data[ 15587 ];

	AWorldInfo_execIsShippingPCBuild_Parms IsShippingPCBuild_Parms;

	pFnIsShippingPCBuild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsShippingPCBuild, &IsShippingPCBuild_Parms, NULL );

	pFnIsShippingPCBuild->FunctionFlags |= 0x400;

	return IsShippingPCBuild_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetWorldInfo
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AWorldInfo*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AWorldInfo* AWorldInfo::GetWorldInfo ( )
{
	static UFunction* pFnGetWorldInfo = NULL;

	if ( ! pFnGetWorldInfo )
		pFnGetWorldInfo = (UFunction*) UObject::GObjObjects()->Data[ 9714 ];

	AWorldInfo_execGetWorldInfo_Parms GetWorldInfo_Parms;

	pFnGetWorldInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWorldInfo, &GetWorldInfo_Parms, NULL );

	pFnGetWorldInfo->FunctionFlags |= 0x400;

	return GetWorldInfo_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetWorldFractureSettings
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FWorldFractureSettings  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FWorldFractureSettings AWorldInfo::GetWorldFractureSettings ( )
{
	static UFunction* pFnGetWorldFractureSettings = NULL;

	if ( ! pFnGetWorldFractureSettings )
		pFnGetWorldFractureSettings = (UFunction*) UObject::GObjObjects()->Data[ 15585 ];

	AWorldInfo_execGetWorldFractureSettings_Parms GetWorldFractureSettings_Parms;

	pFnGetWorldFractureSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWorldFractureSettings, &GetWorldFractureSettings_Parms, NULL );

	pFnGetWorldFractureSettings->FunctionFlags |= 0x400;

	return GetWorldFractureSettings_Parms.ReturnValue;
};

// Function Engine.WorldInfo.DoMemoryTracking
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AWorldInfo::DoMemoryTracking ( )
{
	static UFunction* pFnDoMemoryTracking = NULL;

	if ( ! pFnDoMemoryTracking )
		pFnDoMemoryTracking = (UFunction*) UObject::GObjObjects()->Data[ 13764 ];

	AWorldInfo_execDoMemoryTracking_Parms DoMemoryTracking_Parms;

	pFnDoMemoryTracking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoMemoryTracking, &DoMemoryTracking_Parms, NULL );

	pFnDoMemoryTracking->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.GetDemoRewindPoints
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct TArray<int>             OutRewindPoints                ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AWorldInfo::GetDemoRewindPoints ( struct TArray<int>* OutRewindPoints )
{
	static UFunction* pFnGetDemoRewindPoints = NULL;

	if ( ! pFnGetDemoRewindPoints )
		pFnGetDemoRewindPoints = (UFunction*) UObject::GObjObjects()->Data[ 15581 ];

	AWorldInfo_execGetDemoRewindPoints_Parms GetDemoRewindPoints_Parms;

	pFnGetDemoRewindPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDemoRewindPoints, &GetDemoRewindPoints_Parms, NULL );

	pFnGetDemoRewindPoints->FunctionFlags |= 0x400;

	if ( OutRewindPoints )
		memcpy ( OutRewindPoints, &GetDemoRewindPoints_Parms.OutRewindPoints, 0x10 );

	return GetDemoRewindPoints_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetDemoFrameInfo
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            CurrentFrame                   ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )
// int                            TotalFrames                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

void AWorldInfo::GetDemoFrameInfo ( int* CurrentFrame, int* TotalFrames )
{
	static UFunction* pFnGetDemoFrameInfo = NULL;

	if ( ! pFnGetDemoFrameInfo )
		pFnGetDemoFrameInfo = (UFunction*) UObject::GObjObjects()->Data[ 15578 ];

	AWorldInfo_execGetDemoFrameInfo_Parms GetDemoFrameInfo_Parms;

	pFnGetDemoFrameInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDemoFrameInfo, &GetDemoFrameInfo_Parms, NULL );

	pFnGetDemoFrameInfo->FunctionFlags |= 0x400;

	if ( CurrentFrame )
		*CurrentFrame = GetDemoFrameInfo_Parms.CurrentFrame;

	if ( TotalFrames )
		*TotalFrames = GetDemoFrameInfo_Parms.TotalFrames;
};

// Function Engine.WorldInfo.IsPlayingDemo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsPlayingDemo ( )
{
	static UFunction* pFnIsPlayingDemo = NULL;

	if ( ! pFnIsPlayingDemo )
		pFnIsPlayingDemo = (UFunction*) UObject::GObjObjects()->Data[ 15576 ];

	AWorldInfo_execIsPlayingDemo_Parms IsPlayingDemo_Parms;

	pFnIsPlayingDemo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayingDemo, &IsPlayingDemo_Parms, NULL );

	pFnIsPlayingDemo->FunctionFlags |= 0x400;

	return IsPlayingDemo_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsRecordingDemo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsRecordingDemo ( )
{
	static UFunction* pFnIsRecordingDemo = NULL;

	if ( ! pFnIsRecordingDemo )
		pFnIsRecordingDemo = (UFunction*) UObject::GObjObjects()->Data[ 15574 ];

	AWorldInfo_execIsRecordingDemo_Parms IsRecordingDemo_Parms;

	pFnIsRecordingDemo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsRecordingDemo, &IsRecordingDemo_Parms, NULL );

	pFnIsRecordingDemo->FunctionFlags |= 0x400;

	return IsRecordingDemo_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetDetailMode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AWorldInfo::GetDetailMode ( )
{
	static UFunction* pFnGetDetailMode = NULL;

	if ( ! pFnGetDetailMode )
		pFnGetDetailMode = (UFunction*) UObject::GObjObjects()->Data[ 15572 ];

	AWorldInfo_execGetDetailMode_Parms GetDetailMode_Parms;

	pFnGetDetailMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDetailMode, &GetDetailMode_Parms, NULL );

	pFnGetDetailMode->FunctionFlags |= 0x400;

	return GetDetailMode_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetMapName
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned long                  bIncludePrefix                 ( CPF_OptionalParm | CPF_Parm )

struct FString AWorldInfo::GetMapName ( unsigned long bIncludePrefix )
{
	static UFunction* pFnGetMapName = NULL;

	if ( ! pFnGetMapName )
		pFnGetMapName = (UFunction*) UObject::GObjObjects()->Data[ 13726 ];

	AWorldInfo_execGetMapName_Parms GetMapName_Parms;
	GetMapName_Parms.bIncludePrefix = bIncludePrefix;

	pFnGetMapName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMapName, &GetMapName_Parms, NULL );

	pFnGetMapName->FunctionFlags |= 0x400;

	return GetMapName_Parms.ReturnValue;
};

// Function Engine.WorldInfo.SetMapInfo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMapInfo*                NewMapInfo                     ( CPF_Parm )

void AWorldInfo::SetMapInfo ( class UMapInfo* NewMapInfo )
{
	static UFunction* pFnSetMapInfo = NULL;

	if ( ! pFnSetMapInfo )
		pFnSetMapInfo = (UFunction*) UObject::GObjObjects()->Data[ 15569 ];

	AWorldInfo_execSetMapInfo_Parms SetMapInfo_Parms;
	SetMapInfo_Parms.NewMapInfo = NewMapInfo;

	pFnSetMapInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMapInfo, &SetMapInfo_Parms, NULL );

	pFnSetMapInfo->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.GetInputLock
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDuration                      ( CPF_Parm )

bool AWorldInfo::GetInputLock ( float fDuration )
{
	static UFunction* pFnGetInputLock = NULL;

	if ( ! pFnGetInputLock )
		pFnGetInputLock = (UFunction*) UObject::GObjObjects()->Data[ 15566 ];

	AWorldInfo_execGetInputLock_Parms GetInputLock_Parms;
	GetInputLock_Parms.fDuration = fDuration;

	pFnGetInputLock->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInputLock, &GetInputLock_Parms, NULL );

	pFnGetInputLock->FunctionFlags |= 0x400;

	return GetInputLock_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetMapInfo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMapInfo*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UMapInfo* AWorldInfo::GetMapInfo ( )
{
	static UFunction* pFnGetMapInfo = NULL;

	if ( ! pFnGetMapInfo )
		pFnGetMapInfo = (UFunction*) UObject::GObjObjects()->Data[ 15564 ];

	AWorldInfo_execGetMapInfo_Parms GetMapInfo_Parms;

	pFnGetMapInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMapInfo, &GetMapInfo_Parms, NULL );

	pFnGetMapInfo->FunctionFlags |= 0x400;

	return GetMapInfo_Parms.ReturnValue;
};

// Function Engine.WorldInfo.SetSeamlessTravelMidpointPause
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNowPaused                     ( CPF_Parm )

void AWorldInfo::SetSeamlessTravelMidpointPause ( unsigned long bNowPaused )
{
	static UFunction* pFnSetSeamlessTravelMidpointPause = NULL;

	if ( ! pFnSetSeamlessTravelMidpointPause )
		pFnSetSeamlessTravelMidpointPause = (UFunction*) UObject::GObjObjects()->Data[ 15562 ];

	AWorldInfo_execSetSeamlessTravelMidpointPause_Parms SetSeamlessTravelMidpointPause_Parms;
	SetSeamlessTravelMidpointPause_Parms.bNowPaused = bNowPaused;

	pFnSetSeamlessTravelMidpointPause->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSeamlessTravelMidpointPause, &SetSeamlessTravelMidpointPause_Parms, NULL );

	pFnSetSeamlessTravelMidpointPause->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.IsInSeamlessTravel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsInSeamlessTravel ( )
{
	static UFunction* pFnIsInSeamlessTravel = NULL;

	if ( ! pFnIsInSeamlessTravel )
		pFnIsInSeamlessTravel = (UFunction*) UObject::GObjObjects()->Data[ 15511 ];

	AWorldInfo_execIsInSeamlessTravel_Parms IsInSeamlessTravel_Parms;

	pFnIsInSeamlessTravel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInSeamlessTravel, &IsInSeamlessTravel_Parms, NULL );

	pFnIsInSeamlessTravel->FunctionFlags |= 0x400;

	return IsInSeamlessTravel_Parms.ReturnValue;
};

// Function Engine.WorldInfo.SeamlessTravel
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bAbsolute                      ( CPF_OptionalParm | CPF_Parm )
// struct FGuid                   MapPackageGuid                 ( CPF_OptionalParm | CPF_Parm )

void AWorldInfo::SeamlessTravel ( struct FString URL, unsigned long bAbsolute, struct FGuid MapPackageGuid )
{
	static UFunction* pFnSeamlessTravel = NULL;

	if ( ! pFnSeamlessTravel )
		pFnSeamlessTravel = (UFunction*) UObject::GObjObjects()->Data[ 15557 ];

	AWorldInfo_execSeamlessTravel_Parms SeamlessTravel_Parms;
	memcpy ( &SeamlessTravel_Parms.URL, &URL, 0x10 );
	SeamlessTravel_Parms.bAbsolute = bAbsolute;
	memcpy ( &SeamlessTravel_Parms.MapPackageGuid, &MapPackageGuid, 0x10 );

	pFnSeamlessTravel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSeamlessTravel, &SeamlessTravel_Parms, NULL );

	pFnSeamlessTravel->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.CommitMapChange
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AWorldInfo::CommitMapChange ( )
{
	static UFunction* pFnCommitMapChange = NULL;

	if ( ! pFnCommitMapChange )
		pFnCommitMapChange = (UFunction*) UObject::GObjObjects()->Data[ 11514 ];

	AWorldInfo_execCommitMapChange_Parms CommitMapChange_Parms;

	pFnCommitMapChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCommitMapChange, &CommitMapChange_Parms, NULL );

	pFnCommitMapChange->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.CancelPendingMapChange
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AWorldInfo::CancelPendingMapChange ( )
{
	static UFunction* pFnCancelPendingMapChange = NULL;

	if ( ! pFnCancelPendingMapChange )
		pFnCancelPendingMapChange = (UFunction*) UObject::GObjObjects()->Data[ 11516 ];

	AWorldInfo_execCancelPendingMapChange_Parms CancelPendingMapChange_Parms;

	pFnCancelPendingMapChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCancelPendingMapChange, &CancelPendingMapChange_Parms, NULL );

	pFnCancelPendingMapChange->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.IsMapChangeReady
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsMapChangeReady ( )
{
	static UFunction* pFnIsMapChangeReady = NULL;

	if ( ! pFnIsMapChangeReady )
		pFnIsMapChangeReady = (UFunction*) UObject::GObjObjects()->Data[ 15555 ];

	AWorldInfo_execIsMapChangeReady_Parms IsMapChangeReady_Parms;

	pFnIsMapChangeReady->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMapChangeReady, &IsMapChangeReady_Parms, NULL );

	pFnIsMapChangeReady->FunctionFlags |= 0x400;

	return IsMapChangeReady_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsPreparingMapChange
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsPreparingMapChange ( )
{
	static UFunction* pFnIsPreparingMapChange = NULL;

	if ( ! pFnIsPreparingMapChange )
		pFnIsPreparingMapChange = (UFunction*) UObject::GObjObjects()->Data[ 11510 ];

	AWorldInfo_execIsPreparingMapChange_Parms IsPreparingMapChange_Parms;

	pFnIsPreparingMapChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPreparingMapChange, &IsPreparingMapChange_Parms, NULL );

	pFnIsPreparingMapChange->FunctionFlags |= 0x400;

	return IsPreparingMapChange_Parms.ReturnValue;
};

// Function Engine.WorldInfo.PrepareMapChange
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct TArray<struct FName>    LevelNames                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AWorldInfo::PrepareMapChange ( struct TArray<struct FName>* LevelNames )
{
	static UFunction* pFnPrepareMapChange = NULL;

	if ( ! pFnPrepareMapChange )
		pFnPrepareMapChange = (UFunction*) UObject::GObjObjects()->Data[ 11512 ];

	AWorldInfo_execPrepareMapChange_Parms PrepareMapChange_Parms;

	pFnPrepareMapChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrepareMapChange, &PrepareMapChange_Parms, NULL );

	pFnPrepareMapChange->FunctionFlags |= 0x400;

	if ( LevelNames )
		memcpy ( LevelNames, &PrepareMapChange_Parms.LevelNames, 0x10 );
};

// Function Engine.WorldInfo.NotifyMatchStarted
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldActivateLevelStartupEvents ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldActivateLevelBeginningEvents ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldActivateLevelLoadedEvents ( CPF_OptionalParm | CPF_Parm )

void AWorldInfo::NotifyMatchStarted ( unsigned long bShouldActivateLevelStartupEvents, unsigned long bShouldActivateLevelBeginningEvents, unsigned long bShouldActivateLevelLoadedEvents )
{
	static UFunction* pFnNotifyMatchStarted = NULL;

	if ( ! pFnNotifyMatchStarted )
		pFnNotifyMatchStarted = (UFunction*) UObject::GObjObjects()->Data[ 15549 ];

	AWorldInfo_execNotifyMatchStarted_Parms NotifyMatchStarted_Parms;
	NotifyMatchStarted_Parms.bShouldActivateLevelStartupEvents = bShouldActivateLevelStartupEvents;
	NotifyMatchStarted_Parms.bShouldActivateLevelBeginningEvents = bShouldActivateLevelBeginningEvents;
	NotifyMatchStarted_Parms.bShouldActivateLevelLoadedEvents = bShouldActivateLevelLoadedEvents;

	pFnNotifyMatchStarted->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyMatchStarted, &NotifyMatchStarted_Parms, NULL );

	pFnNotifyMatchStarted->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.AllPawns
// [0x00424405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// struct FVector                 TestLocation                   ( CPF_OptionalParm | CPF_Parm )
// float                          TestRadius                     ( CPF_OptionalParm | CPF_Parm )
// class APawn*                   P                              ( CPF_Parm | CPF_OutParm )

void AWorldInfo::AllPawns ( class UClass* BaseClass, struct FVector TestLocation, float TestRadius, class APawn** P )
{
	static UFunction* pFnAllPawns = NULL;

	if ( ! pFnAllPawns )
		pFnAllPawns = (UFunction*) UObject::GObjObjects()->Data[ 15544 ];

	AWorldInfo_execAllPawns_Parms AllPawns_Parms;
	AllPawns_Parms.BaseClass = BaseClass;
	memcpy ( &AllPawns_Parms.TestLocation, &TestLocation, 0xC );
	AllPawns_Parms.TestRadius = TestRadius;

	pFnAllPawns->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllPawns, &AllPawns_Parms, NULL );

	pFnAllPawns->FunctionFlags |= 0x400;

	if ( P )
		*P = AllPawns_Parms.P;
};

// Function Engine.WorldInfo.AllControllers
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AController*             C                              ( CPF_Parm | CPF_OutParm )

void AWorldInfo::AllControllers ( class UClass* BaseClass, class AController** C )
{
	static UFunction* pFnAllControllers = NULL;

	if ( ! pFnAllControllers )
		pFnAllControllers = (UFunction*) UObject::GObjObjects()->Data[ 7533 ];

	AWorldInfo_execAllControllers_Parms AllControllers_Parms;
	AllControllers_Parms.BaseClass = BaseClass;

	pFnAllControllers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllControllers, &AllControllers_Parms, NULL );

	pFnAllControllers->FunctionFlags |= 0x400;

	if ( C )
		*C = AllControllers_Parms.C;
};

// Function Engine.WorldInfo.NavigationPointCheck
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Point                          ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )
// struct TArray<class ANavigationPoint*> Navs                           ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct TArray<class UReachSpec*> Specs                          ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AWorldInfo::NavigationPointCheck ( struct FVector Point, struct FVector Extent, struct TArray<class ANavigationPoint*>* Navs, struct TArray<class UReachSpec*>* Specs )
{
	static UFunction* pFnNavigationPointCheck = NULL;

	if ( ! pFnNavigationPointCheck )
		pFnNavigationPointCheck = (UFunction*) UObject::GObjObjects()->Data[ 15535 ];

	AWorldInfo_execNavigationPointCheck_Parms NavigationPointCheck_Parms;
	memcpy ( &NavigationPointCheck_Parms.Point, &Point, 0xC );
	memcpy ( &NavigationPointCheck_Parms.Extent, &Extent, 0xC );

	pFnNavigationPointCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNavigationPointCheck, &NavigationPointCheck_Parms, NULL );

	pFnNavigationPointCheck->FunctionFlags |= 0x400;

	if ( Navs )
		memcpy ( Navs, &NavigationPointCheck_Parms.Navs, 0x10 );

	if ( Specs )
		memcpy ( Specs, &NavigationPointCheck_Parms.Specs, 0x10 );
};

// Function Engine.WorldInfo.RadiusNavigationPoints
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// struct FVector                 Point                          ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// class ANavigationPoint*        N                              ( CPF_Parm | CPF_OutParm )

void AWorldInfo::RadiusNavigationPoints ( class UClass* BaseClass, struct FVector Point, float Radius, class ANavigationPoint** N )
{
	static UFunction* pFnRadiusNavigationPoints = NULL;

	if ( ! pFnRadiusNavigationPoints )
		pFnRadiusNavigationPoints = (UFunction*) UObject::GObjObjects()->Data[ 15530 ];

	AWorldInfo_execRadiusNavigationPoints_Parms RadiusNavigationPoints_Parms;
	RadiusNavigationPoints_Parms.BaseClass = BaseClass;
	memcpy ( &RadiusNavigationPoints_Parms.Point, &Point, 0xC );
	RadiusNavigationPoints_Parms.Radius = Radius;

	pFnRadiusNavigationPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRadiusNavigationPoints, &RadiusNavigationPoints_Parms, NULL );

	pFnRadiusNavigationPoints->FunctionFlags |= 0x400;

	if ( N )
		*N = RadiusNavigationPoints_Parms.N;
};

// Function Engine.WorldInfo.AllNavigationPoints
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class ANavigationPoint*        N                              ( CPF_Parm | CPF_OutParm )

void AWorldInfo::AllNavigationPoints ( class UClass* BaseClass, class ANavigationPoint** N )
{
	static UFunction* pFnAllNavigationPoints = NULL;

	if ( ! pFnAllNavigationPoints )
		pFnAllNavigationPoints = (UFunction*) UObject::GObjObjects()->Data[ 10816 ];

	AWorldInfo_execAllNavigationPoints_Parms AllNavigationPoints_Parms;
	AllNavigationPoints_Parms.BaseClass = BaseClass;

	pFnAllNavigationPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllNavigationPoints, &AllNavigationPoints_Parms, NULL );

	pFnAllNavigationPoints->FunctionFlags |= 0x400;

	if ( N )
		*N = AllNavigationPoints_Parms.N;
};

// Function Engine.WorldInfo.BioStartMatch
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AWorldInfo::eventBioStartMatch ( )
{
	static UFunction* pFnBioStartMatch = NULL;

	if ( ! pFnBioStartMatch )
		pFnBioStartMatch = (UFunction*) UObject::GObjObjects()->Data[ 15527 ];

	AWorldInfo_eventBioStartMatch_Parms BioStartMatch_Parms;

	this->ProcessEvent ( pFnBioStartMatch, &BioStartMatch_Parms, NULL );
};

// Function Engine.WorldInfo.PauseGame
// [0x00020002] 
// Parameters infos:
// unsigned long                  bPause                         ( CPF_Parm )

void AWorldInfo::PauseGame ( unsigned long bPause )
{
	static UFunction* pFnPauseGame = NULL;

	if ( ! pFnPauseGame )
		pFnPauseGame = (UFunction*) UObject::GObjObjects()->Data[ 15524 ];

	AWorldInfo_execPauseGame_Parms PauseGame_Parms;
	PauseGame_Parms.bPause = bPause;

	this->ProcessEvent ( pFnPauseGame, &PauseGame_Parms, NULL );
};

// Function Engine.WorldInfo.Reset
// [0x00020002] 
// Parameters infos:

void AWorldInfo::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 15523 ];

	AWorldInfo_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.WorldInfo.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AWorldInfo::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 15521 ];

	AWorldInfo_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.WorldInfo.PreBeginPlay
// [0x00020102] 
// Parameters infos:

void AWorldInfo::PreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 15515 ];

	AWorldInfo_execPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.WorldInfo.ThisIsNeverExecuted
// [0x00020002] 
// Parameters infos:
// class ADefaultPhysicsVolume*   P                              ( CPF_Parm )

void AWorldInfo::ThisIsNeverExecuted ( class ADefaultPhysicsVolume* P )
{
	static UFunction* pFnThisIsNeverExecuted = NULL;

	if ( ! pFnThisIsNeverExecuted )
		pFnThisIsNeverExecuted = (UFunction*) UObject::GObjObjects()->Data[ 15513 ];

	AWorldInfo_execThisIsNeverExecuted_Parms ThisIsNeverExecuted_Parms;
	ThisIsNeverExecuted_Parms.P = P;

	this->ProcessEvent ( pFnThisIsNeverExecuted, &ThisIsNeverExecuted_Parms, NULL );
};

// Function Engine.WorldInfo.ServerTravel
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bAbsolute                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldSkipGameNotify          ( CPF_OptionalParm | CPF_Parm )

void AWorldInfo::eventServerTravel ( struct FString URL, unsigned long bAbsolute, unsigned long bShouldSkipGameNotify )
{
	static UFunction* pFnServerTravel = NULL;

	if ( ! pFnServerTravel )
		pFnServerTravel = (UFunction*) UObject::GObjObjects()->Data[ 15504 ];

	AWorldInfo_eventServerTravel_Parms ServerTravel_Parms;
	memcpy ( &ServerTravel_Parms.URL, &URL, 0x10 );
	ServerTravel_Parms.bAbsolute = bAbsolute;
	ServerTravel_Parms.bShouldSkipGameNotify = bShouldSkipGameNotify;

	this->ProcessEvent ( pFnServerTravel, &ServerTravel_Parms, NULL );
};

// Function Engine.WorldInfo.GetGameClass
// [0x00020102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* AWorldInfo::GetGameClass ( )
{
	static UFunction* pFnGetGameClass = NULL;

	if ( ! pFnGetGameClass )
		pFnGetGameClass = (UFunction*) UObject::GObjObjects()->Data[ 15502 ];

	AWorldInfo_execGetGameClass_Parms GetGameClass_Parms;

	this->ProcessEvent ( pFnGetGameClass, &GetGameClass_Parms, NULL );

	return GetGameClass_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetAddressURL
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AWorldInfo::GetAddressURL ( )
{
	static UFunction* pFnGetAddressURL = NULL;

	if ( ! pFnGetAddressURL )
		pFnGetAddressURL = (UFunction*) UObject::GObjObjects()->Data[ 15500 ];

	AWorldInfo_execGetAddressURL_Parms GetAddressURL_Parms;

	pFnGetAddressURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAddressURL, &GetAddressURL_Parms, NULL );

	pFnGetAddressURL->FunctionFlags |= 0x400;

	return GetAddressURL_Parms.ReturnValue;
};

// Function Engine.WorldInfo.VerifyNavList
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AWorldInfo::VerifyNavList ( )
{
	static UFunction* pFnVerifyNavList = NULL;

	if ( ! pFnVerifyNavList )
		pFnVerifyNavList = (UFunction*) UObject::GObjObjects()->Data[ 15499 ];

	AWorldInfo_execVerifyNavList_Parms VerifyNavList_Parms;

	pFnVerifyNavList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVerifyNavList, &VerifyNavList_Parms, NULL );

	pFnVerifyNavList->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.RescheduleGarbageCollectionTimer
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          maxdelay                       ( CPF_Parm )

void AWorldInfo::RescheduleGarbageCollectionTimer ( float maxdelay )
{
	static UFunction* pFnRescheduleGarbageCollectionTimer = NULL;

	if ( ! pFnRescheduleGarbageCollectionTimer )
		pFnRescheduleGarbageCollectionTimer = (UFunction*) UObject::GObjObjects()->Data[ 15497 ];

	AWorldInfo_execRescheduleGarbageCollectionTimer_Parms RescheduleGarbageCollectionTimer_Parms;
	RescheduleGarbageCollectionTimer_Parms.maxdelay = maxdelay;

	pFnRescheduleGarbageCollectionTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRescheduleGarbageCollectionTimer, &RescheduleGarbageCollectionTimer_Parms, NULL );

	pFnRescheduleGarbageCollectionTimer->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.DelayGarbageCollection
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AWorldInfo::DelayGarbageCollection ( )
{
	static UFunction* pFnDelayGarbageCollection = NULL;

	if ( ! pFnDelayGarbageCollection )
		pFnDelayGarbageCollection = (UFunction*) UObject::GObjObjects()->Data[ 15496 ];

	AWorldInfo_execDelayGarbageCollection_Parms DelayGarbageCollection_Parms;

	pFnDelayGarbageCollection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDelayGarbageCollection, &DelayGarbageCollection_Parms, NULL );

	pFnDelayGarbageCollection->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.ForceGarbageCollection
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bFullPurge                     ( CPF_OptionalParm | CPF_Parm )

void AWorldInfo::ForceGarbageCollection ( unsigned long bFullPurge )
{
	static UFunction* pFnForceGarbageCollection = NULL;

	if ( ! pFnForceGarbageCollection )
		pFnForceGarbageCollection = (UFunction*) UObject::GObjObjects()->Data[ 11489 ];

	AWorldInfo_execForceGarbageCollection_Parms ForceGarbageCollection_Parms;
	ForceGarbageCollection_Parms.bFullPurge = bFullPurge;

	pFnForceGarbageCollection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceGarbageCollection, &ForceGarbageCollection_Parms, NULL );

	pFnForceGarbageCollection->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.IsPlayInEditor
// [0x00022501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsPlayInEditor ( )
{
	static UFunction* pFnIsPlayInEditor = NULL;

	if ( ! pFnIsPlayInEditor )
		pFnIsPlayInEditor = (UFunction*) UObject::GObjObjects()->Data[ 15493 ];

	AWorldInfo_execIsPlayInEditor_Parms IsPlayInEditor_Parms;

	pFnIsPlayInEditor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayInEditor, &IsPlayInEditor_Parms, NULL );

	pFnIsPlayInEditor->FunctionFlags |= 0x400;

	return IsPlayInEditor_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsConsoleBuild
// [0x00026501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ConsoleType                    ( CPF_OptionalParm | CPF_Parm )

bool AWorldInfo::IsConsoleBuild ( unsigned char ConsoleType )
{
	static UFunction* pFnIsConsoleBuild = NULL;

	if ( ! pFnIsConsoleBuild )
		pFnIsConsoleBuild = (UFunction*) UObject::GObjObjects()->Data[ 7548 ];

	AWorldInfo_execIsConsoleBuild_Parms IsConsoleBuild_Parms;
	IsConsoleBuild_Parms.ConsoleType = ConsoleType;

	pFnIsConsoleBuild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsConsoleBuild, &IsConsoleBuild_Parms, NULL );

	pFnIsConsoleBuild->FunctionFlags |= 0x400;

	return IsConsoleBuild_Parms.ReturnValue;
};

// Function Engine.WorldInfo.UnloadStreamingLevels
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AWorldInfo::UnloadStreamingLevels ( )
{
	static UFunction* pFnUnloadStreamingLevels = NULL;

	if ( ! pFnUnloadStreamingLevels )
		pFnUnloadStreamingLevels = (UFunction*) UObject::GObjObjects()->Data[ 15491 ];

	AWorldInfo_execUnloadStreamingLevels_Parms UnloadStreamingLevels_Parms;

	pFnUnloadStreamingLevels->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnloadStreamingLevels, &UnloadStreamingLevels_Parms, NULL );

	pFnUnloadStreamingLevels->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.GetLockInputKey
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName AWorldInfo::GetLockInputKey ( )
{
	static UFunction* pFnGetLockInputKey = NULL;

	if ( ! pFnGetLockInputKey )
		pFnGetLockInputKey = (UFunction*) UObject::GObjObjects()->Data[ 15489 ];

	AWorldInfo_execGetLockInputKey_Parms GetLockInputKey_Parms;

	pFnGetLockInputKey->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLockInputKey, &GetLockInputKey_Parms, NULL );

	pFnGetLockInputKey->FunctionFlags |= 0x400;

	return GetLockInputKey_Parms.ReturnValue;
};

// Function Engine.WorldInfo.SetLockInputToControllerOnNextInput
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  b_iValue                       ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )

bool AWorldInfo::SetLockInputToControllerOnNextInput ( unsigned long b_iValue, struct FName Key )
{
	static UFunction* pFnSetLockInputToControllerOnNextInput = NULL;

	if ( ! pFnSetLockInputToControllerOnNextInput )
		pFnSetLockInputToControllerOnNextInput = (UFunction*) UObject::GObjObjects()->Data[ 15485 ];

	AWorldInfo_execSetLockInputToControllerOnNextInput_Parms SetLockInputToControllerOnNextInput_Parms;
	SetLockInputToControllerOnNextInput_Parms.b_iValue = b_iValue;
	memcpy ( &SetLockInputToControllerOnNextInput_Parms.Key, &Key, 0x8 );

	pFnSetLockInputToControllerOnNextInput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLockInputToControllerOnNextInput, &SetLockInputToControllerOnNextInput_Parms, NULL );

	pFnSetLockInputToControllerOnNextInput->FunctionFlags |= 0x400;

	return SetLockInputToControllerOnNextInput_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetLockInputToControllerOnNextInput
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::GetLockInputToControllerOnNextInput ( )
{
	static UFunction* pFnGetLockInputToControllerOnNextInput = NULL;

	if ( ! pFnGetLockInputToControllerOnNextInput )
		pFnGetLockInputToControllerOnNextInput = (UFunction*) UObject::GObjObjects()->Data[ 15483 ];

	AWorldInfo_execGetLockInputToControllerOnNextInput_Parms GetLockInputToControllerOnNextInput_Parms;

	pFnGetLockInputToControllerOnNextInput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLockInputToControllerOnNextInput, &GetLockInputToControllerOnNextInput_Parms, NULL );

	pFnGetLockInputToControllerOnNextInput->FunctionFlags |= 0x400;

	return GetLockInputToControllerOnNextInput_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsAbleToSave
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sReason                        ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AWorldInfo::IsAbleToSave ( struct FString* sReason )
{
	static UFunction* pFnIsAbleToSave = NULL;

	if ( ! pFnIsAbleToSave )
		pFnIsAbleToSave = (UFunction*) UObject::GObjObjects()->Data[ 15480 ];

	AWorldInfo_execIsAbleToSave_Parms IsAbleToSave_Parms;

	pFnIsAbleToSave->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAbleToSave, &IsAbleToSave_Parms, NULL );

	pFnIsAbleToSave->FunctionFlags |= 0x400;

	if ( sReason )
		memcpy ( sReason, &IsAbleToSave_Parms.sReason, 0x10 );

	return IsAbleToSave_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsDemoBuild
// [0x00022501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsDemoBuild ( )
{
	static UFunction* pFnIsDemoBuild = NULL;

	if ( ! pFnIsDemoBuild )
		pFnIsDemoBuild = (UFunction*) UObject::GObjObjects()->Data[ 15478 ];

	AWorldInfo_execIsDemoBuild_Parms IsDemoBuild_Parms;

	pFnIsDemoBuild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDemoBuild, &IsDemoBuild_Parms, NULL );

	pFnIsDemoBuild->FunctionFlags |= 0x400;

	return IsDemoBuild_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetLocalURL
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AWorldInfo::GetLocalURL ( )
{
	static UFunction* pFnGetLocalURL = NULL;

	if ( ! pFnGetLocalURL )
		pFnGetLocalURL = (UFunction*) UObject::GObjObjects()->Data[ 15476 ];

	AWorldInfo_execGetLocalURL_Parms GetLocalURL_Parms;

	pFnGetLocalURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLocalURL, &GetLocalURL_Parms, NULL );

	pFnGetLocalURL->FunctionFlags |= 0x400;

	return GetLocalURL_Parms.ReturnValue;
};

// Function Engine.WorldInfo.SetLevelRBGravity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewGrav                        ( CPF_Parm )

void AWorldInfo::SetLevelRBGravity ( struct FVector NewGrav )
{
	static UFunction* pFnSetLevelRBGravity = NULL;

	if ( ! pFnSetLevelRBGravity )
		pFnSetLevelRBGravity = (UFunction*) UObject::GObjObjects()->Data[ 15474 ];

	AWorldInfo_execSetLevelRBGravity_Parms SetLevelRBGravity_Parms;
	memcpy ( &SetLevelRBGravity_Parms.NewGrav, &NewGrav, 0xC );

	pFnSetLevelRBGravity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLevelRBGravity, &SetLevelRBGravity_Parms, NULL );

	pFnSetLevelRBGravity->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.GetAllRootSequences
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct TArray<class USequence*> ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct TArray<class USequence*> AWorldInfo::GetAllRootSequences ( )
{
	static UFunction* pFnGetAllRootSequences = NULL;

	if ( ! pFnGetAllRootSequences )
		pFnGetAllRootSequences = (UFunction*) UObject::GObjObjects()->Data[ 15471 ];

	AWorldInfo_execGetAllRootSequences_Parms GetAllRootSequences_Parms;

	pFnGetAllRootSequences->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAllRootSequences, &GetAllRootSequences_Parms, NULL );

	pFnGetAllRootSequences->FunctionFlags |= 0x400;

	return GetAllRootSequences_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetGameSequence
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USequence*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USequence* AWorldInfo::GetGameSequence ( )
{
	static UFunction* pFnGetGameSequence = NULL;

	if ( ! pFnGetGameSequence )
		pFnGetGameSequence = (UFunction*) UObject::GObjObjects()->Data[ 7041 ];

	AWorldInfo_execGetGameSequence_Parms GetGameSequence_Parms;

	pFnGetGameSequence->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGameSequence, &GetGameSequence_Parms, NULL );

	pFnGetGameSequence->FunctionFlags |= 0x400;

	return GetGameSequence_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetGravityZ
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWorldInfo::GetGravityZ ( )
{
	static UFunction* pFnGetGravityZ = NULL;

	if ( ! pFnGetGravityZ )
		pFnGetGravityZ = (UFunction*) UObject::GObjObjects()->Data[ 15469 ];

	AWorldInfo_execGetGravityZ_Parms GetGravityZ_Parms;

	pFnGetGravityZ->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGravityZ, &GetGravityZ_Parms, NULL );

	pFnGetGravityZ->FunctionFlags |= 0x400;

	return GetGravityZ_Parms.ReturnValue;
};

// Function Engine.WorldInfo.UpdateMusicTrack
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMusicTrackStruct       NewMusicTrack                  ( CPF_Parm )

void AWorldInfo::UpdateMusicTrack ( struct FMusicTrackStruct NewMusicTrack )
{
	static UFunction* pFnUpdateMusicTrack = NULL;

	if ( ! pFnUpdateMusicTrack )
		pFnUpdateMusicTrack = (UFunction*) UObject::GObjObjects()->Data[ 15458 ];

	AWorldInfo_execUpdateMusicTrack_Parms UpdateMusicTrack_Parms;
	memcpy ( &UpdateMusicTrack_Parms.NewMusicTrack, &NewMusicTrack, 0x24 );

	pFnUpdateMusicTrack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateMusicTrack, &UpdateMusicTrack_Parms, NULL );

	pFnUpdateMusicTrack->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.IsMenuLevel
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MapName                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool AWorldInfo::IsMenuLevel ( struct FString MapName )
{
	static UFunction* pFnIsMenuLevel = NULL;

	if ( ! pFnIsMenuLevel )
		pFnIsMenuLevel = (UFunction*) UObject::GObjObjects()->Data[ 15465 ];

	AWorldInfo_execIsMenuLevel_Parms IsMenuLevel_Parms;
	memcpy ( &IsMenuLevel_Parms.MapName, &MapName, 0x10 );

	pFnIsMenuLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMenuLevel, &IsMenuLevel_Parms, NULL );

	pFnIsMenuLevel->FunctionFlags |= 0x400;

	return IsMenuLevel_Parms.ReturnValue;
};

// Function Engine.WorldInfo.AddOnScreenDebugMessage
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            Key                            ( CPF_Parm )
// float                          TimeToDisplay                  ( CPF_Parm )
// struct FColor                  DisplayColor                   ( CPF_Parm )
// struct FString                 DebugMessage                   ( CPF_Parm | CPF_NeedCtorLink )

void AWorldInfo::AddOnScreenDebugMessage ( int Key, float TimeToDisplay, struct FColor DisplayColor, struct FString DebugMessage )
{
	static UFunction* pFnAddOnScreenDebugMessage = NULL;

	if ( ! pFnAddOnScreenDebugMessage )
		pFnAddOnScreenDebugMessage = (UFunction*) UObject::GObjObjects()->Data[ 15460 ];

	AWorldInfo_execAddOnScreenDebugMessage_Parms AddOnScreenDebugMessage_Parms;
	AddOnScreenDebugMessage_Parms.Key = Key;
	AddOnScreenDebugMessage_Parms.TimeToDisplay = TimeToDisplay;
	memcpy ( &AddOnScreenDebugMessage_Parms.DisplayColor, &DisplayColor, 0x4 );
	memcpy ( &AddOnScreenDebugMessage_Parms.DebugMessage, &DebugMessage, 0x10 );

	pFnAddOnScreenDebugMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddOnScreenDebugMessage, &AddOnScreenDebugMessage_Parms, NULL );

	pFnAddOnScreenDebugMessage->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AWorldInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 15456 ];

	AWorldInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.WorldInfo.GetNavMeshPathGoalEvaluatorFromCache
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UNavMeshPathGoalEvaluator* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  GoalEvalClass                  ( CPF_Parm )
// class UNavigationHandle*       Requestor                      ( CPF_Parm )

class UNavMeshPathGoalEvaluator* AWorldInfo::GetNavMeshPathGoalEvaluatorFromCache ( class UClass* GoalEvalClass, class UNavigationHandle* Requestor )
{
	static UFunction* pFnGetNavMeshPathGoalEvaluatorFromCache = NULL;

	if ( ! pFnGetNavMeshPathGoalEvaluatorFromCache )
		pFnGetNavMeshPathGoalEvaluatorFromCache = (UFunction*) UObject::GObjObjects()->Data[ 15452 ];

	AWorldInfo_execGetNavMeshPathGoalEvaluatorFromCache_Parms GetNavMeshPathGoalEvaluatorFromCache_Parms;
	GetNavMeshPathGoalEvaluatorFromCache_Parms.GoalEvalClass = GoalEvalClass;
	GetNavMeshPathGoalEvaluatorFromCache_Parms.Requestor = Requestor;

	pFnGetNavMeshPathGoalEvaluatorFromCache->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNavMeshPathGoalEvaluatorFromCache, &GetNavMeshPathGoalEvaluatorFromCache_Parms, NULL );

	pFnGetNavMeshPathGoalEvaluatorFromCache->FunctionFlags |= 0x400;

	return GetNavMeshPathGoalEvaluatorFromCache_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetNavMeshPathConstraintFromCache
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UNavMeshPathConstraint*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ConstraintClass                ( CPF_Parm )
// class UNavigationHandle*       Requestor                      ( CPF_Parm )

class UNavMeshPathConstraint* AWorldInfo::GetNavMeshPathConstraintFromCache ( class UClass* ConstraintClass, class UNavigationHandle* Requestor )
{
	static UFunction* pFnGetNavMeshPathConstraintFromCache = NULL;

	if ( ! pFnGetNavMeshPathConstraintFromCache )
		pFnGetNavMeshPathConstraintFromCache = (UFunction*) UObject::GObjObjects()->Data[ 15448 ];

	AWorldInfo_execGetNavMeshPathConstraintFromCache_Parms GetNavMeshPathConstraintFromCache_Parms;
	GetNavMeshPathConstraintFromCache_Parms.ConstraintClass = ConstraintClass;
	GetNavMeshPathConstraintFromCache_Parms.Requestor = Requestor;

	pFnGetNavMeshPathConstraintFromCache->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNavMeshPathConstraintFromCache, &GetNavMeshPathConstraintFromCache_Parms, NULL );

	pFnGetNavMeshPathConstraintFromCache->FunctionFlags |= 0x400;

	return GetNavMeshPathConstraintFromCache_Parms.ReturnValue;
};

// Function Engine.WorldInfo.ReleaseCachedConstraintsAndEvaluators
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AWorldInfo::ReleaseCachedConstraintsAndEvaluators ( )
{
	static UFunction* pFnReleaseCachedConstraintsAndEvaluators = NULL;

	if ( ! pFnReleaseCachedConstraintsAndEvaluators )
		pFnReleaseCachedConstraintsAndEvaluators = (UFunction*) UObject::GObjObjects()->Data[ 15447 ];

	AWorldInfo_execReleaseCachedConstraintsAndEvaluators_Parms ReleaseCachedConstraintsAndEvaluators_Parms;

	pFnReleaseCachedConstraintsAndEvaluators->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReleaseCachedConstraintsAndEvaluators, &ReleaseCachedConstraintsAndEvaluators_Parms, NULL );

	pFnReleaseCachedConstraintsAndEvaluators->FunctionFlags |= 0x400;
};

// Function Engine.Inventory.OwnerEvent
// [0x00020000] 
// Parameters infos:
// struct FName                   EventName                      ( CPF_Parm )

void AInventory::OwnerEvent ( struct FName EventName )
{
	static UFunction* pFnOwnerEvent = NULL;

	if ( ! pFnOwnerEvent )
		pFnOwnerEvent = (UFunction*) UObject::GObjObjects()->Data[ 22966 ];

	AInventory_execOwnerEvent_Parms OwnerEvent_Parms;
	memcpy ( &OwnerEvent_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnOwnerEvent, &OwnerEvent_Parms, NULL );
};

// Function Engine.Inventory.GetLocalString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )

struct FString AInventory::GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 )
{
	static UFunction* pFnGetLocalString = NULL;

	if ( ! pFnGetLocalString )
		pFnGetLocalString = (UFunction*) UObject::GObjObjects()->Data[ 22960 ];

	AInventory_execGetLocalString_Parms GetLocalString_Parms;
	GetLocalString_Parms.Switch = Switch;
	GetLocalString_Parms.RelatedPRI = RelatedPRI;
	GetLocalString_Parms.RelatedPRI01 = RelatedPRI01;

	this->ProcessEvent ( pFnGetLocalString, &GetLocalString_Parms, NULL );

	return GetLocalString_Parms.ReturnValue;
};

// Function Engine.Inventory.DropFrom
// [0x00020002] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FVector                 StartVelocity                  ( CPF_Parm )

void AInventory::DropFrom ( struct FVector StartLocation, struct FVector StartVelocity )
{
	static UFunction* pFnDropFrom = NULL;

	if ( ! pFnDropFrom )
		pFnDropFrom = (UFunction*) UObject::GObjObjects()->Data[ 22955 ];

	AInventory_execDropFrom_Parms DropFrom_Parms;
	memcpy ( &DropFrom_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &DropFrom_Parms.StartVelocity, &StartVelocity, 0xC );

	this->ProcessEvent ( pFnDropFrom, &DropFrom_Parms, NULL );
};

// Function Engine.Inventory.DenyPickupQuery
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )

bool AInventory::DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup )
{
	static UFunction* pFnDenyPickupQuery = NULL;

	if ( ! pFnDenyPickupQuery )
		pFnDenyPickupQuery = (UFunction*) UObject::GObjObjects()->Data[ 22951 ];

	AInventory_execDenyPickupQuery_Parms DenyPickupQuery_Parms;
	DenyPickupQuery_Parms.ItemClass = ItemClass;
	DenyPickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnDenyPickupQuery, &DenyPickupQuery_Parms, NULL );

	return DenyPickupQuery_Parms.ReturnValue;
};

// Function Engine.Inventory.ItemRemovedFromInvManager
// [0x00020000] 
// Parameters infos:

void AInventory::ItemRemovedFromInvManager ( )
{
	static UFunction* pFnItemRemovedFromInvManager = NULL;

	if ( ! pFnItemRemovedFromInvManager )
		pFnItemRemovedFromInvManager = (UFunction*) UObject::GObjObjects()->Data[ 22950 ];

	AInventory_execItemRemovedFromInvManager_Parms ItemRemovedFromInvManager_Parms;

	this->ProcessEvent ( pFnItemRemovedFromInvManager, &ItemRemovedFromInvManager_Parms, NULL );
};

// Function Engine.Inventory.ClientGivenTo
// [0x010201C2] 
// Parameters infos:
// class APawn*                   NewOwner                       ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_Parm )

void AInventory::ClientGivenTo ( class APawn* NewOwner, unsigned long bDoNotActivate )
{
	static UFunction* pFnClientGivenTo = NULL;

	if ( ! pFnClientGivenTo )
		pFnClientGivenTo = (UFunction*) UObject::GObjObjects()->Data[ 22947 ];

	AInventory_execClientGivenTo_Parms ClientGivenTo_Parms;
	ClientGivenTo_Parms.NewOwner = NewOwner;
	ClientGivenTo_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnClientGivenTo, &ClientGivenTo_Parms, NULL );
};

// Function Engine.Inventory.GivenTo
// [0x00024002] 
// Parameters infos:
// class APawn*                   thisPawn                       ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void AInventory::GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate )
{
	static UFunction* pFnGivenTo = NULL;

	if ( ! pFnGivenTo )
		pFnGivenTo = (UFunction*) UObject::GObjObjects()->Data[ 22944 ];

	AInventory_execGivenTo_Parms GivenTo_Parms;
	GivenTo_Parms.thisPawn = thisPawn;
	GivenTo_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnGivenTo, &GivenTo_Parms, NULL );
};

// Function Engine.Inventory.AnnouncePickup
// [0x00020002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void AInventory::AnnouncePickup ( class APawn* Other )
{
	static UFunction* pFnAnnouncePickup = NULL;

	if ( ! pFnAnnouncePickup )
		pFnAnnouncePickup = (UFunction*) UObject::GObjObjects()->Data[ 22941 ];

	AInventory_execAnnouncePickup_Parms AnnouncePickup_Parms;
	AnnouncePickup_Parms.Other = Other;

	this->ProcessEvent ( pFnAnnouncePickup, &AnnouncePickup_Parms, NULL );
};

// Function Engine.Inventory.GiveTo
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void AInventory::GiveTo ( class APawn* Other )
{
	static UFunction* pFnGiveTo = NULL;

	if ( ! pFnGiveTo )
		pFnGiveTo = (UFunction*) UObject::GObjObjects()->Data[ 19025 ];

	AInventory_execGiveTo_Parms GiveTo_Parms;
	GiveTo_Parms.Other = Other;

	this->ProcessEvent ( pFnGiveTo, &GiveTo_Parms, NULL );
};

// Function Engine.Inventory.DetourWeight
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )
// float                          PathWeight                     ( CPF_Parm )

float AInventory::DetourWeight ( class APawn* Other, float PathWeight )
{
	static UFunction* pFnDetourWeight = NULL;

	if ( ! pFnDetourWeight )
		pFnDetourWeight = (UFunction*) UObject::GObjObjects()->Data[ 19018 ];

	AInventory_execDetourWeight_Parms DetourWeight_Parms;
	DetourWeight_Parms.Other = Other;
	DetourWeight_Parms.PathWeight = PathWeight;

	this->ProcessEvent ( pFnDetourWeight, &DetourWeight_Parms, NULL );

	return DetourWeight_Parms.ReturnValue;
};

// Function Engine.Inventory.BotDesireability
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  PickupHolder                   ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )
// class AController*             C                              ( CPF_Parm )

float AInventory::BotDesireability ( class AActor* PickupHolder, class APawn* P, class AController* C )
{
	static UFunction* pFnBotDesireability = NULL;

	if ( ! pFnBotDesireability )
		pFnBotDesireability = (UFunction*) UObject::GObjObjects()->Data[ 22927 ];

	AInventory_execBotDesireability_Parms BotDesireability_Parms;
	BotDesireability_Parms.PickupHolder = PickupHolder;
	BotDesireability_Parms.P = P;
	BotDesireability_Parms.C = C;

	this->ProcessEvent ( pFnBotDesireability, &BotDesireability_Parms, NULL );

	return BotDesireability_Parms.ReturnValue;
};

// Function Engine.Inventory.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AInventory::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 22926 ];

	AInventory_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Inventory.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AInventory::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = (UFunction*) UObject::GObjObjects()->Data[ 22923 ];

	AInventory_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.Inventory.ActiveRenderOverlays
// [0x00020100] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void AInventory::ActiveRenderOverlays ( class AHUD* H )
{
	static UFunction* pFnActiveRenderOverlays = NULL;

	if ( ! pFnActiveRenderOverlays )
		pFnActiveRenderOverlays = (UFunction*) UObject::GObjObjects()->Data[ 22921 ];

	AInventory_execActiveRenderOverlays_Parms ActiveRenderOverlays_Parms;
	ActiveRenderOverlays_Parms.H = H;

	this->ProcessEvent ( pFnActiveRenderOverlays, &ActiveRenderOverlays_Parms, NULL );
};

// Function Engine.Inventory.RenderOverlays
// [0x00020100] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void AInventory::RenderOverlays ( class AHUD* H )
{
	static UFunction* pFnRenderOverlays = NULL;

	if ( ! pFnRenderOverlays )
		pFnRenderOverlays = (UFunction*) UObject::GObjObjects()->Data[ 22919 ];

	AInventory_execRenderOverlays_Parms RenderOverlays_Parms;
	RenderOverlays_Parms.H = H;

	this->ProcessEvent ( pFnRenderOverlays, &RenderOverlays_Parms, NULL );
};

// Function Engine.Weapon.CacheAIController
// [0x00020102] 
// Parameters infos:

void AWeapon::CacheAIController ( )
{
	static UFunction* pFnCacheAIController = NULL;

	if ( ! pFnCacheAIController )
		pFnCacheAIController = (UFunction*) UObject::GObjObjects()->Data[ 36281 ];

	AWeapon_execCacheAIController_Parms CacheAIController_Parms;

	this->ProcessEvent ( pFnCacheAIController, &CacheAIController_Parms, NULL );
};

// Function Engine.Weapon.WeaponIsDown
// [0x00020100] 
// Parameters infos:

void AWeapon::WeaponIsDown ( )
{
	static UFunction* pFnWeaponIsDown = NULL;

	if ( ! pFnWeaponIsDown )
		pFnWeaponIsDown = (UFunction*) UObject::GObjObjects()->Data[ 36274 ];

	AWeapon_execWeaponIsDown_Parms WeaponIsDown_Parms;

	this->ProcessEvent ( pFnWeaponIsDown, &WeaponIsDown_Parms, NULL );
};

// Function Engine.Weapon.StillFiring
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireMode                       ( CPF_Parm )

bool AWeapon::StillFiring ( unsigned char FireMode )
{
	static UFunction* pFnStillFiring = NULL;

	if ( ! pFnStillFiring )
		pFnStillFiring = (UFunction*) UObject::GObjObjects()->Data[ 36255 ];

	AWeapon_execStillFiring_Parms StillFiring_Parms;
	StillFiring_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnStillFiring, &StillFiring_Parms, NULL );

	return StillFiring_Parms.ReturnValue;
};

// Function Engine.Weapon.ShouldRefire
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::ShouldRefire ( )
{
	static UFunction* pFnShouldRefire = NULL;

	if ( ! pFnShouldRefire )
		pFnShouldRefire = (UFunction*) UObject::GObjObjects()->Data[ 36253 ];

	AWeapon_execShouldRefire_Parms ShouldRefire_Parms;

	this->ProcessEvent ( pFnShouldRefire, &ShouldRefire_Parms, NULL );

	return ShouldRefire_Parms.ReturnValue;
};

// Function Engine.Weapon.NotifyWeaponFinishedFiring
// [0x00020002] 
// Parameters infos:
// unsigned char                  FireMode                       ( CPF_Parm )

void AWeapon::NotifyWeaponFinishedFiring ( unsigned char FireMode )
{
	static UFunction* pFnNotifyWeaponFinishedFiring = NULL;

	if ( ! pFnNotifyWeaponFinishedFiring )
		pFnNotifyWeaponFinishedFiring = (UFunction*) UObject::GObjObjects()->Data[ 36251 ];

	AWeapon_execNotifyWeaponFinishedFiring_Parms NotifyWeaponFinishedFiring_Parms;
	NotifyWeaponFinishedFiring_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyWeaponFinishedFiring, &NotifyWeaponFinishedFiring_Parms, NULL );
};

// Function Engine.Weapon.NotifyWeaponFired
// [0x00020002] 
// Parameters infos:
// unsigned char                  FireMode                       ( CPF_Parm )

void AWeapon::NotifyWeaponFired ( unsigned char FireMode )
{
	static UFunction* pFnNotifyWeaponFired = NULL;

	if ( ! pFnNotifyWeaponFired )
		pFnNotifyWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 36249 ];

	AWeapon_execNotifyWeaponFired_Parms NotifyWeaponFired_Parms;
	NotifyWeaponFired_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyWeaponFired, &NotifyWeaponFired_Parms, NULL );
};

// Function Engine.Weapon.HandleFinishedFiring
// [0x00020102] 
// Parameters infos:

void AWeapon::HandleFinishedFiring ( )
{
	static UFunction* pFnHandleFinishedFiring = NULL;

	if ( ! pFnHandleFinishedFiring )
		pFnHandleFinishedFiring = (UFunction*) UObject::GObjObjects()->Data[ 36248 ];

	AWeapon_execHandleFinishedFiring_Parms HandleFinishedFiring_Parms;

	this->ProcessEvent ( pFnHandleFinishedFiring, &HandleFinishedFiring_Parms, NULL );
};

// Function Engine.Weapon.TryPutDown
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::TryPutDown ( )
{
	static UFunction* pFnTryPutDown = NULL;

	if ( ! pFnTryPutDown )
		pFnTryPutDown = (UFunction*) UObject::GObjObjects()->Data[ 23090 ];

	AWeapon_execTryPutDown_Parms TryPutDown_Parms;

	this->ProcessEvent ( pFnTryPutDown, &TryPutDown_Parms, NULL );

	return TryPutDown_Parms.ReturnValue;
};

// Function Engine.Weapon.GetPhysicalFireStartLoc
// [0x00024D00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 AimDir                         ( CPF_OptionalParm | CPF_Parm )

struct FVector AWeapon::eventGetPhysicalFireStartLoc ( struct FVector AimDir )
{
	static UFunction* pFnGetPhysicalFireStartLoc = NULL;

	if ( ! pFnGetPhysicalFireStartLoc )
		pFnGetPhysicalFireStartLoc = (UFunction*) UObject::GObjObjects()->Data[ 36214 ];

	AWeapon_eventGetPhysicalFireStartLoc_Parms GetPhysicalFireStartLoc_Parms;
	memcpy ( &GetPhysicalFireStartLoc_Parms.AimDir, &AimDir, 0xC );

	pFnGetPhysicalFireStartLoc->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPhysicalFireStartLoc, &GetPhysicalFireStartLoc_Parms, NULL );

	pFnGetPhysicalFireStartLoc->FunctionFlags |= 0x400;

	return GetPhysicalFireStartLoc_Parms.ReturnValue;
};

// Function Engine.Weapon.GetMuzzleLoc
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector AWeapon::eventGetMuzzleLoc ( )
{
	static UFunction* pFnGetMuzzleLoc = NULL;

	if ( ! pFnGetMuzzleLoc )
		pFnGetMuzzleLoc = (UFunction*) UObject::GObjObjects()->Data[ 36211 ];

	AWeapon_eventGetMuzzleLoc_Parms GetMuzzleLoc_Parms;

	this->ProcessEvent ( pFnGetMuzzleLoc, &GetMuzzleLoc_Parms, NULL );

	return GetMuzzleLoc_Parms.ReturnValue;
};

// Function Engine.Weapon.CustomFire
// [0x00020100] 
// Parameters infos:

void AWeapon::CustomFire ( )
{
	static UFunction* pFnCustomFire = NULL;

	if ( ! pFnCustomFire )
		pFnCustomFire = (UFunction*) UObject::GObjObjects()->Data[ 36210 ];

	AWeapon_execCustomFire_Parms CustomFire_Parms;

	this->ProcessEvent ( pFnCustomFire, &CustomFire_Parms, NULL );
};

// Function Engine.Weapon.ProjectileFire
// [0x00020102] 
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AProjectile* AWeapon::ProjectileFire ( )
{
	static UFunction* pFnProjectileFire = NULL;

	if ( ! pFnProjectileFire )
		pFnProjectileFire = (UFunction*) UObject::GObjObjects()->Data[ 36202 ];

	AWeapon_execProjectileFire_Parms ProjectileFire_Parms;

	this->ProcessEvent ( pFnProjectileFire, &ProjectileFire_Parms, NULL );

	return ProjectileFire_Parms.ReturnValue;
};

// Function Engine.Weapon.ProcessInstantHit
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )

void AWeapon::ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits )
{
	static UFunction* pFnProcessInstantHit = NULL;

	if ( ! pFnProcessInstantHit )
		pFnProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 36195 ];

	AWeapon_execProcessInstantHit_Parms ProcessInstantHit_Parms;
	ProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &ProcessInstantHit_Parms.Impact, &Impact, 0x60 );
	ProcessInstantHit_Parms.NumHits = NumHits;

	this->ProcessEvent ( pFnProcessInstantHit, &ProcessInstantHit_Parms, NULL );
};

// Function Engine.Weapon.InstantFire
// [0x00020102] 
// Parameters infos:

void AWeapon::InstantFire ( )
{
	static UFunction* pFnInstantFire = NULL;

	if ( ! pFnInstantFire )
		pFnInstantFire = (UFunction*) UObject::GObjObjects()->Data[ 36188 ];

	AWeapon_execInstantFire_Parms InstantFire_Parms;

	this->ProcessEvent ( pFnInstantFire, &InstantFire_Parms, NULL );
};

// Function Engine.Weapon.PassThroughDamage
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  HitActor                       ( CPF_Parm )

bool AWeapon::PassThroughDamage ( class AActor* HitActor )
{
	static UFunction* pFnPassThroughDamage = NULL;

	if ( ! pFnPassThroughDamage )
		pFnPassThroughDamage = (UFunction*) UObject::GObjObjects()->Data[ 36185 ];

	AWeapon_execPassThroughDamage_Parms PassThroughDamage_Parms;
	PassThroughDamage_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnPassThroughDamage, &PassThroughDamage_Parms, NULL );

	return PassThroughDamage_Parms.ReturnValue;
};

// Function Engine.Weapon.CalcWeaponFire
// [0x00424102] 
// Parameters infos:
// struct FImpactInfo             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 EndTrace                       ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// struct TArray<struct FImpactInfo> ImpactList                     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FImpactInfo AWeapon::CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, struct TArray<struct FImpactInfo>* ImpactList )
{
	static UFunction* pFnCalcWeaponFire = NULL;

	if ( ! pFnCalcWeaponFire )
		pFnCalcWeaponFire = (UFunction*) UObject::GObjObjects()->Data[ 36169 ];

	AWeapon_execCalcWeaponFire_Parms CalcWeaponFire_Parms;
	memcpy ( &CalcWeaponFire_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &CalcWeaponFire_Parms.EndTrace, &EndTrace, 0xC );
	memcpy ( &CalcWeaponFire_Parms.Extent, &Extent, 0xC );

	this->ProcessEvent ( pFnCalcWeaponFire, &CalcWeaponFire_Parms, NULL );

	if ( ImpactList )
		memcpy ( ImpactList, &CalcWeaponFire_Parms.ImpactList, 0x10 );

	return CalcWeaponFire_Parms.ReturnValue;
};

// Function Engine.Weapon.GetTraceOwner
// [0x00020102] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* AWeapon::GetTraceOwner ( )
{
	static UFunction* pFnGetTraceOwner = NULL;

	if ( ! pFnGetTraceOwner )
		pFnGetTraceOwner = (UFunction*) UObject::GObjObjects()->Data[ 36167 ];

	AWeapon_execGetTraceOwner_Parms GetTraceOwner_Parms;

	this->ProcessEvent ( pFnGetTraceOwner, &GetTraceOwner_Parms, NULL );

	return GetTraceOwner_Parms.ReturnValue;
};

// Function Engine.Weapon.GetTraceRange
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::eventGetTraceRange ( )
{
	static UFunction* pFnGetTraceRange = NULL;

	if ( ! pFnGetTraceRange )
		pFnGetTraceRange = (UFunction*) UObject::GObjObjects()->Data[ 10869 ];

	AWeapon_eventGetTraceRange_Parms GetTraceRange_Parms;

	this->ProcessEvent ( pFnGetTraceRange, &GetTraceRange_Parms, NULL );

	return GetTraceRange_Parms.ReturnValue;
};

// Function Engine.Weapon.GetAdjustedAim
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator AWeapon::eventGetAdjustedAim ( struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAim = NULL;

	if ( ! pFnGetAdjustedAim )
		pFnGetAdjustedAim = (UFunction*) UObject::GObjObjects()->Data[ 36163 ];

	AWeapon_eventGetAdjustedAim_Parms GetAdjustedAim_Parms;
	memcpy ( &GetAdjustedAim_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAim, &GetAdjustedAim_Parms, NULL );

	return GetAdjustedAim_Parms.ReturnValue;
};

// Function Engine.Weapon.FireAmmunition
// [0x00020102] 
// Parameters infos:

void AWeapon::FireAmmunition ( )
{
	static UFunction* pFnFireAmmunition = NULL;

	if ( ! pFnFireAmmunition )
		pFnFireAmmunition = (UFunction*) UObject::GObjObjects()->Data[ 36162 ];

	AWeapon_execFireAmmunition_Parms FireAmmunition_Parms;

	this->ProcessEvent ( pFnFireAmmunition, &FireAmmunition_Parms, NULL );
};

// Function Engine.Weapon.FireModeUpdated
// [0x00020100] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void AWeapon::FireModeUpdated ( unsigned char FiringMode, unsigned long bViaReplication )
{
	static UFunction* pFnFireModeUpdated = NULL;

	if ( ! pFnFireModeUpdated )
		pFnFireModeUpdated = (UFunction*) UObject::GObjObjects()->Data[ 36159 ];

	AWeapon_execFireModeUpdated_Parms FireModeUpdated_Parms;
	FireModeUpdated_Parms.FiringMode = FiringMode;
	FireModeUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFireModeUpdated, &FireModeUpdated_Parms, NULL );
};

// Function Engine.Weapon.SetCurrentFireMode
// [0x00020102] 
// Parameters infos:
// unsigned char                  FiringModeNum                  ( CPF_Parm )

void AWeapon::SetCurrentFireMode ( unsigned char FiringModeNum )
{
	static UFunction* pFnSetCurrentFireMode = NULL;

	if ( ! pFnSetCurrentFireMode )
		pFnSetCurrentFireMode = (UFunction*) UObject::GObjObjects()->Data[ 36157 ];

	AWeapon_execSetCurrentFireMode_Parms SetCurrentFireMode_Parms;
	SetCurrentFireMode_Parms.FiringModeNum = FiringModeNum;

	this->ProcessEvent ( pFnSetCurrentFireMode, &SetCurrentFireMode_Parms, NULL );
};

// Function Engine.Weapon.SendToFiringState
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::SendToFiringState ( unsigned char FireModeNum )
{
	static UFunction* pFnSendToFiringState = NULL;

	if ( ! pFnSendToFiringState )
		pFnSendToFiringState = (UFunction*) UObject::GObjObjects()->Data[ 36155 ];

	AWeapon_execSendToFiringState_Parms SendToFiringState_Parms;
	SendToFiringState_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnSendToFiringState, &SendToFiringState_Parms, NULL );
};

// Function Engine.Weapon.ForceEndFire
// [0x00020102] 
// Parameters infos:

void AWeapon::ForceEndFire ( )
{
	static UFunction* pFnForceEndFire = NULL;

	if ( ! pFnForceEndFire )
		pFnForceEndFire = (UFunction*) UObject::GObjObjects()->Data[ 36153 ];

	AWeapon_execForceEndFire_Parms ForceEndFire_Parms;

	this->ProcessEvent ( pFnForceEndFire, &ForceEndFire_Parms, NULL );
};

// Function Engine.Weapon.EndFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::EndFire ( unsigned char FireModeNum )
{
	static UFunction* pFnEndFire = NULL;

	if ( ! pFnEndFire )
		pFnEndFire = (UFunction*) UObject::GObjObjects()->Data[ 36151 ];

	AWeapon_execEndFire_Parms EndFire_Parms;
	EndFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnEndFire, &EndFire_Parms, NULL );
};

// Function Engine.Weapon.ServerStopFire
// [0x002200C2] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::ServerStopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnServerStopFire = NULL;

	if ( ! pFnServerStopFire )
		pFnServerStopFire = (UFunction*) UObject::GObjObjects()->Data[ 36149 ];

	AWeapon_execServerStopFire_Parms ServerStopFire_Parms;
	ServerStopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnServerStopFire, &ServerStopFire_Parms, NULL );
};

// Function Engine.Weapon.StopFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::StopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = (UFunction*) UObject::GObjObjects()->Data[ 36147 ];

	AWeapon_execStopFire_Parms StopFire_Parms;
	StopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function Engine.Weapon.BeginFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::BeginFire ( unsigned char FireModeNum )
{
	static UFunction* pFnBeginFire = NULL;

	if ( ! pFnBeginFire )
		pFnBeginFire = (UFunction*) UObject::GObjObjects()->Data[ 36145 ];

	AWeapon_execBeginFire_Parms BeginFire_Parms;
	BeginFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnBeginFire, &BeginFire_Parms, NULL );
};

// Function Engine.Weapon.ServerStartFire
// [0x002200C2] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::ServerStartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnServerStartFire = NULL;

	if ( ! pFnServerStartFire )
		pFnServerStartFire = (UFunction*) UObject::GObjObjects()->Data[ 36143 ];

	AWeapon_execServerStartFire_Parms ServerStartFire_Parms;
	ServerStartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnServerStartFire, &ServerStartFire_Parms, NULL );
};

// Function Engine.Weapon.StartFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 36141 ];

	AWeapon_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function Engine.Weapon.WeaponCalcCamera
// [0x00420100] 
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )
// struct FVector                 out_CamLoc                     ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_CamRot                     ( CPF_Parm | CPF_OutParm )

void AWeapon::WeaponCalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot )
{
	static UFunction* pFnWeaponCalcCamera = NULL;

	if ( ! pFnWeaponCalcCamera )
		pFnWeaponCalcCamera = (UFunction*) UObject::GObjObjects()->Data[ 36137 ];

	AWeapon_execWeaponCalcCamera_Parms WeaponCalcCamera_Parms;
	WeaponCalcCamera_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnWeaponCalcCamera, &WeaponCalcCamera_Parms, NULL );

	if ( out_CamLoc )
		memcpy ( out_CamLoc, &WeaponCalcCamera_Parms.out_CamLoc, 0xC );

	if ( out_CamRot )
		memcpy ( out_CamRot, &WeaponCalcCamera_Parms.out_CamRot, 0xC );
};

// Function Engine.Weapon.ClientWeaponSet
// [0x010241C2] 
// Parameters infos:
// unsigned long                  bOptionalSet                   ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void AWeapon::ClientWeaponSet ( unsigned long bOptionalSet, unsigned long bDoNotActivate )
{
	static UFunction* pFnClientWeaponSet = NULL;

	if ( ! pFnClientWeaponSet )
		pFnClientWeaponSet = (UFunction*) UObject::GObjObjects()->Data[ 36132 ];

	AWeapon_execClientWeaponSet_Parms ClientWeaponSet_Parms;
	ClientWeaponSet_Parms.bOptionalSet = bOptionalSet;
	ClientWeaponSet_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnClientWeaponSet, &ClientWeaponSet_Parms, NULL );
};

// Function Engine.Weapon.ClientGivenTo
// [0x010201C2] 
// Parameters infos:
// class APawn*                   NewOwner                       ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_Parm )

void AWeapon::ClientGivenTo ( class APawn* NewOwner, unsigned long bDoNotActivate )
{
	static UFunction* pFnClientGivenTo = NULL;

	if ( ! pFnClientGivenTo )
		pFnClientGivenTo = (UFunction*) UObject::GObjObjects()->Data[ 36129 ];

	AWeapon_execClientGivenTo_Parms ClientGivenTo_Parms;
	ClientGivenTo_Parms.NewOwner = NewOwner;
	ClientGivenTo_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnClientGivenTo, &ClientGivenTo_Parms, NULL );
};

// Function Engine.Weapon.AdjustFOVAngle
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          FOVAngle                       ( CPF_Parm )

float AWeapon::AdjustFOVAngle ( float FOVAngle )
{
	static UFunction* pFnAdjustFOVAngle = NULL;

	if ( ! pFnAdjustFOVAngle )
		pFnAdjustFOVAngle = (UFunction*) UObject::GObjObjects()->Data[ 36126 ];

	AWeapon_execAdjustFOVAngle_Parms AdjustFOVAngle_Parms;
	AdjustFOVAngle_Parms.FOVAngle = FOVAngle;

	this->ProcessEvent ( pFnAdjustFOVAngle, &AdjustFOVAngle_Parms, NULL );

	return AdjustFOVAngle_Parms.ReturnValue;
};

// Function Engine.Weapon.GetViewAxes
// [0x00420102] 
// Parameters infos:
// struct FVector                 XAxis                          ( CPF_Parm | CPF_OutParm )
// struct FVector                 YAxis                          ( CPF_Parm | CPF_OutParm )
// struct FVector                 ZAxis                          ( CPF_Parm | CPF_OutParm )

void AWeapon::GetViewAxes ( struct FVector* XAxis, struct FVector* YAxis, struct FVector* ZAxis )
{
	static UFunction* pFnGetViewAxes = NULL;

	if ( ! pFnGetViewAxes )
		pFnGetViewAxes = (UFunction*) UObject::GObjObjects()->Data[ 36121 ];

	AWeapon_execGetViewAxes_Parms GetViewAxes_Parms;

	this->ProcessEvent ( pFnGetViewAxes, &GetViewAxes_Parms, NULL );

	if ( XAxis )
		memcpy ( XAxis, &GetViewAxes_Parms.XAxis, 0xC );

	if ( YAxis )
		memcpy ( YAxis, &GetViewAxes_Parms.YAxis, 0xC );

	if ( ZAxis )
		memcpy ( ZAxis, &GetViewAxes_Parms.ZAxis, 0xC );
};

// Function Engine.Weapon.DetachWeapon
// [0x00020100] 
// Parameters infos:

void AWeapon::DetachWeapon ( )
{
	static UFunction* pFnDetachWeapon = NULL;

	if ( ! pFnDetachWeapon )
		pFnDetachWeapon = (UFunction*) UObject::GObjObjects()->Data[ 36120 ];

	AWeapon_execDetachWeapon_Parms DetachWeapon_Parms;

	this->ProcessEvent ( pFnDetachWeapon, &DetachWeapon_Parms, NULL );
};

// Function Engine.Weapon.AttachWeaponTo
// [0x00024100] 
// Parameters infos:
// class USkeletalMeshComponent*  MeshCpnt                       ( CPF_Parm | CPF_EditInline )
// struct FName                   SocketName                     ( CPF_OptionalParm | CPF_Parm )

void AWeapon::AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName )
{
	static UFunction* pFnAttachWeaponTo = NULL;

	if ( ! pFnAttachWeaponTo )
		pFnAttachWeaponTo = (UFunction*) UObject::GObjObjects()->Data[ 36117 ];

	AWeapon_execAttachWeaponTo_Parms AttachWeaponTo_Parms;
	AttachWeaponTo_Parms.MeshCpnt = MeshCpnt;
	memcpy ( &AttachWeaponTo_Parms.SocketName, &SocketName, 0x8 );

	this->ProcessEvent ( pFnAttachWeaponTo, &AttachWeaponTo_Parms, NULL );
};

// Function Engine.Weapon.ClearFlashLocation
// [0x00020002] 
// Parameters infos:

void AWeapon::ClearFlashLocation ( )
{
	static UFunction* pFnClearFlashLocation = NULL;

	if ( ! pFnClearFlashLocation )
		pFnClearFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 36116 ];

	AWeapon_execClearFlashLocation_Parms ClearFlashLocation_Parms;

	this->ProcessEvent ( pFnClearFlashLocation, &ClearFlashLocation_Parms, NULL );
};

// Function Engine.Weapon.SetFlashLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void AWeapon::SetFlashLocation ( struct FVector HitLocation )
{
	static UFunction* pFnSetFlashLocation = NULL;

	if ( ! pFnSetFlashLocation )
		pFnSetFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 36114 ];

	AWeapon_execSetFlashLocation_Parms SetFlashLocation_Parms;
	memcpy ( &SetFlashLocation_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnSetFlashLocation, &SetFlashLocation_Parms, NULL );
};

// Function Engine.Weapon.ClearFlashCount
// [0x00020102] 
// Parameters infos:

void AWeapon::ClearFlashCount ( )
{
	static UFunction* pFnClearFlashCount = NULL;

	if ( ! pFnClearFlashCount )
		pFnClearFlashCount = (UFunction*) UObject::GObjObjects()->Data[ 36113 ];

	AWeapon_execClearFlashCount_Parms ClearFlashCount_Parms;

	this->ProcessEvent ( pFnClearFlashCount, &ClearFlashCount_Parms, NULL );
};

// Function Engine.Weapon.IncrementFlashCount
// [0x00020102] 
// Parameters infos:

void AWeapon::IncrementFlashCount ( )
{
	static UFunction* pFnIncrementFlashCount = NULL;

	if ( ! pFnIncrementFlashCount )
		pFnIncrementFlashCount = (UFunction*) UObject::GObjObjects()->Data[ 36112 ];

	AWeapon_execIncrementFlashCount_Parms IncrementFlashCount_Parms;

	this->ProcessEvent ( pFnIncrementFlashCount, &IncrementFlashCount_Parms, NULL );
};

// Function Engine.Weapon.WeaponEmpty
// [0x00020100] 
// Parameters infos:

void AWeapon::WeaponEmpty ( )
{
	static UFunction* pFnWeaponEmpty = NULL;

	if ( ! pFnWeaponEmpty )
		pFnWeaponEmpty = (UFunction*) UObject::GObjObjects()->Data[ 36111 ];

	AWeapon_execWeaponEmpty_Parms WeaponEmpty_Parms;

	this->ProcessEvent ( pFnWeaponEmpty, &WeaponEmpty_Parms, NULL );
};

// Function Engine.Weapon.DenyPickupQuery
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )

bool AWeapon::DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup )
{
	static UFunction* pFnDenyPickupQuery = NULL;

	if ( ! pFnDenyPickupQuery )
		pFnDenyPickupQuery = (UFunction*) UObject::GObjObjects()->Data[ 36107 ];

	AWeapon_execDenyPickupQuery_Parms DenyPickupQuery_Parms;
	DenyPickupQuery_Parms.ItemClass = ItemClass;
	DenyPickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnDenyPickupQuery, &DenyPickupQuery_Parms, NULL );

	return DenyPickupQuery_Parms.ReturnValue;
};

// Function Engine.Weapon.PutDownWeapon
// [0x00020102] 
// Parameters infos:

void AWeapon::PutDownWeapon ( )
{
	static UFunction* pFnPutDownWeapon = NULL;

	if ( ! pFnPutDownWeapon )
		pFnPutDownWeapon = (UFunction*) UObject::GObjObjects()->Data[ 36106 ];

	AWeapon_execPutDownWeapon_Parms PutDownWeapon_Parms;

	this->ProcessEvent ( pFnPutDownWeapon, &PutDownWeapon_Parms, NULL );
};

// Function Engine.Weapon.Activate
// [0x00020102] 
// Parameters infos:

void AWeapon::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = (UFunction*) UObject::GObjObjects()->Data[ 36105 ];

	AWeapon_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function Engine.Weapon.TimeWeaponEquipping
// [0x00020102] 
// Parameters infos:

void AWeapon::TimeWeaponEquipping ( )
{
	static UFunction* pFnTimeWeaponEquipping = NULL;

	if ( ! pFnTimeWeaponEquipping )
		pFnTimeWeaponEquipping = (UFunction*) UObject::GObjObjects()->Data[ 36103 ];

	AWeapon_execTimeWeaponEquipping_Parms TimeWeaponEquipping_Parms;

	this->ProcessEvent ( pFnTimeWeaponEquipping, &TimeWeaponEquipping_Parms, NULL );
};

// Function Engine.Weapon.TimeWeaponPutDown
// [0x00020102] 
// Parameters infos:

void AWeapon::TimeWeaponPutDown ( )
{
	static UFunction* pFnTimeWeaponPutDown = NULL;

	if ( ! pFnTimeWeaponPutDown )
		pFnTimeWeaponPutDown = (UFunction*) UObject::GObjObjects()->Data[ 36101 ];

	AWeapon_execTimeWeaponPutDown_Parms TimeWeaponPutDown_Parms;

	this->ProcessEvent ( pFnTimeWeaponPutDown, &TimeWeaponPutDown_Parms, NULL );
};

// Function Engine.Weapon.RefireCheckTimer
// [0x00020100] 
// Parameters infos:

void AWeapon::RefireCheckTimer ( )
{
	static UFunction* pFnRefireCheckTimer = NULL;

	if ( ! pFnRefireCheckTimer )
		pFnRefireCheckTimer = (UFunction*) UObject::GObjObjects()->Data[ 36100 ];

	AWeapon_execRefireCheckTimer_Parms RefireCheckTimer_Parms;

	this->ProcessEvent ( pFnRefireCheckTimer, &RefireCheckTimer_Parms, NULL );
};

// Function Engine.Weapon.TimeWeaponFiring
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::TimeWeaponFiring ( unsigned char FireModeNum )
{
	static UFunction* pFnTimeWeaponFiring = NULL;

	if ( ! pFnTimeWeaponFiring )
		pFnTimeWeaponFiring = (UFunction*) UObject::GObjObjects()->Data[ 36098 ];

	AWeapon_execTimeWeaponFiring_Parms TimeWeaponFiring_Parms;
	TimeWeaponFiring_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnTimeWeaponFiring, &TimeWeaponFiring_Parms, NULL );
};

// Function Engine.Weapon.GetFireInterval
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

float AWeapon::GetFireInterval ( unsigned char FireModeNum )
{
	static UFunction* pFnGetFireInterval = NULL;

	if ( ! pFnGetFireInterval )
		pFnGetFireInterval = (UFunction*) UObject::GObjObjects()->Data[ 36095 ];

	AWeapon_execGetFireInterval_Parms GetFireInterval_Parms;
	GetFireInterval_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnGetFireInterval, &GetFireInterval_Parms, NULL );

	return GetFireInterval_Parms.ReturnValue;
};

// Function Engine.Weapon.PlayFiringSound
// [0x00020100] 
// Parameters infos:

void AWeapon::PlayFiringSound ( )
{
	static UFunction* pFnPlayFiringSound = NULL;

	if ( ! pFnPlayFiringSound )
		pFnPlayFiringSound = (UFunction*) UObject::GObjObjects()->Data[ 36094 ];

	AWeapon_execPlayFiringSound_Parms PlayFiringSound_Parms;

	this->ProcessEvent ( pFnPlayFiringSound, &PlayFiringSound_Parms, NULL );
};

// Function Engine.Weapon.StopFireEffects
// [0x00020100] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::StopFireEffects ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFireEffects = NULL;

	if ( ! pFnStopFireEffects )
		pFnStopFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 36092 ];

	AWeapon_execStopFireEffects_Parms StopFireEffects_Parms;
	StopFireEffects_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFireEffects, &StopFireEffects_Parms, NULL );
};

// Function Engine.Weapon.PlayFireEffects
// [0x00024100] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void AWeapon::PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation )
{
	static UFunction* pFnPlayFireEffects = NULL;

	if ( ! pFnPlayFireEffects )
		pFnPlayFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 36089 ];

	AWeapon_execPlayFireEffects_Parms PlayFireEffects_Parms;
	PlayFireEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &PlayFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireEffects, &PlayFireEffects_Parms, NULL );
};

// Function Engine.Weapon.StopWeaponAnimation
// [0x00020102] 
// Parameters infos:

void AWeapon::StopWeaponAnimation ( )
{
	static UFunction* pFnStopWeaponAnimation = NULL;

	if ( ! pFnStopWeaponAnimation )
		pFnStopWeaponAnimation = (UFunction*) UObject::GObjObjects()->Data[ 36087 ];

	AWeapon_execStopWeaponAnimation_Parms StopWeaponAnimation_Parms;

	this->ProcessEvent ( pFnStopWeaponAnimation, &StopWeaponAnimation_Parms, NULL );
};

// Function Engine.Weapon.PlayWeaponAnimation
// [0x00024102] 
// Parameters infos:
// struct FName                   Sequence                       ( CPF_Parm )
// float                          fDesiredDuration               ( CPF_Parm )
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_OptionalParm | CPF_Parm | CPF_EditInline )

void AWeapon::PlayWeaponAnimation ( struct FName Sequence, float fDesiredDuration, unsigned long bLoop, class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnPlayWeaponAnimation = NULL;

	if ( ! pFnPlayWeaponAnimation )
		pFnPlayWeaponAnimation = (UFunction*) UObject::GObjObjects()->Data[ 36079 ];

	AWeapon_execPlayWeaponAnimation_Parms PlayWeaponAnimation_Parms;
	memcpy ( &PlayWeaponAnimation_Parms.Sequence, &Sequence, 0x8 );
	PlayWeaponAnimation_Parms.fDesiredDuration = fDesiredDuration;
	PlayWeaponAnimation_Parms.bLoop = bLoop;
	PlayWeaponAnimation_Parms.SkelMesh = SkelMesh;

	this->ProcessEvent ( pFnPlayWeaponAnimation, &PlayWeaponAnimation_Parms, NULL );
};

// Function Engine.Weapon.WeaponPlaySound
// [0x00024102] 
// Parameters infos:
// class USoundCue*               Sound                          ( CPF_Parm )
// float                          NoiseLoudness                  ( CPF_OptionalParm | CPF_Parm )

void AWeapon::WeaponPlaySound ( class USoundCue* Sound, float NoiseLoudness )
{
	static UFunction* pFnWeaponPlaySound = NULL;

	if ( ! pFnWeaponPlaySound )
		pFnWeaponPlaySound = (UFunction*) UObject::GObjObjects()->Data[ 36076 ];

	AWeapon_execWeaponPlaySound_Parms WeaponPlaySound_Parms;
	WeaponPlaySound_Parms.Sound = Sound;
	WeaponPlaySound_Parms.NoiseLoudness = NoiseLoudness;

	this->ProcessEvent ( pFnWeaponPlaySound, &WeaponPlaySound_Parms, NULL );
};

// Function Engine.Weapon.GetWeaponAnimNodeSeq
// [0x00020102] 
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAnimNodeSequence* AWeapon::GetWeaponAnimNodeSeq ( )
{
	static UFunction* pFnGetWeaponAnimNodeSeq = NULL;

	if ( ! pFnGetWeaponAnimNodeSeq )
		pFnGetWeaponAnimNodeSeq = (UFunction*) UObject::GObjObjects()->Data[ 36070 ];

	AWeapon_execGetWeaponAnimNodeSeq_Parms GetWeaponAnimNodeSeq_Parms;

	this->ProcessEvent ( pFnGetWeaponAnimNodeSeq, &GetWeaponAnimNodeSeq_Parms, NULL );

	return GetWeaponAnimNodeSeq_Parms.ReturnValue;
};

// Function Engine.Weapon.FireOnRelease
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::FireOnRelease ( )
{
	static UFunction* pFnFireOnRelease = NULL;

	if ( ! pFnFireOnRelease )
		pFnFireOnRelease = (UFunction*) UObject::GObjObjects()->Data[ 24069 ];

	AWeapon_execFireOnRelease_Parms FireOnRelease_Parms;

	this->ProcessEvent ( pFnFireOnRelease, &FireOnRelease_Parms, NULL );

	return FireOnRelease_Parms.ReturnValue;
};

// Function Engine.Weapon.SuggestDefenseStyle
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::SuggestDefenseStyle ( )
{
	static UFunction* pFnSuggestDefenseStyle = NULL;

	if ( ! pFnSuggestDefenseStyle )
		pFnSuggestDefenseStyle = (UFunction*) UObject::GObjObjects()->Data[ 36068 ];

	AWeapon_execSuggestDefenseStyle_Parms SuggestDefenseStyle_Parms;

	this->ProcessEvent ( pFnSuggestDefenseStyle, &SuggestDefenseStyle_Parms, NULL );

	return SuggestDefenseStyle_Parms.ReturnValue;
};

// Function Engine.Weapon.SuggestAttackStyle
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::SuggestAttackStyle ( )
{
	static UFunction* pFnSuggestAttackStyle = NULL;

	if ( ! pFnSuggestAttackStyle )
		pFnSuggestAttackStyle = (UFunction*) UObject::GObjObjects()->Data[ 36066 ];

	AWeapon_execSuggestAttackStyle_Parms SuggestAttackStyle_Parms;

	this->ProcessEvent ( pFnSuggestAttackStyle, &SuggestAttackStyle_Parms, NULL );

	return SuggestAttackStyle_Parms.ReturnValue;
};

// Function Engine.Weapon.CanAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AWeapon::CanAttack ( class AActor* Other )
{
	static UFunction* pFnCanAttack = NULL;

	if ( ! pFnCanAttack )
		pFnCanAttack = (UFunction*) UObject::GObjObjects()->Data[ 24062 ];

	AWeapon_execCanAttack_Parms CanAttack_Parms;
	CanAttack_Parms.Other = Other;

	this->ProcessEvent ( pFnCanAttack, &CanAttack_Parms, NULL );

	return CanAttack_Parms.ReturnValue;
};

// Function Engine.Weapon.RangedAttackTime
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::RangedAttackTime ( )
{
	static UFunction* pFnRangedAttackTime = NULL;

	if ( ! pFnRangedAttackTime )
		pFnRangedAttackTime = (UFunction*) UObject::GObjObjects()->Data[ 36063 ];

	AWeapon_execRangedAttackTime_Parms RangedAttackTime_Parms;

	this->ProcessEvent ( pFnRangedAttackTime, &RangedAttackTime_Parms, NULL );

	return RangedAttackTime_Parms.ReturnValue;
};

// Function Engine.Weapon.RecommendLongRangedAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::RecommendLongRangedAttack ( )
{
	static UFunction* pFnRecommendLongRangedAttack = NULL;

	if ( ! pFnRecommendLongRangedAttack )
		pFnRecommendLongRangedAttack = (UFunction*) UObject::GObjObjects()->Data[ 36061 ];

	AWeapon_execRecommendLongRangedAttack_Parms RecommendLongRangedAttack_Parms;

	this->ProcessEvent ( pFnRecommendLongRangedAttack, &RecommendLongRangedAttack_Parms, NULL );

	return RecommendLongRangedAttack_Parms.ReturnValue;
};

// Function Engine.Weapon.FocusOnLeader
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bLeaderFiring                  ( CPF_Parm )

bool AWeapon::FocusOnLeader ( unsigned long bLeaderFiring )
{
	static UFunction* pFnFocusOnLeader = NULL;

	if ( ! pFnFocusOnLeader )
		pFnFocusOnLeader = (UFunction*) UObject::GObjObjects()->Data[ 36058 ];

	AWeapon_execFocusOnLeader_Parms FocusOnLeader_Parms;
	FocusOnLeader_Parms.bLeaderFiring = bLeaderFiring;

	this->ProcessEvent ( pFnFocusOnLeader, &FocusOnLeader_Parms, NULL );

	return FocusOnLeader_Parms.ReturnValue;
};

// Function Engine.Weapon.RecommendRangedAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::RecommendRangedAttack ( )
{
	static UFunction* pFnRecommendRangedAttack = NULL;

	if ( ! pFnRecommendRangedAttack )
		pFnRecommendRangedAttack = (UFunction*) UObject::GObjObjects()->Data[ 36056 ];

	AWeapon_execRecommendRangedAttack_Parms RecommendRangedAttack_Parms;

	this->ProcessEvent ( pFnRecommendRangedAttack, &RecommendRangedAttack_Parms, NULL );

	return RecommendRangedAttack_Parms.ReturnValue;
};

// Function Engine.Weapon.GetWeaponRating
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::GetWeaponRating ( )
{
	static UFunction* pFnGetWeaponRating = NULL;

	if ( ! pFnGetWeaponRating )
		pFnGetWeaponRating = (UFunction*) UObject::GObjObjects()->Data[ 23069 ];

	AWeapon_execGetWeaponRating_Parms GetWeaponRating_Parms;

	this->ProcessEvent ( pFnGetWeaponRating, &GetWeaponRating_Parms, NULL );

	return GetWeaponRating_Parms.ReturnValue;
};

// Function Engine.Weapon.RelativeStrengthVersus
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// float                          Dist                           ( CPF_Parm )

float AWeapon::RelativeStrengthVersus ( class APawn* P, float Dist )
{
	static UFunction* pFnRelativeStrengthVersus = NULL;

	if ( ! pFnRelativeStrengthVersus )
		pFnRelativeStrengthVersus = (UFunction*) UObject::GObjObjects()->Data[ 36052 ];

	AWeapon_execRelativeStrengthVersus_Parms RelativeStrengthVersus_Parms;
	RelativeStrengthVersus_Parms.P = P;
	RelativeStrengthVersus_Parms.Dist = Dist;

	this->ProcessEvent ( pFnRelativeStrengthVersus, &RelativeStrengthVersus_Parms, NULL );

	return RelativeStrengthVersus_Parms.ReturnValue;
};

// Function Engine.Weapon.GetAIRating
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::GetAIRating ( )
{
	static UFunction* pFnGetAIRating = NULL;

	if ( ! pFnGetAIRating )
		pFnGetAIRating = (UFunction*) UObject::GObjObjects()->Data[ 23060 ];

	AWeapon_execGetAIRating_Parms GetAIRating_Parms;

	this->ProcessEvent ( pFnGetAIRating, &GetAIRating_Parms, NULL );

	return GetAIRating_Parms.ReturnValue;
};

// Function Engine.Weapon.GetDamageRadius
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::GetDamageRadius ( )
{
	static UFunction* pFnGetDamageRadius = NULL;

	if ( ! pFnGetDamageRadius )
		pFnGetDamageRadius = (UFunction*) UObject::GObjObjects()->Data[ 36048 ];

	AWeapon_execGetDamageRadius_Parms GetDamageRadius_Parms;

	this->ProcessEvent ( pFnGetDamageRadius, &GetDamageRadius_Parms, NULL );

	return GetDamageRadius_Parms.ReturnValue;
};

// Function Engine.Weapon.MaxRange
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::MaxRange ( )
{
	static UFunction* pFnMaxRange = NULL;

	if ( ! pFnMaxRange )
		pFnMaxRange = (UFunction*) UObject::GObjObjects()->Data[ 36044 ];

	AWeapon_execMaxRange_Parms MaxRange_Parms;

	this->ProcessEvent ( pFnMaxRange, &MaxRange_Parms, NULL );

	return MaxRange_Parms.ReturnValue;
};

// Function Engine.Weapon.AddSpread
// [0x00020102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                BaseAim                        ( CPF_Parm )

struct FRotator AWeapon::AddSpread ( struct FRotator BaseAim )
{
	static UFunction* pFnAddSpread = NULL;

	if ( ! pFnAddSpread )
		pFnAddSpread = (UFunction*) UObject::GObjObjects()->Data[ 36035 ];

	AWeapon_execAddSpread_Parms AddSpread_Parms;
	memcpy ( &AddSpread_Parms.BaseAim, &BaseAim, 0xC );

	this->ProcessEvent ( pFnAddSpread, &AddSpread_Parms, NULL );

	return AddSpread_Parms.ReturnValue;
};

// Function Engine.Weapon.GetProjectileClass
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* AWeapon::GetProjectileClass ( )
{
	static UFunction* pFnGetProjectileClass = NULL;

	if ( ! pFnGetProjectileClass )
		pFnGetProjectileClass = (UFunction*) UObject::GObjObjects()->Data[ 36033 ];

	AWeapon_execGetProjectileClass_Parms GetProjectileClass_Parms;

	this->ProcessEvent ( pFnGetProjectileClass, &GetProjectileClass_Parms, NULL );

	return GetProjectileClass_Parms.ReturnValue;
};

// Function Engine.Weapon.ClearAllPendingFire
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void AWeapon::ClearAllPendingFire ( )
{
	static UFunction* pFnClearAllPendingFire = NULL;

	if ( ! pFnClearAllPendingFire )
		pFnClearAllPendingFire = (UFunction*) UObject::GObjObjects()->Data[ 36032 ];

	AWeapon_execClearAllPendingFire_Parms ClearAllPendingFire_Parms;

	this->ProcessEvent ( pFnClearAllPendingFire, &ClearAllPendingFire_Parms, NULL );
};

// Function Engine.Weapon.ClearPendingFire
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            FireMode                       ( CPF_Parm )

void AWeapon::ClearPendingFire ( int FireMode )
{
	static UFunction* pFnClearPendingFire = NULL;

	if ( ! pFnClearPendingFire )
		pFnClearPendingFire = (UFunction*) UObject::GObjObjects()->Data[ 36030 ];

	AWeapon_execClearPendingFire_Parms ClearPendingFire_Parms;
	ClearPendingFire_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnClearPendingFire, &ClearPendingFire_Parms, NULL );
};

// Function Engine.Weapon.SetPendingFire
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            FireMode                       ( CPF_Parm )

void AWeapon::SetPendingFire ( int FireMode )
{
	static UFunction* pFnSetPendingFire = NULL;

	if ( ! pFnSetPendingFire )
		pFnSetPendingFire = (UFunction*) UObject::GObjObjects()->Data[ 36028 ];

	AWeapon_execSetPendingFire_Parms SetPendingFire_Parms;
	SetPendingFire_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnSetPendingFire, &SetPendingFire_Parms, NULL );
};

// Function Engine.Weapon.PendingFire
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FireMode                       ( CPF_Parm )

bool AWeapon::PendingFire ( int FireMode )
{
	static UFunction* pFnPendingFire = NULL;

	if ( ! pFnPendingFire )
		pFnPendingFire = (UFunction*) UObject::GObjObjects()->Data[ 36015 ];

	AWeapon_execPendingFire_Parms PendingFire_Parms;
	PendingFire_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnPendingFire, &PendingFire_Parms, NULL );

	return PendingFire_Parms.ReturnValue;
};

// Function Engine.Weapon.GetPendingFireLength
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int AWeapon::GetPendingFireLength ( )
{
	static UFunction* pFnGetPendingFireLength = NULL;

	if ( ! pFnGetPendingFireLength )
		pFnGetPendingFireLength = (UFunction*) UObject::GObjObjects()->Data[ 36014 ];

	AWeapon_execGetPendingFireLength_Parms GetPendingFireLength_Parms;

	this->ProcessEvent ( pFnGetPendingFireLength, &GetPendingFireLength_Parms, NULL );

	return GetPendingFireLength_Parms.ReturnValue;
};

// Function Engine.Weapon.HasAnyAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::HasAnyAmmo ( )
{
	static UFunction* pFnHasAnyAmmo = NULL;

	if ( ! pFnHasAnyAmmo )
		pFnHasAnyAmmo = (UFunction*) UObject::GObjObjects()->Data[ 23058 ];

	AWeapon_execHasAnyAmmo_Parms HasAnyAmmo_Parms;

	this->ProcessEvent ( pFnHasAnyAmmo, &HasAnyAmmo_Parms, NULL );

	return HasAnyAmmo_Parms.ReturnValue;
};

// Function Engine.Weapon.HasAmmo
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )
// int                            Amount                         ( CPF_OptionalParm | CPF_Parm )

bool AWeapon::HasAmmo ( unsigned char FireModeNum, int Amount )
{
	static UFunction* pFnHasAmmo = NULL;

	if ( ! pFnHasAmmo )
		pFnHasAmmo = (UFunction*) UObject::GObjObjects()->Data[ 36021 ];

	AWeapon_execHasAmmo_Parms HasAmmo_Parms;
	HasAmmo_Parms.FireModeNum = FireModeNum;
	HasAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnHasAmmo, &HasAmmo_Parms, NULL );

	return HasAmmo_Parms.ReturnValue;
};

// Function Engine.Weapon.AddAmmo
// [0x00020000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )

int AWeapon::AddAmmo ( int Amount )
{
	static UFunction* pFnAddAmmo = NULL;

	if ( ! pFnAddAmmo )
		pFnAddAmmo = (UFunction*) UObject::GObjObjects()->Data[ 36018 ];

	AWeapon_execAddAmmo_Parms AddAmmo_Parms;
	AddAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnAddAmmo, &AddAmmo_Parms, NULL );

	return AddAmmo_Parms.ReturnValue;
};

// Function Engine.Weapon.ConsumeAmmo
// [0x00020000] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::ConsumeAmmo ( unsigned char FireModeNum )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = (UFunction*) UObject::GObjObjects()->Data[ 36016 ];

	AWeapon_execConsumeAmmo_Parms ConsumeAmmo_Parms;
	ConsumeAmmo_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function Engine.Weapon.GetWeaponDebug
// [0x00420102] 
// Parameters infos:
// struct TArray<struct FString>  DebugInfo                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AWeapon::GetWeaponDebug ( struct TArray<struct FString>* DebugInfo )
{
	static UFunction* pFnGetWeaponDebug = NULL;

	if ( ! pFnGetWeaponDebug )
		pFnGetWeaponDebug = (UFunction*) UObject::GObjObjects()->Data[ 36008 ];

	AWeapon_execGetWeaponDebug_Parms GetWeaponDebug_Parms;

	this->ProcessEvent ( pFnGetWeaponDebug, &GetWeaponDebug_Parms, NULL );

	if ( DebugInfo )
		memcpy ( DebugInfo, &GetWeaponDebug_Parms.DebugInfo, 0x10 );
};

// Function Engine.Weapon.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AWeapon::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 36001 ];

	AWeapon_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Weapon.DenyClientWeaponSet
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::DenyClientWeaponSet ( )
{
	static UFunction* pFnDenyClientWeaponSet = NULL;

	if ( ! pFnDenyClientWeaponSet )
		pFnDenyClientWeaponSet = (UFunction*) UObject::GObjObjects()->Data[ 23104 ];

	AWeapon_execDenyClientWeaponSet_Parms DenyClientWeaponSet_Parms;

	this->ProcessEvent ( pFnDenyClientWeaponSet, &DenyClientWeaponSet_Parms, NULL );

	return DenyClientWeaponSet_Parms.ReturnValue;
};

// Function Engine.Weapon.IsFiring
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::eventIsFiring ( )
{
	static UFunction* pFnIsFiring = NULL;

	if ( ! pFnIsFiring )
		pFnIsFiring = (UFunction*) UObject::GObjObjects()->Data[ 24075 ];

	AWeapon_eventIsFiring_Parms IsFiring_Parms;

	this->ProcessEvent ( pFnIsFiring, &IsFiring_Parms, NULL );

	return IsFiring_Parms.ReturnValue;
};

// Function Engine.Weapon.ClientWeaponThrown
// [0x010201C2] 
// Parameters infos:

void AWeapon::ClientWeaponThrown ( )
{
	static UFunction* pFnClientWeaponThrown = NULL;

	if ( ! pFnClientWeaponThrown )
		pFnClientWeaponThrown = (UFunction*) UObject::GObjObjects()->Data[ 36000 ];

	AWeapon_execClientWeaponThrown_Parms ClientWeaponThrown_Parms;

	this->ProcessEvent ( pFnClientWeaponThrown, &ClientWeaponThrown_Parms, NULL );
};

// Function Engine.Weapon.CanThrow
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::CanThrow ( )
{
	static UFunction* pFnCanThrow = NULL;

	if ( ! pFnCanThrow )
		pFnCanThrow = (UFunction*) UObject::GObjObjects()->Data[ 24428 ];

	AWeapon_execCanThrow_Parms CanThrow_Parms;

	this->ProcessEvent ( pFnCanThrow, &CanThrow_Parms, NULL );

	return CanThrow_Parms.ReturnValue;
};

// Function Engine.Weapon.DropFrom
// [0x00020002] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FVector                 StartVelocity                  ( CPF_Parm )

void AWeapon::DropFrom ( struct FVector StartLocation, struct FVector StartVelocity )
{
	static UFunction* pFnDropFrom = NULL;

	if ( ! pFnDropFrom )
		pFnDropFrom = (UFunction*) UObject::GObjObjects()->Data[ 35995 ];

	AWeapon_execDropFrom_Parms DropFrom_Parms;
	memcpy ( &DropFrom_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &DropFrom_Parms.StartVelocity, &StartVelocity, 0xC );

	this->ProcessEvent ( pFnDropFrom, &DropFrom_Parms, NULL );
};

// Function Engine.Weapon.DoOverridePrevWeapon
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::DoOverridePrevWeapon ( )
{
	static UFunction* pFnDoOverridePrevWeapon = NULL;

	if ( ! pFnDoOverridePrevWeapon )
		pFnDoOverridePrevWeapon = (UFunction*) UObject::GObjObjects()->Data[ 35993 ];

	AWeapon_execDoOverridePrevWeapon_Parms DoOverridePrevWeapon_Parms;

	this->ProcessEvent ( pFnDoOverridePrevWeapon, &DoOverridePrevWeapon_Parms, NULL );

	return DoOverridePrevWeapon_Parms.ReturnValue;
};

// Function Engine.Weapon.DoOverrideNextWeapon
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::DoOverrideNextWeapon ( )
{
	static UFunction* pFnDoOverrideNextWeapon = NULL;

	if ( ! pFnDoOverrideNextWeapon )
		pFnDoOverrideNextWeapon = (UFunction*) UObject::GObjObjects()->Data[ 35991 ];

	AWeapon_execDoOverrideNextWeapon_Parms DoOverrideNextWeapon_Parms;

	this->ProcessEvent ( pFnDoOverrideNextWeapon, &DoOverrideNextWeapon_Parms, NULL );

	return DoOverrideNextWeapon_Parms.ReturnValue;
};

// Function Engine.Weapon.HolderDied
// [0x00020002] 
// Parameters infos:

void AWeapon::HolderDied ( )
{
	static UFunction* pFnHolderDied = NULL;

	if ( ! pFnHolderDied )
		pFnHolderDied = (UFunction*) UObject::GObjObjects()->Data[ 35990 ];

	AWeapon_execHolderDied_Parms HolderDied_Parms;

	this->ProcessEvent ( pFnHolderDied, &HolderDied_Parms, NULL );
};

// Function Engine.Weapon.IsActiveWeapon
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::IsActiveWeapon ( )
{
	static UFunction* pFnIsActiveWeapon = NULL;

	if ( ! pFnIsActiveWeapon )
		pFnIsActiveWeapon = (UFunction*) UObject::GObjObjects()->Data[ 35988 ];

	AWeapon_execIsActiveWeapon_Parms IsActiveWeapon_Parms;

	this->ProcessEvent ( pFnIsActiveWeapon, &IsActiveWeapon_Parms, NULL );

	return IsActiveWeapon_Parms.ReturnValue;
};

// Function Engine.Weapon.ItemRemovedFromInvManager
// [0x00020002] 
// Parameters infos:

void AWeapon::ItemRemovedFromInvManager ( )
{
	static UFunction* pFnItemRemovedFromInvManager = NULL;

	if ( ! pFnItemRemovedFromInvManager )
		pFnItemRemovedFromInvManager = (UFunction*) UObject::GObjObjects()->Data[ 35987 ];

	AWeapon_execItemRemovedFromInvManager_Parms ItemRemovedFromInvManager_Parms;

	this->ProcessEvent ( pFnItemRemovedFromInvManager, &ItemRemovedFromInvManager_Parms, NULL );
};

// Function Engine.Weapon.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AWeapon::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 35986 ];

	AWeapon_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.InventoryManager.UpdateController
// [0x00020102] 
// Parameters infos:

void AInventoryManager::UpdateController ( )
{
	static UFunction* pFnUpdateController = NULL;

	if ( ! pFnUpdateController )
		pFnUpdateController = (UFunction*) UObject::GObjObjects()->Data[ 23110 ];

	AInventoryManager_execUpdateController_Parms UpdateController_Parms;

	this->ProcessEvent ( pFnUpdateController, &UpdateController_Parms, NULL );
};

// Function Engine.InventoryManager.ClientSyncWeapon
// [0x010201C2] 
// Parameters infos:
// class AWeapon*                 NewWeapon                      ( CPF_Parm )

void AInventoryManager::ClientSyncWeapon ( class AWeapon* NewWeapon )
{
	static UFunction* pFnClientSyncWeapon = NULL;

	if ( ! pFnClientSyncWeapon )
		pFnClientSyncWeapon = (UFunction*) UObject::GObjObjects()->Data[ 23107 ];

	AInventoryManager_execClientSyncWeapon_Parms ClientSyncWeapon_Parms;
	ClientSyncWeapon_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnClientSyncWeapon, &ClientSyncWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.ClientWeaponSet
// [0x00024102] 
// Parameters infos:
// class AWeapon*                 NewWeapon                      ( CPF_Parm )
// unsigned long                  bOptionalSet                   ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void AInventoryManager::ClientWeaponSet ( class AWeapon* NewWeapon, unsigned long bOptionalSet, unsigned long bDoNotActivate )
{
	static UFunction* pFnClientWeaponSet = NULL;

	if ( ! pFnClientWeaponSet )
		pFnClientWeaponSet = (UFunction*) UObject::GObjObjects()->Data[ 23099 ];

	AInventoryManager_execClientWeaponSet_Parms ClientWeaponSet_Parms;
	ClientWeaponSet_Parms.NewWeapon = NewWeapon;
	ClientWeaponSet_Parms.bOptionalSet = bOptionalSet;
	ClientWeaponSet_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnClientWeaponSet, &ClientWeaponSet_Parms, NULL );
};

// Function Engine.InventoryManager.ChangedWeapon
// [0x00020102] 
// Parameters infos:

void AInventoryManager::ChangedWeapon ( )
{
	static UFunction* pFnChangedWeapon = NULL;

	if ( ! pFnChangedWeapon )
		pFnChangedWeapon = (UFunction*) UObject::GObjObjects()->Data[ 23097 ];

	AInventoryManager_execChangedWeapon_Parms ChangedWeapon_Parms;

	this->ProcessEvent ( pFnChangedWeapon, &ChangedWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.CancelWeaponChange
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AInventoryManager::CancelWeaponChange ( )
{
	static UFunction* pFnCancelWeaponChange = NULL;

	if ( ! pFnCancelWeaponChange )
		pFnCancelWeaponChange = (UFunction*) UObject::GObjObjects()->Data[ 23094 ];

	AInventoryManager_execCancelWeaponChange_Parms CancelWeaponChange_Parms;

	this->ProcessEvent ( pFnCancelWeaponChange, &CancelWeaponChange_Parms, NULL );

	return CancelWeaponChange_Parms.ReturnValue;
};

// Function Engine.InventoryManager.SetPendingWeapon
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 DesiredWeapon                  ( CPF_Parm )

void AInventoryManager::SetPendingWeapon ( class AWeapon* DesiredWeapon )
{
	static UFunction* pFnSetPendingWeapon = NULL;

	if ( ! pFnSetPendingWeapon )
		pFnSetPendingWeapon = (UFunction*) UObject::GObjObjects()->Data[ 23092 ];

	AInventoryManager_execSetPendingWeapon_Parms SetPendingWeapon_Parms;
	SetPendingWeapon_Parms.DesiredWeapon = DesiredWeapon;

	this->ProcessEvent ( pFnSetPendingWeapon, &SetPendingWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.InternalSetCurrentWeapon
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// class AWeapon*                 DesiredWeapon                  ( CPF_Parm )

void AInventoryManager::InternalSetCurrentWeapon ( class AWeapon* DesiredWeapon )
{
	static UFunction* pFnInternalSetCurrentWeapon = NULL;

	if ( ! pFnInternalSetCurrentWeapon )
		pFnInternalSetCurrentWeapon = (UFunction*) UObject::GObjObjects()->Data[ 23085 ];

	AInventoryManager_execInternalSetCurrentWeapon_Parms InternalSetCurrentWeapon_Parms;
	InternalSetCurrentWeapon_Parms.DesiredWeapon = DesiredWeapon;

	this->ProcessEvent ( pFnInternalSetCurrentWeapon, &InternalSetCurrentWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.ServerSetCurrentWeapon
// [0x002200C2] 
// Parameters infos:
// class AWeapon*                 DesiredWeapon                  ( CPF_Parm )

void AInventoryManager::ServerSetCurrentWeapon ( class AWeapon* DesiredWeapon )
{
	static UFunction* pFnServerSetCurrentWeapon = NULL;

	if ( ! pFnServerSetCurrentWeapon )
		pFnServerSetCurrentWeapon = (UFunction*) UObject::GObjObjects()->Data[ 23086 ];

	AInventoryManager_execServerSetCurrentWeapon_Parms ServerSetCurrentWeapon_Parms;
	ServerSetCurrentWeapon_Parms.DesiredWeapon = DesiredWeapon;

	this->ProcessEvent ( pFnServerSetCurrentWeapon, &ServerSetCurrentWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.SetCurrentWeapon
// [0x010201C2] 
// Parameters infos:
// class AWeapon*                 DesiredWeapon                  ( CPF_Parm )

void AInventoryManager::SetCurrentWeapon ( class AWeapon* DesiredWeapon )
{
	static UFunction* pFnSetCurrentWeapon = NULL;

	if ( ! pFnSetCurrentWeapon )
		pFnSetCurrentWeapon = (UFunction*) UObject::GObjObjects()->Data[ 23083 ];

	AInventoryManager_execSetCurrentWeapon_Parms SetCurrentWeapon_Parms;
	SetCurrentWeapon_Parms.DesiredWeapon = DesiredWeapon;

	this->ProcessEvent ( pFnSetCurrentWeapon, &SetCurrentWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.NextWeapon
// [0x00020102] 
// Parameters infos:

void AInventoryManager::NextWeapon ( )
{
	static UFunction* pFnNextWeapon = NULL;

	if ( ! pFnNextWeapon )
		pFnNextWeapon = (UFunction*) UObject::GObjObjects()->Data[ 23078 ];

	AInventoryManager_execNextWeapon_Parms NextWeapon_Parms;

	this->ProcessEvent ( pFnNextWeapon, &NextWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.PrevWeapon
// [0x00020102] 
// Parameters infos:

void AInventoryManager::PrevWeapon ( )
{
	static UFunction* pFnPrevWeapon = NULL;

	if ( ! pFnPrevWeapon )
		pFnPrevWeapon = (UFunction*) UObject::GObjObjects()->Data[ 23074 ];

	AInventoryManager_execPrevWeapon_Parms PrevWeapon_Parms;

	this->ProcessEvent ( pFnPrevWeapon, &PrevWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.SwitchToBestWeapon
// [0x00024102] 
// Parameters infos:
// unsigned long                  bForceADifferentWeapon         ( CPF_OptionalParm | CPF_Parm )

void AInventoryManager::SwitchToBestWeapon ( unsigned long bForceADifferentWeapon )
{
	static UFunction* pFnSwitchToBestWeapon = NULL;

	if ( ! pFnSwitchToBestWeapon )
		pFnSwitchToBestWeapon = (UFunction*) UObject::GObjObjects()->Data[ 23071 ];

	AInventoryManager_execSwitchToBestWeapon_Parms SwitchToBestWeapon_Parms;
	SwitchToBestWeapon_Parms.bForceADifferentWeapon = bForceADifferentWeapon;

	this->ProcessEvent ( pFnSwitchToBestWeapon, &SwitchToBestWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.GetBestWeapon
// [0x00024102] 
// Parameters infos:
// class AWeapon*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceADifferentWeapon         ( CPF_OptionalParm | CPF_Parm )

class AWeapon* AInventoryManager::GetBestWeapon ( unsigned long bForceADifferentWeapon )
{
	static UFunction* pFnGetBestWeapon = NULL;

	if ( ! pFnGetBestWeapon )
		pFnGetBestWeapon = (UFunction*) UObject::GObjObjects()->Data[ 23062 ];

	AInventoryManager_execGetBestWeapon_Parms GetBestWeapon_Parms;
	GetBestWeapon_Parms.bForceADifferentWeapon = bForceADifferentWeapon;

	this->ProcessEvent ( pFnGetBestWeapon, &GetBestWeapon_Parms, NULL );

	return GetBestWeapon_Parms.ReturnValue;
};

// Function Engine.InventoryManager.GetWeaponRatingFor
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 W                              ( CPF_Parm )

float AInventoryManager::GetWeaponRatingFor ( class AWeapon* W )
{
	static UFunction* pFnGetWeaponRatingFor = NULL;

	if ( ! pFnGetWeaponRatingFor )
		pFnGetWeaponRatingFor = (UFunction*) UObject::GObjObjects()->Data[ 23054 ];

	AInventoryManager_execGetWeaponRatingFor_Parms GetWeaponRatingFor_Parms;
	GetWeaponRatingFor_Parms.W = W;

	this->ProcessEvent ( pFnGetWeaponRatingFor, &GetWeaponRatingFor_Parms, NULL );

	return GetWeaponRatingFor_Parms.ReturnValue;
};

// Function Engine.InventoryManager.IsActiveWeapon
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 ThisWeapon                     ( CPF_Parm )

bool AInventoryManager::IsActiveWeapon ( class AWeapon* ThisWeapon )
{
	static UFunction* pFnIsActiveWeapon = NULL;

	if ( ! pFnIsActiveWeapon )
		pFnIsActiveWeapon = (UFunction*) UObject::GObjObjects()->Data[ 23051 ];

	AInventoryManager_execIsActiveWeapon_Parms IsActiveWeapon_Parms;
	IsActiveWeapon_Parms.ThisWeapon = ThisWeapon;

	this->ProcessEvent ( pFnIsActiveWeapon, &IsActiveWeapon_Parms, NULL );

	return IsActiveWeapon_Parms.ReturnValue;
};

// Function Engine.InventoryManager.StopFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AInventoryManager::StopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = (UFunction*) UObject::GObjObjects()->Data[ 23049 ];

	AInventoryManager_execStopFire_Parms StopFire_Parms;
	StopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function Engine.InventoryManager.StartFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AInventoryManager::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 23047 ];

	AInventoryManager_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function Engine.InventoryManager.DrawHUD
// [0x00020102] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void AInventoryManager::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 23044 ];

	AInventoryManager_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.InventoryManager.OwnerEvent
// [0x00020102] 
// Parameters infos:
// struct FName                   EventName                      ( CPF_Parm )

void AInventoryManager::OwnerEvent ( struct FName EventName )
{
	static UFunction* pFnOwnerEvent = NULL;

	if ( ! pFnOwnerEvent )
		pFnOwnerEvent = (UFunction*) UObject::GObjObjects()->Data[ 23041 ];

	AInventoryManager_execOwnerEvent_Parms OwnerEvent_Parms;
	memcpy ( &OwnerEvent_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnOwnerEvent, &OwnerEvent_Parms, NULL );
};

// Function Engine.InventoryManager.OwnerDied
// [0x00020002] 
// Parameters infos:

void AInventoryManager::OwnerDied ( )
{
	static UFunction* pFnOwnerDied = NULL;

	if ( ! pFnOwnerDied )
		pFnOwnerDied = (UFunction*) UObject::GObjObjects()->Data[ 23040 ];

	AInventoryManager_execOwnerDied_Parms OwnerDied_Parms;

	this->ProcessEvent ( pFnOwnerDied, &OwnerDied_Parms, NULL );
};

// Function Engine.InventoryManager.ModifyDamage
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

int AInventoryManager::ModifyDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType )
{
	static UFunction* pFnModifyDamage = NULL;

	if ( ! pFnModifyDamage )
		pFnModifyDamage = (UFunction*) UObject::GObjObjects()->Data[ 20803 ];

	AInventoryManager_execModifyDamage_Parms ModifyDamage_Parms;
	ModifyDamage_Parms.Damage = Damage;
	ModifyDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &ModifyDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ModifyDamage_Parms.Momentum, &Momentum, 0xC );
	ModifyDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnModifyDamage, &ModifyDamage_Parms, NULL );

	return ModifyDamage_Parms.ReturnValue;
};

// Function Engine.InventoryManager.DiscardInventory
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AInventoryManager::eventDiscardInventory ( )
{
	static UFunction* pFnDiscardInventory = NULL;

	if ( ! pFnDiscardInventory )
		pFnDiscardInventory = (UFunction*) UObject::GObjObjects()->Data[ 23028 ];

	AInventoryManager_eventDiscardInventory_Parms DiscardInventory_Parms;

	this->ProcessEvent ( pFnDiscardInventory, &DiscardInventory_Parms, NULL );
};

// Function Engine.InventoryManager.RemoveClassFromInventory
// [0x00024102] 
// Parameters infos:
// class UClass*                  DesiredClass                   ( CPF_Parm )
// unsigned long                  bAllowSubclass                 ( CPF_OptionalParm | CPF_Parm )

void AInventoryManager::RemoveClassFromInventory ( class UClass* DesiredClass, unsigned long bAllowSubclass )
{
	static UFunction* pFnRemoveClassFromInventory = NULL;

	if ( ! pFnRemoveClassFromInventory )
		pFnRemoveClassFromInventory = (UFunction*) UObject::GObjObjects()->Data[ 23024 ];

	AInventoryManager_execRemoveClassFromInventory_Parms RemoveClassFromInventory_Parms;
	RemoveClassFromInventory_Parms.DesiredClass = DesiredClass;
	RemoveClassFromInventory_Parms.bAllowSubclass = bAllowSubclass;

	this->ProcessEvent ( pFnRemoveClassFromInventory, &RemoveClassFromInventory_Parms, NULL );
};

// Function Engine.InventoryManager.RemoveFromInventory
// [0x00020102] 
// Parameters infos:
// class AInventory*              ItemToRemove                   ( CPF_Parm )

void AInventoryManager::RemoveFromInventory ( class AInventory* ItemToRemove )
{
	static UFunction* pFnRemoveFromInventory = NULL;

	if ( ! pFnRemoveFromInventory )
		pFnRemoveFromInventory = (UFunction*) UObject::GObjObjects()->Data[ 23020 ];

	AInventoryManager_execRemoveFromInventory_Parms RemoveFromInventory_Parms;
	RemoveFromInventory_Parms.ItemToRemove = ItemToRemove;

	this->ProcessEvent ( pFnRemoveFromInventory, &RemoveFromInventory_Parms, NULL );
};

// Function Engine.InventoryManager.AddInventory
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              NewItem                        ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

bool AInventoryManager::AddInventory ( class AInventory* NewItem, unsigned long bDoNotActivate )
{
	static UFunction* pFnAddInventory = NULL;

	if ( ! pFnAddInventory )
		pFnAddInventory = (UFunction*) UObject::GObjObjects()->Data[ 22939 ];

	AInventoryManager_execAddInventory_Parms AddInventory_Parms;
	AddInventory_Parms.NewItem = NewItem;
	AddInventory_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnAddInventory, &AddInventory_Parms, NULL );

	return AddInventory_Parms.ReturnValue;
};

// Function Engine.InventoryManager.CreateInventory
// [0x00024102] 
// Parameters infos:
// class AInventory*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  NewInventoryItemClass          ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

class AInventory* AInventoryManager::CreateInventory ( class UClass* NewInventoryItemClass, unsigned long bDoNotActivate )
{
	static UFunction* pFnCreateInventory = NULL;

	if ( ! pFnCreateInventory )
		pFnCreateInventory = (UFunction*) UObject::GObjObjects()->Data[ 23011 ];

	AInventoryManager_execCreateInventory_Parms CreateInventory_Parms;
	CreateInventory_Parms.NewInventoryItemClass = NewInventoryItemClass;
	CreateInventory_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnCreateInventory, &CreateInventory_Parms, NULL );

	return CreateInventory_Parms.ReturnValue;
};

// Function Engine.InventoryManager.FindInventoryType
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// class AInventory*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  DesiredClass                   ( CPF_Parm )
// unsigned long                  bAllowSubclass                 ( CPF_OptionalParm | CPF_Parm )

class AInventory* AInventoryManager::eventFindInventoryType ( class UClass* DesiredClass, unsigned long bAllowSubclass )
{
	static UFunction* pFnFindInventoryType = NULL;

	if ( ! pFnFindInventoryType )
		pFnFindInventoryType = (UFunction*) UObject::GObjObjects()->Data[ 23006 ];

	AInventoryManager_eventFindInventoryType_Parms FindInventoryType_Parms;
	FindInventoryType_Parms.DesiredClass = DesiredClass;
	FindInventoryType_Parms.bAllowSubclass = bAllowSubclass;

	this->ProcessEvent ( pFnFindInventoryType, &FindInventoryType_Parms, NULL );

	return FindInventoryType_Parms.ReturnValue;
};

// Function Engine.InventoryManager.HandlePickupQuery
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )

bool AInventoryManager::HandlePickupQuery ( class UClass* ItemClass, class AActor* Pickup )
{
	static UFunction* pFnHandlePickupQuery = NULL;

	if ( ! pFnHandlePickupQuery )
		pFnHandlePickupQuery = (UFunction*) UObject::GObjObjects()->Data[ 20817 ];

	AInventoryManager_execHandlePickupQuery_Parms HandlePickupQuery_Parms;
	HandlePickupQuery_Parms.ItemClass = ItemClass;
	HandlePickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnHandlePickupQuery, &HandlePickupQuery_Parms, NULL );

	return HandlePickupQuery_Parms.ReturnValue;
};

// Function Engine.InventoryManager.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AInventoryManager::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 23001 ];

	AInventoryManager_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.InventoryManager.SetupFor
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AInventoryManager::SetupFor ( class APawn* P )
{
	static UFunction* pFnSetupFor = NULL;

	if ( ! pFnSetupFor )
		pFnSetupFor = (UFunction*) UObject::GObjObjects()->Data[ 22999 ];

	AInventoryManager_execSetupFor_Parms SetupFor_Parms;
	SetupFor_Parms.P = P;

	this->ProcessEvent ( pFnSetupFor, &SetupFor_Parms, NULL );
};

// Function Engine.InventoryManager.InventoryActors
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AInventory*              Inv                            ( CPF_Parm | CPF_OutParm )

void AInventoryManager::InventoryActors ( class UClass* BaseClass, class AInventory** Inv )
{
	static UFunction* pFnInventoryActors = NULL;

	if ( ! pFnInventoryActors )
		pFnInventoryActors = (UFunction*) UObject::GObjObjects()->Data[ 22996 ];

	AInventoryManager_execInventoryActors_Parms InventoryActors_Parms;
	InventoryActors_Parms.BaseClass = BaseClass;

	pFnInventoryActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInventoryActors, &InventoryActors_Parms, NULL );

	pFnInventoryActors->FunctionFlags |= 0x400;

	if ( Inv )
		*Inv = InventoryActors_Parms.Inv;
};

// Function Engine.InventoryManager.ClearAllPendingFire
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )

void AInventoryManager::ClearAllPendingFire ( class AWeapon* InWeapon )
{
	static UFunction* pFnClearAllPendingFire = NULL;

	if ( ! pFnClearAllPendingFire )
		pFnClearAllPendingFire = (UFunction*) UObject::GObjObjects()->Data[ 22993 ];

	AInventoryManager_execClearAllPendingFire_Parms ClearAllPendingFire_Parms;
	ClearAllPendingFire_Parms.InWeapon = InWeapon;

	this->ProcessEvent ( pFnClearAllPendingFire, &ClearAllPendingFire_Parms, NULL );
};

// Function Engine.InventoryManager.IsPendingFire
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// int                            InFiringMode                   ( CPF_Parm )

bool AInventoryManager::IsPendingFire ( class AWeapon* InWeapon, int InFiringMode )
{
	static UFunction* pFnIsPendingFire = NULL;

	if ( ! pFnIsPendingFire )
		pFnIsPendingFire = (UFunction*) UObject::GObjObjects()->Data[ 22989 ];

	AInventoryManager_execIsPendingFire_Parms IsPendingFire_Parms;
	IsPendingFire_Parms.InWeapon = InWeapon;
	IsPendingFire_Parms.InFiringMode = InFiringMode;

	this->ProcessEvent ( pFnIsPendingFire, &IsPendingFire_Parms, NULL );

	return IsPendingFire_Parms.ReturnValue;
};

// Function Engine.InventoryManager.ClearPendingFire
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// int                            InFiringMode                   ( CPF_Parm )

void AInventoryManager::ClearPendingFire ( class AWeapon* InWeapon, int InFiringMode )
{
	static UFunction* pFnClearPendingFire = NULL;

	if ( ! pFnClearPendingFire )
		pFnClearPendingFire = (UFunction*) UObject::GObjObjects()->Data[ 22986 ];

	AInventoryManager_execClearPendingFire_Parms ClearPendingFire_Parms;
	ClearPendingFire_Parms.InWeapon = InWeapon;
	ClearPendingFire_Parms.InFiringMode = InFiringMode;

	this->ProcessEvent ( pFnClearPendingFire, &ClearPendingFire_Parms, NULL );
};

// Function Engine.InventoryManager.SetPendingFire
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// int                            InFiringMode                   ( CPF_Parm )

void AInventoryManager::SetPendingFire ( class AWeapon* InWeapon, int InFiringMode )
{
	static UFunction* pFnSetPendingFire = NULL;

	if ( ! pFnSetPendingFire )
		pFnSetPendingFire = (UFunction*) UObject::GObjObjects()->Data[ 22983 ];

	AInventoryManager_execSetPendingFire_Parms SetPendingFire_Parms;
	SetPendingFire_Parms.InWeapon = InWeapon;
	SetPendingFire_Parms.InFiringMode = InFiringMode;

	this->ProcessEvent ( pFnSetPendingFire, &SetPendingFire_Parms, NULL );
};

// Function Engine.InventoryManager.GetPendingFireLength
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 InWeapon                       ( CPF_Parm )

int AInventoryManager::GetPendingFireLength ( class AWeapon* InWeapon )
{
	static UFunction* pFnGetPendingFireLength = NULL;

	if ( ! pFnGetPendingFireLength )
		pFnGetPendingFireLength = (UFunction*) UObject::GObjObjects()->Data[ 22980 ];

	AInventoryManager_execGetPendingFireLength_Parms GetPendingFireLength_Parms;
	GetPendingFireLength_Parms.InWeapon = InWeapon;

	this->ProcessEvent ( pFnGetPendingFireLength, &GetPendingFireLength_Parms, NULL );

	return GetPendingFireLength_Parms.ReturnValue;
};

// Function Engine.InventoryManager.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AInventoryManager::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 22979 ];

	AInventoryManager_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.MatineeActor.CheckPriorityRefresh
// [0x00020002] 
// Parameters infos:

void AMatineeActor::CheckPriorityRefresh ( )
{
	static UFunction* pFnCheckPriorityRefresh = NULL;

	if ( ! pFnCheckPriorityRefresh )
		pFnCheckPriorityRefresh = (UFunction*) UObject::GObjObjects()->Data[ 23800 ];

	AMatineeActor_execCheckPriorityRefresh_Parms CheckPriorityRefresh_Parms;

	this->ProcessEvent ( pFnCheckPriorityRefresh, &CheckPriorityRefresh_Parms, NULL );
};

// Function Engine.MatineeActor.Update
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AMatineeActor::eventUpdate ( )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 23789 ];

	AMatineeActor_eventUpdate_Parms Update_Parms;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function Engine.NavigationPoint.GetDebugAbbrev
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANavigationPoint::eventGetDebugAbbrev ( )
{
	static UFunction* pFnGetDebugAbbrev = NULL;

	if ( ! pFnGetDebugAbbrev )
		pFnGetDebugAbbrev = (UFunction*) UObject::GObjObjects()->Data[ 12173 ];

	ANavigationPoint_eventGetDebugAbbrev_Parms GetDebugAbbrev_Parms;

	this->ProcessEvent ( pFnGetDebugAbbrev, &GetDebugAbbrev_Parms, NULL );

	return GetDebugAbbrev_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ANavigationPoint_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void ANavigationPoint::ApplyCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 12171 ];

	ANavigationPoint_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.NavigationPoint.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ANavigationPoint_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void ANavigationPoint::CreateCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 12169 ];

	ANavigationPoint_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.NavigationPoint.ShouldSaveForCheckpoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANavigationPoint::ShouldSaveForCheckpoint ( )
{
	static UFunction* pFnShouldSaveForCheckpoint = NULL;

	if ( ! pFnShouldSaveForCheckpoint )
		pFnShouldSaveForCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 12167 ];

	ANavigationPoint_execShouldSaveForCheckpoint_Parms ShouldSaveForCheckpoint_Parms;

	this->ProcessEvent ( pFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Parms, NULL );

	return ShouldSaveForCheckpoint_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.ShutDown
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANavigationPoint::eventShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 12166 ];

	ANavigationPoint_eventShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function Engine.NavigationPoint.OnToggle
// [0x00020002] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ANavigationPoint::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 12162 ];

	ANavigationPoint_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.NavigationPoint.IsOnDifferentNetwork
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        Nav                            ( CPF_Parm )

bool ANavigationPoint::IsOnDifferentNetwork ( class ANavigationPoint* Nav )
{
	static UFunction* pFnIsOnDifferentNetwork = NULL;

	if ( ! pFnIsOnDifferentNetwork )
		pFnIsOnDifferentNetwork = (UFunction*) UObject::GObjObjects()->Data[ 12159 ];

	ANavigationPoint_execIsOnDifferentNetwork_Parms IsOnDifferentNetwork_Parms;
	IsOnDifferentNetwork_Parms.Nav = Nav;

	pFnIsOnDifferentNetwork->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsOnDifferentNetwork, &IsOnDifferentNetwork_Parms, NULL );

	pFnIsOnDifferentNetwork->FunctionFlags |= 0x400;

	return IsOnDifferentNetwork_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.GetAllNavInRadius
// [0x00426401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ChkActor                       ( CPF_Parm )
// struct FVector                 ChkPoint                       ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// unsigned long                  bSkipBlocked                   ( CPF_OptionalParm | CPF_Parm )
// int                            inNetworkID                    ( CPF_OptionalParm | CPF_Parm )
// struct FCylinder               MinSize                        ( CPF_OptionalParm | CPF_Parm )
// struct TArray<class ANavigationPoint*> out_NavList                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ANavigationPoint::GetAllNavInRadius ( class AActor* ChkActor, struct FVector ChkPoint, float Radius, unsigned long bSkipBlocked, int inNetworkID, struct FCylinder MinSize, struct TArray<class ANavigationPoint*>* out_NavList )
{
	static UFunction* pFnGetAllNavInRadius = NULL;

	if ( ! pFnGetAllNavInRadius )
		pFnGetAllNavInRadius = (UFunction*) UObject::GObjObjects()->Data[ 12149 ];

	ANavigationPoint_execGetAllNavInRadius_Parms GetAllNavInRadius_Parms;
	GetAllNavInRadius_Parms.ChkActor = ChkActor;
	memcpy ( &GetAllNavInRadius_Parms.ChkPoint, &ChkPoint, 0xC );
	GetAllNavInRadius_Parms.Radius = Radius;
	GetAllNavInRadius_Parms.bSkipBlocked = bSkipBlocked;
	GetAllNavInRadius_Parms.inNetworkID = inNetworkID;
	memcpy ( &GetAllNavInRadius_Parms.MinSize, &MinSize, 0x8 );

	pFnGetAllNavInRadius->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAllNavInRadius, &GetAllNavInRadius_Parms, NULL );

	pFnGetAllNavInRadius->FunctionFlags |= 0x400;

	if ( out_NavList )
		memcpy ( out_NavList, &GetAllNavInRadius_Parms.out_NavList, 0x10 );

	return GetAllNavInRadius_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.GetNearestNavToPoint
// [0x00026003] ( FUNC_Final )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ChkActor                       ( CPF_Parm )
// struct FVector                 ChkPoint                       ( CPF_Parm )
// class UClass*                  RequiredClass                  ( CPF_OptionalParm | CPF_Parm )
// struct TArray<class ANavigationPoint*> ExcludeList                    ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

class ANavigationPoint* ANavigationPoint::GetNearestNavToPoint ( class AActor* ChkActor, struct FVector ChkPoint, class UClass* RequiredClass, struct TArray<class ANavigationPoint*> ExcludeList )
{
	static UFunction* pFnGetNearestNavToPoint = NULL;

	if ( ! pFnGetNearestNavToPoint )
		pFnGetNearestNavToPoint = (UFunction*) UObject::GObjObjects()->Data[ 12138 ];

	ANavigationPoint_execGetNearestNavToPoint_Parms GetNearestNavToPoint_Parms;
	GetNearestNavToPoint_Parms.ChkActor = ChkActor;
	memcpy ( &GetNearestNavToPoint_Parms.ChkPoint, &ChkPoint, 0xC );
	GetNearestNavToPoint_Parms.RequiredClass = RequiredClass;
	memcpy ( &GetNearestNavToPoint_Parms.ExcludeList, &ExcludeList, 0x10 );

	this->ProcessEvent ( pFnGetNearestNavToPoint, &GetNearestNavToPoint_Parms, NULL );

	return GetNearestNavToPoint_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.GetNearestNavToActor
// [0x00026003] ( FUNC_Final )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ChkActor                       ( CPF_Parm )
// class UClass*                  RequiredClass                  ( CPF_OptionalParm | CPF_Parm )
// struct TArray<class ANavigationPoint*> ExcludeList                    ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// float                          MinDist                        ( CPF_OptionalParm | CPF_Parm )

class ANavigationPoint* ANavigationPoint::GetNearestNavToActor ( class AActor* ChkActor, class UClass* RequiredClass, struct TArray<class ANavigationPoint*> ExcludeList, float MinDist )
{
	static UFunction* pFnGetNearestNavToActor = NULL;

	if ( ! pFnGetNearestNavToActor )
		pFnGetNearestNavToActor = (UFunction*) UObject::GObjObjects()->Data[ 12127 ];

	ANavigationPoint_execGetNearestNavToActor_Parms GetNearestNavToActor_Parms;
	GetNearestNavToActor_Parms.ChkActor = ChkActor;
	GetNearestNavToActor_Parms.RequiredClass = RequiredClass;
	memcpy ( &GetNearestNavToActor_Parms.ExcludeList, &ExcludeList, 0x10 );
	GetNearestNavToActor_Parms.MinDist = MinDist;

	this->ProcessEvent ( pFnGetNearestNavToActor, &GetNearestNavToActor_Parms, NULL );

	return GetNearestNavToActor_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.ProceedWithMove
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ANavigationPoint::ProceedWithMove ( class APawn* Other )
{
	static UFunction* pFnProceedWithMove = NULL;

	if ( ! pFnProceedWithMove )
		pFnProceedWithMove = (UFunction*) UObject::GObjObjects()->Data[ 8292 ];

	ANavigationPoint_execProceedWithMove_Parms ProceedWithMove_Parms;
	ProceedWithMove_Parms.Other = Other;

	this->ProcessEvent ( pFnProceedWithMove, &ProceedWithMove_Parms, NULL );

	return ProceedWithMove_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ANavigationPoint::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = (UFunction*) UObject::GObjObjects()->Data[ 12120 ];

	ANavigationPoint_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.DetourWeight
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )
// float                          PathWeight                     ( CPF_Parm )

float ANavigationPoint::eventDetourWeight ( class APawn* Other, float PathWeight )
{
	static UFunction* pFnDetourWeight = NULL;

	if ( ! pFnDetourWeight )
		pFnDetourWeight = (UFunction*) UObject::GObjObjects()->Data[ 12116 ];

	ANavigationPoint_eventDetourWeight_Parms DetourWeight_Parms;
	DetourWeight_Parms.Other = Other;
	DetourWeight_Parms.PathWeight = PathWeight;

	this->ProcessEvent ( pFnDetourWeight, &DetourWeight_Parms, NULL );

	return DetourWeight_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.Accept
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Incoming                       ( CPF_Parm )
// class AActor*                  Source                         ( CPF_Parm )

bool ANavigationPoint::eventAccept ( class AActor* Incoming, class AActor* Source )
{
	static UFunction* pFnAccept = NULL;

	if ( ! pFnAccept )
		pFnAccept = (UFunction*) UObject::GObjObjects()->Data[ 12111 ];

	ANavigationPoint_eventAccept_Parms Accept_Parms;
	Accept_Parms.Incoming = Incoming;
	Accept_Parms.Source = Source;

	this->ProcessEvent ( pFnAccept, &Accept_Parms, NULL );

	return Accept_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.SpecialCost
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Seeker                         ( CPF_Parm )
// class UReachSpec*              Path                           ( CPF_Parm )

int ANavigationPoint::eventSpecialCost ( class APawn* Seeker, class UReachSpec* Path )
{
	static UFunction* pFnSpecialCost = NULL;

	if ( ! pFnSpecialCost )
		pFnSpecialCost = (UFunction*) UObject::GObjObjects()->Data[ 12107 ];

	ANavigationPoint_eventSpecialCost_Parms SpecialCost_Parms;
	SpecialCost_Parms.Seeker = Seeker;
	SpecialCost_Parms.Path = Path;

	this->ProcessEvent ( pFnSpecialCost, &SpecialCost_Parms, NULL );

	return SpecialCost_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.CanTeleport
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool ANavigationPoint::CanTeleport ( class AActor* A )
{
	static UFunction* pFnCanTeleport = NULL;

	if ( ! pFnCanTeleport )
		pFnCanTeleport = (UFunction*) UObject::GObjObjects()->Data[ 12104 ];

	ANavigationPoint_execCanTeleport_Parms CanTeleport_Parms;
	CanTeleport_Parms.A = A;

	pFnCanTeleport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanTeleport, &CanTeleport_Parms, NULL );

	pFnCanTeleport->FunctionFlags |= 0x400;

	return CanTeleport_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.IsUsableAnchorFor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool ANavigationPoint::IsUsableAnchorFor ( class APawn* P )
{
	static UFunction* pFnIsUsableAnchorFor = NULL;

	if ( ! pFnIsUsableAnchorFor )
		pFnIsUsableAnchorFor = (UFunction*) UObject::GObjObjects()->Data[ 12101 ];

	ANavigationPoint_execIsUsableAnchorFor_Parms IsUsableAnchorFor_Parms;
	IsUsableAnchorFor_Parms.P = P;

	pFnIsUsableAnchorFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsUsableAnchorFor, &IsUsableAnchorFor_Parms, NULL );

	pFnIsUsableAnchorFor->FunctionFlags |= 0x400;

	return IsUsableAnchorFor_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.GetReachSpecTo
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UReachSpec*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        Nav                            ( CPF_Parm )
// class UClass*                  SpecClass                      ( CPF_OptionalParm | CPF_Parm )

class UReachSpec* ANavigationPoint::GetReachSpecTo ( class ANavigationPoint* Nav, class UClass* SpecClass )
{
	static UFunction* pFnGetReachSpecTo = NULL;

	if ( ! pFnGetReachSpecTo )
		pFnGetReachSpecTo = (UFunction*) UObject::GObjObjects()->Data[ 12097 ];

	ANavigationPoint_execGetReachSpecTo_Parms GetReachSpecTo_Parms;
	GetReachSpecTo_Parms.Nav = Nav;
	GetReachSpecTo_Parms.SpecClass = SpecClass;

	pFnGetReachSpecTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetReachSpecTo, &GetReachSpecTo_Parms, NULL );

	pFnGetReachSpecTo->FunctionFlags |= 0x400;

	return GetReachSpecTo_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.GetBoundingCylinder
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          CollisionRadius                ( CPF_Parm | CPF_OutParm )
// float                          CollisionHeight                ( CPF_Parm | CPF_OutParm )

void ANavigationPoint::GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight )
{
	static UFunction* pFnGetBoundingCylinder = NULL;

	if ( ! pFnGetBoundingCylinder )
		pFnGetBoundingCylinder = (UFunction*) UObject::GObjObjects()->Data[ 12094 ];

	ANavigationPoint_execGetBoundingCylinder_Parms GetBoundingCylinder_Parms;

	pFnGetBoundingCylinder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundingCylinder, &GetBoundingCylinder_Parms, NULL );

	pFnGetBoundingCylinder->FunctionFlags |= 0x400;

	if ( CollisionRadius )
		*CollisionRadius = GetBoundingCylinder_Parms.CollisionRadius;

	if ( CollisionHeight )
		*CollisionHeight = GetBoundingCylinder_Parms.CollisionHeight;
};

// Function Engine.CoverLink.GetDebugAbbrev
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ACoverLink::eventGetDebugAbbrev ( )
{
	static UFunction* pFnGetDebugAbbrev = NULL;

	if ( ! pFnGetDebugAbbrev )
		pFnGetDebugAbbrev = (UFunction*) UObject::GObjObjects()->Data[ 14240 ];

	ACoverLink_eventGetDebugAbbrev_Parms GetDebugAbbrev_Parms;

	this->ProcessEvent ( pFnGetDebugAbbrev, &GetDebugAbbrev_Parms, NULL );

	return GetDebugAbbrev_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetLocationDescription
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

unsigned char ACoverLink::GetLocationDescription ( int SlotIdx )
{
	static UFunction* pFnGetLocationDescription = NULL;

	if ( ! pFnGetLocationDescription )
		pFnGetLocationDescription = (UFunction*) UObject::GObjObjects()->Data[ 14241 ];

	ACoverLink_execGetLocationDescription_Parms GetLocationDescription_Parms;
	GetLocationDescription_Parms.SlotIdx = SlotIdx;

	pFnGetLocationDescription->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLocationDescription, &GetLocationDescription_Parms, NULL );

	pFnGetLocationDescription->FunctionFlags |= 0x400;

	return GetLocationDescription_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetDebugString
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            SlotIdx                        ( CPF_Parm )

struct FString ACoverLink::eventGetDebugString ( int SlotIdx )
{
	static UFunction* pFnGetDebugString = NULL;

	if ( ! pFnGetDebugString )
		pFnGetDebugString = (UFunction*) UObject::GObjObjects()->Data[ 14243 ];

	ACoverLink_eventGetDebugString_Parms GetDebugString_Parms;
	GetDebugString_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnGetDebugString, &GetDebugString_Parms, NULL );

	return GetDebugString_Parms.ReturnValue;
};

// Function Engine.CoverLink.AddCoverSlot
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SlotLocation                   ( CPF_Parm )
// struct FRotator                SlotRotation                   ( CPF_Parm )
// int                            SlotIdx                        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bForceSlotUpdate               ( CPF_OptionalParm | CPF_Parm )

int ACoverLink::AddCoverSlot ( struct FVector SlotLocation, struct FRotator SlotRotation, int SlotIdx, unsigned long bForceSlotUpdate )
{
	static UFunction* pFnAddCoverSlot = NULL;

	if ( ! pFnAddCoverSlot )
		pFnAddCoverSlot = (UFunction*) UObject::GObjObjects()->Data[ 14246 ];

	ACoverLink_execAddCoverSlot_Parms AddCoverSlot_Parms;
	memcpy ( &AddCoverSlot_Parms.SlotLocation, &SlotLocation, 0xC );
	memcpy ( &AddCoverSlot_Parms.SlotRotation, &SlotRotation, 0xC );
	AddCoverSlot_Parms.SlotIdx = SlotIdx;
	AddCoverSlot_Parms.bForceSlotUpdate = bForceSlotUpdate;

	pFnAddCoverSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddCoverSlot, &AddCoverSlot_Parms, NULL );

	pFnAddCoverSlot->FunctionFlags |= 0x400;

	return AddCoverSlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ACoverLink::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 14250 ];

	ACoverLink_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.CoverLink.GetSwatTurnTarget
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// int                            Direction                      ( CPF_Parm )
// struct FCoverReference         out_Info                       ( CPF_Parm | CPF_OutParm )

bool ACoverLink::GetSwatTurnTarget ( int SlotIdx, int Direction, struct FCoverReference* out_Info )
{
	static UFunction* pFnGetSwatTurnTarget = NULL;

	if ( ! pFnGetSwatTurnTarget )
		pFnGetSwatTurnTarget = (UFunction*) UObject::GObjObjects()->Data[ 14256 ];

	ACoverLink_execGetSwatTurnTarget_Parms GetSwatTurnTarget_Parms;
	GetSwatTurnTarget_Parms.SlotIdx = SlotIdx;
	GetSwatTurnTarget_Parms.Direction = Direction;

	this->ProcessEvent ( pFnGetSwatTurnTarget, &GetSwatTurnTarget_Parms, NULL );

	if ( out_Info )
		memcpy ( out_Info, &GetSwatTurnTarget_Parms.out_Info, 0x20 );

	return GetSwatTurnTarget_Parms.ReturnValue;
};

// Function Engine.CoverLink.ShutDown
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ACoverLink::eventShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 14265 ];

	ACoverLink_eventShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function Engine.CoverLink.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ANavigationPoint_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void ACoverLink::ApplyCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 14272 ];

	ACoverLink_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.CoverLink.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ANavigationPoint_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void ACoverLink::CreateCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 14274 ];

	ACoverLink_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.CoverLink.OnToggle
// [0x00020002] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ACoverLink::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 14280 ];

	ACoverLink_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.CoverLink.TestCoverNormal
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

bool ACoverLink::TestCoverNormal ( int SlotIdx )
{
	static UFunction* pFnTestCoverNormal = NULL;

	if ( ! pFnTestCoverNormal )
		pFnTestCoverNormal = (UFunction*) UObject::GObjObjects()->Data[ 14282 ];

	ACoverLink_execTestCoverNormal_Parms TestCoverNormal_Parms;
	TestCoverNormal_Parms.SlotIdx = SlotIdx;

	pFnTestCoverNormal->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTestCoverNormal, &TestCoverNormal_Parms, NULL );

	pFnTestCoverNormal->FunctionFlags |= 0x400;

	return TestCoverNormal_Parms.ReturnValue;
};

// Function Engine.CoverLink.AutoManageSlot
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bFullUpdate                    ( CPF_Parm )

bool ACoverLink::AutoManageSlot ( int SlotIdx, unsigned long bFullUpdate )
{
	static UFunction* pFnAutoManageSlot = NULL;

	if ( ! pFnAutoManageSlot )
		pFnAutoManageSlot = (UFunction*) UObject::GObjObjects()->Data[ 14286 ];

	ACoverLink_execAutoManageSlot_Parms AutoManageSlot_Parms;
	AutoManageSlot_Parms.SlotIdx = SlotIdx;
	AutoManageSlot_Parms.bFullUpdate = bFullUpdate;

	pFnAutoManageSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAutoManageSlot, &AutoManageSlot_Parms, NULL );

	pFnAutoManageSlot->FunctionFlags |= 0x400;

	return AutoManageSlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.AutoUpdateSlot
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

bool ACoverLink::AutoUpdateSlot ( int SlotIdx )
{
	static UFunction* pFnAutoUpdateSlot = NULL;

	if ( ! pFnAutoUpdateSlot )
		pFnAutoUpdateSlot = (UFunction*) UObject::GObjObjects()->Data[ 14289 ];

	ACoverLink_execAutoUpdateSlot_Parms AutoUpdateSlot_Parms;
	AutoUpdateSlot_Parms.SlotIdx = SlotIdx;

	pFnAutoUpdateSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAutoUpdateSlot, &AutoUpdateSlot_Parms, NULL );

	pFnAutoUpdateSlot->FunctionFlags |= 0x400;

	return AutoUpdateSlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.IsEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ACoverLink::IsEnabled ( )
{
	static UFunction* pFnIsEnabled = NULL;

	if ( ! pFnIsEnabled )
		pFnIsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 14293 ];

	ACoverLink_execIsEnabled_Parms IsEnabled_Parms;

	pFnIsEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEnabled, &IsEnabled_Parms, NULL );

	pFnIsEnabled->FunctionFlags |= 0x400;

	return IsEnabled_Parms.ReturnValue;
};

// Function Engine.CoverLink.AutoAdjustSlot
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bOnlyCheckLeans                ( CPF_Parm )

bool ACoverLink::AutoAdjustSlot ( int SlotIdx, unsigned long bOnlyCheckLeans )
{
	static UFunction* pFnAutoAdjustSlot = NULL;

	if ( ! pFnAutoAdjustSlot )
		pFnAutoAdjustSlot = (UFunction*) UObject::GObjObjects()->Data[ 14296 ];

	ACoverLink_execAutoAdjustSlot_Parms AutoAdjustSlot_Parms;
	AutoAdjustSlot_Parms.SlotIdx = SlotIdx;
	AutoAdjustSlot_Parms.bOnlyCheckLeans = bOnlyCheckLeans;

	pFnAutoAdjustSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAutoAdjustSlot, &AutoAdjustSlot_Parms, NULL );

	pFnAutoAdjustSlot->FunctionFlags |= 0x400;

	return AutoAdjustSlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.OnModifyCover
// [0x00020002] 
// Parameters infos:
// class USeqAct_ModifyCover*     Action                         ( CPF_Parm )

void ACoverLink::OnModifyCover ( class USeqAct_ModifyCover* Action )
{
	static UFunction* pFnOnModifyCover = NULL;

	if ( ! pFnOnModifyCover )
		pFnOnModifyCover = (UFunction*) UObject::GObjObjects()->Data[ 14298 ];

	ACoverLink_execOnModifyCover_Parms OnModifyCover_Parms;
	OnModifyCover_Parms.Action = Action;

	this->ProcessEvent ( pFnOnModifyCover, &OnModifyCover_Parms, NULL );
};

// Function Engine.CoverLink.NotifySlotOwnerCoverDisabled
// [0x00020102] 
// Parameters infos:
// int                            SlotIdx                        ( CPF_Parm )

void ACoverLink::NotifySlotOwnerCoverDisabled ( int SlotIdx )
{
	static UFunction* pFnNotifySlotOwnerCoverDisabled = NULL;

	if ( ! pFnNotifySlotOwnerCoverDisabled )
		pFnNotifySlotOwnerCoverDisabled = (UFunction*) UObject::GObjObjects()->Data[ 14302 ];

	ACoverLink_execNotifySlotOwnerCoverDisabled_Parms NotifySlotOwnerCoverDisabled_Parms;
	NotifySlotOwnerCoverDisabled_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnNotifySlotOwnerCoverDisabled, &NotifySlotOwnerCoverDisabled_Parms, NULL );
};

// Function Engine.CoverLink.SetSlotEnabled
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bEnable                        ( CPF_Parm )

void ACoverLink::eventSetSlotEnabled ( int SlotIdx, unsigned long bEnable )
{
	static UFunction* pFnSetSlotEnabled = NULL;

	if ( ! pFnSetSlotEnabled )
		pFnSetSlotEnabled = (UFunction*) UObject::GObjObjects()->Data[ 14312 ];

	ACoverLink_eventSetSlotEnabled_Parms SetSlotEnabled_Parms;
	SetSlotEnabled_Parms.SlotIdx = SlotIdx;
	SetSlotEnabled_Parms.bEnable = bEnable;

	this->ProcessEvent ( pFnSetSlotEnabled, &SetSlotEnabled_Parms, NULL );
};

// Function Engine.CoverLink.SetDisabled
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bNewDisabled                   ( CPF_Parm )

void ACoverLink::eventSetDisabled ( unsigned long bNewDisabled )
{
	static UFunction* pFnSetDisabled = NULL;

	if ( ! pFnSetDisabled )
		pFnSetDisabled = (UFunction*) UObject::GObjObjects()->Data[ 14318 ];

	ACoverLink_eventSetDisabled_Parms SetDisabled_Parms;
	SetDisabled_Parms.bNewDisabled = bNewDisabled;

	this->ProcessEvent ( pFnSetDisabled, &SetDisabled_Parms, NULL );
};

// Function Engine.CoverLink.GetSlotActions
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            SlotIdx                        ( CPF_Parm )
// struct TArray<unsigned char>   Actions                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ACoverLink::GetSlotActions ( int SlotIdx, struct TArray<unsigned char>* Actions )
{
	static UFunction* pFnGetSlotActions = NULL;

	if ( ! pFnGetSlotActions )
		pFnGetSlotActions = (UFunction*) UObject::GObjObjects()->Data[ 14321 ];

	ACoverLink_execGetSlotActions_Parms GetSlotActions_Parms;
	GetSlotActions_Parms.SlotIdx = SlotIdx;

	pFnGetSlotActions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotActions, &GetSlotActions_Parms, NULL );

	pFnGetSlotActions->FunctionFlags |= 0x400;

	if ( Actions )
		memcpy ( Actions, &GetSlotActions_Parms.Actions, 0x10 );
};

// Function Engine.CoverLink.HasFireLinkTo
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// struct FCoverInfo              ChkCover                       ( CPF_Parm )
// unsigned long                  bAllowFallbackLinks            ( CPF_OptionalParm | CPF_Parm )

bool ACoverLink::HasFireLinkTo ( int SlotIdx, struct FCoverInfo ChkCover, unsigned long bAllowFallbackLinks )
{
	static UFunction* pFnHasFireLinkTo = NULL;

	if ( ! pFnHasFireLinkTo )
		pFnHasFireLinkTo = (UFunction*) UObject::GObjObjects()->Data[ 14325 ];

	ACoverLink_execHasFireLinkTo_Parms HasFireLinkTo_Parms;
	HasFireLinkTo_Parms.SlotIdx = SlotIdx;
	memcpy ( &HasFireLinkTo_Parms.ChkCover, &ChkCover, 0xC );
	HasFireLinkTo_Parms.bAllowFallbackLinks = bAllowFallbackLinks;

	pFnHasFireLinkTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasFireLinkTo, &HasFireLinkTo_Parms, NULL );

	pFnHasFireLinkTo->FunctionFlags |= 0x400;

	return HasFireLinkTo_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetFireLinkTo
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// struct FCoverInfo              ChkCover                       ( CPF_Parm )
// unsigned char                  ChkAction                      ( CPF_Parm )
// unsigned char                  ChkType                        ( CPF_Parm )
// int                            out_FireLinkIdx                ( CPF_Parm | CPF_OutParm )
// struct TArray<int>             out_Items                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ACoverLink::GetFireLinkTo ( int SlotIdx, struct FCoverInfo ChkCover, unsigned char ChkAction, unsigned char ChkType, int* out_FireLinkIdx, struct TArray<int>* out_Items )
{
	static UFunction* pFnGetFireLinkTo = NULL;

	if ( ! pFnGetFireLinkTo )
		pFnGetFireLinkTo = (UFunction*) UObject::GObjObjects()->Data[ 14329 ];

	ACoverLink_execGetFireLinkTo_Parms GetFireLinkTo_Parms;
	GetFireLinkTo_Parms.SlotIdx = SlotIdx;
	memcpy ( &GetFireLinkTo_Parms.ChkCover, &ChkCover, 0xC );
	GetFireLinkTo_Parms.ChkAction = ChkAction;
	GetFireLinkTo_Parms.ChkType = ChkType;

	pFnGetFireLinkTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFireLinkTo, &GetFireLinkTo_Parms, NULL );

	pFnGetFireLinkTo->FunctionFlags |= 0x400;

	if ( out_FireLinkIdx )
		*out_FireLinkIdx = GetFireLinkTo_Parms.out_FireLinkIdx;

	if ( out_Items )
		memcpy ( out_Items, &GetFireLinkTo_Parms.out_Items, 0x10 );

	return GetFireLinkTo_Parms.ReturnValue;
};

// Function Engine.CoverLink.AllowLeftTransition
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

bool ACoverLink::AllowLeftTransition ( int SlotIdx )
{
	static UFunction* pFnAllowLeftTransition = NULL;

	if ( ! pFnAllowLeftTransition )
		pFnAllowLeftTransition = (UFunction*) UObject::GObjObjects()->Data[ 14338 ];

	ACoverLink_execAllowLeftTransition_Parms AllowLeftTransition_Parms;
	AllowLeftTransition_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnAllowLeftTransition, &AllowLeftTransition_Parms, NULL );

	return AllowLeftTransition_Parms.ReturnValue;
};

// Function Engine.CoverLink.AllowRightTransition
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

bool ACoverLink::AllowRightTransition ( int SlotIdx )
{
	static UFunction* pFnAllowRightTransition = NULL;

	if ( ! pFnAllowRightTransition )
		pFnAllowRightTransition = (UFunction*) UObject::GObjObjects()->Data[ 14347 ];

	ACoverLink_execAllowRightTransition_Parms AllowRightTransition_Parms;
	AllowRightTransition_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnAllowRightTransition, &AllowRightTransition_Parms, NULL );

	return AllowRightTransition_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotIdxToRight
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// int                            Cnt                            ( CPF_OptionalParm | CPF_Parm )

int ACoverLink::GetSlotIdxToRight ( int SlotIdx, int Cnt )
{
	static UFunction* pFnGetSlotIdxToRight = NULL;

	if ( ! pFnGetSlotIdxToRight )
		pFnGetSlotIdxToRight = (UFunction*) UObject::GObjObjects()->Data[ 14317 ];

	ACoverLink_execGetSlotIdxToRight_Parms GetSlotIdxToRight_Parms;
	GetSlotIdxToRight_Parms.SlotIdx = SlotIdx;
	GetSlotIdxToRight_Parms.Cnt = Cnt;

	pFnGetSlotIdxToRight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotIdxToRight, &GetSlotIdxToRight_Parms, NULL );

	pFnGetSlotIdxToRight->FunctionFlags |= 0x400;

	return GetSlotIdxToRight_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotIdxToLeft
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// int                            Cnt                            ( CPF_OptionalParm | CPF_Parm )

int ACoverLink::GetSlotIdxToLeft ( int SlotIdx, int Cnt )
{
	static UFunction* pFnGetSlotIdxToLeft = NULL;

	if ( ! pFnGetSlotIdxToLeft )
		pFnGetSlotIdxToLeft = (UFunction*) UObject::GObjObjects()->Data[ 14315 ];

	ACoverLink_execGetSlotIdxToLeft_Parms GetSlotIdxToLeft_Parms;
	GetSlotIdxToLeft_Parms.SlotIdx = SlotIdx;
	GetSlotIdxToLeft_Parms.Cnt = Cnt;

	pFnGetSlotIdxToLeft->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotIdxToLeft, &GetSlotIdxToLeft_Parms, NULL );

	pFnGetSlotIdxToLeft->FunctionFlags |= 0x400;

	return GetSlotIdxToLeft_Parms.ReturnValue;
};

// Function Engine.CoverLink.IsRightEdgeSlot
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bIgnoreLeans                   ( CPF_Parm )

bool ACoverLink::IsRightEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans )
{
	static UFunction* pFnIsRightEdgeSlot = NULL;

	if ( ! pFnIsRightEdgeSlot )
		pFnIsRightEdgeSlot = (UFunction*) UObject::GObjObjects()->Data[ 14357 ];

	ACoverLink_execIsRightEdgeSlot_Parms IsRightEdgeSlot_Parms;
	IsRightEdgeSlot_Parms.SlotIdx = SlotIdx;
	IsRightEdgeSlot_Parms.bIgnoreLeans = bIgnoreLeans;

	pFnIsRightEdgeSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsRightEdgeSlot, &IsRightEdgeSlot_Parms, NULL );

	pFnIsRightEdgeSlot->FunctionFlags |= 0x400;

	return IsRightEdgeSlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.IsLeftEdgeSlot
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bIgnoreLeans                   ( CPF_Parm )

bool ACoverLink::IsLeftEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans )
{
	static UFunction* pFnIsLeftEdgeSlot = NULL;

	if ( ! pFnIsLeftEdgeSlot )
		pFnIsLeftEdgeSlot = (UFunction*) UObject::GObjObjects()->Data[ 14361 ];

	ACoverLink_execIsLeftEdgeSlot_Parms IsLeftEdgeSlot_Parms;
	IsLeftEdgeSlot_Parms.SlotIdx = SlotIdx;
	IsLeftEdgeSlot_Parms.bIgnoreLeans = bIgnoreLeans;

	pFnIsLeftEdgeSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLeftEdgeSlot, &IsLeftEdgeSlot_Parms, NULL );

	pFnIsLeftEdgeSlot->FunctionFlags |= 0x400;

	return IsLeftEdgeSlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.IsEdgeSlot
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bIgnoreLeans                   ( CPF_OptionalParm | CPF_Parm )

bool ACoverLink::IsEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans )
{
	static UFunction* pFnIsEdgeSlot = NULL;

	if ( ! pFnIsEdgeSlot )
		pFnIsEdgeSlot = (UFunction*) UObject::GObjObjects()->Data[ 14365 ];

	ACoverLink_execIsEdgeSlot_Parms IsEdgeSlot_Parms;
	IsEdgeSlot_Parms.SlotIdx = SlotIdx;
	IsEdgeSlot_Parms.bIgnoreLeans = bIgnoreLeans;

	pFnIsEdgeSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEdgeSlot, &IsEdgeSlot_Parms, NULL );

	pFnIsEdgeSlot->FunctionFlags |= 0x400;

	return IsEdgeSlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.FindSlots
// [0x00420501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 CheckLocation                  ( CPF_Parm )
// float                          MaxDistance                    ( CPF_Parm )
// int                            LeftSlotIdx                    ( CPF_Parm | CPF_OutParm )
// int                            RightSlotIdx                   ( CPF_Parm | CPF_OutParm )

bool ACoverLink::FindSlots ( struct FVector CheckLocation, float MaxDistance, int* LeftSlotIdx, int* RightSlotIdx )
{
	static UFunction* pFnFindSlots = NULL;

	if ( ! pFnFindSlots )
		pFnFindSlots = (UFunction*) UObject::GObjObjects()->Data[ 14369 ];

	ACoverLink_execFindSlots_Parms FindSlots_Parms;
	memcpy ( &FindSlots_Parms.CheckLocation, &CheckLocation, 0xC );
	FindSlots_Parms.MaxDistance = MaxDistance;

	pFnFindSlots->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSlots, &FindSlots_Parms, NULL );

	pFnFindSlots->FunctionFlags |= 0x400;

	if ( LeftSlotIdx )
		*LeftSlotIdx = FindSlots_Parms.LeftSlotIdx;

	if ( RightSlotIdx )
		*RightSlotIdx = FindSlots_Parms.RightSlotIdx;

	return FindSlots_Parms.ReturnValue;
};

// Function Engine.CoverLink.IsStationarySlot
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

bool ACoverLink::IsStationarySlot ( int SlotIdx )
{
	static UFunction* pFnIsStationarySlot = NULL;

	if ( ! pFnIsStationarySlot )
		pFnIsStationarySlot = (UFunction*) UObject::GObjObjects()->Data[ 14373 ];

	ACoverLink_execIsStationarySlot_Parms IsStationarySlot_Parms;
	IsStationarySlot_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnIsStationarySlot, &IsStationarySlot_Parms, NULL );

	return IsStationarySlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.IsValidClaim
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ChkClaim                       ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bSkipTeamCheck                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipOverlapCheck              ( CPF_OptionalParm | CPF_Parm )

bool ACoverLink::IsValidClaim ( class APawn* ChkClaim, int SlotIdx, unsigned long bSkipTeamCheck, unsigned long bSkipOverlapCheck )
{
	static UFunction* pFnIsValidClaim = NULL;

	if ( ! pFnIsValidClaim )
		pFnIsValidClaim = (UFunction*) UObject::GObjObjects()->Data[ 14379 ];

	ACoverLink_execIsValidClaim_Parms IsValidClaim_Parms;
	IsValidClaim_Parms.ChkClaim = ChkClaim;
	IsValidClaim_Parms.SlotIdx = SlotIdx;
	IsValidClaim_Parms.bSkipTeamCheck = bSkipTeamCheck;
	IsValidClaim_Parms.bSkipOverlapCheck = bSkipOverlapCheck;

	pFnIsValidClaim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidClaim, &IsValidClaim_Parms, NULL );

	pFnIsValidClaim->FunctionFlags |= 0x400;

	return IsValidClaim_Parms.ReturnValue;
};

// Function Engine.CoverLink.UnClaimSlot
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            SlotIdx                        ( CPF_Parm )

void ACoverLink::UnClaimSlot ( int SlotIdx )
{
	static UFunction* pFnUnClaimSlot = NULL;

	if ( ! pFnUnClaimSlot )
		pFnUnClaimSlot = (UFunction*) UObject::GObjObjects()->Data[ 14382 ];

	ACoverLink_execUnClaimSlot_Parms UnClaimSlot_Parms;
	UnClaimSlot_Parms.SlotIdx = SlotIdx;

	pFnUnClaimSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnClaimSlot, &UnClaimSlot_Parms, NULL );

	pFnUnClaimSlot->FunctionFlags |= 0x400;
};

// Function Engine.CoverLink.UnClaim
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   OldClaim                       ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bUnclaimAll                    ( CPF_Parm )

bool ACoverLink::eventUnClaim ( class APawn* OldClaim, int SlotIdx, unsigned long bUnclaimAll )
{
	static UFunction* pFnUnClaim = NULL;

	if ( ! pFnUnClaim )
		pFnUnClaim = (UFunction*) UObject::GObjObjects()->Data[ 14388 ];

	ACoverLink_eventUnClaim_Parms UnClaim_Parms;
	UnClaim_Parms.OldClaim = OldClaim;
	UnClaim_Parms.SlotIdx = SlotIdx;
	UnClaim_Parms.bUnclaimAll = bUnclaimAll;

	this->ProcessEvent ( pFnUnClaim, &UnClaim_Parms, NULL );

	return UnClaim_Parms.ReturnValue;
};

// Function Engine.CoverLink.UnClaimNative
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AController*             OldClaim                       ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bUnclaimAll                    ( CPF_Parm )

void ACoverLink::UnClaimNative ( class AController* OldClaim, int SlotIdx, unsigned long bUnclaimAll )
{
	static UFunction* pFnUnClaimNative = NULL;

	if ( ! pFnUnClaimNative )
		pFnUnClaimNative = (UFunction*) UObject::GObjObjects()->Data[ 14390 ];

	ACoverLink_execUnClaimNative_Parms UnClaimNative_Parms;
	UnClaimNative_Parms.OldClaim = OldClaim;
	UnClaimNative_Parms.SlotIdx = SlotIdx;
	UnClaimNative_Parms.bUnclaimAll = bUnclaimAll;

	pFnUnClaimNative->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnClaimNative, &UnClaimNative_Parms, NULL );

	pFnUnClaimNative->FunctionFlags |= 0x400;
};

// Function Engine.CoverLink.Claim
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   NewClaim                       ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )

bool ACoverLink::eventClaim ( class APawn* NewClaim, int SlotIdx )
{
	static UFunction* pFnClaim = NULL;

	if ( ! pFnClaim )
		pFnClaim = (UFunction*) UObject::GObjObjects()->Data[ 14402 ];

	ACoverLink_eventClaim_Parms Claim_Parms;
	Claim_Parms.NewClaim = NewClaim;
	Claim_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnClaim, &Claim_Parms, NULL );

	return Claim_Parms.ReturnValue;
};

// Function Engine.CoverLink.DecBlocked
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

int ACoverLink::DecBlocked ( int SlotIdx )
{
	static UFunction* pFnDecBlocked = NULL;

	if ( ! pFnDecBlocked )
		pFnDecBlocked = (UFunction*) UObject::GObjObjects()->Data[ 14406 ];

	ACoverLink_execDecBlocked_Parms DecBlocked_Parms;
	DecBlocked_Parms.SlotIdx = SlotIdx;

	pFnDecBlocked->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDecBlocked, &DecBlocked_Parms, NULL );

	pFnDecBlocked->FunctionFlags |= 0x400;

	return DecBlocked_Parms.ReturnValue;
};

// Function Engine.CoverLink.IncBlocked
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

int ACoverLink::IncBlocked ( int SlotIdx )
{
	static UFunction* pFnIncBlocked = NULL;

	if ( ! pFnIncBlocked )
		pFnIncBlocked = (UFunction*) UObject::GObjObjects()->Data[ 14419 ];

	ACoverLink_execIncBlocked_Parms IncBlocked_Parms;
	IncBlocked_Parms.SlotIdx = SlotIdx;

	pFnIncBlocked->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncBlocked, &IncBlocked_Parms, NULL );

	pFnIncBlocked->FunctionFlags |= 0x400;

	return IncBlocked_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetAiCoverSpots
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ACoverLink::GetAiCoverSpots ( )
{
	static UFunction* pFnGetAiCoverSpots = NULL;

	if ( ! pFnGetAiCoverSpots )
		pFnGetAiCoverSpots = (UFunction*) UObject::GObjObjects()->Data[ 14422 ];

	ACoverLink_execGetAiCoverSpots_Parms GetAiCoverSpots_Parms;

	pFnGetAiCoverSpots->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAiCoverSpots, &GetAiCoverSpots_Parms, NULL );

	pFnGetAiCoverSpots->FunctionFlags |= 0x400;

	return GetAiCoverSpots_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotClaimedBy
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

class AController* ACoverLink::GetSlotClaimedBy ( int SlotIdx )
{
	static UFunction* pFnGetSlotClaimedBy = NULL;

	if ( ! pFnGetSlotClaimedBy )
		pFnGetSlotClaimedBy = (UFunction*) UObject::GObjObjects()->Data[ 14425 ];

	ACoverLink_execGetSlotClaimedBy_Parms GetSlotClaimedBy_Parms;
	GetSlotClaimedBy_Parms.SlotIdx = SlotIdx;

	pFnGetSlotClaimedBy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotClaimedBy, &GetSlotClaimedBy_Parms, NULL );

	pFnGetSlotClaimedBy->FunctionFlags |= 0x400;

	return GetSlotClaimedBy_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotClaimed
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// class AController*             oCtrl                          ( CPF_OptionalParm | CPF_Parm )

bool ACoverLink::GetSlotClaimed ( int SlotIdx, class AController* oCtrl )
{
	static UFunction* pFnGetSlotClaimed = NULL;

	if ( ! pFnGetSlotClaimed )
		pFnGetSlotClaimed = (UFunction*) UObject::GObjObjects()->Data[ 14427 ];

	ACoverLink_execGetSlotClaimed_Parms GetSlotClaimed_Parms;
	GetSlotClaimed_Parms.SlotIdx = SlotIdx;
	GetSlotClaimed_Parms.oCtrl = oCtrl;

	pFnGetSlotClaimed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotClaimed, &GetSlotClaimed_Parms, NULL );

	pFnGetSlotClaimed->FunctionFlags |= 0x400;

	return GetSlotClaimed_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotEnabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

bool ACoverLink::GetSlotEnabled ( int SlotIdx )
{
	static UFunction* pFnGetSlotEnabled = NULL;

	if ( ! pFnGetSlotEnabled )
		pFnGetSlotEnabled = (UFunction*) UObject::GObjObjects()->Data[ 14430 ];

	ACoverLink_execGetSlotEnabled_Parms GetSlotEnabled_Parms;
	GetSlotEnabled_Parms.SlotIdx = SlotIdx;

	pFnGetSlotEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotEnabled, &GetSlotEnabled_Parms, NULL );

	pFnGetSlotEnabled->FunctionFlags |= 0x400;

	return GetSlotEnabled_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

unsigned char ACoverLink::GetSlotType ( int SlotIdx )
{
	static UFunction* pFnGetSlotType = NULL;

	if ( ! pFnGetSlotType )
		pFnGetSlotType = (UFunction*) UObject::GObjObjects()->Data[ 14434 ];

	ACoverLink_execGetSlotType_Parms GetSlotType_Parms;
	GetSlotType_Parms.SlotIdx = SlotIdx;

	pFnGetSlotType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotType, &GetSlotType_Parms, NULL );

	pFnGetSlotType->FunctionFlags |= 0x400;

	return GetSlotType_Parms.ReturnValue;
};

// Function Engine.CoverLink.ClaimNative
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             NewClaim                       ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )

bool ACoverLink::ClaimNative ( class AController* NewClaim, int SlotIdx )
{
	static UFunction* pFnClaimNative = NULL;

	if ( ! pFnClaimNative )
		pFnClaimNative = (UFunction*) UObject::GObjObjects()->Data[ 14437 ];

	ACoverLink_execClaimNative_Parms ClaimNative_Parms;
	ClaimNative_Parms.NewClaim = NewClaim;
	ClaimNative_Parms.SlotIdx = SlotIdx;

	pFnClaimNative->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClaimNative, &ClaimNative_Parms, NULL );

	pFnClaimNative->FunctionFlags |= 0x400;

	return ClaimNative_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetStepFlags
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

int ACoverLink::GetStepFlags ( int SlotIdx )
{
	static UFunction* pFnGetStepFlags = NULL;

	if ( ! pFnGetStepFlags )
		pFnGetStepFlags = (UFunction*) UObject::GObjObjects()->Data[ 14440 ];

	ACoverLink_execGetStepFlags_Parms GetStepFlags_Parms;
	GetStepFlags_Parms.SlotIdx = SlotIdx;

	pFnGetStepFlags->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStepFlags, &GetStepFlags_Parms, NULL );

	pFnGetStepFlags->FunctionFlags |= 0x400;

	return GetStepFlags_Parms.ReturnValue;
};

// Function Engine.CoverLink.SetInvalidUntil
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// int                            SlotIdx                        ( CPF_Parm )
// float                          TimeToBecomeValid              ( CPF_Parm )

void ACoverLink::eventSetInvalidUntil ( int SlotIdx, float TimeToBecomeValid )
{
	static UFunction* pFnSetInvalidUntil = NULL;

	if ( ! pFnSetInvalidUntil )
		pFnSetInvalidUntil = (UFunction*) UObject::GObjObjects()->Data[ 14444 ];

	ACoverLink_eventSetInvalidUntil_Parms SetInvalidUntil_Parms;
	SetInvalidUntil_Parms.SlotIdx = SlotIdx;
	SetInvalidUntil_Parms.TimeToBecomeValid = TimeToBecomeValid;

	this->ProcessEvent ( pFnSetInvalidUntil, &SetInvalidUntil_Parms, NULL );
};

// Function Engine.CoverLink.IsExposedTo
// [0x00420501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// struct FCoverInfo              ChkSlot                        ( CPF_Parm )
// float                          out_ExposedScale               ( CPF_Parm | CPF_OutParm )

bool ACoverLink::IsExposedTo ( int SlotIdx, struct FCoverInfo ChkSlot, float* out_ExposedScale )
{
	static UFunction* pFnIsExposedTo = NULL;

	if ( ! pFnIsExposedTo )
		pFnIsExposedTo = (UFunction*) UObject::GObjObjects()->Data[ 14447 ];

	ACoverLink_execIsExposedTo_Parms IsExposedTo_Parms;
	IsExposedTo_Parms.SlotIdx = SlotIdx;
	memcpy ( &IsExposedTo_Parms.ChkSlot, &ChkSlot, 0xC );

	pFnIsExposedTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsExposedTo, &IsExposedTo_Parms, NULL );

	pFnIsExposedTo->FunctionFlags |= 0x400;

	if ( out_ExposedScale )
		*out_ExposedScale = IsExposedTo_Parms.out_ExposedScale;

	return IsExposedTo_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotMarker
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ACoverSlotMarker*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

class ACoverSlotMarker* ACoverLink::GetSlotMarker ( int SlotIdx )
{
	static UFunction* pFnGetSlotMarker = NULL;

	if ( ! pFnGetSlotMarker )
		pFnGetSlotMarker = (UFunction*) UObject::GObjObjects()->Data[ 14248 ];

	ACoverLink_execGetSlotMarker_Parms GetSlotMarker_Parms;
	GetSlotMarker_Parms.SlotIdx = SlotIdx;

	pFnGetSlotMarker->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotMarker, &GetSlotMarker_Parms, NULL );

	pFnGetSlotMarker->FunctionFlags |= 0x400;

	return GetSlotMarker_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotViewPoint
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned char                  Type                           ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  Action                         ( CPF_OptionalParm | CPF_Parm )

struct FVector ACoverLink::GetSlotViewPoint ( int SlotIdx, unsigned char Type, unsigned char Action )
{
	static UFunction* pFnGetSlotViewPoint = NULL;

	if ( ! pFnGetSlotViewPoint )
		pFnGetSlotViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 14454 ];

	ACoverLink_execGetSlotViewPoint_Parms GetSlotViewPoint_Parms;
	GetSlotViewPoint_Parms.SlotIdx = SlotIdx;
	GetSlotViewPoint_Parms.Type = Type;
	GetSlotViewPoint_Parms.Action = Action;

	pFnGetSlotViewPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotViewPoint, &GetSlotViewPoint_Parms, NULL );

	pFnGetSlotViewPoint->FunctionFlags |= 0x400;

	return GetSlotViewPoint_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotRotation
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bForceUseOffset                ( CPF_OptionalParm | CPF_Parm )

struct FRotator ACoverLink::GetSlotRotation ( int SlotIdx, unsigned long bForceUseOffset )
{
	static UFunction* pFnGetSlotRotation = NULL;

	if ( ! pFnGetSlotRotation )
		pFnGetSlotRotation = (UFunction*) UObject::GObjObjects()->Data[ 14457 ];

	ACoverLink_execGetSlotRotation_Parms GetSlotRotation_Parms;
	GetSlotRotation_Parms.SlotIdx = SlotIdx;
	GetSlotRotation_Parms.bForceUseOffset = bForceUseOffset;

	pFnGetSlotRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotRotation, &GetSlotRotation_Parms, NULL );

	pFnGetSlotRotation->FunctionFlags |= 0x400;

	return GetSlotRotation_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotLocation
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bForceUseOffset                ( CPF_OptionalParm | CPF_Parm )

struct FVector ACoverLink::GetSlotLocation ( int SlotIdx, unsigned long bForceUseOffset )
{
	static UFunction* pFnGetSlotLocation = NULL;

	if ( ! pFnGetSlotLocation )
		pFnGetSlotLocation = (UFunction*) UObject::GObjObjects()->Data[ 14264 ];

	ACoverLink_execGetSlotLocation_Parms GetSlotLocation_Parms;
	GetSlotLocation_Parms.SlotIdx = SlotIdx;
	GetSlotLocation_Parms.bForceUseOffset = bForceUseOffset;

	pFnGetSlotLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotLocation, &GetSlotLocation_Parms, NULL );

	pFnGetSlotLocation->FunctionFlags |= 0x400;

	return GetSlotLocation_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetCoverSlot
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FCoverSlot              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nIdx                           ( CPF_Parm )

struct FCoverSlot ACoverLink::eventGetCoverSlot ( int nIdx )
{
	static UFunction* pFnGetCoverSlot = NULL;

	if ( ! pFnGetCoverSlot )
		pFnGetCoverSlot = (UFunction*) UObject::GObjObjects()->Data[ 14465 ];

	ACoverLink_eventGetCoverSlot_Parms GetCoverSlot_Parms;
	GetCoverSlot_Parms.nIdx = nIdx;

	this->ProcessEvent ( pFnGetCoverSlot, &GetCoverSlot_Parms, NULL );

	return GetCoverSlot_Parms.ReturnValue;
};

// Function Engine.CoverSlotMarker.GetDebugString
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ACoverSlotMarker::eventGetDebugString ( )
{
	static UFunction* pFnGetDebugString = NULL;

	if ( ! pFnGetDebugString )
		pFnGetDebugString = (UFunction*) UObject::GObjObjects()->Data[ 17871 ];

	ACoverSlotMarker_eventGetDebugString_Parms GetDebugString_Parms;

	this->ProcessEvent ( pFnGetDebugString, &GetDebugString_Parms, NULL );

	return GetDebugString_Parms.ReturnValue;
};

// Function Engine.CoverSlotMarker.GetDebugAbbrev
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ACoverSlotMarker::eventGetDebugAbbrev ( )
{
	static UFunction* pFnGetDebugAbbrev = NULL;

	if ( ! pFnGetDebugAbbrev )
		pFnGetDebugAbbrev = (UFunction*) UObject::GObjObjects()->Data[ 17869 ];

	ACoverSlotMarker_eventGetDebugAbbrev_Parms GetDebugAbbrev_Parms;

	this->ProcessEvent ( pFnGetDebugAbbrev, &GetDebugAbbrev_Parms, NULL );

	return GetDebugAbbrev_Parms.ReturnValue;
};

// Function Engine.CoverSlotMarker.IsValidClaim
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ChkClaim                       ( CPF_Parm )
// unsigned long                  bSkipTeamCheck                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipOverlapCheck              ( CPF_OptionalParm | CPF_Parm )

bool ACoverSlotMarker::IsValidClaim ( class APawn* ChkClaim, unsigned long bSkipTeamCheck, unsigned long bSkipOverlapCheck )
{
	static UFunction* pFnIsValidClaim = NULL;

	if ( ! pFnIsValidClaim )
		pFnIsValidClaim = (UFunction*) UObject::GObjObjects()->Data[ 17864 ];

	ACoverSlotMarker_execIsValidClaim_Parms IsValidClaim_Parms;
	IsValidClaim_Parms.ChkClaim = ChkClaim;
	IsValidClaim_Parms.bSkipTeamCheck = bSkipTeamCheck;
	IsValidClaim_Parms.bSkipOverlapCheck = bSkipOverlapCheck;

	pFnIsValidClaim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidClaim, &IsValidClaim_Parms, NULL );

	pFnIsValidClaim->FunctionFlags |= 0x400;

	return IsValidClaim_Parms.ReturnValue;
};

// Function Engine.CoverSlotMarker.SetSlotEnabled
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_Parm )

void ACoverSlotMarker::SetSlotEnabled ( unsigned long bEnable )
{
	static UFunction* pFnSetSlotEnabled = NULL;

	if ( ! pFnSetSlotEnabled )
		pFnSetSlotEnabled = (UFunction*) UObject::GObjObjects()->Data[ 17862 ];

	ACoverSlotMarker_execSetSlotEnabled_Parms SetSlotEnabled_Parms;
	SetSlotEnabled_Parms.bEnable = bEnable;

	pFnSetSlotEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSlotEnabled, &SetSlotEnabled_Parms, NULL );

	pFnSetSlotEnabled->FunctionFlags |= 0x400;
};

// Function Engine.CoverSlotMarker.GetSlotRotation
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator ACoverSlotMarker::GetSlotRotation ( )
{
	static UFunction* pFnGetSlotRotation = NULL;

	if ( ! pFnGetSlotRotation )
		pFnGetSlotRotation = (UFunction*) UObject::GObjObjects()->Data[ 17860 ];

	ACoverSlotMarker_execGetSlotRotation_Parms GetSlotRotation_Parms;

	pFnGetSlotRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotRotation, &GetSlotRotation_Parms, NULL );

	pFnGetSlotRotation->FunctionFlags |= 0x400;

	return GetSlotRotation_Parms.ReturnValue;
};

// Function Engine.CoverSlotMarker.GetSlotLocation
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ACoverSlotMarker::GetSlotLocation ( )
{
	static UFunction* pFnGetSlotLocation = NULL;

	if ( ! pFnGetSlotLocation )
		pFnGetSlotLocation = (UFunction*) UObject::GObjObjects()->Data[ 17858 ];

	ACoverSlotMarker_execGetSlotLocation_Parms GetSlotLocation_Parms;

	pFnGetSlotLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotLocation, &GetSlotLocation_Parms, NULL );

	pFnGetSlotLocation->FunctionFlags |= 0x400;

	return GetSlotLocation_Parms.ReturnValue;
};

// Function Engine.DoorMarker.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ADoorMarker::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = (UFunction*) UObject::GObjObjects()->Data[ 18957 ];

	ADoorMarker_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.DoorMarker.ProceedWithMove
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ADoorMarker::ProceedWithMove ( class APawn* Other )
{
	static UFunction* pFnProceedWithMove = NULL;

	if ( ! pFnProceedWithMove )
		pFnProceedWithMove = (UFunction*) UObject::GObjObjects()->Data[ 18953 ];

	ADoorMarker_execProceedWithMove_Parms ProceedWithMove_Parms;
	ProceedWithMove_Parms.Other = Other;

	this->ProcessEvent ( pFnProceedWithMove, &ProceedWithMove_Parms, NULL );

	return ProceedWithMove_Parms.ReturnValue;
};

// Function Engine.DoorMarker.SpecialHandling
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

class AActor* ADoorMarker::eventSpecialHandling ( class APawn* Other )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = (UFunction*) UObject::GObjObjects()->Data[ 18946 ];

	ADoorMarker_eventSpecialHandling_Parms SpecialHandling_Parms;
	SpecialHandling_Parms.Other = Other;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );

	return SpecialHandling_Parms.ReturnValue;
};

// Function Engine.DoorMarker.MoverClosed
// [0x00020002] 
// Parameters infos:

void ADoorMarker::MoverClosed ( )
{
	static UFunction* pFnMoverClosed = NULL;

	if ( ! pFnMoverClosed )
		pFnMoverClosed = (UFunction*) UObject::GObjObjects()->Data[ 18945 ];

	ADoorMarker_execMoverClosed_Parms MoverClosed_Parms;

	this->ProcessEvent ( pFnMoverClosed, &MoverClosed_Parms, NULL );
};

// Function Engine.DoorMarker.MoverOpened
// [0x00020002] 
// Parameters infos:

void ADoorMarker::MoverOpened ( )
{
	static UFunction* pFnMoverOpened = NULL;

	if ( ! pFnMoverOpened )
		pFnMoverOpened = (UFunction*) UObject::GObjObjects()->Data[ 18944 ];

	ADoorMarker_execMoverOpened_Parms MoverOpened_Parms;

	this->ProcessEvent ( pFnMoverOpened, &MoverOpened_Parms, NULL );
};

// Function Engine.DoorMarker.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ADoorMarker::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 18940 ];

	ADoorMarker_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Ladder.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ALadder::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = (UFunction*) UObject::GObjObjects()->Data[ 13661 ];

	ALadder_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.LiftCenter.ProceedWithMove
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ALiftCenter::ProceedWithMove ( class APawn* Other )
{
	static UFunction* pFnProceedWithMove = NULL;

	if ( ! pFnProceedWithMove )
		pFnProceedWithMove = (UFunction*) UObject::GObjObjects()->Data[ 23368 ];

	ALiftCenter_execProceedWithMove_Parms ProceedWithMove_Parms;
	ProceedWithMove_Parms.Other = Other;

	this->ProcessEvent ( pFnProceedWithMove, &ProceedWithMove_Parms, NULL );

	return ProceedWithMove_Parms.ReturnValue;
};

// Function Engine.LiftCenter.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ALiftCenter::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = (UFunction*) UObject::GObjObjects()->Data[ 23365 ];

	ALiftCenter_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.LiftCenter.SpecialHandling
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

class AActor* ALiftCenter::eventSpecialHandling ( class APawn* Other )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = (UFunction*) UObject::GObjObjects()->Data[ 23360 ];

	ALiftCenter_eventSpecialHandling_Parms SpecialHandling_Parms;
	SpecialHandling_Parms.Other = Other;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );

	return SpecialHandling_Parms.ReturnValue;
};

// Function Engine.LiftCenter.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ALiftCenter::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 23357 ];

	ALiftCenter_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.LiftExit.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ALiftExit::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = (UFunction*) UObject::GObjObjects()->Data[ 23383 ];

	ALiftExit_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.LiftExit.WaitForLift
// [0x00020002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void ALiftExit::WaitForLift ( class APawn* Other )
{
	static UFunction* pFnWaitForLift = NULL;

	if ( ! pFnWaitForLift )
		pFnWaitForLift = (UFunction*) UObject::GObjObjects()->Data[ 23380 ];

	ALiftExit_execWaitForLift_Parms WaitForLift_Parms;
	WaitForLift_Parms.Other = Other;

	this->ProcessEvent ( pFnWaitForLift, &WaitForLift_Parms, NULL );
};

// Function Engine.LiftExit.CanBeReachedFromLiftBy
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ALiftExit::CanBeReachedFromLiftBy ( class APawn* Other )
{
	static UFunction* pFnCanBeReachedFromLiftBy = NULL;

	if ( ! pFnCanBeReachedFromLiftBy )
		pFnCanBeReachedFromLiftBy = (UFunction*) UObject::GObjObjects()->Data[ 23371 ];

	ALiftExit_execCanBeReachedFromLiftBy_Parms CanBeReachedFromLiftBy_Parms;
	CanBeReachedFromLiftBy_Parms.Other = Other;

	this->ProcessEvent ( pFnCanBeReachedFromLiftBy, &CanBeReachedFromLiftBy_Parms, NULL );

	return CanBeReachedFromLiftBy_Parms.ReturnValue;
};

// Function Engine.PathNode.GetDebugAbbrev
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APathNode::eventGetDebugAbbrev ( )
{
	static UFunction* pFnGetDebugAbbrev = NULL;

	if ( ! pFnGetDebugAbbrev )
		pFnGetDebugAbbrev = (UFunction*) UObject::GObjObjects()->Data[ 27803 ];

	APathNode_eventGetDebugAbbrev_Parms GetDebugAbbrev_Parms;

	this->ProcessEvent ( pFnGetDebugAbbrev, &GetDebugAbbrev_Parms, NULL );

	return GetDebugAbbrev_Parms.ReturnValue;
};

// Function Engine.PickupFactory.DelayRespawn
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APickupFactory::DelayRespawn ( )
{
	static UFunction* pFnDelayRespawn = NULL;

	if ( ! pFnDelayRespawn )
		pFnDelayRespawn = (UFunction*) UObject::GObjObjects()->Data[ 28293 ];

	APickupFactory_execDelayRespawn_Parms DelayRespawn_Parms;

	this->ProcessEvent ( pFnDelayRespawn, &DelayRespawn_Parms, NULL );

	return DelayRespawn_Parms.ReturnValue;
};

// Function Engine.PickupFactory.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APickupFactory::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 28287 ];

	APickupFactory_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.PickupFactory.SetPickupVisible
// [0x00020102] 
// Parameters infos:

void APickupFactory::SetPickupVisible ( )
{
	static UFunction* pFnSetPickupVisible = NULL;

	if ( ! pFnSetPickupVisible )
		pFnSetPickupVisible = (UFunction*) UObject::GObjObjects()->Data[ 28286 ];

	APickupFactory_execSetPickupVisible_Parms SetPickupVisible_Parms;

	this->ProcessEvent ( pFnSetPickupVisible, &SetPickupVisible_Parms, NULL );
};

// Function Engine.PickupFactory.SetPickupHidden
// [0x00020102] 
// Parameters infos:

void APickupFactory::SetPickupHidden ( )
{
	static UFunction* pFnSetPickupHidden = NULL;

	if ( ! pFnSetPickupHidden )
		pFnSetPickupHidden = (UFunction*) UObject::GObjObjects()->Data[ 28285 ];

	APickupFactory_execSetPickupHidden_Parms SetPickupHidden_Parms;

	this->ProcessEvent ( pFnSetPickupHidden, &SetPickupHidden_Parms, NULL );
};

// Function Engine.PickupFactory.RespawnEffect
// [0x00020000] 
// Parameters infos:

void APickupFactory::RespawnEffect ( )
{
	static UFunction* pFnRespawnEffect = NULL;

	if ( ! pFnRespawnEffect )
		pFnRespawnEffect = (UFunction*) UObject::GObjObjects()->Data[ 28284 ];

	APickupFactory_execRespawnEffect_Parms RespawnEffect_Parms;

	this->ProcessEvent ( pFnRespawnEffect, &RespawnEffect_Parms, NULL );
};

// Function Engine.PickupFactory.GetRespawnTime
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APickupFactory::GetRespawnTime ( )
{
	static UFunction* pFnGetRespawnTime = NULL;

	if ( ! pFnGetRespawnTime )
		pFnGetRespawnTime = (UFunction*) UObject::GObjObjects()->Data[ 28282 ];

	APickupFactory_execGetRespawnTime_Parms GetRespawnTime_Parms;

	this->ProcessEvent ( pFnGetRespawnTime, &GetRespawnTime_Parms, NULL );

	return GetRespawnTime_Parms.ReturnValue;
};

// Function Engine.PickupFactory.RecheckValidTouch
// [0x00020000] 
// Parameters infos:

void APickupFactory::RecheckValidTouch ( )
{
	static UFunction* pFnRecheckValidTouch = NULL;

	if ( ! pFnRecheckValidTouch )
		pFnRecheckValidTouch = (UFunction*) UObject::GObjObjects()->Data[ 28259 ];

	APickupFactory_execRecheckValidTouch_Parms RecheckValidTouch_Parms;

	this->ProcessEvent ( pFnRecheckValidTouch, &RecheckValidTouch_Parms, NULL );
};

// Function Engine.PickupFactory.PickedUpBy
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APickupFactory::PickedUpBy ( class APawn* P )
{
	static UFunction* pFnPickedUpBy = NULL;

	if ( ! pFnPickedUpBy )
		pFnPickedUpBy = (UFunction*) UObject::GObjObjects()->Data[ 28256 ];

	APickupFactory_execPickedUpBy_Parms PickedUpBy_Parms;
	PickedUpBy_Parms.P = P;

	this->ProcessEvent ( pFnPickedUpBy, &PickedUpBy_Parms, NULL );
};

// Function Engine.PickupFactory.GiveTo
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APickupFactory::GiveTo ( class APawn* P )
{
	static UFunction* pFnGiveTo = NULL;

	if ( ! pFnGiveTo )
		pFnGiveTo = (UFunction*) UObject::GObjObjects()->Data[ 28254 ];

	APickupFactory_execGiveTo_Parms GiveTo_Parms;
	GiveTo_Parms.P = P;

	this->ProcessEvent ( pFnGiveTo, &GiveTo_Parms, NULL );
};

// Function Engine.PickupFactory.ReadyToPickup
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          MaxWait                        ( CPF_Parm )

bool APickupFactory::ReadyToPickup ( float MaxWait )
{
	static UFunction* pFnReadyToPickup = NULL;

	if ( ! pFnReadyToPickup )
		pFnReadyToPickup = (UFunction*) UObject::GObjObjects()->Data[ 28251 ];

	APickupFactory_execReadyToPickup_Parms ReadyToPickup_Parms;
	ReadyToPickup_Parms.MaxWait = MaxWait;

	this->ProcessEvent ( pFnReadyToPickup, &ReadyToPickup_Parms, NULL );

	return ReadyToPickup_Parms.ReturnValue;
};

// Function Engine.PickupFactory.SpawnCopyFor
// [0x00020002] 
// Parameters infos:
// class APawn*                   Recipient                      ( CPF_Parm )

void APickupFactory::SpawnCopyFor ( class APawn* Recipient )
{
	static UFunction* pFnSpawnCopyFor = NULL;

	if ( ! pFnSpawnCopyFor )
		pFnSpawnCopyFor = (UFunction*) UObject::GObjObjects()->Data[ 28248 ];

	APickupFactory_execSpawnCopyFor_Parms SpawnCopyFor_Parms;
	SpawnCopyFor_Parms.Recipient = Recipient;

	this->ProcessEvent ( pFnSpawnCopyFor, &SpawnCopyFor_Parms, NULL );
};

// Function Engine.PickupFactory.DetourWeight
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )
// float                          PathWeight                     ( CPF_Parm )

float APickupFactory::eventDetourWeight ( class APawn* Other, float PathWeight )
{
	static UFunction* pFnDetourWeight = NULL;

	if ( ! pFnDetourWeight )
		pFnDetourWeight = (UFunction*) UObject::GObjObjects()->Data[ 28243 ];

	APickupFactory_eventDetourWeight_Parms DetourWeight_Parms;
	DetourWeight_Parms.Other = Other;
	DetourWeight_Parms.PathWeight = PathWeight;

	this->ProcessEvent ( pFnDetourWeight, &DetourWeight_Parms, NULL );

	return DetourWeight_Parms.ReturnValue;
};

// Function Engine.PickupFactory.StartSleeping
// [0x00020002] 
// Parameters infos:

void APickupFactory::StartSleeping ( )
{
	static UFunction* pFnStartSleeping = NULL;

	if ( ! pFnStartSleeping )
		pFnStartSleeping = (UFunction*) UObject::GObjObjects()->Data[ 28242 ];

	APickupFactory_execStartSleeping_Parms StartSleeping_Parms;

	this->ProcessEvent ( pFnStartSleeping, &StartSleeping_Parms, NULL );
};

// Function Engine.PickupFactory.SetRespawn
// [0x00020002] 
// Parameters infos:

void APickupFactory::SetRespawn ( )
{
	static UFunction* pFnSetRespawn = NULL;

	if ( ! pFnSetRespawn )
		pFnSetRespawn = (UFunction*) UObject::GObjObjects()->Data[ 28241 ];

	APickupFactory_execSetRespawn_Parms SetRespawn_Parms;

	this->ProcessEvent ( pFnSetRespawn, &SetRespawn_Parms, NULL );
};

// Function Engine.PickupFactory.CheckForErrors
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APickupFactory::CheckForErrors ( )
{
	static UFunction* pFnCheckForErrors = NULL;

	if ( ! pFnCheckForErrors )
		pFnCheckForErrors = (UFunction*) UObject::GObjObjects()->Data[ 28236 ];

	APickupFactory_execCheckForErrors_Parms CheckForErrors_Parms;

	this->ProcessEvent ( pFnCheckForErrors, &CheckForErrors_Parms, NULL );

	return CheckForErrors_Parms.ReturnValue;
};

// Function Engine.PickupFactory.Reset
// [0x00020002] 
// Parameters infos:

void APickupFactory::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 28235 ];

	APickupFactory_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.PickupFactory.StaticPrecache
// [0x00022000] 
// Parameters infos:
// class AWorldInfo*              W                              ( CPF_Parm )

void APickupFactory::StaticPrecache ( class AWorldInfo* W )
{
	static UFunction* pFnStaticPrecache = NULL;

	if ( ! pFnStaticPrecache )
		pFnStaticPrecache = (UFunction*) UObject::GObjObjects()->Data[ 28233 ];

	APickupFactory_execStaticPrecache_Parms StaticPrecache_Parms;
	StaticPrecache_Parms.W = W;

	this->ProcessEvent ( pFnStaticPrecache, &StaticPrecache_Parms, NULL );
};

// Function Engine.PickupFactory.SetPickupMesh
// [0x00020102] 
// Parameters infos:

void APickupFactory::SetPickupMesh ( )
{
	static UFunction* pFnSetPickupMesh = NULL;

	if ( ! pFnSetPickupMesh )
		pFnSetPickupMesh = (UFunction*) UObject::GObjObjects()->Data[ 28231 ];

	APickupFactory_execSetPickupMesh_Parms SetPickupMesh_Parms;

	this->ProcessEvent ( pFnSetPickupMesh, &SetPickupMesh_Parms, NULL );
};

// Function Engine.PickupFactory.ShutDown
// [0x00020102] 
// Parameters infos:

void APickupFactory::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 28230 ];

	APickupFactory_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function Engine.PickupFactory.SetInitialState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APickupFactory::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = (UFunction*) UObject::GObjObjects()->Data[ 28229 ];

	APickupFactory_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function Engine.PickupFactory.InitializePickup
// [0x00020102] 
// Parameters infos:

void APickupFactory::InitializePickup ( )
{
	static UFunction* pFnInitializePickup = NULL;

	if ( ! pFnInitializePickup )
		pFnInitializePickup = (UFunction*) UObject::GObjObjects()->Data[ 28224 ];

	APickupFactory_execInitializePickup_Parms InitializePickup_Parms;

	this->ProcessEvent ( pFnInitializePickup, &InitializePickup_Parms, NULL );
};

// Function Engine.PickupFactory.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APickupFactory::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 28223 ];

	APickupFactory_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.PickupFactory.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void APickupFactory::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 28220 ];

	APickupFactory_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.PlayerStart.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void APlayerStart::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 28457 ];

	APlayerStart_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.PortalMarker.CanTeleport
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool APortalMarker::CanTeleport ( class AActor* A )
{
	static UFunction* pFnCanTeleport = NULL;

	if ( ! pFnCanTeleport )
		pFnCanTeleport = (UFunction*) UObject::GObjObjects()->Data[ 28470 ];

	APortalMarker_execCanTeleport_Parms CanTeleport_Parms;
	CanTeleport_Parms.A = A;

	pFnCanTeleport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanTeleport, &CanTeleport_Parms, NULL );

	pFnCanTeleport->FunctionFlags |= 0x400;

	return CanTeleport_Parms.ReturnValue;
};

// Function Engine.Pylon.CanReachPylon
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APylon*                  DestPylon                      ( CPF_Parm )
// class AController*             C                              ( CPF_Parm )

bool APylon::CanReachPylon ( class APylon* DestPylon, class AController* C )
{
	static UFunction* pFnCanReachPylon = NULL;

	if ( ! pFnCanReachPylon )
		pFnCanReachPylon = (UFunction*) UObject::GObjObjects()->Data[ 12247 ];

	APylon_execCanReachPylon_Parms CanReachPylon_Parms;
	CanReachPylon_Parms.DestPylon = DestPylon;
	CanReachPylon_Parms.C = C;

	pFnCanReachPylon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanReachPylon, &CanReachPylon_Parms, NULL );

	pFnCanReachPylon->FunctionFlags |= 0x400;

	return CanReachPylon_Parms.ReturnValue;
};

// Function Engine.Pylon.OnToggle
// [0x00020002] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void APylon::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 12245 ];

	APylon_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.Pylon.IsEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APylon::eventIsEnabled ( )
{
	static UFunction* pFnIsEnabled = NULL;

	if ( ! pFnIsEnabled )
		pFnIsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 12243 ];

	APylon_eventIsEnabled_Parms IsEnabled_Parms;

	this->ProcessEvent ( pFnIsEnabled, &IsEnabled_Parms, NULL );

	return IsEnabled_Parms.ReturnValue;
};

// Function Engine.Pylon.SetEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )

void APylon::eventSetEnabled ( unsigned long bEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 12239 ];

	APylon_eventSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bEnabled = bEnabled;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );
};

// Function Engine.AISwitchablePylon.IsEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AAISwitchablePylon::eventIsEnabled ( )
{
	static UFunction* pFnIsEnabled = NULL;

	if ( ! pFnIsEnabled )
		pFnIsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 12281 ];

	AAISwitchablePylon_eventIsEnabled_Parms IsEnabled_Parms;

	this->ProcessEvent ( pFnIsEnabled, &IsEnabled_Parms, NULL );

	return IsEnabled_Parms.ReturnValue;
};

// Function Engine.AISwitchablePylon.SetEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )

void AAISwitchablePylon::eventSetEnabled ( unsigned long bEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 12279 ];

	AAISwitchablePylon_eventSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bEnabled = bEnabled;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );
};

// Function Engine.AISwitchablePylon.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void AAISwitchablePylon::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 12277 ];

	AAISwitchablePylon_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.DynamicPylon.StoppedMoving
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ADynamicPylon::eventStoppedMoving ( )
{
	static UFunction* pFnStoppedMoving = NULL;

	if ( ! pFnStoppedMoving )
		pFnStoppedMoving = (UFunction*) UObject::GObjObjects()->Data[ 19083 ];

	ADynamicPylon_eventStoppedMoving_Parms StoppedMoving_Parms;

	this->ProcessEvent ( pFnStoppedMoving, &StoppedMoving_Parms, NULL );
};

// Function Engine.DynamicPylon.StartedMoving
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ADynamicPylon::eventStartedMoving ( )
{
	static UFunction* pFnStartedMoving = NULL;

	if ( ! pFnStartedMoving )
		pFnStartedMoving = (UFunction*) UObject::GObjObjects()->Data[ 19081 ];

	ADynamicPylon_eventStartedMoving_Parms StartedMoving_Parms;

	this->ProcessEvent ( pFnStartedMoving, &StartedMoving_Parms, NULL );
};

// Function Engine.DynamicPylon.FlushDynamicEdges
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ADynamicPylon::FlushDynamicEdges ( )
{
	static UFunction* pFnFlushDynamicEdges = NULL;

	if ( ! pFnFlushDynamicEdges )
		pFnFlushDynamicEdges = (UFunction*) UObject::GObjObjects()->Data[ 19080 ];

	ADynamicPylon_execFlushDynamicEdges_Parms FlushDynamicEdges_Parms;

	pFnFlushDynamicEdges->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlushDynamicEdges, &FlushDynamicEdges_Parms, NULL );

	pFnFlushDynamicEdges->FunctionFlags |= 0x400;
};

// Function Engine.DynamicPylon.RebuildDynamicEdges
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ADynamicPylon::RebuildDynamicEdges ( )
{
	static UFunction* pFnRebuildDynamicEdges = NULL;

	if ( ! pFnRebuildDynamicEdges )
		pFnRebuildDynamicEdges = (UFunction*) UObject::GObjObjects()->Data[ 19079 ];

	ADynamicPylon_execRebuildDynamicEdges_Parms RebuildDynamicEdges_Parms;

	pFnRebuildDynamicEdges->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRebuildDynamicEdges, &RebuildDynamicEdges_Parms, NULL );

	pFnRebuildDynamicEdges->FunctionFlags |= 0x400;
};

// Function Engine.DynamicPylon.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void ADynamicPylon::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 19078 ];

	ADynamicPylon_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Teleporter.SpecialHandling
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

class AActor* ATeleporter::eventSpecialHandling ( class APawn* Other )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = (UFunction*) UObject::GObjObjects()->Data[ 31775 ];

	ATeleporter_eventSpecialHandling_Parms SpecialHandling_Parms;
	SpecialHandling_Parms.Other = Other;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );

	return SpecialHandling_Parms.ReturnValue;
};

// Function Engine.Teleporter.PostTouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATeleporter::eventPostTouch ( class AActor* Other )
{
	static UFunction* pFnPostTouch = NULL;

	if ( ! pFnPostTouch )
		pFnPostTouch = (UFunction*) UObject::GObjObjects()->Data[ 31770 ];

	ATeleporter_eventPostTouch_Parms PostTouch_Parms;
	PostTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnPostTouch, &PostTouch_Parms, NULL );
};

// Function Engine.Teleporter.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATeleporter::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 31764 ];

	ATeleporter_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.Teleporter.Accept
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Incoming                       ( CPF_Parm )
// class AActor*                  Source                         ( CPF_Parm )

bool ATeleporter::eventAccept ( class AActor* Incoming, class AActor* Source )
{
	static UFunction* pFnAccept = NULL;

	if ( ! pFnAccept )
		pFnAccept = (UFunction*) UObject::GObjObjects()->Data[ 31748 ];

	ATeleporter_eventAccept_Parms Accept_Parms;
	Accept_Parms.Incoming = Incoming;
	Accept_Parms.Source = Source;

	this->ProcessEvent ( pFnAccept, &Accept_Parms, NULL );

	return Accept_Parms.ReturnValue;
};

// Function Engine.Teleporter.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATeleporter::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 31746 ];

	ATeleporter_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Teleporter.CanTeleport
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool ATeleporter::CanTeleport ( class AActor* A )
{
	static UFunction* pFnCanTeleport = NULL;

	if ( ! pFnCanTeleport )
		pFnCanTeleport = (UFunction*) UObject::GObjObjects()->Data[ 31743 ];

	ATeleporter_execCanTeleport_Parms CanTeleport_Parms;
	CanTeleport_Parms.A = A;

	pFnCanTeleport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanTeleport, &CanTeleport_Parms, NULL );

	pFnCanTeleport->FunctionFlags |= 0x400;

	return CanTeleport_Parms.ReturnValue;
};

// Function Engine.Projectile.ApplyFluidSurfaceImpact
// [0x00020102] 
// Parameters infos:
// class AFluidSurfaceActor*      Fluid                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void AProjectile::ApplyFluidSurfaceImpact ( class AFluidSurfaceActor* Fluid, struct FVector HitLocation )
{
	static UFunction* pFnApplyFluidSurfaceImpact = NULL;

	if ( ! pFnApplyFluidSurfaceImpact )
		pFnApplyFluidSurfaceImpact = (UFunction*) UObject::GObjObjects()->Data[ 28677 ];

	AProjectile_execApplyFluidSurfaceImpact_Parms ApplyFluidSurfaceImpact_Parms;
	ApplyFluidSurfaceImpact_Parms.Fluid = Fluid;
	memcpy ( &ApplyFluidSurfaceImpact_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnApplyFluidSurfaceImpact, &ApplyFluidSurfaceImpact_Parms, NULL );
};

// Function Engine.Projectile.GetRange
// [0x00022102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AProjectile::GetRange ( )
{
	static UFunction* pFnGetRange = NULL;

	if ( ! pFnGetRange )
		pFnGetRange = (UFunction*) UObject::GObjObjects()->Data[ 28674 ];

	AProjectile_execGetRange_Parms GetRange_Parms;

	this->ProcessEvent ( pFnGetRange, &GetRange_Parms, NULL );

	return GetRange_Parms.ReturnValue;
};

// Function Engine.Projectile.StaticGetTimeToLocation
// [0x00022102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TargetLoc                      ( CPF_Parm )
// struct FVector                 StartLoc                       ( CPF_Parm )
// class AController*             RequestedBy                    ( CPF_Parm )

float AProjectile::StaticGetTimeToLocation ( struct FVector TargetLoc, struct FVector StartLoc, class AController* RequestedBy )
{
	static UFunction* pFnStaticGetTimeToLocation = NULL;

	if ( ! pFnStaticGetTimeToLocation )
		pFnStaticGetTimeToLocation = (UFunction*) UObject::GObjObjects()->Data[ 28669 ];

	AProjectile_execStaticGetTimeToLocation_Parms StaticGetTimeToLocation_Parms;
	memcpy ( &StaticGetTimeToLocation_Parms.TargetLoc, &TargetLoc, 0xC );
	memcpy ( &StaticGetTimeToLocation_Parms.StartLoc, &StartLoc, 0xC );
	StaticGetTimeToLocation_Parms.RequestedBy = RequestedBy;

	this->ProcessEvent ( pFnStaticGetTimeToLocation, &StaticGetTimeToLocation_Parms, NULL );

	return StaticGetTimeToLocation_Parms.ReturnValue;
};

// Function Engine.Projectile.GetTimeToLocation
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TargetLoc                      ( CPF_Parm )

float AProjectile::GetTimeToLocation ( struct FVector TargetLoc )
{
	static UFunction* pFnGetTimeToLocation = NULL;

	if ( ! pFnGetTimeToLocation )
		pFnGetTimeToLocation = (UFunction*) UObject::GObjObjects()->Data[ 28666 ];

	AProjectile_execGetTimeToLocation_Parms GetTimeToLocation_Parms;
	memcpy ( &GetTimeToLocation_Parms.TargetLoc, &TargetLoc, 0xC );

	this->ProcessEvent ( pFnGetTimeToLocation, &GetTimeToLocation_Parms, NULL );

	return GetTimeToLocation_Parms.ReturnValue;
};

// Function Engine.Projectile.FellOutOfWorld
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void AProjectile::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 28664 ];

	AProjectile_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function Engine.Projectile.IsStationary
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AProjectile::IsStationary ( )
{
	static UFunction* pFnIsStationary = NULL;

	if ( ! pFnIsStationary )
		pFnIsStationary = (UFunction*) UObject::GObjObjects()->Data[ 28662 ];

	AProjectile_execIsStationary_Parms IsStationary_Parms;

	this->ProcessEvent ( pFnIsStationary, &IsStationary_Parms, NULL );

	return IsStationary_Parms.ReturnValue;
};

// Function Engine.Projectile.RandSpin
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// float                          spinRate                       ( CPF_Parm )

void AProjectile::RandSpin ( float spinRate )
{
	static UFunction* pFnRandSpin = NULL;

	if ( ! pFnRandSpin )
		pFnRandSpin = (UFunction*) UObject::GObjObjects()->Data[ 28660 ];

	AProjectile_execRandSpin_Parms RandSpin_Parms;
	RandSpin_Parms.spinRate = spinRate;

	this->ProcessEvent ( pFnRandSpin, &RandSpin_Parms, NULL );
};

// Function Engine.Projectile.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AProjectile::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 28657 ];

	AProjectile_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function Engine.Projectile.EncroachedBy
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AProjectile::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = (UFunction*) UObject::GObjObjects()->Data[ 28655 ];

	AProjectile_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function Engine.Projectile.HitWall
// [0x00020922] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void AProjectile::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 28649 ];

	AProjectile_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function Engine.Projectile.ProcessTouch
// [0x00020102] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AProjectile::ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = (UFunction*) UObject::GObjObjects()->Data[ 28645 ];

	AProjectile_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.Other = Other;
	memcpy ( &ProcessTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function Engine.Projectile.Touch
// [0x00020922] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AProjectile::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 28639 ];

	AProjectile_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.Projectile.HurtRadius
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DamageAmount                   ( CPF_Parm )
// float                          InDamageRadius                 ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// class AActor*                  IgnoredActor                   ( CPF_OptionalParm | CPF_Parm )
// class AController*             InstigatedByController         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDoFullDamage                  ( CPF_OptionalParm | CPF_Parm )
// class UDamageType*             pDamage                        ( CPF_OptionalParm | CPF_Parm )

bool AProjectile::HurtRadius ( float DamageAmount, float InDamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage, class UDamageType* pDamage )
{
	static UFunction* pFnHurtRadius = NULL;

	if ( ! pFnHurtRadius )
		pFnHurtRadius = (UFunction*) UObject::GObjObjects()->Data[ 28626 ];

	AProjectile_execHurtRadius_Parms HurtRadius_Parms;
	HurtRadius_Parms.DamageAmount = DamageAmount;
	HurtRadius_Parms.InDamageRadius = InDamageRadius;
	HurtRadius_Parms.DamageType = DamageType;
	HurtRadius_Parms.Momentum = Momentum;
	memcpy ( &HurtRadius_Parms.HurtOrigin, &HurtOrigin, 0xC );
	HurtRadius_Parms.IgnoredActor = IgnoredActor;
	HurtRadius_Parms.InstigatedByController = InstigatedByController;
	HurtRadius_Parms.bDoFullDamage = bDoFullDamage;
	HurtRadius_Parms.pDamage = pDamage;

	this->ProcessEvent ( pFnHurtRadius, &HurtRadius_Parms, NULL );

	return HurtRadius_Parms.ReturnValue;
};

// Function Engine.Projectile.ProjectileHurtRadius
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          inDamage                       ( CPF_Parm )
// float                          InRadius                       ( CPF_Parm )
// float                          InMomentum                     ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool AProjectile::ProjectileHurtRadius ( float inDamage, float InRadius, float InMomentum, struct FVector HurtOrigin, struct FVector HitNormal )
{
	static UFunction* pFnProjectileHurtRadius = NULL;

	if ( ! pFnProjectileHurtRadius )
		pFnProjectileHurtRadius = (UFunction*) UObject::GObjObjects()->Data[ 28610 ];

	AProjectile_execProjectileHurtRadius_Parms ProjectileHurtRadius_Parms;
	ProjectileHurtRadius_Parms.inDamage = inDamage;
	ProjectileHurtRadius_Parms.InRadius = InRadius;
	ProjectileHurtRadius_Parms.InMomentum = InMomentum;
	memcpy ( &ProjectileHurtRadius_Parms.HurtOrigin, &HurtOrigin, 0xC );
	memcpy ( &ProjectileHurtRadius_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProjectileHurtRadius, &ProjectileHurtRadius_Parms, NULL );

	return ProjectileHurtRadius_Parms.ReturnValue;
};

// Function Engine.Projectile.Reset
// [0x00020002] 
// Parameters infos:

void AProjectile::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 28609 ];

	AProjectile_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Projectile.CanSplash
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AProjectile::CanSplash ( )
{
	static UFunction* pFnCanSplash = NULL;

	if ( ! pFnCanSplash )
		pFnCanSplash = (UFunction*) UObject::GObjObjects()->Data[ 28607 ];

	AProjectile_execCanSplash_Parms CanSplash_Parms;

	this->ProcessEvent ( pFnCanSplash, &CanSplash_Parms, NULL );

	return CanSplash_Parms.ReturnValue;
};

// Function Engine.Projectile.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AProjectile::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = (UFunction*) UObject::GObjObjects()->Data[ 28605 ];

	AProjectile_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.Projectile.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )

void AProjectile::Init ( struct FVector Direction )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 28602 ];

	AProjectile_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.Direction, &Direction, 0xC );

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Engine.Projectile.Destroyed
// [0x00020102] 
// Parameters infos:

void AProjectile::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 28600 ];

	AProjectile_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Projectile.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AProjectile::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 28597 ];

	AProjectile_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Projectile.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AProjectile::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 28595 ];

	AProjectile_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.Projectile.EncroachingOn
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AProjectile::eventEncroachingOn ( class AActor* Other )
{
	static UFunction* pFnEncroachingOn = NULL;

	if ( ! pFnEncroachingOn )
		pFnEncroachingOn = (UFunction*) UObject::GObjObjects()->Data[ 28592 ];

	AProjectile_eventEncroachingOn_Parms EncroachingOn_Parms;
	EncroachingOn_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachingOn, &EncroachingOn_Parms, NULL );

	return EncroachingOn_Parms.ReturnValue;
};

// Function Engine.SceneCaptureActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ASceneCaptureActor::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 28475 ];

	ASceneCaptureActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.PortalTeleporter.StopsProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AProjectile*             P                              ( CPF_Parm )

bool APortalTeleporter::StopsProjectile ( class AProjectile* P )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = (UFunction*) UObject::GObjObjects()->Data[ 28534 ];

	APortalTeleporter_execStopsProjectile_Parms StopsProjectile_Parms;
	StopsProjectile_Parms.P = P;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );

	return StopsProjectile_Parms.ReturnValue;
};

// Function Engine.PortalTeleporter.CreatePortalTexture
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTextureRenderTarget2D*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UTextureRenderTarget2D* APortalTeleporter::CreatePortalTexture ( )
{
	static UFunction* pFnCreatePortalTexture = NULL;

	if ( ! pFnCreatePortalTexture )
		pFnCreatePortalTexture = (UFunction*) UObject::GObjObjects()->Data[ 28532 ];

	APortalTeleporter_execCreatePortalTexture_Parms CreatePortalTexture_Parms;

	pFnCreatePortalTexture->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreatePortalTexture, &CreatePortalTexture_Parms, NULL );

	pFnCreatePortalTexture->FunctionFlags |= 0x400;

	return CreatePortalTexture_Parms.ReturnValue;
};

// Function Engine.PortalTeleporter.TransformHitLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )

struct FVector APortalTeleporter::TransformHitLocation ( struct FVector HitLocation )
{
	static UFunction* pFnTransformHitLocation = NULL;

	if ( ! pFnTransformHitLocation )
		pFnTransformHitLocation = (UFunction*) UObject::GObjObjects()->Data[ 28529 ];

	APortalTeleporter_execTransformHitLocation_Parms TransformHitLocation_Parms;
	memcpy ( &TransformHitLocation_Parms.HitLocation, &HitLocation, 0xC );

	pFnTransformHitLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTransformHitLocation, &TransformHitLocation_Parms, NULL );

	pFnTransformHitLocation->FunctionFlags |= 0x400;

	return TransformHitLocation_Parms.ReturnValue;
};

// Function Engine.PortalTeleporter.TransformVectorDir
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 V                              ( CPF_Parm )

struct FVector APortalTeleporter::TransformVectorDir ( struct FVector V )
{
	static UFunction* pFnTransformVectorDir = NULL;

	if ( ! pFnTransformVectorDir )
		pFnTransformVectorDir = (UFunction*) UObject::GObjObjects()->Data[ 28526 ];

	APortalTeleporter_execTransformVectorDir_Parms TransformVectorDir_Parms;
	memcpy ( &TransformVectorDir_Parms.V, &V, 0xC );

	pFnTransformVectorDir->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTransformVectorDir, &TransformVectorDir_Parms, NULL );

	pFnTransformVectorDir->FunctionFlags |= 0x400;

	return TransformVectorDir_Parms.ReturnValue;
};

// Function Engine.PortalTeleporter.TransformActor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool APortalTeleporter::TransformActor ( class AActor* A )
{
	static UFunction* pFnTransformActor = NULL;

	if ( ! pFnTransformActor )
		pFnTransformActor = (UFunction*) UObject::GObjObjects()->Data[ 28523 ];

	APortalTeleporter_execTransformActor_Parms TransformActor_Parms;
	TransformActor_Parms.A = A;

	pFnTransformActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTransformActor, &TransformActor_Parms, NULL );

	pFnTransformActor->FunctionFlags |= 0x400;

	return TransformActor_Parms.ReturnValue;
};

// Function Engine.StaticMeshActor.PreBeginPlay
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AStaticMeshActor::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 22537 ];

	AStaticMeshActor_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.StaticMeshActorBasedOnExtremeContent.SetMaterialBasedOnExtremeContent
// [0x00020102] 
// Parameters infos:

void AStaticMeshActorBasedOnExtremeContent::SetMaterialBasedOnExtremeContent ( )
{
	static UFunction* pFnSetMaterialBasedOnExtremeContent = NULL;

	if ( ! pFnSetMaterialBasedOnExtremeContent )
		pFnSetMaterialBasedOnExtremeContent = (UFunction*) UObject::GObjObjects()->Data[ 31262 ];

	AStaticMeshActorBasedOnExtremeContent_execSetMaterialBasedOnExtremeContent_Parms SetMaterialBasedOnExtremeContent_Parms;

	this->ProcessEvent ( pFnSetMaterialBasedOnExtremeContent, &SetMaterialBasedOnExtremeContent_Parms, NULL );
};

// Function Engine.StaticMeshActorBasedOnExtremeContent.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AStaticMeshActorBasedOnExtremeContent::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 31261 ];

	AStaticMeshActorBasedOnExtremeContent_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Trigger.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ATrigger_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void ATrigger::ApplyCheckpointRecord ( struct ATrigger_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 32089 ];

	ATrigger_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.Trigger.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ATrigger_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void ATrigger::CreateCheckpointRecord ( struct ATrigger_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 32087 ];

	ATrigger_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.Trigger.ShouldSaveForCheckpoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATrigger::ShouldSaveForCheckpoint ( )
{
	static UFunction* pFnShouldSaveForCheckpoint = NULL;

	if ( ! pFnShouldSaveForCheckpoint )
		pFnShouldSaveForCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 32085 ];

	ATrigger_execShouldSaveForCheckpoint_Parms ShouldSaveForCheckpoint_Parms;

	this->ProcessEvent ( pFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Parms, NULL );

	return ShouldSaveForCheckpoint_Parms.ReturnValue;
};

// Function Engine.Trigger.StopsProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AProjectile*             P                              ( CPF_Parm )

bool ATrigger::StopsProjectile ( class AProjectile* P )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = (UFunction*) UObject::GObjObjects()->Data[ 32082 ];

	ATrigger_execStopsProjectile_Parms StopsProjectile_Parms;
	StopsProjectile_Parms.P = P;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );

	return StopsProjectile_Parms.ReturnValue;
};

// Function Engine.Trigger.UnTrigger
// [0x00020002] 
// Parameters infos:

void ATrigger::UnTrigger ( )
{
	static UFunction* pFnUnTrigger = NULL;

	if ( ! pFnUnTrigger )
		pFnUnTrigger = (UFunction*) UObject::GObjObjects()->Data[ 32081 ];

	ATrigger_execUnTrigger_Parms UnTrigger_Parms;

	this->ProcessEvent ( pFnUnTrigger, &UnTrigger_Parms, NULL );
};

// Function Engine.Trigger.NotifyTriggered
// [0x00020002] 
// Parameters infos:

void ATrigger::NotifyTriggered ( )
{
	static UFunction* pFnNotifyTriggered = NULL;

	if ( ! pFnNotifyTriggered )
		pFnNotifyTriggered = (UFunction*) UObject::GObjObjects()->Data[ 32079 ];

	ATrigger_execNotifyTriggered_Parms NotifyTriggered_Parms;

	this->ProcessEvent ( pFnNotifyTriggered, &NotifyTriggered_Parms, NULL );
};

// Function Engine.Trigger.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATrigger::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 32074 ];

	ATrigger_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.ActorComponent.DetachFromAny
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UActorComponent::DetachFromAny ( )
{
	static UFunction* pFnDetachFromAny = NULL;

	if ( ! pFnDetachFromAny )
		pFnDetachFromAny = (UFunction*) UObject::GObjObjects()->Data[ 7641 ];

	UActorComponent_execDetachFromAny_Parms DetachFromAny_Parms;

	pFnDetachFromAny->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetachFromAny, &DetachFromAny_Parms, NULL );

	pFnDetachFromAny->FunctionFlags |= 0x400;
};

// Function Engine.ActorComponent.ForceUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bTransformOnly                 ( CPF_Parm )

void UActorComponent::ForceUpdate ( unsigned long bTransformOnly )
{
	static UFunction* pFnForceUpdate = NULL;

	if ( ! pFnForceUpdate )
		pFnForceUpdate = (UFunction*) UObject::GObjObjects()->Data[ 7639 ];

	UActorComponent_execForceUpdate_Parms ForceUpdate_Parms;
	ForceUpdate_Parms.bTransformOnly = bTransformOnly;

	pFnForceUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceUpdate, &ForceUpdate_Parms, NULL );

	pFnForceUpdate->FunctionFlags |= 0x400;
};

// Function Engine.ActorComponent.SetComponentRBFixed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bFixed                         ( CPF_Parm )

void UActorComponent::SetComponentRBFixed ( unsigned long bFixed )
{
	static UFunction* pFnSetComponentRBFixed = NULL;

	if ( ! pFnSetComponentRBFixed )
		pFnSetComponentRBFixed = (UFunction*) UObject::GObjObjects()->Data[ 7637 ];

	UActorComponent_execSetComponentRBFixed_Parms SetComponentRBFixed_Parms;
	SetComponentRBFixed_Parms.bFixed = bFixed;

	pFnSetComponentRBFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetComponentRBFixed, &SetComponentRBFixed_Parms, NULL );

	pFnSetComponentRBFixed->FunctionFlags |= 0x400;
};

// Function Engine.ActorComponent.SetTickGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewTickGroup                   ( CPF_Parm )

void UActorComponent::SetTickGroup ( unsigned char NewTickGroup )
{
	static UFunction* pFnSetTickGroup = NULL;

	if ( ! pFnSetTickGroup )
		pFnSetTickGroup = (UFunction*) UObject::GObjObjects()->Data[ 7635 ];

	UActorComponent_execSetTickGroup_Parms SetTickGroup_Parms;
	SetTickGroup_Parms.NewTickGroup = NewTickGroup;

	pFnSetTickGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTickGroup, &SetTickGroup_Parms, NULL );

	pFnSetTickGroup->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.OnAudioFinished
// [0x00120000] 
// Parameters infos:
// class UAudioComponent*         AC                             ( CPF_Parm | CPF_EditInline )

void UAudioComponent::OnAudioFinished ( class UAudioComponent* AC )
{
	static UFunction* pFnOnAudioFinished = NULL;

	if ( ! pFnOnAudioFinished )
		pFnOnAudioFinished = (UFunction*) UObject::GObjObjects()->Data[ 12325 ];

	UAudioComponent_execOnAudioFinished_Parms OnAudioFinished_Parms;
	OnAudioFinished_Parms.AC = AC;

	this->ProcessEvent ( pFnOnAudioFinished, &OnAudioFinished_Parms, NULL );
};

// Function Engine.AudioComponent.UnPause
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UAudioComponent::UnPause ( )
{
	static UFunction* pFnUnPause = NULL;

	if ( ! pFnUnPause )
		pFnUnPause = (UFunction*) UObject::GObjObjects()->Data[ 12412 ];

	UAudioComponent_execUnPause_Parms UnPause_Parms;

	pFnUnPause->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnPause, &UnPause_Parms, NULL );

	pFnUnPause->FunctionFlags |= 0x400;

	return UnPause_Parms.ReturnValue;
};

// Function Engine.AudioComponent.Pause
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UAudioComponent::Pause ( )
{
	static UFunction* pFnPause = NULL;

	if ( ! pFnPause )
		pFnPause = (UFunction*) UObject::GObjObjects()->Data[ 12411 ];

	UAudioComponent_execPause_Parms Pause_Parms;

	pFnPause->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPause, &Pause_Parms, NULL );

	pFnPause->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.BioIsPlaying
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UAudioComponent::BioIsPlaying ( )
{
	static UFunction* pFnBioIsPlaying = NULL;

	if ( ! pFnBioIsPlaying )
		pFnBioIsPlaying = (UFunction*) UObject::GObjObjects()->Data[ 12409 ];

	UAudioComponent_execBioIsPlaying_Parms BioIsPlaying_Parms;

	pFnBioIsPlaying->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioIsPlaying, &BioIsPlaying_Parms, NULL );

	pFnBioIsPlaying->FunctionFlags |= 0x400;

	return BioIsPlaying_Parms.ReturnValue;
};

// Function Engine.AudioComponent.GetListenerLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UAudioComponent::GetListenerLocation ( )
{
	static UFunction* pFnGetListenerLocation = NULL;

	if ( ! pFnGetListenerLocation )
		pFnGetListenerLocation = (UFunction*) UObject::GObjObjects()->Data[ 12407 ];

	UAudioComponent_execGetListenerLocation_Parms GetListenerLocation_Parms;

	pFnGetListenerLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetListenerLocation, &GetListenerLocation_Parms, NULL );

	pFnGetListenerLocation->FunctionFlags |= 0x400;

	return GetListenerLocation_Parms.ReturnValue;
};

// Function Engine.AudioComponent.SetWaveParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   InName                         ( CPF_Parm )
// class USoundNodeWave*          InWave                         ( CPF_Parm )

void UAudioComponent::SetWaveParameter ( struct FName InName, class USoundNodeWave* InWave )
{
	static UFunction* pFnSetWaveParameter = NULL;

	if ( ! pFnSetWaveParameter )
		pFnSetWaveParameter = (UFunction*) UObject::GObjObjects()->Data[ 12404 ];

	UAudioComponent_execSetWaveParameter_Parms SetWaveParameter_Parms;
	memcpy ( &SetWaveParameter_Parms.InName, &InName, 0x8 );
	SetWaveParameter_Parms.InWave = InWave;

	pFnSetWaveParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWaveParameter, &SetWaveParameter_Parms, NULL );

	pFnSetWaveParameter->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.SetFloatParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   InName                         ( CPF_Parm )
// float                          InFloat                        ( CPF_Parm )

void UAudioComponent::SetFloatParameter ( struct FName InName, float InFloat )
{
	static UFunction* pFnSetFloatParameter = NULL;

	if ( ! pFnSetFloatParameter )
		pFnSetFloatParameter = (UFunction*) UObject::GObjObjects()->Data[ 12401 ];

	UAudioComponent_execSetFloatParameter_Parms SetFloatParameter_Parms;
	memcpy ( &SetFloatParameter_Parms.InName, &InName, 0x8 );
	SetFloatParameter_Parms.InFloat = InFloat;

	pFnSetFloatParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatParameter, &SetFloatParameter_Parms, NULL );

	pFnSetFloatParameter->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.FadeSoundGroupVolume
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          Duration                       ( CPF_Parm )
// float                          Volume                         ( CPF_Parm )

void UAudioComponent::FadeSoundGroupVolume ( float Duration, float Volume )
{
	static UFunction* pFnFadeSoundGroupVolume = NULL;

	if ( ! pFnFadeSoundGroupVolume )
		pFnFadeSoundGroupVolume = (UFunction*) UObject::GObjObjects()->Data[ 12398 ];

	UAudioComponent_execFadeSoundGroupVolume_Parms FadeSoundGroupVolume_Parms;
	FadeSoundGroupVolume_Parms.Duration = Duration;
	FadeSoundGroupVolume_Parms.Volume = Volume;

	pFnFadeSoundGroupVolume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFadeSoundGroupVolume, &FadeSoundGroupVolume_Parms, NULL );

	pFnFadeSoundGroupVolume->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.AdjustVolume
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          AdjustVolumeDuration           ( CPF_Parm )
// float                          AdjustVolumeLevel              ( CPF_Parm )

void UAudioComponent::AdjustVolume ( float AdjustVolumeDuration, float AdjustVolumeLevel )
{
	static UFunction* pFnAdjustVolume = NULL;

	if ( ! pFnAdjustVolume )
		pFnAdjustVolume = (UFunction*) UObject::GObjObjects()->Data[ 11678 ];

	UAudioComponent_execAdjustVolume_Parms AdjustVolume_Parms;
	AdjustVolume_Parms.AdjustVolumeDuration = AdjustVolumeDuration;
	AdjustVolume_Parms.AdjustVolumeLevel = AdjustVolumeLevel;

	pFnAdjustVolume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdjustVolume, &AdjustVolume_Parms, NULL );

	pFnAdjustVolume->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.FadeOut
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          FadeOutDuration                ( CPF_Parm )
// float                          FadeVolumeLevel                ( CPF_Parm )

void UAudioComponent::FadeOut ( float FadeOutDuration, float FadeVolumeLevel )
{
	static UFunction* pFnFadeOut = NULL;

	if ( ! pFnFadeOut )
		pFnFadeOut = (UFunction*) UObject::GObjObjects()->Data[ 10322 ];

	UAudioComponent_execFadeOut_Parms FadeOut_Parms;
	FadeOut_Parms.FadeOutDuration = FadeOutDuration;
	FadeOut_Parms.FadeVolumeLevel = FadeVolumeLevel;

	pFnFadeOut->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFadeOut, &FadeOut_Parms, NULL );

	pFnFadeOut->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.FadeIn
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          FadeInDuration                 ( CPF_Parm )
// float                          FadeVolumeLevel                ( CPF_Parm )

void UAudioComponent::FadeIn ( float FadeInDuration, float FadeVolumeLevel )
{
	static UFunction* pFnFadeIn = NULL;

	if ( ! pFnFadeIn )
		pFnFadeIn = (UFunction*) UObject::GObjObjects()->Data[ 10313 ];

	UAudioComponent_execFadeIn_Parms FadeIn_Parms;
	FadeIn_Parms.FadeInDuration = FadeInDuration;
	FadeIn_Parms.FadeVolumeLevel = FadeVolumeLevel;

	pFnFadeIn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFadeIn, &FadeIn_Parms, NULL );

	pFnFadeIn->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.SetSoundEntityLocalVariableState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sVariableName                  ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sVariableState                 ( CPF_Parm | CPF_NeedCtorLink )

bool UAudioComponent::SetSoundEntityLocalVariableState ( struct FString sVariableName, struct FString sVariableState )
{
	static UFunction* pFnSetSoundEntityLocalVariableState = NULL;

	if ( ! pFnSetSoundEntityLocalVariableState )
		pFnSetSoundEntityLocalVariableState = (UFunction*) UObject::GObjObjects()->Data[ 12388 ];

	UAudioComponent_execSetSoundEntityLocalVariableState_Parms SetSoundEntityLocalVariableState_Parms;
	memcpy ( &SetSoundEntityLocalVariableState_Parms.sVariableName, &sVariableName, 0x10 );
	memcpy ( &SetSoundEntityLocalVariableState_Parms.sVariableState, &sVariableState, 0x10 );

	pFnSetSoundEntityLocalVariableState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSoundEntityLocalVariableState, &SetSoundEntityLocalVariableState_Parms, NULL );

	pFnSetSoundEntityLocalVariableState->FunctionFlags |= 0x400;

	return SetSoundEntityLocalVariableState_Parms.ReturnValue;
};

// Function Engine.AudioComponent.Stop
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UAudioComponent::Stop ( )
{
	static UFunction* pFnStop = NULL;

	if ( ! pFnStop )
		pFnStop = (UFunction*) UObject::GObjObjects()->Data[ 12387 ];

	UAudioComponent_execStop_Parms Stop_Parms;

	pFnStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStop, &Stop_Parms, NULL );

	pFnStop->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.Play
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UAudioComponent::Play ( )
{
	static UFunction* pFnPlay = NULL;

	if ( ! pFnPlay )
		pFnPlay = (UFunction*) UObject::GObjObjects()->Data[ 10291 ];

	UAudioComponent_execPlay_Parms Play_Parms;

	pFnPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlay, &Play_Parms, NULL );

	pFnPlay->FunctionFlags |= 0x400;
};

// Function Engine.HeightFogComponent.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bSetEnabled                    ( CPF_Parm )

void UHeightFogComponent::SetEnabled ( unsigned long bSetEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 22463 ];

	UHeightFogComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bSetEnabled = bSetEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.ClosestPointOnComponentToComponent
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPrimitiveComponent*     OtherComponent                 ( CPF_Parm | CPF_OutParm | CPF_EditInline )
// struct FVector                 PointOnComponentA              ( CPF_Parm | CPF_OutParm )
// struct FVector                 PointOnComponentB              ( CPF_Parm | CPF_OutParm )

unsigned char UPrimitiveComponent::ClosestPointOnComponentToComponent ( class UPrimitiveComponent** OtherComponent, struct FVector* PointOnComponentA, struct FVector* PointOnComponentB )
{
	static UFunction* pFnClosestPointOnComponentToComponent = NULL;

	if ( ! pFnClosestPointOnComponentToComponent )
		pFnClosestPointOnComponentToComponent = (UFunction*) UObject::GObjObjects()->Data[ 7856 ];

	UPrimitiveComponent_execClosestPointOnComponentToComponent_Parms ClosestPointOnComponentToComponent_Parms;

	pFnClosestPointOnComponentToComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClosestPointOnComponentToComponent, &ClosestPointOnComponentToComponent_Parms, NULL );

	pFnClosestPointOnComponentToComponent->FunctionFlags |= 0x400;

	if ( OtherComponent )
		*OtherComponent = ClosestPointOnComponentToComponent_Parms.OtherComponent;

	if ( PointOnComponentA )
		memcpy ( PointOnComponentA, &ClosestPointOnComponentToComponent_Parms.PointOnComponentA, 0xC );

	if ( PointOnComponentB )
		memcpy ( PointOnComponentB, &ClosestPointOnComponentToComponent_Parms.PointOnComponentB, 0xC );

	return ClosestPointOnComponentToComponent_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.ClosestPointOnComponentToPoint
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 POI                            ( CPF_Parm | CPF_OutParm )
// struct FVector                 Extent                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 OutPointA                      ( CPF_Parm | CPF_OutParm )
// struct FVector                 OutPointB                      ( CPF_Parm | CPF_OutParm )

unsigned char UPrimitiveComponent::ClosestPointOnComponentToPoint ( struct FVector* POI, struct FVector* Extent, struct FVector* OutPointA, struct FVector* OutPointB )
{
	static UFunction* pFnClosestPointOnComponentToPoint = NULL;

	if ( ! pFnClosestPointOnComponentToPoint )
		pFnClosestPointOnComponentToPoint = (UFunction*) UObject::GObjObjects()->Data[ 7850 ];

	UPrimitiveComponent_execClosestPointOnComponentToPoint_Parms ClosestPointOnComponentToPoint_Parms;

	pFnClosestPointOnComponentToPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClosestPointOnComponentToPoint, &ClosestPointOnComponentToPoint_Parms, NULL );

	pFnClosestPointOnComponentToPoint->FunctionFlags |= 0x400;

	if ( POI )
		memcpy ( POI, &ClosestPointOnComponentToPoint_Parms.POI, 0xC );

	if ( Extent )
		memcpy ( Extent, &ClosestPointOnComponentToPoint_Parms.Extent, 0xC );

	if ( OutPointA )
		memcpy ( OutPointA, &ClosestPointOnComponentToPoint_Parms.OutPointA, 0xC );

	if ( OutPointB )
		memcpy ( OutPointB, &ClosestPointOnComponentToPoint_Parms.OutPointB, 0xC );

	return ClosestPointOnComponentToPoint_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.GetRotation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator UPrimitiveComponent::GetRotation ( )
{
	static UFunction* pFnGetRotation = NULL;

	if ( ! pFnGetRotation )
		pFnGetRotation = (UFunction*) UObject::GObjObjects()->Data[ 7848 ];

	UPrimitiveComponent_execGetRotation_Parms GetRotation_Parms;

	pFnGetRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRotation, &GetRotation_Parms, NULL );

	pFnGetRotation->FunctionFlags |= 0x400;

	return GetRotation_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.GetPosition
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UPrimitiveComponent::GetPosition ( )
{
	static UFunction* pFnGetPosition = NULL;

	if ( ! pFnGetPosition )
		pFnGetPosition = (UFunction*) UObject::GObjObjects()->Data[ 7844 ];

	UPrimitiveComponent_execGetPosition_Parms GetPosition_Parms;

	this->ProcessEvent ( pFnGetPosition, &GetPosition_Parms, NULL );

	return GetPosition_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.SetAbsolute
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  NewAbsoluteTranslation         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  NewAbsoluteRotation            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  NewAbsoluteScale               ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetAbsolute ( unsigned long NewAbsoluteTranslation, unsigned long NewAbsoluteRotation, unsigned long NewAbsoluteScale )
{
	static UFunction* pFnSetAbsolute = NULL;

	if ( ! pFnSetAbsolute )
		pFnSetAbsolute = (UFunction*) UObject::GObjObjects()->Data[ 7840 ];

	UPrimitiveComponent_execSetAbsolute_Parms SetAbsolute_Parms;
	SetAbsolute_Parms.NewAbsoluteTranslation = NewAbsoluteTranslation;
	SetAbsolute_Parms.NewAbsoluteRotation = NewAbsoluteRotation;
	SetAbsolute_Parms.NewAbsoluteScale = NewAbsoluteScale;

	pFnSetAbsolute->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAbsolute, &SetAbsolute_Parms, NULL );

	pFnSetAbsolute->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetScale3D
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewScale3D                     ( CPF_Parm )

void UPrimitiveComponent::SetScale3D ( struct FVector NewScale3D )
{
	static UFunction* pFnSetScale3D = NULL;

	if ( ! pFnSetScale3D )
		pFnSetScale3D = (UFunction*) UObject::GObjObjects()->Data[ 7838 ];

	UPrimitiveComponent_execSetScale3D_Parms SetScale3D_Parms;
	memcpy ( &SetScale3D_Parms.NewScale3D, &NewScale3D, 0xC );

	pFnSetScale3D->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScale3D, &SetScale3D_Parms, NULL );

	pFnSetScale3D->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          NewScale                       ( CPF_Parm )

void UPrimitiveComponent::SetScale ( float NewScale )
{
	static UFunction* pFnSetScale = NULL;

	if ( ! pFnSetScale )
		pFnSetScale = (UFunction*) UObject::GObjObjects()->Data[ 7836 ];

	UPrimitiveComponent_execSetScale_Parms SetScale_Parms;
	SetScale_Parms.NewScale = NewScale;

	pFnSetScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScale, &SetScale_Parms, NULL );

	pFnSetScale->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRotation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )

void UPrimitiveComponent::SetRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnSetRotation = NULL;

	if ( ! pFnSetRotation )
		pFnSetRotation = (UFunction*) UObject::GObjObjects()->Data[ 7834 ];

	UPrimitiveComponent_execSetRotation_Parms SetRotation_Parms;
	memcpy ( &SetRotation_Parms.NewRotation, &NewRotation, 0xC );

	pFnSetRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRotation, &SetRotation_Parms, NULL );

	pFnSetRotation->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetTranslation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewTranslation                 ( CPF_Parm )

void UPrimitiveComponent::SetTranslation ( struct FVector NewTranslation )
{
	static UFunction* pFnSetTranslation = NULL;

	if ( ! pFnSetTranslation )
		pFnSetTranslation = (UFunction*) UObject::GObjObjects()->Data[ 7832 ];

	UPrimitiveComponent_execSetTranslation_Parms SetTranslation_Parms;
	memcpy ( &SetTranslation_Parms.NewTranslation, &NewTranslation, 0xC );

	pFnSetTranslation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTranslation, &SetTranslation_Parms, NULL );

	pFnSetTranslation->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetActorCollision
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  NewCollideActors               ( CPF_Parm )
// unsigned long                  NewBlockActors                 ( CPF_Parm )
// unsigned long                  NewAlwaysCheckCollision        ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetActorCollision ( unsigned long NewCollideActors, unsigned long NewBlockActors, unsigned long NewAlwaysCheckCollision )
{
	static UFunction* pFnSetActorCollision = NULL;

	if ( ! pFnSetActorCollision )
		pFnSetActorCollision = (UFunction*) UObject::GObjObjects()->Data[ 7828 ];

	UPrimitiveComponent_execSetActorCollision_Parms SetActorCollision_Parms;
	SetActorCollision_Parms.NewCollideActors = NewCollideActors;
	SetActorCollision_Parms.NewBlockActors = NewBlockActors;
	SetActorCollision_Parms.NewAlwaysCheckCollision = NewAlwaysCheckCollision;

	pFnSetActorCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActorCollision, &SetActorCollision_Parms, NULL );

	pFnSetActorCollision->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetTraceBlocking
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  NewBlockZeroExtent             ( CPF_Parm )
// unsigned long                  NewBlockNonZeroExtent          ( CPF_Parm )

void UPrimitiveComponent::SetTraceBlocking ( unsigned long NewBlockZeroExtent, unsigned long NewBlockNonZeroExtent )
{
	static UFunction* pFnSetTraceBlocking = NULL;

	if ( ! pFnSetTraceBlocking )
		pFnSetTraceBlocking = (UFunction*) UObject::GObjObjects()->Data[ 7825 ];

	UPrimitiveComponent_execSetTraceBlocking_Parms SetTraceBlocking_Parms;
	SetTraceBlocking_Parms.NewBlockZeroExtent = NewBlockZeroExtent;
	SetTraceBlocking_Parms.NewBlockNonZeroExtent = NewBlockNonZeroExtent;

	pFnSetTraceBlocking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTraceBlocking, &SetTraceBlocking_Parms, NULL );

	pFnSetTraceBlocking->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetViewOwnerDepthPriorityGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewUseViewOwnerDepthPriorityGroup ( CPF_Parm )
// unsigned char                  NewViewOwnerDepthPriorityGroup ( CPF_Parm )

void UPrimitiveComponent::SetViewOwnerDepthPriorityGroup ( unsigned long bNewUseViewOwnerDepthPriorityGroup, unsigned char NewViewOwnerDepthPriorityGroup )
{
	static UFunction* pFnSetViewOwnerDepthPriorityGroup = NULL;

	if ( ! pFnSetViewOwnerDepthPriorityGroup )
		pFnSetViewOwnerDepthPriorityGroup = (UFunction*) UObject::GObjObjects()->Data[ 7822 ];

	UPrimitiveComponent_execSetViewOwnerDepthPriorityGroup_Parms SetViewOwnerDepthPriorityGroup_Parms;
	SetViewOwnerDepthPriorityGroup_Parms.bNewUseViewOwnerDepthPriorityGroup = bNewUseViewOwnerDepthPriorityGroup;
	SetViewOwnerDepthPriorityGroup_Parms.NewViewOwnerDepthPriorityGroup = NewViewOwnerDepthPriorityGroup;

	pFnSetViewOwnerDepthPriorityGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetViewOwnerDepthPriorityGroup, &SetViewOwnerDepthPriorityGroup_Parms, NULL );

	pFnSetViewOwnerDepthPriorityGroup->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetDepthPriorityGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewDepthPriorityGroup          ( CPF_Parm )

void UPrimitiveComponent::SetDepthPriorityGroup ( unsigned char NewDepthPriorityGroup )
{
	static UFunction* pFnSetDepthPriorityGroup = NULL;

	if ( ! pFnSetDepthPriorityGroup )
		pFnSetDepthPriorityGroup = (UFunction*) UObject::GObjObjects()->Data[ 7820 ];

	UPrimitiveComponent_execSetDepthPriorityGroup_Parms SetDepthPriorityGroup_Parms;
	SetDepthPriorityGroup_Parms.NewDepthPriorityGroup = NewDepthPriorityGroup;

	pFnSetDepthPriorityGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDepthPriorityGroup, &SetDepthPriorityGroup_Parms, NULL );

	pFnSetDepthPriorityGroup->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetLightingChannels
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FLightingChannelContainer NewLightingChannels            ( CPF_Parm )

void UPrimitiveComponent::SetLightingChannels ( struct FLightingChannelContainer NewLightingChannels )
{
	static UFunction* pFnSetLightingChannels = NULL;

	if ( ! pFnSetLightingChannels )
		pFnSetLightingChannels = (UFunction*) UObject::GObjObjects()->Data[ 7818 ];

	UPrimitiveComponent_execSetLightingChannels_Parms SetLightingChannels_Parms;
	memcpy ( &SetLightingChannels_Parms.NewLightingChannels, &NewLightingChannels, 0x4 );

	pFnSetLightingChannels->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLightingChannels, &SetLightingChannels_Parms, NULL );

	pFnSetLightingChannels->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetCullDistance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewCullDistance                ( CPF_Parm )

void UPrimitiveComponent::SetCullDistance ( float NewCullDistance )
{
	static UFunction* pFnSetCullDistance = NULL;

	if ( ! pFnSetCullDistance )
		pFnSetCullDistance = (UFunction*) UObject::GObjObjects()->Data[ 7788 ];

	UPrimitiveComponent_execSetCullDistance_Parms SetCullDistance_Parms;
	SetCullDistance_Parms.NewCullDistance = NewCullDistance;

	pFnSetCullDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCullDistance, &SetCullDistance_Parms, NULL );

	pFnSetCullDistance->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetLightEnvironment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULightEnvironmentComponent* NewLightEnvironment            ( CPF_Parm | CPF_EditInline )

void UPrimitiveComponent::SetLightEnvironment ( class ULightEnvironmentComponent* NewLightEnvironment )
{
	static UFunction* pFnSetLightEnvironment = NULL;

	if ( ! pFnSetLightEnvironment )
		pFnSetLightEnvironment = (UFunction*) UObject::GObjObjects()->Data[ 7786 ];

	UPrimitiveComponent_execSetLightEnvironment_Parms SetLightEnvironment_Parms;
	SetLightEnvironment_Parms.NewLightEnvironment = NewLightEnvironment;

	pFnSetLightEnvironment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLightEnvironment, &SetLightEnvironment_Parms, NULL );

	pFnSetLightEnvironment->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetShadowParent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPrimitiveComponent*     NewShadowParent                ( CPF_Parm | CPF_EditInline )

void UPrimitiveComponent::SetShadowParent ( class UPrimitiveComponent* NewShadowParent )
{
	static UFunction* pFnSetShadowParent = NULL;

	if ( ! pFnSetShadowParent )
		pFnSetShadowParent = (UFunction*) UObject::GObjObjects()->Data[ 7784 ];

	UPrimitiveComponent_execSetShadowParent_Parms SetShadowParent_Parms;
	SetShadowParent_Parms.NewShadowParent = NewShadowParent;

	pFnSetShadowParent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetShadowParent, &SetShadowParent_Parms, NULL );

	pFnSetShadowParent->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetIgnoreOwnerHidden
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewIgnoreOwnerHidden          ( CPF_Parm )

void UPrimitiveComponent::SetIgnoreOwnerHidden ( unsigned long bNewIgnoreOwnerHidden )
{
	static UFunction* pFnSetIgnoreOwnerHidden = NULL;

	if ( ! pFnSetIgnoreOwnerHidden )
		pFnSetIgnoreOwnerHidden = (UFunction*) UObject::GObjObjects()->Data[ 7782 ];

	UPrimitiveComponent_execSetIgnoreOwnerHidden_Parms SetIgnoreOwnerHidden_Parms;
	SetIgnoreOwnerHidden_Parms.bNewIgnoreOwnerHidden = bNewIgnoreOwnerHidden;

	pFnSetIgnoreOwnerHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIgnoreOwnerHidden, &SetIgnoreOwnerHidden_Parms, NULL );

	pFnSetIgnoreOwnerHidden->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetOnlyOwnerSee
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewOnlyOwnerSee               ( CPF_Parm )

void UPrimitiveComponent::SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee )
{
	static UFunction* pFnSetOnlyOwnerSee = NULL;

	if ( ! pFnSetOnlyOwnerSee )
		pFnSetOnlyOwnerSee = (UFunction*) UObject::GObjObjects()->Data[ 7780 ];

	UPrimitiveComponent_execSetOnlyOwnerSee_Parms SetOnlyOwnerSee_Parms;
	SetOnlyOwnerSee_Parms.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	pFnSetOnlyOwnerSee->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOnlyOwnerSee, &SetOnlyOwnerSee_Parms, NULL );

	pFnSetOnlyOwnerSee->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetOwnerNoSee
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewOwnerNoSee                 ( CPF_Parm )

void UPrimitiveComponent::SetOwnerNoSee ( unsigned long bNewOwnerNoSee )
{
	static UFunction* pFnSetOwnerNoSee = NULL;

	if ( ! pFnSetOwnerNoSee )
		pFnSetOwnerNoSee = (UFunction*) UObject::GObjObjects()->Data[ 7778 ];

	UPrimitiveComponent_execSetOwnerNoSee_Parms SetOwnerNoSee_Parms;
	SetOwnerNoSee_Parms.bNewOwnerNoSee = bNewOwnerNoSee;

	pFnSetOwnerNoSee->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOwnerNoSee, &SetOwnerNoSee_Parms, NULL );

	pFnSetOwnerNoSee->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetHidden
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  NewHidden                      ( CPF_Parm )

void UPrimitiveComponent::SetHidden ( unsigned long NewHidden )
{
	static UFunction* pFnSetHidden = NULL;

	if ( ! pFnSetHidden )
		pFnSetHidden = (UFunction*) UObject::GObjObjects()->Data[ 7776 ];

	UPrimitiveComponent_execSetHidden_Parms SetHidden_Parms;
	SetHidden_Parms.NewHidden = NewHidden;

	pFnSetHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHidden, &SetHidden_Parms, NULL );

	pFnSetHidden->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.ShouldComponentAddToScene
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UPrimitiveComponent::ShouldComponentAddToScene ( )
{
	static UFunction* pFnShouldComponentAddToScene = NULL;

	if ( ! pFnShouldComponentAddToScene )
		pFnShouldComponentAddToScene = (UFunction*) UObject::GObjObjects()->Data[ 7774 ];

	UPrimitiveComponent_execShouldComponentAddToScene_Parms ShouldComponentAddToScene_Parms;

	pFnShouldComponentAddToScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldComponentAddToScene, &ShouldComponentAddToScene_Parms, NULL );

	pFnShouldComponentAddToScene->FunctionFlags |= 0x400;

	return ShouldComponentAddToScene_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.SetRBDominanceGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  InDomGroup                     ( CPF_Parm )

void UPrimitiveComponent::SetRBDominanceGroup ( unsigned char InDomGroup )
{
	static UFunction* pFnSetRBDominanceGroup = NULL;

	if ( ! pFnSetRBDominanceGroup )
		pFnSetRBDominanceGroup = (UFunction*) UObject::GObjObjects()->Data[ 7772 ];

	UPrimitiveComponent_execSetRBDominanceGroup_Parms SetRBDominanceGroup_Parms;
	SetRBDominanceGroup_Parms.InDomGroup = InDomGroup;

	pFnSetRBDominanceGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBDominanceGroup, &SetRBDominanceGroup_Parms, NULL );

	pFnSetRBDominanceGroup->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.GetRootBodyInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class URB_BodyInstance*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class URB_BodyInstance* UPrimitiveComponent::GetRootBodyInstance ( )
{
	static UFunction* pFnGetRootBodyInstance = NULL;

	if ( ! pFnGetRootBodyInstance )
		pFnGetRootBodyInstance = (UFunction*) UObject::GObjObjects()->Data[ 7770 ];

	UPrimitiveComponent_execGetRootBodyInstance_Parms GetRootBodyInstance_Parms;

	pFnGetRootBodyInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRootBodyInstance, &GetRootBodyInstance_Parms, NULL );

	pFnGetRootBodyInstance->FunctionFlags |= 0x400;

	return GetRootBodyInstance_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.SetPhysMaterialOverride
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicalMaterial*       NewPhysMaterial                ( CPF_Parm )

void UPrimitiveComponent::SetPhysMaterialOverride ( class UPhysicalMaterial* NewPhysMaterial )
{
	static UFunction* pFnSetPhysMaterialOverride = NULL;

	if ( ! pFnSetPhysMaterialOverride )
		pFnSetPhysMaterialOverride = (UFunction*) UObject::GObjObjects()->Data[ 7768 ];

	UPrimitiveComponent_execSetPhysMaterialOverride_Parms SetPhysMaterialOverride_Parms;
	SetPhysMaterialOverride_Parms.NewPhysMaterial = NewPhysMaterial;

	pFnSetPhysMaterialOverride->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPhysMaterialOverride, &SetPhysMaterialOverride_Parms, NULL );

	pFnSetPhysMaterialOverride->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.InitRBPhys
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UPrimitiveComponent::InitRBPhys ( )
{
	static UFunction* pFnInitRBPhys = NULL;

	if ( ! pFnInitRBPhys )
		pFnInitRBPhys = (UFunction*) UObject::GObjObjects()->Data[ 7767 ];

	UPrimitiveComponent_execInitRBPhys_Parms InitRBPhys_Parms;

	pFnInitRBPhys->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitRBPhys, &InitRBPhys_Parms, NULL );

	pFnInitRBPhys->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewNotifyRigidBodyCollision   ( CPF_Parm )

void UPrimitiveComponent::SetNotifyRigidBodyCollision ( unsigned long bNewNotifyRigidBodyCollision )
{
	static UFunction* pFnSetNotifyRigidBodyCollision = NULL;

	if ( ! pFnSetNotifyRigidBodyCollision )
		pFnSetNotifyRigidBodyCollision = (UFunction*) UObject::GObjObjects()->Data[ 7765 ];

	UPrimitiveComponent_execSetNotifyRigidBodyCollision_Parms SetNotifyRigidBodyCollision_Parms;
	SetNotifyRigidBodyCollision_Parms.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;

	pFnSetNotifyRigidBodyCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNotifyRigidBodyCollision, &SetNotifyRigidBodyCollision_Parms, NULL );

	pFnSetNotifyRigidBodyCollision->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBChannel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Channel                        ( CPF_Parm )

void UPrimitiveComponent::SetRBChannel ( unsigned char Channel )
{
	static UFunction* pFnSetRBChannel = NULL;

	if ( ! pFnSetRBChannel )
		pFnSetRBChannel = (UFunction*) UObject::GObjObjects()->Data[ 7763 ];

	UPrimitiveComponent_execSetRBChannel_Parms SetRBChannel_Parms;
	SetRBChannel_Parms.Channel = Channel;

	pFnSetRBChannel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBChannel, &SetRBChannel_Parms, NULL );

	pFnSetRBChannel->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBCollisionChannels
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FRBCollisionChannelContainer Channels                       ( CPF_Parm )

void UPrimitiveComponent::SetRBCollisionChannels ( struct FRBCollisionChannelContainer Channels )
{
	static UFunction* pFnSetRBCollisionChannels = NULL;

	if ( ! pFnSetRBCollisionChannels )
		pFnSetRBCollisionChannels = (UFunction*) UObject::GObjObjects()->Data[ 7744 ];

	UPrimitiveComponent_execSetRBCollisionChannels_Parms SetRBCollisionChannels_Parms;
	memcpy ( &SetRBCollisionChannels_Parms.Channels, &Channels, 0x4 );

	pFnSetRBCollisionChannels->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBCollisionChannels, &SetRBCollisionChannels_Parms, NULL );

	pFnSetRBCollisionChannels->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBCollidesWithChannel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Channel                        ( CPF_Parm )
// unsigned long                  bNewCollides                   ( CPF_Parm )

void UPrimitiveComponent::SetRBCollidesWithChannel ( unsigned char Channel, unsigned long bNewCollides )
{
	static UFunction* pFnSetRBCollidesWithChannel = NULL;

	if ( ! pFnSetRBCollidesWithChannel )
		pFnSetRBCollidesWithChannel = (UFunction*) UObject::GObjObjects()->Data[ 7739 ];

	UPrimitiveComponent_execSetRBCollidesWithChannel_Parms SetRBCollidesWithChannel_Parms;
	SetRBCollidesWithChannel_Parms.Channel = Channel;
	SetRBCollidesWithChannel_Parms.bNewCollides = bNewCollides;

	pFnSetRBCollidesWithChannel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBCollidesWithChannel, &SetRBCollidesWithChannel_Parms, NULL );

	pFnSetRBCollidesWithChannel->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetBlockRigidBody
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewBlockRigidBody             ( CPF_Parm )

void UPrimitiveComponent::SetBlockRigidBody ( unsigned long bNewBlockRigidBody )
{
	static UFunction* pFnSetBlockRigidBody = NULL;

	if ( ! pFnSetBlockRigidBody )
		pFnSetBlockRigidBody = (UFunction*) UObject::GObjObjects()->Data[ 7091 ];

	UPrimitiveComponent_execSetBlockRigidBody_Parms SetBlockRigidBody_Parms;
	SetBlockRigidBody_Parms.bNewBlockRigidBody = bNewBlockRigidBody;

	pFnSetBlockRigidBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBlockRigidBody, &SetBlockRigidBody_Parms, NULL );

	pFnSetBlockRigidBody->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.RigidBodyIsAwake
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

bool UPrimitiveComponent::RigidBodyIsAwake ( struct FName BoneName )
{
	static UFunction* pFnRigidBodyIsAwake = NULL;

	if ( ! pFnRigidBodyIsAwake )
		pFnRigidBodyIsAwake = (UFunction*) UObject::GObjObjects()->Data[ 7735 ];

	UPrimitiveComponent_execRigidBodyIsAwake_Parms RigidBodyIsAwake_Parms;
	memcpy ( &RigidBodyIsAwake_Parms.BoneName, &BoneName, 0x8 );

	pFnRigidBodyIsAwake->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRigidBodyIsAwake, &RigidBodyIsAwake_Parms, NULL );

	pFnRigidBodyIsAwake->FunctionFlags |= 0x400;

	return RigidBodyIsAwake_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.PutRigidBodyToSleep
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::PutRigidBodyToSleep ( struct FName BoneName )
{
	static UFunction* pFnPutRigidBodyToSleep = NULL;

	if ( ! pFnPutRigidBodyToSleep )
		pFnPutRigidBodyToSleep = (UFunction*) UObject::GObjObjects()->Data[ 7733 ];

	UPrimitiveComponent_execPutRigidBodyToSleep_Parms PutRigidBodyToSleep_Parms;
	memcpy ( &PutRigidBodyToSleep_Parms.BoneName, &BoneName, 0x8 );

	pFnPutRigidBodyToSleep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPutRigidBodyToSleep, &PutRigidBodyToSleep_Parms, NULL );

	pFnPutRigidBodyToSleep->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.WakeRigidBody
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::WakeRigidBody ( struct FName BoneName )
{
	static UFunction* pFnWakeRigidBody = NULL;

	if ( ! pFnWakeRigidBody )
		pFnWakeRigidBody = (UFunction*) UObject::GObjObjects()->Data[ 7731 ];

	UPrimitiveComponent_execWakeRigidBody_Parms WakeRigidBody_Parms;
	memcpy ( &WakeRigidBody_Parms.BoneName, &BoneName, 0x8 );

	pFnWakeRigidBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWakeRigidBody, &WakeRigidBody_Parms, NULL );

	pFnWakeRigidBody->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBRotation
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FRotator                NewRot                         ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetRBRotation ( struct FRotator NewRot, struct FName BoneName )
{
	static UFunction* pFnSetRBRotation = NULL;

	if ( ! pFnSetRBRotation )
		pFnSetRBRotation = (UFunction*) UObject::GObjObjects()->Data[ 7728 ];

	UPrimitiveComponent_execSetRBRotation_Parms SetRBRotation_Parms;
	memcpy ( &SetRBRotation_Parms.NewRot, &NewRot, 0xC );
	memcpy ( &SetRBRotation_Parms.BoneName, &BoneName, 0x8 );

	pFnSetRBRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBRotation, &SetRBRotation_Parms, NULL );

	pFnSetRBRotation->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBPosition
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewPos                         ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetRBPosition ( struct FVector NewPos, struct FName BoneName )
{
	static UFunction* pFnSetRBPosition = NULL;

	if ( ! pFnSetRBPosition )
		pFnSetRBPosition = (UFunction*) UObject::GObjObjects()->Data[ 7725 ];

	UPrimitiveComponent_execSetRBPosition_Parms SetRBPosition_Parms;
	memcpy ( &SetRBPosition_Parms.NewPos, &NewPos, 0xC );
	memcpy ( &SetRBPosition_Parms.BoneName, &BoneName, 0x8 );

	pFnSetRBPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBPosition, &SetRBPosition_Parms, NULL );

	pFnSetRBPosition->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.RetardRBLinearVelocity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 RetardDir                      ( CPF_Parm )
// float                          VelScale                       ( CPF_Parm )

void UPrimitiveComponent::RetardRBLinearVelocity ( struct FVector RetardDir, float VelScale )
{
	static UFunction* pFnRetardRBLinearVelocity = NULL;

	if ( ! pFnRetardRBLinearVelocity )
		pFnRetardRBLinearVelocity = (UFunction*) UObject::GObjObjects()->Data[ 7722 ];

	UPrimitiveComponent_execRetardRBLinearVelocity_Parms RetardRBLinearVelocity_Parms;
	memcpy ( &RetardRBLinearVelocity_Parms.RetardDir, &RetardDir, 0xC );
	RetardRBLinearVelocity_Parms.VelScale = VelScale;

	pFnRetardRBLinearVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRetardRBLinearVelocity, &RetardRBLinearVelocity_Parms, NULL );

	pFnRetardRBLinearVelocity->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBAngularVelocity
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewAngVel                      ( CPF_Parm )
// unsigned long                  bAddToCurrent                  ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetRBAngularVelocity ( struct FVector NewAngVel, unsigned long bAddToCurrent )
{
	static UFunction* pFnSetRBAngularVelocity = NULL;

	if ( ! pFnSetRBAngularVelocity )
		pFnSetRBAngularVelocity = (UFunction*) UObject::GObjObjects()->Data[ 7719 ];

	UPrimitiveComponent_execSetRBAngularVelocity_Parms SetRBAngularVelocity_Parms;
	memcpy ( &SetRBAngularVelocity_Parms.NewAngVel, &NewAngVel, 0xC );
	SetRBAngularVelocity_Parms.bAddToCurrent = bAddToCurrent;

	pFnSetRBAngularVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBAngularVelocity, &SetRBAngularVelocity_Parms, NULL );

	pFnSetRBAngularVelocity->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBLinearVelocity
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewVel                         ( CPF_Parm )
// unsigned long                  bAddToCurrent                  ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetRBLinearVelocity ( struct FVector NewVel, unsigned long bAddToCurrent )
{
	static UFunction* pFnSetRBLinearVelocity = NULL;

	if ( ! pFnSetRBLinearVelocity )
		pFnSetRBLinearVelocity = (UFunction*) UObject::GObjObjects()->Data[ 7128 ];

	UPrimitiveComponent_execSetRBLinearVelocity_Parms SetRBLinearVelocity_Parms;
	memcpy ( &SetRBLinearVelocity_Parms.NewVel, &NewVel, 0xC );
	SetRBLinearVelocity_Parms.bAddToCurrent = bAddToCurrent;

	pFnSetRBLinearVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBLinearVelocity, &SetRBLinearVelocity_Parms, NULL );

	pFnSetRBLinearVelocity->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.AddTorque
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Torque                         ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::AddTorque ( struct FVector Torque, struct FName BoneName )
{
	static UFunction* pFnAddTorque = NULL;

	if ( ! pFnAddTorque )
		pFnAddTorque = (UFunction*) UObject::GObjObjects()->Data[ 7714 ];

	UPrimitiveComponent_execAddTorque_Parms AddTorque_Parms;
	memcpy ( &AddTorque_Parms.Torque, &Torque, 0xC );
	memcpy ( &AddTorque_Parms.BoneName, &BoneName, 0x8 );

	pFnAddTorque->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddTorque, &AddTorque_Parms, NULL );

	pFnAddTorque->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.AddRadialForce
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 Origin                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// float                          Strength                       ( CPF_Parm )
// unsigned char                  Falloff                        ( CPF_Parm )

void UPrimitiveComponent::AddRadialForce ( struct FVector Origin, float Radius, float Strength, unsigned char Falloff )
{
	static UFunction* pFnAddRadialForce = NULL;

	if ( ! pFnAddRadialForce )
		pFnAddRadialForce = (UFunction*) UObject::GObjObjects()->Data[ 7709 ];

	UPrimitiveComponent_execAddRadialForce_Parms AddRadialForce_Parms;
	memcpy ( &AddRadialForce_Parms.Origin, &Origin, 0xC );
	AddRadialForce_Parms.Radius = Radius;
	AddRadialForce_Parms.Strength = Strength;
	AddRadialForce_Parms.Falloff = Falloff;

	pFnAddRadialForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddRadialForce, &AddRadialForce_Parms, NULL );

	pFnAddRadialForce->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.AddForce
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 Force                          ( CPF_Parm )
// struct FVector                 Position                       ( CPF_OptionalParm | CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::AddForce ( struct FVector Force, struct FVector Position, struct FName BoneName )
{
	static UFunction* pFnAddForce = NULL;

	if ( ! pFnAddForce )
		pFnAddForce = (UFunction*) UObject::GObjObjects()->Data[ 7705 ];

	UPrimitiveComponent_execAddForce_Parms AddForce_Parms;
	memcpy ( &AddForce_Parms.Force, &Force, 0xC );
	memcpy ( &AddForce_Parms.Position, &Position, 0xC );
	memcpy ( &AddForce_Parms.BoneName, &BoneName, 0x8 );

	pFnAddForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddForce, &AddForce_Parms, NULL );

	pFnAddForce->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.AddRadialImpulse
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 Origin                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// float                          Strength                       ( CPF_Parm )
// unsigned char                  Falloff                        ( CPF_Parm )
// unsigned long                  bVelChange                     ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::AddRadialImpulse ( struct FVector Origin, float Radius, float Strength, unsigned char Falloff, unsigned long bVelChange )
{
	static UFunction* pFnAddRadialImpulse = NULL;

	if ( ! pFnAddRadialImpulse )
		pFnAddRadialImpulse = (UFunction*) UObject::GObjObjects()->Data[ 7699 ];

	UPrimitiveComponent_execAddRadialImpulse_Parms AddRadialImpulse_Parms;
	memcpy ( &AddRadialImpulse_Parms.Origin, &Origin, 0xC );
	AddRadialImpulse_Parms.Radius = Radius;
	AddRadialImpulse_Parms.Strength = Strength;
	AddRadialImpulse_Parms.Falloff = Falloff;
	AddRadialImpulse_Parms.bVelChange = bVelChange;

	pFnAddRadialImpulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddRadialImpulse, &AddRadialImpulse_Parms, NULL );

	pFnAddRadialImpulse->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.AddImpulse
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 Impulse                        ( CPF_Parm )
// struct FVector                 Position                       ( CPF_OptionalParm | CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bVelChange                     ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::AddImpulse ( struct FVector Impulse, struct FVector Position, struct FName BoneName, unsigned long bVelChange )
{
	static UFunction* pFnAddImpulse = NULL;

	if ( ! pFnAddImpulse )
		pFnAddImpulse = (UFunction*) UObject::GObjObjects()->Data[ 7694 ];

	UPrimitiveComponent_execAddImpulse_Parms AddImpulse_Parms;
	memcpy ( &AddImpulse_Parms.Impulse, &Impulse, 0xC );
	memcpy ( &AddImpulse_Parms.Position, &Position, 0xC );
	memcpy ( &AddImpulse_Parms.BoneName, &BoneName, 0x8 );
	AddImpulse_Parms.bVelChange = bVelChange;

	pFnAddImpulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddImpulse, &AddImpulse_Parms, NULL );

	pFnAddImpulse->FunctionFlags |= 0x400;
};

// Function Engine.CylinderComponent.SetCylinderSize
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewRadius                      ( CPF_Parm )
// float                          NewHeight                      ( CPF_Parm )

void UCylinderComponent::SetCylinderSize ( float NewRadius, float NewHeight )
{
	static UFunction* pFnSetCylinderSize = NULL;

	if ( ! pFnSetCylinderSize )
		pFnSetCylinderSize = (UFunction*) UObject::GObjObjects()->Data[ 8534 ];

	UCylinderComponent_execSetCylinderSize_Parms SetCylinderSize_Parms;
	SetCylinderSize_Parms.NewRadius = NewRadius;
	SetCylinderSize_Parms.NewHeight = NewHeight;

	pFnSetCylinderSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCylinderSize, &SetCylinderSize_Parms, NULL );

	pFnSetCylinderSize->FunctionFlags |= 0x400;
};

// Function Engine.MeshComponent.GetUnscaledBounds
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FBoxSphereBounds        UnscaledBounds                 ( CPF_Parm | CPF_OutParm )

void UMeshComponent::GetUnscaledBounds ( struct FBoxSphereBounds* UnscaledBounds )
{
	static UFunction* pFnGetUnscaledBounds = NULL;

	if ( ! pFnGetUnscaledBounds )
		pFnGetUnscaledBounds = (UFunction*) UObject::GObjObjects()->Data[ 9349 ];

	UMeshComponent_execGetUnscaledBounds_Parms GetUnscaledBounds_Parms;

	pFnGetUnscaledBounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUnscaledBounds, &GetUnscaledBounds_Parms, NULL );

	pFnGetUnscaledBounds->FunctionFlags |= 0x400;

	if ( UnscaledBounds )
		memcpy ( UnscaledBounds, &GetUnscaledBounds_Parms.UnscaledBounds, 0x1C );
};

// Function Engine.MeshComponent.ClearEffectsMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UMeshComponent::ClearEffectsMaterial ( )
{
	static UFunction* pFnClearEffectsMaterial = NULL;

	if ( ! pFnClearEffectsMaterial )
		pFnClearEffectsMaterial = (UFunction*) UObject::GObjObjects()->Data[ 9348 ];

	UMeshComponent_execClearEffectsMaterial_Parms ClearEffectsMaterial_Parms;

	pFnClearEffectsMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearEffectsMaterial, &ClearEffectsMaterial_Parms, NULL );

	pFnClearEffectsMaterial->FunctionFlags |= 0x400;
};

// Function Engine.MeshComponent.GetFractionOfEffectEnabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UMeshComponent::GetFractionOfEffectEnabled ( )
{
	static UFunction* pFnGetFractionOfEffectEnabled = NULL;

	if ( ! pFnGetFractionOfEffectEnabled )
		pFnGetFractionOfEffectEnabled = (UFunction*) UObject::GObjObjects()->Data[ 9346 ];

	UMeshComponent_execGetFractionOfEffectEnabled_Parms GetFractionOfEffectEnabled_Parms;

	pFnGetFractionOfEffectEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFractionOfEffectEnabled, &GetFractionOfEffectEnabled_Parms, NULL );

	pFnGetFractionOfEffectEnabled->FunctionFlags |= 0x400;

	return GetFractionOfEffectEnabled_Parms.ReturnValue;
};

// Function Engine.MeshComponent.GetEffectsMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UMeshComponent::GetEffectsMaterial ( )
{
	static UFunction* pFnGetEffectsMaterial = NULL;

	if ( ! pFnGetEffectsMaterial )
		pFnGetEffectsMaterial = (UFunction*) UObject::GObjObjects()->Data[ 9344 ];

	UMeshComponent_execGetEffectsMaterial_Parms GetEffectsMaterial_Parms;

	pFnGetEffectsMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEffectsMaterial, &GetEffectsMaterial_Parms, NULL );

	pFnGetEffectsMaterial->FunctionFlags |= 0x400;

	return GetEffectsMaterial_Parms.ReturnValue;
};

// Function Engine.MeshComponent.SetFractionOfEffectEnabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fFraction                      ( CPF_Parm )

void UMeshComponent::SetFractionOfEffectEnabled ( float fFraction )
{
	static UFunction* pFnSetFractionOfEffectEnabled = NULL;

	if ( ! pFnSetFractionOfEffectEnabled )
		pFnSetFractionOfEffectEnabled = (UFunction*) UObject::GObjObjects()->Data[ 9342 ];

	UMeshComponent_execSetFractionOfEffectEnabled_Parms SetFractionOfEffectEnabled_Parms;
	SetFractionOfEffectEnabled_Parms.fFraction = fFraction;

	pFnSetFractionOfEffectEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFractionOfEffectEnabled, &SetFractionOfEffectEnabled_Parms, NULL );

	pFnSetFractionOfEffectEnabled->FunctionFlags |= 0x400;
};

// Function Engine.MeshComponent.SetEffectsMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmEffect                       ( CPF_Parm )

void UMeshComponent::SetEffectsMaterial ( struct FName nmEffect )
{
	static UFunction* pFnSetEffectsMaterial = NULL;

	if ( ! pFnSetEffectsMaterial )
		pFnSetEffectsMaterial = (UFunction*) UObject::GObjObjects()->Data[ 9340 ];

	UMeshComponent_execSetEffectsMaterial_Parms SetEffectsMaterial_Parms;
	memcpy ( &SetEffectsMaterial_Parms.nmEffect, &nmEffect, 0x8 );

	pFnSetEffectsMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEffectsMaterial, &SetEffectsMaterial_Parms, NULL );

	pFnSetEffectsMaterial->FunctionFlags |= 0x400;
};

// Function Engine.MeshComponent.CreateAndSetMaterialInstanceTimeVarying
// [0x00020002] 
// Parameters infos:
// class UMaterialInstanceTimeVarying* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

class UMaterialInstanceTimeVarying* UMeshComponent::CreateAndSetMaterialInstanceTimeVarying ( int ElementIndex )
{
	static UFunction* pFnCreateAndSetMaterialInstanceTimeVarying = NULL;

	if ( ! pFnCreateAndSetMaterialInstanceTimeVarying )
		pFnCreateAndSetMaterialInstanceTimeVarying = (UFunction*) UObject::GObjObjects()->Data[ 9336 ];

	UMeshComponent_execCreateAndSetMaterialInstanceTimeVarying_Parms CreateAndSetMaterialInstanceTimeVarying_Parms;
	CreateAndSetMaterialInstanceTimeVarying_Parms.ElementIndex = ElementIndex;

	this->ProcessEvent ( pFnCreateAndSetMaterialInstanceTimeVarying, &CreateAndSetMaterialInstanceTimeVarying_Parms, NULL );

	return CreateAndSetMaterialInstanceTimeVarying_Parms.ReturnValue;
};

// Function Engine.MeshComponent.CreateAndSetMaterialInstanceConstant
// [0x00020002] 
// Parameters infos:
// class UMaterialInstanceConstant* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

class UMaterialInstanceConstant* UMeshComponent::CreateAndSetMaterialInstanceConstant ( int ElementIndex )
{
	static UFunction* pFnCreateAndSetMaterialInstanceConstant = NULL;

	if ( ! pFnCreateAndSetMaterialInstanceConstant )
		pFnCreateAndSetMaterialInstanceConstant = (UFunction*) UObject::GObjObjects()->Data[ 9332 ];

	UMeshComponent_execCreateAndSetMaterialInstanceConstant_Parms CreateAndSetMaterialInstanceConstant_Parms;
	CreateAndSetMaterialInstanceConstant_Parms.ElementIndex = ElementIndex;

	this->ProcessEvent ( pFnCreateAndSetMaterialInstanceConstant, &CreateAndSetMaterialInstanceConstant_Parms, NULL );

	return CreateAndSetMaterialInstanceConstant_Parms.ReturnValue;
};

// Function Engine.MeshComponent.PrestreamTextures
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          Seconds                        ( CPF_Parm )
// unsigned long                  bPrioritizeCharacterTextures   ( CPF_Parm )
// int                            CinematicTextureGroups         ( CPF_OptionalParm | CPF_Parm )

void UMeshComponent::PrestreamTextures ( float Seconds, unsigned long bPrioritizeCharacterTextures, int CinematicTextureGroups )
{
	static UFunction* pFnPrestreamTextures = NULL;

	if ( ! pFnPrestreamTextures )
		pFnPrestreamTextures = (UFunction*) UObject::GObjObjects()->Data[ 9328 ];

	UMeshComponent_execPrestreamTextures_Parms PrestreamTextures_Parms;
	PrestreamTextures_Parms.Seconds = Seconds;
	PrestreamTextures_Parms.bPrioritizeCharacterTextures = bPrioritizeCharacterTextures;
	PrestreamTextures_Parms.CinematicTextureGroups = CinematicTextureGroups;

	pFnPrestreamTextures->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrestreamTextures, &PrestreamTextures_Parms, NULL );

	pFnPrestreamTextures->FunctionFlags |= 0x400;
};

// Function Engine.MeshComponent.AddForce
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 Force                          ( CPF_Parm )
// struct FVector                 Position                       ( CPF_OptionalParm | CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UMeshComponent::AddForce ( struct FVector Force, struct FVector Position, struct FName BoneName )
{
	static UFunction* pFnAddForce = NULL;

	if ( ! pFnAddForce )
		pFnAddForce = (UFunction*) UObject::GObjObjects()->Data[ 9324 ];

	UMeshComponent_execAddForce_Parms AddForce_Parms;
	memcpy ( &AddForce_Parms.Force, &Force, 0xC );
	memcpy ( &AddForce_Parms.Position, &Position, 0xC );
	memcpy ( &AddForce_Parms.BoneName, &BoneName, 0x8 );

	pFnAddForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddForce, &AddForce_Parms, NULL );

	pFnAddForce->FunctionFlags |= 0x400;
};

// Function Engine.MeshComponent.AddImpulse
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 Impulse                        ( CPF_Parm )
// struct FVector                 Position                       ( CPF_OptionalParm | CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bVelChange                     ( CPF_OptionalParm | CPF_Parm )

void UMeshComponent::AddImpulse ( struct FVector Impulse, struct FVector Position, struct FName BoneName, unsigned long bVelChange )
{
	static UFunction* pFnAddImpulse = NULL;

	if ( ! pFnAddImpulse )
		pFnAddImpulse = (UFunction*) UObject::GObjObjects()->Data[ 9319 ];

	UMeshComponent_execAddImpulse_Parms AddImpulse_Parms;
	memcpy ( &AddImpulse_Parms.Impulse, &Impulse, 0xC );
	memcpy ( &AddImpulse_Parms.Position, &Position, 0xC );
	memcpy ( &AddImpulse_Parms.BoneName, &BoneName, 0x8 );
	AddImpulse_Parms.bVelChange = bVelChange;

	pFnAddImpulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddImpulse, &AddImpulse_Parms, NULL );

	pFnAddImpulse->FunctionFlags |= 0x400;
};

// Function Engine.MeshComponent.GetNumElements
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UMeshComponent::GetNumElements ( )
{
	static UFunction* pFnGetNumElements = NULL;

	if ( ! pFnGetNumElements )
		pFnGetNumElements = (UFunction*) UObject::GObjObjects()->Data[ 9317 ];

	UMeshComponent_execGetNumElements_Parms GetNumElements_Parms;

	pFnGetNumElements->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumElements, &GetNumElements_Parms, NULL );

	pFnGetNumElements->FunctionFlags |= 0x400;

	return GetNumElements_Parms.ReturnValue;
};

// Function Engine.MeshComponent.SetMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ElementIndex                   ( CPF_Parm )
// class UMaterialInterface*      Material                       ( CPF_Parm )

void UMeshComponent::SetMaterial ( int ElementIndex, class UMaterialInterface* Material )
{
	static UFunction* pFnSetMaterial = NULL;

	if ( ! pFnSetMaterial )
		pFnSetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 9314 ];

	UMeshComponent_execSetMaterial_Parms SetMaterial_Parms;
	SetMaterial_Parms.ElementIndex = ElementIndex;
	SetMaterial_Parms.Material = Material;

	pFnSetMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterial, &SetMaterial_Parms, NULL );

	pFnSetMaterial->FunctionFlags |= 0x400;
};

// Function Engine.MeshComponent.GetBaseMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

class UMaterialInterface* UMeshComponent::GetBaseMaterial ( int ElementIndex )
{
	static UFunction* pFnGetBaseMaterial = NULL;

	if ( ! pFnGetBaseMaterial )
		pFnGetBaseMaterial = (UFunction*) UObject::GObjObjects()->Data[ 9311 ];

	UMeshComponent_execGetBaseMaterial_Parms GetBaseMaterial_Parms;
	GetBaseMaterial_Parms.ElementIndex = ElementIndex;

	pFnGetBaseMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBaseMaterial, &GetBaseMaterial_Parms, NULL );

	pFnGetBaseMaterial->FunctionFlags |= 0x400;

	return GetBaseMaterial_Parms.ReturnValue;
};

// Function Engine.MeshComponent.GetMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

class UMaterialInterface* UMeshComponent::GetMaterial ( int ElementIndex )
{
	static UFunction* pFnGetMaterial = NULL;

	if ( ! pFnGetMaterial )
		pFnGetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 9308 ];

	UMeshComponent_execGetMaterial_Parms GetMaterial_Parms;
	GetMaterial_Parms.ElementIndex = ElementIndex;

	pFnGetMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaterial, &GetMaterial_Parms, NULL );

	pFnGetMaterial->FunctionFlags |= 0x400;

	return GetMaterial_Parms.ReturnValue;
};

// Function Engine.StaticMeshComponent.CanBecomeDynamic
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UStaticMeshComponent::CanBecomeDynamic ( )
{
	static UFunction* pFnCanBecomeDynamic = NULL;

	if ( ! pFnCanBecomeDynamic )
		pFnCanBecomeDynamic = (UFunction*) UObject::GObjObjects()->Data[ 6828 ];

	UStaticMeshComponent_execCanBecomeDynamic_Parms CanBecomeDynamic_Parms;

	pFnCanBecomeDynamic->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanBecomeDynamic, &CanBecomeDynamic_Parms, NULL );

	pFnCanBecomeDynamic->FunctionFlags |= 0x400;

	return CanBecomeDynamic_Parms.ReturnValue;
};

// Function Engine.StaticMeshComponent.SetForceStaticDecals
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInForceStaticDecals           ( CPF_Parm )

void UStaticMeshComponent::SetForceStaticDecals ( unsigned long bInForceStaticDecals )
{
	static UFunction* pFnSetForceStaticDecals = NULL;

	if ( ! pFnSetForceStaticDecals )
		pFnSetForceStaticDecals = (UFunction*) UObject::GObjObjects()->Data[ 17564 ];

	UStaticMeshComponent_execSetForceStaticDecals_Parms SetForceStaticDecals_Parms;
	SetForceStaticDecals_Parms.bInForceStaticDecals = bInForceStaticDecals;

	pFnSetForceStaticDecals->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetForceStaticDecals, &SetForceStaticDecals_Parms, NULL );

	pFnSetForceStaticDecals->FunctionFlags |= 0x400;
};

// Function Engine.StaticMeshComponent.DisableRBCollisionWithSMC
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class UPrimitiveComponent*     OtherSMC                       ( CPF_Parm | CPF_EditInline )
// unsigned long                  bDisabled                      ( CPF_Parm )

void UStaticMeshComponent::DisableRBCollisionWithSMC ( class UPrimitiveComponent* OtherSMC, unsigned long bDisabled )
{
	static UFunction* pFnDisableRBCollisionWithSMC = NULL;

	if ( ! pFnDisableRBCollisionWithSMC )
		pFnDisableRBCollisionWithSMC = (UFunction*) UObject::GObjObjects()->Data[ 17561 ];

	UStaticMeshComponent_execDisableRBCollisionWithSMC_Parms DisableRBCollisionWithSMC_Parms;
	DisableRBCollisionWithSMC_Parms.OtherSMC = OtherSMC;
	DisableRBCollisionWithSMC_Parms.bDisabled = bDisabled;

	pFnDisableRBCollisionWithSMC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableRBCollisionWithSMC, &DisableRBCollisionWithSMC_Parms, NULL );

	pFnDisableRBCollisionWithSMC->FunctionFlags |= 0x400;
};

// Function Engine.StaticMeshComponent.SetStaticMesh
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UStaticMesh*             NewMesh                        ( CPF_Parm )
// unsigned long                  bForce                         ( CPF_OptionalParm | CPF_Parm )

bool UStaticMeshComponent::SetStaticMesh ( class UStaticMesh* NewMesh, unsigned long bForce )
{
	static UFunction* pFnSetStaticMesh = NULL;

	if ( ! pFnSetStaticMesh )
		pFnSetStaticMesh = (UFunction*) UObject::GObjObjects()->Data[ 17557 ];

	UStaticMeshComponent_execSetStaticMesh_Parms SetStaticMesh_Parms;
	SetStaticMesh_Parms.NewMesh = NewMesh;
	SetStaticMesh_Parms.bForce = bForce;

	pFnSetStaticMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStaticMesh, &SetStaticMesh_Parms, NULL );

	pFnSetStaticMesh->FunctionFlags |= 0x400;

	return SetStaticMesh_Parms.ReturnValue;
};

// Function Engine.SpriteComponent.SetSpriteAndUV
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class UTexture2D*              NewSprite                      ( CPF_Parm )
// int                            NewU                           ( CPF_Parm )
// int                            NewUL                          ( CPF_Parm )
// int                            NewV                           ( CPF_Parm )
// int                            NewVL                          ( CPF_Parm )

void USpriteComponent::SetSpriteAndUV ( class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL )
{
	static UFunction* pFnSetSpriteAndUV = NULL;

	if ( ! pFnSetSpriteAndUV )
		pFnSetSpriteAndUV = (UFunction*) UObject::GObjObjects()->Data[ 25085 ];

	USpriteComponent_execSetSpriteAndUV_Parms SetSpriteAndUV_Parms;
	SetSpriteAndUV_Parms.NewSprite = NewSprite;
	SetSpriteAndUV_Parms.NewU = NewU;
	SetSpriteAndUV_Parms.NewUL = NewUL;
	SetSpriteAndUV_Parms.NewV = NewV;
	SetSpriteAndUV_Parms.NewVL = NewVL;

	pFnSetSpriteAndUV->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSpriteAndUV, &SetSpriteAndUV_Parms, NULL );

	pFnSetSpriteAndUV->FunctionFlags |= 0x400;
};

// Function Engine.SpriteComponent.SetUV
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// int                            NewU                           ( CPF_Parm )
// int                            NewUL                          ( CPF_Parm )
// int                            NewV                           ( CPF_Parm )
// int                            NewVL                          ( CPF_Parm )

void USpriteComponent::SetUV ( int NewU, int NewUL, int NewV, int NewVL )
{
	static UFunction* pFnSetUV = NULL;

	if ( ! pFnSetUV )
		pFnSetUV = (UFunction*) UObject::GObjObjects()->Data[ 25080 ];

	USpriteComponent_execSetUV_Parms SetUV_Parms;
	SetUV_Parms.NewU = NewU;
	SetUV_Parms.NewUL = NewUL;
	SetUV_Parms.NewV = NewV;
	SetUV_Parms.NewVL = NewVL;

	pFnSetUV->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetUV, &SetUV_Parms, NULL );

	pFnSetUV->FunctionFlags |= 0x400;
};

// Function Engine.SpriteComponent.SetSprite
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class UTexture2D*              NewSprite                      ( CPF_Parm )

void USpriteComponent::SetSprite ( class UTexture2D* NewSprite )
{
	static UFunction* pFnSetSprite = NULL;

	if ( ! pFnSetSprite )
		pFnSetSprite = (UFunction*) UObject::GObjObjects()->Data[ 25078 ];

	USpriteComponent_execSetSprite_Parms SetSprite_Parms;
	SetSprite_Parms.NewSprite = NewSprite;

	pFnSetSprite->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSprite, &SetSprite_Parms, NULL );

	pFnSetSprite->FunctionFlags |= 0x400;
};

// Function Engine.RadialBlurComponent.OnUpdatePropertyBlurOpacity
// [0x00020002] 
// Parameters infos:

void URadialBlurComponent::OnUpdatePropertyBlurOpacity ( )
{
	static UFunction* pFnOnUpdatePropertyBlurOpacity = NULL;

	if ( ! pFnOnUpdatePropertyBlurOpacity )
		pFnOnUpdatePropertyBlurOpacity = (UFunction*) UObject::GObjObjects()->Data[ 28706 ];

	URadialBlurComponent_execOnUpdatePropertyBlurOpacity_Parms OnUpdatePropertyBlurOpacity_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyBlurOpacity, &OnUpdatePropertyBlurOpacity_Parms, NULL );
};

// Function Engine.RadialBlurComponent.OnUpdatePropertyBlurFalloffExponent
// [0x00020002] 
// Parameters infos:

void URadialBlurComponent::OnUpdatePropertyBlurFalloffExponent ( )
{
	static UFunction* pFnOnUpdatePropertyBlurFalloffExponent = NULL;

	if ( ! pFnOnUpdatePropertyBlurFalloffExponent )
		pFnOnUpdatePropertyBlurFalloffExponent = (UFunction*) UObject::GObjObjects()->Data[ 28704 ];

	URadialBlurComponent_execOnUpdatePropertyBlurFalloffExponent_Parms OnUpdatePropertyBlurFalloffExponent_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyBlurFalloffExponent, &OnUpdatePropertyBlurFalloffExponent_Parms, NULL );
};

// Function Engine.RadialBlurComponent.OnUpdatePropertyBlurScale
// [0x00020002] 
// Parameters infos:

void URadialBlurComponent::OnUpdatePropertyBlurScale ( )
{
	static UFunction* pFnOnUpdatePropertyBlurScale = NULL;

	if ( ! pFnOnUpdatePropertyBlurScale )
		pFnOnUpdatePropertyBlurScale = (UFunction*) UObject::GObjObjects()->Data[ 28702 ];

	URadialBlurComponent_execOnUpdatePropertyBlurScale_Parms OnUpdatePropertyBlurScale_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyBlurScale, &OnUpdatePropertyBlurScale_Parms, NULL );
};

// Function Engine.RadialBlurComponent.SetEnabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bInEnabled                     ( CPF_Parm )

void URadialBlurComponent::SetEnabled ( unsigned long bInEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 28700 ];

	URadialBlurComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bInEnabled = bInEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.RadialBlurComponent.SetBlurOpacity
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          InBlurOpacity                  ( CPF_Parm )

void URadialBlurComponent::SetBlurOpacity ( float InBlurOpacity )
{
	static UFunction* pFnSetBlurOpacity = NULL;

	if ( ! pFnSetBlurOpacity )
		pFnSetBlurOpacity = (UFunction*) UObject::GObjObjects()->Data[ 28698 ];

	URadialBlurComponent_execSetBlurOpacity_Parms SetBlurOpacity_Parms;
	SetBlurOpacity_Parms.InBlurOpacity = InBlurOpacity;

	pFnSetBlurOpacity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBlurOpacity, &SetBlurOpacity_Parms, NULL );

	pFnSetBlurOpacity->FunctionFlags |= 0x400;
};

// Function Engine.RadialBlurComponent.SetBlurFalloffExponent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          InBlurFalloffExponent          ( CPF_Parm )

void URadialBlurComponent::SetBlurFalloffExponent ( float InBlurFalloffExponent )
{
	static UFunction* pFnSetBlurFalloffExponent = NULL;

	if ( ! pFnSetBlurFalloffExponent )
		pFnSetBlurFalloffExponent = (UFunction*) UObject::GObjObjects()->Data[ 28696 ];

	URadialBlurComponent_execSetBlurFalloffExponent_Parms SetBlurFalloffExponent_Parms;
	SetBlurFalloffExponent_Parms.InBlurFalloffExponent = InBlurFalloffExponent;

	pFnSetBlurFalloffExponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBlurFalloffExponent, &SetBlurFalloffExponent_Parms, NULL );

	pFnSetBlurFalloffExponent->FunctionFlags |= 0x400;
};

// Function Engine.RadialBlurComponent.SetBlurScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          InBlurScale                    ( CPF_Parm )

void URadialBlurComponent::SetBlurScale ( float InBlurScale )
{
	static UFunction* pFnSetBlurScale = NULL;

	if ( ! pFnSetBlurScale )
		pFnSetBlurScale = (UFunction*) UObject::GObjObjects()->Data[ 28694 ];

	URadialBlurComponent_execSetBlurScale_Parms SetBlurScale_Parms;
	SetBlurScale_Parms.InBlurScale = InBlurScale;

	pFnSetBlurScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBlurScale, &SetBlurScale_Parms, NULL );

	pFnSetBlurScale->FunctionFlags |= 0x400;
};

// Function Engine.RadialBlurComponent.SetMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      InMaterial                     ( CPF_Parm )

void URadialBlurComponent::SetMaterial ( class UMaterialInterface* InMaterial )
{
	static UFunction* pFnSetMaterial = NULL;

	if ( ! pFnSetMaterial )
		pFnSetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 28692 ];

	URadialBlurComponent_execSetMaterial_Parms SetMaterial_Parms;
	SetMaterial_Parms.InMaterial = InMaterial;

	pFnSetMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterial, &SetMaterial_Parms, NULL );

	pFnSetMaterial->FunctionFlags |= 0x400;
};

// Function Engine.SceneCaptureComponent.SetEnabled
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_Parm )

void USceneCaptureComponent::SetEnabled ( unsigned long bEnable )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 28480 ];

	USceneCaptureComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bEnable = bEnable;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.SceneCaptureComponent.NeedsUpdate
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USceneCaptureComponent::NeedsUpdate ( )
{
	static UFunction* pFnNeedsUpdate = NULL;

	if ( ! pFnNeedsUpdate )
		pFnNeedsUpdate = (UFunction*) UObject::GObjObjects()->Data[ 28486 ];

	USceneCaptureComponent_execNeedsUpdate_Parms NeedsUpdate_Parms;

	this->ProcessEvent ( pFnNeedsUpdate, &NeedsUpdate_Parms, NULL );

	return NeedsUpdate_Parms.ReturnValue;
};

// Function Engine.SceneCaptureComponent.SetFrameRate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewFrameRate                   ( CPF_Parm )

void USceneCaptureComponent::SetFrameRate ( float NewFrameRate )
{
	static UFunction* pFnSetFrameRate = NULL;

	if ( ! pFnSetFrameRate )
		pFnSetFrameRate = (UFunction*) UObject::GObjObjects()->Data[ 28484 ];

	USceneCaptureComponent_execSetFrameRate_Parms SetFrameRate_Parms;
	SetFrameRate_Parms.NewFrameRate = NewFrameRate;

	pFnSetFrameRate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFrameRate, &SetFrameRate_Parms, NULL );

	pFnSetFrameRate->FunctionFlags |= 0x400;
};

// Function Engine.SceneCapture2DComponent.SetView
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Parm )
// struct FRotator                NewRotation                    ( CPF_Parm )

void USceneCapture2DComponent::SetView ( struct FVector NewLocation, struct FRotator NewRotation )
{
	static UFunction* pFnSetView = NULL;

	if ( ! pFnSetView )
		pFnSetView = (UFunction*) UObject::GObjObjects()->Data[ 29214 ];

	USceneCapture2DComponent_execSetView_Parms SetView_Parms;
	memcpy ( &SetView_Parms.NewLocation, &NewLocation, 0xC );
	memcpy ( &SetView_Parms.NewRotation, &NewRotation, 0xC );

	pFnSetView->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetView, &SetView_Parms, NULL );

	pFnSetView->FunctionFlags |= 0x400;
};

// Function Engine.SceneCapture2DComponent.SetCaptureParameters
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTextureRenderTarget2D*  NewTextureTarget               ( CPF_OptionalParm | CPF_Parm )
// float                          NewFOV                         ( CPF_OptionalParm | CPF_Parm )
// float                          NewNearPlane                   ( CPF_OptionalParm | CPF_Parm )
// float                          NewFarPlane                    ( CPF_OptionalParm | CPF_Parm )

void USceneCapture2DComponent::SetCaptureParameters ( class UTextureRenderTarget2D* NewTextureTarget, float NewFOV, float NewNearPlane, float NewFarPlane )
{
	static UFunction* pFnSetCaptureParameters = NULL;

	if ( ! pFnSetCaptureParameters )
		pFnSetCaptureParameters = (UFunction*) UObject::GObjObjects()->Data[ 29205 ];

	USceneCapture2DComponent_execSetCaptureParameters_Parms SetCaptureParameters_Parms;
	SetCaptureParameters_Parms.NewTextureTarget = NewTextureTarget;
	SetCaptureParameters_Parms.NewFOV = NewFOV;
	SetCaptureParameters_Parms.NewNearPlane = NewNearPlane;
	SetCaptureParameters_Parms.NewFarPlane = NewFarPlane;

	pFnSetCaptureParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCaptureParameters, &SetCaptureParameters_Parms, NULL );

	pFnSetCaptureParameters->FunctionFlags |= 0x400;
};

// Function Engine.SceneCapture2DHitMaskComponent.SetCaptureParameters
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 InMaskPosition                 ( CPF_Const | CPF_Parm )
// float                          InMaskRadius                   ( CPF_Const | CPF_Parm )
// struct FVector                 InStartupPosition              ( CPF_Const | CPF_Parm )

void USceneCapture2DHitMaskComponent::SetCaptureParameters ( struct FVector InMaskPosition, float InMaskRadius, struct FVector InStartupPosition )
{
	static UFunction* pFnSetCaptureParameters = NULL;

	if ( ! pFnSetCaptureParameters )
		pFnSetCaptureParameters = (UFunction*) UObject::GObjObjects()->Data[ 29225 ];

	USceneCapture2DHitMaskComponent_execSetCaptureParameters_Parms SetCaptureParameters_Parms;
	memcpy ( &SetCaptureParameters_Parms.InMaskPosition, &InMaskPosition, 0xC );
	SetCaptureParameters_Parms.InMaskRadius = InMaskRadius;
	memcpy ( &SetCaptureParameters_Parms.InStartupPosition, &InStartupPosition, 0xC );

	pFnSetCaptureParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCaptureParameters, &SetCaptureParameters_Parms, NULL );

	pFnSetCaptureParameters->FunctionFlags |= 0x400;
};

// Function Engine.SceneCapture2DHitMaskComponent.SetCaptureTargetTexture
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTextureRenderTarget2D*  InTextureTarget                ( CPF_Const | CPF_Parm )

void USceneCapture2DHitMaskComponent::SetCaptureTargetTexture ( class UTextureRenderTarget2D* InTextureTarget )
{
	static UFunction* pFnSetCaptureTargetTexture = NULL;

	if ( ! pFnSetCaptureTargetTexture )
		pFnSetCaptureTargetTexture = (UFunction*) UObject::GObjObjects()->Data[ 29223 ];

	USceneCapture2DHitMaskComponent_execSetCaptureTargetTexture_Parms SetCaptureTargetTexture_Parms;
	SetCaptureTargetTexture_Parms.InTextureTarget = InTextureTarget;

	pFnSetCaptureTargetTexture->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCaptureTargetTexture, &SetCaptureTargetTexture_Parms, NULL );

	pFnSetCaptureTargetTexture->FunctionFlags |= 0x400;
};

// Function Engine.SceneCapturePortalComponent.SetCaptureParameters
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTextureRenderTarget2D*  NewTextureTarget               ( CPF_OptionalParm | CPF_Parm )
// float                          NewScaleFOV                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  NewViewDest                    ( CPF_OptionalParm | CPF_Parm )

void USceneCapturePortalComponent::SetCaptureParameters ( class UTextureRenderTarget2D* NewTextureTarget, float NewScaleFOV, class AActor* NewViewDest )
{
	static UFunction* pFnSetCaptureParameters = NULL;

	if ( ! pFnSetCaptureParameters )
		pFnSetCaptureParameters = (UFunction*) UObject::GObjObjects()->Data[ 28514 ];

	USceneCapturePortalComponent_execSetCaptureParameters_Parms SetCaptureParameters_Parms;
	SetCaptureParameters_Parms.NewTextureTarget = NewTextureTarget;
	SetCaptureParameters_Parms.NewScaleFOV = NewScaleFOV;
	SetCaptureParameters_Parms.NewViewDest = NewViewDest;

	pFnSetCaptureParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCaptureParameters, &SetCaptureParameters_Parms, NULL );

	pFnSetCaptureParameters->FunctionFlags |= 0x400;
};

// Function Engine.ActorFactory.PostCreateActor
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class AActor*                  NewActor                       ( CPF_Parm )

void UActorFactory::eventPostCreateActor ( class AActor* NewActor )
{
	static UFunction* pFnPostCreateActor = NULL;

	if ( ! pFnPostCreateActor )
		pFnPostCreateActor = (UFunction*) UObject::GObjObjects()->Data[ 7642 ];

	UActorFactory_eventPostCreateActor_Parms PostCreateActor_Parms;
	PostCreateActor_Parms.NewActor = NewActor;

	this->ProcessEvent ( pFnPostCreateActor, &PostCreateActor_Parms, NULL );
};

// Function Engine.BioActorSaveObject.LoadPositionAndOrientation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  O                              ( CPF_Parm )

bool UBioActorSaveObject::LoadPositionAndOrientation ( class AActor* O )
{
	static UFunction* pFnLoadPositionAndOrientation = NULL;

	if ( ! pFnLoadPositionAndOrientation )
		pFnLoadPositionAndOrientation = (UFunction*) UObject::GObjObjects()->Data[ 14039 ];

	UBioActorSaveObject_execLoadPositionAndOrientation_Parms LoadPositionAndOrientation_Parms;
	LoadPositionAndOrientation_Parms.O = O;

	pFnLoadPositionAndOrientation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadPositionAndOrientation, &LoadPositionAndOrientation_Parms, NULL );

	pFnLoadPositionAndOrientation->FunctionFlags |= 0x400;

	return LoadPositionAndOrientation_Parms.ReturnValue;
};

// Function Engine.BioActorSaveObject.SavePositionAndOrientation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  O                              ( CPF_Parm )

bool UBioActorSaveObject::SavePositionAndOrientation ( class AActor* O )
{
	static UFunction* pFnSavePositionAndOrientation = NULL;

	if ( ! pFnSavePositionAndOrientation )
		pFnSavePositionAndOrientation = (UFunction*) UObject::GObjObjects()->Data[ 14036 ];

	UBioActorSaveObject_execSavePositionAndOrientation_Parms SavePositionAndOrientation_Parms;
	SavePositionAndOrientation_Parms.O = O;

	pFnSavePositionAndOrientation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSavePositionAndOrientation, &SavePositionAndOrientation_Parms, NULL );

	pFnSavePositionAndOrientation->FunctionFlags |= 0x400;

	return SavePositionAndOrientation_Parms.ReturnValue;
};

// Function Engine.BioActorSaveObject.LoadObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioActorSaveObject::LoadObject ( class UObject* O )
{
	static UFunction* pFnLoadObject = NULL;

	if ( ! pFnLoadObject )
		pFnLoadObject = (UFunction*) UObject::GObjObjects()->Data[ 14034 ];

	UBioActorSaveObject_execLoadObject_Parms LoadObject_Parms;
	LoadObject_Parms.O = O;

	this->ProcessEvent ( pFnLoadObject, &LoadObject_Parms, NULL );
};

// Function Engine.BioActorSaveObject.SaveObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioActorSaveObject::SaveObject ( class UObject* O )
{
	static UFunction* pFnSaveObject = NULL;

	if ( ! pFnSaveObject )
		pFnSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 14032 ];

	UBioActorSaveObject_execSaveObject_Parms SaveObject_Parms;
	SaveObject_Parms.O = O;

	this->ProcessEvent ( pFnSaveObject, &SaveObject_Parms, NULL );
};

// Function Engine.BioBaseComponent.ExitCombatStasis
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioBaseComponent::ExitCombatStasis ( )
{
	static UFunction* pFnExitCombatStasis = NULL;

	if ( ! pFnExitCombatStasis )
		pFnExitCombatStasis = (UFunction*) UObject::GObjObjects()->Data[ 14108 ];

	UBioBaseComponent_execExitCombatStasis_Parms ExitCombatStasis_Parms;

	pFnExitCombatStasis->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExitCombatStasis, &ExitCombatStasis_Parms, NULL );

	pFnExitCombatStasis->FunctionFlags |= 0x400;

	return ExitCombatStasis_Parms.ReturnValue;
};

// Function Engine.BioBaseComponent.EnterCombatStasis
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDuration                      ( CPF_Parm )
// unsigned long                  bAllowDamage                   ( CPF_Parm )
// int                            srStasisPowerText              ( CPF_Parm )

bool UBioBaseComponent::EnterCombatStasis ( float fDuration, unsigned long bAllowDamage, int srStasisPowerText )
{
	static UFunction* pFnEnterCombatStasis = NULL;

	if ( ! pFnEnterCombatStasis )
		pFnEnterCombatStasis = (UFunction*) UObject::GObjObjects()->Data[ 14103 ];

	UBioBaseComponent_execEnterCombatStasis_Parms EnterCombatStasis_Parms;
	EnterCombatStasis_Parms.fDuration = fDuration;
	EnterCombatStasis_Parms.bAllowDamage = bAllowDamage;
	EnterCombatStasis_Parms.srStasisPowerText = srStasisPowerText;

	pFnEnterCombatStasis->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnterCombatStasis, &EnterCombatStasis_Parms, NULL );

	pFnEnterCombatStasis->FunctionFlags |= 0x400;

	return EnterCombatStasis_Parms.ReturnValue;
};

// Function Engine.BioBaseComponent.ProceedWithMove
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   oPawn                          ( CPF_Parm )

bool UBioBaseComponent::ProceedWithMove ( class APawn* oPawn )
{
	static UFunction* pFnProceedWithMove = NULL;

	if ( ! pFnProceedWithMove )
		pFnProceedWithMove = (UFunction*) UObject::GObjObjects()->Data[ 14100 ];

	UBioBaseComponent_execProceedWithMove_Parms ProceedWithMove_Parms;
	ProceedWithMove_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnProceedWithMove, &ProceedWithMove_Parms, NULL );

	return ProceedWithMove_Parms.ReturnValue;
};

// Function Engine.BioBaseComponent.SetWaitingForMove
// [0x00020000] 
// Parameters infos:
// unsigned long                  bVal                           ( CPF_Parm )

void UBioBaseComponent::SetWaitingForMove ( unsigned long bVal )
{
	static UFunction* pFnSetWaitingForMove = NULL;

	if ( ! pFnSetWaitingForMove )
		pFnSetWaitingForMove = (UFunction*) UObject::GObjObjects()->Data[ 14098 ];

	UBioBaseComponent_execSetWaitingForMove_Parms SetWaitingForMove_Parms;
	SetWaitingForMove_Parms.bVal = bVal;

	this->ProcessEvent ( pFnSetWaitingForMove, &SetWaitingForMove_Parms, NULL );
};

// Function Engine.BioBaseComponent.IsHostile
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             InstigatedBy                   ( CPF_Parm )

bool UBioBaseComponent::eventIsHostile ( class AController* InstigatedBy )
{
	static UFunction* pFnIsHostile = NULL;

	if ( ! pFnIsHostile )
		pFnIsHostile = (UFunction*) UObject::GObjObjects()->Data[ 14095 ];

	UBioBaseComponent_eventIsHostile_Parms IsHostile_Parms;
	IsHostile_Parms.InstigatedBy = InstigatedBy;

	this->ProcessEvent ( pFnIsHostile, &IsHostile_Parms, NULL );

	return IsHostile_Parms.ReturnValue;
};

// Function Engine.BioBaseComponent.IsNeutral
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             InstigatedBy                   ( CPF_Parm )

bool UBioBaseComponent::eventIsNeutral ( class AController* InstigatedBy )
{
	static UFunction* pFnIsNeutral = NULL;

	if ( ! pFnIsNeutral )
		pFnIsNeutral = (UFunction*) UObject::GObjObjects()->Data[ 14092 ];

	UBioBaseComponent_eventIsNeutral_Parms IsNeutral_Parms;
	IsNeutral_Parms.InstigatedBy = InstigatedBy;

	this->ProcessEvent ( pFnIsNeutral, &IsNeutral_Parms, NULL );

	return IsNeutral_Parms.ReturnValue;
};

// Function Engine.BioBaseComponent.IsFriendly
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             InstigatedBy                   ( CPF_Parm )

bool UBioBaseComponent::eventIsFriendly ( class AController* InstigatedBy )
{
	static UFunction* pFnIsFriendly = NULL;

	if ( ! pFnIsFriendly )
		pFnIsFriendly = (UFunction*) UObject::GObjObjects()->Data[ 14089 ];

	UBioBaseComponent_eventIsFriendly_Parms IsFriendly_Parms;
	IsFriendly_Parms.InstigatedBy = InstigatedBy;

	this->ProcessEvent ( pFnIsFriendly, &IsFriendly_Parms, NULL );

	return IsFriendly_Parms.ReturnValue;
};

// Function Engine.BioBaseComponent.BioRelateActors
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UBioBaseComponent::eventBioRelateActors ( )
{
	static UFunction* pFnBioRelateActors = NULL;

	if ( ! pFnBioRelateActors )
		pFnBioRelateActors = (UFunction*) UObject::GObjObjects()->Data[ 14088 ];

	UBioBaseComponent_eventBioRelateActors_Parms BioRelateActors_Parms;

	this->ProcessEvent ( pFnBioRelateActors, &BioRelateActors_Parms, NULL );
};

// Function Engine.BioBaseComponent.OnAnimPlay
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       oAnimNodeSequence              ( CPF_Parm )

void UBioBaseComponent::eventOnAnimPlay ( class UAnimNodeSequence* oAnimNodeSequence )
{
	static UFunction* pFnOnAnimPlay = NULL;

	if ( ! pFnOnAnimPlay )
		pFnOnAnimPlay = (UFunction*) UObject::GObjObjects()->Data[ 14086 ];

	UBioBaseComponent_eventOnAnimPlay_Parms OnAnimPlay_Parms;
	OnAnimPlay_Parms.oAnimNodeSequence = oAnimNodeSequence;

	this->ProcessEvent ( pFnOnAnimPlay, &OnAnimPlay_Parms, NULL );
};

// Function Engine.BioBaseComponent.OnAnimEnd
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       oAnimNodeSequence              ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void UBioBaseComponent::eventOnAnimEnd ( class UAnimNodeSequence* oAnimNodeSequence, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 14082 ];

	UBioBaseComponent_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.oAnimNodeSequence = oAnimNodeSequence;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function Engine.BioBaseComponent.TakeRadiusDamage
// [0x00024000] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  pDamageCausingActor            ( CPF_OptionalParm | CPF_Parm )
// class UDamageType*             pDamage                        ( CPF_OptionalParm | CPF_Parm )

void UBioBaseComponent::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* pDamageCausingActor, class UDamageType* pDamage )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 14072 ];

	UBioBaseComponent_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.pDamageCausingActor = pDamageCausingActor;
	TakeRadiusDamage_Parms.pDamage = pDamage;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.BioBaseComponent.TakeDamage
// [0x00024000] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  pDamageCausingActor            ( CPF_OptionalParm | CPF_Parm )
// class UDamageType*             pDamage                        ( CPF_OptionalParm | CPF_Parm )

void UBioBaseComponent::TakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* pDamageCausingActor, class UDamageType* pDamage )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 14063 ];

	UBioBaseComponent_execTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x28 );
	TakeDamage_Parms.pDamageCausingActor = pDamageCausingActor;
	TakeDamage_Parms.pDamage = pDamage;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.BioBaseComponent.InitializeRunTimeOnlyTransients
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UBioBaseComponent::eventInitializeRunTimeOnlyTransients ( )
{
	static UFunction* pFnInitializeRunTimeOnlyTransients = NULL;

	if ( ! pFnInitializeRunTimeOnlyTransients )
		pFnInitializeRunTimeOnlyTransients = (UFunction*) UObject::GObjObjects()->Data[ 14062 ];

	UBioBaseComponent_eventInitializeRunTimeOnlyTransients_Parms InitializeRunTimeOnlyTransients_Parms;

	this->ProcessEvent ( pFnInitializeRunTimeOnlyTransients, &InitializeRunTimeOnlyTransients_Parms, NULL );
};

// Function Engine.BioBaseComponent.BeginPlay
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UBioBaseComponent::eventBeginPlay ( )
{
	static UFunction* pFnBeginPlay = NULL;

	if ( ! pFnBeginPlay )
		pFnBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 14061 ];

	UBioBaseComponent_eventBeginPlay_Parms BeginPlay_Parms;

	this->ProcessEvent ( pFnBeginPlay, &BeginPlay_Parms, NULL );
};

// Function Engine.BioBaseComponent.CanBeMounted
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   oMounter                       ( CPF_Parm )

bool UBioBaseComponent::CanBeMounted ( class APawn* oMounter )
{
	static UFunction* pFnCanBeMounted = NULL;

	if ( ! pFnCanBeMounted )
		pFnCanBeMounted = (UFunction*) UObject::GObjObjects()->Data[ 14058 ];

	UBioBaseComponent_execCanBeMounted_Parms CanBeMounted_Parms;
	CanBeMounted_Parms.oMounter = oMounter;

	pFnCanBeMounted->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanBeMounted, &CanBeMounted_Parms, NULL );

	pFnCanBeMounted->FunctionFlags |= 0x400;

	return CanBeMounted_Parms.ReturnValue;
};

// Function Engine.BioCoverInterface.GetSlot
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// struct FCoverSlot              Slot                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBioCoverInterface::GetSlot ( int SlotIdx, struct FCoverSlot* Slot )
{
	static UFunction* pFnGetSlot = NULL;

	if ( ! pFnGetSlot )
		pFnGetSlot = (UFunction*) UObject::GObjObjects()->Data[ 14539 ];

	UBioCoverInterface_execGetSlot_Parms GetSlot_Parms;
	GetSlot_Parms.SlotIdx = SlotIdx;

	pFnGetSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlot, &GetSlot_Parms, NULL );

	pFnGetSlot->FunctionFlags |= 0x400;

	if ( Slot )
		memcpy ( Slot, &GetSlot_Parms.Slot, 0xF4 );

	return GetSlot_Parms.ReturnValue;
};

// Function Engine.BioCoverInterface.DecBlocked
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

int UBioCoverInterface::DecBlocked ( int SlotIdx )
{
	static UFunction* pFnDecBlocked = NULL;

	if ( ! pFnDecBlocked )
		pFnDecBlocked = (UFunction*) UObject::GObjObjects()->Data[ 14536 ];

	UBioCoverInterface_execDecBlocked_Parms DecBlocked_Parms;
	DecBlocked_Parms.SlotIdx = SlotIdx;

	pFnDecBlocked->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDecBlocked, &DecBlocked_Parms, NULL );

	pFnDecBlocked->FunctionFlags |= 0x400;

	return DecBlocked_Parms.ReturnValue;
};

// Function Engine.BioCoverInterface.IncBlocked
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

int UBioCoverInterface::IncBlocked ( int SlotIdx )
{
	static UFunction* pFnIncBlocked = NULL;

	if ( ! pFnIncBlocked )
		pFnIncBlocked = (UFunction*) UObject::GObjObjects()->Data[ 14533 ];

	UBioCoverInterface_execIncBlocked_Parms IncBlocked_Parms;
	IncBlocked_Parms.SlotIdx = SlotIdx;

	pFnIncBlocked->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncBlocked, &IncBlocked_Parms, NULL );

	pFnIncBlocked->FunctionFlags |= 0x400;

	return IncBlocked_Parms.ReturnValue;
};

// Function Engine.BioCoverInterface.GetSlotClaimedBy
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

class AController* UBioCoverInterface::GetSlotClaimedBy ( int SlotIdx )
{
	static UFunction* pFnGetSlotClaimedBy = NULL;

	if ( ! pFnGetSlotClaimedBy )
		pFnGetSlotClaimedBy = (UFunction*) UObject::GObjObjects()->Data[ 14530 ];

	UBioCoverInterface_execGetSlotClaimedBy_Parms GetSlotClaimedBy_Parms;
	GetSlotClaimedBy_Parms.SlotIdx = SlotIdx;

	pFnGetSlotClaimedBy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotClaimedBy, &GetSlotClaimedBy_Parms, NULL );

	pFnGetSlotClaimedBy->FunctionFlags |= 0x400;

	return GetSlotClaimedBy_Parms.ReturnValue;
};

// Function Engine.BioCoverInterface.GetSlotClaimed
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// class AController*             oCtrl                          ( CPF_OptionalParm | CPF_Parm )

bool UBioCoverInterface::GetSlotClaimed ( int SlotIdx, class AController* oCtrl )
{
	static UFunction* pFnGetSlotClaimed = NULL;

	if ( ! pFnGetSlotClaimed )
		pFnGetSlotClaimed = (UFunction*) UObject::GObjObjects()->Data[ 14526 ];

	UBioCoverInterface_execGetSlotClaimed_Parms GetSlotClaimed_Parms;
	GetSlotClaimed_Parms.SlotIdx = SlotIdx;
	GetSlotClaimed_Parms.oCtrl = oCtrl;

	pFnGetSlotClaimed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotClaimed, &GetSlotClaimed_Parms, NULL );

	pFnGetSlotClaimed->FunctionFlags |= 0x400;

	return GetSlotClaimed_Parms.ReturnValue;
};

// Function Engine.BioCoverInterface.GetSlotEnabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

bool UBioCoverInterface::GetSlotEnabled ( int SlotIdx )
{
	static UFunction* pFnGetSlotEnabled = NULL;

	if ( ! pFnGetSlotEnabled )
		pFnGetSlotEnabled = (UFunction*) UObject::GObjObjects()->Data[ 14523 ];

	UBioCoverInterface_execGetSlotEnabled_Parms GetSlotEnabled_Parms;
	GetSlotEnabled_Parms.SlotIdx = SlotIdx;

	pFnGetSlotEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotEnabled, &GetSlotEnabled_Parms, NULL );

	pFnGetSlotEnabled->FunctionFlags |= 0x400;

	return GetSlotEnabled_Parms.ReturnValue;
};

// Function Engine.BioCoverInterface.GetSlotType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

unsigned char UBioCoverInterface::GetSlotType ( int SlotIdx )
{
	static UFunction* pFnGetSlotType = NULL;

	if ( ! pFnGetSlotType )
		pFnGetSlotType = (UFunction*) UObject::GObjObjects()->Data[ 14520 ];

	UBioCoverInterface_execGetSlotType_Parms GetSlotType_Parms;
	GetSlotType_Parms.SlotIdx = SlotIdx;

	pFnGetSlotType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotType, &GetSlotType_Parms, NULL );

	pFnGetSlotType->FunctionFlags |= 0x400;

	return GetSlotType_Parms.ReturnValue;
};

// Function Engine.BioCoverInterface.GetStepFlags
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

int UBioCoverInterface::GetStepFlags ( int SlotIdx )
{
	static UFunction* pFnGetStepFlags = NULL;

	if ( ! pFnGetStepFlags )
		pFnGetStepFlags = (UFunction*) UObject::GObjObjects()->Data[ 14517 ];

	UBioCoverInterface_execGetStepFlags_Parms GetStepFlags_Parms;
	GetStepFlags_Parms.SlotIdx = SlotIdx;

	pFnGetStepFlags->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStepFlags, &GetStepFlags_Parms, NULL );

	pFnGetStepFlags->FunctionFlags |= 0x400;

	return GetStepFlags_Parms.ReturnValue;
};

// Function Engine.BioCoverInterface.UnClaim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AController*             OldClaim                       ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bUnclaimAll                    ( CPF_Parm )

void UBioCoverInterface::UnClaim ( class AController* OldClaim, int SlotIdx, unsigned long bUnclaimAll )
{
	static UFunction* pFnUnClaim = NULL;

	if ( ! pFnUnClaim )
		pFnUnClaim = (UFunction*) UObject::GObjObjects()->Data[ 14513 ];

	UBioCoverInterface_execUnClaim_Parms UnClaim_Parms;
	UnClaim_Parms.OldClaim = OldClaim;
	UnClaim_Parms.SlotIdx = SlotIdx;
	UnClaim_Parms.bUnclaimAll = bUnclaimAll;

	pFnUnClaim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnClaim, &UnClaim_Parms, NULL );

	pFnUnClaim->FunctionFlags |= 0x400;
};

// Function Engine.BioCoverInterface.Claim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             NewClaim                       ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )

bool UBioCoverInterface::Claim ( class AController* NewClaim, int SlotIdx )
{
	static UFunction* pFnClaim = NULL;

	if ( ! pFnClaim )
		pFnClaim = (UFunction*) UObject::GObjObjects()->Data[ 14509 ];

	UBioCoverInterface_execClaim_Parms Claim_Parms;
	Claim_Parms.NewClaim = NewClaim;
	Claim_Parms.SlotIdx = SlotIdx;

	pFnClaim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClaim, &Claim_Parms, NULL );

	pFnClaim->FunctionFlags |= 0x400;

	return Claim_Parms.ReturnValue;
};

// Function Engine.BioCoverInterface.GetSlotCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioCoverInterface::GetSlotCount ( )
{
	static UFunction* pFnGetSlotCount = NULL;

	if ( ! pFnGetSlotCount )
		pFnGetSlotCount = (UFunction*) UObject::GObjObjects()->Data[ 14507 ];

	UBioCoverInterface_execGetSlotCount_Parms GetSlotCount_Parms;

	pFnGetSlotCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotCount, &GetSlotCount_Parms, NULL );

	pFnGetSlotCount->FunctionFlags |= 0x400;

	return GetSlotCount_Parms.ReturnValue;
};

// Function Engine.BioCoverInterface.GetSlotRotation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nSlotID                        ( CPF_Parm )

struct FRotator UBioCoverInterface::GetSlotRotation ( int nSlotID )
{
	static UFunction* pFnGetSlotRotation = NULL;

	if ( ! pFnGetSlotRotation )
		pFnGetSlotRotation = (UFunction*) UObject::GObjObjects()->Data[ 14504 ];

	UBioCoverInterface_execGetSlotRotation_Parms GetSlotRotation_Parms;
	GetSlotRotation_Parms.nSlotID = nSlotID;

	pFnGetSlotRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotRotation, &GetSlotRotation_Parms, NULL );

	pFnGetSlotRotation->FunctionFlags |= 0x400;

	return GetSlotRotation_Parms.ReturnValue;
};

// Function Engine.BioCoverInterface.GetSlotLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nSlotID                        ( CPF_Parm )

struct FVector UBioCoverInterface::GetSlotLocation ( int nSlotID )
{
	static UFunction* pFnGetSlotLocation = NULL;

	if ( ! pFnGetSlotLocation )
		pFnGetSlotLocation = (UFunction*) UObject::GObjObjects()->Data[ 14501 ];

	UBioCoverInterface_execGetSlotLocation_Parms GetSlotLocation_Parms;
	GetSlotLocation_Parms.nSlotID = nSlotID;

	pFnGetSlotLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotLocation, &GetSlotLocation_Parms, NULL );

	pFnGetSlotLocation->FunctionFlags |= 0x400;

	return GetSlotLocation_Parms.ReturnValue;
};

// Function Engine.BioCoverInterface.GetCoverObject
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* UBioCoverInterface::GetCoverObject ( )
{
	static UFunction* pFnGetCoverObject = NULL;

	if ( ! pFnGetCoverObject )
		pFnGetCoverObject = (UFunction*) UObject::GObjObjects()->Data[ 14499 ];

	UBioCoverInterface_execGetCoverObject_Parms GetCoverObject_Parms;

	pFnGetCoverObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCoverObject, &GetCoverObject_Parms, NULL );

	pFnGetCoverObject->FunctionFlags |= 0x400;

	return GetCoverObject_Parms.ReturnValue;
};

// Function Engine.BioCoverInterface.Reset
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioCoverInterface::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 14498 ];

	UBioCoverInterface_execReset_Parms Reset_Parms;

	pFnReset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );

	pFnReset->FunctionFlags |= 0x400;
};

// Function Engine.BioCoverInterface.InitFromActor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  oAct                           ( CPF_Parm )

void UBioCoverInterface::InitFromActor ( class AActor* oAct )
{
	static UFunction* pFnInitFromActor = NULL;

	if ( ! pFnInitFromActor )
		pFnInitFromActor = (UFunction*) UObject::GObjObjects()->Data[ 14496 ];

	UBioCoverInterface_execInitFromActor_Parms InitFromActor_Parms;
	InitFromActor_Parms.oAct = oAct;

	pFnInitFromActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitFromActor, &InitFromActor_Parms, NULL );

	pFnInitFromActor->FunctionFlags |= 0x400;
};

// Function Engine.BioCoverInterface.IsValid
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioCoverInterface::IsValid ( )
{
	static UFunction* pFnIsValid = NULL;

	if ( ! pFnIsValid )
		pFnIsValid = (UFunction*) UObject::GObjObjects()->Data[ 14494 ];

	UBioCoverInterface_execIsValid_Parms IsValid_Parms;

	pFnIsValid->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValid, &IsValid_Parms, NULL );

	pFnIsValid->FunctionFlags |= 0x400;

	return IsValid_Parms.ReturnValue;
};

// Function Engine.BioMoviePlayerXMV.Play
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 MovieFile                      ( CPF_Parm | CPF_NeedCtorLink )

void UBioMoviePlayerXMV::Play ( struct FString MovieFile )
{
	static UFunction* pFnPlay = NULL;

	if ( ! pFnPlay )
		pFnPlay = (UFunction*) UObject::GObjObjects()->Data[ 14837 ];

	UBioMoviePlayerXMV_execPlay_Parms Play_Parms;
	memcpy ( &Play_Parms.MovieFile, &MovieFile, 0x10 );

	pFnPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlay, &Play_Parms, NULL );

	pFnPlay->FunctionFlags |= 0x400;
};

// Function Engine.CameraMode.ProcessViewRotation
// [0x00420100] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// class AActor*                  ViewTarget                     ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

void UCameraMode::ProcessViewRotation ( float DeltaTime, class AActor* ViewTarget, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 16232 ];

	UCameraMode_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;
	ProcessViewRotation_Parms.ViewTarget = ViewTarget;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &ProcessViewRotation_Parms.out_DeltaRot, 0xC );
};

// Function Engine.Canvas.DrawDebugGraph
// [0x00020002] 
// Parameters infos:
// struct FString                 Title                          ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// float                          ValueX                         ( CPF_Parm )
// float                          ValueY                         ( CPF_Parm )
// float                          UL_X                           ( CPF_Parm )
// float                          UL_Y                           ( CPF_Parm )
// float                          W                              ( CPF_Parm )
// float                          H                              ( CPF_Parm )
// struct FVector2D               RangeX                         ( CPF_Parm )
// struct FVector2D               RangeY                         ( CPF_Parm )

void UCanvas::DrawDebugGraph ( struct FString Title, float ValueX, float ValueY, float UL_X, float UL_Y, float W, float H, struct FVector2D RangeX, struct FVector2D RangeY )
{
	static UFunction* pFnDrawDebugGraph = NULL;

	if ( ! pFnDrawDebugGraph )
		pFnDrawDebugGraph = (UFunction*) UObject::GObjObjects()->Data[ 16659 ];

	UCanvas_execDrawDebugGraph_Parms DrawDebugGraph_Parms;
	memcpy ( &DrawDebugGraph_Parms.Title, &Title, 0x10 );
	DrawDebugGraph_Parms.ValueX = ValueX;
	DrawDebugGraph_Parms.ValueY = ValueY;
	DrawDebugGraph_Parms.UL_X = UL_X;
	DrawDebugGraph_Parms.UL_Y = UL_Y;
	DrawDebugGraph_Parms.W = W;
	DrawDebugGraph_Parms.H = H;
	memcpy ( &DrawDebugGraph_Parms.RangeX, &RangeX, 0x8 );
	memcpy ( &DrawDebugGraph_Parms.RangeY, &RangeY, 0x8 );

	this->ProcessEvent ( pFnDrawDebugGraph, &DrawDebugGraph_Parms, NULL );
};

// Function Engine.Canvas.DrawTextureDoubleLine
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 StartPoint                     ( CPF_Parm )
// struct FVector                 EndPoint                       ( CPF_Parm )
// float                          Perc                           ( CPF_Parm )
// float                          Spacing                        ( CPF_Parm )
// float                          Width                          ( CPF_Parm )
// struct FColor                  LineColor                      ( CPF_Parm )
// struct FColor                  AltLineColor                   ( CPF_Parm )
// class UTexture*                Tex                            ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )

void UCanvas::DrawTextureDoubleLine ( struct FVector StartPoint, struct FVector EndPoint, float Perc, float Spacing, float Width, struct FColor LineColor, struct FColor AltLineColor, class UTexture* Tex, float U, float V, float UL, float VL )
{
	static UFunction* pFnDrawTextureDoubleLine = NULL;

	if ( ! pFnDrawTextureDoubleLine )
		pFnDrawTextureDoubleLine = (UFunction*) UObject::GObjObjects()->Data[ 16646 ];

	UCanvas_execDrawTextureDoubleLine_Parms DrawTextureDoubleLine_Parms;
	memcpy ( &DrawTextureDoubleLine_Parms.StartPoint, &StartPoint, 0xC );
	memcpy ( &DrawTextureDoubleLine_Parms.EndPoint, &EndPoint, 0xC );
	DrawTextureDoubleLine_Parms.Perc = Perc;
	DrawTextureDoubleLine_Parms.Spacing = Spacing;
	DrawTextureDoubleLine_Parms.Width = Width;
	memcpy ( &DrawTextureDoubleLine_Parms.LineColor, &LineColor, 0x4 );
	memcpy ( &DrawTextureDoubleLine_Parms.AltLineColor, &AltLineColor, 0x4 );
	DrawTextureDoubleLine_Parms.Tex = Tex;
	DrawTextureDoubleLine_Parms.U = U;
	DrawTextureDoubleLine_Parms.V = V;
	DrawTextureDoubleLine_Parms.UL = UL;
	DrawTextureDoubleLine_Parms.VL = VL;

	pFnDrawTextureDoubleLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTextureDoubleLine, &DrawTextureDoubleLine_Parms, NULL );

	pFnDrawTextureDoubleLine->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawTextureLine
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 StartPoint                     ( CPF_Parm )
// struct FVector                 EndPoint                       ( CPF_Parm )
// float                          Perc                           ( CPF_Parm )
// float                          Width                          ( CPF_Parm )
// struct FColor                  LineColor                      ( CPF_Parm )
// class UTexture*                LineTexture                    ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )

void UCanvas::DrawTextureLine ( struct FVector StartPoint, struct FVector EndPoint, float Perc, float Width, struct FColor LineColor, class UTexture* LineTexture, float U, float V, float UL, float VL )
{
	static UFunction* pFnDrawTextureLine = NULL;

	if ( ! pFnDrawTextureLine )
		pFnDrawTextureLine = (UFunction*) UObject::GObjObjects()->Data[ 16635 ];

	UCanvas_execDrawTextureLine_Parms DrawTextureLine_Parms;
	memcpy ( &DrawTextureLine_Parms.StartPoint, &StartPoint, 0xC );
	memcpy ( &DrawTextureLine_Parms.EndPoint, &EndPoint, 0xC );
	DrawTextureLine_Parms.Perc = Perc;
	DrawTextureLine_Parms.Width = Width;
	memcpy ( &DrawTextureLine_Parms.LineColor, &LineColor, 0x4 );
	DrawTextureLine_Parms.LineTexture = LineTexture;
	DrawTextureLine_Parms.U = U;
	DrawTextureLine_Parms.V = V;
	DrawTextureLine_Parms.UL = UL;
	DrawTextureLine_Parms.VL = VL;

	pFnDrawTextureLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTextureLine, &DrawTextureLine_Parms, NULL );

	pFnDrawTextureLine->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.Draw2DLine
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          X1                             ( CPF_Parm )
// float                          Y1                             ( CPF_Parm )
// float                          X2                             ( CPF_Parm )
// float                          Y2                             ( CPF_Parm )
// struct FColor                  LineColor                      ( CPF_Parm )

void UCanvas::Draw2DLine ( float X1, float Y1, float X2, float Y2, struct FColor LineColor )
{
	static UFunction* pFnDraw2DLine = NULL;

	if ( ! pFnDraw2DLine )
		pFnDraw2DLine = (UFunction*) UObject::GObjObjects()->Data[ 16629 ];

	UCanvas_execDraw2DLine_Parms Draw2DLine_Parms;
	Draw2DLine_Parms.X1 = X1;
	Draw2DLine_Parms.Y1 = Y1;
	Draw2DLine_Parms.X2 = X2;
	Draw2DLine_Parms.Y2 = Y2;
	memcpy ( &Draw2DLine_Parms.LineColor, &LineColor, 0x4 );

	pFnDraw2DLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDraw2DLine, &Draw2DLine_Parms, NULL );

	pFnDraw2DLine->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawRotatedMaterialTile
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      Mat                            ( CPF_Parm )
// struct FRotator                Rotation                       ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_OptionalParm | CPF_Parm )
// float                          V                              ( CPF_OptionalParm | CPF_Parm )
// float                          UL                             ( CPF_OptionalParm | CPF_Parm )
// float                          VL                             ( CPF_OptionalParm | CPF_Parm )
// float                          AnchorX                        ( CPF_OptionalParm | CPF_Parm )
// float                          AnchorY                        ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawRotatedMaterialTile ( class UMaterialInterface* Mat, struct FRotator Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY )
{
	static UFunction* pFnDrawRotatedMaterialTile = NULL;

	if ( ! pFnDrawRotatedMaterialTile )
		pFnDrawRotatedMaterialTile = (UFunction*) UObject::GObjObjects()->Data[ 16618 ];

	UCanvas_execDrawRotatedMaterialTile_Parms DrawRotatedMaterialTile_Parms;
	DrawRotatedMaterialTile_Parms.Mat = Mat;
	memcpy ( &DrawRotatedMaterialTile_Parms.Rotation, &Rotation, 0xC );
	DrawRotatedMaterialTile_Parms.XL = XL;
	DrawRotatedMaterialTile_Parms.YL = YL;
	DrawRotatedMaterialTile_Parms.U = U;
	DrawRotatedMaterialTile_Parms.V = V;
	DrawRotatedMaterialTile_Parms.UL = UL;
	DrawRotatedMaterialTile_Parms.VL = VL;
	DrawRotatedMaterialTile_Parms.AnchorX = AnchorX;
	DrawRotatedMaterialTile_Parms.AnchorY = AnchorY;

	pFnDrawRotatedMaterialTile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawRotatedMaterialTile, &DrawRotatedMaterialTile_Parms, NULL );

	pFnDrawRotatedMaterialTile->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawRotatedTile
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture*                Tex                            ( CPF_Parm )
// struct FRotator                Rotation                       ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )
// float                          AnchorX                        ( CPF_OptionalParm | CPF_Parm )
// float                          AnchorY                        ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawRotatedTile ( class UTexture* Tex, struct FRotator Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY )
{
	static UFunction* pFnDrawRotatedTile = NULL;

	if ( ! pFnDrawRotatedTile )
		pFnDrawRotatedTile = (UFunction*) UObject::GObjObjects()->Data[ 16607 ];

	UCanvas_execDrawRotatedTile_Parms DrawRotatedTile_Parms;
	DrawRotatedTile_Parms.Tex = Tex;
	memcpy ( &DrawRotatedTile_Parms.Rotation, &Rotation, 0xC );
	DrawRotatedTile_Parms.XL = XL;
	DrawRotatedTile_Parms.YL = YL;
	DrawRotatedTile_Parms.U = U;
	DrawRotatedTile_Parms.V = V;
	DrawRotatedTile_Parms.UL = UL;
	DrawRotatedTile_Parms.VL = VL;
	DrawRotatedTile_Parms.AnchorX = AnchorX;
	DrawRotatedTile_Parms.AnchorY = AnchorY;

	pFnDrawRotatedTile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawRotatedTile, &DrawRotatedTile_Parms, NULL );

	pFnDrawRotatedTile->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.SetDrawColor
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned char                  A                              ( CPF_OptionalParm | CPF_Parm )

void UCanvas::SetDrawColor ( unsigned char R, unsigned char G, unsigned char B, unsigned char A )
{
	static UFunction* pFnSetDrawColor = NULL;

	if ( ! pFnSetDrawColor )
		pFnSetDrawColor = (UFunction*) UObject::GObjObjects()->Data[ 6937 ];

	UCanvas_execSetDrawColor_Parms SetDrawColor_Parms;
	SetDrawColor_Parms.R = R;
	SetDrawColor_Parms.G = G;
	SetDrawColor_Parms.B = B;
	SetDrawColor_Parms.A = A;

	pFnSetDrawColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDrawColor, &SetDrawColor_Parms, NULL );

	pFnSetDrawColor->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawBox
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// float                          Width                          ( CPF_Parm )
// float                          Height                         ( CPF_Parm )

void UCanvas::DrawBox ( float Width, float Height )
{
	static UFunction* pFnDrawBox = NULL;

	if ( ! pFnDrawBox )
		pFnDrawBox = (UFunction*) UObject::GObjObjects()->Data[ 16598 ];

	UCanvas_execDrawBox_Parms DrawBox_Parms;
	DrawBox_Parms.Width = Width;
	DrawBox_Parms.Height = Height;

	this->ProcessEvent ( pFnDrawBox, &DrawBox_Parms, NULL );
};

// Function Engine.Canvas.DrawRect
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// float                          RectX                          ( CPF_Parm )
// float                          RectY                          ( CPF_Parm )
// class UTexture*                Tex                            ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawRect ( float RectX, float RectY, class UTexture* Tex )
{
	static UFunction* pFnDrawRect = NULL;

	if ( ! pFnDrawRect )
		pFnDrawRect = (UFunction*) UObject::GObjObjects()->Data[ 16593 ];

	UCanvas_execDrawRect_Parms DrawRect_Parms;
	DrawRect_Parms.RectX = RectX;
	DrawRect_Parms.RectY = RectY;
	DrawRect_Parms.Tex = Tex;

	this->ProcessEvent ( pFnDrawRect, &DrawRect_Parms, NULL );
};

// Function Engine.Canvas.DrawIconSection
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// struct FCanvasIcon             Icon                           ( CPF_Parm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          UStartPct                      ( CPF_Parm )
// float                          VStartPct                      ( CPF_Parm )
// float                          UEndPct                        ( CPF_Parm )
// float                          VEndPct                        ( CPF_Parm )
// float                          Scale                          ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawIconSection ( struct FCanvasIcon Icon, float X, float Y, float UStartPct, float VStartPct, float UEndPct, float VEndPct, float Scale )
{
	static UFunction* pFnDrawIconSection = NULL;

	if ( ! pFnDrawIconSection )
		pFnDrawIconSection = (UFunction*) UObject::GObjObjects()->Data[ 16584 ];

	UCanvas_execDrawIconSection_Parms DrawIconSection_Parms;
	memcpy ( &DrawIconSection_Parms.Icon, &Icon, 0x18 );
	DrawIconSection_Parms.X = X;
	DrawIconSection_Parms.Y = Y;
	DrawIconSection_Parms.UStartPct = UStartPct;
	DrawIconSection_Parms.VStartPct = VStartPct;
	DrawIconSection_Parms.UEndPct = UEndPct;
	DrawIconSection_Parms.VEndPct = VEndPct;
	DrawIconSection_Parms.Scale = Scale;

	this->ProcessEvent ( pFnDrawIconSection, &DrawIconSection_Parms, NULL );
};

// Function Engine.Canvas.DrawIcon
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// struct FCanvasIcon             Icon                           ( CPF_Parm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          Scale                          ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawIcon ( struct FCanvasIcon Icon, float X, float Y, float Scale )
{
	static UFunction* pFnDrawIcon = NULL;

	if ( ! pFnDrawIcon )
		pFnDrawIcon = (UFunction*) UObject::GObjObjects()->Data[ 16579 ];

	UCanvas_execDrawIcon_Parms DrawIcon_Parms;
	memcpy ( &DrawIcon_Parms.Icon, &Icon, 0x18 );
	DrawIcon_Parms.X = X;
	DrawIcon_Parms.Y = Y;
	DrawIcon_Parms.Scale = Scale;

	this->ProcessEvent ( pFnDrawIcon, &DrawIcon_Parms, NULL );
};

// Function Engine.Canvas.MakeIcon
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// struct FCanvasIcon             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UTexture*                Texture                        ( CPF_Parm )
// float                          U                              ( CPF_OptionalParm | CPF_Parm )
// float                          V                              ( CPF_OptionalParm | CPF_Parm )
// float                          UL                             ( CPF_OptionalParm | CPF_Parm )
// float                          VL                             ( CPF_OptionalParm | CPF_Parm )

struct FCanvasIcon UCanvas::MakeIcon ( class UTexture* Texture, float U, float V, float UL, float VL )
{
	static UFunction* pFnMakeIcon = NULL;

	if ( ! pFnMakeIcon )
		pFnMakeIcon = (UFunction*) UObject::GObjObjects()->Data[ 16571 ];

	UCanvas_execMakeIcon_Parms MakeIcon_Parms;
	MakeIcon_Parms.Texture = Texture;
	MakeIcon_Parms.U = U;
	MakeIcon_Parms.V = V;
	MakeIcon_Parms.UL = UL;
	MakeIcon_Parms.VL = VL;

	this->ProcessEvent ( pFnMakeIcon, &MakeIcon_Parms, NULL );

	return MakeIcon_Parms.ReturnValue;
};

// Function Engine.Canvas.DrawTexture
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UTexture*                Tex                            ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void UCanvas::DrawTexture ( class UTexture* Tex, float Scale )
{
	static UFunction* pFnDrawTexture = NULL;

	if ( ! pFnDrawTexture )
		pFnDrawTexture = (UFunction*) UObject::GObjObjects()->Data[ 16568 ];

	UCanvas_execDrawTexture_Parms DrawTexture_Parms;
	DrawTexture_Parms.Tex = Tex;
	DrawTexture_Parms.Scale = Scale;

	this->ProcessEvent ( pFnDrawTexture, &DrawTexture_Parms, NULL );
};

// Function Engine.Canvas.SetClip
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UCanvas::SetClip ( float X, float Y )
{
	static UFunction* pFnSetClip = NULL;

	if ( ! pFnSetClip )
		pFnSetClip = (UFunction*) UObject::GObjObjects()->Data[ 16563 ];

	UCanvas_execSetClip_Parms SetClip_Parms;
	SetClip_Parms.X = X;
	SetClip_Parms.Y = Y;

	this->ProcessEvent ( pFnSetClip, &SetClip_Parms, NULL );
};

// Function Engine.Canvas.SetOrigin
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UCanvas::SetOrigin ( float X, float Y )
{
	static UFunction* pFnSetOrigin = NULL;

	if ( ! pFnSetOrigin )
		pFnSetOrigin = (UFunction*) UObject::GObjObjects()->Data[ 16560 ];

	UCanvas_execSetOrigin_Parms SetOrigin_Parms;
	SetOrigin_Parms.X = X;
	SetOrigin_Parms.Y = Y;

	this->ProcessEvent ( pFnSetOrigin, &SetOrigin_Parms, NULL );
};

// Function Engine.Canvas.SetPos
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          PosX                           ( CPF_Parm )
// float                          PosY                           ( CPF_Parm )

void UCanvas::SetPos ( float PosX, float PosY )
{
	static UFunction* pFnSetPos = NULL;

	if ( ! pFnSetPos )
		pFnSetPos = (UFunction*) UObject::GObjObjects()->Data[ 6936 ];

	UCanvas_execSetPos_Parms SetPos_Parms;
	SetPos_Parms.PosX = PosX;
	SetPos_Parms.PosY = PosY;

	pFnSetPos->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPos, &SetPos_Parms, NULL );

	pFnSetPos->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.Reset
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bKeepOrigin                    ( CPF_OptionalParm | CPF_Parm )

void UCanvas::eventReset ( unsigned long bKeepOrigin )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 16551 ];

	UCanvas_eventReset_Parms Reset_Parms;
	Reset_Parms.bKeepOrigin = bKeepOrigin;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Canvas.WrapStringToArray
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )
// float                          dx                             ( CPF_Parm )
// struct FString                 EOL                            ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct TArray<struct FString>  OutArray                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UCanvas::WrapStringToArray ( struct FString Text, float dx, struct FString EOL, struct TArray<struct FString>* OutArray )
{
	static UFunction* pFnWrapStringToArray = NULL;

	if ( ! pFnWrapStringToArray )
		pFnWrapStringToArray = (UFunction*) UObject::GObjObjects()->Data[ 16545 ];

	UCanvas_execWrapStringToArray_Parms WrapStringToArray_Parms;
	memcpy ( &WrapStringToArray_Parms.Text, &Text, 0x10 );
	WrapStringToArray_Parms.dx = dx;
	memcpy ( &WrapStringToArray_Parms.EOL, &EOL, 0x10 );

	pFnWrapStringToArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWrapStringToArray, &WrapStringToArray_Parms, NULL );

	pFnWrapStringToArray->FunctionFlags |= 0x400;

	if ( OutArray )
		memcpy ( OutArray, &WrapStringToArray_Parms.OutArray, 0x10 );
};

// Function Engine.Canvas.DrawColorizedTile
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture*                Tex                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )
// struct FLinearColor            LColor                         ( CPF_Parm )

void UCanvas::DrawColorizedTile ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, struct FLinearColor LColor )
{
	static UFunction* pFnDrawColorizedTile = NULL;

	if ( ! pFnDrawColorizedTile )
		pFnDrawColorizedTile = (UFunction*) UObject::GObjObjects()->Data[ 16536 ];

	UCanvas_execDrawColorizedTile_Parms DrawColorizedTile_Parms;
	DrawColorizedTile_Parms.Tex = Tex;
	DrawColorizedTile_Parms.XL = XL;
	DrawColorizedTile_Parms.YL = YL;
	DrawColorizedTile_Parms.U = U;
	DrawColorizedTile_Parms.V = V;
	DrawColorizedTile_Parms.UL = UL;
	DrawColorizedTile_Parms.VL = VL;
	memcpy ( &DrawColorizedTile_Parms.LColor, &LColor, 0x10 );

	pFnDrawColorizedTile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawColorizedTile, &DrawColorizedTile_Parms, NULL );

	pFnDrawColorizedTile->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawTileStretched
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture*                Tex                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )
// struct FLinearColor            LColor                         ( CPF_Parm )
// unsigned long                  bStretchHorizontally           ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bStretchVertically             ( CPF_OptionalParm | CPF_Parm )
// float                          ScalingFactor                  ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawTileStretched ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, struct FLinearColor LColor, unsigned long bStretchHorizontally, unsigned long bStretchVertically, float ScalingFactor )
{
	static UFunction* pFnDrawTileStretched = NULL;

	if ( ! pFnDrawTileStretched )
		pFnDrawTileStretched = (UFunction*) UObject::GObjObjects()->Data[ 16524 ];

	UCanvas_execDrawTileStretched_Parms DrawTileStretched_Parms;
	DrawTileStretched_Parms.Tex = Tex;
	DrawTileStretched_Parms.XL = XL;
	DrawTileStretched_Parms.YL = YL;
	DrawTileStretched_Parms.U = U;
	DrawTileStretched_Parms.V = V;
	DrawTileStretched_Parms.UL = UL;
	DrawTileStretched_Parms.VL = VL;
	memcpy ( &DrawTileStretched_Parms.LColor, &LColor, 0x10 );
	DrawTileStretched_Parms.bStretchHorizontally = bStretchHorizontally;
	DrawTileStretched_Parms.bStretchVertically = bStretchVertically;
	DrawTileStretched_Parms.ScalingFactor = ScalingFactor;

	pFnDrawTileStretched->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTileStretched, &DrawTileStretched_Parms, NULL );

	pFnDrawTileStretched->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.PopTransform
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UCanvas::PopTransform ( )
{
	static UFunction* pFnPopTransform = NULL;

	if ( ! pFnPopTransform )
		pFnPopTransform = (UFunction*) UObject::GObjObjects()->Data[ 16523 ];

	UCanvas_execPopTransform_Parms PopTransform_Parms;

	pFnPopTransform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPopTransform, &PopTransform_Parms, NULL );

	pFnPopTransform->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.PushTranslationMatrix
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 TranslationVector              ( CPF_Parm )

void UCanvas::PushTranslationMatrix ( struct FVector TranslationVector )
{
	static UFunction* pFnPushTranslationMatrix = NULL;

	if ( ! pFnPushTranslationMatrix )
		pFnPushTranslationMatrix = (UFunction*) UObject::GObjObjects()->Data[ 16521 ];

	UCanvas_execPushTranslationMatrix_Parms PushTranslationMatrix_Parms;
	memcpy ( &PushTranslationMatrix_Parms.TranslationVector, &TranslationVector, 0xC );

	pFnPushTranslationMatrix->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPushTranslationMatrix, &PushTranslationMatrix_Parms, NULL );

	pFnPushTranslationMatrix->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DeProject
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector2D               ScreenPos                      ( CPF_Parm )
// struct FVector                 WorldOrigin                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 WorldDirection                 ( CPF_Parm | CPF_OutParm )

void UCanvas::DeProject ( struct FVector2D ScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection )
{
	static UFunction* pFnDeProject = NULL;

	if ( ! pFnDeProject )
		pFnDeProject = (UFunction*) UObject::GObjObjects()->Data[ 16517 ];

	UCanvas_execDeProject_Parms DeProject_Parms;
	memcpy ( &DeProject_Parms.ScreenPos, &ScreenPos, 0x8 );

	pFnDeProject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeProject, &DeProject_Parms, NULL );

	pFnDeProject->FunctionFlags |= 0x400;

	if ( WorldOrigin )
		memcpy ( WorldOrigin, &DeProject_Parms.WorldOrigin, 0xC );

	if ( WorldDirection )
		memcpy ( WorldDirection, &DeProject_Parms.WorldDirection, 0xC );
};

// Function Engine.Canvas.Project
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Location                       ( CPF_Parm )

struct FVector UCanvas::Project ( struct FVector Location )
{
	static UFunction* pFnProject = NULL;

	if ( ! pFnProject )
		pFnProject = (UFunction*) UObject::GObjObjects()->Data[ 11703 ];

	UCanvas_execProject_Parms Project_Parms;
	memcpy ( &Project_Parms.Location, &Location, 0xC );

	pFnProject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProject, &Project_Parms, NULL );

	pFnProject->FunctionFlags |= 0x400;

	return Project_Parms.ReturnValue;
};

// Function Engine.Canvas.DrawTileClipped
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x01D4]
// Parameters infos:
// class UTexture*                Tex                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )

void UCanvas::DrawTileClipped ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL )
{
	static UFunction* pFnDrawTileClipped = NULL;

	if ( ! pFnDrawTileClipped )
		pFnDrawTileClipped = (UFunction*) UObject::GObjObjects()->Data[ 16508 ];

	UCanvas_execDrawTileClipped_Parms DrawTileClipped_Parms;
	DrawTileClipped_Parms.Tex = Tex;
	DrawTileClipped_Parms.XL = XL;
	DrawTileClipped_Parms.YL = YL;
	DrawTileClipped_Parms.U = U;
	DrawTileClipped_Parms.V = V;
	DrawTileClipped_Parms.UL = UL;
	DrawTileClipped_Parms.VL = VL;

	unsigned short NativeIndex = pFnDrawTileClipped->iNative;
	pFnDrawTileClipped->iNative = 0;

	pFnDrawTileClipped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTileClipped, &DrawTileClipped_Parms, NULL );

	pFnDrawTileClipped->FunctionFlags |= 0x400;

	pFnDrawTileClipped->iNative = NativeIndex;
};

// Function Engine.Canvas.DrawTextRA
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// unsigned long                  CR                             ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawTextRA ( struct FString Text, unsigned long CR )
{
	static UFunction* pFnDrawTextRA = NULL;

	if ( ! pFnDrawTextRA )
		pFnDrawTextRA = (UFunction*) UObject::GObjObjects()->Data[ 16503 ];

	UCanvas_execDrawTextRA_Parms DrawTextRA_Parms;
	memcpy ( &DrawTextRA_Parms.Text, &Text, 0x10 );
	DrawTextRA_Parms.CR = CR;

	this->ProcessEvent ( pFnDrawTextRA, &DrawTextRA_Parms, NULL );
};

// Function Engine.Canvas.DrawTextScaled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// float                          fXScale                        ( CPF_Parm )
// float                          fYScale                        ( CPF_Parm )

void UCanvas::DrawTextScaled ( struct FString Text, float fXScale, float fYScale )
{
	static UFunction* pFnDrawTextScaled = NULL;

	if ( ! pFnDrawTextScaled )
		pFnDrawTextScaled = (UFunction*) UObject::GObjObjects()->Data[ 16499 ];

	UCanvas_execDrawTextScaled_Parms DrawTextScaled_Parms;
	memcpy ( &DrawTextScaled_Parms.Text, &Text, 0x10 );
	DrawTextScaled_Parms.fXScale = fXScale;
	DrawTextScaled_Parms.fYScale = fYScale;

	pFnDrawTextScaled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTextScaled, &DrawTextScaled_Parms, NULL );

	pFnDrawTextScaled->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawTextCentered
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// unsigned long                  CR                             ( CPF_OptionalParm | CPF_Parm )
// float                          XScale                         ( CPF_OptionalParm | CPF_Parm )
// float                          YScale                         ( CPF_OptionalParm | CPF_Parm )
// struct FFontRenderInfo         RenderInfo                     ( CPF_Const | CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawTextCentered ( struct FString Text, unsigned long CR, float XScale, float YScale, struct FFontRenderInfo RenderInfo )
{
	static UFunction* pFnDrawTextCentered = NULL;

	if ( ! pFnDrawTextCentered )
		pFnDrawTextCentered = (UFunction*) UObject::GObjObjects()->Data[ 16489 ];

	UCanvas_execDrawTextCentered_Parms DrawTextCentered_Parms;
	memcpy ( &DrawTextCentered_Parms.Text, &Text, 0x10 );
	DrawTextCentered_Parms.CR = CR;
	DrawTextCentered_Parms.XScale = XScale;
	DrawTextCentered_Parms.YScale = YScale;
	memcpy ( &DrawTextCentered_Parms.RenderInfo, &RenderInfo, 0x28 );

	this->ProcessEvent ( pFnDrawTextCentered, &DrawTextCentered_Parms, NULL );
};

// Function Engine.Canvas.DrawText
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// unsigned long                  CR                             ( CPF_OptionalParm | CPF_Parm )
// float                          XScale                         ( CPF_OptionalParm | CPF_Parm )
// float                          YScale                         ( CPF_OptionalParm | CPF_Parm )
// struct FFontRenderInfo         RenderInfo                     ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm )

void UCanvas::DrawText ( struct FString Text, unsigned long CR, float XScale, float YScale, struct FFontRenderInfo* RenderInfo )
{
	static UFunction* pFnDrawText = NULL;

	if ( ! pFnDrawText )
		pFnDrawText = (UFunction*) UObject::GObjObjects()->Data[ 6939 ];

	UCanvas_execDrawText_Parms DrawText_Parms;
	memcpy ( &DrawText_Parms.Text, &Text, 0x10 );
	DrawText_Parms.CR = CR;
	DrawText_Parms.XScale = XScale;
	DrawText_Parms.YScale = YScale;

	pFnDrawText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawText, &DrawText_Parms, NULL );

	pFnDrawText->FunctionFlags |= 0x400;

	if ( RenderInfo )
		memcpy ( RenderInfo, &DrawText_Parms.RenderInfo, 0x28 );
};

// Function Engine.Canvas.TextSize
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 String                         ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// float                          XL                             ( CPF_Parm | CPF_OutParm )
// float                          YL                             ( CPF_Parm | CPF_OutParm )

void UCanvas::TextSize ( struct FString String, float* XL, float* YL )
{
	static UFunction* pFnTextSize = NULL;

	if ( ! pFnTextSize )
		pFnTextSize = (UFunction*) UObject::GObjObjects()->Data[ 16480 ];

	UCanvas_execTextSize_Parms TextSize_Parms;
	memcpy ( &TextSize_Parms.String, &String, 0x10 );

	pFnTextSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTextSize, &TextSize_Parms, NULL );

	pFnTextSize->FunctionFlags |= 0x400;

	if ( XL )
		*XL = TextSize_Parms.XL;

	if ( YL )
		*YL = TextSize_Parms.YL;
};

// Function Engine.Canvas.StrLen
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 String                         ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// float                          XL                             ( CPF_Parm | CPF_OutParm )
// float                          YL                             ( CPF_Parm | CPF_OutParm )

void UCanvas::StrLen ( struct FString String, float* XL, float* YL )
{
	static UFunction* pFnStrLen = NULL;

	if ( ! pFnStrLen )
		pFnStrLen = (UFunction*) UObject::GObjObjects()->Data[ 16157 ];

	UCanvas_execStrLen_Parms StrLen_Parms;
	memcpy ( &StrLen_Parms.String, &String, 0x10 );

	pFnStrLen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStrLen, &StrLen_Parms, NULL );

	pFnStrLen->FunctionFlags |= 0x400;

	if ( XL )
		*XL = StrLen_Parms.XL;

	if ( YL )
		*YL = StrLen_Parms.YL;
};

// Function Engine.Canvas.CreateFontRenderInfo
// [0x00826003] ( FUNC_Final )
// Parameters infos:
// struct FFontRenderInfo         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bClipText                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bEnableShadow                  ( CPF_OptionalParm | CPF_Parm )
// struct FLinearColor            GlowColor                      ( CPF_OptionalParm | CPF_Parm )
// struct FVector2D               GlowOuterRadius                ( CPF_OptionalParm | CPF_Parm )
// struct FVector2D               GlowInnerRadius                ( CPF_OptionalParm | CPF_Parm )

struct FFontRenderInfo UCanvas::CreateFontRenderInfo ( unsigned long bClipText, unsigned long bEnableShadow, struct FLinearColor GlowColor, struct FVector2D GlowOuterRadius, struct FVector2D GlowInnerRadius )
{
	static UFunction* pFnCreateFontRenderInfo = NULL;

	if ( ! pFnCreateFontRenderInfo )
		pFnCreateFontRenderInfo = (UFunction*) UObject::GObjObjects()->Data[ 16469 ];

	UCanvas_execCreateFontRenderInfo_Parms CreateFontRenderInfo_Parms;
	CreateFontRenderInfo_Parms.bClipText = bClipText;
	CreateFontRenderInfo_Parms.bEnableShadow = bEnableShadow;
	memcpy ( &CreateFontRenderInfo_Parms.GlowColor, &GlowColor, 0x10 );
	memcpy ( &CreateFontRenderInfo_Parms.GlowOuterRadius, &GlowOuterRadius, 0x8 );
	memcpy ( &CreateFontRenderInfo_Parms.GlowInnerRadius, &GlowInnerRadius, 0x8 );

	this->ProcessEvent ( pFnCreateFontRenderInfo, &CreateFontRenderInfo_Parms, NULL );

	return CreateFontRenderInfo_Parms.ReturnValue;
};

// Function Engine.Canvas.DrawMaterialTileClipped
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      Mat                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_OptionalParm | CPF_Parm )
// float                          V                              ( CPF_OptionalParm | CPF_Parm )
// float                          UL                             ( CPF_OptionalParm | CPF_Parm )
// float                          VL                             ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawMaterialTileClipped ( class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL )
{
	static UFunction* pFnDrawMaterialTileClipped = NULL;

	if ( ! pFnDrawMaterialTileClipped )
		pFnDrawMaterialTileClipped = (UFunction*) UObject::GObjObjects()->Data[ 16461 ];

	UCanvas_execDrawMaterialTileClipped_Parms DrawMaterialTileClipped_Parms;
	DrawMaterialTileClipped_Parms.Mat = Mat;
	DrawMaterialTileClipped_Parms.XL = XL;
	DrawMaterialTileClipped_Parms.YL = YL;
	DrawMaterialTileClipped_Parms.U = U;
	DrawMaterialTileClipped_Parms.V = V;
	DrawMaterialTileClipped_Parms.UL = UL;
	DrawMaterialTileClipped_Parms.VL = VL;

	pFnDrawMaterialTileClipped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawMaterialTileClipped, &DrawMaterialTileClipped_Parms, NULL );

	pFnDrawMaterialTileClipped->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawMaterialTile
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      Mat                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_OptionalParm | CPF_Parm )
// float                          V                              ( CPF_OptionalParm | CPF_Parm )
// float                          UL                             ( CPF_OptionalParm | CPF_Parm )
// float                          VL                             ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawMaterialTile ( class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL )
{
	static UFunction* pFnDrawMaterialTile = NULL;

	if ( ! pFnDrawMaterialTile )
		pFnDrawMaterialTile = (UFunction*) UObject::GObjObjects()->Data[ 16453 ];

	UCanvas_execDrawMaterialTile_Parms DrawMaterialTile_Parms;
	DrawMaterialTile_Parms.Mat = Mat;
	DrawMaterialTile_Parms.XL = XL;
	DrawMaterialTile_Parms.YL = YL;
	DrawMaterialTile_Parms.U = U;
	DrawMaterialTile_Parms.V = V;
	DrawMaterialTile_Parms.UL = UL;
	DrawMaterialTile_Parms.VL = VL;

	pFnDrawMaterialTile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawMaterialTile, &DrawMaterialTile_Parms, NULL );

	pFnDrawMaterialTile->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawTile
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture*                Tex                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )

void UCanvas::DrawTile ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL )
{
	static UFunction* pFnDrawTile = NULL;

	if ( ! pFnDrawTile )
		pFnDrawTile = (UFunction*) UObject::GObjObjects()->Data[ 16445 ];

	UCanvas_execDrawTile_Parms DrawTile_Parms;
	DrawTile_Parms.Tex = Tex;
	DrawTile_Parms.XL = XL;
	DrawTile_Parms.YL = YL;
	DrawTile_Parms.U = U;
	DrawTile_Parms.V = V;
	DrawTile_Parms.UL = UL;
	DrawTile_Parms.VL = VL;

	pFnDrawTile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTile, &DrawTile_Parms, NULL );

	pFnDrawTile->FunctionFlags |= 0x400;
};

// Function Engine.Controller.InterpolationFinished
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void AController::eventInterpolationFinished ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationFinished = NULL;

	if ( ! pFnInterpolationFinished )
		pFnInterpolationFinished = (UFunction*) UObject::GObjObjects()->Data[ 8481 ];

	AController_eventInterpolationFinished_Parms InterpolationFinished_Parms;
	InterpolationFinished_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationFinished, &InterpolationFinished_Parms, NULL );
};

// Function Engine.Controller.InterpolationStarted
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )
// class UInterpGroupInst*        GroupInst                      ( CPF_Parm )

void AController::eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst )
{
	static UFunction* pFnInterpolationStarted = NULL;

	if ( ! pFnInterpolationStarted )
		pFnInterpolationStarted = (UFunction*) UObject::GObjObjects()->Data[ 8478 ];

	AController_eventInterpolationStarted_Parms InterpolationStarted_Parms;
	InterpolationStarted_Parms.InterpAction = InterpAction;
	InterpolationStarted_Parms.GroupInst = GroupInst;

	this->ProcessEvent ( pFnInterpolationStarted, &InterpolationStarted_Parms, NULL );
};

// Function Engine.Controller.GetDestinationOffset
// [0x00020000] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AController::GetDestinationOffset ( )
{
	static UFunction* pFnGetDestinationOffset = NULL;

	if ( ! pFnGetDestinationOffset )
		pFnGetDestinationOffset = (UFunction*) UObject::GObjObjects()->Data[ 8476 ];

	AController_execGetDestinationOffset_Parms GetDestinationOffset_Parms;

	this->ProcessEvent ( pFnGetDestinationOffset, &GetDestinationOffset_Parms, NULL );

	return GetDestinationOffset_Parms.ReturnValue;
};

// Function Engine.Controller.InitNavigationHandle
// [0x00020002] 
// Parameters infos:

void AController::InitNavigationHandle ( )
{
	static UFunction* pFnInitNavigationHandle = NULL;

	if ( ! pFnInitNavigationHandle )
		pFnInitNavigationHandle = (UFunction*) UObject::GObjObjects()->Data[ 8473 ];

	AController_execInitNavigationHandle_Parms InitNavigationHandle_Parms;

	this->ProcessEvent ( pFnInitNavigationHandle, &InitNavigationHandle_Parms, NULL );
};

// Function Engine.Controller.ReadyForLift
// [0x00020000] 
// Parameters infos:

void AController::ReadyForLift ( )
{
	static UFunction* pFnReadyForLift = NULL;

	if ( ! pFnReadyForLift )
		pFnReadyForLift = (UFunction*) UObject::GObjObjects()->Data[ 8472 ];

	AController_execReadyForLift_Parms ReadyForLift_Parms;

	this->ProcessEvent ( pFnReadyForLift, &ReadyForLift_Parms, NULL );
};

// Function Engine.Controller.SendMessage
// [0x00024000] 
// Parameters infos:
// class APlayerReplicationInfo*  Recipient                      ( CPF_Parm )
// struct FName                   MessageType                    ( CPF_Parm )
// float                          Wait                           ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_OptionalParm | CPF_Parm )

void AController::SendMessage ( class APlayerReplicationInfo* Recipient, struct FName MessageType, float Wait, class UClass* DamageType )
{
	static UFunction* pFnSendMessage = NULL;

	if ( ! pFnSendMessage )
		pFnSendMessage = (UFunction*) UObject::GObjObjects()->Data[ 8467 ];

	AController_execSendMessage_Parms SendMessage_Parms;
	SendMessage_Parms.Recipient = Recipient;
	memcpy ( &SendMessage_Parms.MessageType, &MessageType, 0x8 );
	SendMessage_Parms.Wait = Wait;
	SendMessage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnSendMessage, &SendMessage_Parms, NULL );
};

// Function Engine.Controller.OnLastManStanding
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventOnLastManStanding ( )
{
	static UFunction* pFnOnLastManStanding = NULL;

	if ( ! pFnOnLastManStanding )
		pFnOnLastManStanding = (UFunction*) UObject::GObjObjects()->Data[ 8466 ];

	AController_eventOnLastManStanding_Parms OnLastManStanding_Parms;

	this->ProcessEvent ( pFnOnLastManStanding, &OnLastManStanding_Parms, NULL );
};

// Function Engine.Controller.OnProximityAlarm
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  oTarget                        ( CPF_Parm )
// int                            nRelationship                  ( CPF_Parm )

void AController::eventOnProximityAlarm ( class AActor* oTarget, int nRelationship )
{
	static UFunction* pFnOnProximityAlarm = NULL;

	if ( ! pFnOnProximityAlarm )
		pFnOnProximityAlarm = (UFunction*) UObject::GObjObjects()->Data[ 8463 ];

	AController_eventOnProximityAlarm_Parms OnProximityAlarm_Parms;
	OnProximityAlarm_Parms.oTarget = oTarget;
	OnProximityAlarm_Parms.nRelationship = nRelationship;

	this->ProcessEvent ( pFnOnProximityAlarm, &OnProximityAlarm_Parms, NULL );
};

// Function Engine.Controller.OnSquadSeen
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  oSquad                         ( CPF_Parm )

void AController::eventOnSquadSeen ( class AActor* oSquad )
{
	static UFunction* pFnOnSquadSeen = NULL;

	if ( ! pFnOnSquadSeen )
		pFnOnSquadSeen = (UFunction*) UObject::GObjObjects()->Data[ 8461 ];

	AController_eventOnSquadSeen_Parms OnSquadSeen_Parms;
	OnSquadSeen_Parms.oSquad = oSquad;

	this->ProcessEvent ( pFnOnSquadSeen, &OnSquadSeen_Parms, NULL );
};

// Function Engine.Controller.OnActionComplete_Movement
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FName                   nmAction                       ( CPF_Parm )
// int                            nReason                        ( CPF_Parm )
// class AActor*                  oTarget                        ( CPF_Parm )
// struct FVector                 vLocation                      ( CPF_Parm )

void AController::eventOnActionComplete_Movement ( struct FName nmAction, int nReason, class AActor* oTarget, struct FVector vLocation )
{
	static UFunction* pFnOnActionComplete_Movement = NULL;

	if ( ! pFnOnActionComplete_Movement )
		pFnOnActionComplete_Movement = (UFunction*) UObject::GObjObjects()->Data[ 8456 ];

	AController_eventOnActionComplete_Movement_Parms OnActionComplete_Movement_Parms;
	memcpy ( &OnActionComplete_Movement_Parms.nmAction, &nmAction, 0x8 );
	OnActionComplete_Movement_Parms.nReason = nReason;
	OnActionComplete_Movement_Parms.oTarget = oTarget;
	memcpy ( &OnActionComplete_Movement_Parms.vLocation, &vLocation, 0xC );

	this->ProcessEvent ( pFnOnActionComplete_Movement, &OnActionComplete_Movement_Parms, NULL );
};

// Function Engine.Controller.OnActionComplete_Combat
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FName                   nmAction                       ( CPF_Parm )
// struct FName                   nmTechnique                    ( CPF_Parm )
// int                            nReason                        ( CPF_Parm )
// class AActor*                  oLastTarget                    ( CPF_Parm )

void AController::eventOnActionComplete_Combat ( struct FName nmAction, struct FName nmTechnique, int nReason, class AActor* oLastTarget )
{
	static UFunction* pFnOnActionComplete_Combat = NULL;

	if ( ! pFnOnActionComplete_Combat )
		pFnOnActionComplete_Combat = (UFunction*) UObject::GObjObjects()->Data[ 8451 ];

	AController_eventOnActionComplete_Combat_Parms OnActionComplete_Combat_Parms;
	memcpy ( &OnActionComplete_Combat_Parms.nmAction, &nmAction, 0x8 );
	memcpy ( &OnActionComplete_Combat_Parms.nmTechnique, &nmTechnique, 0x8 );
	OnActionComplete_Combat_Parms.nReason = nReason;
	OnActionComplete_Combat_Parms.oLastTarget = oLastTarget;

	this->ProcessEvent ( pFnOnActionComplete_Combat, &OnActionComplete_Combat_Parms, NULL );
};

// Function Engine.Controller.OnDamaged
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AController*             oInstigator                    ( CPF_Parm )
// float                          fDamage                        ( CPF_Parm )

void AController::eventOnDamaged ( class AController* oInstigator, float fDamage )
{
	static UFunction* pFnOnDamaged = NULL;

	if ( ! pFnOnDamaged )
		pFnOnDamaged = (UFunction*) UObject::GObjObjects()->Data[ 8448 ];

	AController_eventOnDamaged_Parms OnDamaged_Parms;
	OnDamaged_Parms.oInstigator = oInstigator;
	OnDamaged_Parms.fDamage = fDamage;

	this->ProcessEvent ( pFnOnDamaged, &OnDamaged_Parms, NULL );
};

// Function Engine.Controller.OnCastAt
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   oAttacker                      ( CPF_Parm )
// struct FName                   nmPower                        ( CPF_Parm )

void AController::eventOnCastAt ( class APawn* oAttacker, struct FName nmPower )
{
	static UFunction* pFnOnCastAt = NULL;

	if ( ! pFnOnCastAt )
		pFnOnCastAt = (UFunction*) UObject::GObjObjects()->Data[ 8445 ];

	AController_eventOnCastAt_Parms OnCastAt_Parms;
	OnCastAt_Parms.oAttacker = oAttacker;
	memcpy ( &OnCastAt_Parms.nmPower, &nmPower, 0x8 );

	this->ProcessEvent ( pFnOnCastAt, &OnCastAt_Parms, NULL );
};

// Function Engine.Controller.OnAttacked
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   oAttacker                      ( CPF_Parm )
// struct FName                   nmWeapon                       ( CPF_Parm )

void AController::eventOnAttacked ( class APawn* oAttacker, struct FName nmWeapon )
{
	static UFunction* pFnOnAttacked = NULL;

	if ( ! pFnOnAttacked )
		pFnOnAttacked = (UFunction*) UObject::GObjObjects()->Data[ 8442 ];

	AController_eventOnAttacked_Parms OnAttacked_Parms;
	OnAttacked_Parms.oAttacker = oAttacker;
	memcpy ( &OnAttacked_Parms.nmWeapon, &nmWeapon, 0x8 );

	this->ProcessEvent ( pFnOnAttacked, &OnAttacked_Parms, NULL );
};

// Function Engine.Controller.OnAbilityDisabled
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            nEnableType                    ( CPF_Parm )
// struct FName                   nmSubType                      ( CPF_Parm )

void AController::eventOnAbilityDisabled ( int nEnableType, struct FName nmSubType )
{
	static UFunction* pFnOnAbilityDisabled = NULL;

	if ( ! pFnOnAbilityDisabled )
		pFnOnAbilityDisabled = (UFunction*) UObject::GObjObjects()->Data[ 8439 ];

	AController_eventOnAbilityDisabled_Parms OnAbilityDisabled_Parms;
	OnAbilityDisabled_Parms.nEnableType = nEnableType;
	memcpy ( &OnAbilityDisabled_Parms.nmSubType, &nmSubType, 0x8 );

	this->ProcessEvent ( pFnOnAbilityDisabled, &OnAbilityDisabled_Parms, NULL );
};

// Function Engine.Controller.OnAbilityEnabled
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            nEnableType                    ( CPF_Parm )
// struct FName                   nmSubType                      ( CPF_Parm )

void AController::eventOnAbilityEnabled ( int nEnableType, struct FName nmSubType )
{
	static UFunction* pFnOnAbilityEnabled = NULL;

	if ( ! pFnOnAbilityEnabled )
		pFnOnAbilityEnabled = (UFunction*) UObject::GObjObjects()->Data[ 8436 ];

	AController_eventOnAbilityEnabled_Parms OnAbilityEnabled_Parms;
	OnAbilityEnabled_Parms.nEnableType = nEnableType;
	memcpy ( &OnAbilityEnabled_Parms.nmSubType, &nmSubType, 0x8 );

	this->ProcessEvent ( pFnOnAbilityEnabled, &OnAbilityEnabled_Parms, NULL );
};

// Function Engine.Controller.OnNoCombatAction
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventOnNoCombatAction ( )
{
	static UFunction* pFnOnNoCombatAction = NULL;

	if ( ! pFnOnNoCombatAction )
		pFnOnNoCombatAction = (UFunction*) UObject::GObjObjects()->Data[ 8435 ];

	AController_eventOnNoCombatAction_Parms OnNoCombatAction_Parms;

	this->ProcessEvent ( pFnOnNoCombatAction, &OnNoCombatAction_Parms, NULL );
};

// Function Engine.Controller.OnDeath
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AController*             oKiller                        ( CPF_Parm )

void AController::eventOnDeath ( class AController* oKiller )
{
	static UFunction* pFnOnDeath = NULL;

	if ( ! pFnOnDeath )
		pFnOnDeath = (UFunction*) UObject::GObjObjects()->Data[ 8433 ];

	AController_eventOnDeath_Parms OnDeath_Parms;
	OnDeath_Parms.oKiller = oKiller;

	this->ProcessEvent ( pFnOnDeath, &OnDeath_Parms, NULL );
};

// Function Engine.Controller.BioCanTeleport
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   oPawn                          ( CPF_Parm )
// struct FVector                 vOldLocation                   ( CPF_Parm )
// struct FVector                 vNewLocation                   ( CPF_Parm )

bool AController::BioCanTeleport ( class APawn* oPawn, struct FVector vOldLocation, struct FVector vNewLocation )
{
	static UFunction* pFnBioCanTeleport = NULL;

	if ( ! pFnBioCanTeleport )
		pFnBioCanTeleport = (UFunction*) UObject::GObjObjects()->Data[ 8428 ];

	AController_execBioCanTeleport_Parms BioCanTeleport_Parms;
	BioCanTeleport_Parms.oPawn = oPawn;
	memcpy ( &BioCanTeleport_Parms.vOldLocation, &vOldLocation, 0xC );
	memcpy ( &BioCanTeleport_Parms.vNewLocation, &vNewLocation, 0xC );

	pFnBioCanTeleport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioCanTeleport, &BioCanTeleport_Parms, NULL );

	pFnBioCanTeleport->FunctionFlags |= 0x400;

	return BioCanTeleport_Parms.ReturnValue;
};

// Function Engine.Controller.CurrentLevelUnloaded
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventCurrentLevelUnloaded ( )
{
	static UFunction* pFnCurrentLevelUnloaded = NULL;

	if ( ! pFnCurrentLevelUnloaded )
		pFnCurrentLevelUnloaded = (UFunction*) UObject::GObjObjects()->Data[ 8427 ];

	AController_eventCurrentLevelUnloaded_Parms CurrentLevelUnloaded_Parms;

	this->ProcessEvent ( pFnCurrentLevelUnloaded, &CurrentLevelUnloaded_Parms, NULL );
};

// Function Engine.Controller.GetRouteGoalAfter
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            RouteIdx                       ( CPF_Parm )

class AActor* AController::GetRouteGoalAfter ( int RouteIdx )
{
	static UFunction* pFnGetRouteGoalAfter = NULL;

	if ( ! pFnGetRouteGoalAfter )
		pFnGetRouteGoalAfter = (UFunction*) UObject::GObjObjects()->Data[ 8424 ];

	AController_execGetRouteGoalAfter_Parms GetRouteGoalAfter_Parms;
	GetRouteGoalAfter_Parms.RouteIdx = RouteIdx;

	this->ProcessEvent ( pFnGetRouteGoalAfter, &GetRouteGoalAfter_Parms, NULL );

	return GetRouteGoalAfter_Parms.ReturnValue;
};

// Function Engine.Controller.IsInCombat
// [0x00024800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceCheck                    ( CPF_OptionalParm | CPF_Parm )

bool AController::eventIsInCombat ( unsigned long bForceCheck )
{
	static UFunction* pFnIsInCombat = NULL;

	if ( ! pFnIsInCombat )
		pFnIsInCombat = (UFunction*) UObject::GObjObjects()->Data[ 8421 ];

	AController_eventIsInCombat_Parms IsInCombat_Parms;
	IsInCombat_Parms.bForceCheck = bForceCheck;

	this->ProcessEvent ( pFnIsInCombat, &IsInCombat_Parms, NULL );

	return IsInCombat_Parms.ReturnValue;
};

// Function Engine.Controller.IsSpectating
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::eventIsSpectating ( )
{
	static UFunction* pFnIsSpectating = NULL;

	if ( ! pFnIsSpectating )
		pFnIsSpectating = (UFunction*) UObject::GObjObjects()->Data[ 8419 ];

	AController_eventIsSpectating_Parms IsSpectating_Parms;

	this->ProcessEvent ( pFnIsSpectating, &IsSpectating_Parms, NULL );

	return IsSpectating_Parms.ReturnValue;
};

// Function Engine.Controller.OnToggleHidden
// [0x00020102] 
// Parameters infos:
// class USeqAct_ToggleHidden*    Action                         ( CPF_Parm )

void AController::OnToggleHidden ( class USeqAct_ToggleHidden* Action )
{
	static UFunction* pFnOnToggleHidden = NULL;

	if ( ! pFnOnToggleHidden )
		pFnOnToggleHidden = (UFunction*) UObject::GObjObjects()->Data[ 8417 ];

	AController_execOnToggleHidden_Parms OnToggleHidden_Parms;
	OnToggleHidden_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggleHidden, &OnToggleHidden_Parms, NULL );
};

// Function Engine.Controller.NotifyAddInventory
// [0x00020000] 
// Parameters infos:
// class AInventory*              NewItem                        ( CPF_Parm )

void AController::NotifyAddInventory ( class AInventory* NewItem )
{
	static UFunction* pFnNotifyAddInventory = NULL;

	if ( ! pFnNotifyAddInventory )
		pFnNotifyAddInventory = (UFunction*) UObject::GObjObjects()->Data[ 8415 ];

	AController_execNotifyAddInventory_Parms NotifyAddInventory_Parms;
	NotifyAddInventory_Parms.NewItem = NewItem;

	this->ProcessEvent ( pFnNotifyAddInventory, &NotifyAddInventory_Parms, NULL );
};

// Function Engine.Controller.OnModifyHealth
// [0x00020102] 
// Parameters infos:
// class USeqAct_ModifyHealth*    Action                         ( CPF_Parm )

void AController::OnModifyHealth ( class USeqAct_ModifyHealth* Action )
{
	static UFunction* pFnOnModifyHealth = NULL;

	if ( ! pFnOnModifyHealth )
		pFnOnModifyHealth = (UFunction*) UObject::GObjObjects()->Data[ 8413 ];

	AController_execOnModifyHealth_Parms OnModifyHealth_Parms;
	OnModifyHealth_Parms.Action = Action;

	this->ProcessEvent ( pFnOnModifyHealth, &OnModifyHealth_Parms, NULL );
};

// Function Engine.Controller.NotifyCoverClaimViolation
// [0x00020100] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             NewClaim                       ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )

bool AController::NotifyCoverClaimViolation ( class AController* NewClaim, class ACoverLink* Link, int SlotIdx )
{
	static UFunction* pFnNotifyCoverClaimViolation = NULL;

	if ( ! pFnNotifyCoverClaimViolation )
		pFnNotifyCoverClaimViolation = (UFunction*) UObject::GObjObjects()->Data[ 8408 ];

	AController_execNotifyCoverClaimViolation_Parms NotifyCoverClaimViolation_Parms;
	NotifyCoverClaimViolation_Parms.NewClaim = NewClaim;
	NotifyCoverClaimViolation_Parms.Link = Link;
	NotifyCoverClaimViolation_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnNotifyCoverClaimViolation, &NotifyCoverClaimViolation_Parms, NULL );

	return NotifyCoverClaimViolation_Parms.ReturnValue;
};

// Function Engine.Controller.NotifyCoverAdjusted
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void AController::eventNotifyCoverAdjusted ( )
{
	static UFunction* pFnNotifyCoverAdjusted = NULL;

	if ( ! pFnNotifyCoverAdjusted )
		pFnNotifyCoverAdjusted = (UFunction*) UObject::GObjObjects()->Data[ 8407 ];

	AController_eventNotifyCoverAdjusted_Parms NotifyCoverAdjusted_Parms;

	this->ProcessEvent ( pFnNotifyCoverAdjusted, &NotifyCoverAdjusted_Parms, NULL );
};

// Function Engine.Controller.NotifyCoverDisabled
// [0x00024900] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Link                           ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bAdjacentIdx                   ( CPF_OptionalParm | CPF_Parm )

void AController::eventNotifyCoverDisabled ( class AActor* Link, int SlotIdx, unsigned long bAdjacentIdx )
{
	static UFunction* pFnNotifyCoverDisabled = NULL;

	if ( ! pFnNotifyCoverDisabled )
		pFnNotifyCoverDisabled = (UFunction*) UObject::GObjObjects()->Data[ 8403 ];

	AController_eventNotifyCoverDisabled_Parms NotifyCoverDisabled_Parms;
	NotifyCoverDisabled_Parms.Link = Link;
	NotifyCoverDisabled_Parms.SlotIdx = SlotIdx;
	NotifyCoverDisabled_Parms.bAdjacentIdx = bAdjacentIdx;

	this->ProcessEvent ( pFnNotifyCoverDisabled, &NotifyCoverDisabled_Parms, NULL );
};

// Function Engine.Controller.OnSetVelocity
// [0x00020102] 
// Parameters infos:
// class USeqAct_SetVelocity*     Action                         ( CPF_Parm )

void AController::OnSetVelocity ( class USeqAct_SetVelocity* Action )
{
	static UFunction* pFnOnSetVelocity = NULL;

	if ( ! pFnOnSetVelocity )
		pFnOnSetVelocity = (UFunction*) UObject::GObjObjects()->Data[ 8401 ];

	AController_execOnSetVelocity_Parms OnSetVelocity_Parms;
	OnSetVelocity_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetVelocity, &OnSetVelocity_Parms, NULL );
};

// Function Engine.Controller.OnSetPhysics
// [0x00020102] 
// Parameters infos:
// class USeqAct_SetPhysics*      Action                         ( CPF_Parm )

void AController::OnSetPhysics ( class USeqAct_SetPhysics* Action )
{
	static UFunction* pFnOnSetPhysics = NULL;

	if ( ! pFnOnSetPhysics )
		pFnOnSetPhysics = (UFunction*) UObject::GObjObjects()->Data[ 8399 ];

	AController_execOnSetPhysics_Parms OnSetPhysics_Parms;
	OnSetPhysics_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetPhysics, &OnSetPhysics_Parms, NULL );
};

// Function Engine.Controller.OnToggleAffectedByHitEffects
// [0x00020002] 
// Parameters infos:
// class USeqAct_ToggleAffectedByHitEffects* inAction                       ( CPF_Parm )

void AController::OnToggleAffectedByHitEffects ( class USeqAct_ToggleAffectedByHitEffects* inAction )
{
	static UFunction* pFnOnToggleAffectedByHitEffects = NULL;

	if ( ! pFnOnToggleAffectedByHitEffects )
		pFnOnToggleAffectedByHitEffects = (UFunction*) UObject::GObjObjects()->Data[ 8395 ];

	AController_execOnToggleAffectedByHitEffects_Parms OnToggleAffectedByHitEffects_Parms;
	OnToggleAffectedByHitEffects_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggleAffectedByHitEffects, &OnToggleAffectedByHitEffects_Parms, NULL );
};

// Function Engine.Controller.OnToggleGodMode
// [0x00020002] 
// Parameters infos:
// class USeqAct_ToggleGodMode*   inAction                       ( CPF_Parm )

void AController::OnToggleGodMode ( class USeqAct_ToggleGodMode* inAction )
{
	static UFunction* pFnOnToggleGodMode = NULL;

	if ( ! pFnOnToggleGodMode )
		pFnOnToggleGodMode = (UFunction*) UObject::GObjObjects()->Data[ 8392 ];

	AController_execOnToggleGodMode_Parms OnToggleGodMode_Parms;
	OnToggleGodMode_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggleGodMode, &OnToggleGodMode_Parms, NULL );
};

// Function Engine.Controller.OnTeleport
// [0x00020102] 
// Parameters infos:
// class USeqAct_Teleport*        Action                         ( CPF_Parm )

void AController::OnTeleport ( class USeqAct_Teleport* Action )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 8390 ];

	AController_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.Action = Action;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function Engine.Controller.OnMakeNoise
// [0x00020102] 
// Parameters infos:
// class USeqAct_MakeNoise*       Action                         ( CPF_Parm )

void AController::OnMakeNoise ( class USeqAct_MakeNoise* Action )
{
	static UFunction* pFnOnMakeNoise = NULL;

	if ( ! pFnOnMakeNoise )
		pFnOnMakeNoise = (UFunction*) UObject::GObjObjects()->Data[ 8388 ];

	AController_execOnMakeNoise_Parms OnMakeNoise_Parms;
	OnMakeNoise_Parms.Action = Action;

	this->ProcessEvent ( pFnOnMakeNoise, &OnMakeNoise_Parms, NULL );
};

// Function Engine.Controller.IsDead
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::IsDead ( )
{
	static UFunction* pFnIsDead = NULL;

	if ( ! pFnIsDead )
		pFnIsDead = (UFunction*) UObject::GObjObjects()->Data[ 8358 ];

	AController_execIsDead_Parms IsDead_Parms;

	this->ProcessEvent ( pFnIsDead, &IsDead_Parms, NULL );

	return IsDead_Parms.ReturnValue;
};

// Function Engine.Controller.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AController::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = (UFunction*) UObject::GObjObjects()->Data[ 8356 ];

	AController_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.Controller.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AController::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 8348 ];

	AController_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Controller.StopLatentExecution
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AController::StopLatentExecution ( )
{
	static UFunction* pFnStopLatentExecution = NULL;

	if ( ! pFnStopLatentExecution )
		pFnStopLatentExecution = (UFunction*) UObject::GObjObjects()->Data[ 8347 ];

	AController_execStopLatentExecution_Parms StopLatentExecution_Parms;

	pFnStopLatentExecution->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopLatentExecution, &StopLatentExecution_Parms, NULL );

	pFnStopLatentExecution->FunctionFlags |= 0x400;
};

// Function Engine.Controller.InLatentExecution
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LatentActionNumber             ( CPF_Parm )

bool AController::InLatentExecution ( int LatentActionNumber )
{
	static UFunction* pFnInLatentExecution = NULL;

	if ( ! pFnInLatentExecution )
		pFnInLatentExecution = (UFunction*) UObject::GObjObjects()->Data[ 8344 ];

	AController_execInLatentExecution_Parms InLatentExecution_Parms;
	InLatentExecution_Parms.LatentActionNumber = LatentActionNumber;

	pFnInLatentExecution->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInLatentExecution, &InLatentExecution_Parms, NULL );

	pFnInLatentExecution->FunctionFlags |= 0x400;

	return InLatentExecution_Parms.ReturnValue;
};

// Function Engine.Controller.ReachedPreciseDestination
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventReachedPreciseDestination ( )
{
	static UFunction* pFnReachedPreciseDestination = NULL;

	if ( ! pFnReachedPreciseDestination )
		pFnReachedPreciseDestination = (UFunction*) UObject::GObjObjects()->Data[ 8343 ];

	AController_eventReachedPreciseDestination_Parms ReachedPreciseDestination_Parms;

	this->ProcessEvent ( pFnReachedPreciseDestination, &ReachedPreciseDestination_Parms, NULL );
};

// Function Engine.Controller.NotifyMissedJump
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventNotifyMissedJump ( )
{
	static UFunction* pFnNotifyMissedJump = NULL;

	if ( ! pFnNotifyMissedJump )
		pFnNotifyMissedJump = (UFunction*) UObject::GObjObjects()->Data[ 8342 ];

	AController_eventNotifyMissedJump_Parms NotifyMissedJump_Parms;

	this->ProcessEvent ( pFnNotifyMissedJump, &NotifyMissedJump_Parms, NULL );
};

// Function Engine.Controller.NotifyJumpApex
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventNotifyJumpApex ( )
{
	static UFunction* pFnNotifyJumpApex = NULL;

	if ( ! pFnNotifyJumpApex )
		pFnNotifyJumpApex = (UFunction*) UObject::GObjObjects()->Data[ 8341 ];

	AController_eventNotifyJumpApex_Parms NotifyJumpApex_Parms;

	this->ProcessEvent ( pFnNotifyJumpApex, &NotifyJumpApex_Parms, NULL );
};

// Function Engine.Controller.NotifyBump
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool AController::eventNotifyBump ( class AActor* Other, struct FVector HitNormal )
{
	static UFunction* pFnNotifyBump = NULL;

	if ( ! pFnNotifyBump )
		pFnNotifyBump = (UFunction*) UObject::GObjObjects()->Data[ 8337 ];

	AController_eventNotifyBump_Parms NotifyBump_Parms;
	NotifyBump_Parms.Other = Other;
	memcpy ( &NotifyBump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnNotifyBump, &NotifyBump_Parms, NULL );

	return NotifyBump_Parms.ReturnValue;
};

// Function Engine.Controller.NotifyFallingHitWall
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )

void AController::eventNotifyFallingHitWall ( struct FVector HitNormal, class AActor* Wall )
{
	static UFunction* pFnNotifyFallingHitWall = NULL;

	if ( ! pFnNotifyFallingHitWall )
		pFnNotifyFallingHitWall = (UFunction*) UObject::GObjObjects()->Data[ 8334 ];

	AController_eventNotifyFallingHitWall_Parms NotifyFallingHitWall_Parms;
	memcpy ( &NotifyFallingHitWall_Parms.HitNormal, &HitNormal, 0xC );
	NotifyFallingHitWall_Parms.Wall = Wall;

	this->ProcessEvent ( pFnNotifyFallingHitWall, &NotifyFallingHitWall_Parms, NULL );
};

// Function Engine.Controller.NotifyHitWall
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )

bool AController::eventNotifyHitWall ( struct FVector HitNormal, class AActor* Wall )
{
	static UFunction* pFnNotifyHitWall = NULL;

	if ( ! pFnNotifyHitWall )
		pFnNotifyHitWall = (UFunction*) UObject::GObjObjects()->Data[ 8330 ];

	AController_eventNotifyHitWall_Parms NotifyHitWall_Parms;
	memcpy ( &NotifyHitWall_Parms.HitNormal, &HitNormal, 0xC );
	NotifyHitWall_Parms.Wall = Wall;

	this->ProcessEvent ( pFnNotifyHitWall, &NotifyHitWall_Parms, NULL );

	return NotifyHitWall_Parms.ReturnValue;
};

// Function Engine.Controller.NotifyLanded
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

bool AController::eventNotifyLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnNotifyLanded = NULL;

	if ( ! pFnNotifyLanded )
		pFnNotifyLanded = (UFunction*) UObject::GObjObjects()->Data[ 8326 ];

	AController_eventNotifyLanded_Parms NotifyLanded_Parms;
	memcpy ( &NotifyLanded_Parms.HitNormal, &HitNormal, 0xC );
	NotifyLanded_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnNotifyLanded, &NotifyLanded_Parms, NULL );

	return NotifyLanded_Parms.ReturnValue;
};

// Function Engine.Controller.NotifyHeadVolumeChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APhysicsVolume*          NewVolume                      ( CPF_Parm )

bool AController::eventNotifyHeadVolumeChange ( class APhysicsVolume* NewVolume )
{
	static UFunction* pFnNotifyHeadVolumeChange = NULL;

	if ( ! pFnNotifyHeadVolumeChange )
		pFnNotifyHeadVolumeChange = (UFunction*) UObject::GObjObjects()->Data[ 8323 ];

	AController_eventNotifyHeadVolumeChange_Parms NotifyHeadVolumeChange_Parms;
	NotifyHeadVolumeChange_Parms.NewVolume = NewVolume;

	this->ProcessEvent ( pFnNotifyHeadVolumeChange, &NotifyHeadVolumeChange_Parms, NULL );

	return NotifyHeadVolumeChange_Parms.ReturnValue;
};

// Function Engine.Controller.NotifyPhysicsVolumeChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APhysicsVolume*          NewVolume                      ( CPF_Parm )

void AController::eventNotifyPhysicsVolumeChange ( class APhysicsVolume* NewVolume )
{
	static UFunction* pFnNotifyPhysicsVolumeChange = NULL;

	if ( ! pFnNotifyPhysicsVolumeChange )
		pFnNotifyPhysicsVolumeChange = (UFunction*) UObject::GObjObjects()->Data[ 8321 ];

	AController_eventNotifyPhysicsVolumeChange_Parms NotifyPhysicsVolumeChange_Parms;
	NotifyPhysicsVolumeChange_Parms.NewVolume = NewVolume;

	this->ProcessEvent ( pFnNotifyPhysicsVolumeChange, &NotifyPhysicsVolumeChange_Parms, NULL );
};

// Function Engine.Controller.LandingShake
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::LandingShake ( )
{
	static UFunction* pFnLandingShake = NULL;

	if ( ! pFnLandingShake )
		pFnLandingShake = (UFunction*) UObject::GObjObjects()->Data[ 8319 ];

	AController_execLandingShake_Parms LandingShake_Parms;

	this->ProcessEvent ( pFnLandingShake, &LandingShake_Parms, NULL );

	return LandingShake_Parms.ReturnValue;
};

// Function Engine.Controller.IsAimingAt
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ATarget                        ( CPF_Parm )
// float                          Epsilon                        ( CPF_Parm )

bool AController::IsAimingAt ( class AActor* ATarget, float Epsilon )
{
	static UFunction* pFnIsAimingAt = NULL;

	if ( ! pFnIsAimingAt )
		pFnIsAimingAt = (UFunction*) UObject::GObjObjects()->Data[ 8313 ];

	AController_execIsAimingAt_Parms IsAimingAt_Parms;
	IsAimingAt_Parms.ATarget = ATarget;
	IsAimingAt_Parms.Epsilon = Epsilon;

	this->ProcessEvent ( pFnIsAimingAt, &IsAimingAt_Parms, NULL );

	return IsAimingAt_Parms.ReturnValue;
};

// Function Engine.Controller.GetActorEyesViewPoint
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void AController::eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetActorEyesViewPoint = NULL;

	if ( ! pFnGetActorEyesViewPoint )
		pFnGetActorEyesViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 8310 ];

	AController_eventGetActorEyesViewPoint_Parms GetActorEyesViewPoint_Parms;

	this->ProcessEvent ( pFnGetActorEyesViewPoint, &GetActorEyesViewPoint_Parms, NULL );

	if ( out_Location )
		memcpy ( out_Location, &GetActorEyesViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetActorEyesViewPoint_Parms.out_Rotation, 0xC );
};

// Function Engine.Controller.GetPlayerViewPoint
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void AController::eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetPlayerViewPoint = NULL;

	if ( ! pFnGetPlayerViewPoint )
		pFnGetPlayerViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 8307 ];

	AController_eventGetPlayerViewPoint_Parms GetPlayerViewPoint_Parms;

	this->ProcessEvent ( pFnGetPlayerViewPoint, &GetPlayerViewPoint_Parms, NULL );

	if ( out_Location )
		memcpy ( out_Location, &GetPlayerViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetPlayerViewPoint_Parms.out_Rotation, 0xC );
};

// Function Engine.Controller.HandlePathObstruction
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  BlockedBy                      ( CPF_Parm )

bool AController::eventHandlePathObstruction ( class AActor* BlockedBy )
{
	static UFunction* pFnHandlePathObstruction = NULL;

	if ( ! pFnHandlePathObstruction )
		pFnHandlePathObstruction = (UFunction*) UObject::GObjObjects()->Data[ 8304 ];

	AController_eventHandlePathObstruction_Parms HandlePathObstruction_Parms;
	HandlePathObstruction_Parms.BlockedBy = BlockedBy;

	this->ProcessEvent ( pFnHandlePathObstruction, &HandlePathObstruction_Parms, NULL );

	return HandlePathObstruction_Parms.ReturnValue;
};

// Function Engine.Controller.UnderLift
// [0x00020000] 
// Parameters infos:
// class ALiftCenter*             Lift                           ( CPF_Parm )

void AController::UnderLift ( class ALiftCenter* Lift )
{
	static UFunction* pFnUnderLift = NULL;

	if ( ! pFnUnderLift )
		pFnUnderLift = (UFunction*) UObject::GObjObjects()->Data[ 8302 ];

	AController_execUnderLift_Parms UnderLift_Parms;
	UnderLift_Parms.Lift = Lift;

	this->ProcessEvent ( pFnUnderLift, &UnderLift_Parms, NULL );
};

// Function Engine.Controller.DoorFinished
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmState                        ( CPF_Parm )

bool AController::eventDoorFinished ( struct FName nmState )
{
	static UFunction* pFnDoorFinished = NULL;

	if ( ! pFnDoorFinished )
		pFnDoorFinished = (UFunction*) UObject::GObjObjects()->Data[ 8299 ];

	AController_eventDoorFinished_Parms DoorFinished_Parms;
	memcpy ( &DoorFinished_Parms.nmState, &nmState, 0x8 );

	this->ProcessEvent ( pFnDoorFinished, &DoorFinished_Parms, NULL );

	return DoorFinished_Parms.ReturnValue;
};

// Function Engine.Controller.WaitForDoor
// [0x00020002] 
// Parameters infos:
// class AActor*                  oDoor                          ( CPF_Parm )
// struct FName                   nmState                        ( CPF_Parm )

void AController::WaitForDoor ( class AActor* oDoor, struct FName nmState )
{
	static UFunction* pFnWaitForDoor = NULL;

	if ( ! pFnWaitForDoor )
		pFnWaitForDoor = (UFunction*) UObject::GObjObjects()->Data[ 8294 ];

	AController_execWaitForDoor_Parms WaitForDoor_Parms;
	WaitForDoor_Parms.oDoor = oDoor;
	memcpy ( &WaitForDoor_Parms.nmState, &nmState, 0x8 );

	this->ProcessEvent ( pFnWaitForDoor, &WaitForDoor_Parms, NULL );
};

// Function Engine.Controller.MoverFinished
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::eventMoverFinished ( )
{
	static UFunction* pFnMoverFinished = NULL;

	if ( ! pFnMoverFinished )
		pFnMoverFinished = (UFunction*) UObject::GObjObjects()->Data[ 8289 ];

	AController_eventMoverFinished_Parms MoverFinished_Parms;

	this->ProcessEvent ( pFnMoverFinished, &MoverFinished_Parms, NULL );

	return MoverFinished_Parms.ReturnValue;
};

// Function Engine.Controller.WaitForMover
// [0x00020002] 
// Parameters infos:
// class AInterpActor*            M                              ( CPF_Parm )

void AController::WaitForMover ( class AInterpActor* M )
{
	static UFunction* pFnWaitForMover = NULL;

	if ( ! pFnWaitForMover )
		pFnWaitForMover = (UFunction*) UObject::GObjObjects()->Data[ 8285 ];

	AController_execWaitForMover_Parms WaitForMover_Parms;
	WaitForMover_Parms.M = M;

	this->ProcessEvent ( pFnWaitForMover, &WaitForMover_Parms, NULL );
};

// Function Engine.Controller.AllowDetourTo
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        N                              ( CPF_Parm )

bool AController::eventAllowDetourTo ( class ANavigationPoint* N )
{
	static UFunction* pFnAllowDetourTo = NULL;

	if ( ! pFnAllowDetourTo )
		pFnAllowDetourTo = (UFunction*) UObject::GObjObjects()->Data[ 8282 ];

	AController_eventAllowDetourTo_Parms AllowDetourTo_Parms;
	AllowDetourTo_Parms.N = N;

	this->ProcessEvent ( pFnAllowDetourTo, &AllowDetourTo_Parms, NULL );

	return AllowDetourTo_Parms.ReturnValue;
};

// Function Engine.Controller.MayFall
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bFloor                         ( CPF_Parm )
// struct FVector                 FloorNormal                    ( CPF_Parm )

void AController::eventMayFall ( unsigned long bFloor, struct FVector FloorNormal )
{
	static UFunction* pFnMayFall = NULL;

	if ( ! pFnMayFall )
		pFnMayFall = (UFunction*) UObject::GObjObjects()->Data[ 8279 ];

	AController_eventMayFall_Parms MayFall_Parms;
	MayFall_Parms.bFloor = bFloor;
	memcpy ( &MayFall_Parms.FloorNormal, &FloorNormal, 0xC );

	this->ProcessEvent ( pFnMayFall, &MayFall_Parms, NULL );
};

// Function Engine.Controller.EndClimbLadder
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AController::EndClimbLadder ( )
{
	static UFunction* pFnEndClimbLadder = NULL;

	if ( ! pFnEndClimbLadder )
		pFnEndClimbLadder = (UFunction*) UObject::GObjObjects()->Data[ 8278 ];

	AController_execEndClimbLadder_Parms EndClimbLadder_Parms;

	pFnEndClimbLadder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndClimbLadder, &EndClimbLadder_Parms, NULL );

	pFnEndClimbLadder->FunctionFlags |= 0x400;
};

// Function Engine.Controller.LongFall
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventLongFall ( )
{
	static UFunction* pFnLongFall = NULL;

	if ( ! pFnLongFall )
		pFnLongFall = (UFunction*) UObject::GObjObjects()->Data[ 8277 ];

	AController_eventLongFall_Parms LongFall_Parms;

	this->ProcessEvent ( pFnLongFall, &LongFall_Parms, NULL );
};

// Function Engine.Controller.WaitForLanding
// [0x00024409] ( FUNC_Final | FUNC_Native ) iNative [0x020F]
// Parameters infos:
// float                          waitDuration                   ( CPF_OptionalParm | CPF_Parm )

void AController::WaitForLanding ( float waitDuration )
{
	static UFunction* pFnWaitForLanding = NULL;

	if ( ! pFnWaitForLanding )
		pFnWaitForLanding = (UFunction*) UObject::GObjObjects()->Data[ 8275 ];

	AController_execWaitForLanding_Parms WaitForLanding_Parms;
	WaitForLanding_Parms.waitDuration = waitDuration;

	unsigned short NativeIndex = pFnWaitForLanding->iNative;
	pFnWaitForLanding->iNative = 0;

	pFnWaitForLanding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWaitForLanding, &WaitForLanding_Parms, NULL );

	pFnWaitForLanding->FunctionFlags |= 0x400;

	pFnWaitForLanding->iNative = NativeIndex;
};

// Function Engine.Controller.PickWallAdjust
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x020E]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool AController::PickWallAdjust ( struct FVector HitNormal )
{
	static UFunction* pFnPickWallAdjust = NULL;

	if ( ! pFnPickWallAdjust )
		pFnPickWallAdjust = (UFunction*) UObject::GObjObjects()->Data[ 8272 ];

	AController_execPickWallAdjust_Parms PickWallAdjust_Parms;
	memcpy ( &PickWallAdjust_Parms.HitNormal, &HitNormal, 0xC );

	unsigned short NativeIndex = pFnPickWallAdjust->iNative;
	pFnPickWallAdjust->iNative = 0;

	pFnPickWallAdjust->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPickWallAdjust, &PickWallAdjust_Parms, NULL );

	pFnPickWallAdjust->FunctionFlags |= 0x400;

	pFnPickWallAdjust->iNative = NativeIndex;

	return PickWallAdjust_Parms.ReturnValue;
};

// Function Engine.Controller.MoveUnreachable
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FVector                 AttemptedDest                  ( CPF_Parm )
// class AActor*                  AttemptedTarget                ( CPF_Parm )

void AController::eventMoveUnreachable ( struct FVector AttemptedDest, class AActor* AttemptedTarget )
{
	static UFunction* pFnMoveUnreachable = NULL;

	if ( ! pFnMoveUnreachable )
		pFnMoveUnreachable = (UFunction*) UObject::GObjObjects()->Data[ 8269 ];

	AController_eventMoveUnreachable_Parms MoveUnreachable_Parms;
	memcpy ( &MoveUnreachable_Parms.AttemptedDest, &AttemptedDest, 0xC );
	MoveUnreachable_Parms.AttemptedTarget = AttemptedTarget;

	this->ProcessEvent ( pFnMoveUnreachable, &MoveUnreachable_Parms, NULL );
};

// Function Engine.Controller.ActorReachable
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0208]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  anActor                        ( CPF_Parm )

bool AController::ActorReachable ( class AActor* anActor )
{
	static UFunction* pFnActorReachable = NULL;

	if ( ! pFnActorReachable )
		pFnActorReachable = (UFunction*) UObject::GObjObjects()->Data[ 8266 ];

	AController_execActorReachable_Parms ActorReachable_Parms;
	ActorReachable_Parms.anActor = anActor;

	unsigned short NativeIndex = pFnActorReachable->iNative;
	pFnActorReachable->iNative = 0;

	pFnActorReachable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActorReachable, &ActorReachable_Parms, NULL );

	pFnActorReachable->FunctionFlags |= 0x400;

	pFnActorReachable->iNative = NativeIndex;

	return ActorReachable_Parms.ReturnValue;
};

// Function Engine.Controller.PointReachable
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0209]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 aPoint                         ( CPF_Parm )

bool AController::PointReachable ( struct FVector aPoint )
{
	static UFunction* pFnPointReachable = NULL;

	if ( ! pFnPointReachable )
		pFnPointReachable = (UFunction*) UObject::GObjObjects()->Data[ 8263 ];

	AController_execPointReachable_Parms PointReachable_Parms;
	memcpy ( &PointReachable_Parms.aPoint, &aPoint, 0xC );

	unsigned short NativeIndex = pFnPointReachable->iNative;
	pFnPointReachable->iNative = 0;

	pFnPointReachable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPointReachable, &PointReachable_Parms, NULL );

	pFnPointReachable->FunctionFlags |= 0x400;

	pFnPointReachable->iNative = NativeIndex;

	return PointReachable_Parms.ReturnValue;
};

// Function Engine.Controller.FindPathToIntercept
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// class AActor*                  InRouteGoal                    ( CPF_Parm )
// unsigned long                  bWeightDetours                 ( CPF_OptionalParm | CPF_Parm )
// int                            MaxPathLength                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )

class AActor* AController::FindPathToIntercept ( class APawn* P, class AActor* InRouteGoal, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial )
{
	static UFunction* pFnFindPathToIntercept = NULL;

	if ( ! pFnFindPathToIntercept )
		pFnFindPathToIntercept = (UFunction*) UObject::GObjObjects()->Data[ 8256 ];

	AController_execFindPathToIntercept_Parms FindPathToIntercept_Parms;
	FindPathToIntercept_Parms.P = P;
	FindPathToIntercept_Parms.InRouteGoal = InRouteGoal;
	FindPathToIntercept_Parms.bWeightDetours = bWeightDetours;
	FindPathToIntercept_Parms.MaxPathLength = MaxPathLength;
	FindPathToIntercept_Parms.bReturnPartial = bReturnPartial;

	pFnFindPathToIntercept->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPathToIntercept, &FindPathToIntercept_Parms, NULL );

	pFnFindPathToIntercept->FunctionFlags |= 0x400;

	return FindPathToIntercept_Parms.ReturnValue;
};

// Function Engine.Controller.FindRandomDest
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x020D]
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ANavigationPoint* AController::FindRandomDest ( )
{
	static UFunction* pFnFindRandomDest = NULL;

	if ( ! pFnFindRandomDest )
		pFnFindRandomDest = (UFunction*) UObject::GObjObjects()->Data[ 8254 ];

	AController_execFindRandomDest_Parms FindRandomDest_Parms;

	unsigned short NativeIndex = pFnFindRandomDest->iNative;
	pFnFindRandomDest->iNative = 0;

	pFnFindRandomDest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindRandomDest, &FindRandomDest_Parms, NULL );

	pFnFindRandomDest->FunctionFlags |= 0x400;

	pFnFindRandomDest->iNative = NativeIndex;

	return FindRandomDest_Parms.ReturnValue;
};

// Function Engine.Controller.FindPathTowardNearest
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  GoalClass                      ( CPF_Parm )
// unsigned long                  bWeightDetours                 ( CPF_OptionalParm | CPF_Parm )
// int                            MaxPathLength                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )

class AActor* AController::FindPathTowardNearest ( class UClass* GoalClass, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial )
{
	static UFunction* pFnFindPathTowardNearest = NULL;

	if ( ! pFnFindPathTowardNearest )
		pFnFindPathTowardNearest = (UFunction*) UObject::GObjObjects()->Data[ 8248 ];

	AController_execFindPathTowardNearest_Parms FindPathTowardNearest_Parms;
	FindPathTowardNearest_Parms.GoalClass = GoalClass;
	FindPathTowardNearest_Parms.bWeightDetours = bWeightDetours;
	FindPathTowardNearest_Parms.MaxPathLength = MaxPathLength;
	FindPathTowardNearest_Parms.bReturnPartial = bReturnPartial;

	pFnFindPathTowardNearest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPathTowardNearest, &FindPathTowardNearest_Parms, NULL );

	pFnFindPathTowardNearest->FunctionFlags |= 0x400;

	return FindPathTowardNearest_Parms.ReturnValue;
};

// Function Engine.Controller.FindPathToward
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x0205]
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  anActor                        ( CPF_Parm )
// unsigned long                  bWeightDetours                 ( CPF_OptionalParm | CPF_Parm )
// int                            MaxPathLength                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )

class AActor* AController::FindPathToward ( class AActor* anActor, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial )
{
	static UFunction* pFnFindPathToward = NULL;

	if ( ! pFnFindPathToward )
		pFnFindPathToward = (UFunction*) UObject::GObjObjects()->Data[ 8242 ];

	AController_execFindPathToward_Parms FindPathToward_Parms;
	FindPathToward_Parms.anActor = anActor;
	FindPathToward_Parms.bWeightDetours = bWeightDetours;
	FindPathToward_Parms.MaxPathLength = MaxPathLength;
	FindPathToward_Parms.bReturnPartial = bReturnPartial;

	unsigned short NativeIndex = pFnFindPathToward->iNative;
	pFnFindPathToward->iNative = 0;

	pFnFindPathToward->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPathToward, &FindPathToward_Parms, NULL );

	pFnFindPathToward->FunctionFlags |= 0x400;

	pFnFindPathToward->iNative = NativeIndex;

	return FindPathToward_Parms.ReturnValue;
};

// Function Engine.Controller.FindPathTo
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x0206]
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 aPoint                         ( CPF_Parm )
// int                            MaxPathLength                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )

class AActor* AController::FindPathTo ( struct FVector aPoint, int MaxPathLength, unsigned long bReturnPartial )
{
	static UFunction* pFnFindPathTo = NULL;

	if ( ! pFnFindPathTo )
		pFnFindPathTo = (UFunction*) UObject::GObjObjects()->Data[ 8237 ];

	AController_execFindPathTo_Parms FindPathTo_Parms;
	memcpy ( &FindPathTo_Parms.aPoint, &aPoint, 0xC );
	FindPathTo_Parms.MaxPathLength = MaxPathLength;
	FindPathTo_Parms.bReturnPartial = bReturnPartial;

	unsigned short NativeIndex = pFnFindPathTo->iNative;
	pFnFindPathTo->iNative = 0;

	pFnFindPathTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPathTo, &FindPathTo_Parms, NULL );

	pFnFindPathTo->FunctionFlags |= 0x400;

	pFnFindPathTo->iNative = NativeIndex;

	return FindPathTo_Parms.ReturnValue;
};

// Function Engine.Controller.FinishRotation
// [0x00020409] ( FUNC_Final | FUNC_Native ) iNative [0x01FC]
// Parameters infos:

void AController::FinishRotation ( )
{
	static UFunction* pFnFinishRotation = NULL;

	if ( ! pFnFinishRotation )
		pFnFinishRotation = (UFunction*) UObject::GObjObjects()->Data[ 8236 ];

	AController_execFinishRotation_Parms FinishRotation_Parms;

	unsigned short NativeIndex = pFnFinishRotation->iNative;
	pFnFinishRotation->iNative = 0;

	pFnFinishRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFinishRotation, &FinishRotation_Parms, NULL );

	pFnFinishRotation->FunctionFlags |= 0x400;

	pFnFinishRotation->iNative = NativeIndex;
};

// Function Engine.Controller.SetupSpecialPathAbilities
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventSetupSpecialPathAbilities ( )
{
	static UFunction* pFnSetupSpecialPathAbilities = NULL;

	if ( ! pFnSetupSpecialPathAbilities )
		pFnSetupSpecialPathAbilities = (UFunction*) UObject::GObjObjects()->Data[ 8235 ];

	AController_eventSetupSpecialPathAbilities_Parms SetupSpecialPathAbilities_Parms;

	this->ProcessEvent ( pFnSetupSpecialPathAbilities, &SetupSpecialPathAbilities_Parms, NULL );
};

// Function Engine.Controller.BioOnPawnActionStateChanged
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AController::BioOnPawnActionStateChanged ( )
{
	static UFunction* pFnBioOnPawnActionStateChanged = NULL;

	if ( ! pFnBioOnPawnActionStateChanged )
		pFnBioOnPawnActionStateChanged = (UFunction*) UObject::GObjObjects()->Data[ 8234 ];

	AController_execBioOnPawnActionStateChanged_Parms BioOnPawnActionStateChanged_Parms;

	pFnBioOnPawnActionStateChanged->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioOnPawnActionStateChanged, &BioOnPawnActionStateChanged_Parms, NULL );

	pFnBioOnPawnActionStateChanged->FunctionFlags |= 0x400;
};

// Function Engine.Controller.MoveToward
// [0x00024409] ( FUNC_Final | FUNC_Native ) iNative [0x01F6]
// Parameters infos:
// class AActor*                  NewTarget                      ( CPF_Parm )
// class AActor*                  ViewFocus                      ( CPF_OptionalParm | CPF_Parm )
// float                          DestinationOffset              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUseStrafing                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldWalk                    ( CPF_OptionalParm | CPF_Parm )

void AController::MoveToward ( class AActor* NewTarget, class AActor* ViewFocus, float DestinationOffset, unsigned long bUseStrafing, unsigned long bShouldWalk )
{
	static UFunction* pFnMoveToward = NULL;

	if ( ! pFnMoveToward )
		pFnMoveToward = (UFunction*) UObject::GObjObjects()->Data[ 8228 ];

	AController_execMoveToward_Parms MoveToward_Parms;
	MoveToward_Parms.NewTarget = NewTarget;
	MoveToward_Parms.ViewFocus = ViewFocus;
	MoveToward_Parms.DestinationOffset = DestinationOffset;
	MoveToward_Parms.bUseStrafing = bUseStrafing;
	MoveToward_Parms.bShouldWalk = bShouldWalk;

	unsigned short NativeIndex = pFnMoveToward->iNative;
	pFnMoveToward->iNative = 0;

	pFnMoveToward->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveToward, &MoveToward_Parms, NULL );

	pFnMoveToward->FunctionFlags |= 0x400;

	pFnMoveToward->iNative = NativeIndex;
};

// Function Engine.Controller.MoveToDirectNonPathPos
// [0x00024409] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewDestination                 ( CPF_Parm )
// class AActor*                  ViewFocus                      ( CPF_OptionalParm | CPF_Parm )
// float                          DestinationOffset              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldWalk                    ( CPF_OptionalParm | CPF_Parm )

void AController::MoveToDirectNonPathPos ( struct FVector NewDestination, class AActor* ViewFocus, float DestinationOffset, unsigned long bShouldWalk )
{
	static UFunction* pFnMoveToDirectNonPathPos = NULL;

	if ( ! pFnMoveToDirectNonPathPos )
		pFnMoveToDirectNonPathPos = (UFunction*) UObject::GObjObjects()->Data[ 8223 ];

	AController_execMoveToDirectNonPathPos_Parms MoveToDirectNonPathPos_Parms;
	memcpy ( &MoveToDirectNonPathPos_Parms.NewDestination, &NewDestination, 0xC );
	MoveToDirectNonPathPos_Parms.ViewFocus = ViewFocus;
	MoveToDirectNonPathPos_Parms.DestinationOffset = DestinationOffset;
	MoveToDirectNonPathPos_Parms.bShouldWalk = bShouldWalk;

	pFnMoveToDirectNonPathPos->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveToDirectNonPathPos, &MoveToDirectNonPathPos_Parms, NULL );

	pFnMoveToDirectNonPathPos->FunctionFlags |= 0x400;
};

// Function Engine.Controller.MoveTo
// [0x00024409] ( FUNC_Final | FUNC_Native ) iNative [0x01F4]
// Parameters infos:
// struct FVector                 NewDestination                 ( CPF_Parm )
// class AActor*                  ViewFocus                      ( CPF_OptionalParm | CPF_Parm )
// float                          DestinationOffset              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldWalk                    ( CPF_OptionalParm | CPF_Parm )

void AController::MoveTo ( struct FVector NewDestination, class AActor* ViewFocus, float DestinationOffset, unsigned long bShouldWalk )
{
	static UFunction* pFnMoveTo = NULL;

	if ( ! pFnMoveTo )
		pFnMoveTo = (UFunction*) UObject::GObjObjects()->Data[ 8217 ];

	AController_execMoveTo_Parms MoveTo_Parms;
	memcpy ( &MoveTo_Parms.NewDestination, &NewDestination, 0xC );
	MoveTo_Parms.ViewFocus = ViewFocus;
	MoveTo_Parms.DestinationOffset = DestinationOffset;
	MoveTo_Parms.bShouldWalk = bShouldWalk;

	unsigned short NativeIndex = pFnMoveTo->iNative;
	pFnMoveTo->iNative = 0;

	pFnMoveTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveTo, &MoveTo_Parms, NULL );

	pFnMoveTo->FunctionFlags |= 0x400;

	pFnMoveTo->iNative = NativeIndex;
};

// Function Engine.Controller.EnemyNotVisible
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventEnemyNotVisible ( )
{
	static UFunction* pFnEnemyNotVisible = NULL;

	if ( ! pFnEnemyNotVisible )
		pFnEnemyNotVisible = (UFunction*) UObject::GObjObjects()->Data[ 8216 ];

	AController_eventEnemyNotVisible_Parms EnemyNotVisible_Parms;

	this->ProcessEvent ( pFnEnemyNotVisible, &EnemyNotVisible_Parms, NULL );
};

// Function Engine.Controller.GetNextPredictedMoveLocation
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 out_vLoc                       ( CPF_Parm | CPF_OutParm )

bool AController::eventGetNextPredictedMoveLocation ( struct FVector* out_vLoc )
{
	static UFunction* pFnGetNextPredictedMoveLocation = NULL;

	if ( ! pFnGetNextPredictedMoveLocation )
		pFnGetNextPredictedMoveLocation = (UFunction*) UObject::GObjObjects()->Data[ 8213 ];

	AController_eventGetNextPredictedMoveLocation_Parms GetNextPredictedMoveLocation_Parms;

	this->ProcessEvent ( pFnGetNextPredictedMoveLocation, &GetNextPredictedMoveLocation_Parms, NULL );

	if ( out_vLoc )
		memcpy ( out_vLoc, &GetNextPredictedMoveLocation_Parms.out_vLoc, 0xC );

	return GetNextPredictedMoveLocation_Parms.ReturnValue;
};

// Function Engine.Controller.SeeMonster
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   Seen                           ( CPF_Parm )

void AController::eventSeeMonster ( class APawn* Seen )
{
	static UFunction* pFnSeeMonster = NULL;

	if ( ! pFnSeeMonster )
		pFnSeeMonster = (UFunction*) UObject::GObjObjects()->Data[ 8211 ];

	AController_eventSeeMonster_Parms SeeMonster_Parms;
	SeeMonster_Parms.Seen = Seen;

	this->ProcessEvent ( pFnSeeMonster, &SeeMonster_Parms, NULL );
};

// Function Engine.Controller.SeePlayer
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   Seen                           ( CPF_Parm )

void AController::eventSeePlayer ( class APawn* Seen )
{
	static UFunction* pFnSeePlayer = NULL;

	if ( ! pFnSeePlayer )
		pFnSeePlayer = (UFunction*) UObject::GObjObjects()->Data[ 8209 ];

	AController_eventSeePlayer_Parms SeePlayer_Parms;
	SeePlayer_Parms.Seen = Seen;

	this->ProcessEvent ( pFnSeePlayer, &SeePlayer_Parms, NULL );
};

// Function Engine.Controller.HearNoise
// [0x00024800] ( FUNC_Event )
// Parameters infos:
// float                          Loudness                       ( CPF_Parm )
// class AActor*                  NoiseMaker                     ( CPF_Parm )
// struct FVector                 vNoiseLocation                 ( CPF_Parm )
// struct FName                   NoiseType                      ( CPF_OptionalParm | CPF_Parm )

void AController::eventHearNoise ( float Loudness, class AActor* NoiseMaker, struct FVector vNoiseLocation, struct FName NoiseType )
{
	static UFunction* pFnHearNoise = NULL;

	if ( ! pFnHearNoise )
		pFnHearNoise = (UFunction*) UObject::GObjObjects()->Data[ 8204 ];

	AController_eventHearNoise_Parms HearNoise_Parms;
	HearNoise_Parms.Loudness = Loudness;
	HearNoise_Parms.NoiseMaker = NoiseMaker;
	memcpy ( &HearNoise_Parms.vNoiseLocation, &vNoiseLocation, 0xC );
	memcpy ( &HearNoise_Parms.NoiseType, &NoiseType, 0x8 );

	this->ProcessEvent ( pFnHearNoise, &HearNoise_Parms, NULL );
};

// Function Engine.Controller.PickTarget
// [0x00420401] ( FUNC_Final | FUNC_Native ) iNative [0x0213]
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  TargetClass                    ( CPF_Parm )
// struct FVector                 FireDir                        ( CPF_Parm )
// struct FVector                 projStart                      ( CPF_Parm )
// float                          MaxRange                       ( CPF_Parm )
// float                          bestAim                        ( CPF_Parm | CPF_OutParm )
// float                          bestDist                       ( CPF_Parm | CPF_OutParm )

class APawn* AController::PickTarget ( class UClass* TargetClass, struct FVector FireDir, struct FVector projStart, float MaxRange, float* bestAim, float* bestDist )
{
	static UFunction* pFnPickTarget = NULL;

	if ( ! pFnPickTarget )
		pFnPickTarget = (UFunction*) UObject::GObjObjects()->Data[ 8196 ];

	AController_execPickTarget_Parms PickTarget_Parms;
	PickTarget_Parms.TargetClass = TargetClass;
	memcpy ( &PickTarget_Parms.FireDir, &FireDir, 0xC );
	memcpy ( &PickTarget_Parms.projStart, &projStart, 0xC );
	PickTarget_Parms.MaxRange = MaxRange;

	unsigned short NativeIndex = pFnPickTarget->iNative;
	pFnPickTarget->iNative = 0;

	pFnPickTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPickTarget, &PickTarget_Parms, NULL );

	pFnPickTarget->FunctionFlags |= 0x400;

	pFnPickTarget->iNative = NativeIndex;

	if ( bestAim )
		*bestAim = PickTarget_Parms.bestAim;

	if ( bestDist )
		*bestDist = PickTarget_Parms.bestDist;

	return PickTarget_Parms.ReturnValue;
};

// Function Engine.Controller.CanSeeByPoints
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0219]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 ViewLocation                   ( CPF_Parm )
// struct FVector                 TestLocation                   ( CPF_Parm )
// struct FRotator                ViewRotation                   ( CPF_Parm )

bool AController::CanSeeByPoints ( struct FVector ViewLocation, struct FVector TestLocation, struct FRotator ViewRotation )
{
	static UFunction* pFnCanSeeByPoints = NULL;

	if ( ! pFnCanSeeByPoints )
		pFnCanSeeByPoints = (UFunction*) UObject::GObjObjects()->Data[ 8191 ];

	AController_execCanSeeByPoints_Parms CanSeeByPoints_Parms;
	memcpy ( &CanSeeByPoints_Parms.ViewLocation, &ViewLocation, 0xC );
	memcpy ( &CanSeeByPoints_Parms.TestLocation, &TestLocation, 0xC );
	memcpy ( &CanSeeByPoints_Parms.ViewRotation, &ViewRotation, 0xC );

	unsigned short NativeIndex = pFnCanSeeByPoints->iNative;
	pFnCanSeeByPoints->iNative = 0;

	pFnCanSeeByPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanSeeByPoints, &CanSeeByPoints_Parms, NULL );

	pFnCanSeeByPoints->FunctionFlags |= 0x400;

	pFnCanSeeByPoints->iNative = NativeIndex;

	return CanSeeByPoints_Parms.ReturnValue;
};

// Function Engine.Controller.CanSee
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0215]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool AController::CanSee ( class APawn* Other )
{
	static UFunction* pFnCanSee = NULL;

	if ( ! pFnCanSee )
		pFnCanSee = (UFunction*) UObject::GObjObjects()->Data[ 8188 ];

	AController_execCanSee_Parms CanSee_Parms;
	CanSee_Parms.Other = Other;

	unsigned short NativeIndex = pFnCanSee->iNative;
	pFnCanSee->iNative = 0;

	pFnCanSee->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanSee, &CanSee_Parms, NULL );

	pFnCanSee->FunctionFlags |= 0x400;

	pFnCanSee->iNative = NativeIndex;

	return CanSee_Parms.ReturnValue;
};

// Function Engine.Controller.LineOfSightTo
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x0202]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 chkLocation                    ( CPF_OptionalParm | CPF_Parm )

bool AController::LineOfSightTo ( class AActor* Other, struct FVector chkLocation )
{
	static UFunction* pFnLineOfSightTo = NULL;

	if ( ! pFnLineOfSightTo )
		pFnLineOfSightTo = (UFunction*) UObject::GObjObjects()->Data[ 8184 ];

	AController_execLineOfSightTo_Parms LineOfSightTo_Parms;
	LineOfSightTo_Parms.Other = Other;
	memcpy ( &LineOfSightTo_Parms.chkLocation, &chkLocation, 0xC );

	unsigned short NativeIndex = pFnLineOfSightTo->iNative;
	pFnLineOfSightTo->iNative = 0;

	pFnLineOfSightTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLineOfSightTo, &LineOfSightTo_Parms, NULL );

	pFnLineOfSightTo->FunctionFlags |= 0x400;

	pFnLineOfSightTo->iNative = NativeIndex;

	return LineOfSightTo_Parms.ReturnValue;
};

// Function Engine.Controller.NotifyChangedWeapon
// [0x00020000] 
// Parameters infos:
// class AWeapon*                 PrevWeapon                     ( CPF_Parm )
// class AWeapon*                 NewWeapon                      ( CPF_Parm )

void AController::NotifyChangedWeapon ( class AWeapon* PrevWeapon, class AWeapon* NewWeapon )
{
	static UFunction* pFnNotifyChangedWeapon = NULL;

	if ( ! pFnNotifyChangedWeapon )
		pFnNotifyChangedWeapon = (UFunction*) UObject::GObjObjects()->Data[ 8181 ];

	AController_execNotifyChangedWeapon_Parms NotifyChangedWeapon_Parms;
	NotifyChangedWeapon_Parms.PrevWeapon = PrevWeapon;
	NotifyChangedWeapon_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnNotifyChangedWeapon, &NotifyChangedWeapon_Parms, NULL );
};

// Function Engine.Controller.ClientSetWeapon
// [0x010201C2] 
// Parameters infos:
// class UClass*                  WeaponClass                    ( CPF_Parm )

void AController::ClientSetWeapon ( class UClass* WeaponClass )
{
	static UFunction* pFnClientSetWeapon = NULL;

	if ( ! pFnClientSetWeapon )
		pFnClientSetWeapon = (UFunction*) UObject::GObjObjects()->Data[ 8176 ];

	AController_execClientSetWeapon_Parms ClientSetWeapon_Parms;
	ClientSetWeapon_Parms.WeaponClass = WeaponClass;

	this->ProcessEvent ( pFnClientSetWeapon, &ClientSetWeapon_Parms, NULL );
};

// Function Engine.Controller.ClientSwitchToBestWeapon
// [0x010241C2] 
// Parameters infos:
// unsigned long                  bForceNewWeapon                ( CPF_OptionalParm | CPF_Parm )

void AController::ClientSwitchToBestWeapon ( unsigned long bForceNewWeapon )
{
	static UFunction* pFnClientSwitchToBestWeapon = NULL;

	if ( ! pFnClientSwitchToBestWeapon )
		pFnClientSwitchToBestWeapon = (UFunction*) UObject::GObjObjects()->Data[ 8174 ];

	AController_execClientSwitchToBestWeapon_Parms ClientSwitchToBestWeapon_Parms;
	ClientSwitchToBestWeapon_Parms.bForceNewWeapon = bForceNewWeapon;

	this->ProcessEvent ( pFnClientSwitchToBestWeapon, &ClientSwitchToBestWeapon_Parms, NULL );
};

// Function Engine.Controller.SwitchToBestWeapon
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bForceNewWeapon                ( CPF_OptionalParm | CPF_Parm )

void AController::SwitchToBestWeapon ( unsigned long bForceNewWeapon )
{
	static UFunction* pFnSwitchToBestWeapon = NULL;

	if ( ! pFnSwitchToBestWeapon )
		pFnSwitchToBestWeapon = (UFunction*) UObject::GObjObjects()->Data[ 8172 ];

	AController_execSwitchToBestWeapon_Parms SwitchToBestWeapon_Parms;
	SwitchToBestWeapon_Parms.bForceNewWeapon = bForceNewWeapon;

	this->ProcessEvent ( pFnSwitchToBestWeapon, &SwitchToBestWeapon_Parms, NULL );
};

// Function Engine.Controller.ReceiveProjectileWarning
// [0x00020000] 
// Parameters infos:
// class AProjectile*             Proj                           ( CPF_Parm )

void AController::ReceiveProjectileWarning ( class AProjectile* Proj )
{
	static UFunction* pFnReceiveProjectileWarning = NULL;

	if ( ! pFnReceiveProjectileWarning )
		pFnReceiveProjectileWarning = (UFunction*) UObject::GObjObjects()->Data[ 8170 ];

	AController_execReceiveProjectileWarning_Parms ReceiveProjectileWarning_Parms;
	ReceiveProjectileWarning_Parms.Proj = Proj;

	this->ProcessEvent ( pFnReceiveProjectileWarning, &ReceiveProjectileWarning_Parms, NULL );
};

// Function Engine.Controller.ReceiveWarning
// [0x00020000] 
// Parameters infos:
// class APawn*                   Shooter                        ( CPF_Parm )
// float                          projSpeed                      ( CPF_Parm )
// struct FVector                 FireDir                        ( CPF_Parm )

void AController::ReceiveWarning ( class APawn* Shooter, float projSpeed, struct FVector FireDir )
{
	static UFunction* pFnReceiveWarning = NULL;

	if ( ! pFnReceiveWarning )
		pFnReceiveWarning = (UFunction*) UObject::GObjObjects()->Data[ 8166 ];

	AController_execReceiveWarning_Parms ReceiveWarning_Parms;
	ReceiveWarning_Parms.Shooter = Shooter;
	ReceiveWarning_Parms.projSpeed = projSpeed;
	memcpy ( &ReceiveWarning_Parms.FireDir, &FireDir, 0xC );

	this->ProcessEvent ( pFnReceiveWarning, &ReceiveWarning_Parms, NULL );
};

// Function Engine.Controller.CheckNearMiss
// [0x00020000] 
// Parameters infos:
// class APawn*                   Shooter                        ( CPF_Parm )
// class AWeapon*                 W                              ( CPF_Parm )
// struct FVector                 WeapLoc                        ( CPF_Parm )
// struct FVector                 LineDir                        ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void AController::CheckNearMiss ( class APawn* Shooter, class AWeapon* W, struct FVector WeapLoc, struct FVector LineDir, struct FVector HitLocation )
{
	static UFunction* pFnCheckNearMiss = NULL;

	if ( ! pFnCheckNearMiss )
		pFnCheckNearMiss = (UFunction*) UObject::GObjObjects()->Data[ 8160 ];

	AController_execCheckNearMiss_Parms CheckNearMiss_Parms;
	CheckNearMiss_Parms.Shooter = Shooter;
	CheckNearMiss_Parms.W = W;
	memcpy ( &CheckNearMiss_Parms.WeapLoc, &WeapLoc, 0xC );
	memcpy ( &CheckNearMiss_Parms.LineDir, &LineDir, 0xC );
	memcpy ( &CheckNearMiss_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnCheckNearMiss, &CheckNearMiss_Parms, NULL );
};

// Function Engine.Controller.InstantWarnTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  InTarget                       ( CPF_Parm )
// class AWeapon*                 FiredWeapon                    ( CPF_Parm )
// struct FVector                 FireDir                        ( CPF_Parm )

void AController::InstantWarnTarget ( class AActor* InTarget, class AWeapon* FiredWeapon, struct FVector FireDir )
{
	static UFunction* pFnInstantWarnTarget = NULL;

	if ( ! pFnInstantWarnTarget )
		pFnInstantWarnTarget = (UFunction*) UObject::GObjObjects()->Data[ 8155 ];

	AController_execInstantWarnTarget_Parms InstantWarnTarget_Parms;
	InstantWarnTarget_Parms.InTarget = InTarget;
	InstantWarnTarget_Parms.FiredWeapon = FiredWeapon;
	memcpy ( &InstantWarnTarget_Parms.FireDir, &FireDir, 0xC );

	this->ProcessEvent ( pFnInstantWarnTarget, &InstantWarnTarget_Parms, NULL );
};

// Function Engine.Controller.GetAdjustedAimFor
// [0x00020002] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 W                              ( CPF_Parm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator AController::GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAimFor = NULL;

	if ( ! pFnGetAdjustedAimFor )
		pFnGetAdjustedAimFor = (UFunction*) UObject::GObjObjects()->Data[ 8149 ];

	AController_execGetAdjustedAimFor_Parms GetAdjustedAimFor_Parms;
	GetAdjustedAimFor_Parms.W = W;
	memcpy ( &GetAdjustedAimFor_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAimFor, &GetAdjustedAimFor_Parms, NULL );

	return GetAdjustedAimFor_Parms.ReturnValue;
};

// Function Engine.Controller.HandlePickup
// [0x00020000] 
// Parameters infos:
// class AInventory*              Inv                            ( CPF_Parm )

void AController::HandlePickup ( class AInventory* Inv )
{
	static UFunction* pFnHandlePickup = NULL;

	if ( ! pFnHandlePickup )
		pFnHandlePickup = (UFunction*) UObject::GObjObjects()->Data[ 8147 ];

	AController_execHandlePickup_Parms HandlePickup_Parms;
	HandlePickup_Parms.Inv = Inv;

	this->ProcessEvent ( pFnHandlePickup, &HandlePickup_Parms, NULL );
};

// Function Engine.Controller.RoundHasEnded
// [0x00024002] 
// Parameters infos:
// class AActor*                  EndRoundFocus                  ( CPF_OptionalParm | CPF_Parm )

void AController::RoundHasEnded ( class AActor* EndRoundFocus )
{
	static UFunction* pFnRoundHasEnded = NULL;

	if ( ! pFnRoundHasEnded )
		pFnRoundHasEnded = (UFunction*) UObject::GObjObjects()->Data[ 8145 ];

	AController_execRoundHasEnded_Parms RoundHasEnded_Parms;
	RoundHasEnded_Parms.EndRoundFocus = EndRoundFocus;

	this->ProcessEvent ( pFnRoundHasEnded, &RoundHasEnded_Parms, NULL );
};

// Function Engine.Controller.StopFiring
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AController::eventStopFiring ( )
{
	static UFunction* pFnStopFiring = NULL;

	if ( ! pFnStopFiring )
		pFnStopFiring = (UFunction*) UObject::GObjObjects()->Data[ 8141 ];

	AController_eventStopFiring_Parms StopFiring_Parms;

	this->ProcessEvent ( pFnStopFiring, &StopFiring_Parms, NULL );
};

// Function Engine.Controller.FireWeaponAt
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  inActor                        ( CPF_Parm )

bool AController::FireWeaponAt ( class AActor* inActor )
{
	static UFunction* pFnFireWeaponAt = NULL;

	if ( ! pFnFireWeaponAt )
		pFnFireWeaponAt = (UFunction*) UObject::GObjObjects()->Data[ 8138 ];

	AController_execFireWeaponAt_Parms FireWeaponAt_Parms;
	FireWeaponAt_Parms.inActor = inActor;

	this->ProcessEvent ( pFnFireWeaponAt, &FireWeaponAt_Parms, NULL );

	return FireWeaponAt_Parms.ReturnValue;
};

// Function Engine.Controller.RatePickup
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  PickupHolder                   ( CPF_Parm )
// class UClass*                  inPickup                       ( CPF_Parm )

float AController::eventRatePickup ( class AActor* PickupHolder, class UClass* inPickup )
{
	static UFunction* pFnRatePickup = NULL;

	if ( ! pFnRatePickup )
		pFnRatePickup = (UFunction*) UObject::GObjObjects()->Data[ 8134 ];

	AController_eventRatePickup_Parms RatePickup_Parms;
	RatePickup_Parms.PickupHolder = PickupHolder;
	RatePickup_Parms.inPickup = inPickup;

	this->ProcessEvent ( pFnRatePickup, &RatePickup_Parms, NULL );

	return RatePickup_Parms.ReturnValue;
};

// Function Engine.Controller.WarnProjExplode
// [0x00020000] 
// Parameters infos:
// class AProjectile*             Proj                           ( CPF_Parm )

void AController::WarnProjExplode ( class AProjectile* Proj )
{
	static UFunction* pFnWarnProjExplode = NULL;

	if ( ! pFnWarnProjExplode )
		pFnWarnProjExplode = (UFunction*) UObject::GObjObjects()->Data[ 8132 ];

	AController_execWarnProjExplode_Parms WarnProjExplode_Parms;
	WarnProjExplode_Parms.Proj = Proj;

	this->ProcessEvent ( pFnWarnProjExplode, &WarnProjExplode_Parms, NULL );
};

// Function Engine.Controller.NotifyProjLanded
// [0x00020002] 
// Parameters infos:
// class AProjectile*             Proj                           ( CPF_Parm )

void AController::NotifyProjLanded ( class AProjectile* Proj )
{
	static UFunction* pFnNotifyProjLanded = NULL;

	if ( ! pFnNotifyProjLanded )
		pFnNotifyProjLanded = (UFunction*) UObject::GObjObjects()->Data[ 8130 ];

	AController_execNotifyProjLanded_Parms NotifyProjLanded_Parms;
	NotifyProjLanded_Parms.Proj = Proj;

	this->ProcessEvent ( pFnNotifyProjLanded, &NotifyProjLanded_Parms, NULL );
};

// Function Engine.Controller.NotifyKilled
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Killed                         ( CPF_Parm )
// class APawn*                   KilledPawn                     ( CPF_Parm )

void AController::NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn )
{
	static UFunction* pFnNotifyKilled = NULL;

	if ( ! pFnNotifyKilled )
		pFnNotifyKilled = (UFunction*) UObject::GObjObjects()->Data[ 8126 ];

	AController_execNotifyKilled_Parms NotifyKilled_Parms;
	NotifyKilled_Parms.Killer = Killer;
	NotifyKilled_Parms.Killed = Killed;
	NotifyKilled_Parms.KilledPawn = KilledPawn;

	this->ProcessEvent ( pFnNotifyKilled, &NotifyKilled_Parms, NULL );
};

// Function Engine.Controller.GameHasEnded
// [0x00024002] 
// Parameters infos:
// class AActor*                  EndGameFocus                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIsWinner                      ( CPF_OptionalParm | CPF_Parm )

void AController::GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner )
{
	static UFunction* pFnGameHasEnded = NULL;

	if ( ! pFnGameHasEnded )
		pFnGameHasEnded = (UFunction*) UObject::GObjObjects()->Data[ 8123 ];

	AController_execGameHasEnded_Parms GameHasEnded_Parms;
	GameHasEnded_Parms.EndGameFocus = EndGameFocus;
	GameHasEnded_Parms.bIsWinner = bIsWinner;

	this->ProcessEvent ( pFnGameHasEnded, &GameHasEnded_Parms, NULL );
};

// Function Engine.Controller.SetCharacter
// [0x00020000] 
// Parameters infos:
// struct FString                 inCharacter                    ( CPF_Parm | CPF_NeedCtorLink )

void AController::SetCharacter ( struct FString inCharacter )
{
	static UFunction* pFnSetCharacter = NULL;

	if ( ! pFnSetCharacter )
		pFnSetCharacter = (UFunction*) UObject::GObjObjects()->Data[ 8121 ];

	AController_execSetCharacter_Parms SetCharacter_Parms;
	memcpy ( &SetCharacter_Parms.inCharacter, &inCharacter, 0x10 );

	this->ProcessEvent ( pFnSetCharacter, &SetCharacter_Parms, NULL );
};

// Function Engine.Controller.ServerGivePawn
// [0x00020000] 
// Parameters infos:

void AController::ServerGivePawn ( )
{
	static UFunction* pFnServerGivePawn = NULL;

	if ( ! pFnServerGivePawn )
		pFnServerGivePawn = (UFunction*) UObject::GObjObjects()->Data[ 8120 ];

	AController_execServerGivePawn_Parms ServerGivePawn_Parms;

	this->ProcessEvent ( pFnServerGivePawn, &ServerGivePawn_Parms, NULL );
};

// Function Engine.Controller.ServerRestartPlayer
// [0x002200C2] 
// Parameters infos:

void AController::ServerRestartPlayer ( )
{
	static UFunction* pFnServerRestartPlayer = NULL;

	if ( ! pFnServerRestartPlayer )
		pFnServerRestartPlayer = (UFunction*) UObject::GObjObjects()->Data[ 8119 ];

	AController_execServerRestartPlayer_Parms ServerRestartPlayer_Parms;

	this->ProcessEvent ( pFnServerRestartPlayer, &ServerRestartPlayer_Parms, NULL );
};

// Function Engine.Controller.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AController::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = (UFunction*) UObject::GObjObjects()->Data[ 8117 ];

	AController_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.Controller.InitPlayerReplicationInfo
// [0x00020002] 
// Parameters infos:

void AController::InitPlayerReplicationInfo ( )
{
	static UFunction* pFnInitPlayerReplicationInfo = NULL;

	if ( ! pFnInitPlayerReplicationInfo )
		pFnInitPlayerReplicationInfo = (UFunction*) UObject::GObjObjects()->Data[ 8114 ];

	AController_execInitPlayerReplicationInfo_Parms InitPlayerReplicationInfo_Parms;

	this->ProcessEvent ( pFnInitPlayerReplicationInfo, &InitPlayerReplicationInfo_Parms, NULL );
};

// Function Engine.Controller.NotifyTakeHit
// [0x00020000] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void AController::NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 8108 ];

	AController_execNotifyTakeHit_Parms NotifyTakeHit_Parms;
	NotifyTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NotifyTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyTakeHit_Parms.Damage = Damage;
	NotifyTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function Engine.Controller.EnemyJustTeleported
// [0x00020002] 
// Parameters infos:

void AController::EnemyJustTeleported ( )
{
	static UFunction* pFnEnemyJustTeleported = NULL;

	if ( ! pFnEnemyJustTeleported )
		pFnEnemyJustTeleported = (UFunction*) UObject::GObjObjects()->Data[ 8107 ];

	AController_execEnemyJustTeleported_Parms EnemyJustTeleported_Parms;

	this->ProcessEvent ( pFnEnemyJustTeleported, &EnemyJustTeleported_Parms, NULL );
};

// Function Engine.Controller.BeyondFogDistance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 ViewPoint                      ( CPF_Parm )
// struct FVector                 OtherPoint                     ( CPF_Parm )

bool AController::BeyondFogDistance ( struct FVector ViewPoint, struct FVector OtherPoint )
{
	static UFunction* pFnBeyondFogDistance = NULL;

	if ( ! pFnBeyondFogDistance )
		pFnBeyondFogDistance = (UFunction*) UObject::GObjObjects()->Data[ 6999 ];

	AController_execBeyondFogDistance_Parms BeyondFogDistance_Parms;
	memcpy ( &BeyondFogDistance_Parms.ViewPoint, &ViewPoint, 0xC );
	memcpy ( &BeyondFogDistance_Parms.OtherPoint, &OtherPoint, 0xC );

	pFnBeyondFogDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBeyondFogDistance, &BeyondFogDistance_Parms, NULL );

	pFnBeyondFogDistance->FunctionFlags |= 0x400;

	return BeyondFogDistance_Parms.ReturnValue;
};

// Function Engine.Controller.Restart
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void AController::Restart ( unsigned long bVehicleTransition )
{
	static UFunction* pFnRestart = NULL;

	if ( ! pFnRestart )
		pFnRestart = (UFunction*) UObject::GObjObjects()->Data[ 8102 ];

	AController_execRestart_Parms Restart_Parms;
	Restart_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnRestart, &Restart_Parms, NULL );
};

// Function Engine.Controller.CleanupPRI
// [0x00020002] 
// Parameters infos:

void AController::CleanupPRI ( )
{
	static UFunction* pFnCleanupPRI = NULL;

	if ( ! pFnCleanupPRI )
		pFnCleanupPRI = (UFunction*) UObject::GObjObjects()->Data[ 8101 ];

	AController_execCleanupPRI_Parms CleanupPRI_Parms;

	this->ProcessEvent ( pFnCleanupPRI, &CleanupPRI_Parms, NULL );
};

// Function Engine.Controller.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AController::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 8098 ];

	AController_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Controller.NotifyPostLanded
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventNotifyPostLanded ( )
{
	static UFunction* pFnNotifyPostLanded = NULL;

	if ( ! pFnNotifyPostLanded )
		pFnNotifyPostLanded = (UFunction*) UObject::GObjObjects()->Data[ 8097 ];

	AController_eventNotifyPostLanded_Parms NotifyPostLanded_Parms;

	this->ProcessEvent ( pFnNotifyPostLanded, &NotifyPostLanded_Parms, NULL );
};

// Function Engine.Controller.GamePlayEndedState
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::GamePlayEndedState ( )
{
	static UFunction* pFnGamePlayEndedState = NULL;

	if ( ! pFnGamePlayEndedState )
		pFnGamePlayEndedState = (UFunction*) UObject::GObjObjects()->Data[ 8095 ];

	AController_execGamePlayEndedState_Parms GamePlayEndedState_Parms;

	this->ProcessEvent ( pFnGamePlayEndedState, &GamePlayEndedState_Parms, NULL );

	return GamePlayEndedState_Parms.ReturnValue;
};

// Function Engine.Controller.PawnDied
// [0x00020002] 
// Parameters infos:
// class APawn*                   inPawn                         ( CPF_Parm )

void AController::PawnDied ( class APawn* inPawn )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 8091 ];

	AController_execPawnDied_Parms PawnDied_Parms;
	PawnDied_Parms.inPawn = inPawn;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function Engine.Controller.UnPossess
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AController::eventUnPossess ( )
{
	static UFunction* pFnUnPossess = NULL;

	if ( ! pFnUnPossess )
		pFnUnPossess = (UFunction*) UObject::GObjObjects()->Data[ 8090 ];

	AController_eventUnPossess_Parms UnPossess_Parms;

	this->ProcessEvent ( pFnUnPossess, &UnPossess_Parms, NULL );
};

// Function Engine.Controller.UpdateSex
// [0x00020002] 
// Parameters infos:

void AController::UpdateSex ( )
{
	static UFunction* pFnUpdateSex = NULL;

	if ( ! pFnUpdateSex )
		pFnUpdateSex = (UFunction*) UObject::GObjObjects()->Data[ 8086 ];

	AController_execUpdateSex_Parms UpdateSex_Parms;

	this->ProcessEvent ( pFnUpdateSex, &UpdateSex_Parms, NULL );
};

// Function Engine.Controller.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   inPawn                         ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void AController::eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = (UFunction*) UObject::GObjObjects()->Data[ 8082 ];

	AController_eventPossess_Parms Possess_Parms;
	Possess_Parms.inPawn = inPawn;
	Possess_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function Engine.Controller.OnPossess
// [0x00020002] 
// Parameters infos:
// class USeqAct_Possess*         inAction                       ( CPF_Parm )

void AController::OnPossess ( class USeqAct_Possess* inAction )
{
	static UFunction* pFnOnPossess = NULL;

	if ( ! pFnOnPossess )
		pFnOnPossess = (UFunction*) UObject::GObjObjects()->Data[ 8071 ];

	AController_execOnPossess_Parms OnPossess_Parms;
	OnPossess_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnPossess, &OnPossess_Parms, NULL );
};

// Function Engine.Controller.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AController::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 8069 ];

	AController_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.Controller.ClientSetRotation
// [0x010241C2] 
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )
// unsigned long                  bResetCamera                   ( CPF_OptionalParm | CPF_Parm )

void AController::ClientSetRotation ( struct FRotator NewRotation, unsigned long bResetCamera )
{
	static UFunction* pFnClientSetRotation = NULL;

	if ( ! pFnClientSetRotation )
		pFnClientSetRotation = (UFunction*) UObject::GObjObjects()->Data[ 8066 ];

	AController_execClientSetRotation_Parms ClientSetRotation_Parms;
	memcpy ( &ClientSetRotation_Parms.NewRotation, &NewRotation, 0xC );
	ClientSetRotation_Parms.bResetCamera = bResetCamera;

	this->ProcessEvent ( pFnClientSetRotation, &ClientSetRotation_Parms, NULL );
};

// Function Engine.Controller.ClientSetLocation
// [0x010201C2] 
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Parm )
// struct FRotator                NewRotation                    ( CPF_Parm )

void AController::ClientSetLocation ( struct FVector NewLocation, struct FRotator NewRotation )
{
	static UFunction* pFnClientSetLocation = NULL;

	if ( ! pFnClientSetLocation )
		pFnClientSetLocation = (UFunction*) UObject::GObjObjects()->Data[ 8062 ];

	AController_execClientSetLocation_Parms ClientSetLocation_Parms;
	memcpy ( &ClientSetLocation_Parms.NewLocation, &NewLocation, 0xC );
	memcpy ( &ClientSetLocation_Parms.NewRotation, &NewRotation, 0xC );

	this->ProcessEvent ( pFnClientSetLocation, &ClientSetLocation_Parms, NULL );
};

// Function Engine.Controller.Reset
// [0x00020002] 
// Parameters infos:

void AController::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 8053 ];

	AController_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Controller.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AController::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 8049 ];

	AController_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Controller.SetSkelControlScale
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   SkelControlName                ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void AController::eventSetSkelControlScale ( struct FName SkelControlName, float Scale )
{
	static UFunction* pFnSetSkelControlScale = NULL;

	if ( ! pFnSetSkelControlScale )
		pFnSetSkelControlScale = (UFunction*) UObject::GObjObjects()->Data[ 8046 ];

	AController_eventSetSkelControlScale_Parms SetSkelControlScale_Parms;
	memcpy ( &SetSkelControlScale_Parms.SkelControlName, &SkelControlName, 0x8 );
	SetSkelControlScale_Parms.Scale = Scale;

	this->ProcessEvent ( pFnSetSkelControlScale, &SetSkelControlScale_Parms, NULL );
};

// Function Engine.Controller.SetMorphWeight
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   MorphNodeName                  ( CPF_Parm )
// float                          MorphWeight                    ( CPF_Parm )

void AController::eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight )
{
	static UFunction* pFnSetMorphWeight = NULL;

	if ( ! pFnSetMorphWeight )
		pFnSetMorphWeight = (UFunction*) UObject::GObjObjects()->Data[ 8043 ];

	AController_eventSetMorphWeight_Parms SetMorphWeight_Parms;
	memcpy ( &SetMorphWeight_Parms.MorphNodeName, &MorphNodeName, 0x8 );
	SetMorphWeight_Parms.MorphWeight = MorphWeight;

	this->ProcessEvent ( pFnSetMorphWeight, &SetMorphWeight_Parms, NULL );
};

// Function Engine.Controller.PlayActorFaceFXAnim
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )
// struct FString                 GroupName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SeqName                        ( CPF_Parm | CPF_NeedCtorLink )
// class USoundCue*               SoundCueToPlay                 ( CPF_Parm )

bool AController::eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay )
{
	static UFunction* pFnPlayActorFaceFXAnim = NULL;

	if ( ! pFnPlayActorFaceFXAnim )
		pFnPlayActorFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 8035 ];

	AController_eventPlayActorFaceFXAnim_Parms PlayActorFaceFXAnim_Parms;
	PlayActorFaceFXAnim_Parms.AnimSet = AnimSet;
	memcpy ( &PlayActorFaceFXAnim_Parms.GroupName, &GroupName, 0x10 );
	memcpy ( &PlayActorFaceFXAnim_Parms.SeqName, &SeqName, 0x10 );
	PlayActorFaceFXAnim_Parms.SoundCueToPlay = SoundCueToPlay;

	this->ProcessEvent ( pFnPlayActorFaceFXAnim, &PlayActorFaceFXAnim_Parms, NULL );

	return PlayActorFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.Controller.FinishAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void AController::eventFinishAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnFinishAnimControl = NULL;

	if ( ! pFnFinishAnimControl )
		pFnFinishAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 8033 ];

	AController_eventFinishAnimControl_Parms FinishAnimControl_Parms;
	FinishAnimControl_Parms.InInterpGroup = InInterpGroup;

	this->ProcessEvent ( pFnFinishAnimControl, &FinishAnimControl_Parms, NULL );
};

// Function Engine.Controller.SetAnimPosition
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )

void AController::eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping )
{
	static UFunction* pFnSetAnimPosition = NULL;

	if ( ! pFnSetAnimPosition )
		pFnSetAnimPosition = (UFunction*) UObject::GObjObjects()->Data[ 8026 ];

	AController_eventSetAnimPosition_Parms SetAnimPosition_Parms;
	memcpy ( &SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	SetAnimPosition_Parms.InPosition = InPosition;
	SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	SetAnimPosition_Parms.bLooping = bLooping;

	this->ProcessEvent ( pFnSetAnimPosition, &SetAnimPosition_Parms, NULL );
};

// Function Engine.Controller.BeginAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void AController::eventBeginAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnBeginAnimControl = NULL;

	if ( ! pFnBeginAnimControl )
		pFnBeginAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 8024 ];

	AController_eventBeginAnimControl_Parms BeginAnimControl_Parms;
	BeginAnimControl_Parms.InInterpGroup = InInterpGroup;

	this->ProcessEvent ( pFnBeginAnimControl, &BeginAnimControl_Parms, NULL );
};

// Function Engine.Controller.NotifyPathChanged
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventNotifyPathChanged ( )
{
	static UFunction* pFnNotifyPathChanged = NULL;

	if ( ! pFnNotifyPathChanged )
		pFnNotifyPathChanged = (UFunction*) UObject::GObjObjects()->Data[ 8023 ];

	AController_eventNotifyPathChanged_Parms NotifyPathChanged_Parms;

	this->ProcessEvent ( pFnNotifyPathChanged, &NotifyPathChanged_Parms, NULL );
};

// Function Engine.Controller.GetAdjustLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector AController::GetAdjustLocation ( )
{
	static UFunction* pFnGetAdjustLocation = NULL;

	if ( ! pFnGetAdjustLocation )
		pFnGetAdjustLocation = (UFunction*) UObject::GObjObjects()->Data[ 8021 ];

	AController_execGetAdjustLocation_Parms GetAdjustLocation_Parms;

	pFnGetAdjustLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAdjustLocation, &GetAdjustLocation_Parms, NULL );

	pFnGetAdjustLocation->FunctionFlags |= 0x400;

	return GetAdjustLocation_Parms.ReturnValue;
};

// Function Engine.Controller.SetAdjustLocation
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewLoc                         ( CPF_Parm )
// unsigned long                  bAdjust                        ( CPF_Parm )
// unsigned long                  bOffsetFromBase                ( CPF_OptionalParm | CPF_Parm )

void AController::SetAdjustLocation ( struct FVector NewLoc, unsigned long bAdjust, unsigned long bOffsetFromBase )
{
	static UFunction* pFnSetAdjustLocation = NULL;

	if ( ! pFnSetAdjustLocation )
		pFnSetAdjustLocation = (UFunction*) UObject::GObjObjects()->Data[ 8017 ];

	AController_execSetAdjustLocation_Parms SetAdjustLocation_Parms;
	memcpy ( &SetAdjustLocation_Parms.NewLoc, &NewLoc, 0xC );
	SetAdjustLocation_Parms.bAdjust = bAdjust;
	SetAdjustLocation_Parms.bOffsetFromBase = bOffsetFromBase;

	pFnSetAdjustLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAdjustLocation, &SetAdjustLocation_Parms, NULL );

	pFnSetAdjustLocation->FunctionFlags |= 0x400;
};

// Function Engine.Controller.GetDestinationPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector AController::GetDestinationPosition ( )
{
	static UFunction* pFnGetDestinationPosition = NULL;

	if ( ! pFnGetDestinationPosition )
		pFnGetDestinationPosition = (UFunction*) UObject::GObjObjects()->Data[ 8015 ];

	AController_execGetDestinationPosition_Parms GetDestinationPosition_Parms;

	pFnGetDestinationPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDestinationPosition, &GetDestinationPosition_Parms, NULL );

	pFnGetDestinationPosition->FunctionFlags |= 0x400;

	return GetDestinationPosition_Parms.ReturnValue;
};

// Function Engine.Controller.SetDestinationPosition
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Dest                           ( CPF_Parm )
// unsigned long                  bOffsetFromBase                ( CPF_OptionalParm | CPF_Parm )

void AController::SetDestinationPosition ( struct FVector Dest, unsigned long bOffsetFromBase )
{
	static UFunction* pFnSetDestinationPosition = NULL;

	if ( ! pFnSetDestinationPosition )
		pFnSetDestinationPosition = (UFunction*) UObject::GObjObjects()->Data[ 8012 ];

	AController_execSetDestinationPosition_Parms SetDestinationPosition_Parms;
	memcpy ( &SetDestinationPosition_Parms.Dest, &Dest, 0xC );
	SetDestinationPosition_Parms.bOffsetFromBase = bOffsetFromBase;

	pFnSetDestinationPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDestinationPosition, &SetDestinationPosition_Parms, NULL );

	pFnSetDestinationPosition->FunctionFlags |= 0x400;
};

// Function Engine.Controller.GetFocalPoint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector AController::GetFocalPoint ( )
{
	static UFunction* pFnGetFocalPoint = NULL;

	if ( ! pFnGetFocalPoint )
		pFnGetFocalPoint = (UFunction*) UObject::GObjObjects()->Data[ 8010 ];

	AController_execGetFocalPoint_Parms GetFocalPoint_Parms;

	pFnGetFocalPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFocalPoint, &GetFocalPoint_Parms, NULL );

	pFnGetFocalPoint->FunctionFlags |= 0x400;

	return GetFocalPoint_Parms.ReturnValue;
};

// Function Engine.Controller.SetFocalPoint
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 FP                             ( CPF_Parm )
// unsigned long                  bOffsetFromBase                ( CPF_OptionalParm | CPF_Parm )

void AController::SetFocalPoint ( struct FVector FP, unsigned long bOffsetFromBase )
{
	static UFunction* pFnSetFocalPoint = NULL;

	if ( ! pFnSetFocalPoint )
		pFnSetFocalPoint = (UFunction*) UObject::GObjObjects()->Data[ 8007 ];

	AController_execSetFocalPoint_Parms SetFocalPoint_Parms;
	memcpy ( &SetFocalPoint_Parms.FP, &FP, 0xC );
	SetFocalPoint_Parms.bOffsetFromBase = bOffsetFromBase;

	pFnSetFocalPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFocalPoint, &SetFocalPoint_Parms, NULL );

	pFnSetFocalPoint->FunctionFlags |= 0x400;
};

// Function Engine.Controller.RouteCache_RemoveIndex
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            InIndex                        ( CPF_Parm )
// int                            Count                          ( CPF_OptionalParm | CPF_Parm )

void AController::RouteCache_RemoveIndex ( int InIndex, int Count )
{
	static UFunction* pFnRouteCache_RemoveIndex = NULL;

	if ( ! pFnRouteCache_RemoveIndex )
		pFnRouteCache_RemoveIndex = (UFunction*) UObject::GObjObjects()->Data[ 8004 ];

	AController_execRouteCache_RemoveIndex_Parms RouteCache_RemoveIndex_Parms;
	RouteCache_RemoveIndex_Parms.InIndex = InIndex;
	RouteCache_RemoveIndex_Parms.Count = Count;

	pFnRouteCache_RemoveIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRouteCache_RemoveIndex, &RouteCache_RemoveIndex_Parms, NULL );

	pFnRouteCache_RemoveIndex->FunctionFlags |= 0x400;
};

// Function Engine.Controller.RouteCache_RemoveItem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        Nav                            ( CPF_Parm )

void AController::RouteCache_RemoveItem ( class ANavigationPoint* Nav )
{
	static UFunction* pFnRouteCache_RemoveItem = NULL;

	if ( ! pFnRouteCache_RemoveItem )
		pFnRouteCache_RemoveItem = (UFunction*) UObject::GObjObjects()->Data[ 8002 ];

	AController_execRouteCache_RemoveItem_Parms RouteCache_RemoveItem_Parms;
	RouteCache_RemoveItem_Parms.Nav = Nav;

	pFnRouteCache_RemoveItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRouteCache_RemoveItem, &RouteCache_RemoveItem_Parms, NULL );

	pFnRouteCache_RemoveItem->FunctionFlags |= 0x400;
};

// Function Engine.Controller.RouteCache_InsertItem
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        Nav                            ( CPF_Parm )
// int                            Idx                            ( CPF_OptionalParm | CPF_Parm )

void AController::RouteCache_InsertItem ( class ANavigationPoint* Nav, int Idx )
{
	static UFunction* pFnRouteCache_InsertItem = NULL;

	if ( ! pFnRouteCache_InsertItem )
		pFnRouteCache_InsertItem = (UFunction*) UObject::GObjObjects()->Data[ 7999 ];

	AController_execRouteCache_InsertItem_Parms RouteCache_InsertItem_Parms;
	RouteCache_InsertItem_Parms.Nav = Nav;
	RouteCache_InsertItem_Parms.Idx = Idx;

	pFnRouteCache_InsertItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRouteCache_InsertItem, &RouteCache_InsertItem_Parms, NULL );

	pFnRouteCache_InsertItem->FunctionFlags |= 0x400;
};

// Function Engine.Controller.RouteCache_AddItem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        Nav                            ( CPF_Parm )

void AController::RouteCache_AddItem ( class ANavigationPoint* Nav )
{
	static UFunction* pFnRouteCache_AddItem = NULL;

	if ( ! pFnRouteCache_AddItem )
		pFnRouteCache_AddItem = (UFunction*) UObject::GObjObjects()->Data[ 7997 ];

	AController_execRouteCache_AddItem_Parms RouteCache_AddItem_Parms;
	RouteCache_AddItem_Parms.Nav = Nav;

	pFnRouteCache_AddItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRouteCache_AddItem, &RouteCache_AddItem_Parms, NULL );

	pFnRouteCache_AddItem->FunctionFlags |= 0x400;
};

// Function Engine.Controller.RouteCache_Empty
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AController::RouteCache_Empty ( )
{
	static UFunction* pFnRouteCache_Empty = NULL;

	if ( ! pFnRouteCache_Empty )
		pFnRouteCache_Empty = (UFunction*) UObject::GObjObjects()->Data[ 7996 ];

	AController_execRouteCache_Empty_Parms RouteCache_Empty_Parms;

	pFnRouteCache_Empty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRouteCache_Empty, &RouteCache_Empty_Parms, NULL );

	pFnRouteCache_Empty->FunctionFlags |= 0x400;
};

// Function Engine.Controller.IsLocalPlayerController
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::IsLocalPlayerController ( )
{
	static UFunction* pFnIsLocalPlayerController = NULL;

	if ( ! pFnIsLocalPlayerController )
		pFnIsLocalPlayerController = (UFunction*) UObject::GObjObjects()->Data[ 7994 ];

	AController_execIsLocalPlayerController_Parms IsLocalPlayerController_Parms;

	pFnIsLocalPlayerController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLocalPlayerController, &IsLocalPlayerController_Parms, NULL );

	pFnIsLocalPlayerController->FunctionFlags |= 0x400;

	return IsLocalPlayerController_Parms.ReturnValue;
};

// Function Engine.PlayerController.LogOutBugItAIGoToLogFile
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 InScreenShotDesc               ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 InGoString                     ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 InLocString                    ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

void APlayerController::LogOutBugItAIGoToLogFile ( struct FString InScreenShotDesc, struct FString InGoString, struct FString InLocString )
{
	static UFunction* pFnLogOutBugItAIGoToLogFile = NULL;

	if ( ! pFnLogOutBugItAIGoToLogFile )
		pFnLogOutBugItAIGoToLogFile = (UFunction*) UObject::GObjObjects()->Data[ 11912 ];

	APlayerController_execLogOutBugItAIGoToLogFile_Parms LogOutBugItAIGoToLogFile_Parms;
	memcpy ( &LogOutBugItAIGoToLogFile_Parms.InScreenShotDesc, &InScreenShotDesc, 0x10 );
	memcpy ( &LogOutBugItAIGoToLogFile_Parms.InGoString, &InGoString, 0x10 );
	memcpy ( &LogOutBugItAIGoToLogFile_Parms.InLocString, &InLocString, 0x10 );

	pFnLogOutBugItAIGoToLogFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogOutBugItAIGoToLogFile, &LogOutBugItAIGoToLogFile_Parms, NULL );

	pFnLogOutBugItAIGoToLogFile->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.LogOutBugItGoToLogFile
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 InScreenShotDesc               ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 InGoString                     ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 InLocString                    ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

void APlayerController::LogOutBugItGoToLogFile ( struct FString InScreenShotDesc, struct FString InGoString, struct FString InLocString )
{
	static UFunction* pFnLogOutBugItGoToLogFile = NULL;

	if ( ! pFnLogOutBugItGoToLogFile )
		pFnLogOutBugItGoToLogFile = (UFunction*) UObject::GObjObjects()->Data[ 11900 ];

	APlayerController_execLogOutBugItGoToLogFile_Parms LogOutBugItGoToLogFile_Parms;
	memcpy ( &LogOutBugItGoToLogFile_Parms.InScreenShotDesc, &InScreenShotDesc, 0x10 );
	memcpy ( &LogOutBugItGoToLogFile_Parms.InGoString, &InGoString, 0x10 );
	memcpy ( &LogOutBugItGoToLogFile_Parms.InLocString, &InLocString, 0x10 );

	pFnLogOutBugItGoToLogFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogOutBugItGoToLogFile, &LogOutBugItGoToLogFile_Parms, NULL );

	pFnLogOutBugItGoToLogFile->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.DisableDebugAI
// [0x00020002] 
// Parameters infos:

void APlayerController::DisableDebugAI ( )
{
	static UFunction* pFnDisableDebugAI = NULL;

	if ( ! pFnDisableDebugAI )
		pFnDisableDebugAI = (UFunction*) UObject::GObjObjects()->Data[ 11922 ];

	APlayerController_execDisableDebugAI_Parms DisableDebugAI_Parms;

	this->ProcessEvent ( pFnDisableDebugAI, &DisableDebugAI_Parms, NULL );
};

// Function Engine.PlayerController.DumpOnlineSessionState
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::DumpOnlineSessionState ( )
{
	static UFunction* pFnDumpOnlineSessionState = NULL;

	if ( ! pFnDumpOnlineSessionState )
		pFnDumpOnlineSessionState = (UFunction*) UObject::GObjObjects()->Data[ 11921 ];

	APlayerController_execDumpOnlineSessionState_Parms DumpOnlineSessionState_Parms;

	this->ProcessEvent ( pFnDumpOnlineSessionState, &DumpOnlineSessionState_Parms, NULL );
};

// Function Engine.PlayerController.DebugLogPRIs
// [0x00020002] 
// Parameters infos:

void APlayerController::DebugLogPRIs ( )
{
	static UFunction* pFnDebugLogPRIs = NULL;

	if ( ! pFnDebugLogPRIs )
		pFnDebugLogPRIs = (UFunction*) UObject::GObjObjects()->Data[ 11918 ];

	APlayerController_execDebugLogPRIs_Parms DebugLogPRIs_Parms;

	this->ProcessEvent ( pFnDebugLogPRIs, &DebugLogPRIs_Parms, NULL );
};

// Function Engine.PlayerController.BugItStringCreator
// [0x00420A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// struct FVector                 ViewLocation                   ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FRotator                ViewRotation                   ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FString                 GoString                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 LocString                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void APlayerController::BugItStringCreator ( struct FVector* ViewLocation, struct FRotator* ViewRotation, struct FString* GoString, struct FString* LocString )
{
	static UFunction* pFnBugItStringCreator = NULL;

	if ( ! pFnBugItStringCreator )
		pFnBugItStringCreator = (UFunction*) UObject::GObjObjects()->Data[ 11913 ];

	APlayerController_execBugItStringCreator_Parms BugItStringCreator_Parms;

	this->ProcessEvent ( pFnBugItStringCreator, &BugItStringCreator_Parms, NULL );

	if ( ViewLocation )
		memcpy ( ViewLocation, &BugItStringCreator_Parms.ViewLocation, 0xC );

	if ( ViewRotation )
		memcpy ( ViewRotation, &BugItStringCreator_Parms.ViewRotation, 0xC );

	if ( GoString )
		memcpy ( GoString, &BugItStringCreator_Parms.GoString, 0x10 );

	if ( LocString )
		memcpy ( LocString, &BugItStringCreator_Parms.LocString, 0x10 );
};

// Function Engine.PlayerController.BugItAI
// [0x00024A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// struct FString                 ScreenShotDescription          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void APlayerController::BugItAI ( struct FString ScreenShotDescription )
{
	static UFunction* pFnBugItAI = NULL;

	if ( ! pFnBugItAI )
		pFnBugItAI = (UFunction*) UObject::GObjObjects()->Data[ 11906 ];

	APlayerController_execBugItAI_Parms BugItAI_Parms;
	memcpy ( &BugItAI_Parms.ScreenShotDescription, &ScreenShotDescription, 0x10 );

	this->ProcessEvent ( pFnBugItAI, &BugItAI_Parms, NULL );
};

// Function Engine.PlayerController.LogLoc
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::LogLoc ( )
{
	static UFunction* pFnLogLoc = NULL;

	if ( ! pFnLogLoc )
		pFnLogLoc = (UFunction*) UObject::GObjObjects()->Data[ 11901 ];

	APlayerController_execLogLoc_Parms LogLoc_Parms;

	this->ProcessEvent ( pFnLogLoc, &LogLoc_Parms, NULL );
};

// Function Engine.PlayerController.BugIt
// [0x00024A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// struct FString                 ScreenShotDescription          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void APlayerController::BugIt ( struct FString ScreenShotDescription )
{
	static UFunction* pFnBugIt = NULL;

	if ( ! pFnBugIt )
		pFnBugIt = (UFunction*) UObject::GObjObjects()->Data[ 11894 ];

	APlayerController_execBugIt_Parms BugIt_Parms;
	memcpy ( &BugIt_Parms.ScreenShotDescription, &ScreenShotDescription, 0x10 );

	this->ProcessEvent ( pFnBugIt, &BugIt_Parms, NULL );
};

// Function Engine.PlayerController.BugItWorker
// [0x00020002] 
// Parameters infos:
// struct FVector                 TheLocation                    ( CPF_Parm )
// struct FRotator                TheRotation                    ( CPF_Parm )

void APlayerController::BugItWorker ( struct FVector TheLocation, struct FRotator TheRotation )
{
	static UFunction* pFnBugItWorker = NULL;

	if ( ! pFnBugItWorker )
		pFnBugItWorker = (UFunction*) UObject::GObjObjects()->Data[ 11891 ];

	APlayerController_execBugItWorker_Parms BugItWorker_Parms;
	memcpy ( &BugItWorker_Parms.TheLocation, &TheLocation, 0xC );
	memcpy ( &BugItWorker_Parms.TheRotation, &TheRotation, 0xC );

	this->ProcessEvent ( pFnBugItWorker, &BugItWorker_Parms, NULL );
};

// Function Engine.PlayerController.BugItGoString
// [0x00020002] 
// Parameters infos:
// struct FString                 TheLocation                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 TheRotation                    ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::BugItGoString ( struct FString TheLocation, struct FString TheRotation )
{
	static UFunction* pFnBugItGoString = NULL;

	if ( ! pFnBugItGoString )
		pFnBugItGoString = (UFunction*) UObject::GObjObjects()->Data[ 11888 ];

	APlayerController_execBugItGoString_Parms BugItGoString_Parms;
	memcpy ( &BugItGoString_Parms.TheLocation, &TheLocation, 0x10 );
	memcpy ( &BugItGoString_Parms.TheRotation, &TheRotation, 0x10 );

	this->ProcessEvent ( pFnBugItGoString, &BugItGoString_Parms, NULL );
};

// Function Engine.PlayerController.BugItGo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          X                              ( CPF_Parm | CPF_CoerceParm )
// float                          Y                              ( CPF_Parm | CPF_CoerceParm )
// float                          Z                              ( CPF_Parm | CPF_CoerceParm )
// int                            Pitch                          ( CPF_Parm | CPF_CoerceParm )
// int                            Yaw                            ( CPF_Parm | CPF_CoerceParm )
// int                            Roll                           ( CPF_Parm | CPF_CoerceParm )

void APlayerController::BugItGo ( float X, float Y, float Z, int Pitch, int Yaw, int Roll )
{
	static UFunction* pFnBugItGo = NULL;

	if ( ! pFnBugItGo )
		pFnBugItGo = (UFunction*) UObject::GObjObjects()->Data[ 11879 ];

	APlayerController_execBugItGo_Parms BugItGo_Parms;
	BugItGo_Parms.X = X;
	BugItGo_Parms.Y = Y;
	BugItGo_Parms.Z = Z;
	BugItGo_Parms.Pitch = Pitch;
	BugItGo_Parms.Yaw = Yaw;
	BugItGo_Parms.Roll = Roll;

	this->ProcessEvent ( pFnBugItGo, &BugItGo_Parms, NULL );
};

// Function Engine.PlayerController.OnSetSoundMode
// [0x00020002] 
// Parameters infos:
// class USeqAct_SetSoundMode*    Action                         ( CPF_Parm )

void APlayerController::OnSetSoundMode ( class USeqAct_SetSoundMode* Action )
{
	static UFunction* pFnOnSetSoundMode = NULL;

	if ( ! pFnOnSetSoundMode )
		pFnOnSetSoundMode = (UFunction*) UObject::GObjObjects()->Data[ 11876 ];

	APlayerController_execOnSetSoundMode_Parms OnSetSoundMode_Parms;
	OnSetSoundMode_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetSoundMode, &OnSetSoundMode_Parms, NULL );
};

// Function Engine.PlayerController.ClientSpawnCameraLensEffect
// [0x01020942] ( FUNC_Event )
// Parameters infos:
// class UClass*                  LensEffectEmitterClass         ( CPF_Parm )

void APlayerController::eventClientSpawnCameraLensEffect ( class UClass* LensEffectEmitterClass )
{
	static UFunction* pFnClientSpawnCameraLensEffect = NULL;

	if ( ! pFnClientSpawnCameraLensEffect )
		pFnClientSpawnCameraLensEffect = (UFunction*) UObject::GObjObjects()->Data[ 11874 ];

	APlayerController_eventClientSpawnCameraLensEffect_Parms ClientSpawnCameraLensEffect_Parms;
	ClientSpawnCameraLensEffect_Parms.LensEffectEmitterClass = LensEffectEmitterClass;

	this->ProcessEvent ( pFnClientSpawnCameraLensEffect, &ClientSpawnCameraLensEffect_Parms, NULL );
};

// Function Engine.PlayerController.ClientStopCameraAnim
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// class UCameraAnim*             AnimToStop                     ( CPF_Parm )

void APlayerController::eventClientStopCameraAnim ( class UCameraAnim* AnimToStop )
{
	static UFunction* pFnClientStopCameraAnim = NULL;

	if ( ! pFnClientStopCameraAnim )
		pFnClientStopCameraAnim = (UFunction*) UObject::GObjObjects()->Data[ 11872 ];

	APlayerController_eventClientStopCameraAnim_Parms ClientStopCameraAnim_Parms;
	ClientStopCameraAnim_Parms.AnimToStop = AnimToStop;

	this->ProcessEvent ( pFnClientStopCameraAnim, &ClientStopCameraAnim_Parms, NULL );
};

// Function Engine.PlayerController.ClientPlayCameraAnim
// [0x01024942] ( FUNC_Event )
// Parameters infos:
// class UCameraAnim*             AnimToPlay                     ( CPF_Parm )
// float                          Scale                          ( CPF_OptionalParm | CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRandomStartTime               ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  Space                          ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                CustomPlaySpace                ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientPlayCameraAnim ( class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bRandomStartTime, unsigned char Space, struct FRotator CustomPlaySpace )
{
	static UFunction* pFnClientPlayCameraAnim = NULL;

	if ( ! pFnClientPlayCameraAnim )
		pFnClientPlayCameraAnim = (UFunction*) UObject::GObjObjects()->Data[ 11860 ];

	APlayerController_eventClientPlayCameraAnim_Parms ClientPlayCameraAnim_Parms;
	ClientPlayCameraAnim_Parms.AnimToPlay = AnimToPlay;
	ClientPlayCameraAnim_Parms.Scale = Scale;
	ClientPlayCameraAnim_Parms.Rate = Rate;
	ClientPlayCameraAnim_Parms.BlendInTime = BlendInTime;
	ClientPlayCameraAnim_Parms.BlendOutTime = BlendOutTime;
	ClientPlayCameraAnim_Parms.bLoop = bLoop;
	ClientPlayCameraAnim_Parms.bRandomStartTime = bRandomStartTime;
	ClientPlayCameraAnim_Parms.Space = Space;
	memcpy ( &ClientPlayCameraAnim_Parms.CustomPlaySpace, &CustomPlaySpace, 0xC );

	this->ProcessEvent ( pFnClientPlayCameraAnim, &ClientPlayCameraAnim_Parms, NULL );
};

// Function Engine.PlayerController.OnCameraShake
// [0x00020002] 
// Parameters infos:
// class USeqAct_CameraShake*     inAction                       ( CPF_Parm )

void APlayerController::OnCameraShake ( class USeqAct_CameraShake* inAction )
{
	static UFunction* pFnOnCameraShake = NULL;

	if ( ! pFnOnCameraShake )
		pFnOnCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 11848 ];

	APlayerController_execOnCameraShake_Parms OnCameraShake_Parms;
	OnCameraShake_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnCameraShake, &OnCameraShake_Parms, NULL );
};

// Function Engine.PlayerController.ClientStopCameraShake
// [0x01020142] 
// Parameters infos:
// class UCameraShake*            Shake                          ( CPF_Parm )

void APlayerController::ClientStopCameraShake ( class UCameraShake* Shake )
{
	static UFunction* pFnClientStopCameraShake = NULL;

	if ( ! pFnClientStopCameraShake )
		pFnClientStopCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 11846 ];

	APlayerController_execClientStopCameraShake_Parms ClientStopCameraShake_Parms;
	ClientStopCameraShake_Parms.Shake = Shake;

	this->ProcessEvent ( pFnClientStopCameraShake, &ClientStopCameraShake_Parms, NULL );
};

// Function Engine.PlayerController.ClientPlayCameraShake
// [0x01024142] 
// Parameters infos:
// class UCameraShake*            Shake                          ( CPF_Parm )
// float                          Scale                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTryForceFeedback              ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  PlaySpace                      ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                UserPlaySpaceRot               ( CPF_OptionalParm | CPF_Parm )

void APlayerController::ClientPlayCameraShake ( class UCameraShake* Shake, float Scale, unsigned long bTryForceFeedback, unsigned char PlaySpace, struct FRotator UserPlaySpaceRot )
{
	static UFunction* pFnClientPlayCameraShake = NULL;

	if ( ! pFnClientPlayCameraShake )
		pFnClientPlayCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 11840 ];

	APlayerController_execClientPlayCameraShake_Parms ClientPlayCameraShake_Parms;
	ClientPlayCameraShake_Parms.Shake = Shake;
	ClientPlayCameraShake_Parms.Scale = Scale;
	ClientPlayCameraShake_Parms.bTryForceFeedback = bTryForceFeedback;
	ClientPlayCameraShake_Parms.PlaySpace = PlaySpace;
	memcpy ( &ClientPlayCameraShake_Parms.UserPlaySpaceRot, &UserPlaySpaceRot, 0xC );

	this->ProcessEvent ( pFnClientPlayCameraShake, &ClientPlayCameraShake_Parms, NULL );
};

// Function Engine.PlayerController.DoForceFeedbackForScreenShake
// [0x00080100] 
// Parameters infos:
// class UCameraShake*            ShakeData                      ( CPF_Parm )
// float                          ShakeScale                     ( CPF_Parm )

void APlayerController::DoForceFeedbackForScreenShake ( class UCameraShake* ShakeData, float ShakeScale )
{
	static UFunction* pFnDoForceFeedbackForScreenShake = NULL;

	if ( ! pFnDoForceFeedbackForScreenShake )
		pFnDoForceFeedbackForScreenShake = (UFunction*) UObject::GObjObjects()->Data[ 11837 ];

	APlayerController_execDoForceFeedbackForScreenShake_Parms DoForceFeedbackForScreenShake_Parms;
	DoForceFeedbackForScreenShake_Parms.ShakeData = ShakeData;
	DoForceFeedbackForScreenShake_Parms.ShakeScale = ShakeScale;

	this->ProcessEvent ( pFnDoForceFeedbackForScreenShake, &DoForceFeedbackForScreenShake_Parms, NULL );
};

// Function Engine.PlayerController.InputMatchDelegate
// [0x00120000] 
// Parameters infos:

void APlayerController::InputMatchDelegate ( )
{
	static UFunction* pFnInputMatchDelegate = NULL;

	if ( ! pFnInputMatchDelegate )
		pFnInputMatchDelegate = (UFunction*) UObject::GObjObjects()->Data[ 11115 ];

	APlayerController_execInputMatchDelegate_Parms InputMatchDelegate_Parms;

	this->ProcessEvent ( pFnInputMatchDelegate, &InputMatchDelegate_Parms, NULL );
};

// Function Engine.PlayerController.Sentinel_PostAcquireTravelTheWorldPoints
// [0x00020000] 
// Parameters infos:

void APlayerController::Sentinel_PostAcquireTravelTheWorldPoints ( )
{
	static UFunction* pFnSentinel_PostAcquireTravelTheWorldPoints = NULL;

	if ( ! pFnSentinel_PostAcquireTravelTheWorldPoints )
		pFnSentinel_PostAcquireTravelTheWorldPoints = (UFunction*) UObject::GObjObjects()->Data[ 11836 ];

	APlayerController_execSentinel_PostAcquireTravelTheWorldPoints_Parms Sentinel_PostAcquireTravelTheWorldPoints_Parms;

	this->ProcessEvent ( pFnSentinel_PostAcquireTravelTheWorldPoints, &Sentinel_PostAcquireTravelTheWorldPoints_Parms, NULL );
};

// Function Engine.PlayerController.Sentinel_PreAcquireTravelTheWorldPoints
// [0x00020000] 
// Parameters infos:

void APlayerController::Sentinel_PreAcquireTravelTheWorldPoints ( )
{
	static UFunction* pFnSentinel_PreAcquireTravelTheWorldPoints = NULL;

	if ( ! pFnSentinel_PreAcquireTravelTheWorldPoints )
		pFnSentinel_PreAcquireTravelTheWorldPoints = (UFunction*) UObject::GObjObjects()->Data[ 11835 ];

	APlayerController_execSentinel_PreAcquireTravelTheWorldPoints_Parms Sentinel_PreAcquireTravelTheWorldPoints_Parms;

	this->ProcessEvent ( pFnSentinel_PreAcquireTravelTheWorldPoints, &Sentinel_PreAcquireTravelTheWorldPoints_Parms, NULL );
};

// Function Engine.PlayerController.Sentinel_SetupForGamebasedTravelTheWorld
// [0x00020000] 
// Parameters infos:

void APlayerController::Sentinel_SetupForGamebasedTravelTheWorld ( )
{
	static UFunction* pFnSentinel_SetupForGamebasedTravelTheWorld = NULL;

	if ( ! pFnSentinel_SetupForGamebasedTravelTheWorld )
		pFnSentinel_SetupForGamebasedTravelTheWorld = (UFunction*) UObject::GObjObjects()->Data[ 11834 ];

	APlayerController_execSentinel_SetupForGamebasedTravelTheWorld_Parms Sentinel_SetupForGamebasedTravelTheWorld_Parms;

	this->ProcessEvent ( pFnSentinel_SetupForGamebasedTravelTheWorld, &Sentinel_SetupForGamebasedTravelTheWorld_Parms, NULL );
};

// Function Engine.PlayerController.OnFlyThroughHasEnded
// [0x00020102] 
// Parameters infos:
// class USeqAct_FlyThroughHasEnded* inAction                       ( CPF_Parm )

void APlayerController::OnFlyThroughHasEnded ( class USeqAct_FlyThroughHasEnded* inAction )
{
	static UFunction* pFnOnFlyThroughHasEnded = NULL;

	if ( ! pFnOnFlyThroughHasEnded )
		pFnOnFlyThroughHasEnded = (UFunction*) UObject::GObjObjects()->Data[ 11828 ];

	APlayerController_execOnFlyThroughHasEnded_Parms OnFlyThroughHasEnded_Parms;
	OnFlyThroughHasEnded_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnFlyThroughHasEnded, &OnFlyThroughHasEnded_Parms, NULL );
};

// Function Engine.PlayerController.GetAchievementProgression
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            AchievementId                  ( CPF_Parm )
// float                          CurrentValue                   ( CPF_Parm | CPF_OutParm )
// float                          MaxValue                       ( CPF_Parm | CPF_OutParm )

bool APlayerController::eventGetAchievementProgression ( int AchievementId, float* CurrentValue, float* MaxValue )
{
	static UFunction* pFnGetAchievementProgression = NULL;

	if ( ! pFnGetAchievementProgression )
		pFnGetAchievementProgression = (UFunction*) UObject::GObjObjects()->Data[ 11823 ];

	APlayerController_eventGetAchievementProgression_Parms GetAchievementProgression_Parms;
	GetAchievementProgression_Parms.AchievementId = AchievementId;

	this->ProcessEvent ( pFnGetAchievementProgression, &GetAchievementProgression_Parms, NULL );

	if ( CurrentValue )
		*CurrentValue = GetAchievementProgression_Parms.CurrentValue;

	if ( MaxValue )
		*MaxValue = GetAchievementProgression_Parms.MaxValue;

	return GetAchievementProgression_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetPartyGameTypeName
// [0x00022000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerController::GetPartyGameTypeName ( )
{
	static UFunction* pFnGetPartyGameTypeName = NULL;

	if ( ! pFnGetPartyGameTypeName )
		pFnGetPartyGameTypeName = (UFunction*) UObject::GObjObjects()->Data[ 11821 ];

	APlayerController_execGetPartyGameTypeName_Parms GetPartyGameTypeName_Parms;

	this->ProcessEvent ( pFnGetPartyGameTypeName, &GetPartyGameTypeName_Parms, NULL );

	return GetPartyGameTypeName_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetPartyMapName
// [0x00022000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerController::GetPartyMapName ( )
{
	static UFunction* pFnGetPartyMapName = NULL;

	if ( ! pFnGetPartyMapName )
		pFnGetPartyMapName = (UFunction*) UObject::GObjObjects()->Data[ 11819 ];

	APlayerController_execGetPartyMapName_Parms GetPartyMapName_Parms;

	this->ProcessEvent ( pFnGetPartyMapName, &GetPartyMapName_Parms, NULL );

	return GetPartyMapName_Parms.ReturnValue;
};

// Function Engine.PlayerController.IsPartyLeader
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsPartyLeader ( )
{
	static UFunction* pFnIsPartyLeader = NULL;

	if ( ! pFnIsPartyLeader )
		pFnIsPartyLeader = (UFunction*) UObject::GObjObjects()->Data[ 11816 ];

	APlayerController_execIsPartyLeader_Parms IsPartyLeader_Parms;

	this->ProcessEvent ( pFnIsPartyLeader, &IsPartyLeader_Parms, NULL );

	return IsPartyLeader_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientPrestreamTextures
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ForcedActor                    ( CPF_Parm )
// float                          ForceDuration                  ( CPF_Parm )
// unsigned long                  bEnableStreaming               ( CPF_Parm )
// int                            CinematicTextureGroups         ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientPrestreamTextures ( class AActor* ForcedActor, float ForceDuration, unsigned long bEnableStreaming, int CinematicTextureGroups )
{
	static UFunction* pFnClientPrestreamTextures = NULL;

	if ( ! pFnClientPrestreamTextures )
		pFnClientPrestreamTextures = (UFunction*) UObject::GObjObjects()->Data[ 11811 ];

	APlayerController_eventClientPrestreamTextures_Parms ClientPrestreamTextures_Parms;
	ClientPrestreamTextures_Parms.ForcedActor = ForcedActor;
	ClientPrestreamTextures_Parms.ForceDuration = ForceDuration;
	ClientPrestreamTextures_Parms.bEnableStreaming = bEnableStreaming;
	ClientPrestreamTextures_Parms.CinematicTextureGroups = CinematicTextureGroups;

	this->ProcessEvent ( pFnClientPrestreamTextures, &ClientPrestreamTextures_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// class UMaterialInterface*      Material                       ( CPF_Parm )
// float                          ForceDuration                  ( CPF_Parm )
// int                            CinematicTextureGroups         ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientSetForceMipLevelsToBeResident ( class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups )
{
	static UFunction* pFnClientSetForceMipLevelsToBeResident = NULL;

	if ( ! pFnClientSetForceMipLevelsToBeResident )
		pFnClientSetForceMipLevelsToBeResident = (UFunction*) UObject::GObjObjects()->Data[ 11807 ];

	APlayerController_eventClientSetForceMipLevelsToBeResident_Parms ClientSetForceMipLevelsToBeResident_Parms;
	ClientSetForceMipLevelsToBeResident_Parms.Material = Material;
	ClientSetForceMipLevelsToBeResident_Parms.ForceDuration = ForceDuration;
	ClientSetForceMipLevelsToBeResident_Parms.CinematicTextureGroups = CinematicTextureGroups;

	this->ProcessEvent ( pFnClientSetForceMipLevelsToBeResident, &ClientSetForceMipLevelsToBeResident_Parms, NULL );
};

// Function Engine.PlayerController.ClientControlMovieTexture
// [0x010201C2] 
// Parameters infos:
// class UTextureMovie*           MovieTexture                   ( CPF_Parm )
// unsigned char                  Mode                           ( CPF_Parm )

void APlayerController::ClientControlMovieTexture ( class UTextureMovie* MovieTexture, unsigned char Mode )
{
	static UFunction* pFnClientControlMovieTexture = NULL;

	if ( ! pFnClientControlMovieTexture )
		pFnClientControlMovieTexture = (UFunction*) UObject::GObjObjects()->Data[ 11804 ];

	APlayerController_execClientControlMovieTexture_Parms ClientControlMovieTexture_Parms;
	ClientControlMovieTexture_Parms.MovieTexture = MovieTexture;
	ClientControlMovieTexture_Parms.Mode = Mode;

	this->ProcessEvent ( pFnClientControlMovieTexture, &ClientControlMovieTexture_Parms, NULL );
};

// Function Engine.PlayerController.GetSplitscreenPlayerCount
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int APlayerController::GetSplitscreenPlayerCount ( )
{
	static UFunction* pFnGetSplitscreenPlayerCount = NULL;

	if ( ! pFnGetSplitscreenPlayerCount )
		pFnGetSplitscreenPlayerCount = (UFunction*) UObject::GObjObjects()->Data[ 11799 ];

	APlayerController_execGetSplitscreenPlayerCount_Parms GetSplitscreenPlayerCount_Parms;

	this->ProcessEvent ( pFnGetSplitscreenPlayerCount, &GetSplitscreenPlayerCount_Parms, NULL );

	return GetSplitscreenPlayerCount_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetSplitscreenPlayerByIndex
// [0x00024102] 
// Parameters infos:
// class APlayerReplicationInfo*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

class APlayerReplicationInfo* APlayerController::GetSplitscreenPlayerByIndex ( int PlayerIndex )
{
	static UFunction* pFnGetSplitscreenPlayerByIndex = NULL;

	if ( ! pFnGetSplitscreenPlayerByIndex )
		pFnGetSplitscreenPlayerByIndex = (UFunction*) UObject::GObjObjects()->Data[ 11790 ];

	APlayerController_execGetSplitscreenPlayerByIndex_Parms GetSplitscreenPlayerByIndex_Parms;
	GetSplitscreenPlayerByIndex_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnGetSplitscreenPlayerByIndex, &GetSplitscreenPlayerByIndex_Parms, NULL );

	return GetSplitscreenPlayerByIndex_Parms.ReturnValue;
};

// Function Engine.PlayerController.HasSplitscreenPlayer
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

bool APlayerController::HasSplitscreenPlayer ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnHasSplitscreenPlayer = NULL;

	if ( ! pFnHasSplitscreenPlayer )
		pFnHasSplitscreenPlayer = (UFunction*) UObject::GObjObjects()->Data[ 11782 ];

	APlayerController_execHasSplitscreenPlayer_Parms HasSplitscreenPlayer_Parms;
	HasSplitscreenPlayer_Parms.PRI = PRI;

	this->ProcessEvent ( pFnHasSplitscreenPlayer, &HasSplitscreenPlayer_Parms, NULL );

	return HasSplitscreenPlayer_Parms.ReturnValue;
};

// Function Engine.PlayerController.IsSplitscreenPlayer
// [0x00424102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            out_SplitscreenPlayerIndex     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool APlayerController::IsSplitscreenPlayer ( int* out_SplitscreenPlayerIndex )
{
	static UFunction* pFnIsSplitscreenPlayer = NULL;

	if ( ! pFnIsSplitscreenPlayer )
		pFnIsSplitscreenPlayer = (UFunction*) UObject::GObjObjects()->Data[ 11775 ];

	APlayerController_execIsSplitscreenPlayer_Parms IsSplitscreenPlayer_Parms;

	this->ProcessEvent ( pFnIsSplitscreenPlayer, &IsSplitscreenPlayer_Parms, NULL );

	if ( out_SplitscreenPlayerIndex )
		*out_SplitscreenPlayerIndex = IsSplitscreenPlayer_Parms.out_SplitscreenPlayerIndex;

	return IsSplitscreenPlayer_Parms.ReturnValue;
};

// Function Engine.PlayerController.IsPrimaryPlayer
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsPrimaryPlayer ( )
{
	static UFunction* pFnIsPrimaryPlayer = NULL;

	if ( ! pFnIsPrimaryPlayer )
		pFnIsPrimaryPlayer = (UFunction*) UObject::GObjObjects()->Data[ 9031 ];

	APlayerController_execIsPrimaryPlayer_Parms IsPrimaryPlayer_Parms;

	this->ProcessEvent ( pFnIsPrimaryPlayer, &IsPrimaryPlayer_Parms, NULL );

	return IsPrimaryPlayer_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientReturnToParty
// [0x010201C2] 
// Parameters infos:
// struct FUniqueNetId            RequestingPlayerId             ( CPF_Parm )

void APlayerController::ClientReturnToParty ( struct FUniqueNetId RequestingPlayerId )
{
	static UFunction* pFnClientReturnToParty = NULL;

	if ( ! pFnClientReturnToParty )
		pFnClientReturnToParty = (UFunction*) UObject::GObjObjects()->Data[ 11771 ];

	APlayerController_execClientReturnToParty_Parms ClientReturnToParty_Parms;
	memcpy ( &ClientReturnToParty_Parms.RequestingPlayerId, &RequestingPlayerId, 0x8 );

	this->ProcessEvent ( pFnClientReturnToParty, &ClientReturnToParty_Parms, NULL );
};

// Function Engine.PlayerController.OnJoinTravelToSessionComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnJoinTravelToSessionComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnJoinTravelToSessionComplete = NULL;

	if ( ! pFnOnJoinTravelToSessionComplete )
		pFnOnJoinTravelToSessionComplete = (UFunction*) UObject::GObjObjects()->Data[ 11767 ];

	APlayerController_execOnJoinTravelToSessionComplete_Parms OnJoinTravelToSessionComplete_Parms;
	memcpy ( &OnJoinTravelToSessionComplete_Parms.SessionName, &SessionName, 0x8 );
	OnJoinTravelToSessionComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnJoinTravelToSessionComplete, &OnJoinTravelToSessionComplete_Parms, NULL );
};

// Function Engine.PlayerController.ClientTravelToSession
// [0x010201C2] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// class UClass*                  SearchClass                    ( CPF_Parm )
// unsigned char                  PlatformSpecificInfo           ( CPF_Parm )

void APlayerController::ClientTravelToSession ( struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo )
{
	static UFunction* pFnClientTravelToSession = NULL;

	if ( ! pFnClientTravelToSession )
		pFnClientTravelToSession = (UFunction*) UObject::GObjObjects()->Data[ 11755 ];

	APlayerController_execClientTravelToSession_Parms ClientTravelToSession_Parms;
	memcpy ( &ClientTravelToSession_Parms.SessionName, &SessionName, 0x8 );
	ClientTravelToSession_Parms.SearchClass = SearchClass;
	memcpy ( &ClientTravelToSession_Parms.PlatformSpecificInfo, &PlatformSpecificInfo, 0x50 );

	this->ProcessEvent ( pFnClientTravelToSession, &ClientTravelToSession_Parms, NULL );
};

// Function Engine.PlayerController.PathClear
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::PathClear ( )
{
	static UFunction* pFnPathClear = NULL;

	if ( ! pFnPathClear )
		pFnPathClear = (UFunction*) UObject::GObjObjects()->Data[ 11754 ];

	APlayerController_execPathClear_Parms PathClear_Parms;

	this->ProcessEvent ( pFnPathClear, &PathClear_Parms, NULL );
};

// Function Engine.PlayerController.PathChild
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// int                            Cnt                            ( CPF_OptionalParm | CPF_Parm )

void APlayerController::PathChild ( int Cnt )
{
	static UFunction* pFnPathChild = NULL;

	if ( ! pFnPathChild )
		pFnPathChild = (UFunction*) UObject::GObjObjects()->Data[ 11752 ];

	APlayerController_execPathChild_Parms PathChild_Parms;
	PathChild_Parms.Cnt = Cnt;

	this->ProcessEvent ( pFnPathChild, &PathChild_Parms, NULL );
};

// Function Engine.PlayerController.PathStep
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// int                            Cnt                            ( CPF_OptionalParm | CPF_Parm )

void APlayerController::PathStep ( int Cnt )
{
	static UFunction* pFnPathStep = NULL;

	if ( ! pFnPathStep )
		pFnPathStep = (UFunction*) UObject::GObjObjects()->Data[ 11750 ];

	APlayerController_execPathStep_Parms PathStep_Parms;
	PathStep_Parms.Cnt = Cnt;

	this->ProcessEvent ( pFnPathStep, &PathStep_Parms, NULL );
};

// Function Engine.PlayerController.SoakPause
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APlayerController::eventSoakPause ( class APawn* P )
{
	static UFunction* pFnSoakPause = NULL;

	if ( ! pFnSoakPause )
		pFnSoakPause = (UFunction*) UObject::GObjObjects()->Data[ 11747 ];

	APlayerController_eventSoakPause_Parms SoakPause_Parms;
	SoakPause_Parms.P = P;

	this->ProcessEvent ( pFnSoakPause, &SoakPause_Parms, NULL );
};

// Function Engine.PlayerController.IncrementNumberOfMatchesPlayed
// [0x00020002] 
// Parameters infos:

void APlayerController::IncrementNumberOfMatchesPlayed ( )
{
	static UFunction* pFnIncrementNumberOfMatchesPlayed = NULL;

	if ( ! pFnIncrementNumberOfMatchesPlayed )
		pFnIncrementNumberOfMatchesPlayed = (UFunction*) UObject::GObjObjects()->Data[ 11743 ];

	APlayerController_execIncrementNumberOfMatchesPlayed_Parms IncrementNumberOfMatchesPlayed_Parms;

	this->ProcessEvent ( pFnIncrementNumberOfMatchesPlayed, &IncrementNumberOfMatchesPlayed_Parms, NULL );
};

// Function Engine.PlayerController.CanViewUserCreatedContent
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanViewUserCreatedContent ( )
{
	static UFunction* pFnCanViewUserCreatedContent = NULL;

	if ( ! pFnCanViewUserCreatedContent )
		pFnCanViewUserCreatedContent = (UFunction*) UObject::GObjObjects()->Data[ 11738 ];

	APlayerController_execCanViewUserCreatedContent_Parms CanViewUserCreatedContent_Parms;

	this->ProcessEvent ( pFnCanViewUserCreatedContent, &CanViewUserCreatedContent_Parms, NULL );

	return CanViewUserCreatedContent_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientEndOnlineGame
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientEndOnlineGame ( )
{
	static UFunction* pFnClientEndOnlineGame = NULL;

	if ( ! pFnClientEndOnlineGame )
		pFnClientEndOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 11736 ];

	APlayerController_execClientEndOnlineGame_Parms ClientEndOnlineGame_Parms;

	this->ProcessEvent ( pFnClientEndOnlineGame, &ClientEndOnlineGame_Parms, NULL );
};

// Function Engine.PlayerController.ClientStartOnlineGame
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientStartOnlineGame ( )
{
	static UFunction* pFnClientStartOnlineGame = NULL;

	if ( ! pFnClientStartOnlineGame )
		pFnClientStartOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 11732 ];

	APlayerController_execClientStartOnlineGame_Parms ClientStartOnlineGame_Parms;

	this->ProcessEvent ( pFnClientStartOnlineGame, &ClientStartOnlineGame_Parms, NULL );
};

// Function Engine.PlayerController.ServerRegisterClientStatGuid
// [0x002200C2] 
// Parameters infos:
// struct FString                 StatGuid                       ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::ServerRegisterClientStatGuid ( struct FString StatGuid )
{
	static UFunction* pFnServerRegisterClientStatGuid = NULL;

	if ( ! pFnServerRegisterClientStatGuid )
		pFnServerRegisterClientStatGuid = (UFunction*) UObject::GObjObjects()->Data[ 11728 ];

	APlayerController_execServerRegisterClientStatGuid_Parms ServerRegisterClientStatGuid_Parms;
	memcpy ( &ServerRegisterClientStatGuid_Parms.StatGuid, &StatGuid, 0x10 );

	this->ProcessEvent ( pFnServerRegisterClientStatGuid, &ServerRegisterClientStatGuid_Parms, NULL );
};

// Function Engine.PlayerController.OnRegisterHostStatGuidComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnRegisterHostStatGuidComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnRegisterHostStatGuidComplete = NULL;

	if ( ! pFnOnRegisterHostStatGuidComplete )
		pFnOnRegisterHostStatGuidComplete = (UFunction*) UObject::GObjObjects()->Data[ 11723 ];

	APlayerController_execOnRegisterHostStatGuidComplete_Parms OnRegisterHostStatGuidComplete_Parms;
	OnRegisterHostStatGuidComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnRegisterHostStatGuidComplete, &OnRegisterHostStatGuidComplete_Parms, NULL );
};

// Function Engine.PlayerController.ClientRegisterHostStatGuid
// [0x010201C2] 
// Parameters infos:
// struct FString                 StatGuid                       ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::ClientRegisterHostStatGuid ( struct FString StatGuid )
{
	static UFunction* pFnClientRegisterHostStatGuid = NULL;

	if ( ! pFnClientRegisterHostStatGuid )
		pFnClientRegisterHostStatGuid = (UFunction*) UObject::GObjObjects()->Data[ 11719 ];

	APlayerController_execClientRegisterHostStatGuid_Parms ClientRegisterHostStatGuid_Parms;
	memcpy ( &ClientRegisterHostStatGuid_Parms.StatGuid, &StatGuid, 0x10 );

	this->ProcessEvent ( pFnClientRegisterHostStatGuid, &ClientRegisterHostStatGuid_Parms, NULL );
};

// Function Engine.PlayerController.RemoveAllDebugStrings
// [0x010209C3] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void APlayerController::eventRemoveAllDebugStrings ( )
{
	static UFunction* pFnRemoveAllDebugStrings = NULL;

	if ( ! pFnRemoveAllDebugStrings )
		pFnRemoveAllDebugStrings = (UFunction*) UObject::GObjObjects()->Data[ 11718 ];

	APlayerController_eventRemoveAllDebugStrings_Parms RemoveAllDebugStrings_Parms;

	this->ProcessEvent ( pFnRemoveAllDebugStrings, &RemoveAllDebugStrings_Parms, NULL );
};

// Function Engine.PlayerController.RemoveDebugText
// [0x010209C3] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class AActor*                  SrcActor                       ( CPF_Parm )

void APlayerController::eventRemoveDebugText ( class AActor* SrcActor )
{
	static UFunction* pFnRemoveDebugText = NULL;

	if ( ! pFnRemoveDebugText )
		pFnRemoveDebugText = (UFunction*) UObject::GObjObjects()->Data[ 11715 ];

	APlayerController_eventRemoveDebugText_Parms RemoveDebugText_Parms;
	RemoveDebugText_Parms.SrcActor = SrcActor;

	this->ProcessEvent ( pFnRemoveDebugText, &RemoveDebugText_Parms, NULL );
};

// Function Engine.PlayerController.AddDebugText
// [0x010249C3] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FString                 DebugText                      ( CPF_Parm | CPF_NeedCtorLink )
// class AActor*                  SrcActor                       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Offset                         ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 DesiredOffset                  ( CPF_OptionalParm | CPF_Parm )
// struct FColor                  TextColor                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipOverwriteCheck            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAbsoluteLocation              ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventAddDebugText ( struct FString DebugText, class AActor* SrcActor, float Duration, struct FVector Offset, struct FVector DesiredOffset, struct FColor TextColor, unsigned long bSkipOverwriteCheck, unsigned long bAbsoluteLocation )
{
	static UFunction* pFnAddDebugText = NULL;

	if ( ! pFnAddDebugText )
		pFnAddDebugText = (UFunction*) UObject::GObjObjects()->Data[ 11705 ];

	APlayerController_eventAddDebugText_Parms AddDebugText_Parms;
	memcpy ( &AddDebugText_Parms.DebugText, &DebugText, 0x10 );
	AddDebugText_Parms.SrcActor = SrcActor;
	AddDebugText_Parms.Duration = Duration;
	memcpy ( &AddDebugText_Parms.Offset, &Offset, 0xC );
	memcpy ( &AddDebugText_Parms.DesiredOffset, &DesiredOffset, 0xC );
	memcpy ( &AddDebugText_Parms.TextColor, &TextColor, 0x4 );
	AddDebugText_Parms.bSkipOverwriteCheck = bSkipOverwriteCheck;
	AddDebugText_Parms.bAbsoluteLocation = bAbsoluteLocation;

	this->ProcessEvent ( pFnAddDebugText, &AddDebugText_Parms, NULL );
};

// Function Engine.PlayerController.DrawDebugTextList
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// float                          RenderDelta                    ( CPF_Parm )

void APlayerController::DrawDebugTextList ( class UCanvas* Canvas, float RenderDelta )
{
	static UFunction* pFnDrawDebugTextList = NULL;

	if ( ! pFnDrawDebugTextList )
		pFnDrawDebugTextList = (UFunction*) UObject::GObjObjects()->Data[ 11691 ];

	APlayerController_execDrawDebugTextList_Parms DrawDebugTextList_Parms;
	DrawDebugTextList_Parms.Canvas = Canvas;
	DrawDebugTextList_Parms.RenderDelta = RenderDelta;

	this->ProcessEvent ( pFnDrawDebugTextList, &DrawDebugTextList_Parms, NULL );
};

// Function Engine.PlayerController.SendToConsole
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::SendToConsole ( struct FString Command )
{
	static UFunction* pFnSendToConsole = NULL;

	if ( ! pFnSendToConsole )
		pFnSendToConsole = (UFunction*) UObject::GObjObjects()->Data[ 11689 ];

	APlayerController_execSendToConsole_Parms SendToConsole_Parms;
	memcpy ( &SendToConsole_Parms.Command, &Command, 0x10 );

	this->ProcessEvent ( pFnSendToConsole, &SendToConsole_Parms, NULL );
};

// Function Engine.PlayerController.ConsoleKey
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )

void APlayerController::ConsoleKey ( struct FName Key )
{
	static UFunction* pFnConsoleKey = NULL;

	if ( ! pFnConsoleKey )
		pFnConsoleKey = (UFunction*) UObject::GObjObjects()->Data[ 11685 ];

	APlayerController_execConsoleKey_Parms ConsoleKey_Parms;
	memcpy ( &ConsoleKey_Parms.Key, &Key, 0x8 );

	this->ProcessEvent ( pFnConsoleKey, &ConsoleKey_Parms, NULL );
};

// Function Engine.PlayerController.OnDestroy
// [0x00020102] 
// Parameters infos:
// class USeqAct_Destroy*         Action                         ( CPF_Parm )

void APlayerController::OnDestroy ( class USeqAct_Destroy* Action )
{
	static UFunction* pFnOnDestroy = NULL;

	if ( ! pFnOnDestroy )
		pFnOnDestroy = (UFunction*) UObject::GObjObjects()->Data[ 11683 ];

	APlayerController_execOnDestroy_Parms OnDestroy_Parms;
	OnDestroy_Parms.Action = Action;

	this->ProcessEvent ( pFnOnDestroy, &OnDestroy_Parms, NULL );
};

// Function Engine.PlayerController.ClientStartNetworkedVoice
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientStartNetworkedVoice ( )
{
	static UFunction* pFnClientStartNetworkedVoice = NULL;

	if ( ! pFnClientStartNetworkedVoice )
		pFnClientStartNetworkedVoice = (UFunction*) UObject::GObjObjects()->Data[ 11681 ];

	APlayerController_execClientStartNetworkedVoice_Parms ClientStartNetworkedVoice_Parms;

	this->ProcessEvent ( pFnClientStartNetworkedVoice, &ClientStartNetworkedVoice_Parms, NULL );
};

// Function Engine.PlayerController.ClientStopNetworkedVoice
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientStopNetworkedVoice ( )
{
	static UFunction* pFnClientStopNetworkedVoice = NULL;

	if ( ! pFnClientStopNetworkedVoice )
		pFnClientStopNetworkedVoice = (UFunction*) UObject::GObjObjects()->Data[ 11679 ];

	APlayerController_execClientStopNetworkedVoice_Parms ClientStopNetworkedVoice_Parms;

	this->ProcessEvent ( pFnClientStopNetworkedVoice, &ClientStopNetworkedVoice_Parms, NULL );
};

// Function Engine.PlayerController.ClientAdjustMusicTrackVolume
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// class USeqAct_CrossFadeMusicTracks* MusicAction                    ( CPF_Parm )
// float                          AdjustVolumeDuration           ( CPF_Parm )
// float                          AdjustVolumeLevel              ( CPF_Parm )

void APlayerController::eventClientAdjustMusicTrackVolume ( class USeqAct_CrossFadeMusicTracks* MusicAction, float AdjustVolumeDuration, float AdjustVolumeLevel )
{
	static UFunction* pFnClientAdjustMusicTrackVolume = NULL;

	if ( ! pFnClientAdjustMusicTrackVolume )
		pFnClientAdjustMusicTrackVolume = (UFunction*) UObject::GObjObjects()->Data[ 11674 ];

	APlayerController_eventClientAdjustMusicTrackVolume_Parms ClientAdjustMusicTrackVolume_Parms;
	ClientAdjustMusicTrackVolume_Parms.MusicAction = MusicAction;
	ClientAdjustMusicTrackVolume_Parms.AdjustVolumeDuration = AdjustVolumeDuration;
	ClientAdjustMusicTrackVolume_Parms.AdjustVolumeLevel = AdjustVolumeLevel;

	this->ProcessEvent ( pFnClientAdjustMusicTrackVolume, &ClientAdjustMusicTrackVolume_Parms, NULL );
};

// Function Engine.PlayerController.ClientFadeOutMusicTrack
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// class USeqAct_CrossFadeMusicTracks* MusicAction                    ( CPF_Parm )
// float                          FadeOutTime                    ( CPF_Parm )
// float                          FadeOutVolumeLevel             ( CPF_Parm )

void APlayerController::eventClientFadeOutMusicTrack ( class USeqAct_CrossFadeMusicTracks* MusicAction, float FadeOutTime, float FadeOutVolumeLevel )
{
	static UFunction* pFnClientFadeOutMusicTrack = NULL;

	if ( ! pFnClientFadeOutMusicTrack )
		pFnClientFadeOutMusicTrack = (UFunction*) UObject::GObjObjects()->Data[ 11669 ];

	APlayerController_eventClientFadeOutMusicTrack_Parms ClientFadeOutMusicTrack_Parms;
	ClientFadeOutMusicTrack_Parms.MusicAction = MusicAction;
	ClientFadeOutMusicTrack_Parms.FadeOutTime = FadeOutTime;
	ClientFadeOutMusicTrack_Parms.FadeOutVolumeLevel = FadeOutVolumeLevel;

	this->ProcessEvent ( pFnClientFadeOutMusicTrack, &ClientFadeOutMusicTrack_Parms, NULL );
};

// Function Engine.PlayerController.ClientCrossFadeMusicTrack
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// class USeqAct_CrossFadeMusicTracks* MusicAction                    ( CPF_Parm )
// struct FMusicTrackStruct       MusicTrack                     ( CPF_Parm )

void APlayerController::eventClientCrossFadeMusicTrack ( class USeqAct_CrossFadeMusicTracks* MusicAction, struct FMusicTrackStruct MusicTrack )
{
	static UFunction* pFnClientCrossFadeMusicTrack = NULL;

	if ( ! pFnClientCrossFadeMusicTrack )
		pFnClientCrossFadeMusicTrack = (UFunction*) UObject::GObjObjects()->Data[ 11665 ];

	APlayerController_eventClientCrossFadeMusicTrack_Parms ClientCrossFadeMusicTrack_Parms;
	ClientCrossFadeMusicTrack_Parms.MusicAction = MusicAction;
	memcpy ( &ClientCrossFadeMusicTrack_Parms.MusicTrack, &MusicTrack, 0x24 );

	this->ProcessEvent ( pFnClientCrossFadeMusicTrack, &ClientCrossFadeMusicTrack_Parms, NULL );
};

// Function Engine.PlayerController.ServerSendMusicInfo
// [0x002200C2] 
// Parameters infos:

void APlayerController::ServerSendMusicInfo ( )
{
	static UFunction* pFnServerSendMusicInfo = NULL;

	if ( ! pFnServerSendMusicInfo )
		pFnServerSendMusicInfo = (UFunction*) UObject::GObjObjects()->Data[ 11650 ];

	APlayerController_execServerSendMusicInfo_Parms ServerSendMusicInfo_Parms;

	this->ProcessEvent ( pFnServerSendMusicInfo, &ServerSendMusicInfo_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetHostUniqueId
// [0x010201C0] 
// Parameters infos:
// struct FUniqueNetId            InHostId                       ( CPF_Parm )

void APlayerController::ClientSetHostUniqueId ( struct FUniqueNetId InHostId )
{
	static UFunction* pFnClientSetHostUniqueId = NULL;

	if ( ! pFnClientSetHostUniqueId )
		pFnClientSetHostUniqueId = (UFunction*) UObject::GObjObjects()->Data[ 11648 ];

	APlayerController_execClientSetHostUniqueId_Parms ClientSetHostUniqueId_Parms;
	memcpy ( &ClientSetHostUniqueId_Parms.InHostId, &InHostId, 0x8 );

	this->ProcessEvent ( pFnClientSetHostUniqueId, &ClientSetHostUniqueId_Parms, NULL );
};

// Function Engine.PlayerController.ClientWriteLeaderboardStats
// [0x010201C0] 
// Parameters infos:
// class UClass*                  OnlineStatsWriteClass          ( CPF_Parm )

void APlayerController::ClientWriteLeaderboardStats ( class UClass* OnlineStatsWriteClass )
{
	static UFunction* pFnClientWriteLeaderboardStats = NULL;

	if ( ! pFnClientWriteLeaderboardStats )
		pFnClientWriteLeaderboardStats = (UFunction*) UObject::GObjObjects()->Data[ 11646 ];

	APlayerController_execClientWriteLeaderboardStats_Parms ClientWriteLeaderboardStats_Parms;
	ClientWriteLeaderboardStats_Parms.OnlineStatsWriteClass = OnlineStatsWriteClass;

	this->ProcessEvent ( pFnClientWriteLeaderboardStats, &ClientWriteLeaderboardStats_Parms, NULL );
};

// Function Engine.PlayerController.ClientWriteOnlinePlayerScores
// [0x010201C2] 
// Parameters infos:
// int                            LeaderboardId                  ( CPF_Parm )

void APlayerController::ClientWriteOnlinePlayerScores ( int LeaderboardId )
{
	static UFunction* pFnClientWriteOnlinePlayerScores = NULL;

	if ( ! pFnClientWriteOnlinePlayerScores )
		pFnClientWriteOnlinePlayerScores = (UFunction*) UObject::GObjObjects()->Data[ 11632 ];

	APlayerController_execClientWriteOnlinePlayerScores_Parms ClientWriteOnlinePlayerScores_Parms;
	ClientWriteOnlinePlayerScores_Parms.LeaderboardId = LeaderboardId;

	this->ProcessEvent ( pFnClientWriteOnlinePlayerScores, &ClientWriteOnlinePlayerScores_Parms, NULL );
};

// Function Engine.PlayerController.ClientArbitratedMatchEnded
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientArbitratedMatchEnded ( )
{
	static UFunction* pFnClientArbitratedMatchEnded = NULL;

	if ( ! pFnClientArbitratedMatchEnded )
		pFnClientArbitratedMatchEnded = (UFunction*) UObject::GObjObjects()->Data[ 11631 ];

	APlayerController_execClientArbitratedMatchEnded_Parms ClientArbitratedMatchEnded_Parms;

	this->ProcessEvent ( pFnClientArbitratedMatchEnded, &ClientArbitratedMatchEnded_Parms, NULL );
};

// Function Engine.PlayerController.NotifyNotEnoughSpaceInInvite
// [0x00020002] 
// Parameters infos:

void APlayerController::NotifyNotEnoughSpaceInInvite ( )
{
	static UFunction* pFnNotifyNotEnoughSpaceInInvite = NULL;

	if ( ! pFnNotifyNotEnoughSpaceInInvite )
		pFnNotifyNotEnoughSpaceInInvite = (UFunction*) UObject::GObjObjects()->Data[ 11630 ];

	APlayerController_execNotifyNotEnoughSpaceInInvite_Parms NotifyNotEnoughSpaceInInvite_Parms;

	this->ProcessEvent ( pFnNotifyNotEnoughSpaceInInvite, &NotifyNotEnoughSpaceInInvite_Parms, NULL );
};

// Function Engine.PlayerController.NotifyNotAllPlayersCanJoinInvite
// [0x00020002] 
// Parameters infos:

void APlayerController::NotifyNotAllPlayersCanJoinInvite ( )
{
	static UFunction* pFnNotifyNotAllPlayersCanJoinInvite = NULL;

	if ( ! pFnNotifyNotAllPlayersCanJoinInvite )
		pFnNotifyNotAllPlayersCanJoinInvite = (UFunction*) UObject::GObjObjects()->Data[ 11629 ];

	APlayerController_execNotifyNotAllPlayersCanJoinInvite_Parms NotifyNotAllPlayersCanJoinInvite_Parms;

	this->ProcessEvent ( pFnNotifyNotAllPlayersCanJoinInvite, &NotifyNotAllPlayersCanJoinInvite_Parms, NULL );
};

// Function Engine.PlayerController.NotifyInviteFailed
// [0x00020002] 
// Parameters infos:

void APlayerController::NotifyInviteFailed ( )
{
	static UFunction* pFnNotifyInviteFailed = NULL;

	if ( ! pFnNotifyInviteFailed )
		pFnNotifyInviteFailed = (UFunction*) UObject::GObjObjects()->Data[ 11628 ];

	APlayerController_execNotifyInviteFailed_Parms NotifyInviteFailed_Parms;

	this->ProcessEvent ( pFnNotifyInviteFailed, &NotifyInviteFailed_Parms, NULL );
};

// Function Engine.PlayerController.OnInviteJoinComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnInviteJoinComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnInviteJoinComplete = NULL;

	if ( ! pFnOnInviteJoinComplete )
		pFnOnInviteJoinComplete = (UFunction*) UObject::GObjObjects()->Data[ 11617 ];

	APlayerController_execOnInviteJoinComplete_Parms OnInviteJoinComplete_Parms;
	memcpy ( &OnInviteJoinComplete_Parms.SessionName, &SessionName, 0x8 );
	OnInviteJoinComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnInviteJoinComplete, &OnInviteJoinComplete_Parms, NULL );
};

// Function Engine.PlayerController.OnDestroyForInviteComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnDestroyForInviteComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDestroyForInviteComplete = NULL;

	if ( ! pFnOnDestroyForInviteComplete )
		pFnOnDestroyForInviteComplete = (UFunction*) UObject::GObjObjects()->Data[ 11614 ];

	APlayerController_execOnDestroyForInviteComplete_Parms OnDestroyForInviteComplete_Parms;
	memcpy ( &OnDestroyForInviteComplete_Parms.SessionName, &SessionName, 0x8 );
	OnDestroyForInviteComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDestroyForInviteComplete, &OnDestroyForInviteComplete_Parms, NULL );
};

// Function Engine.PlayerController.OnEndForInviteComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnEndForInviteComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnEndForInviteComplete = NULL;

	if ( ! pFnOnEndForInviteComplete )
		pFnOnEndForInviteComplete = (UFunction*) UObject::GObjObjects()->Data[ 11609 ];

	APlayerController_execOnEndForInviteComplete_Parms OnEndForInviteComplete_Parms;
	memcpy ( &OnEndForInviteComplete_Parms.SessionName, &SessionName, 0x8 );
	OnEndForInviteComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnEndForInviteComplete, &OnEndForInviteComplete_Parms, NULL );
};

// Function Engine.PlayerController.ClearInviteDelegates
// [0x00020002] 
// Parameters infos:

void APlayerController::ClearInviteDelegates ( )
{
	static UFunction* pFnClearInviteDelegates = NULL;

	if ( ! pFnClearInviteDelegates )
		pFnClearInviteDelegates = (UFunction*) UObject::GObjObjects()->Data[ 11608 ];

	APlayerController_execClearInviteDelegates_Parms ClearInviteDelegates_Parms;

	this->ProcessEvent ( pFnClearInviteDelegates, &ClearInviteDelegates_Parms, NULL );
};

// Function Engine.PlayerController.CanAllPlayersPlayOnline
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanAllPlayersPlayOnline ( )
{
	static UFunction* pFnCanAllPlayersPlayOnline = NULL;

	if ( ! pFnCanAllPlayersPlayOnline )
		pFnCanAllPlayersPlayOnline = (UFunction*) UObject::GObjObjects()->Data[ 11602 ];

	APlayerController_execCanAllPlayersPlayOnline_Parms CanAllPlayersPlayOnline_Parms;

	this->ProcessEvent ( pFnCanAllPlayersPlayOnline, &CanAllPlayersPlayOnline_Parms, NULL );

	return CanAllPlayersPlayOnline_Parms.ReturnValue;
};

// Function Engine.PlayerController.InviteHasEnoughSpace
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlineGameSettings*     InviteSettings                 ( CPF_Parm )

bool APlayerController::InviteHasEnoughSpace ( class UOnlineGameSettings* InviteSettings )
{
	static UFunction* pFnInviteHasEnoughSpace = NULL;

	if ( ! pFnInviteHasEnoughSpace )
		pFnInviteHasEnoughSpace = (UFunction*) UObject::GObjObjects()->Data[ 11597 ];

	APlayerController_execInviteHasEnoughSpace_Parms InviteHasEnoughSpace_Parms;
	InviteHasEnoughSpace_Parms.InviteSettings = InviteSettings;

	this->ProcessEvent ( pFnInviteHasEnoughSpace, &InviteHasEnoughSpace_Parms, NULL );

	return InviteHasEnoughSpace_Parms.ReturnValue;
};

// Function Engine.PlayerController.OnGameInviteAccepted
// [0x00420002] 
// Parameters infos:
// struct FOnlineGameSearchResult InviteResult                   ( CPF_Const | CPF_Parm | CPF_OutParm )

void APlayerController::OnGameInviteAccepted ( struct FOnlineGameSearchResult* InviteResult )
{
	static UFunction* pFnOnGameInviteAccepted = NULL;

	if ( ! pFnOnGameInviteAccepted )
		pFnOnGameInviteAccepted = (UFunction*) UObject::GObjObjects()->Data[ 11586 ];

	APlayerController_execOnGameInviteAccepted_Parms OnGameInviteAccepted_Parms;

	this->ProcessEvent ( pFnOnGameInviteAccepted, &OnGameInviteAccepted_Parms, NULL );

	if ( InviteResult )
		memcpy ( InviteResult, &OnGameInviteAccepted_Parms.InviteResult, 0x10 );
};

// Function Engine.PlayerController.ServerRegisteredForArbitration
// [0x002200C2] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::ServerRegisteredForArbitration ( unsigned long bWasSuccessful )
{
	static UFunction* pFnServerRegisteredForArbitration = NULL;

	if ( ! pFnServerRegisteredForArbitration )
		pFnServerRegisteredForArbitration = (UFunction*) UObject::GObjObjects()->Data[ 11584 ];

	APlayerController_execServerRegisteredForArbitration_Parms ServerRegisteredForArbitration_Parms;
	ServerRegisteredForArbitration_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnServerRegisteredForArbitration, &ServerRegisteredForArbitration_Parms, NULL );
};

// Function Engine.PlayerController.OnArbitrationRegisterComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnArbitrationRegisterComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnArbitrationRegisterComplete = NULL;

	if ( ! pFnOnArbitrationRegisterComplete )
		pFnOnArbitrationRegisterComplete = (UFunction*) UObject::GObjObjects()->Data[ 11581 ];

	APlayerController_execOnArbitrationRegisterComplete_Parms OnArbitrationRegisterComplete_Parms;
	memcpy ( &OnArbitrationRegisterComplete_Parms.SessionName, &SessionName, 0x8 );
	OnArbitrationRegisterComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnArbitrationRegisterComplete, &OnArbitrationRegisterComplete_Parms, NULL );
};

// Function Engine.PlayerController.ClientRegisterForArbitration
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientRegisterForArbitration ( )
{
	static UFunction* pFnClientRegisterForArbitration = NULL;

	if ( ! pFnClientRegisterForArbitration )
		pFnClientRegisterForArbitration = (UFunction*) UObject::GObjObjects()->Data[ 11578 ];

	APlayerController_execClientRegisterForArbitration_Parms ClientRegisterForArbitration_Parms;

	this->ProcessEvent ( pFnClientRegisterForArbitration, &ClientRegisterForArbitration_Parms, NULL );
};

// Function Engine.PlayerController.ClientWasKicked
// [0x010209C0] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventClientWasKicked ( )
{
	static UFunction* pFnClientWasKicked = NULL;

	if ( ! pFnClientWasKicked )
		pFnClientWasKicked = (UFunction*) UObject::GObjObjects()->Data[ 11577 ];

	APlayerController_eventClientWasKicked_Parms ClientWasKicked_Parms;

	this->ProcessEvent ( pFnClientWasKicked, &ClientWasKicked_Parms, NULL );
};

// Function Engine.PlayerController.IsShowingSubtitles
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsShowingSubtitles ( )
{
	static UFunction* pFnIsShowingSubtitles = NULL;

	if ( ! pFnIsShowingSubtitles )
		pFnIsShowingSubtitles = (UFunction*) UObject::GObjObjects()->Data[ 11575 ];

	APlayerController_execIsShowingSubtitles_Parms IsShowingSubtitles_Parms;

	pFnIsShowingSubtitles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsShowingSubtitles, &IsShowingSubtitles_Parms, NULL );

	pFnIsShowingSubtitles->FunctionFlags |= 0x400;

	return IsShowingSubtitles_Parms.ReturnValue;
};

// Function Engine.PlayerController.SetShowSubtitles
// [0x00020700] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bValue                         ( CPF_Parm )

void APlayerController::SetShowSubtitles ( unsigned long bValue )
{
	static UFunction* pFnSetShowSubtitles = NULL;

	if ( ! pFnSetShowSubtitles )
		pFnSetShowSubtitles = (UFunction*) UObject::GObjObjects()->Data[ 11573 ];

	APlayerController_execSetShowSubtitles_Parms SetShowSubtitles_Parms;
	SetShowSubtitles_Parms.bValue = bValue;

	pFnSetShowSubtitles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetShowSubtitles, &SetShowSubtitles_Parms, NULL );

	pFnSetShowSubtitles->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.NotifyDirectorControl
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bNowControlling                ( CPF_Parm )

void APlayerController::eventNotifyDirectorControl ( unsigned long bNowControlling )
{
	static UFunction* pFnNotifyDirectorControl = NULL;

	if ( ! pFnNotifyDirectorControl )
		pFnNotifyDirectorControl = (UFunction*) UObject::GObjObjects()->Data[ 11571 ];

	APlayerController_eventNotifyDirectorControl_Parms NotifyDirectorControl_Parms;
	NotifyDirectorControl_Parms.bNowControlling = bNowControlling;

	this->ProcessEvent ( pFnNotifyDirectorControl, &NotifyDirectorControl_Parms, NULL );
};

// Function Engine.PlayerController.ServerUnmutePlayer
// [0x002208C2] ( FUNC_Event )
// Parameters infos:
// struct FUniqueNetId            PlayerNetId                    ( CPF_Parm )

void APlayerController::eventServerUnmutePlayer ( struct FUniqueNetId PlayerNetId )
{
	static UFunction* pFnServerUnmutePlayer = NULL;

	if ( ! pFnServerUnmutePlayer )
		pFnServerUnmutePlayer = (UFunction*) UObject::GObjObjects()->Data[ 11567 ];

	APlayerController_eventServerUnmutePlayer_Parms ServerUnmutePlayer_Parms;
	memcpy ( &ServerUnmutePlayer_Parms.PlayerNetId, &PlayerNetId, 0x8 );

	this->ProcessEvent ( pFnServerUnmutePlayer, &ServerUnmutePlayer_Parms, NULL );
};

// Function Engine.PlayerController.ServerMutePlayer
// [0x002208C2] ( FUNC_Event )
// Parameters infos:
// struct FUniqueNetId            PlayerNetId                    ( CPF_Parm )

void APlayerController::eventServerMutePlayer ( struct FUniqueNetId PlayerNetId )
{
	static UFunction* pFnServerMutePlayer = NULL;

	if ( ! pFnServerMutePlayer )
		pFnServerMutePlayer = (UFunction*) UObject::GObjObjects()->Data[ 11564 ];

	APlayerController_eventServerMutePlayer_Parms ServerMutePlayer_Parms;
	memcpy ( &ServerMutePlayer_Parms.PlayerNetId, &PlayerNetId, 0x8 );

	this->ProcessEvent ( pFnServerMutePlayer, &ServerMutePlayer_Parms, NULL );
};

// Function Engine.PlayerController.GameplayUnmutePlayer
// [0x00020002] 
// Parameters infos:
// struct FUniqueNetId            PlayerNetId                    ( CPF_Parm )

void APlayerController::GameplayUnmutePlayer ( struct FUniqueNetId PlayerNetId )
{
	static UFunction* pFnGameplayUnmutePlayer = NULL;

	if ( ! pFnGameplayUnmutePlayer )
		pFnGameplayUnmutePlayer = (UFunction*) UObject::GObjObjects()->Data[ 11560 ];

	APlayerController_execGameplayUnmutePlayer_Parms GameplayUnmutePlayer_Parms;
	memcpy ( &GameplayUnmutePlayer_Parms.PlayerNetId, &PlayerNetId, 0x8 );

	this->ProcessEvent ( pFnGameplayUnmutePlayer, &GameplayUnmutePlayer_Parms, NULL );
};

// Function Engine.PlayerController.GameplayMutePlayer
// [0x00020002] 
// Parameters infos:
// struct FUniqueNetId            PlayerNetId                    ( CPF_Parm )

void APlayerController::GameplayMutePlayer ( struct FUniqueNetId PlayerNetId )
{
	static UFunction* pFnGameplayMutePlayer = NULL;

	if ( ! pFnGameplayMutePlayer )
		pFnGameplayMutePlayer = (UFunction*) UObject::GObjObjects()->Data[ 11558 ];

	APlayerController_execGameplayMutePlayer_Parms GameplayMutePlayer_Parms;
	memcpy ( &GameplayMutePlayer_Parms.PlayerNetId, &PlayerNetId, 0x8 );

	this->ProcessEvent ( pFnGameplayMutePlayer, &GameplayMutePlayer_Parms, NULL );
};

// Function Engine.PlayerController.ClientUnmutePlayer
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// struct FUniqueNetId            PlayerNetId                    ( CPF_Parm )

void APlayerController::eventClientUnmutePlayer ( struct FUniqueNetId PlayerNetId )
{
	static UFunction* pFnClientUnmutePlayer = NULL;

	if ( ! pFnClientUnmutePlayer )
		pFnClientUnmutePlayer = (UFunction*) UObject::GObjObjects()->Data[ 11553 ];

	APlayerController_eventClientUnmutePlayer_Parms ClientUnmutePlayer_Parms;
	memcpy ( &ClientUnmutePlayer_Parms.PlayerNetId, &PlayerNetId, 0x8 );

	this->ProcessEvent ( pFnClientUnmutePlayer, &ClientUnmutePlayer_Parms, NULL );
};

// Function Engine.PlayerController.ClientMutePlayer
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// struct FUniqueNetId            PlayerNetId                    ( CPF_Parm )

void APlayerController::eventClientMutePlayer ( struct FUniqueNetId PlayerNetId )
{
	static UFunction* pFnClientMutePlayer = NULL;

	if ( ! pFnClientMutePlayer )
		pFnClientMutePlayer = (UFunction*) UObject::GObjObjects()->Data[ 11548 ];

	APlayerController_eventClientMutePlayer_Parms ClientMutePlayer_Parms;
	memcpy ( &ClientMutePlayer_Parms.PlayerNetId, &PlayerNetId, 0x8 );

	this->ProcessEvent ( pFnClientMutePlayer, &ClientMutePlayer_Parms, NULL );
};

// Function Engine.PlayerController.ClientVoiceHandshakeComplete
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientVoiceHandshakeComplete ( )
{
	static UFunction* pFnClientVoiceHandshakeComplete = NULL;

	if ( ! pFnClientVoiceHandshakeComplete )
		pFnClientVoiceHandshakeComplete = (UFunction*) UObject::GObjObjects()->Data[ 11546 ];

	APlayerController_execClientVoiceHandshakeComplete_Parms ClientVoiceHandshakeComplete_Parms;

	this->ProcessEvent ( pFnClientVoiceHandshakeComplete, &ClientVoiceHandshakeComplete_Parms, NULL );
};

// Function Engine.PlayerController.GetPlayerControllerFromNetId
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerNetId                    ( CPF_Parm )

class APlayerController* APlayerController::GetPlayerControllerFromNetId ( struct FUniqueNetId PlayerNetId )
{
	static UFunction* pFnGetPlayerControllerFromNetId = NULL;

	if ( ! pFnGetPlayerControllerFromNetId )
		pFnGetPlayerControllerFromNetId = (UFunction*) UObject::GObjObjects()->Data[ 11543 ];

	APlayerController_execGetPlayerControllerFromNetId_Parms GetPlayerControllerFromNetId_Parms;
	memcpy ( &GetPlayerControllerFromNetId_Parms.PlayerNetId, &PlayerNetId, 0x8 );

	pFnGetPlayerControllerFromNetId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerControllerFromNetId, &GetPlayerControllerFromNetId_Parms, NULL );

	pFnGetPlayerControllerFromNetId->FunctionFlags |= 0x400;

	return GetPlayerControllerFromNetId_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientSetOnlineStatus
// [0x010201C0] 
// Parameters infos:

void APlayerController::ClientSetOnlineStatus ( )
{
	static UFunction* pFnClientSetOnlineStatus = NULL;

	if ( ! pFnClientSetOnlineStatus )
		pFnClientSetOnlineStatus = (UFunction*) UObject::GObjObjects()->Data[ 11542 ];

	APlayerController_execClientSetOnlineStatus_Parms ClientSetOnlineStatus_Parms;

	this->ProcessEvent ( pFnClientSetOnlineStatus, &ClientSetOnlineStatus_Parms, NULL );
};

// Function Engine.PlayerController.SeamlessTravelFrom
// [0x00020002] 
// Parameters infos:
// class APlayerController*       OldPC                          ( CPF_Parm )

void APlayerController::SeamlessTravelFrom ( class APlayerController* OldPC )
{
	static UFunction* pFnSeamlessTravelFrom = NULL;

	if ( ! pFnSeamlessTravelFrom )
		pFnSeamlessTravelFrom = (UFunction*) UObject::GObjObjects()->Data[ 11540 ];

	APlayerController_execSeamlessTravelFrom_Parms SeamlessTravelFrom_Parms;
	SeamlessTravelFrom_Parms.OldPC = OldPC;

	this->ProcessEvent ( pFnSeamlessTravelFrom, &SeamlessTravelFrom_Parms, NULL );
};

// Function Engine.PlayerController.SeamlessTravelTo
// [0x00020000] 
// Parameters infos:
// class APlayerController*       NewPC                          ( CPF_Parm )

void APlayerController::SeamlessTravelTo ( class APlayerController* NewPC )
{
	static UFunction* pFnSeamlessTravelTo = NULL;

	if ( ! pFnSeamlessTravelTo )
		pFnSeamlessTravelTo = (UFunction*) UObject::GObjObjects()->Data[ 11538 ];

	APlayerController_execSeamlessTravelTo_Parms SeamlessTravelTo_Parms;
	SeamlessTravelTo_Parms.NewPC = NewPC;

	this->ProcessEvent ( pFnSeamlessTravelTo, &SeamlessTravelTo_Parms, NULL );
};

// Function Engine.PlayerController.GetSeamlessTravelActorList
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bToEntry                       ( CPF_Parm )
// struct TArray<class AActor*>   ActorList                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void APlayerController::eventGetSeamlessTravelActorList ( unsigned long bToEntry, struct TArray<class AActor*>* ActorList )
{
	static UFunction* pFnGetSeamlessTravelActorList = NULL;

	if ( ! pFnGetSeamlessTravelActorList )
		pFnGetSeamlessTravelActorList = (UFunction*) UObject::GObjObjects()->Data[ 11533 ];

	APlayerController_eventGetSeamlessTravelActorList_Parms GetSeamlessTravelActorList_Parms;
	GetSeamlessTravelActorList_Parms.bToEntry = bToEntry;

	this->ProcessEvent ( pFnGetSeamlessTravelActorList, &GetSeamlessTravelActorList_Parms, NULL );

	if ( ActorList )
		memcpy ( ActorList, &GetSeamlessTravelActorList_Parms.ActorList, 0x10 );
};

// Function Engine.PlayerController.IsPlayerMuted
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            Sender                         ( CPF_Const | CPF_Parm | CPF_OutParm )

bool APlayerController::IsPlayerMuted ( struct FUniqueNetId* Sender )
{
	static UFunction* pFnIsPlayerMuted = NULL;

	if ( ! pFnIsPlayerMuted )
		pFnIsPlayerMuted = (UFunction*) UObject::GObjObjects()->Data[ 11530 ];

	APlayerController_execIsPlayerMuted_Parms IsPlayerMuted_Parms;

	pFnIsPlayerMuted->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayerMuted, &IsPlayerMuted_Parms, NULL );

	pFnIsPlayerMuted->FunctionFlags |= 0x400;

	if ( Sender )
		memcpy ( Sender, &IsPlayerMuted_Parms.Sender, 0x8 );

	return IsPlayerMuted_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetUIController
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UUIInteraction*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIInteraction* APlayerController::GetUIController ( )
{
	static UFunction* pFnGetUIController = NULL;

	if ( ! pFnGetUIController )
		pFnGetUIController = (UFunction*) UObject::GObjObjects()->Data[ 10414 ];

	APlayerController_execGetUIController_Parms GetUIController_Parms;

	this->ProcessEvent ( pFnGetUIController, &GetUIController_Parms, NULL );

	return GetUIController_Parms.ReturnValue;
};

// Function Engine.PlayerController.SaveActorConfig
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   actorName                      ( CPF_Parm | CPF_CoerceParm )

void APlayerController::SaveActorConfig ( struct FName actorName )
{
	static UFunction* pFnSaveActorConfig = NULL;

	if ( ! pFnSaveActorConfig )
		pFnSaveActorConfig = (UFunction*) UObject::GObjObjects()->Data[ 11523 ];

	APlayerController_execSaveActorConfig_Parms SaveActorConfig_Parms;
	memcpy ( &SaveActorConfig_Parms.actorName, &actorName, 0x8 );

	this->ProcessEvent ( pFnSaveActorConfig, &SaveActorConfig_Parms, NULL );
};

// Function Engine.PlayerController.SaveClassConfig
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 ClassName                      ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void APlayerController::SaveClassConfig ( struct FString ClassName )
{
	static UFunction* pFnSaveClassConfig = NULL;

	if ( ! pFnSaveClassConfig )
		pFnSaveClassConfig = (UFunction*) UObject::GObjObjects()->Data[ 11520 ];

	APlayerController_execSaveClassConfig_Parms SaveClassConfig_Parms;
	memcpy ( &SaveClassConfig_Parms.ClassName, &ClassName, 0x10 );

	this->ProcessEvent ( pFnSaveClassConfig, &SaveClassConfig_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetBlockOnAsyncLoading
// [0x010209C2] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventClientSetBlockOnAsyncLoading ( )
{
	static UFunction* pFnClientSetBlockOnAsyncLoading = NULL;

	if ( ! pFnClientSetBlockOnAsyncLoading )
		pFnClientSetBlockOnAsyncLoading = (UFunction*) UObject::GObjObjects()->Data[ 11518 ];

	APlayerController_eventClientSetBlockOnAsyncLoading_Parms ClientSetBlockOnAsyncLoading_Parms;

	this->ProcessEvent ( pFnClientSetBlockOnAsyncLoading, &ClientSetBlockOnAsyncLoading_Parms, NULL );
};

// Function Engine.PlayerController.ClientFlushLevelStreaming
// [0x01020DC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void APlayerController::eventClientFlushLevelStreaming ( )
{
	static UFunction* pFnClientFlushLevelStreaming = NULL;

	if ( ! pFnClientFlushLevelStreaming )
		pFnClientFlushLevelStreaming = (UFunction*) UObject::GObjObjects()->Data[ 11517 ];

	APlayerController_eventClientFlushLevelStreaming_Parms ClientFlushLevelStreaming_Parms;

	pFnClientFlushLevelStreaming->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientFlushLevelStreaming, &ClientFlushLevelStreaming_Parms, NULL );

	pFnClientFlushLevelStreaming->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClientCancelPendingMapChange
// [0x010209C2] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventClientCancelPendingMapChange ( )
{
	static UFunction* pFnClientCancelPendingMapChange = NULL;

	if ( ! pFnClientCancelPendingMapChange )
		pFnClientCancelPendingMapChange = (UFunction*) UObject::GObjObjects()->Data[ 11515 ];

	APlayerController_eventClientCancelPendingMapChange_Parms ClientCancelPendingMapChange_Parms;

	this->ProcessEvent ( pFnClientCancelPendingMapChange, &ClientCancelPendingMapChange_Parms, NULL );
};

// Function Engine.PlayerController.ClientCommitMapChange
// [0x010209C2] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventClientCommitMapChange ( )
{
	static UFunction* pFnClientCommitMapChange = NULL;

	if ( ! pFnClientCommitMapChange )
		pFnClientCommitMapChange = (UFunction*) UObject::GObjObjects()->Data[ 11513 ];

	APlayerController_eventClientCommitMapChange_Parms ClientCommitMapChange_Parms;

	this->ProcessEvent ( pFnClientCommitMapChange, &ClientCommitMapChange_Parms, NULL );
};

// Function Engine.PlayerController.DelayedPrepareMapChange
// [0x00020002] 
// Parameters infos:

void APlayerController::DelayedPrepareMapChange ( )
{
	static UFunction* pFnDelayedPrepareMapChange = NULL;

	if ( ! pFnDelayedPrepareMapChange )
		pFnDelayedPrepareMapChange = (UFunction*) UObject::GObjObjects()->Data[ 11509 ];

	APlayerController_execDelayedPrepareMapChange_Parms DelayedPrepareMapChange_Parms;

	this->ProcessEvent ( pFnDelayedPrepareMapChange, &DelayedPrepareMapChange_Parms, NULL );
};

// Function Engine.PlayerController.ClientPrepareMapChange
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// struct FName                   LevelName                      ( CPF_Parm )
// unsigned long                  bFirst                         ( CPF_Parm )
// unsigned long                  bLast                          ( CPF_Parm )

void APlayerController::eventClientPrepareMapChange ( struct FName LevelName, unsigned long bFirst, unsigned long bLast )
{
	static UFunction* pFnClientPrepareMapChange = NULL;

	if ( ! pFnClientPrepareMapChange )
		pFnClientPrepareMapChange = (UFunction*) UObject::GObjObjects()->Data[ 11504 ];

	APlayerController_eventClientPrepareMapChange_Parms ClientPrepareMapChange_Parms;
	memcpy ( &ClientPrepareMapChange_Parms.LevelName, &LevelName, 0x8 );
	ClientPrepareMapChange_Parms.bFirst = bFirst;
	ClientPrepareMapChange_Parms.bLast = bLast;

	this->ProcessEvent ( pFnClientPrepareMapChange, &ClientPrepareMapChange_Parms, NULL );
};

// Function Engine.PlayerController.ServerUpdateLevelVisibility
// [0x00220CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )
// unsigned long                  bIsVisible                     ( CPF_Parm )

void APlayerController::eventServerUpdateLevelVisibility ( struct FName PackageName, unsigned long bIsVisible )
{
	static UFunction* pFnServerUpdateLevelVisibility = NULL;

	if ( ! pFnServerUpdateLevelVisibility )
		pFnServerUpdateLevelVisibility = (UFunction*) UObject::GObjObjects()->Data[ 11501 ];

	APlayerController_eventServerUpdateLevelVisibility_Parms ServerUpdateLevelVisibility_Parms;
	memcpy ( &ServerUpdateLevelVisibility_Parms.PackageName, &PackageName, 0x8 );
	ServerUpdateLevelVisibility_Parms.bIsVisible = bIsVisible;

	pFnServerUpdateLevelVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerUpdateLevelVisibility, &ServerUpdateLevelVisibility_Parms, NULL );

	pFnServerUpdateLevelVisibility->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClientUpdateLevelStreamingStatus
// [0x010205C0] ( FUNC_Native )
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )
// unsigned long                  bNewShouldBeLoaded             ( CPF_Parm )
// unsigned long                  bNewShouldBeVisible            ( CPF_Parm )
// unsigned long                  bNewShouldBlockOnLoad          ( CPF_Parm )

void APlayerController::ClientUpdateLevelStreamingStatus ( struct FName PackageName, unsigned long bNewShouldBeLoaded, unsigned long bNewShouldBeVisible, unsigned long bNewShouldBlockOnLoad )
{
	static UFunction* pFnClientUpdateLevelStreamingStatus = NULL;

	if ( ! pFnClientUpdateLevelStreamingStatus )
		pFnClientUpdateLevelStreamingStatus = (UFunction*) UObject::GObjObjects()->Data[ 11496 ];

	APlayerController_execClientUpdateLevelStreamingStatus_Parms ClientUpdateLevelStreamingStatus_Parms;
	memcpy ( &ClientUpdateLevelStreamingStatus_Parms.PackageName, &PackageName, 0x8 );
	ClientUpdateLevelStreamingStatus_Parms.bNewShouldBeLoaded = bNewShouldBeLoaded;
	ClientUpdateLevelStreamingStatus_Parms.bNewShouldBeVisible = bNewShouldBeVisible;
	ClientUpdateLevelStreamingStatus_Parms.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;

	pFnClientUpdateLevelStreamingStatus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientUpdateLevelStreamingStatus, &ClientUpdateLevelStreamingStatus_Parms, NULL );

	pFnClientUpdateLevelStreamingStatus->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.LevelStreamingStatusChanged
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class ULevelStreaming*         LevelObject                    ( CPF_Parm )
// unsigned long                  bNewShouldBeLoaded             ( CPF_Parm )
// unsigned long                  bNewShouldBeVisible            ( CPF_Parm )
// unsigned long                  bNewShouldBlockOnLoad          ( CPF_Parm )

void APlayerController::eventLevelStreamingStatusChanged ( class ULevelStreaming* LevelObject, unsigned long bNewShouldBeLoaded, unsigned long bNewShouldBeVisible, unsigned long bNewShouldBlockOnLoad )
{
	static UFunction* pFnLevelStreamingStatusChanged = NULL;

	if ( ! pFnLevelStreamingStatusChanged )
		pFnLevelStreamingStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 11490 ];

	APlayerController_eventLevelStreamingStatusChanged_Parms LevelStreamingStatusChanged_Parms;
	LevelStreamingStatusChanged_Parms.LevelObject = LevelObject;
	LevelStreamingStatusChanged_Parms.bNewShouldBeLoaded = bNewShouldBeLoaded;
	LevelStreamingStatusChanged_Parms.bNewShouldBeVisible = bNewShouldBeVisible;
	LevelStreamingStatusChanged_Parms.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;

	this->ProcessEvent ( pFnLevelStreamingStatusChanged, &LevelStreamingStatusChanged_Parms, NULL );
};

// Function Engine.PlayerController.ClientForceGarbageCollection
// [0x010209C2] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventClientForceGarbageCollection ( )
{
	static UFunction* pFnClientForceGarbageCollection = NULL;

	if ( ! pFnClientForceGarbageCollection )
		pFnClientForceGarbageCollection = (UFunction*) UObject::GObjObjects()->Data[ 11488 ];

	APlayerController_eventClientForceGarbageCollection_Parms ClientForceGarbageCollection_Parms;

	this->ProcessEvent ( pFnClientForceGarbageCollection, &ClientForceGarbageCollection_Parms, NULL );
};

// Function Engine.PlayerController.OnConsoleCommand
// [0x00020002] 
// Parameters infos:
// class USeqAct_ConsoleCommand*  inAction                       ( CPF_Parm )

void APlayerController::OnConsoleCommand ( class USeqAct_ConsoleCommand* inAction )
{
	static UFunction* pFnOnConsoleCommand = NULL;

	if ( ! pFnOnConsoleCommand )
		pFnOnConsoleCommand = (UFunction*) UObject::GObjObjects()->Data[ 11483 ];

	APlayerController_execOnConsoleCommand_Parms OnConsoleCommand_Parms;
	OnConsoleCommand_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnConsoleCommand, &OnConsoleCommand_Parms, NULL );
};

// Function Engine.PlayerController.ResetPlayerMovementInput
// [0x00020002] 
// Parameters infos:

void APlayerController::ResetPlayerMovementInput ( )
{
	static UFunction* pFnResetPlayerMovementInput = NULL;

	if ( ! pFnResetPlayerMovementInput )
		pFnResetPlayerMovementInput = (UFunction*) UObject::GObjObjects()->Data[ 11482 ];

	APlayerController_execResetPlayerMovementInput_Parms ResetPlayerMovementInput_Parms;

	this->ProcessEvent ( pFnResetPlayerMovementInput, &ResetPlayerMovementInput_Parms, NULL );
};

// Function Engine.PlayerController.IsLookInputIgnored
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::eventIsLookInputIgnored ( )
{
	static UFunction* pFnIsLookInputIgnored = NULL;

	if ( ! pFnIsLookInputIgnored )
		pFnIsLookInputIgnored = (UFunction*) UObject::GObjObjects()->Data[ 11480 ];

	APlayerController_eventIsLookInputIgnored_Parms IsLookInputIgnored_Parms;

	this->ProcessEvent ( pFnIsLookInputIgnored, &IsLookInputIgnored_Parms, NULL );

	return IsLookInputIgnored_Parms.ReturnValue;
};

// Function Engine.PlayerController.IgnoreLookInput
// [0x00020002] 
// Parameters infos:
// unsigned long                  bNewLookInput                  ( CPF_Parm )

void APlayerController::IgnoreLookInput ( unsigned long bNewLookInput )
{
	static UFunction* pFnIgnoreLookInput = NULL;

	if ( ! pFnIgnoreLookInput )
		pFnIgnoreLookInput = (UFunction*) UObject::GObjObjects()->Data[ 11477 ];

	APlayerController_execIgnoreLookInput_Parms IgnoreLookInput_Parms;
	IgnoreLookInput_Parms.bNewLookInput = bNewLookInput;

	this->ProcessEvent ( pFnIgnoreLookInput, &IgnoreLookInput_Parms, NULL );
};

// Function Engine.PlayerController.IsMoveInputIgnored
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::eventIsMoveInputIgnored ( )
{
	static UFunction* pFnIsMoveInputIgnored = NULL;

	if ( ! pFnIsMoveInputIgnored )
		pFnIsMoveInputIgnored = (UFunction*) UObject::GObjObjects()->Data[ 11475 ];

	APlayerController_eventIsMoveInputIgnored_Parms IsMoveInputIgnored_Parms;

	this->ProcessEvent ( pFnIsMoveInputIgnored, &IsMoveInputIgnored_Parms, NULL );

	return IsMoveInputIgnored_Parms.ReturnValue;
};

// Function Engine.PlayerController.IgnoreMoveInput
// [0x00020002] 
// Parameters infos:
// unsigned long                  bNewMoveInput                  ( CPF_Parm )

void APlayerController::IgnoreMoveInput ( unsigned long bNewMoveInput )
{
	static UFunction* pFnIgnoreMoveInput = NULL;

	if ( ! pFnIgnoreMoveInput )
		pFnIgnoreMoveInput = (UFunction*) UObject::GObjObjects()->Data[ 11472 ];

	APlayerController_execIgnoreMoveInput_Parms IgnoreMoveInput_Parms;
	IgnoreMoveInput_Parms.bNewMoveInput = bNewMoveInput;

	this->ProcessEvent ( pFnIgnoreMoveInput, &IgnoreMoveInput_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetCinematicMode
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bInCinematicMode               ( CPF_Parm )
// unsigned long                  bAffectsMovement               ( CPF_Parm )
// unsigned long                  bAffectsTurning                ( CPF_Parm )
// unsigned long                  bAffectsHUD                    ( CPF_Parm )

void APlayerController::ClientSetCinematicMode ( unsigned long bInCinematicMode, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsHUD )
{
	static UFunction* pFnClientSetCinematicMode = NULL;

	if ( ! pFnClientSetCinematicMode )
		pFnClientSetCinematicMode = (UFunction*) UObject::GObjObjects()->Data[ 11467 ];

	APlayerController_execClientSetCinematicMode_Parms ClientSetCinematicMode_Parms;
	ClientSetCinematicMode_Parms.bInCinematicMode = bInCinematicMode;
	ClientSetCinematicMode_Parms.bAffectsMovement = bAffectsMovement;
	ClientSetCinematicMode_Parms.bAffectsTurning = bAffectsTurning;
	ClientSetCinematicMode_Parms.bAffectsHUD = bAffectsHUD;

	this->ProcessEvent ( pFnClientSetCinematicMode, &ClientSetCinematicMode_Parms, NULL );
};

// Function Engine.PlayerController.SetCinematicMode
// [0x00020002] 
// Parameters infos:
// unsigned long                  bInCinematicMode               ( CPF_Parm )
// unsigned long                  bHidePlayer                    ( CPF_Parm )
// unsigned long                  bAffectsHUD                    ( CPF_Parm )
// unsigned long                  bAffectsMovement               ( CPF_Parm )
// unsigned long                  bAffectsTurning                ( CPF_Parm )
// unsigned long                  bAffectsButtons                ( CPF_Parm )

void APlayerController::SetCinematicMode ( unsigned long bInCinematicMode, unsigned long bHidePlayer, unsigned long bAffectsHUD, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsButtons )
{
	static UFunction* pFnSetCinematicMode = NULL;

	if ( ! pFnSetCinematicMode )
		pFnSetCinematicMode = (UFunction*) UObject::GObjObjects()->Data[ 11456 ];

	APlayerController_execSetCinematicMode_Parms SetCinematicMode_Parms;
	SetCinematicMode_Parms.bInCinematicMode = bInCinematicMode;
	SetCinematicMode_Parms.bHidePlayer = bHidePlayer;
	SetCinematicMode_Parms.bAffectsHUD = bAffectsHUD;
	SetCinematicMode_Parms.bAffectsMovement = bAffectsMovement;
	SetCinematicMode_Parms.bAffectsTurning = bAffectsTurning;
	SetCinematicMode_Parms.bAffectsButtons = bAffectsButtons;

	this->ProcessEvent ( pFnSetCinematicMode, &SetCinematicMode_Parms, NULL );
};

// Function Engine.PlayerController.OnToggleCinematicMode
// [0x00020002] 
// Parameters infos:
// class USeqAct_ToggleCinematicMode* Action                         ( CPF_Parm )

void APlayerController::OnToggleCinematicMode ( class USeqAct_ToggleCinematicMode* Action )
{
	static UFunction* pFnOnToggleCinematicMode = NULL;

	if ( ! pFnOnToggleCinematicMode )
		pFnOnToggleCinematicMode = (UFunction*) UObject::GObjObjects()->Data[ 11447 ];

	APlayerController_execOnToggleCinematicMode_Parms OnToggleCinematicMode_Parms;
	OnToggleCinematicMode_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggleCinematicMode, &OnToggleCinematicMode_Parms, NULL );
};

// Function Engine.PlayerController.IsForceFeedbackAllowed
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsForceFeedbackAllowed ( )
{
	static UFunction* pFnIsForceFeedbackAllowed = NULL;

	if ( ! pFnIsForceFeedbackAllowed )
		pFnIsForceFeedbackAllowed = (UFunction*) UObject::GObjObjects()->Data[ 11444 ];

	APlayerController_execIsForceFeedbackAllowed_Parms IsForceFeedbackAllowed_Parms;

	this->ProcessEvent ( pFnIsForceFeedbackAllowed, &IsForceFeedbackAllowed_Parms, NULL );

	return IsForceFeedbackAllowed_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientStopForceFeedbackWaveform
// [0x010249C3] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class UForceFeedbackWaveform*  FFWaveform                     ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientStopForceFeedbackWaveform ( class UForceFeedbackWaveform* FFWaveform )
{
	static UFunction* pFnClientStopForceFeedbackWaveform = NULL;

	if ( ! pFnClientStopForceFeedbackWaveform )
		pFnClientStopForceFeedbackWaveform = (UFunction*) UObject::GObjObjects()->Data[ 11434 ];

	APlayerController_eventClientStopForceFeedbackWaveform_Parms ClientStopForceFeedbackWaveform_Parms;
	ClientStopForceFeedbackWaveform_Parms.FFWaveform = FFWaveform;

	this->ProcessEvent ( pFnClientStopForceFeedbackWaveform, &ClientStopForceFeedbackWaveform_Parms, NULL );
};

// Function Engine.PlayerController.ClientPlayForceFeedbackWaveform
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// class UForceFeedbackWaveform*  FFWaveform                     ( CPF_Parm )

void APlayerController::eventClientPlayForceFeedbackWaveform ( class UForceFeedbackWaveform* FFWaveform )
{
	static UFunction* pFnClientPlayForceFeedbackWaveform = NULL;

	if ( ! pFnClientPlayForceFeedbackWaveform )
		pFnClientPlayForceFeedbackWaveform = (UFunction*) UObject::GObjObjects()->Data[ 11440 ];

	APlayerController_eventClientPlayForceFeedbackWaveform_Parms ClientPlayForceFeedbackWaveform_Parms;
	ClientPlayForceFeedbackWaveform_Parms.FFWaveform = FFWaveform;

	this->ProcessEvent ( pFnClientPlayForceFeedbackWaveform, &ClientPlayForceFeedbackWaveform_Parms, NULL );
};

// Function Engine.PlayerController.PlayRumble
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UAnimNotify_Rumble*      TheAnimNotify                  ( CPF_Const | CPF_Parm )

void APlayerController::eventPlayRumble ( class UAnimNotify_Rumble* TheAnimNotify )
{
	static UFunction* pFnPlayRumble = NULL;

	if ( ! pFnPlayRumble )
		pFnPlayRumble = (UFunction*) UObject::GObjObjects()->Data[ 11435 ];

	APlayerController_eventPlayRumble_Parms PlayRumble_Parms;
	PlayRumble_Parms.TheAnimNotify = TheAnimNotify;

	this->ProcessEvent ( pFnPlayRumble, &PlayRumble_Parms, NULL );
};

// Function Engine.PlayerController.OnForceFeedback
// [0x00020002] 
// Parameters infos:
// class USeqAct_ForceFeedback*   Action                         ( CPF_Parm )

void APlayerController::OnForceFeedback ( class USeqAct_ForceFeedback* Action )
{
	static UFunction* pFnOnForceFeedback = NULL;

	if ( ! pFnOnForceFeedback )
		pFnOnForceFeedback = (UFunction*) UObject::GObjObjects()->Data[ 11430 ];

	APlayerController_execOnForceFeedback_Parms OnForceFeedback_Parms;
	OnForceFeedback_Parms.Action = Action;

	this->ProcessEvent ( pFnOnForceFeedback, &OnForceFeedback_Parms, NULL );
};

// Function Engine.PlayerController.NotifyTakeHit
// [0x00020002] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void APlayerController::NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 11423 ];

	APlayerController_execNotifyTakeHit_Parms NotifyTakeHit_Parms;
	NotifyTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NotifyTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyTakeHit_Parms.Damage = Damage;
	NotifyTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function Engine.PlayerController.ShowGameState
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ShowGameState ( )
{
	static UFunction* pFnShowGameState = NULL;

	if ( ! pFnShowGameState )
		pFnShowGameState = (UFunction*) UObject::GObjObjects()->Data[ 11422 ];

	APlayerController_execShowGameState_Parms ShowGameState_Parms;

	this->ProcessEvent ( pFnShowGameState, &ShowGameState_Parms, NULL );
};

// Function Engine.PlayerController.ShowPlayerState
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ShowPlayerState ( )
{
	static UFunction* pFnShowPlayerState = NULL;

	if ( ! pFnShowPlayerState )
		pFnShowPlayerState = (UFunction*) UObject::GObjObjects()->Data[ 11421 ];

	APlayerController_execShowPlayerState_Parms ShowPlayerState_Parms;

	this->ProcessEvent ( pFnShowPlayerState, &ShowPlayerState_Parms, NULL );
};

// Function Engine.PlayerController.ListCE
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ListCE ( )
{
	static UFunction* pFnListCE = NULL;

	if ( ! pFnListCE )
		pFnListCE = (UFunction*) UObject::GObjObjects()->Data[ 11420 ];

	APlayerController_execListCE_Parms ListCE_Parms;

	this->ProcessEvent ( pFnListCE, &ListCE_Parms, NULL );
};

// Function Engine.PlayerController.ListConsoleEvents
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ListConsoleEvents ( )
{
	static UFunction* pFnListConsoleEvents = NULL;

	if ( ! pFnListConsoleEvents )
		pFnListConsoleEvents = (UFunction*) UObject::GObjObjects()->Data[ 11413 ];

	APlayerController_execListConsoleEvents_Parms ListConsoleEvents_Parms;

	this->ProcessEvent ( pFnListConsoleEvents, &ListConsoleEvents_Parms, NULL );
};

// Function Engine.PlayerController.CE
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   EventName                      ( CPF_OptionalParm | CPF_Parm )

void APlayerController::CE ( struct FName EventName )
{
	static UFunction* pFnCE = NULL;

	if ( ! pFnCE )
		pFnCE = (UFunction*) UObject::GObjObjects()->Data[ 11411 ];

	APlayerController_execCE_Parms CE_Parms;
	memcpy ( &CE_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnCE, &CE_Parms, NULL );
};

// Function Engine.PlayerController.CauseEvent
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   EventName                      ( CPF_OptionalParm | CPF_Parm )

void APlayerController::CauseEvent ( struct FName EventName )
{
	static UFunction* pFnCauseEvent = NULL;

	if ( ! pFnCauseEvent )
		pFnCauseEvent = (UFunction*) UObject::GObjObjects()->Data[ 11409 ];

	APlayerController_execCauseEvent_Parms CauseEvent_Parms;
	memcpy ( &CauseEvent_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnCauseEvent, &CauseEvent_Parms, NULL );
};

// Function Engine.PlayerController.ServerCauseEvent
// [0x00220042] 
// Parameters infos:
// struct FName                   EventName                      ( CPF_Parm )

void APlayerController::ServerCauseEvent ( struct FName EventName )
{
	static UFunction* pFnServerCauseEvent = NULL;

	if ( ! pFnServerCauseEvent )
		pFnServerCauseEvent = (UFunction*) UObject::GObjObjects()->Data[ 11400 ];

	APlayerController_execServerCauseEvent_Parms ServerCauseEvent_Parms;
	memcpy ( &ServerCauseEvent_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnServerCauseEvent, &ServerCauseEvent_Parms, NULL );
};

// Function Engine.PlayerController.OnToggleHUD
// [0x00020102] 
// Parameters infos:
// class USeqAct_ToggleHUD*       inAction                       ( CPF_Parm )

void APlayerController::OnToggleHUD ( class USeqAct_ToggleHUD* inAction )
{
	static UFunction* pFnOnToggleHUD = NULL;

	if ( ! pFnOnToggleHUD )
		pFnOnToggleHUD = (UFunction*) UObject::GObjObjects()->Data[ 11397 ];

	APlayerController_execOnToggleHUD_Parms OnToggleHUD_Parms;
	OnToggleHUD_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggleHUD, &OnToggleHUD_Parms, NULL );
};

// Function Engine.PlayerController.OnSetCameraTarget
// [0x00020102] 
// Parameters infos:
// class USeqAct_SetCameraTarget* inAction                       ( CPF_Parm )

void APlayerController::OnSetCameraTarget ( class USeqAct_SetCameraTarget* inAction )
{
	static UFunction* pFnOnSetCameraTarget = NULL;

	if ( ! pFnOnSetCameraTarget )
		pFnOnSetCameraTarget = (UFunction*) UObject::GObjObjects()->Data[ 11392 ];

	APlayerController_execOnSetCameraTarget_Parms OnSetCameraTarget_Parms;
	OnSetCameraTarget_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnSetCameraTarget, &OnSetCameraTarget_Parms, NULL );
};

// Function Engine.PlayerController.ClientClearKismetText
// [0x010201C3] ( FUNC_Final )
// Parameters infos:
// struct FVector2D               MessageOffset                  ( CPF_Parm )

void APlayerController::ClientClearKismetText ( struct FVector2D MessageOffset )
{
	static UFunction* pFnClientClearKismetText = NULL;

	if ( ! pFnClientClearKismetText )
		pFnClientClearKismetText = (UFunction*) UObject::GObjObjects()->Data[ 11359 ];

	APlayerController_execClientClearKismetText_Parms ClientClearKismetText_Parms;
	memcpy ( &ClientClearKismetText_Parms.MessageOffset, &MessageOffset, 0x8 );

	this->ProcessEvent ( pFnClientClearKismetText, &ClientClearKismetText_Parms, NULL );
};

// Function Engine.PlayerController.ClientDrawKismetText
// [0x010201C3] ( FUNC_Final )
// Parameters infos:
// struct FKismetDrawTextInfo     DrawTextInfo                   ( CPF_Parm | CPF_NeedCtorLink )
// float                          DisplayTime                    ( CPF_Parm )

void APlayerController::ClientDrawKismetText ( struct FKismetDrawTextInfo DrawTextInfo, float DisplayTime )
{
	static UFunction* pFnClientDrawKismetText = NULL;

	if ( ! pFnClientDrawKismetText )
		pFnClientDrawKismetText = (UFunction*) UObject::GObjObjects()->Data[ 11356 ];

	APlayerController_execClientDrawKismetText_Parms ClientDrawKismetText_Parms;
	memcpy ( &ClientDrawKismetText_Parms.DrawTextInfo, &DrawTextInfo, 0x30 );
	ClientDrawKismetText_Parms.DisplayTime = DisplayTime;

	this->ProcessEvent ( pFnClientDrawKismetText, &ClientDrawKismetText_Parms, NULL );
};

// Function Engine.PlayerController.OnDrawText
// [0x00020002] 
// Parameters infos:
// class USeqAct_DrawText*        inAction                       ( CPF_Parm )

void APlayerController::OnDrawText ( class USeqAct_DrawText* inAction )
{
	static UFunction* pFnOnDrawText = NULL;

	if ( ! pFnOnDrawText )
		pFnOnDrawText = (UFunction*) UObject::GObjObjects()->Data[ 11354 ];

	APlayerController_execOnDrawText_Parms OnDrawText_Parms;
	OnDrawText_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnDrawText, &OnDrawText_Parms, NULL );
};

// Function Engine.PlayerController.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void APlayerController::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 11350 ];

	APlayerController_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.PlayerController.ClientIgnoreLookInput
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bIgnore                        ( CPF_Parm )

void APlayerController::ClientIgnoreLookInput ( unsigned long bIgnore )
{
	static UFunction* pFnClientIgnoreLookInput = NULL;

	if ( ! pFnClientIgnoreLookInput )
		pFnClientIgnoreLookInput = (UFunction*) UObject::GObjObjects()->Data[ 11348 ];

	APlayerController_execClientIgnoreLookInput_Parms ClientIgnoreLookInput_Parms;
	ClientIgnoreLookInput_Parms.bIgnore = bIgnore;

	this->ProcessEvent ( pFnClientIgnoreLookInput, &ClientIgnoreLookInput_Parms, NULL );
};

// Function Engine.PlayerController.ClientIgnoreMoveInput
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bIgnore                        ( CPF_Parm )

void APlayerController::ClientIgnoreMoveInput ( unsigned long bIgnore )
{
	static UFunction* pFnClientIgnoreMoveInput = NULL;

	if ( ! pFnClientIgnoreMoveInput )
		pFnClientIgnoreMoveInput = (UFunction*) UObject::GObjObjects()->Data[ 11346 ];

	APlayerController_execClientIgnoreMoveInput_Parms ClientIgnoreMoveInput_Parms;
	ClientIgnoreMoveInput_Parms.bIgnore = bIgnore;

	this->ProcessEvent ( pFnClientIgnoreMoveInput, &ClientIgnoreMoveInput_Parms, NULL );
};

// Function Engine.PlayerController.OnToggleInput
// [0x00020002] 
// Parameters infos:
// class USeqAct_ToggleInput*     inAction                       ( CPF_Parm )

void APlayerController::OnToggleInput ( class USeqAct_ToggleInput* inAction )
{
	static UFunction* pFnOnToggleInput = NULL;

	if ( ! pFnOnToggleInput )
		pFnOnToggleInput = (UFunction*) UObject::GObjObjects()->Data[ 11340 ];

	APlayerController_execOnToggleInput_Parms OnToggleInput_Parms;
	OnToggleInput_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggleInput, &OnToggleInput_Parms, NULL );
};

// Function Engine.PlayerController.DrawHUD
// [0x00020002] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void APlayerController::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 11338 ];

	APlayerController_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.PlayerController.CanRestartPlayer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanRestartPlayer ( )
{
	static UFunction* pFnCanRestartPlayer = NULL;

	if ( ! pFnCanRestartPlayer )
		pFnCanRestartPlayer = (UFunction*) UObject::GObjObjects()->Data[ 11336 ];

	APlayerController_execCanRestartPlayer_Parms CanRestartPlayer_Parms;

	this->ProcessEvent ( pFnCanRestartPlayer, &CanRestartPlayer_Parms, NULL );

	return CanRestartPlayer_Parms.ReturnValue;
};

// Function Engine.PlayerController.ServerViewSelf
// [0x00224042] 
// Parameters infos:
// struct FViewTargetTransitionParams TransitionParams               ( CPF_OptionalParm | CPF_Parm )

void APlayerController::ServerViewSelf ( struct FViewTargetTransitionParams TransitionParams )
{
	static UFunction* pFnServerViewSelf = NULL;

	if ( ! pFnServerViewSelf )
		pFnServerViewSelf = (UFunction*) UObject::GObjObjects()->Data[ 11147 ];

	APlayerController_execServerViewSelf_Parms ServerViewSelf_Parms;
	memcpy ( &ServerViewSelf_Parms.TransitionParams, &TransitionParams, 0xC );

	this->ProcessEvent ( pFnServerViewSelf, &ServerViewSelf_Parms, NULL );
};

// Function Engine.PlayerController.ViewAPlayer
// [0x00020002] 
// Parameters infos:
// int                            Dir                            ( CPF_Parm )

void APlayerController::ViewAPlayer ( int Dir )
{
	static UFunction* pFnViewAPlayer = NULL;

	if ( ! pFnViewAPlayer )
		pFnViewAPlayer = (UFunction*) UObject::GObjObjects()->Data[ 11137 ];

	APlayerController_execViewAPlayer_Parms ViewAPlayer_Parms;
	ViewAPlayer_Parms.Dir = Dir;

	this->ProcessEvent ( pFnViewAPlayer, &ViewAPlayer_Parms, NULL );
};

// Function Engine.PlayerController.ServerViewPrevPlayer
// [0x00220042] 
// Parameters infos:

void APlayerController::ServerViewPrevPlayer ( )
{
	static UFunction* pFnServerViewPrevPlayer = NULL;

	if ( ! pFnServerViewPrevPlayer )
		pFnServerViewPrevPlayer = (UFunction*) UObject::GObjObjects()->Data[ 11136 ];

	APlayerController_execServerViewPrevPlayer_Parms ServerViewPrevPlayer_Parms;

	this->ProcessEvent ( pFnServerViewPrevPlayer, &ServerViewPrevPlayer_Parms, NULL );
};

// Function Engine.PlayerController.ServerViewNextPlayer
// [0x00220042] 
// Parameters infos:

void APlayerController::ServerViewNextPlayer ( )
{
	static UFunction* pFnServerViewNextPlayer = NULL;

	if ( ! pFnServerViewNextPlayer )
		pFnServerViewNextPlayer = (UFunction*) UObject::GObjObjects()->Data[ 11135 ];

	APlayerController_execServerViewNextPlayer_Parms ServerViewNextPlayer_Parms;

	this->ProcessEvent ( pFnServerViewNextPlayer, &ServerViewNextPlayer_Parms, NULL );
};

// Function Engine.PlayerController.ServerSetSpectatorLocation
// [0x00220042] 
// Parameters infos:
// struct FVector                 NewLoc                         ( CPF_Parm )

void APlayerController::ServerSetSpectatorLocation ( struct FVector NewLoc )
{
	static UFunction* pFnServerSetSpectatorLocation = NULL;

	if ( ! pFnServerSetSpectatorLocation )
		pFnServerSetSpectatorLocation = (UFunction*) UObject::GObjObjects()->Data[ 11054 ];

	APlayerController_execServerSetSpectatorLocation_Parms ServerSetSpectatorLocation_Parms;
	memcpy ( &ServerSetSpectatorLocation_Parms.NewLoc, &NewLoc, 0xC );

	this->ProcessEvent ( pFnServerSetSpectatorLocation, &ServerSetSpectatorLocation_Parms, NULL );
};

// Function Engine.PlayerController.IsSpectating
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsSpectating ( )
{
	static UFunction* pFnIsSpectating = NULL;

	if ( ! pFnIsSpectating )
		pFnIsSpectating = (UFunction*) UObject::GObjObjects()->Data[ 11052 ];

	APlayerController_execIsSpectating_Parms IsSpectating_Parms;

	this->ProcessEvent ( pFnIsSpectating, &IsSpectating_Parms, NULL );

	return IsSpectating_Parms.ReturnValue;
};

// Function Engine.PlayerController.CheckJumpOrDuck
// [0x00020002] 
// Parameters infos:

void APlayerController::CheckJumpOrDuck ( )
{
	static UFunction* pFnCheckJumpOrDuck = NULL;

	if ( ! pFnCheckJumpOrDuck )
		pFnCheckJumpOrDuck = (UFunction*) UObject::GObjObjects()->Data[ 10928 ];

	APlayerController_execCheckJumpOrDuck_Parms CheckJumpOrDuck_Parms;

	this->ProcessEvent ( pFnCheckJumpOrDuck, &CheckJumpOrDuck_Parms, NULL );
};

// Function Engine.PlayerController.ClearDoubleClick
// [0x00020002] 
// Parameters infos:

void APlayerController::ClearDoubleClick ( )
{
	static UFunction* pFnClearDoubleClick = NULL;

	if ( ! pFnClearDoubleClick )
		pFnClearDoubleClick = (UFunction*) UObject::GObjObjects()->Data[ 10926 ];

	APlayerController_execClearDoubleClick_Parms ClearDoubleClick_Parms;

	this->ProcessEvent ( pFnClearDoubleClick, &ClearDoubleClick_Parms, NULL );
};

// Function Engine.PlayerController.LimitViewRotation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                ViewRotation                   ( CPF_Parm )
// float                          ViewPitchMin                   ( CPF_Parm )
// float                          ViewPitchMax                   ( CPF_Parm )

struct FRotator APlayerController::eventLimitViewRotation ( struct FRotator ViewRotation, float ViewPitchMin, float ViewPitchMax )
{
	static UFunction* pFnLimitViewRotation = NULL;

	if ( ! pFnLimitViewRotation )
		pFnLimitViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 10921 ];

	APlayerController_eventLimitViewRotation_Parms LimitViewRotation_Parms;
	memcpy ( &LimitViewRotation_Parms.ViewRotation, &ViewRotation, 0xC );
	LimitViewRotation_Parms.ViewPitchMin = ViewPitchMin;
	LimitViewRotation_Parms.ViewPitchMax = ViewPitchMax;

	this->ProcessEvent ( pFnLimitViewRotation, &LimitViewRotation_Parms, NULL );

	return LimitViewRotation_Parms.ReturnValue;
};

// Function Engine.PlayerController.ProcessViewRotation
// [0x00420002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                DeltaRot                       ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )

void APlayerController::ProcessViewRotation ( float DeltaTime, struct FRotator DeltaRot, struct FRotator* out_ViewRotation )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 10917 ];

	APlayerController_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;
	memcpy ( &ProcessViewRotation_Parms.DeltaRot, &DeltaRot, 0xC );

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );
};

// Function Engine.PlayerController.UpdateRotation
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APlayerController::UpdateRotation ( float DeltaTime )
{
	static UFunction* pFnUpdateRotation = NULL;

	if ( ! pFnUpdateRotation )
		pFnUpdateRotation = (UFunction*) UObject::GObjObjects()->Data[ 10908 ];

	APlayerController_execUpdateRotation_Parms UpdateRotation_Parms;
	UpdateRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateRotation, &UpdateRotation_Parms, NULL );
};

// Function Engine.PlayerController.ViewShake
// [0x00020000] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APlayerController::ViewShake ( float DeltaTime )
{
	static UFunction* pFnViewShake = NULL;

	if ( ! pFnViewShake )
		pFnViewShake = (UFunction*) UObject::GObjObjects()->Data[ 10906 ];

	APlayerController_execViewShake_Parms ViewShake_Parms;
	ViewShake_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnViewShake, &ViewShake_Parms, NULL );
};

// Function Engine.PlayerController.GetPlayerViewPoint
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void APlayerController::eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetPlayerViewPoint = NULL;

	if ( ! pFnGetPlayerViewPoint )
		pFnGetPlayerViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 10902 ];

	APlayerController_eventGetPlayerViewPoint_Parms GetPlayerViewPoint_Parms;

	this->ProcessEvent ( pFnGetPlayerViewPoint, &GetPlayerViewPoint_Parms, NULL );

	if ( out_Location )
		memcpy ( out_Location, &GetPlayerViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetPlayerViewPoint_Parms.out_Rotation, 0xC );
};

// Function Engine.PlayerController.SpawnPlayerCamera
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventSpawnPlayerCamera ( )
{
	static UFunction* pFnSpawnPlayerCamera = NULL;

	if ( ! pFnSpawnPlayerCamera )
		pFnSpawnPlayerCamera = (UFunction*) UObject::GObjObjects()->Data[ 10900 ];

	APlayerController_eventSpawnPlayerCamera_Parms SpawnPlayerCamera_Parms;

	this->ProcessEvent ( pFnSpawnPlayerCamera, &SpawnPlayerCamera_Parms, NULL );
};

// Function Engine.PlayerController.ServerVerifyViewTarget
// [0x002200C2] 
// Parameters infos:

void APlayerController::ServerVerifyViewTarget ( )
{
	static UFunction* pFnServerVerifyViewTarget = NULL;

	if ( ! pFnServerVerifyViewTarget )
		pFnServerVerifyViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 10898 ];

	APlayerController_execServerVerifyViewTarget_Parms ServerVerifyViewTarget_Parms;

	this->ProcessEvent ( pFnServerVerifyViewTarget, &ServerVerifyViewTarget_Parms, NULL );
};

// Function Engine.PlayerController.GetViewTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* APlayerController::GetViewTarget ( )
{
	static UFunction* pFnGetViewTarget = NULL;

	if ( ! pFnGetViewTarget )
		pFnGetViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 8792 ];

	APlayerController_execGetViewTarget_Parms GetViewTarget_Parms;

	pFnGetViewTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewTarget, &GetViewTarget_Parms, NULL );

	pFnGetViewTarget->FunctionFlags |= 0x400;

	return GetViewTarget_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientSetViewTarget
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// class AActor*                  A                              ( CPF_Parm )
// struct FViewTargetTransitionParams TransitionParams               ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientSetViewTarget ( class AActor* A, struct FViewTargetTransitionParams TransitionParams )
{
	static UFunction* pFnClientSetViewTarget = NULL;

	if ( ! pFnClientSetViewTarget )
		pFnClientSetViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 10894 ];

	APlayerController_eventClientSetViewTarget_Parms ClientSetViewTarget_Parms;
	ClientSetViewTarget_Parms.A = A;
	memcpy ( &ClientSetViewTarget_Parms.TransitionParams, &TransitionParams, 0xC );

	this->ProcessEvent ( pFnClientSetViewTarget, &ClientSetViewTarget_Parms, NULL );
};

// Function Engine.PlayerController.SetViewTargetWithBlend
// [0x00824003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  NewViewTarget                  ( CPF_Parm )
// float                          BlendTime                      ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  BlendFunc                      ( CPF_OptionalParm | CPF_Parm )
// float                          BlendExp                       ( CPF_OptionalParm | CPF_Parm )

void APlayerController::SetViewTargetWithBlend ( class AActor* NewViewTarget, float BlendTime, unsigned char BlendFunc, float BlendExp )
{
	static UFunction* pFnSetViewTargetWithBlend = NULL;

	if ( ! pFnSetViewTargetWithBlend )
		pFnSetViewTargetWithBlend = (UFunction*) UObject::GObjObjects()->Data[ 10888 ];

	APlayerController_execSetViewTargetWithBlend_Parms SetViewTargetWithBlend_Parms;
	SetViewTargetWithBlend_Parms.NewViewTarget = NewViewTarget;
	SetViewTargetWithBlend_Parms.BlendTime = BlendTime;
	SetViewTargetWithBlend_Parms.BlendFunc = BlendFunc;
	SetViewTargetWithBlend_Parms.BlendExp = BlendExp;

	this->ProcessEvent ( pFnSetViewTargetWithBlend, &SetViewTargetWithBlend_Parms, NULL );
};

// Function Engine.PlayerController.SetViewTarget
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  NewViewTarget                  ( CPF_Parm )
// struct FViewTargetTransitionParams TransitionParams               ( CPF_OptionalParm | CPF_Parm )

void APlayerController::SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams )
{
	static UFunction* pFnSetViewTarget = NULL;

	if ( ! pFnSetViewTarget )
		pFnSetViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 10885 ];

	APlayerController_execSetViewTarget_Parms SetViewTarget_Parms;
	SetViewTarget_Parms.NewViewTarget = NewViewTarget;
	memcpy ( &SetViewTarget_Parms.TransitionParams, &TransitionParams, 0xC );

	pFnSetViewTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetViewTarget, &SetViewTarget_Parms, NULL );

	pFnSetViewTarget->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.IsLocalPlayerController
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsLocalPlayerController ( )
{
	static UFunction* pFnIsLocalPlayerController = NULL;

	if ( ! pFnIsLocalPlayerController )
		pFnIsLocalPlayerController = (UFunction*) UObject::GObjObjects()->Data[ 10883 ];

	APlayerController_execIsLocalPlayerController_Parms IsLocalPlayerController_Parms;

	pFnIsLocalPlayerController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLocalPlayerController, &IsLocalPlayerController_Parms, NULL );

	pFnIsLocalPlayerController->FunctionFlags |= 0x400;

	return IsLocalPlayerController_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetFOVAngle
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APlayerController::eventGetFOVAngle ( )
{
	static UFunction* pFnGetFOVAngle = NULL;

	if ( ! pFnGetFOVAngle )
		pFnGetFOVAngle = (UFunction*) UObject::GObjObjects()->Data[ 10881 ];

	APlayerController_eventGetFOVAngle_Parms GetFOVAngle_Parms;

	this->ProcessEvent ( pFnGetFOVAngle, &GetFOVAngle_Parms, NULL );

	return GetFOVAngle_Parms.ReturnValue;
};

// Function Engine.PlayerController.AdjustFOV
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APlayerController::AdjustFOV ( float DeltaTime )
{
	static UFunction* pFnAdjustFOV = NULL;

	if ( ! pFnAdjustFOV )
		pFnAdjustFOV = (UFunction*) UObject::GObjObjects()->Data[ 10879 ];

	APlayerController_execAdjustFOV_Parms AdjustFOV_Parms;
	AdjustFOV_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnAdjustFOV, &AdjustFOV_Parms, NULL );
};

// Function Engine.PlayerController.NotifyLanded
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

bool APlayerController::eventNotifyLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnNotifyLanded = NULL;

	if ( ! pFnNotifyLanded )
		pFnNotifyLanded = (UFunction*) UObject::GObjObjects()->Data[ 10875 ];

	APlayerController_eventNotifyLanded_Parms NotifyLanded_Parms;
	memcpy ( &NotifyLanded_Parms.HitNormal, &HitNormal, 0xC );
	NotifyLanded_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnNotifyLanded, &NotifyLanded_Parms, NULL );

	return NotifyLanded_Parms.ReturnValue;
};

// Function Engine.PlayerController.AimHelpDot
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bInstantHit                    ( CPF_Parm )

float APlayerController::AimHelpDot ( unsigned long bInstantHit )
{
	static UFunction* pFnAimHelpDot = NULL;

	if ( ! pFnAimHelpDot )
		pFnAimHelpDot = (UFunction*) UObject::GObjObjects()->Data[ 10872 ];

	APlayerController_execAimHelpDot_Parms AimHelpDot_Parms;
	AimHelpDot_Parms.bInstantHit = bInstantHit;

	this->ProcessEvent ( pFnAimHelpDot, &AimHelpDot_Parms, NULL );

	return AimHelpDot_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetAdjustedAimFor
// [0x00020002] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 W                              ( CPF_Parm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator APlayerController::GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAimFor = NULL;

	if ( ! pFnGetAdjustedAimFor )
		pFnGetAdjustedAimFor = (UFunction*) UObject::GObjObjects()->Data[ 10850 ];

	APlayerController_execGetAdjustedAimFor_Parms GetAdjustedAimFor_Parms;
	GetAdjustedAimFor_Parms.W = W;
	memcpy ( &GetAdjustedAimFor_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAimFor, &GetAdjustedAimFor_Parms, NULL );

	return GetAdjustedAimFor_Parms.ReturnValue;
};

// Function Engine.PlayerController.CameraLookAtFinished
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class USeqAct_CameraLookAt*    Action                         ( CPF_Parm )

void APlayerController::eventCameraLookAtFinished ( class USeqAct_CameraLookAt* Action )
{
	static UFunction* pFnCameraLookAtFinished = NULL;

	if ( ! pFnCameraLookAtFinished )
		pFnCameraLookAtFinished = (UFunction*) UObject::GObjObjects()->Data[ 10848 ];

	APlayerController_eventCameraLookAtFinished_Parms CameraLookAtFinished_Parms;
	CameraLookAtFinished_Parms.Action = Action;

	this->ProcessEvent ( pFnCameraLookAtFinished, &CameraLookAtFinished_Parms, NULL );
};

// Function Engine.PlayerController.AimingHelp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bInstantHit                    ( CPF_Parm )

bool APlayerController::AimingHelp ( unsigned long bInstantHit )
{
	static UFunction* pFnAimingHelp = NULL;

	if ( ! pFnAimingHelp )
		pFnAimingHelp = (UFunction*) UObject::GObjObjects()->Data[ 10844 ];

	APlayerController_execAimingHelp_Parms AimingHelp_Parms;
	AimingHelp_Parms.bInstantHit = bInstantHit;

	this->ProcessEvent ( pFnAimingHelp, &AimingHelp_Parms, NULL );

	return AimingHelp_Parms.ReturnValue;
};

// Function Engine.PlayerController.PlayerMove
// [0x00020000] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APlayerController::PlayerMove ( float DeltaTime )
{
	static UFunction* pFnPlayerMove = NULL;

	if ( ! pFnPlayerMove )
		pFnPlayerMove = (UFunction*) UObject::GObjObjects()->Data[ 10842 ];

	APlayerController_execPlayerMove_Parms PlayerMove_Parms;
	PlayerMove_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPlayerMove, &PlayerMove_Parms, NULL );
};

// Function Engine.PlayerController.PlayerTick
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APlayerController::eventPlayerTick ( float DeltaTime )
{
	static UFunction* pFnPlayerTick = NULL;

	if ( ! pFnPlayerTick )
		pFnPlayerTick = (UFunction*) UObject::GObjObjects()->Data[ 10840 ];

	APlayerController_eventPlayerTick_Parms PlayerTick_Parms;
	PlayerTick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPlayerTick, &PlayerTick_Parms, NULL );
};

// Function Engine.PlayerController.NotifyChangedWeapon
// [0x00020000] 
// Parameters infos:
// class AWeapon*                 PreviousWeapon                 ( CPF_Parm )
// class AWeapon*                 NewWeapon                      ( CPF_Parm )

void APlayerController::NotifyChangedWeapon ( class AWeapon* PreviousWeapon, class AWeapon* NewWeapon )
{
	static UFunction* pFnNotifyChangedWeapon = NULL;

	if ( ! pFnNotifyChangedWeapon )
		pFnNotifyChangedWeapon = (UFunction*) UObject::GObjObjects()->Data[ 10837 ];

	APlayerController_execNotifyChangedWeapon_Parms NotifyChangedWeapon_Parms;
	NotifyChangedWeapon_Parms.PreviousWeapon = PreviousWeapon;
	NotifyChangedWeapon_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnNotifyChangedWeapon, &NotifyChangedWeapon_Parms, NULL );
};

// Function Engine.PlayerController.ClientGameEnded
// [0x010201C2] 
// Parameters infos:
// class AActor*                  EndGameFocus                   ( CPF_Parm )
// unsigned long                  bIsWinner                      ( CPF_Parm )

void APlayerController::ClientGameEnded ( class AActor* EndGameFocus, unsigned long bIsWinner )
{
	static UFunction* pFnClientGameEnded = NULL;

	if ( ! pFnClientGameEnded )
		pFnClientGameEnded = (UFunction*) UObject::GObjObjects()->Data[ 10834 ];

	APlayerController_execClientGameEnded_Parms ClientGameEnded_Parms;
	ClientGameEnded_Parms.EndGameFocus = EndGameFocus;
	ClientGameEnded_Parms.bIsWinner = bIsWinner;

	this->ProcessEvent ( pFnClientGameEnded, &ClientGameEnded_Parms, NULL );
};

// Function Engine.PlayerController.GameHasEnded
// [0x00024002] 
// Parameters infos:
// class AActor*                  EndGameFocus                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIsWinner                      ( CPF_OptionalParm | CPF_Parm )

void APlayerController::GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner )
{
	static UFunction* pFnGameHasEnded = NULL;

	if ( ! pFnGameHasEnded )
		pFnGameHasEnded = (UFunction*) UObject::GObjObjects()->Data[ 10831 ];

	APlayerController_execGameHasEnded_Parms GameHasEnded_Parms;
	GameHasEnded_Parms.EndGameFocus = EndGameFocus;
	GameHasEnded_Parms.bIsWinner = bIsWinner;

	this->ProcessEvent ( pFnGameHasEnded, &GameHasEnded_Parms, NULL );
};

// Function Engine.PlayerController.ClientRestart
// [0x010201C2] 
// Parameters infos:
// class APawn*                   NewPawn                        ( CPF_Parm )

void APlayerController::ClientRestart ( class APawn* NewPawn )
{
	static UFunction* pFnClientRestart = NULL;

	if ( ! pFnClientRestart )
		pFnClientRestart = (UFunction*) UObject::GObjObjects()->Data[ 10829 ];

	APlayerController_execClientRestart_Parms ClientRestart_Parms;
	ClientRestart_Parms.NewPawn = NewPawn;

	this->ProcessEvent ( pFnClientRestart, &ClientRestart_Parms, NULL );
};

// Function Engine.PlayerController.EnterStartState
// [0x00020002] 
// Parameters infos:

void APlayerController::EnterStartState ( )
{
	static UFunction* pFnEnterStartState = NULL;

	if ( ! pFnEnterStartState )
		pFnEnterStartState = (UFunction*) UObject::GObjObjects()->Data[ 10821 ];

	APlayerController_execEnterStartState_Parms EnterStartState_Parms;

	this->ProcessEvent ( pFnEnterStartState, &EnterStartState_Parms, NULL );
};

// Function Engine.PlayerController.ForceSingleNetUpdateFor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )

void APlayerController::ForceSingleNetUpdateFor ( class AActor* Target )
{
	static UFunction* pFnForceSingleNetUpdateFor = NULL;

	if ( ! pFnForceSingleNetUpdateFor )
		pFnForceSingleNetUpdateFor = (UFunction*) UObject::GObjObjects()->Data[ 10819 ];

	APlayerController_execForceSingleNetUpdateFor_Parms ForceSingleNetUpdateFor_Parms;
	ForceSingleNetUpdateFor_Parms.Target = Target;

	pFnForceSingleNetUpdateFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceSingleNetUpdateFor, &ForceSingleNetUpdateFor_Parms, NULL );

	pFnForceSingleNetUpdateFor->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.HasClientLoadedCurrentWorld
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::HasClientLoadedCurrentWorld ( )
{
	static UFunction* pFnHasClientLoadedCurrentWorld = NULL;

	if ( ! pFnHasClientLoadedCurrentWorld )
		pFnHasClientLoadedCurrentWorld = (UFunction*) UObject::GObjObjects()->Data[ 10817 ];

	APlayerController_execHasClientLoadedCurrentWorld_Parms HasClientLoadedCurrentWorld_Parms;

	pFnHasClientLoadedCurrentWorld->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasClientLoadedCurrentWorld, &HasClientLoadedCurrentWorld_Parms, NULL );

	pFnHasClientLoadedCurrentWorld->FunctionFlags |= 0x400;

	return HasClientLoadedCurrentWorld_Parms.ReturnValue;
};

// Function Engine.PlayerController.NotifyLoadedWorld
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   WorldPackageName               ( CPF_Parm )
// unsigned long                  bFinalDest                     ( CPF_Parm )

void APlayerController::eventNotifyLoadedWorld ( struct FName WorldPackageName, unsigned long bFinalDest )
{
	static UFunction* pFnNotifyLoadedWorld = NULL;

	if ( ! pFnNotifyLoadedWorld )
		pFnNotifyLoadedWorld = (UFunction*) UObject::GObjObjects()->Data[ 10811 ];

	APlayerController_eventNotifyLoadedWorld_Parms NotifyLoadedWorld_Parms;
	memcpy ( &NotifyLoadedWorld_Parms.WorldPackageName, &WorldPackageName, 0x8 );
	NotifyLoadedWorld_Parms.bFinalDest = bFinalDest;

	this->ProcessEvent ( pFnNotifyLoadedWorld, &NotifyLoadedWorld_Parms, NULL );
};

// Function Engine.PlayerController.ServerNotifyLoadedWorld
// [0x00220CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FName                   WorldPackageName               ( CPF_Parm )

void APlayerController::eventServerNotifyLoadedWorld ( struct FName WorldPackageName )
{
	static UFunction* pFnServerNotifyLoadedWorld = NULL;

	if ( ! pFnServerNotifyLoadedWorld )
		pFnServerNotifyLoadedWorld = (UFunction*) UObject::GObjObjects()->Data[ 10809 ];

	APlayerController_eventServerNotifyLoadedWorld_Parms ServerNotifyLoadedWorld_Parms;
	memcpy ( &ServerNotifyLoadedWorld_Parms.WorldPackageName, &WorldPackageName, 0x8 );

	pFnServerNotifyLoadedWorld->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerNotifyLoadedWorld, &ServerNotifyLoadedWorld_Parms, NULL );

	pFnServerNotifyLoadedWorld->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.Restart
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void APlayerController::Restart ( unsigned long bVehicleTransition )
{
	static UFunction* pFnRestart = NULL;

	if ( ! pFnRestart )
		pFnRestart = (UFunction*) UObject::GObjObjects()->Data[ 10807 ];

	APlayerController_execRestart_Parms Restart_Parms;
	Restart_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnRestart, &Restart_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetProgressMessage
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// unsigned char                  MessageType                    ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Title                          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bIgnoreFutureNetworkMessages   ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientSetProgressMessage ( unsigned char MessageType, struct FString Message, struct FString Title, unsigned long bIgnoreFutureNetworkMessages )
{
	static UFunction* pFnClientSetProgressMessage = NULL;

	if ( ! pFnClientSetProgressMessage )
		pFnClientSetProgressMessage = (UFunction*) UObject::GObjObjects()->Data[ 10802 ];

	APlayerController_eventClientSetProgressMessage_Parms ClientSetProgressMessage_Parms;
	ClientSetProgressMessage_Parms.MessageType = MessageType;
	memcpy ( &ClientSetProgressMessage_Parms.Message, &Message, 0x10 );
	memcpy ( &ClientSetProgressMessage_Parms.Title, &Title, 0x10 );
	ClientSetProgressMessage_Parms.bIgnoreFutureNetworkMessages = bIgnoreFutureNetworkMessages;

	this->ProcessEvent ( pFnClientSetProgressMessage, &ClientSetProgressMessage_Parms, NULL );
};

// Function Engine.PlayerController.SwitchLevel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::SwitchLevel ( struct FString URL )
{
	static UFunction* pFnSwitchLevel = NULL;

	if ( ! pFnSwitchLevel )
		pFnSwitchLevel = (UFunction*) UObject::GObjObjects()->Data[ 10800 ];

	APlayerController_execSwitchLevel_Parms SwitchLevel_Parms;
	memcpy ( &SwitchLevel_Parms.URL, &URL, 0x10 );

	this->ProcessEvent ( pFnSwitchLevel, &SwitchLevel_Parms, NULL );
};

// Function Engine.PlayerController.ServerChangeTeam
// [0x002200C2] 
// Parameters infos:
// int                            N                              ( CPF_Parm )

void APlayerController::ServerChangeTeam ( int N )
{
	static UFunction* pFnServerChangeTeam = NULL;

	if ( ! pFnServerChangeTeam )
		pFnServerChangeTeam = (UFunction*) UObject::GObjObjects()->Data[ 10795 ];

	APlayerController_execServerChangeTeam_Parms ServerChangeTeam_Parms;
	ServerChangeTeam_Parms.N = N;

	this->ProcessEvent ( pFnServerChangeTeam, &ServerChangeTeam_Parms, NULL );
};

// Function Engine.PlayerController.ChangeTeam
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 TeamName                       ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void APlayerController::ChangeTeam ( struct FString TeamName )
{
	static UFunction* pFnChangeTeam = NULL;

	if ( ! pFnChangeTeam )
		pFnChangeTeam = (UFunction*) UObject::GObjObjects()->Data[ 10792 ];

	APlayerController_execChangeTeam_Parms ChangeTeam_Parms;
	memcpy ( &ChangeTeam_Parms.TeamName, &TeamName, 0x10 );

	this->ProcessEvent ( pFnChangeTeam, &ChangeTeam_Parms, NULL );
};

// Function Engine.PlayerController.SwitchTeam
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::SwitchTeam ( )
{
	static UFunction* pFnSwitchTeam = NULL;

	if ( ! pFnSwitchTeam )
		pFnSwitchTeam = (UFunction*) UObject::GObjObjects()->Data[ 10790 ];

	APlayerController_execSwitchTeam_Parms SwitchTeam_Parms;

	this->ProcessEvent ( pFnSwitchTeam, &SwitchTeam_Parms, NULL );
};

// Function Engine.PlayerController.ServerChangeName
// [0x002200C2] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void APlayerController::ServerChangeName ( struct FString S )
{
	static UFunction* pFnServerChangeName = NULL;

	if ( ! pFnServerChangeName )
		pFnServerChangeName = (UFunction*) UObject::GObjObjects()->Data[ 10788 ];

	APlayerController_execServerChangeName_Parms ServerChangeName_Parms;
	memcpy ( &ServerChangeName_Parms.S, &S, 0x10 );

	this->ProcessEvent ( pFnServerChangeName, &ServerChangeName_Parms, NULL );
};

// Function Engine.PlayerController.SetName
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void APlayerController::SetName ( struct FString S )
{
	static UFunction* pFnSetName = NULL;

	if ( ! pFnSetName )
		pFnSetName = (UFunction*) UObject::GObjObjects()->Data[ 10778 ];

	APlayerController_execSetName_Parms SetName_Parms;
	memcpy ( &SetName_Parms.S, &S, 0x10 );

	this->ProcessEvent ( pFnSetName, &SetName_Parms, NULL );
};

// Function Engine.PlayerController.ServerSuicide
// [0x002200C2] 
// Parameters infos:

void APlayerController::ServerSuicide ( )
{
	static UFunction* pFnServerSuicide = NULL;

	if ( ! pFnServerSuicide )
		pFnServerSuicide = (UFunction*) UObject::GObjObjects()->Data[ 10776 ];

	APlayerController_execServerSuicide_Parms ServerSuicide_Parms;

	this->ProcessEvent ( pFnServerSuicide, &ServerSuicide_Parms, NULL );
};

// Function Engine.PlayerController.Suicide
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::Suicide ( )
{
	static UFunction* pFnSuicide = NULL;

	if ( ! pFnSuicide )
		pFnSuicide = (UFunction*) UObject::GObjObjects()->Data[ 10775 ];

	APlayerController_execSuicide_Parms Suicide_Parms;

	this->ProcessEvent ( pFnSuicide, &Suicide_Parms, NULL );
};

// Function Engine.PlayerController.TriggerInteracted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::TriggerInteracted ( )
{
	static UFunction* pFnTriggerInteracted = NULL;

	if ( ! pFnTriggerInteracted )
		pFnTriggerInteracted = (UFunction*) UObject::GObjObjects()->Data[ 10760 ];

	APlayerController_execTriggerInteracted_Parms TriggerInteracted_Parms;

	this->ProcessEvent ( pFnTriggerInteracted, &TriggerInteracted_Parms, NULL );

	return TriggerInteracted_Parms.ReturnValue;
};

// Function Engine.PlayerController.FindVehicleToDrive
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::FindVehicleToDrive ( )
{
	static UFunction* pFnFindVehicleToDrive = NULL;

	if ( ! pFnFindVehicleToDrive )
		pFnFindVehicleToDrive = (UFunction*) UObject::GObjObjects()->Data[ 10748 ];

	APlayerController_execFindVehicleToDrive_Parms FindVehicleToDrive_Parms;

	this->ProcessEvent ( pFnFindVehicleToDrive, &FindVehicleToDrive_Parms, NULL );

	return FindVehicleToDrive_Parms.ReturnValue;
};

// Function Engine.PlayerController.PerformedUseAction
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::PerformedUseAction ( )
{
	static UFunction* pFnPerformedUseAction = NULL;

	if ( ! pFnPerformedUseAction )
		pFnPerformedUseAction = (UFunction*) UObject::GObjObjects()->Data[ 10745 ];

	APlayerController_execPerformedUseAction_Parms PerformedUseAction_Parms;

	this->ProcessEvent ( pFnPerformedUseAction, &PerformedUseAction_Parms, NULL );

	return PerformedUseAction_Parms.ReturnValue;
};

// Function Engine.PlayerController.ServerUse
// [0x00220042] 
// Parameters infos:

void APlayerController::ServerUse ( )
{
	static UFunction* pFnServerUse = NULL;

	if ( ! pFnServerUse )
		pFnServerUse = (UFunction*) UObject::GObjObjects()->Data[ 10744 ];

	APlayerController_execServerUse_Parms ServerUse_Parms;

	this->ProcessEvent ( pFnServerUse, &ServerUse_Parms, NULL );
};

// Function Engine.PlayerController.Use
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::Use ( )
{
	static UFunction* pFnUse = NULL;

	if ( ! pFnUse )
		pFnUse = (UFunction*) UObject::GObjObjects()->Data[ 10743 ];

	APlayerController_execUse_Parms Use_Parms;

	this->ProcessEvent ( pFnUse, &Use_Parms, NULL );
};

// Function Engine.PlayerController.GetTriggerUseList
// [0x00420002] 
// Parameters infos:
// float                          interactDistanceToCheck        ( CPF_Parm )
// float                          crosshairDist                  ( CPF_Parm )
// float                          minDot                         ( CPF_Parm )
// unsigned long                  bUsuableOnly                   ( CPF_Parm )
// struct TArray<class ATrigger*> out_useList                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void APlayerController::GetTriggerUseList ( float interactDistanceToCheck, float crosshairDist, float minDot, unsigned long bUsuableOnly, struct TArray<class ATrigger*>* out_useList )
{
	static UFunction* pFnGetTriggerUseList = NULL;

	if ( ! pFnGetTriggerUseList )
		pFnGetTriggerUseList = (UFunction*) UObject::GObjObjects()->Data[ 10729 ];

	APlayerController_execGetTriggerUseList_Parms GetTriggerUseList_Parms;
	GetTriggerUseList_Parms.interactDistanceToCheck = interactDistanceToCheck;
	GetTriggerUseList_Parms.crosshairDist = crosshairDist;
	GetTriggerUseList_Parms.minDot = minDot;
	GetTriggerUseList_Parms.bUsuableOnly = bUsuableOnly;

	this->ProcessEvent ( pFnGetTriggerUseList, &GetTriggerUseList_Parms, NULL );

	if ( out_useList )
		memcpy ( out_useList, &GetTriggerUseList_Parms.out_useList, 0x10 );
};

// Function Engine.PlayerController.StopAltFire
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::StopAltFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStopAltFire = NULL;

	if ( ! pFnStopAltFire )
		pFnStopAltFire = (UFunction*) UObject::GObjObjects()->Data[ 10727 ];

	APlayerController_execStopAltFire_Parms StopAltFire_Parms;
	StopAltFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopAltFire, &StopAltFire_Parms, NULL );
};

// Function Engine.PlayerController.StartAltFire
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::StartAltFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartAltFire = NULL;

	if ( ! pFnStartAltFire )
		pFnStartAltFire = (UFunction*) UObject::GObjObjects()->Data[ 10725 ];

	APlayerController_execStartAltFire_Parms StartAltFire_Parms;
	StartAltFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartAltFire, &StartAltFire_Parms, NULL );
};

// Function Engine.PlayerController.StopFire
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::StopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = (UFunction*) UObject::GObjObjects()->Data[ 10723 ];

	APlayerController_execStopFire_Parms StopFire_Parms;
	StopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function Engine.PlayerController.StartFire
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 10720 ];

	APlayerController_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function Engine.PlayerController.NextWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::NextWeapon ( )
{
	static UFunction* pFnNextWeapon = NULL;

	if ( ! pFnNextWeapon )
		pFnNextWeapon = (UFunction*) UObject::GObjObjects()->Data[ 10719 ];

	APlayerController_execNextWeapon_Parms NextWeapon_Parms;

	this->ProcessEvent ( pFnNextWeapon, &NextWeapon_Parms, NULL );
};

// Function Engine.PlayerController.PrevWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::PrevWeapon ( )
{
	static UFunction* pFnPrevWeapon = NULL;

	if ( ! pFnPrevWeapon )
		pFnPrevWeapon = (UFunction*) UObject::GObjObjects()->Data[ 10718 ];

	APlayerController_execPrevWeapon_Parms PrevWeapon_Parms;

	this->ProcessEvent ( pFnPrevWeapon, &PrevWeapon_Parms, NULL );
};

// Function Engine.PlayerController.ServerThrowWeapon
// [0x002200C2] 
// Parameters infos:

void APlayerController::ServerThrowWeapon ( )
{
	static UFunction* pFnServerThrowWeapon = NULL;

	if ( ! pFnServerThrowWeapon )
		pFnServerThrowWeapon = (UFunction*) UObject::GObjObjects()->Data[ 10715 ];

	APlayerController_execServerThrowWeapon_Parms ServerThrowWeapon_Parms;

	this->ProcessEvent ( pFnServerThrowWeapon, &ServerThrowWeapon_Parms, NULL );
};

// Function Engine.PlayerController.ThrowWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ThrowWeapon ( )
{
	static UFunction* pFnThrowWeapon = NULL;

	if ( ! pFnThrowWeapon )
		pFnThrowWeapon = (UFunction*) UObject::GObjObjects()->Data[ 10714 ];

	APlayerController_execThrowWeapon_Parms ThrowWeapon_Parms;

	this->ProcessEvent ( pFnThrowWeapon, &ThrowWeapon_Parms, NULL );
};

// Function Engine.PlayerController.UTrace
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::UTrace ( )
{
	static UFunction* pFnUTrace = NULL;

	if ( ! pFnUTrace )
		pFnUTrace = (UFunction*) UObject::GObjObjects()->Data[ 10713 ];

	APlayerController_execUTrace_Parms UTrace_Parms;

	this->ProcessEvent ( pFnUTrace, &UTrace_Parms, NULL );
};

// Function Engine.PlayerController.ServerUTrace
// [0x002200C2] 
// Parameters infos:

void APlayerController::ServerUTrace ( )
{
	static UFunction* pFnServerUTrace = NULL;

	if ( ! pFnServerUTrace )
		pFnServerUTrace = (UFunction*) UObject::GObjObjects()->Data[ 10712 ];

	APlayerController_execServerUTrace_Parms ServerUTrace_Parms;

	this->ProcessEvent ( pFnServerUTrace, &ServerUTrace_Parms, NULL );
};

// Function Engine.PlayerController.ConditionalPause
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bDesiredPauseState             ( CPF_Parm )

void APlayerController::eventConditionalPause ( unsigned long bDesiredPauseState )
{
	static UFunction* pFnConditionalPause = NULL;

	if ( ! pFnConditionalPause )
		pFnConditionalPause = (UFunction*) UObject::GObjObjects()->Data[ 10710 ];

	APlayerController_eventConditionalPause_Parms ConditionalPause_Parms;
	ConditionalPause_Parms.bDesiredPauseState = bDesiredPauseState;

	this->ProcessEvent ( pFnConditionalPause, &ConditionalPause_Parms, NULL );
};

// Function Engine.PlayerController.ShowMenu
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ShowMenu ( )
{
	static UFunction* pFnShowMenu = NULL;

	if ( ! pFnShowMenu )
		pFnShowMenu = (UFunction*) UObject::GObjObjects()->Data[ 10709 ];

	APlayerController_execShowMenu_Parms ShowMenu_Parms;

	this->ProcessEvent ( pFnShowMenu, &ShowMenu_Parms, NULL );
};

// Function Engine.PlayerController.ServerPause
// [0x002200C2] 
// Parameters infos:

void APlayerController::ServerPause ( )
{
	static UFunction* pFnServerPause = NULL;

	if ( ! pFnServerPause )
		pFnServerPause = (UFunction*) UObject::GObjObjects()->Data[ 10708 ];

	APlayerController_execServerPause_Parms ServerPause_Parms;

	this->ProcessEvent ( pFnServerPause, &ServerPause_Parms, NULL );
};

// Function Engine.PlayerController.Pause
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::Pause ( )
{
	static UFunction* pFnPause = NULL;

	if ( ! pFnPause )
		pFnPause = (UFunction*) UObject::GObjObjects()->Data[ 10707 ];

	APlayerController_execPause_Parms Pause_Parms;

	this->ProcessEvent ( pFnPause, &Pause_Parms, NULL );
};

// Function Engine.PlayerController.IsPaused
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsPaused ( )
{
	static UFunction* pFnIsPaused = NULL;

	if ( ! pFnIsPaused )
		pFnIsPaused = (UFunction*) UObject::GObjObjects()->Data[ 10705 ];

	APlayerController_execIsPaused_Parms IsPaused_Parms;

	this->ProcessEvent ( pFnIsPaused, &IsPaused_Parms, NULL );

	return IsPaused_Parms.ReturnValue;
};

// Function Engine.PlayerController.SetPause
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bPause                         ( CPF_Parm )
// struct FScriptDelegate         CanUnpauseDelegate             ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool APlayerController::SetPause ( unsigned long bPause, struct FScriptDelegate CanUnpauseDelegate )
{
	static UFunction* pFnSetPause = NULL;

	if ( ! pFnSetPause )
		pFnSetPause = (UFunction*) UObject::GObjObjects()->Data[ 10697 ];

	APlayerController_execSetPause_Parms SetPause_Parms;
	SetPause_Parms.bPause = bPause;
	memcpy ( &SetPause_Parms.CanUnpauseDelegate, &CanUnpauseDelegate, 0x10 );

	this->ProcessEvent ( pFnSetPause, &SetPause_Parms, NULL );

	return SetPause_Parms.ReturnValue;
};

// Function Engine.PlayerController.CanUnpause
// [0x00120002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanUnpause ( )
{
	static UFunction* pFnCanUnpause = NULL;

	if ( ! pFnCanUnpause )
		pFnCanUnpause = (UFunction*) UObject::GObjObjects()->Data[ 10695 ];

	APlayerController_execCanUnpause_Parms CanUnpause_Parms;

	this->ProcessEvent ( pFnCanUnpause, &CanUnpause_Parms, NULL );

	return CanUnpause_Parms.ReturnValue;
};

// Function Engine.PlayerController.PauseRumbleForAllPlayers
// [0x00024002] 
// Parameters infos:
// unsigned long                  bShouldPauseRumble             ( CPF_OptionalParm | CPF_Parm )

void APlayerController::PauseRumbleForAllPlayers ( unsigned long bShouldPauseRumble )
{
	static UFunction* pFnPauseRumbleForAllPlayers = NULL;

	if ( ! pFnPauseRumbleForAllPlayers )
		pFnPauseRumbleForAllPlayers = (UFunction*) UObject::GObjObjects()->Data[ 10692 ];

	APlayerController_execPauseRumbleForAllPlayers_Parms PauseRumbleForAllPlayers_Parms;
	PauseRumbleForAllPlayers_Parms.bShouldPauseRumble = bShouldPauseRumble;

	this->ProcessEvent ( pFnPauseRumbleForAllPlayers, &PauseRumbleForAllPlayers_Parms, NULL );
};

// Function Engine.PlayerController.QuickLoad
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::QuickLoad ( )
{
	static UFunction* pFnQuickLoad = NULL;

	if ( ! pFnQuickLoad )
		pFnQuickLoad = (UFunction*) UObject::GObjObjects()->Data[ 10691 ];

	APlayerController_execQuickLoad_Parms QuickLoad_Parms;

	this->ProcessEvent ( pFnQuickLoad, &QuickLoad_Parms, NULL );
};

// Function Engine.PlayerController.QuickSave
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::QuickSave ( )
{
	static UFunction* pFnQuickSave = NULL;

	if ( ! pFnQuickSave )
		pFnQuickSave = (UFunction*) UObject::GObjObjects()->Data[ 10689 ];

	APlayerController_execQuickSave_Parms QuickSave_Parms;

	this->ProcessEvent ( pFnQuickSave, &QuickSave_Parms, NULL );
};

// Function Engine.PlayerController.LocalTravel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::LocalTravel ( struct FString URL )
{
	static UFunction* pFnLocalTravel = NULL;

	if ( ! pFnLocalTravel )
		pFnLocalTravel = (UFunction*) UObject::GObjObjects()->Data[ 10687 ];

	APlayerController_execLocalTravel_Parms LocalTravel_Parms;
	memcpy ( &LocalTravel_Parms.URL, &URL, 0x10 );

	this->ProcessEvent ( pFnLocalTravel, &LocalTravel_Parms, NULL );
};

// Function Engine.PlayerController.RestartLevel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::RestartLevel ( )
{
	static UFunction* pFnRestartLevel = NULL;

	if ( ! pFnRestartLevel )
		pFnRestartLevel = (UFunction*) UObject::GObjObjects()->Data[ 10686 ];

	APlayerController_execRestartLevel_Parms RestartLevel_Parms;

	this->ProcessEvent ( pFnRestartLevel, &RestartLevel_Parms, NULL );
};

// Function Engine.PlayerController.ServerSpeech
// [0x002200C0] 
// Parameters infos:
// struct FName                   Type                           ( CPF_Parm )
// int                            Index                          ( CPF_Parm )
// struct FString                 Callsign                       ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::ServerSpeech ( struct FName Type, int Index, struct FString Callsign )
{
	static UFunction* pFnServerSpeech = NULL;

	if ( ! pFnServerSpeech )
		pFnServerSpeech = (UFunction*) UObject::GObjObjects()->Data[ 10682 ];

	APlayerController_execServerSpeech_Parms ServerSpeech_Parms;
	memcpy ( &ServerSpeech_Parms.Type, &Type, 0x8 );
	ServerSpeech_Parms.Index = Index;
	memcpy ( &ServerSpeech_Parms.Callsign, &Callsign, 0x10 );

	this->ProcessEvent ( pFnServerSpeech, &ServerSpeech_Parms, NULL );
};

// Function Engine.PlayerController.Speech
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   Type                           ( CPF_Parm )
// int                            Index                          ( CPF_Parm )
// struct FString                 Callsign                       ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::Speech ( struct FName Type, int Index, struct FString Callsign )
{
	static UFunction* pFnSpeech = NULL;

	if ( ! pFnSpeech )
		pFnSpeech = (UFunction*) UObject::GObjObjects()->Data[ 10678 ];

	APlayerController_execSpeech_Parms Speech_Parms;
	memcpy ( &Speech_Parms.Type, &Type, 0x8 );
	Speech_Parms.Index = Index;
	memcpy ( &Speech_Parms.Callsign, &Callsign, 0x10 );

	this->ProcessEvent ( pFnSpeech, &Speech_Parms, NULL );
};

// Function Engine.PlayerController.ServerRestartGame
// [0x002200C0] 
// Parameters infos:

void APlayerController::ServerRestartGame ( )
{
	static UFunction* pFnServerRestartGame = NULL;

	if ( ! pFnServerRestartGame )
		pFnServerRestartGame = (UFunction*) UObject::GObjObjects()->Data[ 10677 ];

	APlayerController_execServerRestartGame_Parms ServerRestartGame_Parms;

	this->ProcessEvent ( pFnServerRestartGame, &ServerRestartGame_Parms, NULL );
};

// Function Engine.PlayerController.HandleWalking
// [0x00020002] 
// Parameters infos:

void APlayerController::HandleWalking ( )
{
	static UFunction* pFnHandleWalking = NULL;

	if ( ! pFnHandleWalking )
		pFnHandleWalking = (UFunction*) UObject::GObjObjects()->Data[ 10676 ];

	APlayerController_execHandleWalking_Parms HandleWalking_Parms;

	this->ProcessEvent ( pFnHandleWalking, &HandleWalking_Parms, NULL );
};

// Function Engine.PlayerController.CallServerMove
// [0x00020002] 
// Parameters infos:
// class USavedMove*              NewMove                        ( CPF_Parm )
// struct FVector                 ClientLoc                      ( CPF_Parm )
// unsigned char                  ClientRoll                     ( CPF_Parm )
// int                            View                           ( CPF_Parm )
// class USavedMove*              OldMove                        ( CPF_Parm )

void APlayerController::CallServerMove ( class USavedMove* NewMove, struct FVector ClientLoc, unsigned char ClientRoll, int View, class USavedMove* OldMove )
{
	static UFunction* pFnCallServerMove = NULL;

	if ( ! pFnCallServerMove )
		pFnCallServerMove = (UFunction*) UObject::GObjObjects()->Data[ 10665 ];

	APlayerController_execCallServerMove_Parms CallServerMove_Parms;
	CallServerMove_Parms.NewMove = NewMove;
	memcpy ( &CallServerMove_Parms.ClientLoc, &ClientLoc, 0xC );
	CallServerMove_Parms.ClientRoll = ClientRoll;
	CallServerMove_Parms.View = View;
	CallServerMove_Parms.OldMove = OldMove;

	this->ProcessEvent ( pFnCallServerMove, &CallServerMove_Parms, NULL );
};

// Function Engine.PlayerController.ReplicateMove
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 newAccel                       ( CPF_Parm )
// unsigned char                  DoubleClickMove                ( CPF_Parm )
// struct FRotator                DeltaRot                       ( CPF_Parm )

void APlayerController::ReplicateMove ( float DeltaTime, struct FVector newAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot )
{
	static UFunction* pFnReplicateMove = NULL;

	if ( ! pFnReplicateMove )
		pFnReplicateMove = (UFunction*) UObject::GObjObjects()->Data[ 10642 ];

	APlayerController_execReplicateMove_Parms ReplicateMove_Parms;
	ReplicateMove_Parms.DeltaTime = DeltaTime;
	memcpy ( &ReplicateMove_Parms.newAccel, &newAccel, 0xC );
	ReplicateMove_Parms.DoubleClickMove = DoubleClickMove;
	memcpy ( &ReplicateMove_Parms.DeltaRot, &DeltaRot, 0xC );

	this->ProcessEvent ( pFnReplicateMove, &ReplicateMove_Parms, NULL );
};

// Function Engine.PlayerController.MoveLog
// [0x00024002] 
// Parameters infos:
// struct FName                   FunctionName                   ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )
// float                          TimeStamp                      ( CPF_Parm )
// struct FVector                 NewLoc                         ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 NewVel                         ( CPF_OptionalParm | CPF_Parm )

void APlayerController::MoveLog ( struct FName FunctionName, struct FString Message, float TimeStamp, struct FVector NewLoc, struct FVector NewVel )
{
	static UFunction* pFnMoveLog = NULL;

	if ( ! pFnMoveLog )
		pFnMoveLog = (UFunction*) UObject::GObjObjects()->Data[ 10636 ];

	APlayerController_execMoveLog_Parms MoveLog_Parms;
	memcpy ( &MoveLog_Parms.FunctionName, &FunctionName, 0x8 );
	memcpy ( &MoveLog_Parms.Message, &Message, 0x10 );
	MoveLog_Parms.TimeStamp = TimeStamp;
	memcpy ( &MoveLog_Parms.NewLoc, &NewLoc, 0xC );
	memcpy ( &MoveLog_Parms.NewVel, &NewVel, 0xC );

	this->ProcessEvent ( pFnMoveLog, &MoveLog_Parms, NULL );
};

// Function Engine.PlayerController.CompressAccel
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            C                              ( CPF_Parm )

int APlayerController::CompressAccel ( int C )
{
	static UFunction* pFnCompressAccel = NULL;

	if ( ! pFnCompressAccel )
		pFnCompressAccel = (UFunction*) UObject::GObjObjects()->Data[ 10633 ];

	APlayerController_execCompressAccel_Parms CompressAccel_Parms;
	CompressAccel_Parms.C = C;

	this->ProcessEvent ( pFnCompressAccel, &CompressAccel_Parms, NULL );

	return CompressAccel_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetFreeMove
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USavedMove*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USavedMove* APlayerController::GetFreeMove ( )
{
	static UFunction* pFnGetFreeMove = NULL;

	if ( ! pFnGetFreeMove )
		pFnGetFreeMove = (UFunction*) UObject::GObjObjects()->Data[ 10628 ];

	APlayerController_execGetFreeMove_Parms GetFreeMove_Parms;

	this->ProcessEvent ( pFnGetFreeMove, &GetFreeMove_Parms, NULL );

	return GetFreeMove_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientUpdatePosition
// [0x00020002] 
// Parameters infos:

void APlayerController::ClientUpdatePosition ( )
{
	static UFunction* pFnClientUpdatePosition = NULL;

	if ( ! pFnClientUpdatePosition )
		pFnClientUpdatePosition = (UFunction*) UObject::GObjObjects()->Data[ 10607 ];

	APlayerController_execClientUpdatePosition_Parms ClientUpdatePosition_Parms;

	this->ProcessEvent ( pFnClientUpdatePosition, &ClientUpdatePosition_Parms, NULL );
};

// Function Engine.PlayerController.ClearAckedMoves
// [0x00020002] 
// Parameters infos:

void APlayerController::ClearAckedMoves ( )
{
	static UFunction* pFnClearAckedMoves = NULL;

	if ( ! pFnClearAckedMoves )
		pFnClearAckedMoves = (UFunction*) UObject::GObjObjects()->Data[ 10605 ];

	APlayerController_execClearAckedMoves_Parms ClearAckedMoves_Parms;

	this->ProcessEvent ( pFnClearAckedMoves, &ClearAckedMoves_Parms, NULL );
};

// Function Engine.PlayerController.ServerUpdatePing
// [0x00220042] 
// Parameters infos:
// int                            NewPing                        ( CPF_Parm )

void APlayerController::ServerUpdatePing ( int NewPing )
{
	static UFunction* pFnServerUpdatePing = NULL;

	if ( ! pFnServerUpdatePing )
		pFnServerUpdatePing = (UFunction*) UObject::GObjObjects()->Data[ 10602 ];

	APlayerController_execServerUpdatePing_Parms ServerUpdatePing_Parms;
	ServerUpdatePing_Parms.NewPing = NewPing;

	this->ProcessEvent ( pFnServerUpdatePing, &ServerUpdatePing_Parms, NULL );
};

// Function Engine.PlayerController.UpdateStateFromAdjustment
// [0x00020002] 
// Parameters infos:
// struct FName                   NewState                       ( CPF_Parm )

void APlayerController::UpdateStateFromAdjustment ( struct FName NewState )
{
	static UFunction* pFnUpdateStateFromAdjustment = NULL;

	if ( ! pFnUpdateStateFromAdjustment )
		pFnUpdateStateFromAdjustment = (UFunction*) UObject::GObjObjects()->Data[ 10600 ];

	APlayerController_execUpdateStateFromAdjustment_Parms UpdateStateFromAdjustment_Parms;
	memcpy ( &UpdateStateFromAdjustment_Parms.NewState, &NewState, 0x8 );

	this->ProcessEvent ( pFnUpdateStateFromAdjustment, &UpdateStateFromAdjustment_Parms, NULL );
};

// Function Engine.PlayerController.LongClientAdjustPosition
// [0x01020142] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FName                   NewState                       ( CPF_Parm )
// unsigned char                  newPhysics                     ( CPF_Parm )
// float                          NewLocX                        ( CPF_Parm )
// float                          NewLocY                        ( CPF_Parm )
// float                          NewLocZ                        ( CPF_Parm )
// float                          NewVelX                        ( CPF_Parm )
// float                          NewVelY                        ( CPF_Parm )
// float                          NewVelZ                        ( CPF_Parm )
// class AActor*                  NewBase                        ( CPF_Parm )
// float                          NewFloorX                      ( CPF_Parm )
// float                          NewFloorY                      ( CPF_Parm )
// float                          NewFloorZ                      ( CPF_Parm )

void APlayerController::LongClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ )
{
	static UFunction* pFnLongClientAdjustPosition = NULL;

	if ( ! pFnLongClientAdjustPosition )
		pFnLongClientAdjustPosition = (UFunction*) UObject::GObjObjects()->Data[ 10561 ];

	APlayerController_execLongClientAdjustPosition_Parms LongClientAdjustPosition_Parms;
	LongClientAdjustPosition_Parms.TimeStamp = TimeStamp;
	memcpy ( &LongClientAdjustPosition_Parms.NewState, &NewState, 0x8 );
	LongClientAdjustPosition_Parms.newPhysics = newPhysics;
	LongClientAdjustPosition_Parms.NewLocX = NewLocX;
	LongClientAdjustPosition_Parms.NewLocY = NewLocY;
	LongClientAdjustPosition_Parms.NewLocZ = NewLocZ;
	LongClientAdjustPosition_Parms.NewVelX = NewVelX;
	LongClientAdjustPosition_Parms.NewVelY = NewVelY;
	LongClientAdjustPosition_Parms.NewVelZ = NewVelZ;
	LongClientAdjustPosition_Parms.NewBase = NewBase;
	LongClientAdjustPosition_Parms.NewFloorX = NewFloorX;
	LongClientAdjustPosition_Parms.NewFloorY = NewFloorY;
	LongClientAdjustPosition_Parms.NewFloorZ = NewFloorZ;

	this->ProcessEvent ( pFnLongClientAdjustPosition, &LongClientAdjustPosition_Parms, NULL );
};

// Function Engine.PlayerController.UpdatePing
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )

void APlayerController::UpdatePing ( float TimeStamp )
{
	static UFunction* pFnUpdatePing = NULL;

	if ( ! pFnUpdatePing )
		pFnUpdatePing = (UFunction*) UObject::GObjObjects()->Data[ 10541 ];

	APlayerController_execUpdatePing_Parms UpdatePing_Parms;
	UpdatePing_Parms.TimeStamp = TimeStamp;

	this->ProcessEvent ( pFnUpdatePing, &UpdatePing_Parms, NULL );
};

// Function Engine.PlayerController.ServerSetNetSpeed
// [0x002200C2] 
// Parameters infos:
// int                            NewSpeed                       ( CPF_Parm )

void APlayerController::ServerSetNetSpeed ( int NewSpeed )
{
	static UFunction* pFnServerSetNetSpeed = NULL;

	if ( ! pFnServerSetNetSpeed )
		pFnServerSetNetSpeed = (UFunction*) UObject::GObjObjects()->Data[ 10554 ];

	APlayerController_execServerSetNetSpeed_Parms ServerSetNetSpeed_Parms;
	ServerSetNetSpeed_Parms.NewSpeed = NewSpeed;

	this->ProcessEvent ( pFnServerSetNetSpeed, &ServerSetNetSpeed_Parms, NULL );
};

// Function Engine.PlayerController.ClientAdjustPosition
// [0x01020142] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FName                   NewState                       ( CPF_Parm )
// unsigned char                  newPhysics                     ( CPF_Parm )
// float                          NewLocX                        ( CPF_Parm )
// float                          NewLocY                        ( CPF_Parm )
// float                          NewLocZ                        ( CPF_Parm )
// float                          NewVelX                        ( CPF_Parm )
// float                          NewVelY                        ( CPF_Parm )
// float                          NewVelZ                        ( CPF_Parm )
// class AActor*                  NewBase                        ( CPF_Parm )

void APlayerController::ClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase )
{
	static UFunction* pFnClientAdjustPosition = NULL;

	if ( ! pFnClientAdjustPosition )
		pFnClientAdjustPosition = (UFunction*) UObject::GObjObjects()->Data[ 10542 ];

	APlayerController_execClientAdjustPosition_Parms ClientAdjustPosition_Parms;
	ClientAdjustPosition_Parms.TimeStamp = TimeStamp;
	memcpy ( &ClientAdjustPosition_Parms.NewState, &NewState, 0x8 );
	ClientAdjustPosition_Parms.newPhysics = newPhysics;
	ClientAdjustPosition_Parms.NewLocX = NewLocX;
	ClientAdjustPosition_Parms.NewLocY = NewLocY;
	ClientAdjustPosition_Parms.NewLocZ = NewLocZ;
	ClientAdjustPosition_Parms.NewVelX = NewVelX;
	ClientAdjustPosition_Parms.NewVelY = NewVelY;
	ClientAdjustPosition_Parms.NewVelZ = NewVelZ;
	ClientAdjustPosition_Parms.NewBase = NewBase;

	this->ProcessEvent ( pFnClientAdjustPosition, &ClientAdjustPosition_Parms, NULL );
};

// Function Engine.PlayerController.ClientAckGoodMove
// [0x01020142] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )

void APlayerController::ClientAckGoodMove ( float TimeStamp )
{
	static UFunction* pFnClientAckGoodMove = NULL;

	if ( ! pFnClientAckGoodMove )
		pFnClientAckGoodMove = (UFunction*) UObject::GObjObjects()->Data[ 10539 ];

	APlayerController_execClientAckGoodMove_Parms ClientAckGoodMove_Parms;
	ClientAckGoodMove_Parms.TimeStamp = TimeStamp;

	this->ProcessEvent ( pFnClientAckGoodMove, &ClientAckGoodMove_Parms, NULL );
};

// Function Engine.PlayerController.ClientCapBandwidth
// [0x010201C2] 
// Parameters infos:
// int                            Cap                            ( CPF_Parm )

void APlayerController::ClientCapBandwidth ( int Cap )
{
	static UFunction* pFnClientCapBandwidth = NULL;

	if ( ! pFnClientCapBandwidth )
		pFnClientCapBandwidth = (UFunction*) UObject::GObjObjects()->Data[ 10536 ];

	APlayerController_execClientCapBandwidth_Parms ClientCapBandwidth_Parms;
	ClientCapBandwidth_Parms.Cap = Cap;

	this->ProcessEvent ( pFnClientCapBandwidth, &ClientCapBandwidth_Parms, NULL );
};

// Function Engine.PlayerController.ShortClientAdjustPosition
// [0x01020142] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FName                   NewState                       ( CPF_Parm )
// unsigned char                  newPhysics                     ( CPF_Parm )
// float                          NewLocX                        ( CPF_Parm )
// float                          NewLocY                        ( CPF_Parm )
// float                          NewLocZ                        ( CPF_Parm )
// class AActor*                  NewBase                        ( CPF_Parm )

void APlayerController::ShortClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase )
{
	static UFunction* pFnShortClientAdjustPosition = NULL;

	if ( ! pFnShortClientAdjustPosition )
		pFnShortClientAdjustPosition = (UFunction*) UObject::GObjObjects()->Data[ 10527 ];

	APlayerController_execShortClientAdjustPosition_Parms ShortClientAdjustPosition_Parms;
	ShortClientAdjustPosition_Parms.TimeStamp = TimeStamp;
	memcpy ( &ShortClientAdjustPosition_Parms.NewState, &NewState, 0x8 );
	ShortClientAdjustPosition_Parms.newPhysics = newPhysics;
	ShortClientAdjustPosition_Parms.NewLocX = NewLocX;
	ShortClientAdjustPosition_Parms.NewLocY = NewLocY;
	ShortClientAdjustPosition_Parms.NewLocZ = NewLocZ;
	ShortClientAdjustPosition_Parms.NewBase = NewBase;

	this->ProcessEvent ( pFnShortClientAdjustPosition, &ShortClientAdjustPosition_Parms, NULL );
};

// Function Engine.PlayerController.VeryShortClientAdjustPosition
// [0x01020142] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// float                          NewLocX                        ( CPF_Parm )
// float                          NewLocY                        ( CPF_Parm )
// float                          NewLocZ                        ( CPF_Parm )
// class AActor*                  NewBase                        ( CPF_Parm )

void APlayerController::VeryShortClientAdjustPosition ( float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase )
{
	static UFunction* pFnVeryShortClientAdjustPosition = NULL;

	if ( ! pFnVeryShortClientAdjustPosition )
		pFnVeryShortClientAdjustPosition = (UFunction*) UObject::GObjObjects()->Data[ 10520 ];

	APlayerController_execVeryShortClientAdjustPosition_Parms VeryShortClientAdjustPosition_Parms;
	VeryShortClientAdjustPosition_Parms.TimeStamp = TimeStamp;
	VeryShortClientAdjustPosition_Parms.NewLocX = NewLocX;
	VeryShortClientAdjustPosition_Parms.NewLocY = NewLocY;
	VeryShortClientAdjustPosition_Parms.NewLocZ = NewLocZ;
	VeryShortClientAdjustPosition_Parms.NewBase = NewBase;

	this->ProcessEvent ( pFnVeryShortClientAdjustPosition, &VeryShortClientAdjustPosition_Parms, NULL );
};

// Function Engine.PlayerController.MoveAutonomous
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// unsigned char                  CompressedFlags                ( CPF_Parm )
// struct FVector                 newAccel                       ( CPF_Parm )
// struct FRotator                DeltaRot                       ( CPF_Parm )

void APlayerController::MoveAutonomous ( float DeltaTime, unsigned char CompressedFlags, struct FVector newAccel, struct FRotator DeltaRot )
{
	static UFunction* pFnMoveAutonomous = NULL;

	if ( ! pFnMoveAutonomous )
		pFnMoveAutonomous = (UFunction*) UObject::GObjObjects()->Data[ 10510 ];

	APlayerController_execMoveAutonomous_Parms MoveAutonomous_Parms;
	MoveAutonomous_Parms.DeltaTime = DeltaTime;
	MoveAutonomous_Parms.CompressedFlags = CompressedFlags;
	memcpy ( &MoveAutonomous_Parms.newAccel, &newAccel, 0xC );
	memcpy ( &MoveAutonomous_Parms.DeltaRot, &DeltaRot, 0xC );

	this->ProcessEvent ( pFnMoveAutonomous, &MoveAutonomous_Parms, NULL );
};

// Function Engine.PlayerController.ProcessMove
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 newAccel                       ( CPF_Parm )
// unsigned char                  DoubleClickMove                ( CPF_Parm )
// struct FRotator                DeltaRot                       ( CPF_Parm )

void APlayerController::ProcessMove ( float DeltaTime, struct FVector newAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot )
{
	static UFunction* pFnProcessMove = NULL;

	if ( ! pFnProcessMove )
		pFnProcessMove = (UFunction*) UObject::GObjObjects()->Data[ 10505 ];

	APlayerController_execProcessMove_Parms ProcessMove_Parms;
	ProcessMove_Parms.DeltaTime = DeltaTime;
	memcpy ( &ProcessMove_Parms.newAccel, &newAccel, 0xC );
	ProcessMove_Parms.DoubleClickMove = DoubleClickMove;
	memcpy ( &ProcessMove_Parms.DeltaRot, &DeltaRot, 0xC );

	this->ProcessEvent ( pFnProcessMove, &ProcessMove_Parms, NULL );
};

// Function Engine.PlayerController.ProcessDrive
// [0x00020002] 
// Parameters infos:
// float                          InForward                      ( CPF_Parm )
// float                          InStrafe                       ( CPF_Parm )
// float                          InUp                           ( CPF_Parm )
// unsigned long                  InJump                         ( CPF_Parm )

void APlayerController::ProcessDrive ( float InForward, float InStrafe, float InUp, unsigned long InJump )
{
	static UFunction* pFnProcessDrive = NULL;

	if ( ! pFnProcessDrive )
		pFnProcessDrive = (UFunction*) UObject::GObjObjects()->Data[ 10500 ];

	APlayerController_execProcessDrive_Parms ProcessDrive_Parms;
	ProcessDrive_Parms.InForward = InForward;
	ProcessDrive_Parms.InStrafe = InStrafe;
	ProcessDrive_Parms.InUp = InUp;
	ProcessDrive_Parms.InJump = InJump;

	this->ProcessEvent ( pFnProcessDrive, &ProcessDrive_Parms, NULL );
};

// Function Engine.PlayerController.ServerDrive
// [0x00220042] 
// Parameters infos:
// float                          InForward                      ( CPF_Parm )
// float                          InStrafe                       ( CPF_Parm )
// float                          aUp                            ( CPF_Parm )
// unsigned long                  InJump                         ( CPF_Parm )
// int                            View                           ( CPF_Parm )

void APlayerController::ServerDrive ( float InForward, float InStrafe, float aUp, unsigned long InJump, int View )
{
	static UFunction* pFnServerDrive = NULL;

	if ( ! pFnServerDrive )
		pFnServerDrive = (UFunction*) UObject::GObjObjects()->Data[ 10493 ];

	APlayerController_execServerDrive_Parms ServerDrive_Parms;
	ServerDrive_Parms.InForward = InForward;
	ServerDrive_Parms.InStrafe = InStrafe;
	ServerDrive_Parms.aUp = aUp;
	ServerDrive_Parms.InJump = InJump;
	ServerDrive_Parms.View = View;

	this->ProcessEvent ( pFnServerDrive, &ServerDrive_Parms, NULL );
};

// Function Engine.PlayerController.SendClientAdjustment
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventSendClientAdjustment ( )
{
	static UFunction* pFnSendClientAdjustment = NULL;

	if ( ! pFnSendClientAdjustment )
		pFnSendClientAdjustment = (UFunction*) UObject::GObjObjects()->Data[ 10492 ];

	APlayerController_eventSendClientAdjustment_Parms SendClientAdjustment_Parms;

	this->ProcessEvent ( pFnSendClientAdjustment, &SendClientAdjustment_Parms, NULL );
};

// Function Engine.PlayerController.ServerMove
// [0x00220042] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FVector                 InAccel                        ( CPF_Parm )
// struct FVector                 ClientLoc                      ( CPF_Parm )
// unsigned char                  MoveFlags                      ( CPF_Parm )
// unsigned char                  ClientRoll                     ( CPF_Parm )
// int                            View                           ( CPF_Parm )

void APlayerController::ServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View )
{
	static UFunction* pFnServerMove = NULL;

	if ( ! pFnServerMove )
		pFnServerMove = (UFunction*) UObject::GObjObjects()->Data[ 10460 ];

	APlayerController_execServerMove_Parms ServerMove_Parms;
	ServerMove_Parms.TimeStamp = TimeStamp;
	memcpy ( &ServerMove_Parms.InAccel, &InAccel, 0xC );
	memcpy ( &ServerMove_Parms.ClientLoc, &ClientLoc, 0xC );
	ServerMove_Parms.MoveFlags = MoveFlags;
	ServerMove_Parms.ClientRoll = ClientRoll;
	ServerMove_Parms.View = View;

	this->ProcessEvent ( pFnServerMove, &ServerMove_Parms, NULL );
};

// Function Engine.PlayerController.OldServerMove
// [0x00220042] 
// Parameters infos:
// float                          OldTimeStamp                   ( CPF_Parm )
// unsigned char                  OldAccelX                      ( CPF_Parm )
// unsigned char                  OldAccelY                      ( CPF_Parm )
// unsigned char                  OldAccelZ                      ( CPF_Parm )
// unsigned char                  OldMoveFlags                   ( CPF_Parm )

void APlayerController::OldServerMove ( float OldTimeStamp, unsigned char OldAccelX, unsigned char OldAccelY, unsigned char OldAccelZ, unsigned char OldMoveFlags )
{
	static UFunction* pFnOldServerMove = NULL;

	if ( ! pFnOldServerMove )
		pFnOldServerMove = (UFunction*) UObject::GObjObjects()->Data[ 10452 ];

	APlayerController_execOldServerMove_Parms OldServerMove_Parms;
	OldServerMove_Parms.OldTimeStamp = OldTimeStamp;
	OldServerMove_Parms.OldAccelX = OldAccelX;
	OldServerMove_Parms.OldAccelY = OldAccelY;
	OldServerMove_Parms.OldAccelZ = OldAccelZ;
	OldServerMove_Parms.OldMoveFlags = OldMoveFlags;

	this->ProcessEvent ( pFnOldServerMove, &OldServerMove_Parms, NULL );
};

// Function Engine.PlayerController.DualServerMove
// [0x00220042] 
// Parameters infos:
// float                          TimeStamp0                     ( CPF_Parm )
// struct FVector                 InAccel0                       ( CPF_Parm )
// unsigned char                  PendingFlags                   ( CPF_Parm )
// int                            View0                          ( CPF_Parm )
// float                          TimeStamp                      ( CPF_Parm )
// struct FVector                 InAccel                        ( CPF_Parm )
// struct FVector                 ClientLoc                      ( CPF_Parm )
// unsigned char                  NewFlags                       ( CPF_Parm )
// unsigned char                  ClientRoll                     ( CPF_Parm )
// int                            View                           ( CPF_Parm )

void APlayerController::DualServerMove ( float TimeStamp0, struct FVector InAccel0, unsigned char PendingFlags, int View0, float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, int View )
{
	static UFunction* pFnDualServerMove = NULL;

	if ( ! pFnDualServerMove )
		pFnDualServerMove = (UFunction*) UObject::GObjObjects()->Data[ 10441 ];

	APlayerController_execDualServerMove_Parms DualServerMove_Parms;
	DualServerMove_Parms.TimeStamp0 = TimeStamp0;
	memcpy ( &DualServerMove_Parms.InAccel0, &InAccel0, 0xC );
	DualServerMove_Parms.PendingFlags = PendingFlags;
	DualServerMove_Parms.View0 = View0;
	DualServerMove_Parms.TimeStamp = TimeStamp;
	memcpy ( &DualServerMove_Parms.InAccel, &InAccel, 0xC );
	memcpy ( &DualServerMove_Parms.ClientLoc, &ClientLoc, 0xC );
	DualServerMove_Parms.NewFlags = NewFlags;
	DualServerMove_Parms.ClientRoll = ClientRoll;
	DualServerMove_Parms.View = View;

	this->ProcessEvent ( pFnDualServerMove, &DualServerMove_Parms, NULL );
};

// Function Engine.PlayerController.ForceDeathUpdate
// [0x00020002] 
// Parameters infos:

void APlayerController::ForceDeathUpdate ( )
{
	static UFunction* pFnForceDeathUpdate = NULL;

	if ( ! pFnForceDeathUpdate )
		pFnForceDeathUpdate = (UFunction*) UObject::GObjObjects()->Data[ 10439 ];

	APlayerController_execForceDeathUpdate_Parms ForceDeathUpdate_Parms;

	this->ProcessEvent ( pFnForceDeathUpdate, &ForceDeathUpdate_Parms, NULL );
};

// Function Engine.PlayerController.ClientVoiceMessage
// [0x00020000] 
// Parameters infos:
// class APlayerReplicationInfo*  Sender                         ( CPF_Parm )
// class APlayerReplicationInfo*  Recipient                      ( CPF_Parm )
// struct FName                   MessageType                    ( CPF_Parm )
// unsigned char                  messageID                      ( CPF_Parm )

void APlayerController::ClientVoiceMessage ( class APlayerReplicationInfo* Sender, class APlayerReplicationInfo* Recipient, struct FName MessageType, unsigned char messageID )
{
	static UFunction* pFnClientVoiceMessage = NULL;

	if ( ! pFnClientVoiceMessage )
		pFnClientVoiceMessage = (UFunction*) UObject::GObjObjects()->Data[ 10434 ];

	APlayerController_execClientVoiceMessage_Parms ClientVoiceMessage_Parms;
	ClientVoiceMessage_Parms.Sender = Sender;
	ClientVoiceMessage_Parms.Recipient = Recipient;
	memcpy ( &ClientVoiceMessage_Parms.MessageType, &MessageType, 0x8 );
	ClientVoiceMessage_Parms.messageID = messageID;

	this->ProcessEvent ( pFnClientVoiceMessage, &ClientVoiceMessage_Parms, NULL );
};

// Function Engine.PlayerController.UsingFirstPersonCamera
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::UsingFirstPersonCamera ( )
{
	static UFunction* pFnUsingFirstPersonCamera = NULL;

	if ( ! pFnUsingFirstPersonCamera )
		pFnUsingFirstPersonCamera = (UFunction*) UObject::GObjObjects()->Data[ 10432 ];

	APlayerController_execUsingFirstPersonCamera_Parms UsingFirstPersonCamera_Parms;

	this->ProcessEvent ( pFnUsingFirstPersonCamera, &UsingFirstPersonCamera_Parms, NULL );

	return UsingFirstPersonCamera_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientSetCameraFade
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bEnableFading                  ( CPF_Parm )
// struct FColor                  FadeColor                      ( CPF_OptionalParm | CPF_Parm )
// struct FVector2D               FadeAlpha                      ( CPF_OptionalParm | CPF_Parm )
// float                          FadeTime                       ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientSetCameraFade ( unsigned long bEnableFading, struct FColor FadeColor, struct FVector2D FadeAlpha, float FadeTime )
{
	static UFunction* pFnClientSetCameraFade = NULL;

	if ( ! pFnClientSetCameraFade )
		pFnClientSetCameraFade = (UFunction*) UObject::GObjObjects()->Data[ 10427 ];

	APlayerController_eventClientSetCameraFade_Parms ClientSetCameraFade_Parms;
	ClientSetCameraFade_Parms.bEnableFading = bEnableFading;
	memcpy ( &ClientSetCameraFade_Parms.FadeColor, &FadeColor, 0x4 );
	memcpy ( &ClientSetCameraFade_Parms.FadeAlpha, &FadeAlpha, 0x8 );
	ClientSetCameraFade_Parms.FadeTime = FadeTime;

	this->ProcessEvent ( pFnClientSetCameraFade, &ClientSetCameraFade_Parms, NULL );
};

// Function Engine.PlayerController.ResetCameraMode
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventResetCameraMode ( )
{
	static UFunction* pFnResetCameraMode = NULL;

	if ( ! pFnResetCameraMode )
		pFnResetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 10424 ];

	APlayerController_eventResetCameraMode_Parms ResetCameraMode_Parms;

	this->ProcessEvent ( pFnResetCameraMode, &ResetCameraMode_Parms, NULL );
};

// Function Engine.PlayerController.SetCameraMode
// [0x00020002] 
// Parameters infos:
// struct FName                   NewCamMode                     ( CPF_Parm )

void APlayerController::SetCameraMode ( struct FName NewCamMode )
{
	static UFunction* pFnSetCameraMode = NULL;

	if ( ! pFnSetCameraMode )
		pFnSetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 10422 ];

	APlayerController_execSetCameraMode_Parms SetCameraMode_Parms;
	memcpy ( &SetCameraMode_Parms.NewCamMode, &NewCamMode, 0x8 );

	this->ProcessEvent ( pFnSetCameraMode, &SetCameraMode_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetCameraMode
// [0x010201C2] 
// Parameters infos:
// struct FName                   NewCamMode                     ( CPF_Parm )

void APlayerController::ClientSetCameraMode ( struct FName NewCamMode )
{
	static UFunction* pFnClientSetCameraMode = NULL;

	if ( ! pFnClientSetCameraMode )
		pFnClientSetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 10420 ];

	APlayerController_execClientSetCameraMode_Parms ClientSetCameraMode_Parms;
	memcpy ( &ClientSetCameraMode_Parms.NewCamMode, &NewCamMode, 0x8 );

	this->ProcessEvent ( pFnClientSetCameraMode, &ClientSetCameraMode_Parms, NULL );
};

// Function Engine.PlayerController.ServerCamera
// [0x002200C2] 
// Parameters infos:
// struct FName                   NewMode                        ( CPF_Parm )

void APlayerController::ServerCamera ( struct FName NewMode )
{
	static UFunction* pFnServerCamera = NULL;

	if ( ! pFnServerCamera )
		pFnServerCamera = (UFunction*) UObject::GObjObjects()->Data[ 10418 ];

	APlayerController_execServerCamera_Parms ServerCamera_Parms;
	memcpy ( &ServerCamera_Parms.NewMode, &NewMode, 0x8 );

	this->ProcessEvent ( pFnServerCamera, &ServerCamera_Parms, NULL );
};

// Function Engine.PlayerController.Camera
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   NewMode                        ( CPF_Parm )

void APlayerController::Camera ( struct FName NewMode )
{
	static UFunction* pFnCamera = NULL;

	if ( ! pFnCamera )
		pFnCamera = (UFunction*) UObject::GObjObjects()->Data[ 10416 ];

	APlayerController_execCamera_Parms Camera_Parms;
	memcpy ( &Camera_Parms.NewMode, &NewMode, 0x8 );

	this->ProcessEvent ( pFnCamera, &Camera_Parms, NULL );
};

// Function Engine.PlayerController.PreClientTravel
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 PendingURL                     ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  TravelType                     ( CPF_Parm )
// unsigned long                  bIsSeamlessTravel              ( CPF_Parm )

void APlayerController::eventPreClientTravel ( struct FString PendingURL, unsigned char TravelType, unsigned long bIsSeamlessTravel )
{
	static UFunction* pFnPreClientTravel = NULL;

	if ( ! pFnPreClientTravel )
		pFnPreClientTravel = (UFunction*) UObject::GObjObjects()->Data[ 10408 ];

	APlayerController_eventPreClientTravel_Parms PreClientTravel_Parms;
	memcpy ( &PreClientTravel_Parms.PendingURL, &PendingURL, 0x10 );
	PreClientTravel_Parms.TravelType = TravelType;
	PreClientTravel_Parms.bIsSeamlessTravel = bIsSeamlessTravel;

	this->ProcessEvent ( pFnPreClientTravel, &PreClientTravel_Parms, NULL );
};

// Function Engine.PlayerController.ServerTeamSay
// [0x00220042] 
// Parameters infos:
// struct FString                 msg                            ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::ServerTeamSay ( struct FString msg )
{
	static UFunction* pFnServerTeamSay = NULL;

	if ( ! pFnServerTeamSay )
		pFnServerTeamSay = (UFunction*) UObject::GObjObjects()->Data[ 10404 ];

	APlayerController_execServerTeamSay_Parms ServerTeamSay_Parms;
	memcpy ( &ServerTeamSay_Parms.msg, &msg, 0x10 );

	this->ProcessEvent ( pFnServerTeamSay, &ServerTeamSay_Parms, NULL );
};

// Function Engine.PlayerController.TeamSay
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 msg                            ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::TeamSay ( struct FString msg )
{
	static UFunction* pFnTeamSay = NULL;

	if ( ! pFnTeamSay )
		pFnTeamSay = (UFunction*) UObject::GObjObjects()->Data[ 10402 ];

	APlayerController_execTeamSay_Parms TeamSay_Parms;
	memcpy ( &TeamSay_Parms.msg, &msg, 0x10 );

	this->ProcessEvent ( pFnTeamSay, &TeamSay_Parms, NULL );
};

// Function Engine.PlayerController.ClientAdminMessage
// [0x010201C2] 
// Parameters infos:
// struct FString                 msg                            ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::ClientAdminMessage ( struct FString msg )
{
	static UFunction* pFnClientAdminMessage = NULL;

	if ( ! pFnClientAdminMessage )
		pFnClientAdminMessage = (UFunction*) UObject::GObjObjects()->Data[ 10399 ];

	APlayerController_execClientAdminMessage_Parms ClientAdminMessage_Parms;
	memcpy ( &ClientAdminMessage_Parms.msg, &msg, 0x10 );

	this->ProcessEvent ( pFnClientAdminMessage, &ClientAdminMessage_Parms, NULL );
};

// Function Engine.PlayerController.ServerSay
// [0x00220042] 
// Parameters infos:
// struct FString                 msg                            ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::ServerSay ( struct FString msg )
{
	static UFunction* pFnServerSay = NULL;

	if ( ! pFnServerSay )
		pFnServerSay = (UFunction*) UObject::GObjObjects()->Data[ 10396 ];

	APlayerController_execServerSay_Parms ServerSay_Parms;
	memcpy ( &ServerSay_Parms.msg, &msg, 0x10 );

	this->ProcessEvent ( pFnServerSay, &ServerSay_Parms, NULL );
};

// Function Engine.PlayerController.Say
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 msg                            ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::Say ( struct FString msg )
{
	static UFunction* pFnSay = NULL;

	if ( ! pFnSay )
		pFnSay = (UFunction*) UObject::GObjObjects()->Data[ 10394 ];

	APlayerController_execSay_Parms Say_Parms;
	memcpy ( &Say_Parms.msg, &msg, 0x10 );

	this->ProcessEvent ( pFnSay, &Say_Parms, NULL );
};

// Function Engine.PlayerController.AllowTextMessage
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 msg                            ( CPF_Parm | CPF_NeedCtorLink )

bool APlayerController::AllowTextMessage ( struct FString msg )
{
	static UFunction* pFnAllowTextMessage = NULL;

	if ( ! pFnAllowTextMessage )
		pFnAllowTextMessage = (UFunction*) UObject::GObjObjects()->Data[ 10388 ];

	APlayerController_execAllowTextMessage_Parms AllowTextMessage_Parms;
	memcpy ( &AllowTextMessage_Parms.msg, &msg, 0x10 );

	this->ProcessEvent ( pFnAllowTextMessage, &AllowTextMessage_Parms, NULL );

	return AllowTextMessage_Parms.ReturnValue;
};

// Function Engine.PlayerController.ServerMutate
// [0x002200C2] 
// Parameters infos:
// struct FString                 MutateString                   ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::ServerMutate ( struct FString MutateString )
{
	static UFunction* pFnServerMutate = NULL;

	if ( ! pFnServerMutate )
		pFnServerMutate = (UFunction*) UObject::GObjObjects()->Data[ 10386 ];

	APlayerController_execServerMutate_Parms ServerMutate_Parms;
	memcpy ( &ServerMutate_Parms.MutateString, &MutateString, 0x10 );

	this->ProcessEvent ( pFnServerMutate, &ServerMutate_Parms, NULL );
};

// Function Engine.PlayerController.Mutate
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 MutateString                   ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::Mutate ( struct FString MutateString )
{
	static UFunction* pFnMutate = NULL;

	if ( ! pFnMutate )
		pFnMutate = (UFunction*) UObject::GObjObjects()->Data[ 10384 ];

	APlayerController_execMutate_Parms Mutate_Parms;
	memcpy ( &Mutate_Parms.MutateString, &MutateString, 0x10 );

	this->ProcessEvent ( pFnMutate, &Mutate_Parms, NULL );
};

// Function Engine.PlayerController.FOV
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void APlayerController::FOV ( float F )
{
	static UFunction* pFnFOV = NULL;

	if ( ! pFnFOV )
		pFnFOV = (UFunction*) UObject::GObjObjects()->Data[ 10382 ];

	APlayerController_execFOV_Parms FOV_Parms;
	FOV_Parms.F = F;

	this->ProcessEvent ( pFnFOV, &FOV_Parms, NULL );
};

// Function Engine.PlayerController.ResetFOV
// [0x00020002] 
// Parameters infos:

void APlayerController::ResetFOV ( )
{
	static UFunction* pFnResetFOV = NULL;

	if ( ! pFnResetFOV )
		pFnResetFOV = (UFunction*) UObject::GObjObjects()->Data[ 10381 ];

	APlayerController_execResetFOV_Parms ResetFOV_Parms;

	this->ProcessEvent ( pFnResetFOV, &ResetFOV_Parms, NULL );
};

// Function Engine.PlayerController.SetFOV
// [0x00020002] 
// Parameters infos:
// float                          NewFOV                         ( CPF_Parm )

void APlayerController::SetFOV ( float NewFOV )
{
	static UFunction* pFnSetFOV = NULL;

	if ( ! pFnSetFOV )
		pFnSetFOV = (UFunction*) UObject::GObjObjects()->Data[ 10379 ];

	APlayerController_execSetFOV_Parms SetFOV_Parms;
	SetFOV_Parms.NewFOV = NewFOV;

	this->ProcessEvent ( pFnSetFOV, &SetFOV_Parms, NULL );
};

// Function Engine.PlayerController.FixFOV
// [0x00020002] 
// Parameters infos:

void APlayerController::FixFOV ( )
{
	static UFunction* pFnFixFOV = NULL;

	if ( ! pFnFixFOV )
		pFnFixFOV = (UFunction*) UObject::GObjObjects()->Data[ 10375 ];

	APlayerController_execFixFOV_Parms FixFOV_Parms;

	this->ProcessEvent ( pFnFixFOV, &FixFOV_Parms, NULL );
};

// Function Engine.PlayerController.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 10374 ];

	APlayerController_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.PlayerController.CleanupPawn
// [0x00020002] 
// Parameters infos:

void APlayerController::CleanupPawn ( )
{
	static UFunction* pFnCleanupPawn = NULL;

	if ( ! pFnCleanupPawn )
		pFnCleanupPawn = (UFunction*) UObject::GObjObjects()->Data[ 10367 ];

	APlayerController_execCleanupPawn_Parms CleanupPawn_Parms;

	this->ProcessEvent ( pFnCleanupPawn, &CleanupPawn_Parms, NULL );
};

// Function Engine.PlayerController.ClearOnlineDelegates
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventClearOnlineDelegates ( )
{
	static UFunction* pFnClearOnlineDelegates = NULL;

	if ( ! pFnClearOnlineDelegates )
		pFnClearOnlineDelegates = (UFunction*) UObject::GObjObjects()->Data[ 10365 ];

	APlayerController_eventClearOnlineDelegates_Parms ClearOnlineDelegates_Parms;

	this->ProcessEvent ( pFnClearOnlineDelegates, &ClearOnlineDelegates_Parms, NULL );
};

// Function Engine.PlayerController.RegisterOnlineDelegates
// [0x00020002] 
// Parameters infos:

void APlayerController::RegisterOnlineDelegates ( )
{
	static UFunction* pFnRegisterOnlineDelegates = NULL;

	if ( ! pFnRegisterOnlineDelegates )
		pFnRegisterOnlineDelegates = (UFunction*) UObject::GObjObjects()->Data[ 10363 ];

	APlayerController_execRegisterOnlineDelegates_Parms RegisterOnlineDelegates_Parms;

	this->ProcessEvent ( pFnRegisterOnlineDelegates, &RegisterOnlineDelegates_Parms, NULL );
};

// Function Engine.PlayerController.PlayBeepSound
// [0x00020000] 
// Parameters infos:

void APlayerController::PlayBeepSound ( )
{
	static UFunction* pFnPlayBeepSound = NULL;

	if ( ! pFnPlayBeepSound )
		pFnPlayBeepSound = (UFunction*) UObject::GObjObjects()->Data[ 10362 ];

	APlayerController_execPlayBeepSound_Parms PlayBeepSound_Parms;

	this->ProcessEvent ( pFnPlayBeepSound, &PlayBeepSound_Parms, NULL );
};

// Function Engine.PlayerController.IsFinalReleaseBuild
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsFinalReleaseBuild ( )
{
	static UFunction* pFnIsFinalReleaseBuild = NULL;

	if ( ! pFnIsFinalReleaseBuild )
		pFnIsFinalReleaseBuild = (UFunction*) UObject::GObjObjects()->Data[ 10360 ];

	APlayerController_execIsFinalReleaseBuild_Parms IsFinalReleaseBuild_Parms;

	pFnIsFinalReleaseBuild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFinalReleaseBuild, &IsFinalReleaseBuild_Parms, NULL );

	pFnIsFinalReleaseBuild->FunctionFlags |= 0x400;

	return IsFinalReleaseBuild_Parms.ReturnValue;
};

// Function Engine.PlayerController.TeamMessage
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_Parm )
// float                          MsgLifeTime                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventTeamMessage ( class APlayerReplicationInfo* PRI, struct FString S, struct FName Type, float MsgLifeTime )
{
	static UFunction* pFnTeamMessage = NULL;

	if ( ! pFnTeamMessage )
		pFnTeamMessage = (UFunction*) UObject::GObjObjects()->Data[ 10354 ];

	APlayerController_eventTeamMessage_Parms TeamMessage_Parms;
	TeamMessage_Parms.PRI = PRI;
	memcpy ( &TeamMessage_Parms.S, &S, 0x10 );
	memcpy ( &TeamMessage_Parms.Type, &Type, 0x8 );
	TeamMessage_Parms.MsgLifeTime = MsgLifeTime;

	this->ProcessEvent ( pFnTeamMessage, &TeamMessage_Parms, NULL );
};

// Function Engine.PlayerController.SpeakTTS
// [0x00024102] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// class APlayerReplicationInfo*  PRI                            ( CPF_OptionalParm | CPF_Parm )

void APlayerController::SpeakTTS ( struct FString S, class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnSpeakTTS = NULL;

	if ( ! pFnSpeakTTS )
		pFnSpeakTTS = (UFunction*) UObject::GObjObjects()->Data[ 10349 ];

	APlayerController_execSpeakTTS_Parms SpeakTTS_Parms;
	memcpy ( &SpeakTTS_Parms.S, &S, 0x10 );
	SpeakTTS_Parms.PRI = PRI;

	this->ProcessEvent ( pFnSpeakTTS, &SpeakTTS_Parms, NULL );
};

// Function Engine.PlayerController.TeamTalk
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::TeamTalk ( )
{
	static UFunction* pFnTeamTalk = NULL;

	if ( ! pFnTeamTalk )
		pFnTeamTalk = (UFunction*) UObject::GObjObjects()->Data[ 10346 ];

	APlayerController_execTeamTalk_Parms TeamTalk_Parms;

	this->ProcessEvent ( pFnTeamTalk, &TeamTalk_Parms, NULL );
};

// Function Engine.PlayerController.Talk
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::Talk ( )
{
	static UFunction* pFnTalk = NULL;

	if ( ! pFnTalk )
		pFnTalk = (UFunction*) UObject::GObjObjects()->Data[ 10342 ];

	APlayerController_execTalk_Parms Talk_Parms;

	this->ProcessEvent ( pFnTalk, &Talk_Parms, NULL );
};

// Function Engine.PlayerController.CreateTTSSoundCue
// [0x00040501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USoundCue*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 StrToSpeak                     ( CPF_Parm | CPF_NeedCtorLink )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

class USoundCue* APlayerController::CreateTTSSoundCue ( struct FString StrToSpeak, class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnCreateTTSSoundCue = NULL;

	if ( ! pFnCreateTTSSoundCue )
		pFnCreateTTSSoundCue = (UFunction*) UObject::GObjObjects()->Data[ 10338 ];

	APlayerController_execCreateTTSSoundCue_Parms CreateTTSSoundCue_Parms;
	memcpy ( &CreateTTSSoundCue_Parms.StrToSpeak, &StrToSpeak, 0x10 );
	CreateTTSSoundCue_Parms.PRI = PRI;

	pFnCreateTTSSoundCue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateTTSSoundCue, &CreateTTSSoundCue_Parms, NULL );

	pFnCreateTTSSoundCue->FunctionFlags |= 0x400;

	return CreateTTSSoundCue_Parms.ReturnValue;
};

// Function Engine.PlayerController.AllowTTSMessageFrom
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

bool APlayerController::AllowTTSMessageFrom ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnAllowTTSMessageFrom = NULL;

	if ( ! pFnAllowTTSMessageFrom )
		pFnAllowTTSMessageFrom = (UFunction*) UObject::GObjObjects()->Data[ 10335 ];

	APlayerController_execAllowTTSMessageFrom_Parms AllowTTSMessageFrom_Parms;
	AllowTTSMessageFrom_Parms.PRI = PRI;

	this->ProcessEvent ( pFnAllowTTSMessageFrom, &AllowTTSMessageFrom_Parms, NULL );

	return AllowTTSMessageFrom_Parms.ReturnValue;
};

// Function Engine.PlayerController.CanCommunicate
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanCommunicate ( )
{
	static UFunction* pFnCanCommunicate = NULL;

	if ( ! pFnCanCommunicate )
		pFnCanCommunicate = (UFunction*) UObject::GObjObjects()->Data[ 10333 ];

	APlayerController_execCanCommunicate_Parms CanCommunicate_Parms;

	this->ProcessEvent ( pFnCanCommunicate, &CanCommunicate_Parms, NULL );

	return CanCommunicate_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientMessage
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )
// float                          MsgLifeTime                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientMessage ( struct FString S, struct FName Type, float MsgLifeTime )
{
	static UFunction* pFnClientMessage = NULL;

	if ( ! pFnClientMessage )
		pFnClientMessage = (UFunction*) UObject::GObjObjects()->Data[ 10329 ];

	APlayerController_eventClientMessage_Parms ClientMessage_Parms;
	memcpy ( &ClientMessage_Parms.S, &S, 0x10 );
	memcpy ( &ClientMessage_Parms.Type, &Type, 0x8 );
	ClientMessage_Parms.MsgLifeTime = MsgLifeTime;

	this->ProcessEvent ( pFnClientMessage, &ClientMessage_Parms, NULL );
};

// Function Engine.PlayerController.ClientPlayActorFaceFXAnim
// [0x010201C2] 
// Parameters infos:
// class AActor*                  SourceActor                    ( CPF_Parm )
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )
// struct FString                 GroupName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SeqName                        ( CPF_Parm | CPF_NeedCtorLink )
// class USoundCue*               SoundCueToPlay                 ( CPF_Parm )

void APlayerController::ClientPlayActorFaceFXAnim ( class AActor* SourceActor, class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay )
{
	static UFunction* pFnClientPlayActorFaceFXAnim = NULL;

	if ( ! pFnClientPlayActorFaceFXAnim )
		pFnClientPlayActorFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 10323 ];

	APlayerController_execClientPlayActorFaceFXAnim_Parms ClientPlayActorFaceFXAnim_Parms;
	ClientPlayActorFaceFXAnim_Parms.SourceActor = SourceActor;
	ClientPlayActorFaceFXAnim_Parms.AnimSet = AnimSet;
	memcpy ( &ClientPlayActorFaceFXAnim_Parms.GroupName, &GroupName, 0x10 );
	memcpy ( &ClientPlayActorFaceFXAnim_Parms.SeqName, &SeqName, 0x10 );
	ClientPlayActorFaceFXAnim_Parms.SoundCueToPlay = SoundCueToPlay;

	this->ProcessEvent ( pFnClientPlayActorFaceFXAnim, &ClientPlayActorFaceFXAnim_Parms, NULL );
};

// Function Engine.PlayerController.Kismet_ClientStopSound
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// class USoundCue*               ASound                         ( CPF_Parm )
// class AActor*                  SourceActor                    ( CPF_Parm )
// float                          FadeOutTime                    ( CPF_Parm )

void APlayerController::eventKismet_ClientStopSound ( class USoundCue* ASound, class AActor* SourceActor, float FadeOutTime )
{
	static UFunction* pFnKismet_ClientStopSound = NULL;

	if ( ! pFnKismet_ClientStopSound )
		pFnKismet_ClientStopSound = (UFunction*) UObject::GObjObjects()->Data[ 10315 ];

	APlayerController_eventKismet_ClientStopSound_Parms Kismet_ClientStopSound_Parms;
	Kismet_ClientStopSound_Parms.ASound = ASound;
	Kismet_ClientStopSound_Parms.SourceActor = SourceActor;
	Kismet_ClientStopSound_Parms.FadeOutTime = FadeOutTime;

	this->ProcessEvent ( pFnKismet_ClientStopSound, &Kismet_ClientStopSound_Parms, NULL );
};

// Function Engine.PlayerController.Kismet_ClientPlaySound
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// class USoundCue*               ASound                         ( CPF_Parm )
// class AActor*                  SourceActor                    ( CPF_Parm )
// float                          VolumeMultiplier               ( CPF_Parm )
// float                          PitchMultiplier                ( CPF_Parm )
// float                          FadeInTime                     ( CPF_Parm )
// unsigned long                  bSuppressSubtitles             ( CPF_Parm )
// unsigned long                  bSuppressSpatialization        ( CPF_Parm )

void APlayerController::eventKismet_ClientPlaySound ( class USoundCue* ASound, class AActor* SourceActor, float VolumeMultiplier, float PitchMultiplier, float FadeInTime, unsigned long bSuppressSubtitles, unsigned long bSuppressSpatialization )
{
	static UFunction* pFnKismet_ClientPlaySound = NULL;

	if ( ! pFnKismet_ClientPlaySound )
		pFnKismet_ClientPlaySound = (UFunction*) UObject::GObjObjects()->Data[ 10297 ];

	APlayerController_eventKismet_ClientPlaySound_Parms Kismet_ClientPlaySound_Parms;
	Kismet_ClientPlaySound_Parms.ASound = ASound;
	Kismet_ClientPlaySound_Parms.SourceActor = SourceActor;
	Kismet_ClientPlaySound_Parms.VolumeMultiplier = VolumeMultiplier;
	Kismet_ClientPlaySound_Parms.PitchMultiplier = PitchMultiplier;
	Kismet_ClientPlaySound_Parms.FadeInTime = FadeInTime;
	Kismet_ClientPlaySound_Parms.bSuppressSubtitles = bSuppressSubtitles;
	Kismet_ClientPlaySound_Parms.bSuppressSpatialization = bSuppressSpatialization;

	this->ProcessEvent ( pFnKismet_ClientPlaySound, &Kismet_ClientPlaySound_Parms, NULL );
};

// Function Engine.PlayerController.IsClosestLocalPlayerToActor
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TheActor                       ( CPF_Parm )

bool APlayerController::IsClosestLocalPlayerToActor ( class AActor* TheActor )
{
	static UFunction* pFnIsClosestLocalPlayerToActor = NULL;

	if ( ! pFnIsClosestLocalPlayerToActor )
		pFnIsClosestLocalPlayerToActor = (UFunction*) UObject::GObjObjects()->Data[ 10292 ];

	APlayerController_execIsClosestLocalPlayerToActor_Parms IsClosestLocalPlayerToActor_Parms;
	IsClosestLocalPlayerToActor_Parms.TheActor = TheActor;

	this->ProcessEvent ( pFnIsClosestLocalPlayerToActor, &IsClosestLocalPlayerToActor_Parms, NULL );

	return IsClosestLocalPlayerToActor_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientHearSound
// [0x01024942] ( FUNC_Event )
// Parameters infos:
// class USoundCue*               ASound                         ( CPF_Parm )
// class AActor*                  SourceActor                    ( CPF_Parm )
// struct FVector                 SourceLocation                 ( CPF_Parm )
// unsigned long                  bStopWhenOwnerDestroyed        ( CPF_Parm )
// unsigned long                  bIsOccluded                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientHearSound ( class USoundCue* ASound, class AActor* SourceActor, struct FVector SourceLocation, unsigned long bStopWhenOwnerDestroyed, unsigned long bIsOccluded )
{
	static UFunction* pFnClientHearSound = NULL;

	if ( ! pFnClientHearSound )
		pFnClientHearSound = (UFunction*) UObject::GObjObjects()->Data[ 10280 ];

	APlayerController_eventClientHearSound_Parms ClientHearSound_Parms;
	ClientHearSound_Parms.ASound = ASound;
	ClientHearSound_Parms.SourceActor = SourceActor;
	memcpy ( &ClientHearSound_Parms.SourceLocation, &SourceLocation, 0xC );
	ClientHearSound_Parms.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	ClientHearSound_Parms.bIsOccluded = bIsOccluded;

	this->ProcessEvent ( pFnClientHearSound, &ClientHearSound_Parms, NULL );
};

// Function Engine.PlayerController.GetPooledAudioComponent
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UAudioComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class USoundCue*               ASound                         ( CPF_Parm )
// class AActor*                  SourceActor                    ( CPF_Parm )
// unsigned long                  bStopWhenOwnerDestroyed        ( CPF_Parm )
// unsigned long                  bUseLocation                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SourceLocation                 ( CPF_OptionalParm | CPF_Parm )

class UAudioComponent* APlayerController::GetPooledAudioComponent ( class USoundCue* ASound, class AActor* SourceActor, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation )
{
	static UFunction* pFnGetPooledAudioComponent = NULL;

	if ( ! pFnGetPooledAudioComponent )
		pFnGetPooledAudioComponent = (UFunction*) UObject::GObjObjects()->Data[ 10273 ];

	APlayerController_execGetPooledAudioComponent_Parms GetPooledAudioComponent_Parms;
	GetPooledAudioComponent_Parms.ASound = ASound;
	GetPooledAudioComponent_Parms.SourceActor = SourceActor;
	GetPooledAudioComponent_Parms.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	GetPooledAudioComponent_Parms.bUseLocation = bUseLocation;
	memcpy ( &GetPooledAudioComponent_Parms.SourceLocation, &SourceLocation, 0xC );

	pFnGetPooledAudioComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPooledAudioComponent, &GetPooledAudioComponent_Parms, NULL );

	pFnGetPooledAudioComponent->FunctionFlags |= 0x400;

	return GetPooledAudioComponent_Parms.ReturnValue;
};

// Function Engine.PlayerController.HearSoundFinished
// [0x00020102] 
// Parameters infos:
// class UAudioComponent*         AC                             ( CPF_Parm | CPF_EditInline )

void APlayerController::HearSoundFinished ( class UAudioComponent* AC )
{
	static UFunction* pFnHearSoundFinished = NULL;

	if ( ! pFnHearSoundFinished )
		pFnHearSoundFinished = (UFunction*) UObject::GObjObjects()->Data[ 10269 ];

	APlayerController_execHearSoundFinished_Parms HearSoundFinished_Parms;
	HearSoundFinished_Parms.AC = AC;

	this->ProcessEvent ( pFnHearSoundFinished, &HearSoundFinished_Parms, NULL );
};

// Function Engine.PlayerController.ClientPlaySound
// [0x01020942] ( FUNC_Event )
// Parameters infos:
// class USoundCue*               ASound                         ( CPF_Parm )

void APlayerController::eventClientPlaySound ( class USoundCue* ASound )
{
	static UFunction* pFnClientPlaySound = NULL;

	if ( ! pFnClientPlaySound )
		pFnClientPlaySound = (UFunction*) UObject::GObjObjects()->Data[ 10267 ];

	APlayerController_eventClientPlaySound_Parms ClientPlaySound_Parms;
	ClientPlaySound_Parms.ASound = ASound;

	this->ProcessEvent ( pFnClientPlaySound, &ClientPlaySound_Parms, NULL );
};

// Function Engine.PlayerController.ReceiveLocalizedMessage
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnReceiveLocalizedMessage = NULL;

	if ( ! pFnReceiveLocalizedMessage )
		pFnReceiveLocalizedMessage = (UFunction*) UObject::GObjObjects()->Data[ 10261 ];

	APlayerController_eventReceiveLocalizedMessage_Parms ReceiveLocalizedMessage_Parms;
	ReceiveLocalizedMessage_Parms.Message = Message;
	ReceiveLocalizedMessage_Parms.Switch = Switch;
	ReceiveLocalizedMessage_Parms.RelatedPRI = RelatedPRI;
	ReceiveLocalizedMessage_Parms.RelatedPRI01 = RelatedPRI01;
	ReceiveLocalizedMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnReceiveLocalizedMessage, &ReceiveLocalizedMessage_Parms, NULL );
};

// Function Engine.PlayerController.CleanupPRI
// [0x00020002] 
// Parameters infos:

void APlayerController::CleanupPRI ( )
{
	static UFunction* pFnCleanupPRI = NULL;

	if ( ! pFnCleanupPRI )
		pFnCleanupPRI = (UFunction*) UObject::GObjObjects()->Data[ 10260 ];

	APlayerController_execCleanupPRI_Parms CleanupPRI_Parms;

	this->ProcessEvent ( pFnCleanupPRI, &CleanupPRI_Parms, NULL );
};

// Function Engine.PlayerController.HandlePickup
// [0x00020002] 
// Parameters infos:
// class AInventory*              Inv                            ( CPF_Parm )

void APlayerController::HandlePickup ( class AInventory* Inv )
{
	static UFunction* pFnHandlePickup = NULL;

	if ( ! pFnHandlePickup )
		pFnHandlePickup = (UFunction*) UObject::GObjObjects()->Data[ 10258 ];

	APlayerController_execHandlePickup_Parms HandlePickup_Parms;
	HandlePickup_Parms.Inv = Inv;

	this->ProcessEvent ( pFnHandlePickup, &HandlePickup_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetHUD
// [0x010201C2] 
// Parameters infos:
// class UClass*                  newHUDType                     ( CPF_Parm )
// class UClass*                  newScoringType                 ( CPF_Parm )

void APlayerController::ClientSetHUD ( class UClass* newHUDType, class UClass* newScoringType )
{
	static UFunction* pFnClientSetHUD = NULL;

	if ( ! pFnClientSetHUD )
		pFnClientSetHUD = (UFunction*) UObject::GObjObjects()->Data[ 10254 ];

	APlayerController_execClientSetHUD_Parms ClientSetHUD_Parms;
	ClientSetHUD_Parms.newHUDType = newHUDType;
	ClientSetHUD_Parms.newScoringType = newScoringType;

	this->ProcessEvent ( pFnClientSetHUD, &ClientSetHUD_Parms, NULL );
};

// Function Engine.PlayerController.PawnDied
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APlayerController::PawnDied ( class APawn* P )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 10252 ];

	APlayerController_execPawnDied_Parms PawnDied_Parms;
	PawnDied_Parms.P = P;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function Engine.PlayerController.UnPossess
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventUnPossess ( )
{
	static UFunction* pFnUnPossess = NULL;

	if ( ! pFnUnPossess )
		pFnUnPossess = (UFunction*) UObject::GObjObjects()->Data[ 10251 ];

	APlayerController_eventUnPossess_Parms UnPossess_Parms;

	this->ProcessEvent ( pFnUnPossess, &UnPossess_Parms, NULL );
};

// Function Engine.PlayerController.ServerAcknowledgePossession
// [0x002200C2] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APlayerController::ServerAcknowledgePossession ( class APawn* P )
{
	static UFunction* pFnServerAcknowledgePossession = NULL;

	if ( ! pFnServerAcknowledgePossession )
		pFnServerAcknowledgePossession = (UFunction*) UObject::GObjObjects()->Data[ 10249 ];

	APlayerController_execServerAcknowledgePossession_Parms ServerAcknowledgePossession_Parms;
	ServerAcknowledgePossession_Parms.P = P;

	this->ProcessEvent ( pFnServerAcknowledgePossession, &ServerAcknowledgePossession_Parms, NULL );
};

// Function Engine.PlayerController.AcknowledgePossession
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APlayerController::AcknowledgePossession ( class APawn* P )
{
	static UFunction* pFnAcknowledgePossession = NULL;

	if ( ! pFnAcknowledgePossession )
		pFnAcknowledgePossession = (UFunction*) UObject::GObjObjects()->Data[ 10244 ];

	APlayerController_execAcknowledgePossession_Parms AcknowledgePossession_Parms;
	AcknowledgePossession_Parms.P = P;

	this->ProcessEvent ( pFnAcknowledgePossession, &AcknowledgePossession_Parms, NULL );
};

// Function Engine.PlayerController.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   aPawn                          ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void APlayerController::eventPossess ( class APawn* aPawn, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = (UFunction*) UObject::GObjObjects()->Data[ 10235 ];

	APlayerController_eventPossess_Parms Possess_Parms;
	Possess_Parms.aPawn = aPawn;
	Possess_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function Engine.PlayerController.GivePawn
// [0x010201C2] 
// Parameters infos:
// class APawn*                   NewPawn                        ( CPF_Parm )

void APlayerController::GivePawn ( class APawn* NewPawn )
{
	static UFunction* pFnGivePawn = NULL;

	if ( ! pFnGivePawn )
		pFnGivePawn = (UFunction*) UObject::GObjObjects()->Data[ 10233 ];

	APlayerController_execGivePawn_Parms GivePawn_Parms;
	GivePawn_Parms.NewPawn = NewPawn;

	this->ProcessEvent ( pFnGivePawn, &GivePawn_Parms, NULL );
};

// Function Engine.PlayerController.AskForPawn
// [0x002200C2] 
// Parameters infos:

void APlayerController::AskForPawn ( )
{
	static UFunction* pFnAskForPawn = NULL;

	if ( ! pFnAskForPawn )
		pFnAskForPawn = (UFunction*) UObject::GObjObjects()->Data[ 10231 ];

	APlayerController_execAskForPawn_Parms AskForPawn_Parms;

	this->ProcessEvent ( pFnAskForPawn, &AskForPawn_Parms, NULL );
};

// Function Engine.PlayerController.ClientGotoState
// [0x010241C2] 
// Parameters infos:
// struct FName                   NewState                       ( CPF_Parm )
// struct FName                   NewLabel                       ( CPF_OptionalParm | CPF_Parm )

void APlayerController::ClientGotoState ( struct FName NewState, struct FName NewLabel )
{
	static UFunction* pFnClientGotoState = NULL;

	if ( ! pFnClientGotoState )
		pFnClientGotoState = (UFunction*) UObject::GObjObjects()->Data[ 10228 ];

	APlayerController_execClientGotoState_Parms ClientGotoState_Parms;
	memcpy ( &ClientGotoState_Parms.NewState, &NewState, 0x8 );
	memcpy ( &ClientGotoState_Parms.NewLabel, &NewLabel, 0x8 );

	this->ProcessEvent ( pFnClientGotoState, &ClientGotoState_Parms, NULL );
};

// Function Engine.PlayerController.IsMouseAvailable
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsMouseAvailable ( )
{
	static UFunction* pFnIsMouseAvailable = NULL;

	if ( ! pFnIsMouseAvailable )
		pFnIsMouseAvailable = (UFunction*) UObject::GObjObjects()->Data[ 10226 ];

	APlayerController_execIsMouseAvailable_Parms IsMouseAvailable_Parms;

	pFnIsMouseAvailable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMouseAvailable, &IsMouseAvailable_Parms, NULL );

	pFnIsMouseAvailable->FunctionFlags |= 0x400;

	return IsMouseAvailable_Parms.ReturnValue;
};

// Function Engine.PlayerController.IsKeyboardAvailable
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsKeyboardAvailable ( )
{
	static UFunction* pFnIsKeyboardAvailable = NULL;

	if ( ! pFnIsKeyboardAvailable )
		pFnIsKeyboardAvailable = (UFunction*) UObject::GObjObjects()->Data[ 10224 ];

	APlayerController_execIsKeyboardAvailable_Parms IsKeyboardAvailable_Parms;

	pFnIsKeyboardAvailable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsKeyboardAvailable, &IsKeyboardAvailable_Parms, NULL );

	pFnIsKeyboardAvailable->FunctionFlags |= 0x400;

	return IsKeyboardAvailable_Parms.ReturnValue;
};

// Function Engine.PlayerController.SetUseTiltForwardAndBack
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void APlayerController::SetUseTiltForwardAndBack ( unsigned long bActive )
{
	static UFunction* pFnSetUseTiltForwardAndBack = NULL;

	if ( ! pFnSetUseTiltForwardAndBack )
		pFnSetUseTiltForwardAndBack = (UFunction*) UObject::GObjObjects()->Data[ 10222 ];

	APlayerController_execSetUseTiltForwardAndBack_Parms SetUseTiltForwardAndBack_Parms;
	SetUseTiltForwardAndBack_Parms.bActive = bActive;

	pFnSetUseTiltForwardAndBack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetUseTiltForwardAndBack, &SetUseTiltForwardAndBack_Parms, NULL );

	pFnSetUseTiltForwardAndBack->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.SetOnlyUseControllerTiltInput
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void APlayerController::SetOnlyUseControllerTiltInput ( unsigned long bActive )
{
	static UFunction* pFnSetOnlyUseControllerTiltInput = NULL;

	if ( ! pFnSetOnlyUseControllerTiltInput )
		pFnSetOnlyUseControllerTiltInput = (UFunction*) UObject::GObjObjects()->Data[ 10220 ];

	APlayerController_execSetOnlyUseControllerTiltInput_Parms SetOnlyUseControllerTiltInput_Parms;
	SetOnlyUseControllerTiltInput_Parms.bActive = bActive;

	pFnSetOnlyUseControllerTiltInput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOnlyUseControllerTiltInput, &SetOnlyUseControllerTiltInput_Parms, NULL );

	pFnSetOnlyUseControllerTiltInput->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.SetControllerTiltActive
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void APlayerController::SetControllerTiltActive ( unsigned long bActive )
{
	static UFunction* pFnSetControllerTiltActive = NULL;

	if ( ! pFnSetControllerTiltActive )
		pFnSetControllerTiltActive = (UFunction*) UObject::GObjObjects()->Data[ 10218 ];

	APlayerController_execSetControllerTiltActive_Parms SetControllerTiltActive_Parms;
	SetControllerTiltActive_Parms.bActive = bActive;

	pFnSetControllerTiltActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetControllerTiltActive, &SetControllerTiltActive_Parms, NULL );

	pFnSetControllerTiltActive->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.SetControllerTiltDesiredIfAvailable
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void APlayerController::SetControllerTiltDesiredIfAvailable ( unsigned long bActive )
{
	static UFunction* pFnSetControllerTiltDesiredIfAvailable = NULL;

	if ( ! pFnSetControllerTiltDesiredIfAvailable )
		pFnSetControllerTiltDesiredIfAvailable = (UFunction*) UObject::GObjObjects()->Data[ 10216 ];

	APlayerController_execSetControllerTiltDesiredIfAvailable_Parms SetControllerTiltDesiredIfAvailable_Parms;
	SetControllerTiltDesiredIfAvailable_Parms.bActive = bActive;

	pFnSetControllerTiltDesiredIfAvailable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetControllerTiltDesiredIfAvailable, &SetControllerTiltDesiredIfAvailable_Parms, NULL );

	pFnSetControllerTiltDesiredIfAvailable->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.IsControllerTiltActive
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsControllerTiltActive ( )
{
	static UFunction* pFnIsControllerTiltActive = NULL;

	if ( ! pFnIsControllerTiltActive )
		pFnIsControllerTiltActive = (UFunction*) UObject::GObjObjects()->Data[ 10214 ];

	APlayerController_execIsControllerTiltActive_Parms IsControllerTiltActive_Parms;

	pFnIsControllerTiltActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsControllerTiltActive, &IsControllerTiltActive_Parms, NULL );

	pFnIsControllerTiltActive->FunctionFlags |= 0x400;

	return IsControllerTiltActive_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetRumbleScale
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APlayerController::GetRumbleScale ( )
{
	static UFunction* pFnGetRumbleScale = NULL;

	if ( ! pFnGetRumbleScale )
		pFnGetRumbleScale = (UFunction*) UObject::GObjObjects()->Data[ 10211 ];

	APlayerController_execGetRumbleScale_Parms GetRumbleScale_Parms;

	this->ProcessEvent ( pFnGetRumbleScale, &GetRumbleScale_Parms, NULL );

	return GetRumbleScale_Parms.ReturnValue;
};

// Function Engine.PlayerController.SetRumbleScale
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ScaleBy                        ( CPF_Parm )

void APlayerController::SetRumbleScale ( float ScaleBy )
{
	static UFunction* pFnSetRumbleScale = NULL;

	if ( ! pFnSetRumbleScale )
		pFnSetRumbleScale = (UFunction*) UObject::GObjObjects()->Data[ 10208 ];

	APlayerController_execSetRumbleScale_Parms SetRumbleScale_Parms;
	SetRumbleScale_Parms.ScaleBy = ScaleBy;

	this->ProcessEvent ( pFnSetRumbleScale, &SetRumbleScale_Parms, NULL );
};

// Function Engine.PlayerController.ReloadProfileSettings
// [0x00020102] 
// Parameters infos:

void APlayerController::ReloadProfileSettings ( )
{
	static UFunction* pFnReloadProfileSettings = NULL;

	if ( ! pFnReloadProfileSettings )
		pFnReloadProfileSettings = (UFunction*) UObject::GObjObjects()->Data[ 10206 ];

	APlayerController_execReloadProfileSettings_Parms ReloadProfileSettings_Parms;

	this->ProcessEvent ( pFnReloadProfileSettings, &ReloadProfileSettings_Parms, NULL );
};

// Function Engine.PlayerController.SetPlayerDataProvider
// [0x00020102] 
// Parameters infos:
// class UPlayerDataProvider*     DataProvider                   ( CPF_Parm )

void APlayerController::SetPlayerDataProvider ( class UPlayerDataProvider* DataProvider )
{
	static UFunction* pFnSetPlayerDataProvider = NULL;

	if ( ! pFnSetPlayerDataProvider )
		pFnSetPlayerDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 10203 ];

	APlayerController_execSetPlayerDataProvider_Parms SetPlayerDataProvider_Parms;
	SetPlayerDataProvider_Parms.DataProvider = DataProvider;

	this->ProcessEvent ( pFnSetPlayerDataProvider, &SetPlayerDataProvider_Parms, NULL );
};

// Function Engine.PlayerController.UnregisterStandardPlayerDataStores
// [0x00020102] 
// Parameters infos:

void APlayerController::UnregisterStandardPlayerDataStores ( )
{
	static UFunction* pFnUnregisterStandardPlayerDataStores = NULL;

	if ( ! pFnUnregisterStandardPlayerDataStores )
		pFnUnregisterStandardPlayerDataStores = (UFunction*) UObject::GObjObjects()->Data[ 10194 ];

	APlayerController_execUnregisterStandardPlayerDataStores_Parms UnregisterStandardPlayerDataStores_Parms;

	this->ProcessEvent ( pFnUnregisterStandardPlayerDataStores, &UnregisterStandardPlayerDataStores_Parms, NULL );
};

// Function Engine.PlayerController.UnregisterPlayerDataStores
// [0x00020102] 
// Parameters infos:

void APlayerController::UnregisterPlayerDataStores ( )
{
	static UFunction* pFnUnregisterPlayerDataStores = NULL;

	if ( ! pFnUnregisterPlayerDataStores )
		pFnUnregisterPlayerDataStores = (UFunction*) UObject::GObjObjects()->Data[ 10187 ];

	APlayerController_execUnregisterPlayerDataStores_Parms UnregisterPlayerDataStores_Parms;

	this->ProcessEvent ( pFnUnregisterPlayerDataStores, &UnregisterPlayerDataStores_Parms, NULL );
};

// Function Engine.PlayerController.RegisterStandardPlayerDataStores
// [0x00080102] 
// Parameters infos:

void APlayerController::RegisterStandardPlayerDataStores ( )
{
	static UFunction* pFnRegisterStandardPlayerDataStores = NULL;

	if ( ! pFnRegisterStandardPlayerDataStores )
		pFnRegisterStandardPlayerDataStores = (UFunction*) UObject::GObjObjects()->Data[ 10176 ];

	APlayerController_execRegisterStandardPlayerDataStores_Parms RegisterStandardPlayerDataStores_Parms;

	this->ProcessEvent ( pFnRegisterStandardPlayerDataStores, &RegisterStandardPlayerDataStores_Parms, NULL );
};

// Function Engine.PlayerController.RegisterCustomPlayerDataStores
// [0x00080102] 
// Parameters infos:

void APlayerController::RegisterCustomPlayerDataStores ( )
{
	static UFunction* pFnRegisterCustomPlayerDataStores = NULL;

	if ( ! pFnRegisterCustomPlayerDataStores )
		pFnRegisterCustomPlayerDataStores = (UFunction*) UObject::GObjObjects()->Data[ 10158 ];

	APlayerController_execRegisterCustomPlayerDataStores_Parms RegisterCustomPlayerDataStores_Parms;

	this->ProcessEvent ( pFnRegisterCustomPlayerDataStores, &RegisterCustomPlayerDataStores_Parms, NULL );
};

// Function Engine.PlayerController.RegisterPlayerDataStores
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void APlayerController::RegisterPlayerDataStores ( )
{
	static UFunction* pFnRegisterPlayerDataStores = NULL;

	if ( ! pFnRegisterPlayerDataStores )
		pFnRegisterPlayerDataStores = (UFunction*) UObject::GObjObjects()->Data[ 10108 ];

	APlayerController_execRegisterPlayerDataStores_Parms RegisterPlayerDataStores_Parms;

	this->ProcessEvent ( pFnRegisterPlayerDataStores, &RegisterPlayerDataStores_Parms, NULL );
};

// Function Engine.PlayerController.ClientInitializeDataStores
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientInitializeDataStores ( )
{
	static UFunction* pFnClientInitializeDataStores = NULL;

	if ( ! pFnClientInitializeDataStores )
		pFnClientInitializeDataStores = (UFunction*) UObject::GObjObjects()->Data[ 10157 ];

	APlayerController_execClientInitializeDataStores_Parms ClientInitializeDataStores_Parms;

	this->ProcessEvent ( pFnClientInitializeDataStores, &ClientInitializeDataStores_Parms, NULL );
};

// Function Engine.PlayerController.InitInputSystem
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventInitInputSystem ( )
{
	static UFunction* pFnInitInputSystem = NULL;

	if ( ! pFnInitInputSystem )
		pFnInitInputSystem = (UFunction*) UObject::GObjObjects()->Data[ 10145 ];

	APlayerController_eventInitInputSystem_Parms InitInputSystem_Parms;

	this->ProcessEvent ( pFnInitInputSystem, &InitInputSystem_Parms, NULL );
};

// Function Engine.PlayerController.GetOnlineSubsystem
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// class UOnlineSubsystem*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineSubsystem* APlayerController::GetOnlineSubsystem ( )
{
	static UFunction* pFnGetOnlineSubsystem = NULL;

	if ( ! pFnGetOnlineSubsystem )
		pFnGetOnlineSubsystem = (UFunction*) UObject::GObjObjects()->Data[ 10143 ];

	APlayerController_execGetOnlineSubsystem_Parms GetOnlineSubsystem_Parms;

	this->ProcessEvent ( pFnGetOnlineSubsystem, &GetOnlineSubsystem_Parms, NULL );

	return GetOnlineSubsystem_Parms.ReturnValue;
};

// Function Engine.PlayerController.PostControllerIdChange
// [0x00020002] 
// Parameters infos:

void APlayerController::PostControllerIdChange ( )
{
	static UFunction* pFnPostControllerIdChange = NULL;

	if ( ! pFnPostControllerIdChange )
		pFnPostControllerIdChange = (UFunction*) UObject::GObjObjects()->Data[ 10137 ];

	APlayerController_execPostControllerIdChange_Parms PostControllerIdChange_Parms;

	this->ProcessEvent ( pFnPostControllerIdChange, &PostControllerIdChange_Parms, NULL );
};

// Function Engine.PlayerController.PreControllerIdChange
// [0x00020002] 
// Parameters infos:

void APlayerController::PreControllerIdChange ( )
{
	static UFunction* pFnPreControllerIdChange = NULL;

	if ( ! pFnPreControllerIdChange )
		pFnPreControllerIdChange = (UFunction*) UObject::GObjObjects()->Data[ 10135 ];

	APlayerController_execPreControllerIdChange_Parms PreControllerIdChange_Parms;

	this->ProcessEvent ( pFnPreControllerIdChange, &PreControllerIdChange_Parms, NULL );
};

// Function Engine.PlayerController.CleanOutSavedMoves
// [0x00020002] 
// Parameters infos:

void APlayerController::CleanOutSavedMoves ( )
{
	static UFunction* pFnCleanOutSavedMoves = NULL;

	if ( ! pFnCleanOutSavedMoves )
		pFnCleanOutSavedMoves = (UFunction*) UObject::GObjObjects()->Data[ 10132 ];

	APlayerController_execCleanOutSavedMoves_Parms CleanOutSavedMoves_Parms;

	this->ProcessEvent ( pFnCleanOutSavedMoves, &CleanOutSavedMoves_Parms, NULL );
};

// Function Engine.PlayerController.ClientReset
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientReset ( )
{
	static UFunction* pFnClientReset = NULL;

	if ( ! pFnClientReset )
		pFnClientReset = (UFunction*) UObject::GObjObjects()->Data[ 10131 ];

	APlayerController_execClientReset_Parms ClientReset_Parms;

	this->ProcessEvent ( pFnClientReset, &ClientReset_Parms, NULL );
};

// Function Engine.PlayerController.Reset
// [0x00020002] 
// Parameters infos:

void APlayerController::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 10128 ];

	APlayerController_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.PlayerController.SpawnDefaultHUD
// [0x00020002] 
// Parameters infos:

void APlayerController::SpawnDefaultHUD ( )
{
	static UFunction* pFnSpawnDefaultHUD = NULL;

	if ( ! pFnSpawnDefaultHUD )
		pFnSpawnDefaultHUD = (UFunction*) UObject::GObjObjects()->Data[ 10126 ];

	APlayerController_execSpawnDefaultHUD_Parms SpawnDefaultHUD_Parms;

	this->ProcessEvent ( pFnSpawnDefaultHUD, &SpawnDefaultHUD_Parms, NULL );
};

// Function Engine.PlayerController.EnableCheats
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::EnableCheats ( )
{
	static UFunction* pFnEnableCheats = NULL;

	if ( ! pFnEnableCheats )
		pFnEnableCheats = (UFunction*) UObject::GObjObjects()->Data[ 10125 ];

	APlayerController_execEnableCheats_Parms EnableCheats_Parms;

	this->ProcessEvent ( pFnEnableCheats, &EnableCheats_Parms, NULL );
};

// Function Engine.PlayerController.AddCheats
// [0x00020002] 
// Parameters infos:

void APlayerController::AddCheats ( )
{
	static UFunction* pFnAddCheats = NULL;

	if ( ! pFnAddCheats )
		pFnAddCheats = (UFunction*) UObject::GObjObjects()->Data[ 10120 ];

	APlayerController_execAddCheats_Parms AddCheats_Parms;

	this->ProcessEvent ( pFnAddCheats, &AddCheats_Parms, NULL );
};

// Function Engine.PlayerController.KickWarning
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventKickWarning ( )
{
	static UFunction* pFnKickWarning = NULL;

	if ( ! pFnKickWarning )
		pFnKickWarning = (UFunction*) UObject::GObjObjects()->Data[ 10118 ];

	APlayerController_eventKickWarning_Parms KickWarning_Parms;

	this->ProcessEvent ( pFnKickWarning, &KickWarning_Parms, NULL );
};

// Function Engine.PlayerController.ServerGivePawn
// [0x00020002] 
// Parameters infos:

void APlayerController::ServerGivePawn ( )
{
	static UFunction* pFnServerGivePawn = NULL;

	if ( ! pFnServerGivePawn )
		pFnServerGivePawn = (UFunction*) UObject::GObjObjects()->Data[ 10117 ];

	APlayerController_execServerGivePawn_Parms ServerGivePawn_Parms;

	this->ProcessEvent ( pFnServerGivePawn, &ServerGivePawn_Parms, NULL );
};

// Function Engine.PlayerController.ServerShortTimeout
// [0x002200C2] 
// Parameters infos:

void APlayerController::ServerShortTimeout ( )
{
	static UFunction* pFnServerShortTimeout = NULL;

	if ( ! pFnServerShortTimeout )
		pFnServerShortTimeout = (UFunction*) UObject::GObjObjects()->Data[ 10113 ];

	APlayerController_execServerShortTimeout_Parms ServerShortTimeout_Parms;

	this->ProcessEvent ( pFnServerShortTimeout, &ServerShortTimeout_Parms, NULL );
};

// Function Engine.PlayerController.ResetTimeMargin
// [0x00020002] 
// Parameters infos:

void APlayerController::ResetTimeMargin ( )
{
	static UFunction* pFnResetTimeMargin = NULL;

	if ( ! pFnResetTimeMargin )
		pFnResetTimeMargin = (UFunction*) UObject::GObjObjects()->Data[ 10111 ];

	APlayerController_execResetTimeMargin_Parms ResetTimeMargin_Parms;

	this->ProcessEvent ( pFnResetTimeMargin, &ResetTimeMargin_Parms, NULL );
};

// Function Engine.PlayerController.PreRender
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void APlayerController::eventPreRender ( class UCanvas* Canvas )
{
	static UFunction* pFnPreRender = NULL;

	if ( ! pFnPreRender )
		pFnPreRender = (UFunction*) UObject::GObjObjects()->Data[ 10109 ];

	APlayerController_eventPreRender_Parms PreRender_Parms;
	PreRender_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnPreRender, &PreRender_Parms, NULL );
};

// Function Engine.PlayerController.ReceivedPlayer
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventReceivedPlayer ( )
{
	static UFunction* pFnReceivedPlayer = NULL;

	if ( ! pFnReceivedPlayer )
		pFnReceivedPlayer = (UFunction*) UObject::GObjObjects()->Data[ 10101 ];

	APlayerController_eventReceivedPlayer_Parms ReceivedPlayer_Parms;

	this->ProcessEvent ( pFnReceivedPlayer, &ReceivedPlayer_Parms, NULL );
};

// Function Engine.PlayerController.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 10092 ];

	APlayerController_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.PlayerController.SpawnCoverReplicator
// [0x00020002] 
// Parameters infos:
// class ACoverReplicator*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ACoverReplicator* APlayerController::SpawnCoverReplicator ( )
{
	static UFunction* pFnSpawnCoverReplicator = NULL;

	if ( ! pFnSpawnCoverReplicator )
		pFnSpawnCoverReplicator = (UFunction*) UObject::GObjObjects()->Data[ 10088 ];

	APlayerController_execSpawnCoverReplicator_Parms SpawnCoverReplicator_Parms;

	this->ProcessEvent ( pFnSpawnCoverReplicator, &SpawnCoverReplicator_Parms, NULL );

	return SpawnCoverReplicator_Parms.ReturnValue;
};

// Function Engine.PlayerController.CanUnpauseControllerConnected
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanUnpauseControllerConnected ( )
{
	static UFunction* pFnCanUnpauseControllerConnected = NULL;

	if ( ! pFnCanUnpauseControllerConnected )
		pFnCanUnpauseControllerConnected = (UFunction*) UObject::GObjObjects()->Data[ 10086 ];

	APlayerController_execCanUnpauseControllerConnected_Parms CanUnpauseControllerConnected_Parms;

	this->ProcessEvent ( pFnCanUnpauseControllerConnected, &CanUnpauseControllerConnected_Parms, NULL );

	return CanUnpauseControllerConnected_Parms.ReturnValue;
};

// Function Engine.PlayerController.OnControllerChanged
// [0x00020002] 
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )
// unsigned long                  bIsConnected                   ( CPF_Parm )

void APlayerController::OnControllerChanged ( int ControllerId, unsigned long bIsConnected )
{
	static UFunction* pFnOnControllerChanged = NULL;

	if ( ! pFnOnControllerChanged )
		pFnOnControllerChanged = (UFunction*) UObject::GObjObjects()->Data[ 10076 ];

	APlayerController_execOnControllerChanged_Parms OnControllerChanged_Parms;
	OnControllerChanged_Parms.ControllerId = ControllerId;
	OnControllerChanged_Parms.bIsConnected = bIsConnected;

	this->ProcessEvent ( pFnOnControllerChanged, &OnControllerChanged_Parms, NULL );
};

// Function Engine.PlayerController.CanUnpauseExternalUI
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanUnpauseExternalUI ( )
{
	static UFunction* pFnCanUnpauseExternalUI = NULL;

	if ( ! pFnCanUnpauseExternalUI )
		pFnCanUnpauseExternalUI = (UFunction*) UObject::GObjObjects()->Data[ 10073 ];

	APlayerController_execCanUnpauseExternalUI_Parms CanUnpauseExternalUI_Parms;

	this->ProcessEvent ( pFnCanUnpauseExternalUI, &CanUnpauseExternalUI_Parms, NULL );

	return CanUnpauseExternalUI_Parms.ReturnValue;
};

// Function Engine.PlayerController.OnExternalUIChanged
// [0x00020002] 
// Parameters infos:
// unsigned long                  bIsOpening                     ( CPF_Parm )

void APlayerController::OnExternalUIChanged ( unsigned long bIsOpening )
{
	static UFunction* pFnOnExternalUIChanged = NULL;

	if ( ! pFnOnExternalUIChanged )
		pFnOnExternalUIChanged = (UFunction*) UObject::GObjObjects()->Data[ 10070 ];

	APlayerController_execOnExternalUIChanged_Parms OnExternalUIChanged_Parms;
	OnExternalUIChanged_Parms.bIsOpening = bIsOpening;

	this->ProcessEvent ( pFnOnExternalUIChanged, &OnExternalUIChanged_Parms, NULL );
};

// Function Engine.PlayerController.ForceClearUnpauseDelegates
// [0x00020002] 
// Parameters infos:

void APlayerController::ForceClearUnpauseDelegates ( )
{
	static UFunction* pFnForceClearUnpauseDelegates = NULL;

	if ( ! pFnForceClearUnpauseDelegates )
		pFnForceClearUnpauseDelegates = (UFunction*) UObject::GObjObjects()->Data[ 10068 ];

	APlayerController_execForceClearUnpauseDelegates_Parms ForceClearUnpauseDelegates_Parms;

	this->ProcessEvent ( pFnForceClearUnpauseDelegates, &ForceClearUnpauseDelegates_Parms, NULL );
};

// Function Engine.PlayerController.FellOutOfWorld
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void APlayerController::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 10066 ];

	APlayerController_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function Engine.PlayerController.CleanUpAudioComponents
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APlayerController::CleanUpAudioComponents ( )
{
	static UFunction* pFnCleanUpAudioComponents = NULL;

	if ( ! pFnCleanUpAudioComponents )
		pFnCleanUpAudioComponents = (UFunction*) UObject::GObjObjects()->Data[ 10065 ];

	APlayerController_execCleanUpAudioComponents_Parms CleanUpAudioComponents_Parms;

	pFnCleanUpAudioComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCleanUpAudioComponents, &CleanUpAudioComponents_Parms, NULL );

	pFnCleanUpAudioComponents->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.FindStairRotation
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x020C]
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

int APlayerController::FindStairRotation ( float DeltaTime )
{
	static UFunction* pFnFindStairRotation = NULL;

	if ( ! pFnFindStairRotation )
		pFnFindStairRotation = (UFunction*) UObject::GObjObjects()->Data[ 10062 ];

	APlayerController_execFindStairRotation_Parms FindStairRotation_Parms;
	FindStairRotation_Parms.DeltaTime = DeltaTime;

	unsigned short NativeIndex = pFnFindStairRotation->iNative;
	pFnFindStairRotation->iNative = 0;

	pFnFindStairRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindStairRotation, &FindStairRotation_Parms, NULL );

	pFnFindStairRotation->FunctionFlags |= 0x400;

	pFnFindStairRotation->iNative = NativeIndex;

	return FindStairRotation_Parms.ReturnValue;
};

// Function Engine.PlayerController.CheckSpeedHack
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

bool APlayerController::CheckSpeedHack ( float DeltaTime )
{
	static UFunction* pFnCheckSpeedHack = NULL;

	if ( ! pFnCheckSpeedHack )
		pFnCheckSpeedHack = (UFunction*) UObject::GObjObjects()->Data[ 10059 ];

	APlayerController_execCheckSpeedHack_Parms CheckSpeedHack_Parms;
	CheckSpeedHack_Parms.DeltaTime = DeltaTime;

	pFnCheckSpeedHack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckSpeedHack, &CheckSpeedHack_Parms, NULL );

	pFnCheckSpeedHack->FunctionFlags |= 0x400;

	return CheckSpeedHack_Parms.ReturnValue;
};

// Function Engine.PlayerController.ServerProcessConvolve
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 C                              ( CPF_Parm | CPF_NeedCtorLink )
// int                            H                              ( CPF_Parm )

void APlayerController::eventServerProcessConvolve ( struct FString C, int H )
{
	static UFunction* pFnServerProcessConvolve = NULL;

	if ( ! pFnServerProcessConvolve )
		pFnServerProcessConvolve = (UFunction*) UObject::GObjObjects()->Data[ 10056 ];

	APlayerController_eventServerProcessConvolve_Parms ServerProcessConvolve_Parms;
	memcpy ( &ServerProcessConvolve_Parms.C, &C, 0x10 );
	ServerProcessConvolve_Parms.H = H;

	pFnServerProcessConvolve->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerProcessConvolve, &ServerProcessConvolve_Parms, NULL );

	pFnServerProcessConvolve->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClientConvolve
// [0x01040DC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 C                              ( CPF_Parm | CPF_NeedCtorLink )
// int                            H                              ( CPF_Parm )

void APlayerController::eventClientConvolve ( struct FString C, int H )
{
	static UFunction* pFnClientConvolve = NULL;

	if ( ! pFnClientConvolve )
		pFnClientConvolve = (UFunction*) UObject::GObjObjects()->Data[ 10053 ];

	APlayerController_eventClientConvolve_Parms ClientConvolve_Parms;
	memcpy ( &ClientConvolve_Parms.C, &C, 0x10 );
	ClientConvolve_Parms.H = H;

	pFnClientConvolve->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientConvolve, &ClientConvolve_Parms, NULL );

	pFnClientConvolve->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.SetAudioGroupVolume
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )
// float                          Volume                         ( CPF_Parm )

void APlayerController::SetAudioGroupVolume ( struct FName GroupName, float Volume )
{
	static UFunction* pFnSetAudioGroupVolume = NULL;

	if ( ! pFnSetAudioGroupVolume )
		pFnSetAudioGroupVolume = (UFunction*) UObject::GObjObjects()->Data[ 10050 ];

	APlayerController_execSetAudioGroupVolume_Parms SetAudioGroupVolume_Parms;
	memcpy ( &SetAudioGroupVolume_Parms.GroupName, &GroupName, 0x8 );
	SetAudioGroupVolume_Parms.Volume = Volume;

	pFnSetAudioGroupVolume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAudioGroupVolume, &SetAudioGroupVolume_Parms, NULL );

	pFnSetAudioGroupVolume->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.SetAllowMatureLanguage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bAllowMatureLanguge            ( CPF_Parm )

void APlayerController::SetAllowMatureLanguage ( unsigned long bAllowMatureLanguge )
{
	static UFunction* pFnSetAllowMatureLanguage = NULL;

	if ( ! pFnSetAllowMatureLanguage )
		pFnSetAllowMatureLanguage = (UFunction*) UObject::GObjObjects()->Data[ 10048 ];

	APlayerController_execSetAllowMatureLanguage_Parms SetAllowMatureLanguage_Parms;
	SetAllowMatureLanguage_Parms.bAllowMatureLanguge = bAllowMatureLanguge;

	pFnSetAllowMatureLanguage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAllowMatureLanguage, &SetAllowMatureLanguage_Parms, NULL );

	pFnSetAllowMatureLanguage->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.PasteFromClipboard
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerController::PasteFromClipboard ( )
{
	static UFunction* pFnPasteFromClipboard = NULL;

	if ( ! pFnPasteFromClipboard )
		pFnPasteFromClipboard = (UFunction*) UObject::GObjObjects()->Data[ 10046 ];

	APlayerController_execPasteFromClipboard_Parms PasteFromClipboard_Parms;

	pFnPasteFromClipboard->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPasteFromClipboard, &PasteFromClipboard_Parms, NULL );

	pFnPasteFromClipboard->FunctionFlags |= 0x400;

	return PasteFromClipboard_Parms.ReturnValue;
};

// Function Engine.PlayerController.CopyToClipboard
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::CopyToClipboard ( struct FString Text )
{
	static UFunction* pFnCopyToClipboard = NULL;

	if ( ! pFnCopyToClipboard )
		pFnCopyToClipboard = (UFunction*) UObject::GObjObjects()->Data[ 10044 ];

	APlayerController_execCopyToClipboard_Parms CopyToClipboard_Parms;
	memcpy ( &CopyToClipboard_Parms.Text, &Text, 0x10 );

	pFnCopyToClipboard->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCopyToClipboard, &CopyToClipboard_Parms, NULL );

	pFnCopyToClipboard->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.GetDefaultURL
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Option                         ( CPF_Parm | CPF_NeedCtorLink )

struct FString APlayerController::GetDefaultURL ( struct FString Option )
{
	static UFunction* pFnGetDefaultURL = NULL;

	if ( ! pFnGetDefaultURL )
		pFnGetDefaultURL = (UFunction*) UObject::GObjObjects()->Data[ 10041 ];

	APlayerController_execGetDefaultURL_Parms GetDefaultURL_Parms;
	memcpy ( &GetDefaultURL_Parms.Option, &Option, 0x10 );

	pFnGetDefaultURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultURL, &GetDefaultURL_Parms, NULL );

	pFnGetDefaultURL->FunctionFlags |= 0x400;

	return GetDefaultURL_Parms.ReturnValue;
};

// Function Engine.PlayerController.UpdateURL
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0222]
// Parameters infos:
// struct FString                 NewOption                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 NewValue                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bSave1Default                  ( CPF_Parm )

void APlayerController::UpdateURL ( struct FString NewOption, struct FString NewValue, unsigned long bSave1Default )
{
	static UFunction* pFnUpdateURL = NULL;

	if ( ! pFnUpdateURL )
		pFnUpdateURL = (UFunction*) UObject::GObjObjects()->Data[ 10037 ];

	APlayerController_execUpdateURL_Parms UpdateURL_Parms;
	memcpy ( &UpdateURL_Parms.NewOption, &NewOption, 0x10 );
	memcpy ( &UpdateURL_Parms.NewValue, &NewValue, 0x10 );
	UpdateURL_Parms.bSave1Default = bSave1Default;

	unsigned short NativeIndex = pFnUpdateURL->iNative;
	pFnUpdateURL->iNative = 0;

	pFnUpdateURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateURL, &UpdateURL_Parms, NULL );

	pFnUpdateURL->FunctionFlags |= 0x400;

	pFnUpdateURL->iNative = NativeIndex;
};

// Function Engine.PlayerController.ClientTravel
// [0x01024DC0] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  TravelType                     ( CPF_Parm )
// unsigned long                  bSeamless                      ( CPF_OptionalParm | CPF_Parm )
// struct FGuid                   MapPackageGuid                 ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientTravel ( struct FString URL, unsigned char TravelType, unsigned long bSeamless, struct FGuid MapPackageGuid )
{
	static UFunction* pFnClientTravel = NULL;

	if ( ! pFnClientTravel )
		pFnClientTravel = (UFunction*) UObject::GObjObjects()->Data[ 10032 ];

	APlayerController_eventClientTravel_Parms ClientTravel_Parms;
	memcpy ( &ClientTravel_Parms.URL, &URL, 0x10 );
	ClientTravel_Parms.TravelType = TravelType;
	ClientTravel_Parms.bSeamless = bSeamless;
	memcpy ( &ClientTravel_Parms.MapPackageGuid, &MapPackageGuid, 0x10 );

	pFnClientTravel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientTravel, &ClientTravel_Parms, NULL );

	pFnClientTravel->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ConsoleCommand
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bWriteToLog                    ( CPF_OptionalParm | CPF_Parm )

struct FString APlayerController::ConsoleCommand ( struct FString Command, unsigned long bWriteToLog )
{
	static UFunction* pFnConsoleCommand = NULL;

	if ( ! pFnConsoleCommand )
		pFnConsoleCommand = (UFunction*) UObject::GObjObjects()->Data[ 6889 ];

	APlayerController_execConsoleCommand_Parms ConsoleCommand_Parms;
	memcpy ( &ConsoleCommand_Parms.Command, &Command, 0x10 );
	ConsoleCommand_Parms.bWriteToLog = bWriteToLog;

	pFnConsoleCommand->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConsoleCommand, &ConsoleCommand_Parms, NULL );

	pFnConsoleCommand->FunctionFlags |= 0x400;

	return ConsoleCommand_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetServerNetworkAddress
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerController::GetServerNetworkAddress ( )
{
	static UFunction* pFnGetServerNetworkAddress = NULL;

	if ( ! pFnGetServerNetworkAddress )
		pFnGetServerNetworkAddress = (UFunction*) UObject::GObjObjects()->Data[ 10028 ];

	APlayerController_execGetServerNetworkAddress_Parms GetServerNetworkAddress_Parms;

	pFnGetServerNetworkAddress->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetServerNetworkAddress, &GetServerNetworkAddress_Parms, NULL );

	pFnGetServerNetworkAddress->FunctionFlags |= 0x400;

	return GetServerNetworkAddress_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetPlayerNetworkAddress
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerController::GetPlayerNetworkAddress ( )
{
	static UFunction* pFnGetPlayerNetworkAddress = NULL;

	if ( ! pFnGetPlayerNetworkAddress )
		pFnGetPlayerNetworkAddress = (UFunction*) UObject::GObjObjects()->Data[ 7550 ];

	APlayerController_execGetPlayerNetworkAddress_Parms GetPlayerNetworkAddress_Parms;

	pFnGetPlayerNetworkAddress->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerNetworkAddress, &GetPlayerNetworkAddress_Parms, NULL );

	pFnGetPlayerNetworkAddress->FunctionFlags |= 0x400;

	return GetPlayerNetworkAddress_Parms.ReturnValue;
};

// Function Engine.PlayerController.SetNetSpeed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            NewSpeed                       ( CPF_Parm )

void APlayerController::SetNetSpeed ( int NewSpeed )
{
	static UFunction* pFnSetNetSpeed = NULL;

	if ( ! pFnSetNetSpeed )
		pFnSetNetSpeed = (UFunction*) UObject::GObjObjects()->Data[ 10026 ];

	APlayerController_execSetNetSpeed_Parms SetNetSpeed_Parms;
	SetNetSpeed_Parms.NewSpeed = NewSpeed;

	pFnSetNetSpeed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNetSpeed, &SetNetSpeed_Parms, NULL );

	pFnSetNetSpeed->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.GetScaleFormManager
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioSFManager*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioSFManager* APlayerController::GetScaleFormManager ( )
{
	static UFunction* pFnGetScaleFormManager = NULL;

	if ( ! pFnGetScaleFormManager )
		pFnGetScaleFormManager = (UFunction*) UObject::GObjObjects()->Data[ 10024 ];

	APlayerController_execGetScaleFormManager_Parms GetScaleFormManager_Parms;

	pFnGetScaleFormManager->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScaleFormManager, &GetScaleFormManager_Parms, NULL );

	pFnGetScaleFormManager->FunctionFlags |= 0x400;

	return GetScaleFormManager_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientDrawCoordinateSystem
// [0x010241C2] 
// Parameters infos:
// struct FVector                 AxisLoc                        ( CPF_Parm )
// struct FRotator                AxisRot                        ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void APlayerController::ClientDrawCoordinateSystem ( struct FVector AxisLoc, struct FRotator AxisRot, float Scale, unsigned long bPersistentLines )
{
	static UFunction* pFnClientDrawCoordinateSystem = NULL;

	if ( ! pFnClientDrawCoordinateSystem )
		pFnClientDrawCoordinateSystem = (UFunction*) UObject::GObjObjects()->Data[ 10019 ];

	APlayerController_execClientDrawCoordinateSystem_Parms ClientDrawCoordinateSystem_Parms;
	memcpy ( &ClientDrawCoordinateSystem_Parms.AxisLoc, &AxisLoc, 0xC );
	memcpy ( &ClientDrawCoordinateSystem_Parms.AxisRot, &AxisRot, 0xC );
	ClientDrawCoordinateSystem_Parms.Scale = Scale;
	ClientDrawCoordinateSystem_Parms.bPersistentLines = bPersistentLines;

	this->ProcessEvent ( pFnClientDrawCoordinateSystem, &ClientDrawCoordinateSystem_Parms, NULL );
};

// Function Engine.CheatManager.NavMeshVerification
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// float                          interval                       ( CPF_OptionalParm | CPF_Parm )

void UCheatManager::NavMeshVerification ( float interval )
{
	static UFunction* pFnNavMeshVerification = NULL;

	if ( ! pFnNavMeshVerification )
		pFnNavMeshVerification = (UFunction*) UObject::GObjObjects()->Data[ 16867 ];

	UCheatManager_execNavMeshVerification_Parms NavMeshVerification_Parms;
	NavMeshVerification_Parms.interval = interval;

	this->ProcessEvent ( pFnNavMeshVerification, &NavMeshVerification_Parms, NULL );
};

// Function Engine.CheatManager.VerifyNavMeshObjects
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UCheatManager::VerifyNavMeshObjects ( )
{
	static UFunction* pFnVerifyNavMeshObjects = NULL;

	if ( ! pFnVerifyNavMeshObjects )
		pFnVerifyNavMeshObjects = (UFunction*) UObject::GObjObjects()->Data[ 16866 ];

	UCheatManager_execVerifyNavMeshObjects_Parms VerifyNavMeshObjects_Parms;

	pFnVerifyNavMeshObjects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVerifyNavMeshObjects, &VerifyNavMeshObjects_Parms, NULL );

	pFnVerifyNavMeshObjects->FunctionFlags |= 0x400;
};

// Function Engine.CheatManager.LogParticleActivateSystemCalls
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldLog                     ( CPF_Parm )

void UCheatManager::LogParticleActivateSystemCalls ( unsigned long bShouldLog )
{
	static UFunction* pFnLogParticleActivateSystemCalls = NULL;

	if ( ! pFnLogParticleActivateSystemCalls )
		pFnLogParticleActivateSystemCalls = (UFunction*) UObject::GObjObjects()->Data[ 16864 ];

	UCheatManager_execLogParticleActivateSystemCalls_Parms LogParticleActivateSystemCalls_Parms;
	LogParticleActivateSystemCalls_Parms.bShouldLog = bShouldLog;

	pFnLogParticleActivateSystemCalls->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogParticleActivateSystemCalls, &LogParticleActivateSystemCalls_Parms, NULL );

	pFnLogParticleActivateSystemCalls->FunctionFlags |= 0x400;
};

// Function Engine.CheatManager.LogPlaySoundCalls
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldLog                     ( CPF_Parm )

void UCheatManager::LogPlaySoundCalls ( unsigned long bShouldLog )
{
	static UFunction* pFnLogPlaySoundCalls = NULL;

	if ( ! pFnLogPlaySoundCalls )
		pFnLogPlaySoundCalls = (UFunction*) UObject::GObjObjects()->Data[ 16862 ];

	UCheatManager_execLogPlaySoundCalls_Parms LogPlaySoundCalls_Parms;
	LogPlaySoundCalls_Parms.bShouldLog = bShouldLog;

	pFnLogPlaySoundCalls->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlaySoundCalls, &LogPlaySoundCalls_Parms, NULL );

	pFnLogPlaySoundCalls->FunctionFlags |= 0x400;
};

// Function Engine.CheatManager.InitCheatManager
// [0x00020000] 
// Parameters infos:

void UCheatManager::InitCheatManager ( )
{
	static UFunction* pFnInitCheatManager = NULL;

	if ( ! pFnInitCheatManager )
		pFnInitCheatManager = (UFunction*) UObject::GObjObjects()->Data[ 16861 ];

	UCheatManager_execInitCheatManager_Parms InitCheatManager_Parms;

	this->ProcessEvent ( pFnInitCheatManager, &InitCheatManager_Parms, NULL );
};

// Function Engine.CheatManager.VerbosePathDebug
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::VerbosePathDebug ( )
{
	static UFunction* pFnVerbosePathDebug = NULL;

	if ( ! pFnVerbosePathDebug )
		pFnVerbosePathDebug = (UFunction*) UObject::GObjObjects()->Data[ 16852 ];

	UCheatManager_execVerbosePathDebug_Parms VerbosePathDebug_Parms;

	this->ProcessEvent ( pFnVerbosePathDebug, &VerbosePathDebug_Parms, NULL );
};

// Function Engine.CheatManager.TestNavMeshPath
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bDrawPath                      ( CPF_OptionalParm | CPF_Parm )

void UCheatManager::TestNavMeshPath ( unsigned long bDrawPath )
{
	static UFunction* pFnTestNavMeshPath = NULL;

	if ( ! pFnTestNavMeshPath )
		pFnTestNavMeshPath = (UFunction*) UObject::GObjObjects()->Data[ 16835 ];

	UCheatManager_execTestNavMeshPath_Parms TestNavMeshPath_Parms;
	TestNavMeshPath_Parms.bDrawPath = bDrawPath;

	this->ProcessEvent ( pFnTestNavMeshPath, &TestNavMeshPath_Parms, NULL );
};

// Function Engine.CheatManager.SetOnlineDebugLevel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            DebugLevel                     ( CPF_Parm )

void UCheatManager::SetOnlineDebugLevel ( int DebugLevel )
{
	static UFunction* pFnSetOnlineDebugLevel = NULL;

	if ( ! pFnSetOnlineDebugLevel )
		pFnSetOnlineDebugLevel = (UFunction*) UObject::GObjObjects()->Data[ 16833 ];

	UCheatManager_execSetOnlineDebugLevel_Parms SetOnlineDebugLevel_Parms;
	SetOnlineDebugLevel_Parms.DebugLevel = DebugLevel;

	this->ProcessEvent ( pFnSetOnlineDebugLevel, &SetOnlineDebugLevel_Parms, NULL );
};

// Function Engine.CheatManager.DumpVoiceMutingState
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::DumpVoiceMutingState ( )
{
	static UFunction* pFnDumpVoiceMutingState = NULL;

	if ( ! pFnDumpVoiceMutingState )
		pFnDumpVoiceMutingState = (UFunction*) UObject::GObjObjects()->Data[ 16829 ];

	UCheatManager_execDumpVoiceMutingState_Parms DumpVoiceMutingState_Parms;

	this->ProcessEvent ( pFnDumpVoiceMutingState, &DumpVoiceMutingState_Parms, NULL );
};

// Function Engine.CheatManager.DumpOnlineSessionState
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::DumpOnlineSessionState ( )
{
	static UFunction* pFnDumpOnlineSessionState = NULL;

	if ( ! pFnDumpOnlineSessionState )
		pFnDumpOnlineSessionState = (UFunction*) UObject::GObjObjects()->Data[ 16810 ];

	UCheatManager_execDumpOnlineSessionState_Parms DumpOnlineSessionState_Parms;

	this->ProcessEvent ( pFnDumpOnlineSessionState, &DumpOnlineSessionState_Parms, NULL );
};

// Function Engine.CheatManager.TestLevel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::TestLevel ( )
{
	static UFunction* pFnTestLevel = NULL;

	if ( ! pFnTestLevel )
		pFnTestLevel = (UFunction*) UObject::GObjObjects()->Data[ 16806 ];

	UCheatManager_execTestLevel_Parms TestLevel_Parms;

	this->ProcessEvent ( pFnTestLevel, &TestLevel_Parms, NULL );
};

// Function Engine.CheatManager.EnableDebugCamera
// [0x00020002] 
// Parameters infos:

void UCheatManager::EnableDebugCamera ( )
{
	static UFunction* pFnEnableDebugCamera = NULL;

	if ( ! pFnEnableDebugCamera )
		pFnEnableDebugCamera = (UFunction*) UObject::GObjObjects()->Data[ 16799 ];

	UCheatManager_execEnableDebugCamera_Parms EnableDebugCamera_Parms;

	this->ProcessEvent ( pFnEnableDebugCamera, &EnableDebugCamera_Parms, NULL );
};

// Function Engine.CheatManager.ToggleDebugCamera
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::ToggleDebugCamera ( )
{
	static UFunction* pFnToggleDebugCamera = NULL;

	if ( ! pFnToggleDebugCamera )
		pFnToggleDebugCamera = (UFunction*) UObject::GObjObjects()->Data[ 16795 ];

	UCheatManager_execToggleDebugCamera_Parms ToggleDebugCamera_Parms;

	this->ProcessEvent ( pFnToggleDebugCamera, &ToggleDebugCamera_Parms, NULL );
};

// Function Engine.CheatManager.StreamLevelOut
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )

void UCheatManager::StreamLevelOut ( struct FName PackageName )
{
	static UFunction* pFnStreamLevelOut = NULL;

	if ( ! pFnStreamLevelOut )
		pFnStreamLevelOut = (UFunction*) UObject::GObjObjects()->Data[ 16793 ];

	UCheatManager_execStreamLevelOut_Parms StreamLevelOut_Parms;
	memcpy ( &StreamLevelOut_Parms.PackageName, &PackageName, 0x8 );

	this->ProcessEvent ( pFnStreamLevelOut, &StreamLevelOut_Parms, NULL );
};

// Function Engine.CheatManager.OnlyLoadLevel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )

void UCheatManager::OnlyLoadLevel ( struct FName PackageName )
{
	static UFunction* pFnOnlyLoadLevel = NULL;

	if ( ! pFnOnlyLoadLevel )
		pFnOnlyLoadLevel = (UFunction*) UObject::GObjObjects()->Data[ 16791 ];

	UCheatManager_execOnlyLoadLevel_Parms OnlyLoadLevel_Parms;
	memcpy ( &OnlyLoadLevel_Parms.PackageName, &PackageName, 0x8 );

	this->ProcessEvent ( pFnOnlyLoadLevel, &OnlyLoadLevel_Parms, NULL );
};

// Function Engine.CheatManager.StreamLevelIn
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )

void UCheatManager::StreamLevelIn ( struct FName PackageName )
{
	static UFunction* pFnStreamLevelIn = NULL;

	if ( ! pFnStreamLevelIn )
		pFnStreamLevelIn = (UFunction*) UObject::GObjObjects()->Data[ 16789 ];

	UCheatManager_execStreamLevelIn_Parms StreamLevelIn_Parms;
	memcpy ( &StreamLevelIn_Parms.PackageName, &PackageName, 0x8 );

	this->ProcessEvent ( pFnStreamLevelIn, &StreamLevelIn_Parms, NULL );
};

// Function Engine.CheatManager.SetMass
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void UCheatManager::SetMass ( float F )
{
	static UFunction* pFnSetMass = NULL;

	if ( ! pFnSetMass )
		pFnSetMass = (UFunction*) UObject::GObjObjects()->Data[ 16786 ];

	UCheatManager_execSetMass_Parms SetMass_Parms;
	SetMass_Parms.F = F;

	this->ProcessEvent ( pFnSetMass, &SetMass_Parms, NULL );
};

// Function Engine.CheatManager.SetLevelStreamingStatus
// [0x00020002] 
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )
// unsigned long                  bShouldBeLoaded                ( CPF_Parm )
// unsigned long                  bShouldBeVisible               ( CPF_Parm )

void UCheatManager::SetLevelStreamingStatus ( struct FName PackageName, unsigned long bShouldBeLoaded, unsigned long bShouldBeVisible )
{
	static UFunction* pFnSetLevelStreamingStatus = NULL;

	if ( ! pFnSetLevelStreamingStatus )
		pFnSetLevelStreamingStatus = (UFunction*) UObject::GObjObjects()->Data[ 16780 ];

	UCheatManager_execSetLevelStreamingStatus_Parms SetLevelStreamingStatus_Parms;
	memcpy ( &SetLevelStreamingStatus_Parms.PackageName, &PackageName, 0x8 );
	SetLevelStreamingStatus_Parms.bShouldBeLoaded = bShouldBeLoaded;
	SetLevelStreamingStatus_Parms.bShouldBeVisible = bShouldBeVisible;

	this->ProcessEvent ( pFnSetLevelStreamingStatus, &SetLevelStreamingStatus_Parms, NULL );
};

// Function Engine.CheatManager.AllWeapons
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::AllWeapons ( )
{
	static UFunction* pFnAllWeapons = NULL;

	if ( ! pFnAllWeapons )
		pFnAllWeapons = (UFunction*) UObject::GObjObjects()->Data[ 16779 ];

	UCheatManager_execAllWeapons_Parms AllWeapons_Parms;

	this->ProcessEvent ( pFnAllWeapons, &AllWeapons_Parms, NULL );
};

// Function Engine.CheatManager.Loaded
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Loaded ( )
{
	static UFunction* pFnLoaded = NULL;

	if ( ! pFnLoaded )
		pFnLoaded = (UFunction*) UObject::GObjObjects()->Data[ 16778 ];

	UCheatManager_execLoaded_Parms Loaded_Parms;

	this->ProcessEvent ( pFnLoaded, &Loaded_Parms, NULL );
};

// Function Engine.CheatManager.ViewClass
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// class UClass*                  aClass                         ( CPF_Parm )

void UCheatManager::ViewClass ( class UClass* aClass )
{
	static UFunction* pFnViewClass = NULL;

	if ( ! pFnViewClass )
		pFnViewClass = (UFunction*) UObject::GObjObjects()->Data[ 16773 ];

	UCheatManager_execViewClass_Parms ViewClass_Parms;
	ViewClass_Parms.aClass = aClass;

	this->ProcessEvent ( pFnViewClass, &ViewClass_Parms, NULL );
};

// Function Engine.CheatManager.ViewBot
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::ViewBot ( )
{
	static UFunction* pFnViewBot = NULL;

	if ( ! pFnViewBot )
		pFnViewBot = (UFunction*) UObject::GObjObjects()->Data[ 16769 ];

	UCheatManager_execViewBot_Parms ViewBot_Parms;

	this->ProcessEvent ( pFnViewBot, &ViewBot_Parms, NULL );
};

// Function Engine.CheatManager.ViewFlag
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::ViewFlag ( )
{
	static UFunction* pFnViewFlag = NULL;

	if ( ! pFnViewFlag )
		pFnViewFlag = (UFunction*) UObject::GObjObjects()->Data[ 16766 ];

	UCheatManager_execViewFlag_Parms ViewFlag_Parms;

	this->ProcessEvent ( pFnViewFlag, &ViewFlag_Parms, NULL );
};

// Function Engine.CheatManager.ViewActor
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   actorName                      ( CPF_Parm )

void UCheatManager::ViewActor ( struct FName actorName )
{
	static UFunction* pFnViewActor = NULL;

	if ( ! pFnViewActor )
		pFnViewActor = (UFunction*) UObject::GObjObjects()->Data[ 16763 ];

	UCheatManager_execViewActor_Parms ViewActor_Parms;
	memcpy ( &ViewActor_Parms.actorName, &actorName, 0x8 );

	this->ProcessEvent ( pFnViewActor, &ViewActor_Parms, NULL );
};

// Function Engine.CheatManager.ViewPlayer
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::ViewPlayer ( struct FString S )
{
	static UFunction* pFnViewPlayer = NULL;

	if ( ! pFnViewPlayer )
		pFnViewPlayer = (UFunction*) UObject::GObjObjects()->Data[ 16760 ];

	UCheatManager_execViewPlayer_Parms ViewPlayer_Parms;
	memcpy ( &ViewPlayer_Parms.S, &S, 0x10 );

	this->ProcessEvent ( pFnViewPlayer, &ViewPlayer_Parms, NULL );
};

// Function Engine.CheatManager.ViewSelf
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bQuiet                         ( CPF_OptionalParm | CPF_Parm )

void UCheatManager::ViewSelf ( unsigned long bQuiet )
{
	static UFunction* pFnViewSelf = NULL;

	if ( ! pFnViewSelf )
		pFnViewSelf = (UFunction*) UObject::GObjObjects()->Data[ 16758 ];

	UCheatManager_execViewSelf_Parms ViewSelf_Parms;
	ViewSelf_Parms.bQuiet = bQuiet;

	this->ProcessEvent ( pFnViewSelf, &ViewSelf_Parms, NULL );
};

// Function Engine.CheatManager.RememberSpot
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::RememberSpot ( )
{
	static UFunction* pFnRememberSpot = NULL;

	if ( ! pFnRememberSpot )
		pFnRememberSpot = (UFunction*) UObject::GObjObjects()->Data[ 16757 ];

	UCheatManager_execRememberSpot_Parms RememberSpot_Parms;

	this->ProcessEvent ( pFnRememberSpot, &RememberSpot_Parms, NULL );
};

// Function Engine.CheatManager.PlayersOnly
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::PlayersOnly ( )
{
	static UFunction* pFnPlayersOnly = NULL;

	if ( ! pFnPlayersOnly )
		pFnPlayersOnly = (UFunction*) UObject::GObjObjects()->Data[ 16756 ];

	UCheatManager_execPlayersOnly_Parms PlayersOnly_Parms;

	this->ProcessEvent ( pFnPlayersOnly, &PlayersOnly_Parms, NULL );
};

// Function Engine.CheatManager.GiveWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// class AWeapon*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 WeaponClassStr                 ( CPF_Parm | CPF_NeedCtorLink )

class AWeapon* UCheatManager::GiveWeapon ( struct FString WeaponClassStr )
{
	static UFunction* pFnGiveWeapon = NULL;

	if ( ! pFnGiveWeapon )
		pFnGiveWeapon = (UFunction*) UObject::GObjObjects()->Data[ 16749 ];

	UCheatManager_execGiveWeapon_Parms GiveWeapon_Parms;
	memcpy ( &GiveWeapon_Parms.WeaponClassStr, &WeaponClassStr, 0x10 );

	this->ProcessEvent ( pFnGiveWeapon, &GiveWeapon_Parms, NULL );

	return GiveWeapon_Parms.ReturnValue;
};

// Function Engine.CheatManager.Summon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 ClassName                      ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::Summon ( struct FString ClassName )
{
	static UFunction* pFnSummon = NULL;

	if ( ! pFnSummon )
		pFnSummon = (UFunction*) UObject::GObjObjects()->Data[ 16745 ];

	UCheatManager_execSummon_Parms Summon_Parms;
	memcpy ( &Summon_Parms.ClassName, &ClassName, 0x10 );

	this->ProcessEvent ( pFnSummon, &Summon_Parms, NULL );
};

// Function Engine.CheatManager.Avatar
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   ClassName                      ( CPF_Parm )

void UCheatManager::Avatar ( struct FName ClassName )
{
	static UFunction* pFnAvatar = NULL;

	if ( ! pFnAvatar )
		pFnAvatar = (UFunction*) UObject::GObjObjects()->Data[ 16738 ];

	UCheatManager_execAvatar_Parms Avatar_Parms;
	memcpy ( &Avatar_Parms.ClassName, &ClassName, 0x8 );

	this->ProcessEvent ( pFnAvatar, &Avatar_Parms, NULL );
};

// Function Engine.CheatManager.KillPawns
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::KillPawns ( )
{
	static UFunction* pFnKillPawns = NULL;

	if ( ! pFnKillPawns )
		pFnKillPawns = (UFunction*) UObject::GObjObjects()->Data[ 16737 ];

	UCheatManager_execKillPawns_Parms KillPawns_Parms;

	this->ProcessEvent ( pFnKillPawns, &KillPawns_Parms, NULL );
};

// Function Engine.CheatManager.KillAllPawns
// [0x00020002] 
// Parameters infos:
// class UClass*                  aClass                         ( CPF_Parm )

void UCheatManager::KillAllPawns ( class UClass* aClass )
{
	static UFunction* pFnKillAllPawns = NULL;

	if ( ! pFnKillAllPawns )
		pFnKillAllPawns = (UFunction*) UObject::GObjObjects()->Data[ 16732 ];

	UCheatManager_execKillAllPawns_Parms KillAllPawns_Parms;
	KillAllPawns_Parms.aClass = aClass;

	this->ProcessEvent ( pFnKillAllPawns, &KillAllPawns_Parms, NULL );
};

// Function Engine.CheatManager.KillAll
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// class UClass*                  aClass                         ( CPF_Parm )

void UCheatManager::KillAll ( class UClass* aClass )
{
	static UFunction* pFnKillAll = NULL;

	if ( ! pFnKillAll )
		pFnKillAll = (UFunction*) UObject::GObjObjects()->Data[ 16728 ];

	UCheatManager_execKillAll_Parms KillAll_Parms;
	KillAll_Parms.aClass = aClass;

	this->ProcessEvent ( pFnKillAll, &KillAll_Parms, NULL );
};

// Function Engine.CheatManager.SetSpeed
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void UCheatManager::SetSpeed ( float F )
{
	static UFunction* pFnSetSpeed = NULL;

	if ( ! pFnSetSpeed )
		pFnSetSpeed = (UFunction*) UObject::GObjObjects()->Data[ 16724 ];

	UCheatManager_execSetSpeed_Parms SetSpeed_Parms;
	SetSpeed_Parms.F = F;

	this->ProcessEvent ( pFnSetSpeed, &SetSpeed_Parms, NULL );
};

// Function Engine.CheatManager.SetGravity
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void UCheatManager::SetGravity ( float F )
{
	static UFunction* pFnSetGravity = NULL;

	if ( ! pFnSetGravity )
		pFnSetGravity = (UFunction*) UObject::GObjObjects()->Data[ 16722 ];

	UCheatManager_execSetGravity_Parms SetGravity_Parms;
	SetGravity_Parms.F = F;

	this->ProcessEvent ( pFnSetGravity, &SetGravity_Parms, NULL );
};

// Function Engine.CheatManager.SetJumpZ
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void UCheatManager::SetJumpZ ( float F )
{
	static UFunction* pFnSetJumpZ = NULL;

	if ( ! pFnSetJumpZ )
		pFnSetJumpZ = (UFunction*) UObject::GObjObjects()->Data[ 16719 ];

	UCheatManager_execSetJumpZ_Parms SetJumpZ_Parms;
	SetJumpZ_Parms.F = F;

	this->ProcessEvent ( pFnSetJumpZ, &SetJumpZ_Parms, NULL );
};

// Function Engine.CheatManager.Slomo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          T                              ( CPF_Parm )

void UCheatManager::Slomo ( float T )
{
	static UFunction* pFnSlomo = NULL;

	if ( ! pFnSlomo )
		pFnSlomo = (UFunction*) UObject::GObjObjects()->Data[ 16717 ];

	UCheatManager_execSlomo_Parms Slomo_Parms;
	Slomo_Parms.T = T;

	this->ProcessEvent ( pFnSlomo, &Slomo_Parms, NULL );
};

// Function Engine.CheatManager.AffectedByHitEffects
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::AffectedByHitEffects ( )
{
	static UFunction* pFnAffectedByHitEffects = NULL;

	if ( ! pFnAffectedByHitEffects )
		pFnAffectedByHitEffects = (UFunction*) UObject::GObjObjects()->Data[ 16716 ];

	UCheatManager_execAffectedByHitEffects_Parms AffectedByHitEffects_Parms;

	this->ProcessEvent ( pFnAffectedByHitEffects, &AffectedByHitEffects_Parms, NULL );
};

// Function Engine.CheatManager.God
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::God ( )
{
	static UFunction* pFnGod = NULL;

	if ( ! pFnGod )
		pFnGod = (UFunction*) UObject::GObjObjects()->Data[ 16714 ];

	UCheatManager_execGod_Parms God_Parms;

	this->ProcessEvent ( pFnGod, &God_Parms, NULL );
};

// Function Engine.CheatManager.AllAmmo
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::AllAmmo ( )
{
	static UFunction* pFnAllAmmo = NULL;

	if ( ! pFnAllAmmo )
		pFnAllAmmo = (UFunction*) UObject::GObjObjects()->Data[ 16713 ];

	UCheatManager_execAllAmmo_Parms AllAmmo_Parms;

	this->ProcessEvent ( pFnAllAmmo, &AllAmmo_Parms, NULL );
};

// Function Engine.CheatManager.Ghost
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Ghost ( )
{
	static UFunction* pFnGhost = NULL;

	if ( ! pFnGhost )
		pFnGhost = (UFunction*) UObject::GObjObjects()->Data[ 16709 ];

	UCheatManager_execGhost_Parms Ghost_Parms;

	this->ProcessEvent ( pFnGhost, &Ghost_Parms, NULL );
};

// Function Engine.CheatManager.Walk
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Walk ( )
{
	static UFunction* pFnWalk = NULL;

	if ( ! pFnWalk )
		pFnWalk = (UFunction*) UObject::GObjObjects()->Data[ 16706 ];

	UCheatManager_execWalk_Parms Walk_Parms;

	this->ProcessEvent ( pFnWalk, &Walk_Parms, NULL );
};

// Function Engine.CheatManager.Fly
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Fly ( )
{
	static UFunction* pFnFly = NULL;

	if ( ! pFnFly )
		pFnFly = (UFunction*) UObject::GObjObjects()->Data[ 16703 ];

	UCheatManager_execFly_Parms Fly_Parms;

	this->ProcessEvent ( pFnFly, &Fly_Parms, NULL );
};

// Function Engine.CheatManager.Amphibious
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Amphibious ( )
{
	static UFunction* pFnAmphibious = NULL;

	if ( ! pFnAmphibious )
		pFnAmphibious = (UFunction*) UObject::GObjObjects()->Data[ 16702 ];

	UCheatManager_execAmphibious_Parms Amphibious_Parms;

	this->ProcessEvent ( pFnAmphibious, &Amphibious_Parms, NULL );
};

// Function Engine.CheatManager.EndPath
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::EndPath ( )
{
	static UFunction* pFnEndPath = NULL;

	if ( ! pFnEndPath )
		pFnEndPath = (UFunction*) UObject::GObjObjects()->Data[ 16701 ];

	UCheatManager_execEndPath_Parms EndPath_Parms;

	this->ProcessEvent ( pFnEndPath, &EndPath_Parms, NULL );
};

// Function Engine.CheatManager.ChangeSize
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void UCheatManager::ChangeSize ( float F )
{
	static UFunction* pFnChangeSize = NULL;

	if ( ! pFnChangeSize )
		pFnChangeSize = (UFunction*) UObject::GObjObjects()->Data[ 16699 ];

	UCheatManager_execChangeSize_Parms ChangeSize_Parms;
	ChangeSize_Parms.F = F;

	this->ProcessEvent ( pFnChangeSize, &ChangeSize_Parms, NULL );
};

// Function Engine.CheatManager.Teleport
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Teleport ( )
{
	static UFunction* pFnTeleport = NULL;

	if ( ! pFnTeleport )
		pFnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 16693 ];

	UCheatManager_execTeleport_Parms Teleport_Parms;

	this->ProcessEvent ( pFnTeleport, &Teleport_Parms, NULL );
};

// Function Engine.CheatManager.KillViewedActor
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::KillViewedActor ( )
{
	static UFunction* pFnKillViewedActor = NULL;

	if ( ! pFnKillViewedActor )
		pFnKillViewedActor = (UFunction*) UObject::GObjObjects()->Data[ 16692 ];

	UCheatManager_execKillViewedActor_Parms KillViewedActor_Parms;

	this->ProcessEvent ( pFnKillViewedActor, &KillViewedActor_Parms, NULL );
};

// Function Engine.CheatManager.WriteToLog
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Param                          ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::WriteToLog ( struct FString Param )
{
	static UFunction* pFnWriteToLog = NULL;

	if ( ! pFnWriteToLog )
		pFnWriteToLog = (UFunction*) UObject::GObjObjects()->Data[ 16690 ];

	UCheatManager_execWriteToLog_Parms WriteToLog_Parms;
	memcpy ( &WriteToLog_Parms.Param, &Param, 0x10 );

	this->ProcessEvent ( pFnWriteToLog, &WriteToLog_Parms, NULL );
};

// Function Engine.CheatManager.FreezeFrame
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          Delay                          ( CPF_Parm )

void UCheatManager::FreezeFrame ( float Delay )
{
	static UFunction* pFnFreezeFrame = NULL;

	if ( ! pFnFreezeFrame )
		pFnFreezeFrame = (UFunction*) UObject::GObjObjects()->Data[ 16688 ];

	UCheatManager_execFreezeFrame_Parms FreezeFrame_Parms;
	FreezeFrame_Parms.Delay = Delay;

	this->ProcessEvent ( pFnFreezeFrame, &FreezeFrame_Parms, NULL );
};

// Function Engine.CheatManager.ListDynamicActors
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::ListDynamicActors ( )
{
	static UFunction* pFnListDynamicActors = NULL;

	if ( ! pFnListDynamicActors )
		pFnListDynamicActors = (UFunction*) UObject::GObjObjects()->Data[ 16685 ];

	UCheatManager_execListDynamicActors_Parms ListDynamicActors_Parms;

	this->ProcessEvent ( pFnListDynamicActors, &ListDynamicActors_Parms, NULL );
};

// Function Engine.CheatManager.DebugPause
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::DebugPause ( )
{
	static UFunction* pFnDebugPause = NULL;

	if ( ! pFnDebugPause )
		pFnDebugPause = (UFunction*) UObject::GObjObjects()->Data[ 16684 ];

	UCheatManager_execDebugPause_Parms DebugPause_Parms;

	this->ProcessEvent ( pFnDebugPause, &DebugPause_Parms, NULL );
};

// Function Engine.CheatManager.DebugAI
// [0x00024200] ( FUNC_Exec )
// Parameters infos:
// struct FName                   Category                       ( CPF_OptionalParm | CPF_Parm | CPF_CoerceParm )

void UCheatManager::DebugAI ( struct FName Category )
{
	static UFunction* pFnDebugAI = NULL;

	if ( ! pFnDebugAI )
		pFnDebugAI = (UFunction*) UObject::GObjObjects()->Data[ 16682 ];

	UCheatManager_execDebugAI_Parms DebugAI_Parms;
	memcpy ( &DebugAI_Parms.Category, &Category, 0x8 );

	this->ProcessEvent ( pFnDebugAI, &DebugAI_Parms, NULL );
};

// Function Engine.CurveEdPresetCurve.RetrieveFloatCurvePoints
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            CurveIndex                     ( CPF_Parm )
// class UDistributionFloat*      Distribution                   ( CPF_Parm | CPF_EditInline )

bool UCurveEdPresetCurve::RetrieveFloatCurvePoints ( int CurveIndex, class UDistributionFloat* Distribution )
{
	static UFunction* pFnRetrieveFloatCurvePoints = NULL;

	if ( ! pFnRetrieveFloatCurvePoints )
		pFnRetrieveFloatCurvePoints = (UFunction*) UObject::GObjObjects()->Data[ 18110 ];

	UCurveEdPresetCurve_execRetrieveFloatCurvePoints_Parms RetrieveFloatCurvePoints_Parms;
	RetrieveFloatCurvePoints_Parms.CurveIndex = CurveIndex;
	RetrieveFloatCurvePoints_Parms.Distribution = Distribution;

	pFnRetrieveFloatCurvePoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRetrieveFloatCurvePoints, &RetrieveFloatCurvePoints_Parms, NULL );

	pFnRetrieveFloatCurvePoints->FunctionFlags |= 0x400;

	return RetrieveFloatCurvePoints_Parms.ReturnValue;
};

// Function Engine.DamageType.VehicleDamageScalingFor
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AVehicle*                V                              ( CPF_Parm )

float UDamageType::VehicleDamageScalingFor ( class AVehicle* V )
{
	static UFunction* pFnVehicleDamageScalingFor = NULL;

	if ( ! pFnVehicleDamageScalingFor )
		pFnVehicleDamageScalingFor = (UFunction*) UObject::GObjObjects()->Data[ 18125 ];

	UDamageType_execVehicleDamageScalingFor_Parms VehicleDamageScalingFor_Parms;
	VehicleDamageScalingFor_Parms.V = V;

	this->ProcessEvent ( pFnVehicleDamageScalingFor, &VehicleDamageScalingFor_Parms, NULL );

	return VehicleDamageScalingFor_Parms.ReturnValue;
};

// Function Engine.DamageType.SuicideMessage
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class APlayerReplicationInfo*  Victim                         ( CPF_Parm )

struct FString UDamageType::SuicideMessage ( class APlayerReplicationInfo* Victim )
{
	static UFunction* pFnSuicideMessage = NULL;

	if ( ! pFnSuicideMessage )
		pFnSuicideMessage = (UFunction*) UObject::GObjObjects()->Data[ 18120 ];

	UDamageType_execSuicideMessage_Parms SuicideMessage_Parms;
	SuicideMessage_Parms.Victim = Victim;

	this->ProcessEvent ( pFnSuicideMessage, &SuicideMessage_Parms, NULL );

	return SuicideMessage_Parms.ReturnValue;
};

// Function Engine.DamageType.DeathMessage
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class APlayerReplicationInfo*  Killer                         ( CPF_Parm )
// class APlayerReplicationInfo*  Victim                         ( CPF_Parm )

struct FString UDamageType::DeathMessage ( class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim )
{
	static UFunction* pFnDeathMessage = NULL;

	if ( ! pFnDeathMessage )
		pFnDeathMessage = (UFunction*) UObject::GObjObjects()->Data[ 18115 ];

	UDamageType_execDeathMessage_Parms DeathMessage_Parms;
	DeathMessage_Parms.Killer = Killer;
	DeathMessage_Parms.Victim = Victim;

	this->ProcessEvent ( pFnDeathMessage, &DeathMessage_Parms, NULL );

	return DeathMessage_Parms.ReturnValue;
};

// Function Engine.FaceFXAsset.UnmountFaceFXAnimSet
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )

void UFaceFXAsset::UnmountFaceFXAnimSet ( class UFaceFXAnimSet* AnimSet )
{
	static UFunction* pFnUnmountFaceFXAnimSet = NULL;

	if ( ! pFnUnmountFaceFXAnimSet )
		pFnUnmountFaceFXAnimSet = (UFunction*) UObject::GObjObjects()->Data[ 19954 ];

	UFaceFXAsset_execUnmountFaceFXAnimSet_Parms UnmountFaceFXAnimSet_Parms;
	UnmountFaceFXAnimSet_Parms.AnimSet = AnimSet;

	pFnUnmountFaceFXAnimSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnmountFaceFXAnimSet, &UnmountFaceFXAnimSet_Parms, NULL );

	pFnUnmountFaceFXAnimSet->FunctionFlags |= 0x400;
};

// Function Engine.FaceFXAsset.MountFaceFXAnimSet
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )

void UFaceFXAsset::MountFaceFXAnimSet ( class UFaceFXAnimSet* AnimSet )
{
	static UFunction* pFnMountFaceFXAnimSet = NULL;

	if ( ! pFnMountFaceFXAnimSet )
		pFnMountFaceFXAnimSet = (UFunction*) UObject::GObjObjects()->Data[ 19952 ];

	UFaceFXAsset_execMountFaceFXAnimSet_Parms MountFaceFXAnimSet_Parms;
	MountFaceFXAnimSet_Parms.AnimSet = AnimSet;

	pFnMountFaceFXAnimSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMountFaceFXAnimSet, &MountFaceFXAnimSet_Parms, NULL );

	pFnMountFaceFXAnimSet->FunctionFlags |= 0x400;
};

// Function Engine.Font.GetMaxCharHeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UFont::GetMaxCharHeight ( )
{
	static UFunction* pFnGetMaxCharHeight = NULL;

	if ( ! pFnGetMaxCharHeight )
		pFnGetMaxCharHeight = (UFunction*) UObject::GObjObjects()->Data[ 16423 ];

	UFont_execGetMaxCharHeight_Parms GetMaxCharHeight_Parms;

	pFnGetMaxCharHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxCharHeight, &GetMaxCharHeight_Parms, NULL );

	pFnGetMaxCharHeight->FunctionFlags |= 0x400;

	return GetMaxCharHeight_Parms.ReturnValue;
};

// Function Engine.Font.GetAuthoredViewportHeight
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          ViewportHeight                 ( CPF_Parm )

float UFont::GetAuthoredViewportHeight ( float ViewportHeight )
{
	static UFunction* pFnGetAuthoredViewportHeight = NULL;

	if ( ! pFnGetAuthoredViewportHeight )
		pFnGetAuthoredViewportHeight = (UFunction*) UObject::GObjObjects()->Data[ 16420 ];

	UFont_execGetAuthoredViewportHeight_Parms GetAuthoredViewportHeight_Parms;
	GetAuthoredViewportHeight_Parms.ViewportHeight = ViewportHeight;

	pFnGetAuthoredViewportHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAuthoredViewportHeight, &GetAuthoredViewportHeight_Parms, NULL );

	pFnGetAuthoredViewportHeight->FunctionFlags |= 0x400;

	return GetAuthoredViewportHeight_Parms.ReturnValue;
};

// Function Engine.Font.GetScalingFactor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          HeightTest                     ( CPF_Parm )

float UFont::GetScalingFactor ( float HeightTest )
{
	static UFunction* pFnGetScalingFactor = NULL;

	if ( ! pFnGetScalingFactor )
		pFnGetScalingFactor = (UFunction*) UObject::GObjObjects()->Data[ 16417 ];

	UFont_execGetScalingFactor_Parms GetScalingFactor_Parms;
	GetScalingFactor_Parms.HeightTest = HeightTest;

	pFnGetScalingFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScalingFactor, &GetScalingFactor_Parms, NULL );

	pFnGetScalingFactor->FunctionFlags |= 0x400;

	return GetScalingFactor_Parms.ReturnValue;
};

// Function Engine.Font.GetResolutionPageIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          HeightTest                     ( CPF_Parm )

int UFont::GetResolutionPageIndex ( float HeightTest )
{
	static UFunction* pFnGetResolutionPageIndex = NULL;

	if ( ! pFnGetResolutionPageIndex )
		pFnGetResolutionPageIndex = (UFunction*) UObject::GObjObjects()->Data[ 16414 ];

	UFont_execGetResolutionPageIndex_Parms GetResolutionPageIndex_Parms;
	GetResolutionPageIndex_Parms.HeightTest = HeightTest;

	pFnGetResolutionPageIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResolutionPageIndex, &GetResolutionPageIndex_Parms, NULL );

	pFnGetResolutionPageIndex->FunctionFlags |= 0x400;

	return GetResolutionPageIndex_Parms.ReturnValue;
};

// Function Engine.MultiFont.GetResolutionTestTableIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          HeightTest                     ( CPF_Parm )

int UMultiFont::GetResolutionTestTableIndex ( float HeightTest )
{
	static UFunction* pFnGetResolutionTestTableIndex = NULL;

	if ( ! pFnGetResolutionTestTableIndex )
		pFnGetResolutionTestTableIndex = (UFunction*) UObject::GObjObjects()->Data[ 24802 ];

	UMultiFont_execGetResolutionTestTableIndex_Parms GetResolutionTestTableIndex_Parms;
	GetResolutionTestTableIndex_Parms.HeightTest = HeightTest;

	pFnGetResolutionTestTableIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResolutionTestTableIndex, &GetResolutionTestTableIndex_Parms, NULL );

	pFnGetResolutionTestTableIndex->FunctionFlags |= 0x400;

	return GetResolutionTestTableIndex_Parms.ReturnValue;
};

// Function Engine.ForceFeedbackManager.PauseWaveform
// [0x00024102] 
// Parameters infos:
// unsigned long                  bPause                         ( CPF_OptionalParm | CPF_Parm )

void UForceFeedbackManager::PauseWaveform ( unsigned long bPause )
{
	static UFunction* pFnPauseWaveform = NULL;

	if ( ! pFnPauseWaveform )
		pFnPauseWaveform = (UFunction*) UObject::GObjObjects()->Data[ 20276 ];

	UForceFeedbackManager_execPauseWaveform_Parms PauseWaveform_Parms;
	PauseWaveform_Parms.bPause = bPause;

	this->ProcessEvent ( pFnPauseWaveform, &PauseWaveform_Parms, NULL );
};

// Function Engine.ForceFeedbackManager.StopForceFeedbackWaveform
// [0x00024102] 
// Parameters infos:
// class UForceFeedbackWaveform*  WaveForm                       ( CPF_OptionalParm | CPF_Parm )

void UForceFeedbackManager::StopForceFeedbackWaveform ( class UForceFeedbackWaveform* WaveForm )
{
	static UFunction* pFnStopForceFeedbackWaveform = NULL;

	if ( ! pFnStopForceFeedbackWaveform )
		pFnStopForceFeedbackWaveform = (UFunction*) UObject::GObjObjects()->Data[ 20274 ];

	UForceFeedbackManager_execStopForceFeedbackWaveform_Parms StopForceFeedbackWaveform_Parms;
	StopForceFeedbackWaveform_Parms.WaveForm = WaveForm;

	this->ProcessEvent ( pFnStopForceFeedbackWaveform, &StopForceFeedbackWaveform_Parms, NULL );
};

// Function Engine.ForceFeedbackManager.PlayForceFeedbackWaveform
// [0x00020102] 
// Parameters infos:
// class UForceFeedbackWaveform*  WaveForm                       ( CPF_Parm )

void UForceFeedbackManager::PlayForceFeedbackWaveform ( class UForceFeedbackWaveform* WaveForm )
{
	static UFunction* pFnPlayForceFeedbackWaveform = NULL;

	if ( ! pFnPlayForceFeedbackWaveform )
		pFnPlayForceFeedbackWaveform = (UFunction*) UObject::GObjObjects()->Data[ 20265 ];

	UForceFeedbackManager_execPlayForceFeedbackWaveform_Parms PlayForceFeedbackWaveform_Parms;
	PlayForceFeedbackWaveform_Parms.WaveForm = WaveForm;

	this->ProcessEvent ( pFnPlayForceFeedbackWaveform, &PlayForceFeedbackWaveform_Parms, NULL );
};

// Function Engine.GameViewportClient.FilmGrainToggleMode
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  RandomEnable                   ( CPF_Parm )

void UGameViewportClient::FilmGrainToggleMode ( unsigned long RandomEnable )
{
	static UFunction* pFnFilmGrainToggleMode = NULL;

	if ( ! pFnFilmGrainToggleMode )
		pFnFilmGrainToggleMode = (UFunction*) UObject::GObjObjects()->Data[ 22408 ];

	UGameViewportClient_execFilmGrainToggleMode_Parms FilmGrainToggleMode_Parms;
	FilmGrainToggleMode_Parms.RandomEnable = RandomEnable;

	this->ProcessEvent ( pFnFilmGrainToggleMode, &FilmGrainToggleMode_Parms, NULL );
};

// Function Engine.GameViewportClient.FilmGrainSetScale
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          Scale                          ( CPF_Parm )

void UGameViewportClient::FilmGrainSetScale ( float Scale )
{
	static UFunction* pFnFilmGrainSetScale = NULL;

	if ( ! pFnFilmGrainSetScale )
		pFnFilmGrainSetScale = (UFunction*) UObject::GObjObjects()->Data[ 22404 ];

	UGameViewportClient_execFilmGrainSetScale_Parms FilmGrainSetScale_Parms;
	FilmGrainSetScale_Parms.Scale = Scale;

	this->ProcessEvent ( pFnFilmGrainSetScale, &FilmGrainSetScale_Parms, NULL );
};

// Function Engine.GameViewportClient.FilmGrainToggleNew
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  Enable                         ( CPF_Parm )

void UGameViewportClient::FilmGrainToggleNew ( unsigned long Enable )
{
	static UFunction* pFnFilmGrainToggleNew = NULL;

	if ( ! pFnFilmGrainToggleNew )
		pFnFilmGrainToggleNew = (UFunction*) UObject::GObjObjects()->Data[ 22400 ];

	UGameViewportClient_execFilmGrainToggleNew_Parms FilmGrainToggleNew_Parms;
	FilmGrainToggleNew_Parms.Enable = Enable;

	this->ProcessEvent ( pFnFilmGrainToggleNew, &FilmGrainToggleNew_Parms, NULL );
};

// Function Engine.GameViewportClient.ClearProgressMessages
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameViewportClient::ClearProgressMessages ( )
{
	static UFunction* pFnClearProgressMessages = NULL;

	if ( ! pFnClearProgressMessages )
		pFnClearProgressMessages = (UFunction*) UObject::GObjObjects()->Data[ 22398 ];

	UGameViewportClient_execClearProgressMessages_Parms ClearProgressMessages_Parms;

	this->ProcessEvent ( pFnClearProgressMessages, &ClearProgressMessages_Parms, NULL );
};

// Function Engine.GameViewportClient.SetProgressTime
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// float                          T                              ( CPF_Parm )

void UGameViewportClient::SetProgressTime ( float T )
{
	static UFunction* pFnSetProgressTime = NULL;

	if ( ! pFnSetProgressTime )
		pFnSetProgressTime = (UFunction*) UObject::GObjObjects()->Data[ 22396 ];

	UGameViewportClient_execSetProgressTime_Parms SetProgressTime_Parms;
	SetProgressTime_Parms.T = T;

	this->ProcessEvent ( pFnSetProgressTime, &SetProgressTime_Parms, NULL );
};

// Function Engine.GameViewportClient.NotifyConnectionError
// [0x00024002] 
// Parameters infos:
// struct FString                 Message                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Title                          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UGameViewportClient::NotifyConnectionError ( struct FString Message, struct FString Title )
{
	static UFunction* pFnNotifyConnectionError = NULL;

	if ( ! pFnNotifyConnectionError )
		pFnNotifyConnectionError = (UFunction*) UObject::GObjObjects()->Data[ 22392 ];

	UGameViewportClient_execNotifyConnectionError_Parms NotifyConnectionError_Parms;
	memcpy ( &NotifyConnectionError_Parms.Message, &Message, 0x10 );
	memcpy ( &NotifyConnectionError_Parms.Title, &Title, 0x10 );

	this->ProcessEvent ( pFnNotifyConnectionError, &NotifyConnectionError_Parms, NULL );
};

// Function Engine.GameViewportClient.SetProgressMessage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  MessageType                    ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Title                          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bIgnoreFutureNetworkMessages   ( CPF_OptionalParm | CPF_Parm )

void UGameViewportClient::eventSetProgressMessage ( unsigned char MessageType, struct FString Message, struct FString Title, unsigned long bIgnoreFutureNetworkMessages )
{
	static UFunction* pFnSetProgressMessage = NULL;

	if ( ! pFnSetProgressMessage )
		pFnSetProgressMessage = (UFunction*) UObject::GObjObjects()->Data[ 22387 ];

	UGameViewportClient_eventSetProgressMessage_Parms SetProgressMessage_Parms;
	SetProgressMessage_Parms.MessageType = MessageType;
	memcpy ( &SetProgressMessage_Parms.Message, &Message, 0x10 );
	memcpy ( &SetProgressMessage_Parms.Title, &Title, 0x10 );
	SetProgressMessage_Parms.bIgnoreFutureNetworkMessages = bIgnoreFutureNetworkMessages;

	this->ProcessEvent ( pFnSetProgressMessage, &SetProgressMessage_Parms, NULL );
};

// Function Engine.GameViewportClient.RemoveLocalPlayer
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            ExistingPlayer                 ( CPF_Parm )

int UGameViewportClient::RemoveLocalPlayer ( class ULocalPlayer* ExistingPlayer )
{
	static UFunction* pFnRemoveLocalPlayer = NULL;

	if ( ! pFnRemoveLocalPlayer )
		pFnRemoveLocalPlayer = (UFunction*) UObject::GObjObjects()->Data[ 22209 ];

	UGameViewportClient_execRemoveLocalPlayer_Parms RemoveLocalPlayer_Parms;
	RemoveLocalPlayer_Parms.ExistingPlayer = ExistingPlayer;

	this->ProcessEvent ( pFnRemoveLocalPlayer, &RemoveLocalPlayer_Parms, NULL );

	return RemoveLocalPlayer_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.AddLocalPlayer
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            NewPlayer                      ( CPF_Parm )

int UGameViewportClient::AddLocalPlayer ( class ULocalPlayer* NewPlayer )
{
	static UFunction* pFnAddLocalPlayer = NULL;

	if ( ! pFnAddLocalPlayer )
		pFnAddLocalPlayer = (UFunction*) UObject::GObjObjects()->Data[ 22206 ];

	UGameViewportClient_execAddLocalPlayer_Parms AddLocalPlayer_Parms;
	AddLocalPlayer_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnAddLocalPlayer, &AddLocalPlayer_Parms, NULL );

	return AddLocalPlayer_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.NotifyPlayerRemoved
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            RemovedPlayer                  ( CPF_Parm )

void UGameViewportClient::NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer )
{
	static UFunction* pFnNotifyPlayerRemoved = NULL;

	if ( ! pFnNotifyPlayerRemoved )
		pFnNotifyPlayerRemoved = (UFunction*) UObject::GObjObjects()->Data[ 22214 ];

	UGameViewportClient_execNotifyPlayerRemoved_Parms NotifyPlayerRemoved_Parms;
	NotifyPlayerRemoved_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerRemoved_Parms.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Parms, NULL );
};

// Function Engine.GameViewportClient.NotifyPlayerAdded
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            AddedPlayer                    ( CPF_Parm )

void UGameViewportClient::NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer )
{
	static UFunction* pFnNotifyPlayerAdded = NULL;

	if ( ! pFnNotifyPlayerAdded )
		pFnNotifyPlayerAdded = (UFunction*) UObject::GObjObjects()->Data[ 22211 ];

	UGameViewportClient_execNotifyPlayerAdded_Parms NotifyPlayerAdded_Parms;
	NotifyPlayerAdded_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerAdded_Parms.AddedPlayer = AddedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerAdded, &NotifyPlayerAdded_Parms, NULL );
};

// Function Engine.GameViewportClient.DrawTransitionMessage
// [0x00020002] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void UGameViewportClient::DrawTransitionMessage ( class UCanvas* Canvas, struct FString Message )
{
	static UFunction* pFnDrawTransitionMessage = NULL;

	if ( ! pFnDrawTransitionMessage )
		pFnDrawTransitionMessage = (UFunction*) UObject::GObjObjects()->Data[ 22370 ];

	UGameViewportClient_execDrawTransitionMessage_Parms DrawTransitionMessage_Parms;
	DrawTransitionMessage_Parms.Canvas = Canvas;
	memcpy ( &DrawTransitionMessage_Parms.Message, &Message, 0x10 );

	this->ProcessEvent ( pFnDrawTransitionMessage, &DrawTransitionMessage_Parms, NULL );
};

// Function Engine.GameViewportClient.DrawTransitionScreen
// [0x00020002] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// class UTexture2D*              oTexture                       ( CPF_Parm )

void UGameViewportClient::DrawTransitionScreen ( class UCanvas* Canvas, class UTexture2D* oTexture )
{
	static UFunction* pFnDrawTransitionScreen = NULL;

	if ( ! pFnDrawTransitionScreen )
		pFnDrawTransitionScreen = (UFunction*) UObject::GObjObjects()->Data[ 22367 ];

	UGameViewportClient_execDrawTransitionScreen_Parms DrawTransitionScreen_Parms;
	DrawTransitionScreen_Parms.Canvas = Canvas;
	DrawTransitionScreen_Parms.oTexture = oTexture;

	this->ProcessEvent ( pFnDrawTransitionScreen, &DrawTransitionScreen_Parms, NULL );
};

// Function Engine.GameViewportClient.DrawTransition
// [0x00020002] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UGameViewportClient::DrawTransition ( class UCanvas* Canvas )
{
	static UFunction* pFnDrawTransition = NULL;

	if ( ! pFnDrawTransition )
		pFnDrawTransition = (UFunction*) UObject::GObjObjects()->Data[ 22361 ];

	UGameViewportClient_execDrawTransition_Parms DrawTransition_Parms;
	DrawTransition_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnDrawTransition, &DrawTransition_Parms, NULL );
};

// Function Engine.GameViewportClient.DisplayProgressMessage
// [0x00020002] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UGameViewportClient::DisplayProgressMessage ( class UCanvas* Canvas )
{
	static UFunction* pFnDisplayProgressMessage = NULL;

	if ( ! pFnDisplayProgressMessage )
		pFnDisplayProgressMessage = (UFunction*) UObject::GObjObjects()->Data[ 22349 ];

	UGameViewportClient_execDisplayProgressMessage_Parms DisplayProgressMessage_Parms;
	DisplayProgressMessage_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnDisplayProgressMessage, &DisplayProgressMessage_Parms, NULL );
};

// Function Engine.GameViewportClient.PostRender
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UGameViewportClient::eventPostRender ( class UCanvas* Canvas )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = (UFunction*) UObject::GObjObjects()->Data[ 22346 ];

	UGameViewportClient_eventPostRender_Parms PostRender_Parms;
	PostRender_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );
};

// Function Engine.GameViewportClient.DrawTitleSafeArea
// [0x00020002] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UGameViewportClient::DrawTitleSafeArea ( class UCanvas* Canvas )
{
	static UFunction* pFnDrawTitleSafeArea = NULL;

	if ( ! pFnDrawTitleSafeArea )
		pFnDrawTitleSafeArea = (UFunction*) UObject::GObjObjects()->Data[ 22344 ];

	UGameViewportClient_execDrawTitleSafeArea_Parms DrawTitleSafeArea_Parms;
	DrawTitleSafeArea_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnDrawTitleSafeArea, &DrawTitleSafeArea_Parms, NULL );
};

// Function Engine.GameViewportClient.Tick
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UGameViewportClient::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 22342 ];

	UGameViewportClient_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.GameViewportClient.CalculatePixelCenter
// [0x00424003] ( FUNC_Final )
// Parameters infos:
// class ULocalPlayer*            LPlayer                        ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// unsigned long                  bUseMaxPercent                 ( CPF_OptionalParm | CPF_Parm )
// float                          out_CenterX                    ( CPF_Parm | CPF_OutParm )
// float                          out_CenterY                    ( CPF_Parm | CPF_OutParm )

void UGameViewportClient::CalculatePixelCenter ( class ULocalPlayer* LPlayer, class UCanvas* Canvas, unsigned long bUseMaxPercent, float* out_CenterX, float* out_CenterY )
{
	static UFunction* pFnCalculatePixelCenter = NULL;

	if ( ! pFnCalculatePixelCenter )
		pFnCalculatePixelCenter = (UFunction*) UObject::GObjObjects()->Data[ 22333 ];

	UGameViewportClient_execCalculatePixelCenter_Parms CalculatePixelCenter_Parms;
	CalculatePixelCenter_Parms.LPlayer = LPlayer;
	CalculatePixelCenter_Parms.Canvas = Canvas;
	CalculatePixelCenter_Parms.bUseMaxPercent = bUseMaxPercent;

	this->ProcessEvent ( pFnCalculatePixelCenter, &CalculatePixelCenter_Parms, NULL );

	if ( out_CenterX )
		*out_CenterX = CalculatePixelCenter_Parms.out_CenterX;

	if ( out_CenterY )
		*out_CenterY = CalculatePixelCenter_Parms.out_CenterY;
};

// Function Engine.GameViewportClient.CalculateDeadZoneForAllSides
// [0x00424003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            LPlayer                        ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// unsigned long                  bUseMaxPercent                 ( CPF_OptionalParm | CPF_Parm )
// float                          fTopSafeZone                   ( CPF_Parm | CPF_OutParm )
// float                          fBottomSafeZone                ( CPF_Parm | CPF_OutParm )
// float                          fLeftSafeZone                  ( CPF_Parm | CPF_OutParm )
// float                          fRightSafeZone                 ( CPF_Parm | CPF_OutParm )

bool UGameViewportClient::CalculateDeadZoneForAllSides ( class ULocalPlayer* LPlayer, class UCanvas* Canvas, unsigned long bUseMaxPercent, float* fTopSafeZone, float* fBottomSafeZone, float* fLeftSafeZone, float* fRightSafeZone )
{
	static UFunction* pFnCalculateDeadZoneForAllSides = NULL;

	if ( ! pFnCalculateDeadZoneForAllSides )
		pFnCalculateDeadZoneForAllSides = (UFunction*) UObject::GObjObjects()->Data[ 22317 ];

	UGameViewportClient_execCalculateDeadZoneForAllSides_Parms CalculateDeadZoneForAllSides_Parms;
	CalculateDeadZoneForAllSides_Parms.LPlayer = LPlayer;
	CalculateDeadZoneForAllSides_Parms.Canvas = Canvas;
	CalculateDeadZoneForAllSides_Parms.bUseMaxPercent = bUseMaxPercent;

	this->ProcessEvent ( pFnCalculateDeadZoneForAllSides, &CalculateDeadZoneForAllSides_Parms, NULL );

	if ( fTopSafeZone )
		*fTopSafeZone = CalculateDeadZoneForAllSides_Parms.fTopSafeZone;

	if ( fBottomSafeZone )
		*fBottomSafeZone = CalculateDeadZoneForAllSides_Parms.fBottomSafeZone;

	if ( fLeftSafeZone )
		*fLeftSafeZone = CalculateDeadZoneForAllSides_Parms.fLeftSafeZone;

	if ( fRightSafeZone )
		*fRightSafeZone = CalculateDeadZoneForAllSides_Parms.fRightSafeZone;

	return CalculateDeadZoneForAllSides_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.CalculateDeadZone
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            LPlayer                        ( CPF_Parm )
// unsigned char                  SZType                         ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// unsigned long                  bUseMaxPercent                 ( CPF_OptionalParm | CPF_Parm )

float UGameViewportClient::CalculateDeadZone ( class ULocalPlayer* LPlayer, unsigned char SZType, class UCanvas* Canvas, unsigned long bUseMaxPercent )
{
	static UFunction* pFnCalculateDeadZone = NULL;

	if ( ! pFnCalculateDeadZone )
		pFnCalculateDeadZone = (UFunction*) UObject::GObjObjects()->Data[ 22307 ];

	UGameViewportClient_execCalculateDeadZone_Parms CalculateDeadZone_Parms;
	CalculateDeadZone_Parms.LPlayer = LPlayer;
	CalculateDeadZone_Parms.SZType = SZType;
	CalculateDeadZone_Parms.Canvas = Canvas;
	CalculateDeadZone_Parms.bUseMaxPercent = bUseMaxPercent;

	this->ProcessEvent ( pFnCalculateDeadZone, &CalculateDeadZone_Parms, NULL );

	return CalculateDeadZone_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.CalculateSafeZoneValues
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// int                            LocalPlayerIndex               ( CPF_Parm )
// unsigned long                  bUseMaxPercent                 ( CPF_Parm )
// float                          out_Horizontal                 ( CPF_Parm | CPF_OutParm )
// float                          out_Vertical                   ( CPF_Parm | CPF_OutParm )

void UGameViewportClient::CalculateSafeZoneValues ( class UCanvas* Canvas, int LocalPlayerIndex, unsigned long bUseMaxPercent, float* out_Horizontal, float* out_Vertical )
{
	static UFunction* pFnCalculateSafeZoneValues = NULL;

	if ( ! pFnCalculateSafeZoneValues )
		pFnCalculateSafeZoneValues = (UFunction*) UObject::GObjObjects()->Data[ 22296 ];

	UGameViewportClient_execCalculateSafeZoneValues_Parms CalculateSafeZoneValues_Parms;
	CalculateSafeZoneValues_Parms.Canvas = Canvas;
	CalculateSafeZoneValues_Parms.LocalPlayerIndex = LocalPlayerIndex;
	CalculateSafeZoneValues_Parms.bUseMaxPercent = bUseMaxPercent;

	this->ProcessEvent ( pFnCalculateSafeZoneValues, &CalculateSafeZoneValues_Parms, NULL );

	if ( out_Horizontal )
		*out_Horizontal = CalculateSafeZoneValues_Parms.out_Horizontal;

	if ( out_Vertical )
		*out_Vertical = CalculateSafeZoneValues_Parms.out_Vertical;
};

// Function Engine.GameViewportClient.GetPixelSizeOfScreen
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// int                            LocalPlayerIndex               ( CPF_Parm )
// float                          out_Width                      ( CPF_Parm | CPF_OutParm )
// float                          out_Height                     ( CPF_Parm | CPF_OutParm )

void UGameViewportClient::GetPixelSizeOfScreen ( class UCanvas* Canvas, int LocalPlayerIndex, float* out_Width, float* out_Height )
{
	static UFunction* pFnGetPixelSizeOfScreen = NULL;

	if ( ! pFnGetPixelSizeOfScreen )
		pFnGetPixelSizeOfScreen = (UFunction*) UObject::GObjObjects()->Data[ 22291 ];

	UGameViewportClient_execGetPixelSizeOfScreen_Parms GetPixelSizeOfScreen_Parms;
	GetPixelSizeOfScreen_Parms.Canvas = Canvas;
	GetPixelSizeOfScreen_Parms.LocalPlayerIndex = LocalPlayerIndex;

	this->ProcessEvent ( pFnGetPixelSizeOfScreen, &GetPixelSizeOfScreen_Parms, NULL );

	if ( out_Width )
		*out_Width = GetPixelSizeOfScreen_Parms.out_Width;

	if ( out_Height )
		*out_Height = GetPixelSizeOfScreen_Parms.out_Height;
};

// Function Engine.GameViewportClient.HasRightSafeZone
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LocalPlayerIndex               ( CPF_Parm )

bool UGameViewportClient::HasRightSafeZone ( int LocalPlayerIndex )
{
	static UFunction* pFnHasRightSafeZone = NULL;

	if ( ! pFnHasRightSafeZone )
		pFnHasRightSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 22288 ];

	UGameViewportClient_execHasRightSafeZone_Parms HasRightSafeZone_Parms;
	HasRightSafeZone_Parms.LocalPlayerIndex = LocalPlayerIndex;

	this->ProcessEvent ( pFnHasRightSafeZone, &HasRightSafeZone_Parms, NULL );

	return HasRightSafeZone_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HasLeftSafeZone
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LocalPlayerIndex               ( CPF_Parm )

bool UGameViewportClient::HasLeftSafeZone ( int LocalPlayerIndex )
{
	static UFunction* pFnHasLeftSafeZone = NULL;

	if ( ! pFnHasLeftSafeZone )
		pFnHasLeftSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 22285 ];

	UGameViewportClient_execHasLeftSafeZone_Parms HasLeftSafeZone_Parms;
	HasLeftSafeZone_Parms.LocalPlayerIndex = LocalPlayerIndex;

	this->ProcessEvent ( pFnHasLeftSafeZone, &HasLeftSafeZone_Parms, NULL );

	return HasLeftSafeZone_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HasBottomSafeZone
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LocalPlayerIndex               ( CPF_Parm )

bool UGameViewportClient::HasBottomSafeZone ( int LocalPlayerIndex )
{
	static UFunction* pFnHasBottomSafeZone = NULL;

	if ( ! pFnHasBottomSafeZone )
		pFnHasBottomSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 22282 ];

	UGameViewportClient_execHasBottomSafeZone_Parms HasBottomSafeZone_Parms;
	HasBottomSafeZone_Parms.LocalPlayerIndex = LocalPlayerIndex;

	this->ProcessEvent ( pFnHasBottomSafeZone, &HasBottomSafeZone_Parms, NULL );

	return HasBottomSafeZone_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HasTopSafeZone
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LocalPlayerIndex               ( CPF_Parm )

bool UGameViewportClient::HasTopSafeZone ( int LocalPlayerIndex )
{
	static UFunction* pFnHasTopSafeZone = NULL;

	if ( ! pFnHasTopSafeZone )
		pFnHasTopSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 22279 ];

	UGameViewportClient_execHasTopSafeZone_Parms HasTopSafeZone_Parms;
	HasTopSafeZone_Parms.LocalPlayerIndex = LocalPlayerIndex;

	this->ProcessEvent ( pFnHasTopSafeZone, &HasTopSafeZone_Parms, NULL );

	return HasTopSafeZone_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.ConvertLocalPlayerToGamePlayerIndex
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            LPlayer                        ( CPF_Parm )

int UGameViewportClient::ConvertLocalPlayerToGamePlayerIndex ( class ULocalPlayer* LPlayer )
{
	static UFunction* pFnConvertLocalPlayerToGamePlayerIndex = NULL;

	if ( ! pFnConvertLocalPlayerToGamePlayerIndex )
		pFnConvertLocalPlayerToGamePlayerIndex = (UFunction*) UObject::GObjObjects()->Data[ 22276 ];

	UGameViewportClient_execConvertLocalPlayerToGamePlayerIndex_Parms ConvertLocalPlayerToGamePlayerIndex_Parms;
	ConvertLocalPlayerToGamePlayerIndex_Parms.LPlayer = LPlayer;

	this->ProcessEvent ( pFnConvertLocalPlayerToGamePlayerIndex, &ConvertLocalPlayerToGamePlayerIndex_Parms, NULL );

	return ConvertLocalPlayerToGamePlayerIndex_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.GetSubtitleRegion
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FVector2D               MinPos                         ( CPF_Parm | CPF_OutParm )
// struct FVector2D               MaxPos                         ( CPF_Parm | CPF_OutParm )

void UGameViewportClient::eventGetSubtitleRegion ( struct FVector2D* MinPos, struct FVector2D* MaxPos )
{
	static UFunction* pFnGetSubtitleRegion = NULL;

	if ( ! pFnGetSubtitleRegion )
		pFnGetSubtitleRegion = (UFunction*) UObject::GObjObjects()->Data[ 22273 ];

	UGameViewportClient_eventGetSubtitleRegion_Parms GetSubtitleRegion_Parms;

	this->ProcessEvent ( pFnGetSubtitleRegion, &GetSubtitleRegion_Parms, NULL );

	if ( MinPos )
		memcpy ( MinPos, &GetSubtitleRegion_Parms.MinPos, 0x8 );

	if ( MaxPos )
		memcpy ( MaxPos, &GetSubtitleRegion_Parms.MaxPos, 0x8 );
};

// Function Engine.GameViewportClient.LayoutPlayers
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UGameViewportClient::eventLayoutPlayers ( )
{
	static UFunction* pFnLayoutPlayers = NULL;

	if ( ! pFnLayoutPlayers )
		pFnLayoutPlayers = (UFunction*) UObject::GObjObjects()->Data[ 22268 ];

	UGameViewportClient_eventLayoutPlayers_Parms LayoutPlayers_Parms;

	this->ProcessEvent ( pFnLayoutPlayers, &LayoutPlayers_Parms, NULL );
};

// Function Engine.GameViewportClient.UpdateActiveSplitscreenType
// [0x00020002] 
// Parameters infos:

void UGameViewportClient::UpdateActiveSplitscreenType ( )
{
	static UFunction* pFnUpdateActiveSplitscreenType = NULL;

	if ( ! pFnUpdateActiveSplitscreenType )
		pFnUpdateActiveSplitscreenType = (UFunction*) UObject::GObjObjects()->Data[ 22264 ];

	UGameViewportClient_execUpdateActiveSplitscreenType_Parms UpdateActiveSplitscreenType_Parms;

	this->ProcessEvent ( pFnUpdateActiveSplitscreenType, &UpdateActiveSplitscreenType_Parms, NULL );
};

// Function Engine.GameViewportClient.GetSplitscreenConfiguration
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UGameViewportClient::GetSplitscreenConfiguration ( )
{
	static UFunction* pFnGetSplitscreenConfiguration = NULL;

	if ( ! pFnGetSplitscreenConfiguration )
		pFnGetSplitscreenConfiguration = (UFunction*) UObject::GObjObjects()->Data[ 22262 ];

	UGameViewportClient_execGetSplitscreenConfiguration_Parms GetSplitscreenConfiguration_Parms;

	this->ProcessEvent ( pFnGetSplitscreenConfiguration, &GetSplitscreenConfiguration_Parms, NULL );

	return GetSplitscreenConfiguration_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.SetSplitscreenConfiguration
// [0x00020002] 
// Parameters infos:
// unsigned char                  SplitType                      ( CPF_Parm )

void UGameViewportClient::SetSplitscreenConfiguration ( unsigned char SplitType )
{
	static UFunction* pFnSetSplitscreenConfiguration = NULL;

	if ( ! pFnSetSplitscreenConfiguration )
		pFnSetSplitscreenConfiguration = (UFunction*) UObject::GObjObjects()->Data[ 22260 ];

	UGameViewportClient_execSetSplitscreenConfiguration_Parms SetSplitscreenConfiguration_Parms;
	SetSplitscreenConfiguration_Parms.SplitType = SplitType;

	this->ProcessEvent ( pFnSetSplitscreenConfiguration, &SetSplitscreenConfiguration_Parms, NULL );
};

// Function Engine.GameViewportClient.GameSessionEnded
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UGameViewportClient::eventGameSessionEnded ( )
{
	static UFunction* pFnGameSessionEnded = NULL;

	if ( ! pFnGameSessionEnded )
		pFnGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 22258 ];

	UGameViewportClient_eventGameSessionEnded_Parms GameSessionEnded_Parms;

	this->ProcessEvent ( pFnGameSessionEnded, &GameSessionEnded_Parms, NULL );
};

// Function Engine.GameViewportClient.InsertInteraction
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UInteraction*            NewInteraction                 ( CPF_Parm )
// int                            InIndex                        ( CPF_OptionalParm | CPF_Parm )

int UGameViewportClient::eventInsertInteraction ( class UInteraction* NewInteraction, int InIndex )
{
	static UFunction* pFnInsertInteraction = NULL;

	if ( ! pFnInsertInteraction )
		pFnInsertInteraction = (UFunction*) UObject::GObjObjects()->Data[ 22253 ];

	UGameViewportClient_eventInsertInteraction_Parms InsertInteraction_Parms;
	InsertInteraction_Parms.NewInteraction = NewInteraction;
	InsertInteraction_Parms.InIndex = InIndex;

	this->ProcessEvent ( pFnInsertInteraction, &InsertInteraction_Parms, NULL );

	return InsertInteraction_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.CreateInitialPlayer
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UGameViewportClient::CreateInitialPlayer ( struct FString* OutError )
{
	static UFunction* pFnCreateInitialPlayer = NULL;

	if ( ! pFnCreateInitialPlayer )
		pFnCreateInitialPlayer = (UFunction*) UObject::GObjObjects()->Data[ 22247 ];

	UGameViewportClient_execCreateInitialPlayer_Parms CreateInitialPlayer_Parms;

	this->ProcessEvent ( pFnCreateInitialPlayer, &CreateInitialPlayer_Parms, NULL );

	if ( OutError )
		memcpy ( OutError, &CreateInitialPlayer_Parms.OutError, 0x10 );

	return CreateInitialPlayer_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.CreateInitialPlayerWithLauncherOverride
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UGameViewportClient::CreateInitialPlayerWithLauncherOverride ( struct FString* OutError )
{
	static UFunction* pFnCreateInitialPlayerWithLauncherOverride = NULL;

	if ( ! pFnCreateInitialPlayerWithLauncherOverride )
		pFnCreateInitialPlayerWithLauncherOverride = (UFunction*) UObject::GObjObjects()->Data[ 22244 ];

	UGameViewportClient_execCreateInitialPlayerWithLauncherOverride_Parms CreateInitialPlayerWithLauncherOverride_Parms;

	pFnCreateInitialPlayerWithLauncherOverride->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateInitialPlayerWithLauncherOverride, &CreateInitialPlayerWithLauncherOverride_Parms, NULL );

	pFnCreateInitialPlayerWithLauncherOverride->FunctionFlags |= 0x400;

	if ( OutError )
		memcpy ( OutError, &CreateInitialPlayerWithLauncherOverride_Parms.OutError, 0x10 );

	return CreateInitialPlayerWithLauncherOverride_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.Init
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UGameViewportClient::eventInit ( struct FString* OutError )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 22234 ];

	UGameViewportClient_eventInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	if ( OutError )
		memcpy ( OutError, &Init_Parms.OutError, 0x10 );

	return Init_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.SetConsoleTarget
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )

void UGameViewportClient::SetConsoleTarget ( int PlayerIndex )
{
	static UFunction* pFnSetConsoleTarget = NULL;

	if ( ! pFnSetConsoleTarget )
		pFnSetConsoleTarget = (UFunction*) UObject::GObjObjects()->Data[ 22232 ];

	UGameViewportClient_execSetConsoleTarget_Parms SetConsoleTarget_Parms;
	SetConsoleTarget_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnSetConsoleTarget, &SetConsoleTarget_Parms, NULL );
};

// Function Engine.GameViewportClient.ShowTitleSafeArea
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameViewportClient::ShowTitleSafeArea ( )
{
	static UFunction* pFnShowTitleSafeArea = NULL;

	if ( ! pFnShowTitleSafeArea )
		pFnShowTitleSafeArea = (UFunction*) UObject::GObjObjects()->Data[ 22230 ];

	UGameViewportClient_execShowTitleSafeArea_Parms ShowTitleSafeArea_Parms;

	this->ProcessEvent ( pFnShowTitleSafeArea, &ShowTitleSafeArea_Parms, NULL );
};

// Function Engine.GameViewportClient.SetSplit
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            Mode                           ( CPF_Parm )

void UGameViewportClient::SetSplit ( int Mode )
{
	static UFunction* pFnSetSplit = NULL;

	if ( ! pFnSetSplit )
		pFnSetSplit = (UFunction*) UObject::GObjObjects()->Data[ 22228 ];

	UGameViewportClient_execSetSplit_Parms SetSplit_Parms;
	SetSplit_Parms.Mode = Mode;

	this->ProcessEvent ( pFnSetSplit, &SetSplit_Parms, NULL );
};

// Function Engine.GameViewportClient.DebugRemovePlayer
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )

void UGameViewportClient::DebugRemovePlayer ( int ControllerId )
{
	static UFunction* pFnDebugRemovePlayer = NULL;

	if ( ! pFnDebugRemovePlayer )
		pFnDebugRemovePlayer = (UFunction*) UObject::GObjObjects()->Data[ 22225 ];

	UGameViewportClient_execDebugRemovePlayer_Parms DebugRemovePlayer_Parms;
	DebugRemovePlayer_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnDebugRemovePlayer, &DebugRemovePlayer_Parms, NULL );
};

// Function Engine.GameViewportClient.SSSwapControllers
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameViewportClient::SSSwapControllers ( )
{
	static UFunction* pFnSSSwapControllers = NULL;

	if ( ! pFnSSSwapControllers )
		pFnSSSwapControllers = (UFunction*) UObject::GObjObjects()->Data[ 22222 ];

	UGameViewportClient_execSSSwapControllers_Parms SSSwapControllers_Parms;

	this->ProcessEvent ( pFnSSSwapControllers, &SSSwapControllers_Parms, NULL );
};

// Function Engine.GameViewportClient.DebugCreatePlayer
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )

void UGameViewportClient::DebugCreatePlayer ( int ControllerId )
{
	static UFunction* pFnDebugCreatePlayer = NULL;

	if ( ! pFnDebugCreatePlayer )
		pFnDebugCreatePlayer = (UFunction*) UObject::GObjObjects()->Data[ 22219 ];

	UGameViewportClient_execDebugCreatePlayer_Parms DebugCreatePlayer_Parms;
	DebugCreatePlayer_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnDebugCreatePlayer, &DebugCreatePlayer_Parms, NULL );
};

// Function Engine.GameViewportClient.FindPlayerByControllerId
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

class ULocalPlayer* UGameViewportClient::eventFindPlayerByControllerId ( int ControllerId )
{
	static UFunction* pFnFindPlayerByControllerId = NULL;

	if ( ! pFnFindPlayerByControllerId )
		pFnFindPlayerByControllerId = (UFunction*) UObject::GObjObjects()->Data[ 22215 ];

	UGameViewportClient_eventFindPlayerByControllerId_Parms FindPlayerByControllerId_Parms;
	FindPlayerByControllerId_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnFindPlayerByControllerId, &FindPlayerByControllerId_Parms, NULL );

	return FindPlayerByControllerId_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.RemovePlayer
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            ExPlayer                       ( CPF_Parm )

bool UGameViewportClient::eventRemovePlayer ( class ULocalPlayer* ExPlayer )
{
	static UFunction* pFnRemovePlayer = NULL;

	if ( ! pFnRemovePlayer )
		pFnRemovePlayer = (UFunction*) UObject::GObjObjects()->Data[ 21911 ];

	UGameViewportClient_eventRemovePlayer_Parms RemovePlayer_Parms;
	RemovePlayer_Parms.ExPlayer = ExPlayer;

	this->ProcessEvent ( pFnRemovePlayer, &RemovePlayer_Parms, NULL );

	return RemovePlayer_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.CreatePlayer
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// unsigned long                  bSpawnActor                    ( CPF_Parm )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class ULocalPlayer* UGameViewportClient::eventCreatePlayer ( int ControllerId, unsigned long bSpawnActor, struct FString* OutError )
{
	static UFunction* pFnCreatePlayer = NULL;

	if ( ! pFnCreatePlayer )
		pFnCreatePlayer = (UFunction*) UObject::GObjObjects()->Data[ 21907 ];

	UGameViewportClient_eventCreatePlayer_Parms CreatePlayer_Parms;
	CreatePlayer_Parms.ControllerId = ControllerId;
	CreatePlayer_Parms.bSpawnActor = bSpawnActor;

	this->ProcessEvent ( pFnCreatePlayer, &CreatePlayer_Parms, NULL );

	if ( OutError )
		memcpy ( OutError, &CreatePlayer_Parms.OutError, 0x10 );

	return CreatePlayer_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.ShouldForceFullscreenViewport
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameViewportClient::ShouldForceFullscreenViewport ( )
{
	static UFunction* pFnShouldForceFullscreenViewport = NULL;

	if ( ! pFnShouldForceFullscreenViewport )
		pFnShouldForceFullscreenViewport = (UFunction*) UObject::GObjObjects()->Data[ 22199 ];

	UGameViewportClient_execShouldForceFullscreenViewport_Parms ShouldForceFullscreenViewport_Parms;

	pFnShouldForceFullscreenViewport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldForceFullscreenViewport, &ShouldForceFullscreenViewport_Parms, NULL );

	pFnShouldForceFullscreenViewport->FunctionFlags |= 0x400;

	return ShouldForceFullscreenViewport_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.SetLockInputToController
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  b_iValue                       ( CPF_Parm )

bool UGameViewportClient::SetLockInputToController ( unsigned long b_iValue )
{
	static UFunction* pFnSetLockInputToController = NULL;

	if ( ! pFnSetLockInputToController )
		pFnSetLockInputToController = (UFunction*) UObject::GObjObjects()->Data[ 22196 ];

	UGameViewportClient_execSetLockInputToController_Parms SetLockInputToController_Parms;
	SetLockInputToController_Parms.b_iValue = b_iValue;

	pFnSetLockInputToController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLockInputToController, &SetLockInputToController_Parms, NULL );

	pFnSetLockInputToController->FunctionFlags |= 0x400;

	return SetLockInputToController_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.GetLockInputToController
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameViewportClient::GetLockInputToController ( )
{
	static UFunction* pFnGetLockInputToController = NULL;

	if ( ! pFnGetLockInputToController )
		pFnGetLockInputToController = (UFunction*) UObject::GObjObjects()->Data[ 22194 ];

	UGameViewportClient_execGetLockInputToController_Parms GetLockInputToController_Parms;

	pFnGetLockInputToController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLockInputToController, &GetLockInputToController_Parms, NULL );

	pFnGetLockInputToController->FunctionFlags |= 0x400;

	return GetLockInputToController_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.GetUseHardwareCursor
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameViewportClient::GetUseHardwareCursor ( )
{
	static UFunction* pFnGetUseHardwareCursor = NULL;

	if ( ! pFnGetUseHardwareCursor )
		pFnGetUseHardwareCursor = (UFunction*) UObject::GObjObjects()->Data[ 22192 ];

	UGameViewportClient_execGetUseHardwareCursor_Parms GetUseHardwareCursor_Parms;

	this->ProcessEvent ( pFnGetUseHardwareCursor, &GetUseHardwareCursor_Parms, NULL );

	return GetUseHardwareCursor_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.DoUseHardwareCursor
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bUseIt                         ( CPF_Parm )

void UGameViewportClient::DoUseHardwareCursor ( unsigned long bUseIt )
{
	static UFunction* pFnDoUseHardwareCursor = NULL;

	if ( ! pFnDoUseHardwareCursor )
		pFnDoUseHardwareCursor = (UFunction*) UObject::GObjObjects()->Data[ 22190 ];

	UGameViewportClient_execDoUseHardwareCursor_Parms DoUseHardwareCursor_Parms;
	DoUseHardwareCursor_Parms.bUseIt = bUseIt;

	this->ProcessEvent ( pFnDoUseHardwareCursor, &DoUseHardwareCursor_Parms, NULL );
};

// Function Engine.GameViewportClient.UpdateCursor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UGameViewportClient::UpdateCursor ( )
{
	static UFunction* pFnUpdateCursor = NULL;

	if ( ! pFnUpdateCursor )
		pFnUpdateCursor = (UFunction*) UObject::GObjObjects()->Data[ 22189 ];

	UGameViewportClient_execUpdateCursor_Parms UpdateCursor_Parms;

	pFnUpdateCursor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCursor, &UpdateCursor_Parms, NULL );

	pFnUpdateCursor->FunctionFlags |= 0x400;
};

// Function Engine.GameViewportClient.IsFullScreenViewport
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameViewportClient::IsFullScreenViewport ( )
{
	static UFunction* pFnIsFullScreenViewport = NULL;

	if ( ! pFnIsFullScreenViewport )
		pFnIsFullScreenViewport = (UFunction*) UObject::GObjObjects()->Data[ 22187 ];

	UGameViewportClient_execIsFullScreenViewport_Parms IsFullScreenViewport_Parms;

	pFnIsFullScreenViewport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFullScreenViewport, &IsFullScreenViewport_Parms, NULL );

	pFnIsFullScreenViewport->FunctionFlags |= 0x400;

	return IsFullScreenViewport_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.GetViewportSize
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector2D               out_ViewportSize               ( CPF_Parm | CPF_OutParm )

void UGameViewportClient::GetViewportSize ( struct FVector2D* out_ViewportSize )
{
	static UFunction* pFnGetViewportSize = NULL;

	if ( ! pFnGetViewportSize )
		pFnGetViewportSize = (UFunction*) UObject::GObjObjects()->Data[ 22185 ];

	UGameViewportClient_execGetViewportSize_Parms GetViewportSize_Parms;

	pFnGetViewportSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportSize, &GetViewportSize_Parms, NULL );

	pFnGetViewportSize->FunctionFlags |= 0x400;

	if ( out_ViewportSize )
		memcpy ( out_ViewportSize, &GetViewportSize_Parms.out_ViewportSize, 0x8 );
};

// Function Engine.GameViewportClient.ConsoleCommand
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )

struct FString UGameViewportClient::ConsoleCommand ( struct FString Command )
{
	static UFunction* pFnConsoleCommand = NULL;

	if ( ! pFnConsoleCommand )
		pFnConsoleCommand = (UFunction*) UObject::GObjObjects()->Data[ 17365 ];

	UGameViewportClient_execConsoleCommand_Parms ConsoleCommand_Parms;
	memcpy ( &ConsoleCommand_Parms.Command, &Command, 0x10 );

	pFnConsoleCommand->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConsoleCommand, &ConsoleCommand_Parms, NULL );

	pFnConsoleCommand->FunctionFlags |= 0x400;

	return ConsoleCommand_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HandleInputChar
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FString                 Unicode                        ( CPF_Parm | CPF_NeedCtorLink )

bool UGameViewportClient::HandleInputChar ( int ControllerId, struct FString Unicode )
{
	static UFunction* pFnHandleInputChar = NULL;

	if ( ! pFnHandleInputChar )
		pFnHandleInputChar = (UFunction*) UObject::GObjObjects()->Data[ 22180 ];

	UGameViewportClient_execHandleInputChar_Parms HandleInputChar_Parms;
	HandleInputChar_Parms.ControllerId = ControllerId;
	memcpy ( &HandleInputChar_Parms.Unicode, &Unicode, 0x10 );

	this->ProcessEvent ( pFnHandleInputChar, &HandleInputChar_Parms, NULL );

	return HandleInputChar_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HandleInputAxis
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// float                          Delta                          ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_Parm )

bool UGameViewportClient::HandleInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad )
{
	static UFunction* pFnHandleInputAxis = NULL;

	if ( ! pFnHandleInputAxis )
		pFnHandleInputAxis = (UFunction*) UObject::GObjObjects()->Data[ 22173 ];

	UGameViewportClient_execHandleInputAxis_Parms HandleInputAxis_Parms;
	HandleInputAxis_Parms.ControllerId = ControllerId;
	memcpy ( &HandleInputAxis_Parms.Key, &Key, 0x8 );
	HandleInputAxis_Parms.Delta = Delta;
	HandleInputAxis_Parms.DeltaTime = DeltaTime;
	HandleInputAxis_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnHandleInputAxis, &HandleInputAxis_Parms, NULL );

	return HandleInputAxis_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HandleInputKey
// [0x00124000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  EventType                      ( CPF_Parm )
// float                          AmountDepressed                ( CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool UGameViewportClient::HandleInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad )
{
	static UFunction* pFnHandleInputKey = NULL;

	if ( ! pFnHandleInputKey )
		pFnHandleInputKey = (UFunction*) UObject::GObjObjects()->Data[ 22166 ];

	UGameViewportClient_execHandleInputKey_Parms HandleInputKey_Parms;
	HandleInputKey_Parms.ControllerId = ControllerId;
	memcpy ( &HandleInputKey_Parms.Key, &Key, 0x8 );
	HandleInputKey_Parms.EventType = EventType;
	HandleInputKey_Parms.AmountDepressed = AmountDepressed;
	HandleInputKey_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnHandleInputKey, &HandleInputKey_Parms, NULL );

	return HandleInputKey_Parms.ReturnValue;
};

// Function Engine.GameplayEvents.GetFilename
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UGameplayEvents::GetFilename ( )
{
	static UFunction* pFnGetFilename = NULL;

	if ( ! pFnGetFilename )
		pFnGetFilename = (UFunction*) UObject::GObjObjects()->Data[ 21458 ];

	UGameplayEvents_execGetFilename_Parms GetFilename_Parms;

	this->ProcessEvent ( pFnGetFilename, &GetFilename_Parms, NULL );

	return GetFilename_Parms.ReturnValue;
};

// Function Engine.GameplayEvents.CloseStatsFile
// [0x00020000] 
// Parameters infos:

void UGameplayEvents::CloseStatsFile ( )
{
	static UFunction* pFnCloseStatsFile = NULL;

	if ( ! pFnCloseStatsFile )
		pFnCloseStatsFile = (UFunction*) UObject::GObjObjects()->Data[ 21457 ];

	UGameplayEvents_execCloseStatsFile_Parms CloseStatsFile_Parms;

	this->ProcessEvent ( pFnCloseStatsFile, &CloseStatsFile_Parms, NULL );
};

// Function Engine.GameplayEvents.OpenStatsFile
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

bool UGameplayEvents::OpenStatsFile ( struct FString Filename )
{
	static UFunction* pFnOpenStatsFile = NULL;

	if ( ! pFnOpenStatsFile )
		pFnOpenStatsFile = (UFunction*) UObject::GObjObjects()->Data[ 21454 ];

	UGameplayEvents_execOpenStatsFile_Parms OpenStatsFile_Parms;
	memcpy ( &OpenStatsFile_Parms.Filename, &Filename, 0x10 );

	this->ProcessEvent ( pFnOpenStatsFile, &OpenStatsFile_Parms, NULL );

	return OpenStatsFile_Parms.ReturnValue;
};

// Function Engine.GameplayEventsReader.GetSessionDuration
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UGameplayEventsReader::GetSessionDuration ( )
{
	static UFunction* pFnGetSessionDuration = NULL;

	if ( ! pFnGetSessionDuration )
		pFnGetSessionDuration = (UFunction*) UObject::GObjObjects()->Data[ 21492 ];

	UGameplayEventsReader_execGetSessionDuration_Parms GetSessionDuration_Parms;

	pFnGetSessionDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSessionDuration, &GetSessionDuration_Parms, NULL );

	pFnGetSessionDuration->FunctionFlags |= 0x400;

	return GetSessionDuration_Parms.ReturnValue;
};

// Function Engine.GameplayEventsReader.GetSessionEnd
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UGameplayEventsReader::GetSessionEnd ( )
{
	static UFunction* pFnGetSessionEnd = NULL;

	if ( ! pFnGetSessionEnd )
		pFnGetSessionEnd = (UFunction*) UObject::GObjObjects()->Data[ 21490 ];

	UGameplayEventsReader_execGetSessionEnd_Parms GetSessionEnd_Parms;

	pFnGetSessionEnd->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSessionEnd, &GetSessionEnd_Parms, NULL );

	pFnGetSessionEnd->FunctionFlags |= 0x400;

	return GetSessionEnd_Parms.ReturnValue;
};

// Function Engine.GameplayEventsReader.GetSessionStart
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UGameplayEventsReader::GetSessionStart ( )
{
	static UFunction* pFnGetSessionStart = NULL;

	if ( ! pFnGetSessionStart )
		pFnGetSessionStart = (UFunction*) UObject::GObjObjects()->Data[ 21488 ];

	UGameplayEventsReader_execGetSessionStart_Parms GetSessionStart_Parms;

	pFnGetSessionStart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSessionStart, &GetSessionStart_Parms, NULL );

	pFnGetSessionStart->FunctionFlags |= 0x400;

	return GetSessionStart_Parms.ReturnValue;
};

// Function Engine.GameplayEventsReader.GetSessionTimestamp
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UGameplayEventsReader::GetSessionTimestamp ( )
{
	static UFunction* pFnGetSessionTimestamp = NULL;

	if ( ! pFnGetSessionTimestamp )
		pFnGetSessionTimestamp = (UFunction*) UObject::GObjObjects()->Data[ 21486 ];

	UGameplayEventsReader_execGetSessionTimestamp_Parms GetSessionTimestamp_Parms;

	pFnGetSessionTimestamp->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSessionTimestamp, &GetSessionTimestamp_Parms, NULL );

	pFnGetSessionTimestamp->FunctionFlags |= 0x400;

	return GetSessionTimestamp_Parms.ReturnValue;
};

// Function Engine.GameplayEventsReader.GetPlatform
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UGameplayEventsReader::GetPlatform ( )
{
	static UFunction* pFnGetPlatform = NULL;

	if ( ! pFnGetPlatform )
		pFnGetPlatform = (UFunction*) UObject::GObjObjects()->Data[ 21484 ];

	UGameplayEventsReader_execGetPlatform_Parms GetPlatform_Parms;

	pFnGetPlatform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlatform, &GetPlatform_Parms, NULL );

	pFnGetPlatform->FunctionFlags |= 0x400;

	return GetPlatform_Parms.ReturnValue;
};

// Function Engine.GameplayEventsReader.GetTitleID
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UGameplayEventsReader::GetTitleID ( )
{
	static UFunction* pFnGetTitleID = NULL;

	if ( ! pFnGetTitleID )
		pFnGetTitleID = (UFunction*) UObject::GObjObjects()->Data[ 21482 ];

	UGameplayEventsReader_execGetTitleID_Parms GetTitleID_Parms;

	pFnGetTitleID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTitleID, &GetTitleID_Parms, NULL );

	pFnGetTitleID->FunctionFlags |= 0x400;

	return GetTitleID_Parms.ReturnValue;
};

// Function Engine.GameplayEventsReader.GetSessionID
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UGameplayEventsReader::GetSessionID ( )
{
	static UFunction* pFnGetSessionID = NULL;

	if ( ! pFnGetSessionID )
		pFnGetSessionID = (UFunction*) UObject::GObjObjects()->Data[ 21480 ];

	UGameplayEventsReader_execGetSessionID_Parms GetSessionID_Parms;

	pFnGetSessionID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSessionID, &GetSessionID_Parms, NULL );

	pFnGetSessionID->FunctionFlags |= 0x400;

	return GetSessionID_Parms.ReturnValue;
};

// Function Engine.GameplayEventsReader.IsEventFiltered
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            EventID                        ( CPF_Parm )

bool UGameplayEventsReader::eventIsEventFiltered ( int EventID )
{
	static UFunction* pFnIsEventFiltered = NULL;

	if ( ! pFnIsEventFiltered )
		pFnIsEventFiltered = (UFunction*) UObject::GObjObjects()->Data[ 21477 ];

	UGameplayEventsReader_eventIsEventFiltered_Parms IsEventFiltered_Parms;
	IsEventFiltered_Parms.EventID = EventID;

	this->ProcessEvent ( pFnIsEventFiltered, &IsEventFiltered_Parms, NULL );

	return IsEventFiltered_Parms.ReturnValue;
};

// Function Engine.GameplayEventsReader.RemoveFilter
// [0x00020002] 
// Parameters infos:
// int                            EventID                        ( CPF_Parm )

void UGameplayEventsReader::RemoveFilter ( int EventID )
{
	static UFunction* pFnRemoveFilter = NULL;

	if ( ! pFnRemoveFilter )
		pFnRemoveFilter = (UFunction*) UObject::GObjObjects()->Data[ 21475 ];

	UGameplayEventsReader_execRemoveFilter_Parms RemoveFilter_Parms;
	RemoveFilter_Parms.EventID = EventID;

	this->ProcessEvent ( pFnRemoveFilter, &RemoveFilter_Parms, NULL );
};

// Function Engine.GameplayEventsReader.AddFilter
// [0x00020002] 
// Parameters infos:
// int                            EventID                        ( CPF_Parm )

void UGameplayEventsReader::AddFilter ( int EventID )
{
	static UFunction* pFnAddFilter = NULL;

	if ( ! pFnAddFilter )
		pFnAddFilter = (UFunction*) UObject::GObjObjects()->Data[ 21473 ];

	UGameplayEventsReader_execAddFilter_Parms AddFilter_Parms;
	AddFilter_Parms.EventID = EventID;

	this->ProcessEvent ( pFnAddFilter, &AddFilter_Parms, NULL );
};

// Function Engine.GameplayEventsReader.ProcessStream
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UGameplayEventsReader::ProcessStream ( )
{
	static UFunction* pFnProcessStream = NULL;

	if ( ! pFnProcessStream )
		pFnProcessStream = (UFunction*) UObject::GObjObjects()->Data[ 21472 ];

	UGameplayEventsReader_execProcessStream_Parms ProcessStream_Parms;

	pFnProcessStream->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProcessStream, &ProcessStream_Parms, NULL );

	pFnProcessStream->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsReader.SerializeHeader
// [0x00080400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameplayEventsReader::SerializeHeader ( )
{
	static UFunction* pFnSerializeHeader = NULL;

	if ( ! pFnSerializeHeader )
		pFnSerializeHeader = (UFunction*) UObject::GObjObjects()->Data[ 21470 ];

	UGameplayEventsReader_execSerializeHeader_Parms SerializeHeader_Parms;

	pFnSerializeHeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSerializeHeader, &SerializeHeader_Parms, NULL );

	pFnSerializeHeader->FunctionFlags |= 0x400;

	return SerializeHeader_Parms.ReturnValue;
};

// Function Engine.GameplayEventsReader.CloseStatsFile
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UGameplayEventsReader::CloseStatsFile ( )
{
	static UFunction* pFnCloseStatsFile = NULL;

	if ( ! pFnCloseStatsFile )
		pFnCloseStatsFile = (UFunction*) UObject::GObjObjects()->Data[ 21469 ];

	UGameplayEventsReader_execCloseStatsFile_Parms CloseStatsFile_Parms;

	pFnCloseStatsFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCloseStatsFile, &CloseStatsFile_Parms, NULL );

	pFnCloseStatsFile->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsReader.OpenStatsFile
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

bool UGameplayEventsReader::OpenStatsFile ( struct FString Filename )
{
	static UFunction* pFnOpenStatsFile = NULL;

	if ( ! pFnOpenStatsFile )
		pFnOpenStatsFile = (UFunction*) UObject::GObjObjects()->Data[ 21466 ];

	UGameplayEventsReader_execOpenStatsFile_Parms OpenStatsFile_Parms;
	memcpy ( &OpenStatsFile_Parms.Filename, &Filename, 0x10 );

	pFnOpenStatsFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpenStatsFile, &OpenStatsFile_Parms, NULL );

	pFnOpenStatsFile->FunctionFlags |= 0x400;

	return OpenStatsFile_Parms.ReturnValue;
};

// Function Engine.GameplayEventsWriter.LogSystemPollEvents
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UGameplayEventsWriter::LogSystemPollEvents ( )
{
	static UFunction* pFnLogSystemPollEvents = NULL;

	if ( ! pFnLogSystemPollEvents )
		pFnLogSystemPollEvents = (UFunction*) UObject::GObjObjects()->Data[ 21601 ];

	UGameplayEventsWriter_execLogSystemPollEvents_Parms LogSystemPollEvents_Parms;

	pFnLogSystemPollEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogSystemPollEvents, &LogSystemPollEvents_Parms, NULL );

	pFnLogSystemPollEvents->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogProjectileIntEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// class UClass*                  Proj                           ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UGameplayEventsWriter::LogProjectileIntEvent ( int EventID, class AController* Player, class UClass* Proj, int Value )
{
	static UFunction* pFnLogProjectileIntEvent = NULL;

	if ( ! pFnLogProjectileIntEvent )
		pFnLogProjectileIntEvent = (UFunction*) UObject::GObjObjects()->Data[ 21596 ];

	UGameplayEventsWriter_execLogProjectileIntEvent_Parms LogProjectileIntEvent_Parms;
	LogProjectileIntEvent_Parms.EventID = EventID;
	LogProjectileIntEvent_Parms.Player = Player;
	LogProjectileIntEvent_Parms.Proj = Proj;
	LogProjectileIntEvent_Parms.Value = Value;

	pFnLogProjectileIntEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogProjectileIntEvent, &LogProjectileIntEvent_Parms, NULL );

	pFnLogProjectileIntEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogDamageEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// class UClass*                  dmgType                        ( CPF_Parm )
// class AController*             Target                         ( CPF_Parm )
// int                            Amount                         ( CPF_Parm )

void UGameplayEventsWriter::LogDamageEvent ( int EventID, class AController* Player, class UClass* dmgType, class AController* Target, int Amount )
{
	static UFunction* pFnLogDamageEvent = NULL;

	if ( ! pFnLogDamageEvent )
		pFnLogDamageEvent = (UFunction*) UObject::GObjObjects()->Data[ 21590 ];

	UGameplayEventsWriter_execLogDamageEvent_Parms LogDamageEvent_Parms;
	LogDamageEvent_Parms.EventID = EventID;
	LogDamageEvent_Parms.Player = Player;
	LogDamageEvent_Parms.dmgType = dmgType;
	LogDamageEvent_Parms.Target = Target;
	LogDamageEvent_Parms.Amount = Amount;

	pFnLogDamageEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogDamageEvent, &LogDamageEvent_Parms, NULL );

	pFnLogDamageEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogWeaponIntEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// class UClass*                  WeaponClass                    ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UGameplayEventsWriter::LogWeaponIntEvent ( int EventID, class AController* Player, class UClass* WeaponClass, int Value )
{
	static UFunction* pFnLogWeaponIntEvent = NULL;

	if ( ! pFnLogWeaponIntEvent )
		pFnLogWeaponIntEvent = (UFunction*) UObject::GObjObjects()->Data[ 21585 ];

	UGameplayEventsWriter_execLogWeaponIntEvent_Parms LogWeaponIntEvent_Parms;
	LogWeaponIntEvent_Parms.EventID = EventID;
	LogWeaponIntEvent_Parms.Player = Player;
	LogWeaponIntEvent_Parms.WeaponClass = WeaponClass;
	LogWeaponIntEvent_Parms.Value = Value;

	pFnLogWeaponIntEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogWeaponIntEvent, &LogWeaponIntEvent_Parms, NULL );

	pFnLogWeaponIntEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogPlayerPlayerEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// class AController*             Target                         ( CPF_Parm )

void UGameplayEventsWriter::LogPlayerPlayerEvent ( int EventID, class AController* Player, class AController* Target )
{
	static UFunction* pFnLogPlayerPlayerEvent = NULL;

	if ( ! pFnLogPlayerPlayerEvent )
		pFnLogPlayerPlayerEvent = (UFunction*) UObject::GObjObjects()->Data[ 21581 ];

	UGameplayEventsWriter_execLogPlayerPlayerEvent_Parms LogPlayerPlayerEvent_Parms;
	LogPlayerPlayerEvent_Parms.EventID = EventID;
	LogPlayerPlayerEvent_Parms.Player = Player;
	LogPlayerPlayerEvent_Parms.Target = Target;

	pFnLogPlayerPlayerEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlayerPlayerEvent, &LogPlayerPlayerEvent_Parms, NULL );

	pFnLogPlayerPlayerEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogPlayerKillDeath
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// int                            KillType                       ( CPF_Parm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  dmgType                        ( CPF_Parm )
// class AController*             Dead                           ( CPF_Parm )

void UGameplayEventsWriter::LogPlayerKillDeath ( int EventID, int KillType, class AController* Killer, class UClass* dmgType, class AController* Dead )
{
	static UFunction* pFnLogPlayerKillDeath = NULL;

	if ( ! pFnLogPlayerKillDeath )
		pFnLogPlayerKillDeath = (UFunction*) UObject::GObjObjects()->Data[ 21575 ];

	UGameplayEventsWriter_execLogPlayerKillDeath_Parms LogPlayerKillDeath_Parms;
	LogPlayerKillDeath_Parms.EventID = EventID;
	LogPlayerKillDeath_Parms.KillType = KillType;
	LogPlayerKillDeath_Parms.Killer = Killer;
	LogPlayerKillDeath_Parms.dmgType = dmgType;
	LogPlayerKillDeath_Parms.Dead = Dead;

	pFnLogPlayerKillDeath->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlayerKillDeath, &LogPlayerKillDeath_Parms, NULL );

	pFnLogPlayerKillDeath->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogAllPlayerPositionsEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )

void UGameplayEventsWriter::LogAllPlayerPositionsEvent ( int EventID )
{
	static UFunction* pFnLogAllPlayerPositionsEvent = NULL;

	if ( ! pFnLogAllPlayerPositionsEvent )
		pFnLogAllPlayerPositionsEvent = (UFunction*) UObject::GObjObjects()->Data[ 21573 ];

	UGameplayEventsWriter_execLogAllPlayerPositionsEvent_Parms LogAllPlayerPositionsEvent_Parms;
	LogAllPlayerPositionsEvent_Parms.EventID = EventID;

	pFnLogAllPlayerPositionsEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogAllPlayerPositionsEvent, &LogAllPlayerPositionsEvent_Parms, NULL );

	pFnLogAllPlayerPositionsEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogPlayerLoginChange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// unsigned long                  bSplitScreen                   ( CPF_Parm )

void UGameplayEventsWriter::LogPlayerLoginChange ( int EventID, class AController* Player, struct FString PlayerName, struct FUniqueNetId PlayerID, unsigned long bSplitScreen )
{
	static UFunction* pFnLogPlayerLoginChange = NULL;

	if ( ! pFnLogPlayerLoginChange )
		pFnLogPlayerLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 21567 ];

	UGameplayEventsWriter_execLogPlayerLoginChange_Parms LogPlayerLoginChange_Parms;
	LogPlayerLoginChange_Parms.EventID = EventID;
	LogPlayerLoginChange_Parms.Player = Player;
	memcpy ( &LogPlayerLoginChange_Parms.PlayerName, &PlayerName, 0x10 );
	memcpy ( &LogPlayerLoginChange_Parms.PlayerID, &PlayerID, 0x8 );
	LogPlayerLoginChange_Parms.bSplitScreen = bSplitScreen;

	pFnLogPlayerLoginChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlayerLoginChange, &LogPlayerLoginChange_Parms, NULL );

	pFnLogPlayerLoginChange->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogPlayerSpawnEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// class UClass*                  PawnClass                      ( CPF_Parm )
// int                            TeamID                         ( CPF_Parm )

void UGameplayEventsWriter::LogPlayerSpawnEvent ( int EventID, class AController* Player, class UClass* PawnClass, int TeamID )
{
	static UFunction* pFnLogPlayerSpawnEvent = NULL;

	if ( ! pFnLogPlayerSpawnEvent )
		pFnLogPlayerSpawnEvent = (UFunction*) UObject::GObjObjects()->Data[ 21562 ];

	UGameplayEventsWriter_execLogPlayerSpawnEvent_Parms LogPlayerSpawnEvent_Parms;
	LogPlayerSpawnEvent_Parms.EventID = EventID;
	LogPlayerSpawnEvent_Parms.Player = Player;
	LogPlayerSpawnEvent_Parms.PawnClass = PawnClass;
	LogPlayerSpawnEvent_Parms.TeamID = TeamID;

	pFnLogPlayerSpawnEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlayerSpawnEvent, &LogPlayerSpawnEvent_Parms, NULL );

	pFnLogPlayerSpawnEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogPlayerStringEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// struct FString                 EventString                    ( CPF_Parm | CPF_NeedCtorLink )

void UGameplayEventsWriter::LogPlayerStringEvent ( int EventID, class AController* Player, struct FString EventString )
{
	static UFunction* pFnLogPlayerStringEvent = NULL;

	if ( ! pFnLogPlayerStringEvent )
		pFnLogPlayerStringEvent = (UFunction*) UObject::GObjObjects()->Data[ 21558 ];

	UGameplayEventsWriter_execLogPlayerStringEvent_Parms LogPlayerStringEvent_Parms;
	LogPlayerStringEvent_Parms.EventID = EventID;
	LogPlayerStringEvent_Parms.Player = Player;
	memcpy ( &LogPlayerStringEvent_Parms.EventString, &EventString, 0x10 );

	pFnLogPlayerStringEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlayerStringEvent, &LogPlayerStringEvent_Parms, NULL );

	pFnLogPlayerStringEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogPlayerFloatEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UGameplayEventsWriter::LogPlayerFloatEvent ( int EventID, class AController* Player, float Value )
{
	static UFunction* pFnLogPlayerFloatEvent = NULL;

	if ( ! pFnLogPlayerFloatEvent )
		pFnLogPlayerFloatEvent = (UFunction*) UObject::GObjObjects()->Data[ 21554 ];

	UGameplayEventsWriter_execLogPlayerFloatEvent_Parms LogPlayerFloatEvent_Parms;
	LogPlayerFloatEvent_Parms.EventID = EventID;
	LogPlayerFloatEvent_Parms.Player = Player;
	LogPlayerFloatEvent_Parms.Value = Value;

	pFnLogPlayerFloatEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlayerFloatEvent, &LogPlayerFloatEvent_Parms, NULL );

	pFnLogPlayerFloatEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogPlayerIntEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UGameplayEventsWriter::LogPlayerIntEvent ( int EventID, class AController* Player, int Value )
{
	static UFunction* pFnLogPlayerIntEvent = NULL;

	if ( ! pFnLogPlayerIntEvent )
		pFnLogPlayerIntEvent = (UFunction*) UObject::GObjObjects()->Data[ 21550 ];

	UGameplayEventsWriter_execLogPlayerIntEvent_Parms LogPlayerIntEvent_Parms;
	LogPlayerIntEvent_Parms.EventID = EventID;
	LogPlayerIntEvent_Parms.Player = Player;
	LogPlayerIntEvent_Parms.Value = Value;

	pFnLogPlayerIntEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlayerIntEvent, &LogPlayerIntEvent_Parms, NULL );

	pFnLogPlayerIntEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogTeamIntEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class ATeamInfo*               Team                           ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UGameplayEventsWriter::LogTeamIntEvent ( int EventID, class ATeamInfo* Team, int Value )
{
	static UFunction* pFnLogTeamIntEvent = NULL;

	if ( ! pFnLogTeamIntEvent )
		pFnLogTeamIntEvent = (UFunction*) UObject::GObjObjects()->Data[ 21546 ];

	UGameplayEventsWriter_execLogTeamIntEvent_Parms LogTeamIntEvent_Parms;
	LogTeamIntEvent_Parms.EventID = EventID;
	LogTeamIntEvent_Parms.Team = Team;
	LogTeamIntEvent_Parms.Value = Value;

	pFnLogTeamIntEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogTeamIntEvent, &LogTeamIntEvent_Parms, NULL );

	pFnLogTeamIntEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogGameStringEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_NeedCtorLink )

void UGameplayEventsWriter::LogGameStringEvent ( int EventID, struct FString Value )
{
	static UFunction* pFnLogGameStringEvent = NULL;

	if ( ! pFnLogGameStringEvent )
		pFnLogGameStringEvent = (UFunction*) UObject::GObjObjects()->Data[ 21543 ];

	UGameplayEventsWriter_execLogGameStringEvent_Parms LogGameStringEvent_Parms;
	LogGameStringEvent_Parms.EventID = EventID;
	memcpy ( &LogGameStringEvent_Parms.Value, &Value, 0x10 );

	pFnLogGameStringEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogGameStringEvent, &LogGameStringEvent_Parms, NULL );

	pFnLogGameStringEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogGameIntEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UGameplayEventsWriter::LogGameIntEvent ( int EventID, int Value )
{
	static UFunction* pFnLogGameIntEvent = NULL;

	if ( ! pFnLogGameIntEvent )
		pFnLogGameIntEvent = (UFunction*) UObject::GObjObjects()->Data[ 21540 ];

	UGameplayEventsWriter_execLogGameIntEvent_Parms LogGameIntEvent_Parms;
	LogGameIntEvent_Parms.EventID = EventID;
	LogGameIntEvent_Parms.Value = Value;

	pFnLogGameIntEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogGameIntEvent, &LogGameIntEvent_Parms, NULL );

	pFnLogGameIntEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.Poll
// [0x00020002] 
// Parameters infos:

void UGameplayEventsWriter::Poll ( )
{
	static UFunction* pFnPoll = NULL;

	if ( ! pFnPoll )
		pFnPoll = (UFunction*) UObject::GObjObjects()->Data[ 21538 ];

	UGameplayEventsWriter_execPoll_Parms Poll_Parms;

	this->ProcessEvent ( pFnPoll, &Poll_Parms, NULL );
};

// Function Engine.GameplayEventsWriter.SerializeFooter
// [0x00080400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameplayEventsWriter::SerializeFooter ( )
{
	static UFunction* pFnSerializeFooter = NULL;

	if ( ! pFnSerializeFooter )
		pFnSerializeFooter = (UFunction*) UObject::GObjObjects()->Data[ 21536 ];

	UGameplayEventsWriter_execSerializeFooter_Parms SerializeFooter_Parms;

	pFnSerializeFooter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSerializeFooter, &SerializeFooter_Parms, NULL );

	pFnSerializeFooter->FunctionFlags |= 0x400;

	return SerializeFooter_Parms.ReturnValue;
};

// Function Engine.GameplayEventsWriter.SerializeHeader
// [0x00080400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameplayEventsWriter::SerializeHeader ( )
{
	static UFunction* pFnSerializeHeader = NULL;

	if ( ! pFnSerializeHeader )
		pFnSerializeHeader = (UFunction*) UObject::GObjObjects()->Data[ 21534 ];

	UGameplayEventsWriter_execSerializeHeader_Parms SerializeHeader_Parms;

	pFnSerializeHeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSerializeHeader, &SerializeHeader_Parms, NULL );

	pFnSerializeHeader->FunctionFlags |= 0x400;

	return SerializeHeader_Parms.ReturnValue;
};

// Function Engine.GameplayEventsWriter.CloseStatsFile
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UGameplayEventsWriter::CloseStatsFile ( )
{
	static UFunction* pFnCloseStatsFile = NULL;

	if ( ! pFnCloseStatsFile )
		pFnCloseStatsFile = (UFunction*) UObject::GObjObjects()->Data[ 21533 ];

	UGameplayEventsWriter_execCloseStatsFile_Parms CloseStatsFile_Parms;

	pFnCloseStatsFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCloseStatsFile, &CloseStatsFile_Parms, NULL );

	pFnCloseStatsFile->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.OpenStatsFile
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

bool UGameplayEventsWriter::OpenStatsFile ( struct FString Filename )
{
	static UFunction* pFnOpenStatsFile = NULL;

	if ( ! pFnOpenStatsFile )
		pFnOpenStatsFile = (UFunction*) UObject::GObjObjects()->Data[ 21530 ];

	UGameplayEventsWriter_execOpenStatsFile_Parms OpenStatsFile_Parms;
	memcpy ( &OpenStatsFile_Parms.Filename, &Filename, 0x10 );

	pFnOpenStatsFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpenStatsFile, &OpenStatsFile_Parms, NULL );

	pFnOpenStatsFile->FunctionFlags |= 0x400;

	return OpenStatsFile_Parms.ReturnValue;
};

// Function Engine.GameplayEventsWriter.IsSessionInProgress
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameplayEventsWriter::IsSessionInProgress ( )
{
	static UFunction* pFnIsSessionInProgress = NULL;

	if ( ! pFnIsSessionInProgress )
		pFnIsSessionInProgress = (UFunction*) UObject::GObjObjects()->Data[ 21528 ];

	UGameplayEventsWriter_execIsSessionInProgress_Parms IsSessionInProgress_Parms;

	this->ProcessEvent ( pFnIsSessionInProgress, &IsSessionInProgress_Parms, NULL );

	return IsSessionInProgress_Parms.ReturnValue;
};

// Function Engine.GameplayEventsWriter.EndLogging
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UGameplayEventsWriter::EndLogging ( )
{
	static UFunction* pFnEndLogging = NULL;

	if ( ! pFnEndLogging )
		pFnEndLogging = (UFunction*) UObject::GObjObjects()->Data[ 21527 ];

	UGameplayEventsWriter_execEndLogging_Parms EndLogging_Parms;

	pFnEndLogging->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndLogging, &EndLogging_Parms, NULL );

	pFnEndLogging->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.StartLogging
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// float                          HeartbeatDelta                 ( CPF_OptionalParm | CPF_Parm )

void UGameplayEventsWriter::StartLogging ( float HeartbeatDelta )
{
	static UFunction* pFnStartLogging = NULL;

	if ( ! pFnStartLogging )
		pFnStartLogging = (UFunction*) UObject::GObjObjects()->Data[ 21525 ];

	UGameplayEventsWriter_execStartLogging_Parms StartLogging_Parms;
	StartLogging_Parms.HeartbeatDelta = HeartbeatDelta;

	pFnStartLogging->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStartLogging, &StartLogging_Parms, NULL );

	pFnStartLogging->FunctionFlags |= 0x400;
};

// Function Engine.IniLocPatcher.ClearCachedFiles
// [0x00020002] 
// Parameters infos:

void UIniLocPatcher::ClearCachedFiles ( )
{
	static UFunction* pFnClearCachedFiles = NULL;

	if ( ! pFnClearCachedFiles )
		pFnClearCachedFiles = (UFunction*) UObject::GObjObjects()->Data[ 22518 ];

	UIniLocPatcher_execClearCachedFiles_Parms ClearCachedFiles_Parms;

	this->ProcessEvent ( pFnClearCachedFiles, &ClearCachedFiles_Parms, NULL );
};

// Function Engine.IniLocPatcher.ClearReadFileDelegate
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UIniLocPatcher::ClearReadFileDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate )
{
	static UFunction* pFnClearReadFileDelegate = NULL;

	if ( ! pFnClearReadFileDelegate )
		pFnClearReadFileDelegate = (UFunction*) UObject::GObjObjects()->Data[ 22516 ];

	UIniLocPatcher_execClearReadFileDelegate_Parms ClearReadFileDelegate_Parms;
	memcpy ( &ClearReadFileDelegate_Parms.ReadTitleFileCompleteDelegate, &ReadTitleFileCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadFileDelegate, &ClearReadFileDelegate_Parms, NULL );
};

// Function Engine.IniLocPatcher.AddReadFileDelegate
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UIniLocPatcher::AddReadFileDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate )
{
	static UFunction* pFnAddReadFileDelegate = NULL;

	if ( ! pFnAddReadFileDelegate )
		pFnAddReadFileDelegate = (UFunction*) UObject::GObjObjects()->Data[ 22514 ];

	UIniLocPatcher_execAddReadFileDelegate_Parms AddReadFileDelegate_Parms;
	memcpy ( &AddReadFileDelegate_Parms.ReadTitleFileCompleteDelegate, &ReadTitleFileCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadFileDelegate, &AddReadFileDelegate_Parms, NULL );
};

// Function Engine.IniLocPatcher.AddFileToDownload
// [0x00020002] 
// Parameters infos:
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UIniLocPatcher::AddFileToDownload ( struct FString Filename )
{
	static UFunction* pFnAddFileToDownload = NULL;

	if ( ! pFnAddFileToDownload )
		pFnAddFileToDownload = (UFunction*) UObject::GObjObjects()->Data[ 22511 ];

	UIniLocPatcher_execAddFileToDownload_Parms AddFileToDownload_Parms;
	memcpy ( &AddFileToDownload_Parms.Filename, &Filename, 0x10 );

	this->ProcessEvent ( pFnAddFileToDownload, &AddFileToDownload_Parms, NULL );
};

// Function Engine.IniLocPatcher.ProcessIniLocFile
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )
// struct TArray<unsigned char>   FileData                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UIniLocPatcher::ProcessIniLocFile ( struct FString Filename, struct TArray<unsigned char>* FileData )
{
	static UFunction* pFnProcessIniLocFile = NULL;

	if ( ! pFnProcessIniLocFile )
		pFnProcessIniLocFile = (UFunction*) UObject::GObjObjects()->Data[ 22507 ];

	UIniLocPatcher_execProcessIniLocFile_Parms ProcessIniLocFile_Parms;
	memcpy ( &ProcessIniLocFile_Parms.Filename, &Filename, 0x10 );

	pFnProcessIniLocFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProcessIniLocFile, &ProcessIniLocFile_Parms, NULL );

	pFnProcessIniLocFile->FunctionFlags |= 0x400;

	if ( FileData )
		memcpy ( FileData, &ProcessIniLocFile_Parms.FileData, 0x10 );
};

// Function Engine.IniLocPatcher.OnReadFileComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UIniLocPatcher::OnReadFileComplete ( unsigned long bWasSuccessful, struct FString Filename )
{
	static UFunction* pFnOnReadFileComplete = NULL;

	if ( ! pFnOnReadFileComplete )
		pFnOnReadFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 22499 ];

	UIniLocPatcher_execOnReadFileComplete_Parms OnReadFileComplete_Parms;
	OnReadFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnReadFileComplete_Parms.Filename, &Filename, 0x10 );

	this->ProcessEvent ( pFnOnReadFileComplete, &OnReadFileComplete_Parms, NULL );
};

// Function Engine.IniLocPatcher.DownloadFiles
// [0x00020002] 
// Parameters infos:

void UIniLocPatcher::DownloadFiles ( )
{
	static UFunction* pFnDownloadFiles = NULL;

	if ( ! pFnDownloadFiles )
		pFnDownloadFiles = (UFunction*) UObject::GObjObjects()->Data[ 22495 ];

	UIniLocPatcher_execDownloadFiles_Parms DownloadFiles_Parms;

	this->ProcessEvent ( pFnDownloadFiles, &DownloadFiles_Parms, NULL );
};

// Function Engine.IniLocPatcher.Init
// [0x00020002] 
// Parameters infos:

void UIniLocPatcher::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 22491 ];

	UIniLocPatcher_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Engine.IniLocPatcher.OnReadTitleFileComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UIniLocPatcher::OnReadTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename )
{
	static UFunction* pFnOnReadTitleFileComplete = NULL;

	if ( ! pFnOnReadTitleFileComplete )
		pFnOnReadTitleFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 22488 ];

	UIniLocPatcher_execOnReadTitleFileComplete_Parms OnReadTitleFileComplete_Parms;
	OnReadTitleFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnReadTitleFileComplete_Parms.Filename, &Filename, 0x10 );

	this->ProcessEvent ( pFnOnReadTitleFileComplete, &OnReadTitleFileComplete_Parms, NULL );
};

// Function Engine.Interface_NavigationHandle.NotifyPathChanged
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UInterface_NavigationHandle::eventNotifyPathChanged ( )
{
	static UFunction* pFnNotifyPathChanged = NULL;

	if ( ! pFnNotifyPathChanged )
		pFnNotifyPathChanged = (UFunction*) UObject::GObjObjects()->Data[ 22572 ];

	UInterface_NavigationHandle_eventNotifyPathChanged_Parms NotifyPathChanged_Parms;

	this->ProcessEvent ( pFnNotifyPathChanged, &NotifyPathChanged_Parms, NULL );
};

// Function Engine.Surface.GetSurfaceHeight
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USurface::GetSurfaceHeight ( )
{
	static UFunction* pFnGetSurfaceHeight = NULL;

	if ( ! pFnGetSurfaceHeight )
		pFnGetSurfaceHeight = (UFunction*) UObject::GObjObjects()->Data[ 14696 ];

	USurface_execGetSurfaceHeight_Parms GetSurfaceHeight_Parms;

	pFnGetSurfaceHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSurfaceHeight, &GetSurfaceHeight_Parms, NULL );

	pFnGetSurfaceHeight->FunctionFlags |= 0x400;

	return GetSurfaceHeight_Parms.ReturnValue;
};

// Function Engine.Surface.GetSurfaceWidth
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USurface::GetSurfaceWidth ( )
{
	static UFunction* pFnGetSurfaceWidth = NULL;

	if ( ! pFnGetSurfaceWidth )
		pFnGetSurfaceWidth = (UFunction*) UObject::GObjObjects()->Data[ 14694 ];

	USurface_execGetSurfaceWidth_Parms GetSurfaceWidth_Parms;

	pFnGetSurfaceWidth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSurfaceWidth, &GetSurfaceWidth_Parms, NULL );

	pFnGetSurfaceWidth->FunctionFlags |= 0x400;

	return GetSurfaceWidth_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetEffectsMaterialFractionValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Value                          ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetEffectsMaterialFractionValue ( float* Value )
{
	static UFunction* pFnGetEffectsMaterialFractionValue = NULL;

	if ( ! pFnGetEffectsMaterialFractionValue )
		pFnGetEffectsMaterialFractionValue = (UFunction*) UObject::GObjObjects()->Data[ 14747 ];

	UMaterialInterface_execGetEffectsMaterialFractionValue_Parms GetEffectsMaterialFractionValue_Parms;

	pFnGetEffectsMaterialFractionValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEffectsMaterialFractionValue, &GetEffectsMaterialFractionValue_Parms, NULL );

	pFnGetEffectsMaterialFractionValue->FunctionFlags |= 0x400;

	if ( Value )
		*Value = GetEffectsMaterialFractionValue_Parms.Value;

	return GetEffectsMaterialFractionValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetEffectsMaterialNameValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   EffectName                     ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetEffectsMaterialNameValue ( struct FName* EffectName )
{
	static UFunction* pFnGetEffectsMaterialNameValue = NULL;

	if ( ! pFnGetEffectsMaterialNameValue )
		pFnGetEffectsMaterialNameValue = (UFunction*) UObject::GObjObjects()->Data[ 14744 ];

	UMaterialInterface_execGetEffectsMaterialNameValue_Parms GetEffectsMaterialNameValue_Parms;

	pFnGetEffectsMaterialNameValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEffectsMaterialNameValue, &GetEffectsMaterialNameValue_Parms, NULL );

	pFnGetEffectsMaterialNameValue->FunctionFlags |= 0x400;

	if ( EffectName )
		memcpy ( EffectName, &GetEffectsMaterialNameValue_Parms.EffectName, 0x8 );

	return GetEffectsMaterialNameValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.SetForceMipLevelsToBeResident
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  OverrideForceMiplevelsToBeResident ( CPF_Parm )
// unsigned long                  bForceMiplevelsToBeResidentValue ( CPF_Parm )
// float                          ForceDuration                  ( CPF_Parm )
// int                            CinematicTextureGroups         ( CPF_OptionalParm | CPF_Parm )

void UMaterialInterface::SetForceMipLevelsToBeResident ( unsigned long OverrideForceMiplevelsToBeResident, unsigned long bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups )
{
	static UFunction* pFnSetForceMipLevelsToBeResident = NULL;

	if ( ! pFnSetForceMipLevelsToBeResident )
		pFnSetForceMipLevelsToBeResident = (UFunction*) UObject::GObjObjects()->Data[ 14739 ];

	UMaterialInterface_execSetForceMipLevelsToBeResident_Parms SetForceMipLevelsToBeResident_Parms;
	SetForceMipLevelsToBeResident_Parms.OverrideForceMiplevelsToBeResident = OverrideForceMiplevelsToBeResident;
	SetForceMipLevelsToBeResident_Parms.bForceMiplevelsToBeResidentValue = bForceMiplevelsToBeResidentValue;
	SetForceMipLevelsToBeResident_Parms.ForceDuration = ForceDuration;
	SetForceMipLevelsToBeResident_Parms.CinematicTextureGroups = CinematicTextureGroups;

	pFnSetForceMipLevelsToBeResident->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetForceMipLevelsToBeResident, &SetForceMipLevelsToBeResident_Parms, NULL );

	pFnSetForceMipLevelsToBeResident->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInterface.GetVectorCurveParameterValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FInterpCurveVector      OutValue                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UMaterialInterface::GetVectorCurveParameterValue ( struct FName ParameterName, struct FInterpCurveVector* OutValue )
{
	static UFunction* pFnGetVectorCurveParameterValue = NULL;

	if ( ! pFnGetVectorCurveParameterValue )
		pFnGetVectorCurveParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 14735 ];

	UMaterialInterface_execGetVectorCurveParameterValue_Parms GetVectorCurveParameterValue_Parms;
	memcpy ( &GetVectorCurveParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetVectorCurveParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVectorCurveParameterValue, &GetVectorCurveParameterValue_Parms, NULL );

	pFnGetVectorCurveParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		memcpy ( OutValue, &GetVectorCurveParameterValue_Parms.OutValue, 0x14 );

	return GetVectorCurveParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetVectorParameterValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            OutValue                       ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetVectorParameterValue ( struct FName ParameterName, struct FLinearColor* OutValue )
{
	static UFunction* pFnGetVectorParameterValue = NULL;

	if ( ! pFnGetVectorParameterValue )
		pFnGetVectorParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 14731 ];

	UMaterialInterface_execGetVectorParameterValue_Parms GetVectorParameterValue_Parms;
	memcpy ( &GetVectorParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetVectorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVectorParameterValue, &GetVectorParameterValue_Parms, NULL );

	pFnGetVectorParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		memcpy ( OutValue, &GetVectorParameterValue_Parms.OutValue, 0x10 );

	return GetVectorParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetTextureParameterValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// class UTexture*                OutValue                       ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetTextureParameterValue ( struct FName ParameterName, class UTexture** OutValue )
{
	static UFunction* pFnGetTextureParameterValue = NULL;

	if ( ! pFnGetTextureParameterValue )
		pFnGetTextureParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 14727 ];

	UMaterialInterface_execGetTextureParameterValue_Parms GetTextureParameterValue_Parms;
	memcpy ( &GetTextureParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetTextureParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTextureParameterValue, &GetTextureParameterValue_Parms, NULL );

	pFnGetTextureParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		*OutValue = GetTextureParameterValue_Parms.OutValue;

	return GetTextureParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetScalarCurveParameterValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FInterpCurveFloat       OutValue                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UMaterialInterface::GetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat* OutValue )
{
	static UFunction* pFnGetScalarCurveParameterValue = NULL;

	if ( ! pFnGetScalarCurveParameterValue )
		pFnGetScalarCurveParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 14723 ];

	UMaterialInterface_execGetScalarCurveParameterValue_Parms GetScalarCurveParameterValue_Parms;
	memcpy ( &GetScalarCurveParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetScalarCurveParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScalarCurveParameterValue, &GetScalarCurveParameterValue_Parms, NULL );

	pFnGetScalarCurveParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		memcpy ( OutValue, &GetScalarCurveParameterValue_Parms.OutValue, 0x14 );

	return GetScalarCurveParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetScalarParameterValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          OutValue                       ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetScalarParameterValue ( struct FName ParameterName, float* OutValue )
{
	static UFunction* pFnGetScalarParameterValue = NULL;

	if ( ! pFnGetScalarParameterValue )
		pFnGetScalarParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 14719 ];

	UMaterialInterface_execGetScalarParameterValue_Parms GetScalarParameterValue_Parms;
	memcpy ( &GetScalarParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetScalarParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScalarParameterValue, &GetScalarParameterValue_Parms, NULL );

	pFnGetScalarParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		*OutValue = GetScalarParameterValue_Parms.OutValue;

	return GetScalarParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetFontParameterValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// class UFont*                   OutFontValue                   ( CPF_Parm | CPF_OutParm )
// int                            OutFontPage                    ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetFontParameterValue ( struct FName ParameterName, class UFont** OutFontValue, int* OutFontPage )
{
	static UFunction* pFnGetFontParameterValue = NULL;

	if ( ! pFnGetFontParameterValue )
		pFnGetFontParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 14714 ];

	UMaterialInterface_execGetFontParameterValue_Parms GetFontParameterValue_Parms;
	memcpy ( &GetFontParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetFontParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFontParameterValue, &GetFontParameterValue_Parms, NULL );

	pFnGetFontParameterValue->FunctionFlags |= 0x400;

	if ( OutFontValue )
		*OutFontValue = GetFontParameterValue_Parms.OutFontValue;

	if ( OutFontPage )
		*OutFontPage = GetFontParameterValue_Parms.OutFontPage;

	return GetFontParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetPhysicalMaterial
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicalMaterial*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPhysicalMaterial* UMaterialInterface::GetPhysicalMaterial ( )
{
	static UFunction* pFnGetPhysicalMaterial = NULL;

	if ( ! pFnGetPhysicalMaterial )
		pFnGetPhysicalMaterial = (UFunction*) UObject::GObjObjects()->Data[ 14712 ];

	UMaterialInterface_execGetPhysicalMaterial_Parms GetPhysicalMaterial_Parms;

	pFnGetPhysicalMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPhysicalMaterial, &GetPhysicalMaterial_Parms, NULL );

	pFnGetPhysicalMaterial->FunctionFlags |= 0x400;

	return GetPhysicalMaterial_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetMaterial
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterial*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UMaterial* UMaterialInterface::GetMaterial ( )
{
	static UFunction* pFnGetMaterial = NULL;

	if ( ! pFnGetMaterial )
		pFnGetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 14710 ];

	UMaterialInterface_execGetMaterial_Parms GetMaterial_Parms;

	pFnGetMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaterial, &GetMaterial_Parms, NULL );

	pFnGetMaterial->FunctionFlags |= 0x400;

	return GetMaterial_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.SetToDefaults
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UOnlinePlayerStorage::eventSetToDefaults ( )
{
	static UFunction* pFnSetToDefaults = NULL;

	if ( ! pFnSetToDefaults )
		pFnSetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 26365 ];

	UOnlinePlayerStorage_eventSetToDefaults_Parms SetToDefaults_Parms;

	this->ProcessEvent ( pFnSetToDefaults, &SetToDefaults_Parms, NULL );
};

// Function Engine.OnlinePlayerStorage.AddSettingFloat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            SettingId                      ( CPF_Parm )

void UOnlinePlayerStorage::AddSettingFloat ( int SettingId )
{
	static UFunction* pFnAddSettingFloat = NULL;

	if ( ! pFnAddSettingFloat )
		pFnAddSettingFloat = (UFunction*) UObject::GObjObjects()->Data[ 26363 ];

	UOnlinePlayerStorage_execAddSettingFloat_Parms AddSettingFloat_Parms;
	AddSettingFloat_Parms.SettingId = SettingId;

	pFnAddSettingFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSettingFloat, &AddSettingFloat_Parms, NULL );

	pFnAddSettingFloat->FunctionFlags |= 0x400;
};

// Function Engine.OnlinePlayerStorage.AddSettingInt
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            SettingId                      ( CPF_Parm )

void UOnlinePlayerStorage::AddSettingInt ( int SettingId )
{
	static UFunction* pFnAddSettingInt = NULL;

	if ( ! pFnAddSettingInt )
		pFnAddSettingInt = (UFunction*) UObject::GObjObjects()->Data[ 26361 ];

	UOnlinePlayerStorage_execAddSettingInt_Parms AddSettingInt_Parms;
	AddSettingInt_Parms.SettingId = SettingId;

	pFnAddSettingInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSettingInt, &AddSettingInt_Parms, NULL );

	pFnAddSettingInt->FunctionFlags |= 0x400;
};

// Function Engine.OnlinePlayerStorage.GetRangedProfileSettingValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileId                      ( CPF_Parm )
// float                          OutValue                       ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerStorage::GetRangedProfileSettingValue ( int ProfileId, float* OutValue )
{
	static UFunction* pFnGetRangedProfileSettingValue = NULL;

	if ( ! pFnGetRangedProfileSettingValue )
		pFnGetRangedProfileSettingValue = (UFunction*) UObject::GObjObjects()->Data[ 26357 ];

	UOnlinePlayerStorage_execGetRangedProfileSettingValue_Parms GetRangedProfileSettingValue_Parms;
	GetRangedProfileSettingValue_Parms.ProfileId = ProfileId;

	pFnGetRangedProfileSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRangedProfileSettingValue, &GetRangedProfileSettingValue_Parms, NULL );

	pFnGetRangedProfileSettingValue->FunctionFlags |= 0x400;

	if ( OutValue )
		*OutValue = GetRangedProfileSettingValue_Parms.OutValue;

	return GetRangedProfileSettingValue_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.SetRangedProfileSettingValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileId                      ( CPF_Parm )
// float                          NewValue                       ( CPF_Parm )

bool UOnlinePlayerStorage::SetRangedProfileSettingValue ( int ProfileId, float NewValue )
{
	static UFunction* pFnSetRangedProfileSettingValue = NULL;

	if ( ! pFnSetRangedProfileSettingValue )
		pFnSetRangedProfileSettingValue = (UFunction*) UObject::GObjObjects()->Data[ 26353 ];

	UOnlinePlayerStorage_execSetRangedProfileSettingValue_Parms SetRangedProfileSettingValue_Parms;
	SetRangedProfileSettingValue_Parms.ProfileId = ProfileId;
	SetRangedProfileSettingValue_Parms.NewValue = NewValue;

	pFnSetRangedProfileSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRangedProfileSettingValue, &SetRangedProfileSettingValue_Parms, NULL );

	pFnSetRangedProfileSettingValue->FunctionFlags |= 0x400;

	return SetRangedProfileSettingValue_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingRange
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileId                      ( CPF_Parm )
// float                          OutMinValue                    ( CPF_Parm | CPF_OutParm )
// float                          OutMaxValue                    ( CPF_Parm | CPF_OutParm )
// float                          RangeIncrement                 ( CPF_Parm | CPF_OutParm )
// unsigned char                  bFormatAsInt                   ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerStorage::GetProfileSettingRange ( int ProfileId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt )
{
	static UFunction* pFnGetProfileSettingRange = NULL;

	if ( ! pFnGetProfileSettingRange )
		pFnGetProfileSettingRange = (UFunction*) UObject::GObjObjects()->Data[ 26346 ];

	UOnlinePlayerStorage_execGetProfileSettingRange_Parms GetProfileSettingRange_Parms;
	GetProfileSettingRange_Parms.ProfileId = ProfileId;

	pFnGetProfileSettingRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingRange, &GetProfileSettingRange_Parms, NULL );

	pFnGetProfileSettingRange->FunctionFlags |= 0x400;

	if ( OutMinValue )
		*OutMinValue = GetProfileSettingRange_Parms.OutMinValue;

	if ( OutMaxValue )
		*OutMaxValue = GetProfileSettingRange_Parms.OutMaxValue;

	if ( RangeIncrement )
		*RangeIncrement = GetProfileSettingRange_Parms.RangeIncrement;

	if ( bFormatAsInt )
		*bFormatAsInt = GetProfileSettingRange_Parms.bFormatAsInt;

	return GetProfileSettingRange_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingMappingIds
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileId                      ( CPF_Parm )
// struct TArray<int>             IDs                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePlayerStorage::GetProfileSettingMappingIds ( int ProfileId, struct TArray<int>* IDs )
{
	static UFunction* pFnGetProfileSettingMappingIds = NULL;

	if ( ! pFnGetProfileSettingMappingIds )
		pFnGetProfileSettingMappingIds = (UFunction*) UObject::GObjObjects()->Data[ 26341 ];

	UOnlinePlayerStorage_execGetProfileSettingMappingIds_Parms GetProfileSettingMappingIds_Parms;
	GetProfileSettingMappingIds_Parms.ProfileId = ProfileId;

	pFnGetProfileSettingMappingIds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingMappingIds, &GetProfileSettingMappingIds_Parms, NULL );

	pFnGetProfileSettingMappingIds->FunctionFlags |= 0x400;

	if ( IDs )
		memcpy ( IDs, &GetProfileSettingMappingIds_Parms.IDs, 0x10 );

	return GetProfileSettingMappingIds_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingMappingType
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileId                      ( CPF_Parm )
// unsigned char                  OutType                        ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerStorage::GetProfileSettingMappingType ( int ProfileId, unsigned char* OutType )
{
	static UFunction* pFnGetProfileSettingMappingType = NULL;

	if ( ! pFnGetProfileSettingMappingType )
		pFnGetProfileSettingMappingType = (UFunction*) UObject::GObjObjects()->Data[ 26337 ];

	UOnlinePlayerStorage_execGetProfileSettingMappingType_Parms GetProfileSettingMappingType_Parms;
	GetProfileSettingMappingType_Parms.ProfileId = ProfileId;

	pFnGetProfileSettingMappingType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingMappingType, &GetProfileSettingMappingType_Parms, NULL );

	pFnGetProfileSettingMappingType->FunctionFlags |= 0x400;

	if ( OutType )
		*OutType = GetProfileSettingMappingType_Parms.OutType;

	return GetProfileSettingMappingType_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.SetProfileSettingValueFloat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

bool UOnlinePlayerStorage::SetProfileSettingValueFloat ( int ProfileSettingId, float Value )
{
	static UFunction* pFnSetProfileSettingValueFloat = NULL;

	if ( ! pFnSetProfileSettingValueFloat )
		pFnSetProfileSettingValueFloat = (UFunction*) UObject::GObjObjects()->Data[ 26333 ];

	UOnlinePlayerStorage_execSetProfileSettingValueFloat_Parms SetProfileSettingValueFloat_Parms;
	SetProfileSettingValueFloat_Parms.ProfileSettingId = ProfileSettingId;
	SetProfileSettingValueFloat_Parms.Value = Value;

	pFnSetProfileSettingValueFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetProfileSettingValueFloat, &SetProfileSettingValueFloat_Parms, NULL );

	pFnSetProfileSettingValueFloat->FunctionFlags |= 0x400;

	return SetProfileSettingValueFloat_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.SetProfileSettingValueInt
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

bool UOnlinePlayerStorage::SetProfileSettingValueInt ( int ProfileSettingId, int Value )
{
	static UFunction* pFnSetProfileSettingValueInt = NULL;

	if ( ! pFnSetProfileSettingValueInt )
		pFnSetProfileSettingValueInt = (UFunction*) UObject::GObjObjects()->Data[ 26329 ];

	UOnlinePlayerStorage_execSetProfileSettingValueInt_Parms SetProfileSettingValueInt_Parms;
	SetProfileSettingValueInt_Parms.ProfileSettingId = ProfileSettingId;
	SetProfileSettingValueInt_Parms.Value = Value;

	pFnSetProfileSettingValueInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetProfileSettingValueInt, &SetProfileSettingValueInt_Parms, NULL );

	pFnSetProfileSettingValueInt->FunctionFlags |= 0x400;

	return SetProfileSettingValueInt_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.SetProfileSettingValueId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

bool UOnlinePlayerStorage::SetProfileSettingValueId ( int ProfileSettingId, int Value )
{
	static UFunction* pFnSetProfileSettingValueId = NULL;

	if ( ! pFnSetProfileSettingValueId )
		pFnSetProfileSettingValueId = (UFunction*) UObject::GObjObjects()->Data[ 26325 ];

	UOnlinePlayerStorage_execSetProfileSettingValueId_Parms SetProfileSettingValueId_Parms;
	SetProfileSettingValueId_Parms.ProfileSettingId = ProfileSettingId;
	SetProfileSettingValueId_Parms.Value = Value;

	pFnSetProfileSettingValueId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetProfileSettingValueId, &SetProfileSettingValueId_Parms, NULL );

	pFnSetProfileSettingValueId->FunctionFlags |= 0x400;

	return SetProfileSettingValueId_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValueFloat
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// float                          Value                          ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerStorage::GetProfileSettingValueFloat ( int ProfileSettingId, float* Value )
{
	static UFunction* pFnGetProfileSettingValueFloat = NULL;

	if ( ! pFnGetProfileSettingValueFloat )
		pFnGetProfileSettingValueFloat = (UFunction*) UObject::GObjObjects()->Data[ 26321 ];

	UOnlinePlayerStorage_execGetProfileSettingValueFloat_Parms GetProfileSettingValueFloat_Parms;
	GetProfileSettingValueFloat_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingValueFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValueFloat, &GetProfileSettingValueFloat_Parms, NULL );

	pFnGetProfileSettingValueFloat->FunctionFlags |= 0x400;

	if ( Value )
		*Value = GetProfileSettingValueFloat_Parms.Value;

	return GetProfileSettingValueFloat_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValueInt
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            Value                          ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerStorage::GetProfileSettingValueInt ( int ProfileSettingId, int* Value )
{
	static UFunction* pFnGetProfileSettingValueInt = NULL;

	if ( ! pFnGetProfileSettingValueInt )
		pFnGetProfileSettingValueInt = (UFunction*) UObject::GObjObjects()->Data[ 26317 ];

	UOnlinePlayerStorage_execGetProfileSettingValueInt_Parms GetProfileSettingValueInt_Parms;
	GetProfileSettingValueInt_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingValueInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValueInt, &GetProfileSettingValueInt_Parms, NULL );

	pFnGetProfileSettingValueInt->FunctionFlags |= 0x400;

	if ( Value )
		*Value = GetProfileSettingValueInt_Parms.Value;

	return GetProfileSettingValueInt_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValueId
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            ValueId                        ( CPF_Parm | CPF_OutParm )
// int                            ListIndex                      ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UOnlinePlayerStorage::GetProfileSettingValueId ( int ProfileSettingId, int* ValueId, int* ListIndex )
{
	static UFunction* pFnGetProfileSettingValueId = NULL;

	if ( ! pFnGetProfileSettingValueId )
		pFnGetProfileSettingValueId = (UFunction*) UObject::GObjObjects()->Data[ 26312 ];

	UOnlinePlayerStorage_execGetProfileSettingValueId_Parms GetProfileSettingValueId_Parms;
	GetProfileSettingValueId_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingValueId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValueId, &GetProfileSettingValueId_Parms, NULL );

	pFnGetProfileSettingValueId->FunctionFlags |= 0x400;

	if ( ValueId )
		*ValueId = GetProfileSettingValueId_Parms.ValueId;

	if ( ListIndex )
		*ListIndex = GetProfileSettingValueId_Parms.ListIndex;

	return GetProfileSettingValueId_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.SetProfileSettingValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePlayerStorage::SetProfileSettingValue ( int ProfileSettingId, struct FString* NewValue )
{
	static UFunction* pFnSetProfileSettingValue = NULL;

	if ( ! pFnSetProfileSettingValue )
		pFnSetProfileSettingValue = (UFunction*) UObject::GObjObjects()->Data[ 26308 ];

	UOnlinePlayerStorage_execSetProfileSettingValue_Parms SetProfileSettingValue_Parms;
	SetProfileSettingValue_Parms.ProfileSettingId = ProfileSettingId;

	pFnSetProfileSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetProfileSettingValue, &SetProfileSettingValue_Parms, NULL );

	pFnSetProfileSettingValue->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &SetProfileSettingValue_Parms.NewValue, 0x10 );

	return SetProfileSettingValue_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.SetProfileSettingValueByName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProfileSettingName             ( CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePlayerStorage::SetProfileSettingValueByName ( struct FName ProfileSettingName, struct FString* NewValue )
{
	static UFunction* pFnSetProfileSettingValueByName = NULL;

	if ( ! pFnSetProfileSettingValueByName )
		pFnSetProfileSettingValueByName = (UFunction*) UObject::GObjObjects()->Data[ 26304 ];

	UOnlinePlayerStorage_execSetProfileSettingValueByName_Parms SetProfileSettingValueByName_Parms;
	memcpy ( &SetProfileSettingValueByName_Parms.ProfileSettingName, &ProfileSettingName, 0x8 );

	pFnSetProfileSettingValueByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetProfileSettingValueByName, &SetProfileSettingValueByName_Parms, NULL );

	pFnSetProfileSettingValueByName->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &SetProfileSettingValueByName_Parms.NewValue, 0x10 );

	return SetProfileSettingValueByName_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValueByName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProfileSettingName             ( CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePlayerStorage::GetProfileSettingValueByName ( struct FName ProfileSettingName, struct FString* Value )
{
	static UFunction* pFnGetProfileSettingValueByName = NULL;

	if ( ! pFnGetProfileSettingValueByName )
		pFnGetProfileSettingValueByName = (UFunction*) UObject::GObjObjects()->Data[ 26300 ];

	UOnlinePlayerStorage_execGetProfileSettingValueByName_Parms GetProfileSettingValueByName_Parms;
	memcpy ( &GetProfileSettingValueByName_Parms.ProfileSettingName, &ProfileSettingName, 0x8 );

	pFnGetProfileSettingValueByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValueByName, &GetProfileSettingValueByName_Parms, NULL );

	pFnGetProfileSettingValueByName->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &GetProfileSettingValueByName_Parms.Value, 0x10 );

	return GetProfileSettingValueByName_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValues
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// struct TArray<struct FName>    Values                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePlayerStorage::GetProfileSettingValues ( int ProfileSettingId, struct TArray<struct FName>* Values )
{
	static UFunction* pFnGetProfileSettingValues = NULL;

	if ( ! pFnGetProfileSettingValues )
		pFnGetProfileSettingValues = (UFunction*) UObject::GObjObjects()->Data[ 26295 ];

	UOnlinePlayerStorage_execGetProfileSettingValues_Parms GetProfileSettingValues_Parms;
	GetProfileSettingValues_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValues, &GetProfileSettingValues_Parms, NULL );

	pFnGetProfileSettingValues->FunctionFlags |= 0x400;

	if ( Values )
		memcpy ( Values, &GetProfileSettingValues_Parms.Values, 0x10 );

	return GetProfileSettingValues_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValueName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )

struct FName UOnlinePlayerStorage::GetProfileSettingValueName ( int ProfileSettingId )
{
	static UFunction* pFnGetProfileSettingValueName = NULL;

	if ( ! pFnGetProfileSettingValueName )
		pFnGetProfileSettingValueName = (UFunction*) UObject::GObjObjects()->Data[ 26292 ];

	UOnlinePlayerStorage_execGetProfileSettingValueName_Parms GetProfileSettingValueName_Parms;
	GetProfileSettingValueName_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingValueName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValueName, &GetProfileSettingValueName_Parms, NULL );

	pFnGetProfileSettingValueName->FunctionFlags |= 0x400;

	return GetProfileSettingValueName_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValue
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            ValueMapID                     ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePlayerStorage::GetProfileSettingValue ( int ProfileSettingId, int ValueMapID, struct FString* Value )
{
	static UFunction* pFnGetProfileSettingValue = NULL;

	if ( ! pFnGetProfileSettingValue )
		pFnGetProfileSettingValue = (UFunction*) UObject::GObjObjects()->Data[ 26287 ];

	UOnlinePlayerStorage_execGetProfileSettingValue_Parms GetProfileSettingValue_Parms;
	GetProfileSettingValue_Parms.ProfileSettingId = ProfileSettingId;
	GetProfileSettingValue_Parms.ValueMapID = ValueMapID;

	pFnGetProfileSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValue, &GetProfileSettingValue_Parms, NULL );

	pFnGetProfileSettingValue->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &GetProfileSettingValue_Parms.Value, 0x10 );

	return GetProfileSettingValue_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.IsProfileSettingIdMapped
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )

bool UOnlinePlayerStorage::IsProfileSettingIdMapped ( int ProfileSettingId )
{
	static UFunction* pFnIsProfileSettingIdMapped = NULL;

	if ( ! pFnIsProfileSettingIdMapped )
		pFnIsProfileSettingIdMapped = (UFunction*) UObject::GObjObjects()->Data[ 26284 ];

	UOnlinePlayerStorage_execIsProfileSettingIdMapped_Parms IsProfileSettingIdMapped_Parms;
	IsProfileSettingIdMapped_Parms.ProfileSettingId = ProfileSettingId;

	pFnIsProfileSettingIdMapped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsProfileSettingIdMapped, &IsProfileSettingIdMapped_Parms, NULL );

	pFnIsProfileSettingIdMapped->FunctionFlags |= 0x400;

	return IsProfileSettingIdMapped_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.FindProfileMappingIndexByName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProfileSettingName             ( CPF_Parm )

int UOnlinePlayerStorage::FindProfileMappingIndexByName ( struct FName ProfileSettingName )
{
	static UFunction* pFnFindProfileMappingIndexByName = NULL;

	if ( ! pFnFindProfileMappingIndexByName )
		pFnFindProfileMappingIndexByName = (UFunction*) UObject::GObjObjects()->Data[ 26281 ];

	UOnlinePlayerStorage_execFindProfileMappingIndexByName_Parms FindProfileMappingIndexByName_Parms;
	memcpy ( &FindProfileMappingIndexByName_Parms.ProfileSettingName, &ProfileSettingName, 0x8 );

	pFnFindProfileMappingIndexByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindProfileMappingIndexByName, &FindProfileMappingIndexByName_Parms, NULL );

	pFnFindProfileMappingIndexByName->FunctionFlags |= 0x400;

	return FindProfileMappingIndexByName_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.FindProfileMappingIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )

int UOnlinePlayerStorage::FindProfileMappingIndex ( int ProfileSettingId )
{
	static UFunction* pFnFindProfileMappingIndex = NULL;

	if ( ! pFnFindProfileMappingIndex )
		pFnFindProfileMappingIndex = (UFunction*) UObject::GObjObjects()->Data[ 26278 ];

	UOnlinePlayerStorage_execFindProfileMappingIndex_Parms FindProfileMappingIndex_Parms;
	FindProfileMappingIndex_Parms.ProfileSettingId = ProfileSettingId;

	pFnFindProfileMappingIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindProfileMappingIndex, &FindProfileMappingIndex_Parms, NULL );

	pFnFindProfileMappingIndex->FunctionFlags |= 0x400;

	return FindProfileMappingIndex_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.FindProfileSettingIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )

int UOnlinePlayerStorage::FindProfileSettingIndex ( int ProfileSettingId )
{
	static UFunction* pFnFindProfileSettingIndex = NULL;

	if ( ! pFnFindProfileSettingIndex )
		pFnFindProfileSettingIndex = (UFunction*) UObject::GObjObjects()->Data[ 26275 ];

	UOnlinePlayerStorage_execFindProfileSettingIndex_Parms FindProfileSettingIndex_Parms;
	FindProfileSettingIndex_Parms.ProfileSettingId = ProfileSettingId;

	pFnFindProfileSettingIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindProfileSettingIndex, &FindProfileSettingIndex_Parms, NULL );

	pFnFindProfileSettingIndex->FunctionFlags |= 0x400;

	return FindProfileSettingIndex_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingColumnHeader
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            ProfileSettingId               ( CPF_Parm )

struct FString UOnlinePlayerStorage::GetProfileSettingColumnHeader ( int ProfileSettingId )
{
	static UFunction* pFnGetProfileSettingColumnHeader = NULL;

	if ( ! pFnGetProfileSettingColumnHeader )
		pFnGetProfileSettingColumnHeader = (UFunction*) UObject::GObjObjects()->Data[ 26272 ];

	UOnlinePlayerStorage_execGetProfileSettingColumnHeader_Parms GetProfileSettingColumnHeader_Parms;
	GetProfileSettingColumnHeader_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingColumnHeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingColumnHeader, &GetProfileSettingColumnHeader_Parms, NULL );

	pFnGetProfileSettingColumnHeader->FunctionFlags |= 0x400;

	return GetProfileSettingColumnHeader_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )

struct FName UOnlinePlayerStorage::GetProfileSettingName ( int ProfileSettingId )
{
	static UFunction* pFnGetProfileSettingName = NULL;

	if ( ! pFnGetProfileSettingName )
		pFnGetProfileSettingName = (UFunction*) UObject::GObjObjects()->Data[ 26269 ];

	UOnlinePlayerStorage_execGetProfileSettingName_Parms GetProfileSettingName_Parms;
	GetProfileSettingName_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingName, &GetProfileSettingName_Parms, NULL );

	pFnGetProfileSettingName->FunctionFlags |= 0x400;

	return GetProfileSettingName_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProfileSettingName             ( CPF_Parm )
// int                            ProfileSettingId               ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerStorage::GetProfileSettingId ( struct FName ProfileSettingName, int* ProfileSettingId )
{
	static UFunction* pFnGetProfileSettingId = NULL;

	if ( ! pFnGetProfileSettingId )
		pFnGetProfileSettingId = (UFunction*) UObject::GObjObjects()->Data[ 26265 ];

	UOnlinePlayerStorage_execGetProfileSettingId_Parms GetProfileSettingId_Parms;
	memcpy ( &GetProfileSettingId_Parms.ProfileSettingName, &ProfileSettingName, 0x8 );

	pFnGetProfileSettingId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingId, &GetProfileSettingId_Parms, NULL );

	pFnGetProfileSettingId->FunctionFlags |= 0x400;

	if ( ProfileSettingId )
		*ProfileSettingId = GetProfileSettingId_Parms.ProfileSettingId;

	return GetProfileSettingId_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.NotifySettingValueUpdated
// [0x00120000] 
// Parameters infos:
// struct FName                   SettingName                    ( CPF_Parm )

void UOnlinePlayerStorage::NotifySettingValueUpdated ( struct FName SettingName )
{
	static UFunction* pFnNotifySettingValueUpdated = NULL;

	if ( ! pFnNotifySettingValueUpdated )
		pFnNotifySettingValueUpdated = (UFunction*) UObject::GObjObjects()->Data[ 26263 ];

	UOnlinePlayerStorage_execNotifySettingValueUpdated_Parms NotifySettingValueUpdated_Parms;
	memcpy ( &NotifySettingValueUpdated_Parms.SettingName, &SettingName, 0x8 );

	this->ProcessEvent ( pFnNotifySettingValueUpdated, &NotifySettingValueUpdated_Parms, NULL );
};

// Function Engine.OnlineProfileSettings.ModifyAvailableProfileSettings
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UOnlineProfileSettings::eventModifyAvailableProfileSettings ( )
{
	static UFunction* pFnModifyAvailableProfileSettings = NULL;

	if ( ! pFnModifyAvailableProfileSettings )
		pFnModifyAvailableProfileSettings = (UFunction*) UObject::GObjObjects()->Data[ 26495 ];

	UOnlineProfileSettings_eventModifyAvailableProfileSettings_Parms ModifyAvailableProfileSettings_Parms;

	this->ProcessEvent ( pFnModifyAvailableProfileSettings, &ModifyAvailableProfileSettings_Parms, NULL );
};

// Function Engine.OnlineProfileSettings.SetDefaultVersionNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UOnlineProfileSettings::SetDefaultVersionNumber ( )
{
	static UFunction* pFnSetDefaultVersionNumber = NULL;

	if ( ! pFnSetDefaultVersionNumber )
		pFnSetDefaultVersionNumber = (UFunction*) UObject::GObjObjects()->Data[ 26494 ];

	UOnlineProfileSettings_execSetDefaultVersionNumber_Parms SetDefaultVersionNumber_Parms;

	pFnSetDefaultVersionNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDefaultVersionNumber, &SetDefaultVersionNumber_Parms, NULL );

	pFnSetDefaultVersionNumber->FunctionFlags |= 0x400;
};

// Function Engine.OnlineProfileSettings.GetVersionNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UOnlineProfileSettings::GetVersionNumber ( )
{
	static UFunction* pFnGetVersionNumber = NULL;

	if ( ! pFnGetVersionNumber )
		pFnGetVersionNumber = (UFunction*) UObject::GObjObjects()->Data[ 26492 ];

	UOnlineProfileSettings_execGetVersionNumber_Parms GetVersionNumber_Parms;

	pFnGetVersionNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVersionNumber, &GetVersionNumber_Parms, NULL );

	pFnGetVersionNumber->FunctionFlags |= 0x400;

	return GetVersionNumber_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.AppendVersionToSettings
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UOnlineProfileSettings::AppendVersionToSettings ( )
{
	static UFunction* pFnAppendVersionToSettings = NULL;

	if ( ! pFnAppendVersionToSettings )
		pFnAppendVersionToSettings = (UFunction*) UObject::GObjObjects()->Data[ 26491 ];

	UOnlineProfileSettings_execAppendVersionToSettings_Parms AppendVersionToSettings_Parms;

	pFnAppendVersionToSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAppendVersionToSettings, &AppendVersionToSettings_Parms, NULL );

	pFnAppendVersionToSettings->FunctionFlags |= 0x400;
};

// Function Engine.OnlineProfileSettings.AppendVersionToReadIds
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UOnlineProfileSettings::AppendVersionToReadIds ( )
{
	static UFunction* pFnAppendVersionToReadIds = NULL;

	if ( ! pFnAppendVersionToReadIds )
		pFnAppendVersionToReadIds = (UFunction*) UObject::GObjObjects()->Data[ 26490 ];

	UOnlineProfileSettings_execAppendVersionToReadIds_Parms AppendVersionToReadIds_Parms;

	pFnAppendVersionToReadIds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAppendVersionToReadIds, &AppendVersionToReadIds_Parms, NULL );

	pFnAppendVersionToReadIds->FunctionFlags |= 0x400;
};

// Function Engine.OnlineProfileSettings.SetToDefaults
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UOnlineProfileSettings::eventSetToDefaults ( )
{
	static UFunction* pFnSetToDefaults = NULL;

	if ( ! pFnSetToDefaults )
		pFnSetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 26489 ];

	UOnlineProfileSettings_eventSetToDefaults_Parms SetToDefaults_Parms;

	pFnSetToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetToDefaults, &SetToDefaults_Parms, NULL );

	pFnSetToDefaults->FunctionFlags |= 0x400;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingDefaultFloat
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// float                          DefaultFloat                   ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingDefaultFloat ( int ProfileSettingId, float* DefaultFloat )
{
	static UFunction* pFnGetProfileSettingDefaultFloat = NULL;

	if ( ! pFnGetProfileSettingDefaultFloat )
		pFnGetProfileSettingDefaultFloat = (UFunction*) UObject::GObjObjects()->Data[ 26485 ];

	UOnlineProfileSettings_execGetProfileSettingDefaultFloat_Parms GetProfileSettingDefaultFloat_Parms;
	GetProfileSettingDefaultFloat_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingDefaultFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingDefaultFloat, &GetProfileSettingDefaultFloat_Parms, NULL );

	pFnGetProfileSettingDefaultFloat->FunctionFlags |= 0x400;

	if ( DefaultFloat )
		*DefaultFloat = GetProfileSettingDefaultFloat_Parms.DefaultFloat;

	return GetProfileSettingDefaultFloat_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingDefaultInt
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            DefaultInt                     ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingDefaultInt ( int ProfileSettingId, int* DefaultInt )
{
	static UFunction* pFnGetProfileSettingDefaultInt = NULL;

	if ( ! pFnGetProfileSettingDefaultInt )
		pFnGetProfileSettingDefaultInt = (UFunction*) UObject::GObjObjects()->Data[ 26481 ];

	UOnlineProfileSettings_execGetProfileSettingDefaultInt_Parms GetProfileSettingDefaultInt_Parms;
	GetProfileSettingDefaultInt_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingDefaultInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingDefaultInt, &GetProfileSettingDefaultInt_Parms, NULL );

	pFnGetProfileSettingDefaultInt->FunctionFlags |= 0x400;

	if ( DefaultInt )
		*DefaultInt = GetProfileSettingDefaultInt_Parms.DefaultInt;

	return GetProfileSettingDefaultInt_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingDefaultId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            DefaultId                      ( CPF_Parm | CPF_OutParm )
// int                            ListIndex                      ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingDefaultId ( int ProfileSettingId, int* DefaultId, int* ListIndex )
{
	static UFunction* pFnGetProfileSettingDefaultId = NULL;

	if ( ! pFnGetProfileSettingDefaultId )
		pFnGetProfileSettingDefaultId = (UFunction*) UObject::GObjObjects()->Data[ 26476 ];

	UOnlineProfileSettings_execGetProfileSettingDefaultId_Parms GetProfileSettingDefaultId_Parms;
	GetProfileSettingDefaultId_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingDefaultId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingDefaultId, &GetProfileSettingDefaultId_Parms, NULL );

	pFnGetProfileSettingDefaultId->FunctionFlags |= 0x400;

	if ( DefaultId )
		*DefaultId = GetProfileSettingDefaultId_Parms.DefaultId;

	if ( ListIndex )
		*ListIndex = GetProfileSettingDefaultId_Parms.ListIndex;

	return GetProfileSettingDefaultId_Parms.ReturnValue;
};

// Function Engine.OnlinePlaylistManager.Reset
// [0x00020002] 
// Parameters infos:

void UOnlinePlaylistManager::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 26444 ];

	UOnlinePlaylistManager_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.OnlinePlaylistManager.GetContentIdsFromPlaylist
// [0x00420002] 
// Parameters infos:
// int                            PlaylistId                     ( CPF_Parm )
// struct TArray<int>             ContentIds                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlinePlaylistManager::GetContentIdsFromPlaylist ( int PlaylistId, struct TArray<int>* ContentIds )
{
	static UFunction* pFnGetContentIdsFromPlaylist = NULL;

	if ( ! pFnGetContentIdsFromPlaylist )
		pFnGetContentIdsFromPlaylist = (UFunction*) UObject::GObjObjects()->Data[ 26438 ];

	UOnlinePlaylistManager_execGetContentIdsFromPlaylist_Parms GetContentIdsFromPlaylist_Parms;
	GetContentIdsFromPlaylist_Parms.PlaylistId = PlaylistId;

	this->ProcessEvent ( pFnGetContentIdsFromPlaylist, &GetContentIdsFromPlaylist_Parms, NULL );

	if ( ContentIds )
		memcpy ( ContentIds, &GetContentIdsFromPlaylist_Parms.ContentIds, 0x10 );
};

// Function Engine.OnlinePlaylistManager.GetTeamInfoFromPlaylist
// [0x00420002] 
// Parameters infos:
// int                            PlaylistId                     ( CPF_Parm )
// int                            TeamSize                       ( CPF_Parm | CPF_OutParm )
// int                            TeamCount                      ( CPF_Parm | CPF_OutParm )

void UOnlinePlaylistManager::GetTeamInfoFromPlaylist ( int PlaylistId, int* TeamSize, int* TeamCount )
{
	static UFunction* pFnGetTeamInfoFromPlaylist = NULL;

	if ( ! pFnGetTeamInfoFromPlaylist )
		pFnGetTeamInfoFromPlaylist = (UFunction*) UObject::GObjObjects()->Data[ 26433 ];

	UOnlinePlaylistManager_execGetTeamInfoFromPlaylist_Parms GetTeamInfoFromPlaylist_Parms;
	GetTeamInfoFromPlaylist_Parms.PlaylistId = PlaylistId;

	this->ProcessEvent ( pFnGetTeamInfoFromPlaylist, &GetTeamInfoFromPlaylist_Parms, NULL );

	if ( TeamSize )
		*TeamSize = GetTeamInfoFromPlaylist_Parms.TeamSize;

	if ( TeamCount )
		*TeamCount = GetTeamInfoFromPlaylist_Parms.TeamCount;
};

// Function Engine.OnlinePlaylistManager.PlaylistSupportsDedicatedServers
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlaylistId                     ( CPF_Parm )

bool UOnlinePlaylistManager::PlaylistSupportsDedicatedServers ( int PlaylistId )
{
	static UFunction* pFnPlaylistSupportsDedicatedServers = NULL;

	if ( ! pFnPlaylistSupportsDedicatedServers )
		pFnPlaylistSupportsDedicatedServers = (UFunction*) UObject::GObjObjects()->Data[ 26429 ];

	UOnlinePlaylistManager_execPlaylistSupportsDedicatedServers_Parms PlaylistSupportsDedicatedServers_Parms;
	PlaylistSupportsDedicatedServers_Parms.PlaylistId = PlaylistId;

	this->ProcessEvent ( pFnPlaylistSupportsDedicatedServers, &PlaylistSupportsDedicatedServers_Parms, NULL );

	return PlaylistSupportsDedicatedServers_Parms.ReturnValue;
};

// Function Engine.OnlinePlaylistManager.HasAnyGameSettings
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlaylistId                     ( CPF_Parm )

bool UOnlinePlaylistManager::HasAnyGameSettings ( int PlaylistId )
{
	static UFunction* pFnHasAnyGameSettings = NULL;

	if ( ! pFnHasAnyGameSettings )
		pFnHasAnyGameSettings = (UFunction*) UObject::GObjObjects()->Data[ 26424 ];

	UOnlinePlaylistManager_execHasAnyGameSettings_Parms HasAnyGameSettings_Parms;
	HasAnyGameSettings_Parms.PlaylistId = PlaylistId;

	this->ProcessEvent ( pFnHasAnyGameSettings, &HasAnyGameSettings_Parms, NULL );

	return HasAnyGameSettings_Parms.ReturnValue;
};

// Function Engine.OnlinePlaylistManager.GetGameSettings
// [0x00020002] 
// Parameters infos:
// class UOnlineGameSettings*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlaylistId                     ( CPF_Parm )
// int                            GameSettingsId                 ( CPF_Parm )

class UOnlineGameSettings* UOnlinePlaylistManager::GetGameSettings ( int PlaylistId, int GameSettingsId )
{
	static UFunction* pFnGetGameSettings = NULL;

	if ( ! pFnGetGameSettings )
		pFnGetGameSettings = (UFunction*) UObject::GObjObjects()->Data[ 26418 ];

	UOnlinePlaylistManager_execGetGameSettings_Parms GetGameSettings_Parms;
	GetGameSettings_Parms.PlaylistId = PlaylistId;
	GetGameSettings_Parms.GameSettingsId = GameSettingsId;

	this->ProcessEvent ( pFnGetGameSettings, &GetGameSettings_Parms, NULL );

	return GetGameSettings_Parms.ReturnValue;
};

// Function Engine.OnlinePlaylistManager.FinalizePlaylistObjects
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UOnlinePlaylistManager::FinalizePlaylistObjects ( )
{
	static UFunction* pFnFinalizePlaylistObjects = NULL;

	if ( ! pFnFinalizePlaylistObjects )
		pFnFinalizePlaylistObjects = (UFunction*) UObject::GObjObjects()->Data[ 26417 ];

	UOnlinePlaylistManager_execFinalizePlaylistObjects_Parms FinalizePlaylistObjects_Parms;

	pFnFinalizePlaylistObjects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFinalizePlaylistObjects, &FinalizePlaylistObjects_Parms, NULL );

	pFnFinalizePlaylistObjects->FunctionFlags |= 0x400;
};

// Function Engine.OnlinePlaylistManager.OnReadTitleFileComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlaylistManager::OnReadTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename )
{
	static UFunction* pFnOnReadTitleFileComplete = NULL;

	if ( ! pFnOnReadTitleFileComplete )
		pFnOnReadTitleFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 26412 ];

	UOnlinePlaylistManager_execOnReadTitleFileComplete_Parms OnReadTitleFileComplete_Parms;
	OnReadTitleFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnReadTitleFileComplete_Parms.Filename, &Filename, 0x10 );

	this->ProcessEvent ( pFnOnReadTitleFileComplete, &OnReadTitleFileComplete_Parms, NULL );
};

// Function Engine.OnlinePlaylistManager.DetermineFilesToDownload
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UOnlinePlaylistManager::DetermineFilesToDownload ( )
{
	static UFunction* pFnDetermineFilesToDownload = NULL;

	if ( ! pFnDetermineFilesToDownload )
		pFnDetermineFilesToDownload = (UFunction*) UObject::GObjObjects()->Data[ 26411 ];

	UOnlinePlaylistManager_execDetermineFilesToDownload_Parms DetermineFilesToDownload_Parms;

	pFnDetermineFilesToDownload->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetermineFilesToDownload, &DetermineFilesToDownload_Parms, NULL );

	pFnDetermineFilesToDownload->FunctionFlags |= 0x400;
};

// Function Engine.OnlinePlaylistManager.DownloadPlaylist
// [0x00020002] 
// Parameters infos:

void UOnlinePlaylistManager::DownloadPlaylist ( )
{
	static UFunction* pFnDownloadPlaylist = NULL;

	if ( ! pFnDownloadPlaylist )
		pFnDownloadPlaylist = (UFunction*) UObject::GObjObjects()->Data[ 26405 ];

	UOnlinePlaylistManager_execDownloadPlaylist_Parms DownloadPlaylist_Parms;

	this->ProcessEvent ( pFnDownloadPlaylist, &DownloadPlaylist_Parms, NULL );
};

// Function Engine.OnlinePlaylistManager.OnReadPlaylistComplete
// [0x00120000] 
// Parameters infos:

void UOnlinePlaylistManager::OnReadPlaylistComplete ( )
{
	static UFunction* pFnOnReadPlaylistComplete = NULL;

	if ( ! pFnOnReadPlaylistComplete )
		pFnOnReadPlaylistComplete = (UFunction*) UObject::GObjObjects()->Data[ 26404 ];

	UOnlinePlaylistManager_execOnReadPlaylistComplete_Parms OnReadPlaylistComplete_Parms;

	this->ProcessEvent ( pFnOnReadPlaylistComplete, &OnReadPlaylistComplete_Parms, NULL );
};

// Function Engine.OnlineStats.GetViewName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ViewId                         ( CPF_Parm )

struct FName UOnlineStats::GetViewName ( int ViewId )
{
	static UFunction* pFnGetViewName = NULL;

	if ( ! pFnGetViewName )
		pFnGetViewName = (UFunction*) UObject::GObjObjects()->Data[ 26594 ];

	UOnlineStats_execGetViewName_Parms GetViewName_Parms;
	GetViewName_Parms.ViewId = ViewId;

	pFnGetViewName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewName, &GetViewName_Parms, NULL );

	pFnGetViewName->FunctionFlags |= 0x400;

	return GetViewName_Parms.ReturnValue;
};

// Function Engine.OnlineStats.GetViewId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ViewName                       ( CPF_Parm )
// int                            ViewId                         ( CPF_Parm | CPF_OutParm )

bool UOnlineStats::GetViewId ( struct FName ViewName, int* ViewId )
{
	static UFunction* pFnGetViewId = NULL;

	if ( ! pFnGetViewId )
		pFnGetViewId = (UFunction*) UObject::GObjObjects()->Data[ 26590 ];

	UOnlineStats_execGetViewId_Parms GetViewId_Parms;
	memcpy ( &GetViewId_Parms.ViewName, &ViewName, 0x8 );

	pFnGetViewId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewId, &GetViewId_Parms, NULL );

	pFnGetViewId->FunctionFlags |= 0x400;

	if ( ViewId )
		*ViewId = GetViewId_Parms.ViewId;

	return GetViewId_Parms.ReturnValue;
};

// Function Engine.OnlineStatsRead.GetRankForPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

int UOnlineStatsRead::GetRankForPlayer ( struct FUniqueNetId PlayerID )
{
	static UFunction* pFnGetRankForPlayer = NULL;

	if ( ! pFnGetRankForPlayer )
		pFnGetRankForPlayer = (UFunction*) UObject::GObjObjects()->Data[ 26699 ];

	UOnlineStatsRead_execGetRankForPlayer_Parms GetRankForPlayer_Parms;
	memcpy ( &GetRankForPlayer_Parms.PlayerID, &PlayerID, 0x8 );

	pFnGetRankForPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRankForPlayer, &GetRankForPlayer_Parms, NULL );

	pFnGetRankForPlayer->FunctionFlags |= 0x400;

	return GetRankForPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineStatsRead.AddPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

void UOnlineStatsRead::AddPlayer ( struct FString PlayerName, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnAddPlayer = NULL;

	if ( ! pFnAddPlayer )
		pFnAddPlayer = (UFunction*) UObject::GObjObjects()->Data[ 26696 ];

	UOnlineStatsRead_execAddPlayer_Parms AddPlayer_Parms;
	memcpy ( &AddPlayer_Parms.PlayerName, &PlayerName, 0x10 );
	memcpy ( &AddPlayer_Parms.PlayerID, &PlayerID, 0x8 );

	pFnAddPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddPlayer, &AddPlayer_Parms, NULL );

	pFnAddPlayer->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsRead.SetFloatStatValueForPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// int                            StatColumnNo                   ( CPF_Parm )
// float                          StatValue                      ( CPF_Parm )

bool UOnlineStatsRead::SetFloatStatValueForPlayer ( struct FUniqueNetId PlayerID, int StatColumnNo, float StatValue )
{
	static UFunction* pFnSetFloatStatValueForPlayer = NULL;

	if ( ! pFnSetFloatStatValueForPlayer )
		pFnSetFloatStatValueForPlayer = (UFunction*) UObject::GObjObjects()->Data[ 26691 ];

	UOnlineStatsRead_execSetFloatStatValueForPlayer_Parms SetFloatStatValueForPlayer_Parms;
	memcpy ( &SetFloatStatValueForPlayer_Parms.PlayerID, &PlayerID, 0x8 );
	SetFloatStatValueForPlayer_Parms.StatColumnNo = StatColumnNo;
	SetFloatStatValueForPlayer_Parms.StatValue = StatValue;

	pFnSetFloatStatValueForPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatStatValueForPlayer, &SetFloatStatValueForPlayer_Parms, NULL );

	pFnSetFloatStatValueForPlayer->FunctionFlags |= 0x400;

	return SetFloatStatValueForPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineStatsRead.GetFloatStatValueForPlayer
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// int                            StatColumnNo                   ( CPF_Parm )
// float                          StatValue                      ( CPF_Parm | CPF_OutParm )

bool UOnlineStatsRead::GetFloatStatValueForPlayer ( struct FUniqueNetId PlayerID, int StatColumnNo, float* StatValue )
{
	static UFunction* pFnGetFloatStatValueForPlayer = NULL;

	if ( ! pFnGetFloatStatValueForPlayer )
		pFnGetFloatStatValueForPlayer = (UFunction*) UObject::GObjObjects()->Data[ 26686 ];

	UOnlineStatsRead_execGetFloatStatValueForPlayer_Parms GetFloatStatValueForPlayer_Parms;
	memcpy ( &GetFloatStatValueForPlayer_Parms.PlayerID, &PlayerID, 0x8 );
	GetFloatStatValueForPlayer_Parms.StatColumnNo = StatColumnNo;

	pFnGetFloatStatValueForPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFloatStatValueForPlayer, &GetFloatStatValueForPlayer_Parms, NULL );

	pFnGetFloatStatValueForPlayer->FunctionFlags |= 0x400;

	if ( StatValue )
		*StatValue = GetFloatStatValueForPlayer_Parms.StatValue;

	return GetFloatStatValueForPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineStatsRead.SetIntStatValueForPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// int                            StatColumnNo                   ( CPF_Parm )
// int                            StatValue                      ( CPF_Parm )

bool UOnlineStatsRead::SetIntStatValueForPlayer ( struct FUniqueNetId PlayerID, int StatColumnNo, int StatValue )
{
	static UFunction* pFnSetIntStatValueForPlayer = NULL;

	if ( ! pFnSetIntStatValueForPlayer )
		pFnSetIntStatValueForPlayer = (UFunction*) UObject::GObjObjects()->Data[ 26681 ];

	UOnlineStatsRead_execSetIntStatValueForPlayer_Parms SetIntStatValueForPlayer_Parms;
	memcpy ( &SetIntStatValueForPlayer_Parms.PlayerID, &PlayerID, 0x8 );
	SetIntStatValueForPlayer_Parms.StatColumnNo = StatColumnNo;
	SetIntStatValueForPlayer_Parms.StatValue = StatValue;

	pFnSetIntStatValueForPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIntStatValueForPlayer, &SetIntStatValueForPlayer_Parms, NULL );

	pFnSetIntStatValueForPlayer->FunctionFlags |= 0x400;

	return SetIntStatValueForPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineStatsRead.GetIntStatValueForPlayer
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// int                            StatColumnNo                   ( CPF_Parm )
// int                            StatValue                      ( CPF_Parm | CPF_OutParm )

bool UOnlineStatsRead::GetIntStatValueForPlayer ( struct FUniqueNetId PlayerID, int StatColumnNo, int* StatValue )
{
	static UFunction* pFnGetIntStatValueForPlayer = NULL;

	if ( ! pFnGetIntStatValueForPlayer )
		pFnGetIntStatValueForPlayer = (UFunction*) UObject::GObjObjects()->Data[ 26676 ];

	UOnlineStatsRead_execGetIntStatValueForPlayer_Parms GetIntStatValueForPlayer_Parms;
	memcpy ( &GetIntStatValueForPlayer_Parms.PlayerID, &PlayerID, 0x8 );
	GetIntStatValueForPlayer_Parms.StatColumnNo = StatColumnNo;

	pFnGetIntStatValueForPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetIntStatValueForPlayer, &GetIntStatValueForPlayer_Parms, NULL );

	pFnGetIntStatValueForPlayer->FunctionFlags |= 0x400;

	if ( StatValue )
		*StatValue = GetIntStatValueForPlayer_Parms.StatValue;

	return GetIntStatValueForPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineStatsRead.OnReadComplete
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UOnlineStatsRead::eventOnReadComplete ( )
{
	static UFunction* pFnOnReadComplete = NULL;

	if ( ! pFnOnReadComplete )
		pFnOnReadComplete = (UFunction*) UObject::GObjObjects()->Data[ 26675 ];

	UOnlineStatsRead_eventOnReadComplete_Parms OnReadComplete_Parms;

	this->ProcessEvent ( pFnOnReadComplete, &OnReadComplete_Parms, NULL );
};

// Function Engine.OnlineStatsWrite.DecrementIntStat
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// int                            DecBy                          ( CPF_OptionalParm | CPF_Parm )

void UOnlineStatsWrite::DecrementIntStat ( int StatId, int DecBy )
{
	static UFunction* pFnDecrementIntStat = NULL;

	if ( ! pFnDecrementIntStat )
		pFnDecrementIntStat = (UFunction*) UObject::GObjObjects()->Data[ 26738 ];

	UOnlineStatsWrite_execDecrementIntStat_Parms DecrementIntStat_Parms;
	DecrementIntStat_Parms.StatId = StatId;
	DecrementIntStat_Parms.DecBy = DecBy;

	pFnDecrementIntStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDecrementIntStat, &DecrementIntStat_Parms, NULL );

	pFnDecrementIntStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.DecrementFloatStat
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// float                          DecBy                          ( CPF_OptionalParm | CPF_Parm )

void UOnlineStatsWrite::DecrementFloatStat ( int StatId, float DecBy )
{
	static UFunction* pFnDecrementFloatStat = NULL;

	if ( ! pFnDecrementFloatStat )
		pFnDecrementFloatStat = (UFunction*) UObject::GObjObjects()->Data[ 26735 ];

	UOnlineStatsWrite_execDecrementFloatStat_Parms DecrementFloatStat_Parms;
	DecrementFloatStat_Parms.StatId = StatId;
	DecrementFloatStat_Parms.DecBy = DecBy;

	pFnDecrementFloatStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDecrementFloatStat, &DecrementFloatStat_Parms, NULL );

	pFnDecrementFloatStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.IncrementIntStat
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// int                            IncBy                          ( CPF_OptionalParm | CPF_Parm )

void UOnlineStatsWrite::IncrementIntStat ( int StatId, int IncBy )
{
	static UFunction* pFnIncrementIntStat = NULL;

	if ( ! pFnIncrementIntStat )
		pFnIncrementIntStat = (UFunction*) UObject::GObjObjects()->Data[ 26732 ];

	UOnlineStatsWrite_execIncrementIntStat_Parms IncrementIntStat_Parms;
	IncrementIntStat_Parms.StatId = StatId;
	IncrementIntStat_Parms.IncBy = IncBy;

	pFnIncrementIntStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementIntStat, &IncrementIntStat_Parms, NULL );

	pFnIncrementIntStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.IncrementFloatStat
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// float                          IncBy                          ( CPF_OptionalParm | CPF_Parm )

void UOnlineStatsWrite::IncrementFloatStat ( int StatId, float IncBy )
{
	static UFunction* pFnIncrementFloatStat = NULL;

	if ( ! pFnIncrementFloatStat )
		pFnIncrementFloatStat = (UFunction*) UObject::GObjObjects()->Data[ 26729 ];

	UOnlineStatsWrite_execIncrementFloatStat_Parms IncrementFloatStat_Parms;
	IncrementFloatStat_Parms.StatId = StatId;
	IncrementFloatStat_Parms.IncBy = IncBy;

	pFnIncrementFloatStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementFloatStat, &IncrementFloatStat_Parms, NULL );

	pFnIncrementFloatStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.SetIntStat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UOnlineStatsWrite::SetIntStat ( int StatId, int Value )
{
	static UFunction* pFnSetIntStat = NULL;

	if ( ! pFnSetIntStat )
		pFnSetIntStat = (UFunction*) UObject::GObjObjects()->Data[ 26726 ];

	UOnlineStatsWrite_execSetIntStat_Parms SetIntStat_Parms;
	SetIntStat_Parms.StatId = StatId;
	SetIntStat_Parms.Value = Value;

	pFnSetIntStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIntStat, &SetIntStat_Parms, NULL );

	pFnSetIntStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.SetFloatStat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UOnlineStatsWrite::SetFloatStat ( int StatId, float Value )
{
	static UFunction* pFnSetFloatStat = NULL;

	if ( ! pFnSetFloatStat )
		pFnSetFloatStat = (UFunction*) UObject::GObjObjects()->Data[ 26723 ];

	UOnlineStatsWrite_execSetFloatStat_Parms SetFloatStat_Parms;
	SetFloatStat_Parms.StatId = StatId;
	SetFloatStat_Parms.Value = Value;

	pFnSetFloatStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatStat, &SetFloatStat_Parms, NULL );

	pFnSetFloatStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.GetStatName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StatId                         ( CPF_Parm )

struct FName UOnlineStatsWrite::GetStatName ( int StatId )
{
	static UFunction* pFnGetStatName = NULL;

	if ( ! pFnGetStatName )
		pFnGetStatName = (UFunction*) UObject::GObjObjects()->Data[ 26720 ];

	UOnlineStatsWrite_execGetStatName_Parms GetStatName_Parms;
	GetStatName_Parms.StatId = StatId;

	pFnGetStatName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStatName, &GetStatName_Parms, NULL );

	pFnGetStatName->FunctionFlags |= 0x400;

	return GetStatName_Parms.ReturnValue;
};

// Function Engine.OnlineStatsWrite.GetStatId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StatName                       ( CPF_Parm )
// int                            StatId                         ( CPF_Parm | CPF_OutParm )

bool UOnlineStatsWrite::GetStatId ( struct FName StatName, int* StatId )
{
	static UFunction* pFnGetStatId = NULL;

	if ( ! pFnGetStatId )
		pFnGetStatId = (UFunction*) UObject::GObjObjects()->Data[ 26716 ];

	UOnlineStatsWrite_execGetStatId_Parms GetStatId_Parms;
	memcpy ( &GetStatId_Parms.StatName, &StatName, 0x8 );

	pFnGetStatId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStatId, &GetStatId_Parms, NULL );

	pFnGetStatId->FunctionFlags |= 0x400;

	if ( StatId )
		*StatId = GetStatId_Parms.StatId;

	return GetStatId_Parms.ReturnValue;
};

// Function Engine.OnlineStatsWrite.OnStatsWriteComplete
// [0x00120000] 
// Parameters infos:

void UOnlineStatsWrite::OnStatsWriteComplete ( )
{
	static UFunction* pFnOnStatsWriteComplete = NULL;

	if ( ! pFnOnStatsWriteComplete )
		pFnOnStatsWriteComplete = (UFunction*) UObject::GObjObjects()->Data[ 26715 ];

	UOnlineStatsWrite_execOnStatsWriteComplete_Parms OnStatsWriteComplete_Parms;

	this->ProcessEvent ( pFnOnStatsWriteComplete, &OnStatsWriteComplete_Parms, NULL );
};

// Function Engine.OnlineSubsystem.SetDebugSpewLevel
// [0x00020000] 
// Parameters infos:
// int                            DebugSpewLevel                 ( CPF_Parm )

void UOnlineSubsystem::SetDebugSpewLevel ( int DebugSpewLevel )
{
	static UFunction* pFnSetDebugSpewLevel = NULL;

	if ( ! pFnSetDebugSpewLevel )
		pFnSetDebugSpewLevel = (UFunction*) UObject::GObjObjects()->Data[ 9090 ];

	UOnlineSubsystem_execSetDebugSpewLevel_Parms SetDebugSpewLevel_Parms;
	SetDebugSpewLevel_Parms.DebugSpewLevel = DebugSpewLevel;

	this->ProcessEvent ( pFnSetDebugSpewLevel, &SetDebugSpewLevel_Parms, NULL );
};

// Function Engine.OnlineSubsystem.DumpVoiceRegistration
// [0x00020000] 
// Parameters infos:

void UOnlineSubsystem::DumpVoiceRegistration ( )
{
	static UFunction* pFnDumpVoiceRegistration = NULL;

	if ( ! pFnDumpVoiceRegistration )
		pFnDumpVoiceRegistration = (UFunction*) UObject::GObjObjects()->Data[ 9091 ];

	UOnlineSubsystem_execDumpVoiceRegistration_Parms DumpVoiceRegistration_Parms;

	this->ProcessEvent ( pFnDumpVoiceRegistration, &DumpVoiceRegistration_Parms, NULL );
};

// Function Engine.OnlineSubsystem.DumpNetIds
// [0x00422002] 
// Parameters infos:
// struct FString                 DebugLabel                     ( CPF_Parm | CPF_NeedCtorLink )
// struct TArray<struct FUniqueNetId> Players                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineSubsystem::DumpNetIds ( struct FString DebugLabel, struct TArray<struct FUniqueNetId>* Players )
{
	static UFunction* pFnDumpNetIds = NULL;

	if ( ! pFnDumpNetIds )
		pFnDumpNetIds = (UFunction*) UObject::GObjObjects()->Data[ 9093 ];

	UOnlineSubsystem_execDumpNetIds_Parms DumpNetIds_Parms;
	memcpy ( &DumpNetIds_Parms.DebugLabel, &DebugLabel, 0x10 );

	this->ProcessEvent ( pFnDumpNetIds, &DumpNetIds_Parms, NULL );

	if ( Players )
		memcpy ( Players, &DumpNetIds_Parms.Players, 0x10 );
};

// Function Engine.OnlineSubsystem.DumpSessionState
// [0x00020002] 
// Parameters infos:

void UOnlineSubsystem::DumpSessionState ( )
{
	static UFunction* pFnDumpSessionState = NULL;

	if ( ! pFnDumpSessionState )
		pFnDumpSessionState = (UFunction*) UObject::GObjObjects()->Data[ 9094 ];

	UOnlineSubsystem_execDumpSessionState_Parms DumpSessionState_Parms;

	this->ProcessEvent ( pFnDumpSessionState, &DumpSessionState_Parms, NULL );
};

// Function Engine.OnlineSubsystem.DumpGameSettings
// [0x00022002] 
// Parameters infos:
// class UOnlineGameSettings*     GameSettings                   ( CPF_Const | CPF_Parm )

void UOnlineSubsystem::DumpGameSettings ( class UOnlineGameSettings* GameSettings )
{
	static UFunction* pFnDumpGameSettings = NULL;

	if ( ! pFnDumpGameSettings )
		pFnDumpGameSettings = (UFunction*) UObject::GObjObjects()->Data[ 9101 ];

	UOnlineSubsystem_execDumpGameSettings_Parms DumpGameSettings_Parms;
	DumpGameSettings_Parms.GameSettings = GameSettings;

	this->ProcessEvent ( pFnDumpGameSettings, &DumpGameSettings_Parms, NULL );
};

// Function Engine.OnlineSubsystem.GetNumSupportedLogins
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UOnlineSubsystem::GetNumSupportedLogins ( )
{
	static UFunction* pFnGetNumSupportedLogins = NULL;

	if ( ! pFnGetNumSupportedLogins )
		pFnGetNumSupportedLogins = (UFunction*) UObject::GObjObjects()->Data[ 9106 ];

	UOnlineSubsystem_execGetNumSupportedLogins_Parms GetNumSupportedLogins_Parms;

	pFnGetNumSupportedLogins->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumSupportedLogins, &GetNumSupportedLogins_Parms, NULL );

	pFnGetNumSupportedLogins->FunctionFlags |= 0x400;

	return GetNumSupportedLogins_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.GetBuildUniqueId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UOnlineSubsystem::GetBuildUniqueId ( )
{
	static UFunction* pFnGetBuildUniqueId = NULL;

	if ( ! pFnGetBuildUniqueId )
		pFnGetBuildUniqueId = (UFunction*) UObject::GObjObjects()->Data[ 9128 ];

	UOnlineSubsystem_execGetBuildUniqueId_Parms GetBuildUniqueId_Parms;

	pFnGetBuildUniqueId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBuildUniqueId, &GetBuildUniqueId_Parms, NULL );

	pFnGetBuildUniqueId->FunctionFlags |= 0x400;

	return GetBuildUniqueId_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.AreUniqueNetIdsEqual
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            NetIdA                         ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FUniqueNetId            NetIdB                         ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineSubsystem::AreUniqueNetIdsEqual ( struct FUniqueNetId* NetIdA, struct FUniqueNetId* NetIdB )
{
	static UFunction* pFnAreUniqueNetIdsEqual = NULL;

	if ( ! pFnAreUniqueNetIdsEqual )
		pFnAreUniqueNetIdsEqual = (UFunction*) UObject::GObjObjects()->Data[ 9130 ];

	UOnlineSubsystem_execAreUniqueNetIdsEqual_Parms AreUniqueNetIdsEqual_Parms;

	pFnAreUniqueNetIdsEqual->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAreUniqueNetIdsEqual, &AreUniqueNetIdsEqual_Parms, NULL );

	pFnAreUniqueNetIdsEqual->FunctionFlags |= 0x400;

	if ( NetIdA )
		memcpy ( NetIdA, &AreUniqueNetIdsEqual_Parms.NetIdA, 0x8 );

	if ( NetIdB )
		memcpy ( NetIdB, &AreUniqueNetIdsEqual_Parms.NetIdB, 0x8 );

	return AreUniqueNetIdsEqual_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.StringToUniqueNetId
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UniqueNetIdString              ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            out_UniqueId                   ( CPF_Parm | CPF_OutParm )

bool UOnlineSubsystem::StringToUniqueNetId ( struct FString UniqueNetIdString, struct FUniqueNetId* out_UniqueId )
{
	static UFunction* pFnStringToUniqueNetId = NULL;

	if ( ! pFnStringToUniqueNetId )
		pFnStringToUniqueNetId = (UFunction*) UObject::GObjObjects()->Data[ 9132 ];

	UOnlineSubsystem_execStringToUniqueNetId_Parms StringToUniqueNetId_Parms;
	memcpy ( &StringToUniqueNetId_Parms.UniqueNetIdString, &UniqueNetIdString, 0x10 );

	pFnStringToUniqueNetId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStringToUniqueNetId, &StringToUniqueNetId_Parms, NULL );

	pFnStringToUniqueNetId->FunctionFlags |= 0x400;

	if ( out_UniqueId )
		memcpy ( out_UniqueId, &StringToUniqueNetId_Parms.out_UniqueId, 0x8 );

	return StringToUniqueNetId_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.UniqueNetIdToString
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FUniqueNetId            IdToConvert                    ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FString UOnlineSubsystem::UniqueNetIdToString ( struct FUniqueNetId* IdToConvert )
{
	static UFunction* pFnUniqueNetIdToString = NULL;

	if ( ! pFnUniqueNetIdToString )
		pFnUniqueNetIdToString = (UFunction*) UObject::GObjObjects()->Data[ 9099 ];

	UOnlineSubsystem_execUniqueNetIdToString_Parms UniqueNetIdToString_Parms;

	pFnUniqueNetIdToString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUniqueNetIdToString, &UniqueNetIdToString_Parms, NULL );

	pFnUniqueNetIdToString->FunctionFlags |= 0x400;

	if ( IdToConvert )
		memcpy ( IdToConvert, &UniqueNetIdToString_Parms.IdToConvert, 0x8 );

	return UniqueNetIdToString_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.GetNamedInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InterfaceName                  ( CPF_Parm )

class UObject* UOnlineSubsystem::eventGetNamedInterface ( struct FName InterfaceName )
{
	static UFunction* pFnGetNamedInterface = NULL;

	if ( ! pFnGetNamedInterface )
		pFnGetNamedInterface = (UFunction*) UObject::GObjObjects()->Data[ 9139 ];

	UOnlineSubsystem_eventGetNamedInterface_Parms GetNamedInterface_Parms;
	memcpy ( &GetNamedInterface_Parms.InterfaceName, &InterfaceName, 0x8 );

	this->ProcessEvent ( pFnGetNamedInterface, &GetNamedInterface_Parms, NULL );

	return GetNamedInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetNamedInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   InterfaceName                  ( CPF_Parm )
// class UObject*                 NewInterface                   ( CPF_Parm )

void UOnlineSubsystem::eventSetNamedInterface ( struct FName InterfaceName, class UObject* NewInterface )
{
	static UFunction* pFnSetNamedInterface = NULL;

	if ( ! pFnSetNamedInterface )
		pFnSetNamedInterface = (UFunction*) UObject::GObjObjects()->Data[ 9142 ];

	UOnlineSubsystem_eventSetNamedInterface_Parms SetNamedInterface_Parms;
	memcpy ( &SetNamedInterface_Parms.InterfaceName, &InterfaceName, 0x8 );
	SetNamedInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetNamedInterface, &SetNamedInterface_Parms, NULL );
};

// Function Engine.OnlineSubsystem.SetPartyChatInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetPartyChatInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetPartyChatInterface = NULL;

	if ( ! pFnSetPartyChatInterface )
		pFnSetPartyChatInterface = (UFunction*) UObject::GObjObjects()->Data[ 9146 ];

	UOnlineSubsystem_eventSetPartyChatInterface_Parms SetPartyChatInterface_Parms;
	SetPartyChatInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetPartyChatInterface, &SetPartyChatInterface_Parms, NULL );

	return SetPartyChatInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetNewsInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetNewsInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetNewsInterface = NULL;

	if ( ! pFnSetNewsInterface )
		pFnSetNewsInterface = (UFunction*) UObject::GObjObjects()->Data[ 9150 ];

	UOnlineSubsystem_eventSetNewsInterface_Parms SetNewsInterface_Parms;
	SetNewsInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetNewsInterface, &SetNewsInterface_Parms, NULL );

	return SetNewsInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetStatsInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetStatsInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetStatsInterface = NULL;

	if ( ! pFnSetStatsInterface )
		pFnSetStatsInterface = (UFunction*) UObject::GObjObjects()->Data[ 9153 ];

	UOnlineSubsystem_eventSetStatsInterface_Parms SetStatsInterface_Parms;
	SetStatsInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetStatsInterface, &SetStatsInterface_Parms, NULL );

	return SetStatsInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetVoiceInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetVoiceInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetVoiceInterface = NULL;

	if ( ! pFnSetVoiceInterface )
		pFnSetVoiceInterface = (UFunction*) UObject::GObjObjects()->Data[ 9156 ];

	UOnlineSubsystem_eventSetVoiceInterface_Parms SetVoiceInterface_Parms;
	SetVoiceInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetVoiceInterface, &SetVoiceInterface_Parms, NULL );

	return SetVoiceInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetContentInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetContentInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetContentInterface = NULL;

	if ( ! pFnSetContentInterface )
		pFnSetContentInterface = (UFunction*) UObject::GObjObjects()->Data[ 9159 ];

	UOnlineSubsystem_eventSetContentInterface_Parms SetContentInterface_Parms;
	SetContentInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetContentInterface, &SetContentInterface_Parms, NULL );

	return SetContentInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetGameInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetGameInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetGameInterface = NULL;

	if ( ! pFnSetGameInterface )
		pFnSetGameInterface = (UFunction*) UObject::GObjObjects()->Data[ 9162 ];

	UOnlineSubsystem_eventSetGameInterface_Parms SetGameInterface_Parms;
	SetGameInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetGameInterface, &SetGameInterface_Parms, NULL );

	return SetGameInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetSystemInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetSystemInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetSystemInterface = NULL;

	if ( ! pFnSetSystemInterface )
		pFnSetSystemInterface = (UFunction*) UObject::GObjObjects()->Data[ 9165 ];

	UOnlineSubsystem_eventSetSystemInterface_Parms SetSystemInterface_Parms;
	SetSystemInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetSystemInterface, &SetSystemInterface_Parms, NULL );

	return SetSystemInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetPlayerInterfaceEx
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetPlayerInterfaceEx ( class UObject* NewInterface )
{
	static UFunction* pFnSetPlayerInterfaceEx = NULL;

	if ( ! pFnSetPlayerInterfaceEx )
		pFnSetPlayerInterfaceEx = (UFunction*) UObject::GObjObjects()->Data[ 9168 ];

	UOnlineSubsystem_eventSetPlayerInterfaceEx_Parms SetPlayerInterfaceEx_Parms;
	SetPlayerInterfaceEx_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetPlayerInterfaceEx, &SetPlayerInterfaceEx_Parms, NULL );

	return SetPlayerInterfaceEx_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetPlayerInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetPlayerInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetPlayerInterface = NULL;

	if ( ! pFnSetPlayerInterface )
		pFnSetPlayerInterface = (UFunction*) UObject::GObjObjects()->Data[ 9171 ];

	UOnlineSubsystem_eventSetPlayerInterface_Parms SetPlayerInterface_Parms;
	SetPlayerInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetPlayerInterface, &SetPlayerInterface_Parms, NULL );

	return SetPlayerInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetAccountInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetAccountInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetAccountInterface = NULL;

	if ( ! pFnSetAccountInterface )
		pFnSetAccountInterface = (UFunction*) UObject::GObjObjects()->Data[ 9174 ];

	UOnlineSubsystem_eventSetAccountInterface_Parms SetAccountInterface_Parms;
	SetAccountInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetAccountInterface, &SetAccountInterface_Parms, NULL );

	return SetAccountInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.Exit
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UOnlineSubsystem::eventExit ( )
{
	static UFunction* pFnExit = NULL;

	if ( ! pFnExit )
		pFnExit = (UFunction*) UObject::GObjObjects()->Data[ 9177 ];

	UOnlineSubsystem_eventExit_Parms Exit_Parms;

	this->ProcessEvent ( pFnExit, &Exit_Parms, NULL );
};

// Function Engine.OnlineSubsystem.PostInit
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineSubsystem::eventPostInit ( )
{
	static UFunction* pFnPostInit = NULL;

	if ( ! pFnPostInit )
		pFnPostInit = (UFunction*) UObject::GObjObjects()->Data[ 9180 ];

	UOnlineSubsystem_eventPostInit_Parms PostInit_Parms;

	this->ProcessEvent ( pFnPostInit, &PostInit_Parms, NULL );

	return PostInit_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.Init
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineSubsystem::eventInit ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 9181 ];

	UOnlineSubsystem_eventInit_Parms Init_Parms;

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;

	return Init_Parms.ReturnValue;
};

// Function Engine.Player.SwitchController
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void UPlayer::SwitchController ( class APlayerController* PC )
{
	static UFunction* pFnSwitchController = NULL;

	if ( ! pFnSwitchController )
		pFnSwitchController = (UFunction*) UObject::GObjObjects()->Data[ 23417 ];

	UPlayer_execSwitchController_Parms SwitchController_Parms;
	SwitchController_Parms.PC = PC;

	pFnSwitchController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwitchController, &SwitchController_Parms, NULL );

	pFnSwitchController->FunctionFlags |= 0x400;
};

// Function Engine.LocalPlayer.GetNickname
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ULocalPlayer::eventGetNickname ( )
{
	static UFunction* pFnGetNickname = NULL;

	if ( ! pFnGetNickname )
		pFnGetNickname = (UFunction*) UObject::GObjObjects()->Data[ 23507 ];

	ULocalPlayer_eventGetNickname_Parms GetNickname_Parms;

	this->ProcessEvent ( pFnGetNickname, &GetNickname_Parms, NULL );

	return GetNickname_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.GetUniqueNetId
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FUniqueNetId            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FUniqueNetId ULocalPlayer::eventGetUniqueNetId ( )
{
	static UFunction* pFnGetUniqueNetId = NULL;

	if ( ! pFnGetUniqueNetId )
		pFnGetUniqueNetId = (UFunction*) UObject::GObjObjects()->Data[ 23503 ];

	ULocalPlayer_eventGetUniqueNetId_Parms GetUniqueNetId_Parms;

	this->ProcessEvent ( pFnGetUniqueNetId, &GetUniqueNetId_Parms, NULL );

	return GetUniqueNetId_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.DeProject
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector2D               RelativeScreenPos              ( CPF_Parm )
// struct FVector                 WorldOrigin                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 WorldDirection                 ( CPF_Parm | CPF_OutParm )

void ULocalPlayer::DeProject ( struct FVector2D RelativeScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection )
{
	static UFunction* pFnDeProject = NULL;

	if ( ! pFnDeProject )
		pFnDeProject = (UFunction*) UObject::GObjObjects()->Data[ 23499 ];

	ULocalPlayer_execDeProject_Parms DeProject_Parms;
	memcpy ( &DeProject_Parms.RelativeScreenPos, &RelativeScreenPos, 0x8 );

	pFnDeProject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeProject, &DeProject_Parms, NULL );

	pFnDeProject->FunctionFlags |= 0x400;

	if ( WorldOrigin )
		memcpy ( WorldOrigin, &DeProject_Parms.WorldOrigin, 0xC );

	if ( WorldDirection )
		memcpy ( WorldDirection, &DeProject_Parms.WorldDirection, 0xC );
};

// Function Engine.LocalPlayer.TouchPlayerPostProcessChain
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ULocalPlayer::TouchPlayerPostProcessChain ( )
{
	static UFunction* pFnTouchPlayerPostProcessChain = NULL;

	if ( ! pFnTouchPlayerPostProcessChain )
		pFnTouchPlayerPostProcessChain = (UFunction*) UObject::GObjObjects()->Data[ 23498 ];

	ULocalPlayer_execTouchPlayerPostProcessChain_Parms TouchPlayerPostProcessChain_Parms;

	pFnTouchPlayerPostProcessChain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTouchPlayerPostProcessChain, &TouchPlayerPostProcessChain_Parms, NULL );

	pFnTouchPlayerPostProcessChain->FunctionFlags |= 0x400;
};

// Function Engine.LocalPlayer.GetPostProcessChain
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPostProcessChain*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InIndex                        ( CPF_Parm )

class UPostProcessChain* ULocalPlayer::GetPostProcessChain ( int InIndex )
{
	static UFunction* pFnGetPostProcessChain = NULL;

	if ( ! pFnGetPostProcessChain )
		pFnGetPostProcessChain = (UFunction*) UObject::GObjObjects()->Data[ 23495 ];

	ULocalPlayer_execGetPostProcessChain_Parms GetPostProcessChain_Parms;
	GetPostProcessChain_Parms.InIndex = InIndex;

	pFnGetPostProcessChain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPostProcessChain, &GetPostProcessChain_Parms, NULL );

	pFnGetPostProcessChain->FunctionFlags |= 0x400;

	return GetPostProcessChain_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.RemoveAllPostProcessingChains
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ULocalPlayer::RemoveAllPostProcessingChains ( )
{
	static UFunction* pFnRemoveAllPostProcessingChains = NULL;

	if ( ! pFnRemoveAllPostProcessingChains )
		pFnRemoveAllPostProcessingChains = (UFunction*) UObject::GObjObjects()->Data[ 23493 ];

	ULocalPlayer_execRemoveAllPostProcessingChains_Parms RemoveAllPostProcessingChains_Parms;

	pFnRemoveAllPostProcessingChains->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveAllPostProcessingChains, &RemoveAllPostProcessingChains_Parms, NULL );

	pFnRemoveAllPostProcessingChains->FunctionFlags |= 0x400;

	return RemoveAllPostProcessingChains_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.RemovePostProcessingChain
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InIndex                        ( CPF_Parm )

bool ULocalPlayer::RemovePostProcessingChain ( int InIndex )
{
	static UFunction* pFnRemovePostProcessingChain = NULL;

	if ( ! pFnRemovePostProcessingChain )
		pFnRemovePostProcessingChain = (UFunction*) UObject::GObjObjects()->Data[ 23490 ];

	ULocalPlayer_execRemovePostProcessingChain_Parms RemovePostProcessingChain_Parms;
	RemovePostProcessingChain_Parms.InIndex = InIndex;

	pFnRemovePostProcessingChain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemovePostProcessingChain, &RemovePostProcessingChain_Parms, NULL );

	pFnRemovePostProcessingChain->FunctionFlags |= 0x400;

	return RemovePostProcessingChain_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.InsertPostProcessingChain
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPostProcessChain*       InChain                        ( CPF_Parm )
// int                            InIndex                        ( CPF_Parm )
// unsigned long                  bInClone                       ( CPF_Parm )

bool ULocalPlayer::InsertPostProcessingChain ( class UPostProcessChain* InChain, int InIndex, unsigned long bInClone )
{
	static UFunction* pFnInsertPostProcessingChain = NULL;

	if ( ! pFnInsertPostProcessingChain )
		pFnInsertPostProcessingChain = (UFunction*) UObject::GObjObjects()->Data[ 23485 ];

	ULocalPlayer_execInsertPostProcessingChain_Parms InsertPostProcessingChain_Parms;
	InsertPostProcessingChain_Parms.InChain = InChain;
	InsertPostProcessingChain_Parms.InIndex = InIndex;
	InsertPostProcessingChain_Parms.bInClone = bInClone;

	pFnInsertPostProcessingChain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInsertPostProcessingChain, &InsertPostProcessingChain_Parms, NULL );

	pFnInsertPostProcessingChain->FunctionFlags |= 0x400;

	return InsertPostProcessingChain_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.SetControllerId
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            NewControllerId                ( CPF_Parm )

void ULocalPlayer::SetControllerId ( int NewControllerId )
{
	static UFunction* pFnSetControllerId = NULL;

	if ( ! pFnSetControllerId )
		pFnSetControllerId = (UFunction*) UObject::GObjObjects()->Data[ 23481 ];

	ULocalPlayer_execSetControllerId_Parms SetControllerId_Parms;
	SetControllerId_Parms.NewControllerId = NewControllerId;

	this->ProcessEvent ( pFnSetControllerId, &SetControllerId_Parms, NULL );
};

// Function Engine.LocalPlayer.ClearPostProcessSettingsOverride
// [0x00024102] 
// Parameters infos:
// float                          RecoveryTime                   ( CPF_OptionalParm | CPF_Parm )

void ULocalPlayer::ClearPostProcessSettingsOverride ( float RecoveryTime )
{
	static UFunction* pFnClearPostProcessSettingsOverride = NULL;

	if ( ! pFnClearPostProcessSettingsOverride )
		pFnClearPostProcessSettingsOverride = (UFunction*) UObject::GObjObjects()->Data[ 23477 ];

	ULocalPlayer_execClearPostProcessSettingsOverride_Parms ClearPostProcessSettingsOverride_Parms;
	ClearPostProcessSettingsOverride_Parms.RecoveryTime = RecoveryTime;

	this->ProcessEvent ( pFnClearPostProcessSettingsOverride, &ClearPostProcessSettingsOverride_Parms, NULL );
};

// Function Engine.LocalPlayer.UpdateOverridePostProcessSettings
// [0x00020102] 
// Parameters infos:
// struct FPostProcessSettings    OverrideSettings               ( CPF_Parm | CPF_NeedCtorLink )

void ULocalPlayer::UpdateOverridePostProcessSettings ( struct FPostProcessSettings OverrideSettings )
{
	static UFunction* pFnUpdateOverridePostProcessSettings = NULL;

	if ( ! pFnUpdateOverridePostProcessSettings )
		pFnUpdateOverridePostProcessSettings = (UFunction*) UObject::GObjObjects()->Data[ 23475 ];

	ULocalPlayer_execUpdateOverridePostProcessSettings_Parms UpdateOverridePostProcessSettings_Parms;
	memcpy ( &UpdateOverridePostProcessSettings_Parms.OverrideSettings, &OverrideSettings, 0xE0 );

	this->ProcessEvent ( pFnUpdateOverridePostProcessSettings, &UpdateOverridePostProcessSettings_Parms, NULL );
};

// Function Engine.LocalPlayer.OverridePostProcessSettings
// [0x00020102] 
// Parameters infos:
// struct FPostProcessSettings    OverrideSettings               ( CPF_Parm | CPF_NeedCtorLink )
// float                          StartBlendTime                 ( CPF_Parm )

void ULocalPlayer::OverridePostProcessSettings ( struct FPostProcessSettings OverrideSettings, float StartBlendTime )
{
	static UFunction* pFnOverridePostProcessSettings = NULL;

	if ( ! pFnOverridePostProcessSettings )
		pFnOverridePostProcessSettings = (UFunction*) UObject::GObjObjects()->Data[ 23468 ];

	ULocalPlayer_execOverridePostProcessSettings_Parms OverridePostProcessSettings_Parms;
	memcpy ( &OverridePostProcessSettings_Parms.OverrideSettings, &OverrideSettings, 0xE0 );
	OverridePostProcessSettings_Parms.StartBlendTime = StartBlendTime;

	this->ProcessEvent ( pFnOverridePostProcessSettings, &OverridePostProcessSettings_Parms, NULL );
};

// Function Engine.LocalPlayer.ZeroOverridePPDeltaSettings
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ULocalPlayer::ZeroOverridePPDeltaSettings ( )
{
	static UFunction* pFnZeroOverridePPDeltaSettings = NULL;

	if ( ! pFnZeroOverridePPDeltaSettings )
		pFnZeroOverridePPDeltaSettings = (UFunction*) UObject::GObjObjects()->Data[ 23467 ];

	ULocalPlayer_execZeroOverridePPDeltaSettings_Parms ZeroOverridePPDeltaSettings_Parms;

	pFnZeroOverridePPDeltaSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnZeroOverridePPDeltaSettings, &ZeroOverridePPDeltaSettings_Parms, NULL );

	pFnZeroOverridePPDeltaSettings->FunctionFlags |= 0x400;
};

// Function Engine.LocalPlayer.GetActorVisibility
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TestActor                      ( CPF_Parm )

bool ULocalPlayer::GetActorVisibility ( class AActor* TestActor )
{
	static UFunction* pFnGetActorVisibility = NULL;

	if ( ! pFnGetActorVisibility )
		pFnGetActorVisibility = (UFunction*) UObject::GObjObjects()->Data[ 23464 ];

	ULocalPlayer_execGetActorVisibility_Parms GetActorVisibility_Parms;
	GetActorVisibility_Parms.TestActor = TestActor;

	pFnGetActorVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActorVisibility, &GetActorVisibility_Parms, NULL );

	pFnGetActorVisibility->FunctionFlags |= 0x400;

	return GetActorVisibility_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.SendSplitJoin
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ULocalPlayer::SendSplitJoin ( )
{
	static UFunction* pFnSendSplitJoin = NULL;

	if ( ! pFnSendSplitJoin )
		pFnSendSplitJoin = (UFunction*) UObject::GObjObjects()->Data[ 22210 ];

	ULocalPlayer_execSendSplitJoin_Parms SendSplitJoin_Parms;

	pFnSendSplitJoin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendSplitJoin, &SendSplitJoin_Parms, NULL );

	pFnSendSplitJoin->FunctionFlags |= 0x400;
};

// Function Engine.LocalPlayer.SpawnPlayActor
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ULocalPlayer::SpawnPlayActor ( struct FString URL, struct FString* OutError )
{
	static UFunction* pFnSpawnPlayActor = NULL;

	if ( ! pFnSpawnPlayActor )
		pFnSpawnPlayActor = (UFunction*) UObject::GObjObjects()->Data[ 22207 ];

	ULocalPlayer_execSpawnPlayActor_Parms SpawnPlayActor_Parms;
	memcpy ( &SpawnPlayActor_Parms.URL, &URL, 0x10 );

	pFnSpawnPlayActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnPlayActor, &SpawnPlayActor_Parms, NULL );

	pFnSpawnPlayActor->FunctionFlags |= 0x400;

	if ( OutError )
		memcpy ( OutError, &SpawnPlayActor_Parms.OutError, 0x10 );

	return SpawnPlayActor_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.BioRecalculatePostProcessEffects
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ULocalPlayer::BioRecalculatePostProcessEffects ( )
{
	static UFunction* pFnBioRecalculatePostProcessEffects = NULL;

	if ( ! pFnBioRecalculatePostProcessEffects )
		pFnBioRecalculatePostProcessEffects = (UFunction*) UObject::GObjObjects()->Data[ 23461 ];

	ULocalPlayer_execBioRecalculatePostProcessEffects_Parms BioRecalculatePostProcessEffects_Parms;

	pFnBioRecalculatePostProcessEffects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioRecalculatePostProcessEffects, &BioRecalculatePostProcessEffects_Parms, NULL );

	pFnBioRecalculatePostProcessEffects->FunctionFlags |= 0x400;
};

// Function Engine.LocalPlayer.BioRemovePostProcessEffect
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPostProcessEffect*      pEffect                        ( CPF_Parm )

void ULocalPlayer::BioRemovePostProcessEffect ( class UPostProcessEffect* pEffect )
{
	static UFunction* pFnBioRemovePostProcessEffect = NULL;

	if ( ! pFnBioRemovePostProcessEffect )
		pFnBioRemovePostProcessEffect = (UFunction*) UObject::GObjObjects()->Data[ 23459 ];

	ULocalPlayer_execBioRemovePostProcessEffect_Parms BioRemovePostProcessEffect_Parms;
	BioRemovePostProcessEffect_Parms.pEffect = pEffect;

	pFnBioRemovePostProcessEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioRemovePostProcessEffect, &BioRemovePostProcessEffect_Parms, NULL );

	pFnBioRemovePostProcessEffect->FunctionFlags |= 0x400;
};

// Function Engine.LocalPlayer.BioAddPostProcessEffect
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPostProcessEffect*      pEffect                        ( CPF_Parm )
// class UObject*                 pOwner                         ( CPF_Parm )
// unsigned char                  nCombineType                   ( CPF_Parm )

void ULocalPlayer::BioAddPostProcessEffect ( class UPostProcessEffect* pEffect, class UObject* pOwner, unsigned char nCombineType )
{
	static UFunction* pFnBioAddPostProcessEffect = NULL;

	if ( ! pFnBioAddPostProcessEffect )
		pFnBioAddPostProcessEffect = (UFunction*) UObject::GObjObjects()->Data[ 23455 ];

	ULocalPlayer_execBioAddPostProcessEffect_Parms BioAddPostProcessEffect_Parms;
	BioAddPostProcessEffect_Parms.pEffect = pEffect;
	BioAddPostProcessEffect_Parms.pOwner = pOwner;
	BioAddPostProcessEffect_Parms.nCombineType = nCombineType;

	pFnBioAddPostProcessEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioAddPostProcessEffect, &BioAddPostProcessEffect_Parms, NULL );

	pFnBioAddPostProcessEffect->FunctionFlags |= 0x400;
};

// Function Engine.PostProcessChain.FindPostProcessEffect
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UPostProcessEffect*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   EffectName                     ( CPF_Parm )

class UPostProcessEffect* UPostProcessChain::FindPostProcessEffect ( struct FName EffectName )
{
	static UFunction* pFnFindPostProcessEffect = NULL;

	if ( ! pFnFindPostProcessEffect )
		pFnFindPostProcessEffect = (UFunction*) UObject::GObjObjects()->Data[ 23433 ];

	UPostProcessChain_execFindPostProcessEffect_Parms FindPostProcessEffect_Parms;
	memcpy ( &FindPostProcessEffect_Parms.EffectName, &EffectName, 0x8 );

	this->ProcessEvent ( pFnFindPostProcessEffect, &FindPostProcessEffect_Parms, NULL );

	return FindPostProcessEffect_Parms.ReturnValue;
};

// Function Engine.ReachSpec.IsBlocked
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UReachSpec::IsBlocked ( )
{
	static UFunction* pFnIsBlocked = NULL;

	if ( ! pFnIsBlocked )
		pFnIsBlocked = (UFunction*) UObject::GObjObjects()->Data[ 11992 ];

	UReachSpec_execIsBlocked_Parms IsBlocked_Parms;

	pFnIsBlocked->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsBlocked, &IsBlocked_Parms, NULL );

	pFnIsBlocked->FunctionFlags |= 0x400;

	return IsBlocked_Parms.ReturnValue;
};

// Function Engine.ReachSpec.IsBlockedFor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool UReachSpec::IsBlockedFor ( class APawn* P )
{
	static UFunction* pFnIsBlockedFor = NULL;

	if ( ! pFnIsBlockedFor )
		pFnIsBlockedFor = (UFunction*) UObject::GObjObjects()->Data[ 11989 ];

	UReachSpec_execIsBlockedFor_Parms IsBlockedFor_Parms;
	IsBlockedFor_Parms.P = P;

	this->ProcessEvent ( pFnIsBlockedFor, &IsBlockedFor_Parms, NULL );

	return IsBlockedFor_Parms.ReturnValue;
};

// Function Engine.ReachSpec.GetDirection
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UReachSpec::GetDirection ( )
{
	static UFunction* pFnGetDirection = NULL;

	if ( ! pFnGetDirection )
		pFnGetDirection = (UFunction*) UObject::GObjObjects()->Data[ 11987 ];

	UReachSpec_execGetDirection_Parms GetDirection_Parms;

	pFnGetDirection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDirection, &GetDirection_Parms, NULL );

	pFnGetDirection->FunctionFlags |= 0x400;

	return GetDirection_Parms.ReturnValue;
};

// Function Engine.ReachSpec.GetEnd
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ANavigationPoint* UReachSpec::GetEnd ( )
{
	static UFunction* pFnGetEnd = NULL;

	if ( ! pFnGetEnd )
		pFnGetEnd = (UFunction*) UObject::GObjObjects()->Data[ 11985 ];

	UReachSpec_execGetEnd_Parms GetEnd_Parms;

	pFnGetEnd->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEnd, &GetEnd_Parms, NULL );

	pFnGetEnd->FunctionFlags |= 0x400;

	return GetEnd_Parms.ReturnValue;
};

// Function Engine.ReachSpec.CostFor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

int UReachSpec::CostFor ( class APawn* P )
{
	static UFunction* pFnCostFor = NULL;

	if ( ! pFnCostFor )
		pFnCostFor = (UFunction*) UObject::GObjObjects()->Data[ 11982 ];

	UReachSpec_execCostFor_Parms CostFor_Parms;
	CostFor_Parms.P = P;

	pFnCostFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCostFor, &CostFor_Parms, NULL );

	pFnCostFor->FunctionFlags |= 0x400;

	return CostFor_Parms.ReturnValue;
};

// Function Engine.SFXModule.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXModule::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 30356 ];

	USFXModule_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.SFXModule.Tick
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void USFXModule::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 30354 ];

	USFXModule_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.SavedMove.GetDebugString
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USavedMove::GetDebugString ( )
{
	static UFunction* pFnGetDebugString = NULL;

	if ( ! pFnGetDebugString )
		pFnGetDebugString = (UFunction*) UObject::GObjObjects()->Data[ 10622 ];

	USavedMove_execGetDebugString_Parms GetDebugString_Parms;

	this->ProcessEvent ( pFnGetDebugString, &GetDebugString_Parms, NULL );

	return GetDebugString_Parms.ReturnValue;
};

// Function Engine.SavedMove.SetFlags
// [0x00022002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Flags                          ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )

unsigned char USavedMove::SetFlags ( unsigned char Flags, class APlayerController* PC )
{
	static UFunction* pFnSetFlags = NULL;

	if ( ! pFnSetFlags )
		pFnSetFlags = (UFunction*) UObject::GObjObjects()->Data[ 10517 ];

	USavedMove_execSetFlags_Parms SetFlags_Parms;
	SetFlags_Parms.Flags = Flags;
	SetFlags_Parms.PC = PC;

	this->ProcessEvent ( pFnSetFlags, &SetFlags_Parms, NULL );

	return SetFlags_Parms.ReturnValue;
};

// Function Engine.SavedMove.CompressedFlags
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char USavedMove::CompressedFlags ( )
{
	static UFunction* pFnCompressedFlags = NULL;

	if ( ! pFnCompressedFlags )
		pFnCompressedFlags = (UFunction*) UObject::GObjObjects()->Data[ 10626 ];

	USavedMove_execCompressedFlags_Parms CompressedFlags_Parms;

	this->ProcessEvent ( pFnCompressedFlags, &CompressedFlags_Parms, NULL );

	return CompressedFlags_Parms.ReturnValue;
};

// Function Engine.SavedMove.ResetMoveFor
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void USavedMove::ResetMoveFor ( class APawn* P )
{
	static UFunction* pFnResetMoveFor = NULL;

	if ( ! pFnResetMoveFor )
		pFnResetMoveFor = (UFunction*) UObject::GObjObjects()->Data[ 29197 ];

	USavedMove_execResetMoveFor_Parms ResetMoveFor_Parms;
	ResetMoveFor_Parms.P = P;

	this->ProcessEvent ( pFnResetMoveFor, &ResetMoveFor_Parms, NULL );
};

// Function Engine.SavedMove.PrepMoveFor
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void USavedMove::PrepMoveFor ( class APawn* P )
{
	static UFunction* pFnPrepMoveFor = NULL;

	if ( ! pFnPrepMoveFor )
		pFnPrepMoveFor = (UFunction*) UObject::GObjObjects()->Data[ 29195 ];

	USavedMove_execPrepMoveFor_Parms PrepMoveFor_Parms;
	PrepMoveFor_Parms.P = P;

	this->ProcessEvent ( pFnPrepMoveFor, &PrepMoveFor_Parms, NULL );
};

// Function Engine.SavedMove.SetMoveFor
// [0x00020002] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 newAccel                       ( CPF_Parm )
// unsigned char                  InDoubleClick                  ( CPF_Parm )

void USavedMove::SetMoveFor ( class APlayerController* P, float DeltaTime, struct FVector newAccel, unsigned char InDoubleClick )
{
	static UFunction* pFnSetMoveFor = NULL;

	if ( ! pFnSetMoveFor )
		pFnSetMoveFor = (UFunction*) UObject::GObjObjects()->Data[ 29189 ];

	USavedMove_execSetMoveFor_Parms SetMoveFor_Parms;
	SetMoveFor_Parms.P = P;
	SetMoveFor_Parms.DeltaTime = DeltaTime;
	memcpy ( &SetMoveFor_Parms.newAccel, &newAccel, 0xC );
	SetMoveFor_Parms.InDoubleClick = InDoubleClick;

	this->ProcessEvent ( pFnSetMoveFor, &SetMoveFor_Parms, NULL );
};

// Function Engine.SavedMove.CanCombineWith
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USavedMove*              NewMove                        ( CPF_Parm )
// class APawn*                   inPawn                         ( CPF_Parm )
// float                          MaxDelta                       ( CPF_Parm )

bool USavedMove::CanCombineWith ( class USavedMove* NewMove, class APawn* inPawn, float MaxDelta )
{
	static UFunction* pFnCanCombineWith = NULL;

	if ( ! pFnCanCombineWith )
		pFnCanCombineWith = (UFunction*) UObject::GObjObjects()->Data[ 10656 ];

	USavedMove_execCanCombineWith_Parms CanCombineWith_Parms;
	CanCombineWith_Parms.NewMove = NewMove;
	CanCombineWith_Parms.inPawn = inPawn;
	CanCombineWith_Parms.MaxDelta = MaxDelta;

	this->ProcessEvent ( pFnCanCombineWith, &CanCombineWith_Parms, NULL );

	return CanCombineWith_Parms.ReturnValue;
};

// Function Engine.SavedMove.SetInitialPosition
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void USavedMove::SetInitialPosition ( class APawn* P )
{
	static UFunction* pFnSetInitialPosition = NULL;

	if ( ! pFnSetInitialPosition )
		pFnSetInitialPosition = (UFunction*) UObject::GObjObjects()->Data[ 29180 ];

	USavedMove_execSetInitialPosition_Parms SetInitialPosition_Parms;
	SetInitialPosition_Parms.P = P;

	this->ProcessEvent ( pFnSetInitialPosition, &SetInitialPosition_Parms, NULL );
};

// Function Engine.SavedMove.GetStartLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector USavedMove::GetStartLocation ( )
{
	static UFunction* pFnGetStartLocation = NULL;

	if ( ! pFnGetStartLocation )
		pFnGetStartLocation = (UFunction*) UObject::GObjObjects()->Data[ 10658 ];

	USavedMove_execGetStartLocation_Parms GetStartLocation_Parms;

	this->ProcessEvent ( pFnGetStartLocation, &GetStartLocation_Parms, NULL );

	return GetStartLocation_Parms.ReturnValue;
};

// Function Engine.SavedMove.IsImportantMove
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 CompareAccel                   ( CPF_Parm )

bool USavedMove::IsImportantMove ( struct FVector CompareAccel )
{
	static UFunction* pFnIsImportantMove = NULL;

	if ( ! pFnIsImportantMove )
		pFnIsImportantMove = (UFunction*) UObject::GObjObjects()->Data[ 10653 ];

	USavedMove_execIsImportantMove_Parms IsImportantMove_Parms;
	memcpy ( &IsImportantMove_Parms.CompareAccel, &CompareAccel, 0xC );

	this->ProcessEvent ( pFnIsImportantMove, &IsImportantMove_Parms, NULL );

	return IsImportantMove_Parms.ReturnValue;
};

// Function Engine.SavedMove.PostUpdate
// [0x00020002] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )

void USavedMove::PostUpdate ( class APlayerController* P )
{
	static UFunction* pFnPostUpdate = NULL;

	if ( ! pFnPostUpdate )
		pFnPostUpdate = (UFunction*) UObject::GObjObjects()->Data[ 29171 ];

	USavedMove_execPostUpdate_Parms PostUpdate_Parms;
	PostUpdate_Parms.P = P;

	this->ProcessEvent ( pFnPostUpdate, &PostUpdate_Parms, NULL );
};

// Function Engine.SavedMove.Clear
// [0x00020002] 
// Parameters infos:

void USavedMove::Clear ( )
{
	static UFunction* pFnClear = NULL;

	if ( ! pFnClear )
		pFnClear = (UFunction*) UObject::GObjObjects()->Data[ 29164 ];

	USavedMove_execClear_Parms Clear_Parms;

	this->ProcessEvent ( pFnClear, &Clear_Parms, NULL );
};

// Function Engine.Settings.UpdateFromURL
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class AGameInfo*               Game                           ( CPF_Parm )
// struct FString                 URL                            ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::UpdateFromURL ( class AGameInfo* Game, struct FString* URL )
{
	static UFunction* pFnUpdateFromURL = NULL;

	if ( ! pFnUpdateFromURL )
		pFnUpdateFromURL = (UFunction*) UObject::GObjObjects()->Data[ 21390 ];

	USettings_execUpdateFromURL_Parms UpdateFromURL_Parms;
	UpdateFromURL_Parms.Game = Game;

	pFnUpdateFromURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateFromURL, &UpdateFromURL_Parms, NULL );

	pFnUpdateFromURL->FunctionFlags |= 0x400;

	if ( URL )
		memcpy ( URL, &UpdateFromURL_Parms.URL, 0x10 );
};

// Function Engine.Settings.BuildURL
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::BuildURL ( struct FString* URL )
{
	static UFunction* pFnBuildURL = NULL;

	if ( ! pFnBuildURL )
		pFnBuildURL = (UFunction*) UObject::GObjObjects()->Data[ 21388 ];

	USettings_execBuildURL_Parms BuildURL_Parms;

	pFnBuildURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBuildURL, &BuildURL_Parms, NULL );

	pFnBuildURL->FunctionFlags |= 0x400;

	if ( URL )
		memcpy ( URL, &BuildURL_Parms.URL, 0x10 );
};

// Function Engine.Settings.AppendContextsToURL
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::AppendContextsToURL ( struct FString* URL )
{
	static UFunction* pFnAppendContextsToURL = NULL;

	if ( ! pFnAppendContextsToURL )
		pFnAppendContextsToURL = (UFunction*) UObject::GObjObjects()->Data[ 21386 ];

	USettings_execAppendContextsToURL_Parms AppendContextsToURL_Parms;

	pFnAppendContextsToURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAppendContextsToURL, &AppendContextsToURL_Parms, NULL );

	pFnAppendContextsToURL->FunctionFlags |= 0x400;

	if ( URL )
		memcpy ( URL, &AppendContextsToURL_Parms.URL, 0x10 );
};

// Function Engine.Settings.AppendPropertiesToURL
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::AppendPropertiesToURL ( struct FString* URL )
{
	static UFunction* pFnAppendPropertiesToURL = NULL;

	if ( ! pFnAppendPropertiesToURL )
		pFnAppendPropertiesToURL = (UFunction*) UObject::GObjObjects()->Data[ 21384 ];

	USettings_execAppendPropertiesToURL_Parms AppendPropertiesToURL_Parms;

	pFnAppendPropertiesToURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAppendPropertiesToURL, &AppendPropertiesToURL_Parms, NULL );

	pFnAppendPropertiesToURL->FunctionFlags |= 0x400;

	if ( URL )
		memcpy ( URL, &AppendPropertiesToURL_Parms.URL, 0x10 );
};

// Function Engine.Settings.AppendDataBindingsToURL
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::AppendDataBindingsToURL ( struct FString* URL )
{
	static UFunction* pFnAppendDataBindingsToURL = NULL;

	if ( ! pFnAppendDataBindingsToURL )
		pFnAppendDataBindingsToURL = (UFunction*) UObject::GObjObjects()->Data[ 21382 ];

	USettings_execAppendDataBindingsToURL_Parms AppendDataBindingsToURL_Parms;

	pFnAppendDataBindingsToURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAppendDataBindingsToURL, &AppendDataBindingsToURL_Parms, NULL );

	pFnAppendDataBindingsToURL->FunctionFlags |= 0x400;

	if ( URL )
		memcpy ( URL, &AppendDataBindingsToURL_Parms.URL, 0x10 );
};

// Function Engine.Settings.GetQoSAdvertisedStringSettings
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct TArray<struct FLocalizedStringSetting> QoSSettings                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::GetQoSAdvertisedStringSettings ( struct TArray<struct FLocalizedStringSetting>* QoSSettings )
{
	static UFunction* pFnGetQoSAdvertisedStringSettings = NULL;

	if ( ! pFnGetQoSAdvertisedStringSettings )
		pFnGetQoSAdvertisedStringSettings = (UFunction*) UObject::GObjObjects()->Data[ 21379 ];

	USettings_execGetQoSAdvertisedStringSettings_Parms GetQoSAdvertisedStringSettings_Parms;

	pFnGetQoSAdvertisedStringSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetQoSAdvertisedStringSettings, &GetQoSAdvertisedStringSettings_Parms, NULL );

	pFnGetQoSAdvertisedStringSettings->FunctionFlags |= 0x400;

	if ( QoSSettings )
		memcpy ( QoSSettings, &GetQoSAdvertisedStringSettings_Parms.QoSSettings, 0x10 );
};

// Function Engine.Settings.GetQoSAdvertisedProperties
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct TArray<struct FSettingsProperty> QoSProps                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::GetQoSAdvertisedProperties ( struct TArray<struct FSettingsProperty>* QoSProps )
{
	static UFunction* pFnGetQoSAdvertisedProperties = NULL;

	if ( ! pFnGetQoSAdvertisedProperties )
		pFnGetQoSAdvertisedProperties = (UFunction*) UObject::GObjObjects()->Data[ 21376 ];

	USettings_execGetQoSAdvertisedProperties_Parms GetQoSAdvertisedProperties_Parms;

	pFnGetQoSAdvertisedProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetQoSAdvertisedProperties, &GetQoSAdvertisedProperties_Parms, NULL );

	pFnGetQoSAdvertisedProperties->FunctionFlags |= 0x400;

	if ( QoSProps )
		memcpy ( QoSProps, &GetQoSAdvertisedProperties_Parms.QoSProps, 0x10 );
};

// Function Engine.Settings.GetRangedPropertyValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// float                          OutValue                       ( CPF_Parm | CPF_OutParm )

bool USettings::GetRangedPropertyValue ( int PropertyId, float* OutValue )
{
	static UFunction* pFnGetRangedPropertyValue = NULL;

	if ( ! pFnGetRangedPropertyValue )
		pFnGetRangedPropertyValue = (UFunction*) UObject::GObjObjects()->Data[ 21372 ];

	USettings_execGetRangedPropertyValue_Parms GetRangedPropertyValue_Parms;
	GetRangedPropertyValue_Parms.PropertyId = PropertyId;

	pFnGetRangedPropertyValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRangedPropertyValue, &GetRangedPropertyValue_Parms, NULL );

	pFnGetRangedPropertyValue->FunctionFlags |= 0x400;

	if ( OutValue )
		*OutValue = GetRangedPropertyValue_Parms.OutValue;

	return GetRangedPropertyValue_Parms.ReturnValue;
};

// Function Engine.Settings.SetRangedPropertyValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// float                          NewValue                       ( CPF_Parm )

bool USettings::SetRangedPropertyValue ( int PropertyId, float NewValue )
{
	static UFunction* pFnSetRangedPropertyValue = NULL;

	if ( ! pFnSetRangedPropertyValue )
		pFnSetRangedPropertyValue = (UFunction*) UObject::GObjObjects()->Data[ 21368 ];

	USettings_execSetRangedPropertyValue_Parms SetRangedPropertyValue_Parms;
	SetRangedPropertyValue_Parms.PropertyId = PropertyId;
	SetRangedPropertyValue_Parms.NewValue = NewValue;

	pFnSetRangedPropertyValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRangedPropertyValue, &SetRangedPropertyValue_Parms, NULL );

	pFnSetRangedPropertyValue->FunctionFlags |= 0x400;

	return SetRangedPropertyValue_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyRange
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// float                          OutMinValue                    ( CPF_Parm | CPF_OutParm )
// float                          OutMaxValue                    ( CPF_Parm | CPF_OutParm )
// float                          RangeIncrement                 ( CPF_Parm | CPF_OutParm )
// unsigned char                  bFormatAsInt                   ( CPF_Parm | CPF_OutParm )

bool USettings::GetPropertyRange ( int PropertyId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt )
{
	static UFunction* pFnGetPropertyRange = NULL;

	if ( ! pFnGetPropertyRange )
		pFnGetPropertyRange = (UFunction*) UObject::GObjObjects()->Data[ 21361 ];

	USettings_execGetPropertyRange_Parms GetPropertyRange_Parms;
	GetPropertyRange_Parms.PropertyId = PropertyId;

	pFnGetPropertyRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyRange, &GetPropertyRange_Parms, NULL );

	pFnGetPropertyRange->FunctionFlags |= 0x400;

	if ( OutMinValue )
		*OutMinValue = GetPropertyRange_Parms.OutMinValue;

	if ( OutMaxValue )
		*OutMaxValue = GetPropertyRange_Parms.OutMaxValue;

	if ( RangeIncrement )
		*RangeIncrement = GetPropertyRange_Parms.RangeIncrement;

	if ( bFormatAsInt )
		*bFormatAsInt = GetPropertyRange_Parms.bFormatAsInt;

	return GetPropertyRange_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyMappingType
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// unsigned char                  OutType                        ( CPF_Parm | CPF_OutParm )

bool USettings::GetPropertyMappingType ( int PropertyId, unsigned char* OutType )
{
	static UFunction* pFnGetPropertyMappingType = NULL;

	if ( ! pFnGetPropertyMappingType )
		pFnGetPropertyMappingType = (UFunction*) UObject::GObjObjects()->Data[ 21357 ];

	USettings_execGetPropertyMappingType_Parms GetPropertyMappingType_Parms;
	GetPropertyMappingType_Parms.PropertyId = PropertyId;

	pFnGetPropertyMappingType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyMappingType, &GetPropertyMappingType_Parms, NULL );

	pFnGetPropertyMappingType->FunctionFlags |= 0x400;

	if ( OutType )
		*OutType = GetPropertyMappingType_Parms.OutType;

	return GetPropertyMappingType_Parms.ReturnValue;
};

// Function Engine.Settings.HasStringSetting
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SettingId                      ( CPF_Parm )

bool USettings::HasStringSetting ( int SettingId )
{
	static UFunction* pFnHasStringSetting = NULL;

	if ( ! pFnHasStringSetting )
		pFnHasStringSetting = (UFunction*) UObject::GObjObjects()->Data[ 21354 ];

	USettings_execHasStringSetting_Parms HasStringSetting_Parms;
	HasStringSetting_Parms.SettingId = SettingId;

	pFnHasStringSetting->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasStringSetting, &HasStringSetting_Parms, NULL );

	pFnHasStringSetting->FunctionFlags |= 0x400;

	return HasStringSetting_Parms.ReturnValue;
};

// Function Engine.Settings.HasProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )

bool USettings::HasProperty ( int PropertyId )
{
	static UFunction* pFnHasProperty = NULL;

	if ( ! pFnHasProperty )
		pFnHasProperty = (UFunction*) UObject::GObjObjects()->Data[ 21351 ];

	USettings_execHasProperty_Parms HasProperty_Parms;
	HasProperty_Parms.PropertyId = PropertyId;

	pFnHasProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasProperty, &HasProperty_Parms, NULL );

	pFnHasProperty->FunctionFlags |= 0x400;

	return HasProperty_Parms.ReturnValue;
};

// Function Engine.Settings.UpdateProperties
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldAddIfMissing            ( CPF_OptionalParm | CPF_Parm )
// struct TArray<struct FSettingsProperty> Props                          ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::UpdateProperties ( unsigned long bShouldAddIfMissing, struct TArray<struct FSettingsProperty>* Props )
{
	static UFunction* pFnUpdateProperties = NULL;

	if ( ! pFnUpdateProperties )
		pFnUpdateProperties = (UFunction*) UObject::GObjObjects()->Data[ 21347 ];

	USettings_execUpdateProperties_Parms UpdateProperties_Parms;
	UpdateProperties_Parms.bShouldAddIfMissing = bShouldAddIfMissing;

	pFnUpdateProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateProperties, &UpdateProperties_Parms, NULL );

	pFnUpdateProperties->FunctionFlags |= 0x400;

	if ( Props )
		memcpy ( Props, &UpdateProperties_Parms.Props, 0x10 );
};

// Function Engine.Settings.UpdateStringSettings
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldAddIfMissing            ( CPF_OptionalParm | CPF_Parm )
// struct TArray<struct FLocalizedStringSetting> Settings                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::UpdateStringSettings ( unsigned long bShouldAddIfMissing, struct TArray<struct FLocalizedStringSetting>* Settings )
{
	static UFunction* pFnUpdateStringSettings = NULL;

	if ( ! pFnUpdateStringSettings )
		pFnUpdateStringSettings = (UFunction*) UObject::GObjObjects()->Data[ 21343 ];

	USettings_execUpdateStringSettings_Parms UpdateStringSettings_Parms;
	UpdateStringSettings_Parms.bShouldAddIfMissing = bShouldAddIfMissing;

	pFnUpdateStringSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateStringSettings, &UpdateStringSettings_Parms, NULL );

	pFnUpdateStringSettings->FunctionFlags |= 0x400;

	if ( Settings )
		memcpy ( Settings, &UpdateStringSettings_Parms.Settings, 0x10 );
};

// Function Engine.Settings.GetPropertyType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )

unsigned char USettings::GetPropertyType ( int PropertyId )
{
	static UFunction* pFnGetPropertyType = NULL;

	if ( ! pFnGetPropertyType )
		pFnGetPropertyType = (UFunction*) UObject::GObjObjects()->Data[ 21340 ];

	USettings_execGetPropertyType_Parms GetPropertyType_Parms;
	GetPropertyType_Parms.PropertyId = PropertyId;

	pFnGetPropertyType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyType, &GetPropertyType_Parms, NULL );

	pFnGetPropertyType->FunctionFlags |= 0x400;

	return GetPropertyType_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyValueId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// int                            ValueId                        ( CPF_Parm | CPF_OutParm )

bool USettings::GetPropertyValueId ( int PropertyId, int* ValueId )
{
	static UFunction* pFnGetPropertyValueId = NULL;

	if ( ! pFnGetPropertyValueId )
		pFnGetPropertyValueId = (UFunction*) UObject::GObjObjects()->Data[ 21336 ];

	USettings_execGetPropertyValueId_Parms GetPropertyValueId_Parms;
	GetPropertyValueId_Parms.PropertyId = PropertyId;

	pFnGetPropertyValueId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyValueId, &GetPropertyValueId_Parms, NULL );

	pFnGetPropertyValueId->FunctionFlags |= 0x400;

	if ( ValueId )
		*ValueId = GetPropertyValueId_Parms.ValueId;

	return GetPropertyValueId_Parms.ReturnValue;
};

// Function Engine.Settings.SetPropertyValueId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// int                            ValueId                        ( CPF_Parm )

bool USettings::SetPropertyValueId ( int PropertyId, int ValueId )
{
	static UFunction* pFnSetPropertyValueId = NULL;

	if ( ! pFnSetPropertyValueId )
		pFnSetPropertyValueId = (UFunction*) UObject::GObjObjects()->Data[ 21332 ];

	USettings_execSetPropertyValueId_Parms SetPropertyValueId_Parms;
	SetPropertyValueId_Parms.PropertyId = PropertyId;
	SetPropertyValueId_Parms.ValueId = ValueId;

	pFnSetPropertyValueId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPropertyValueId, &SetPropertyValueId_Parms, NULL );

	pFnSetPropertyValueId->FunctionFlags |= 0x400;

	return SetPropertyValueId_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringProperty
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USettings::GetStringProperty ( int PropertyId, struct FString* Value )
{
	static UFunction* pFnGetStringProperty = NULL;

	if ( ! pFnGetStringProperty )
		pFnGetStringProperty = (UFunction*) UObject::GObjObjects()->Data[ 21328 ];

	USettings_execGetStringProperty_Parms GetStringProperty_Parms;
	GetStringProperty_Parms.PropertyId = PropertyId;

	pFnGetStringProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringProperty, &GetStringProperty_Parms, NULL );

	pFnGetStringProperty->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &GetStringProperty_Parms.Value, 0x10 );

	return GetStringProperty_Parms.ReturnValue;
};

// Function Engine.Settings.SetStringProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            PropertyId                     ( CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_NeedCtorLink )

void USettings::SetStringProperty ( int PropertyId, struct FString Value )
{
	static UFunction* pFnSetStringProperty = NULL;

	if ( ! pFnSetStringProperty )
		pFnSetStringProperty = (UFunction*) UObject::GObjObjects()->Data[ 21325 ];

	USettings_execSetStringProperty_Parms SetStringProperty_Parms;
	SetStringProperty_Parms.PropertyId = PropertyId;
	memcpy ( &SetStringProperty_Parms.Value, &Value, 0x10 );

	pFnSetStringProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStringProperty, &SetStringProperty_Parms, NULL );

	pFnSetStringProperty->FunctionFlags |= 0x400;
};

// Function Engine.Settings.GetIntProperty
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// int                            Value                          ( CPF_Parm | CPF_OutParm )

bool USettings::GetIntProperty ( int PropertyId, int* Value )
{
	static UFunction* pFnGetIntProperty = NULL;

	if ( ! pFnGetIntProperty )
		pFnGetIntProperty = (UFunction*) UObject::GObjObjects()->Data[ 21321 ];

	USettings_execGetIntProperty_Parms GetIntProperty_Parms;
	GetIntProperty_Parms.PropertyId = PropertyId;

	pFnGetIntProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetIntProperty, &GetIntProperty_Parms, NULL );

	pFnGetIntProperty->FunctionFlags |= 0x400;

	if ( Value )
		*Value = GetIntProperty_Parms.Value;

	return GetIntProperty_Parms.ReturnValue;
};

// Function Engine.Settings.SetIntProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            PropertyId                     ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void USettings::SetIntProperty ( int PropertyId, int Value )
{
	static UFunction* pFnSetIntProperty = NULL;

	if ( ! pFnSetIntProperty )
		pFnSetIntProperty = (UFunction*) UObject::GObjObjects()->Data[ 21318 ];

	USettings_execSetIntProperty_Parms SetIntProperty_Parms;
	SetIntProperty_Parms.PropertyId = PropertyId;
	SetIntProperty_Parms.Value = Value;

	pFnSetIntProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIntProperty, &SetIntProperty_Parms, NULL );

	pFnSetIntProperty->FunctionFlags |= 0x400;
};

// Function Engine.Settings.GetFloatProperty
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// float                          Value                          ( CPF_Parm | CPF_OutParm )

bool USettings::GetFloatProperty ( int PropertyId, float* Value )
{
	static UFunction* pFnGetFloatProperty = NULL;

	if ( ! pFnGetFloatProperty )
		pFnGetFloatProperty = (UFunction*) UObject::GObjObjects()->Data[ 21314 ];

	USettings_execGetFloatProperty_Parms GetFloatProperty_Parms;
	GetFloatProperty_Parms.PropertyId = PropertyId;

	pFnGetFloatProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFloatProperty, &GetFloatProperty_Parms, NULL );

	pFnGetFloatProperty->FunctionFlags |= 0x400;

	if ( Value )
		*Value = GetFloatProperty_Parms.Value;

	return GetFloatProperty_Parms.ReturnValue;
};

// Function Engine.Settings.SetFloatProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            PropertyId                     ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void USettings::SetFloatProperty ( int PropertyId, float Value )
{
	static UFunction* pFnSetFloatProperty = NULL;

	if ( ! pFnSetFloatProperty )
		pFnSetFloatProperty = (UFunction*) UObject::GObjObjects()->Data[ 21311 ];

	USettings_execSetFloatProperty_Parms SetFloatProperty_Parms;
	SetFloatProperty_Parms.PropertyId = PropertyId;
	SetFloatProperty_Parms.Value = Value;

	pFnSetFloatProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatProperty, &SetFloatProperty_Parms, NULL );

	pFnSetFloatProperty->FunctionFlags |= 0x400;
};

// Function Engine.Settings.SetPropertyFromStringByName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PropertyName                   ( CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USettings::SetPropertyFromStringByName ( struct FName PropertyName, struct FString* NewValue )
{
	static UFunction* pFnSetPropertyFromStringByName = NULL;

	if ( ! pFnSetPropertyFromStringByName )
		pFnSetPropertyFromStringByName = (UFunction*) UObject::GObjObjects()->Data[ 21307 ];

	USettings_execSetPropertyFromStringByName_Parms SetPropertyFromStringByName_Parms;
	memcpy ( &SetPropertyFromStringByName_Parms.PropertyName, &PropertyName, 0x8 );

	pFnSetPropertyFromStringByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPropertyFromStringByName, &SetPropertyFromStringByName_Parms, NULL );

	pFnSetPropertyFromStringByName->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &SetPropertyFromStringByName_Parms.NewValue, 0x10 );

	return SetPropertyFromStringByName_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyAsStringByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   PropertyName                   ( CPF_Parm )

struct FString USettings::GetPropertyAsStringByName ( struct FName PropertyName )
{
	static UFunction* pFnGetPropertyAsStringByName = NULL;

	if ( ! pFnGetPropertyAsStringByName )
		pFnGetPropertyAsStringByName = (UFunction*) UObject::GObjObjects()->Data[ 21304 ];

	USettings_execGetPropertyAsStringByName_Parms GetPropertyAsStringByName_Parms;
	memcpy ( &GetPropertyAsStringByName_Parms.PropertyName, &PropertyName, 0x8 );

	pFnGetPropertyAsStringByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyAsStringByName, &GetPropertyAsStringByName_Parms, NULL );

	pFnGetPropertyAsStringByName->FunctionFlags |= 0x400;

	return GetPropertyAsStringByName_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyAsString
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            PropertyId                     ( CPF_Parm )

struct FString USettings::GetPropertyAsString ( int PropertyId )
{
	static UFunction* pFnGetPropertyAsString = NULL;

	if ( ! pFnGetPropertyAsString )
		pFnGetPropertyAsString = (UFunction*) UObject::GObjObjects()->Data[ 21301 ];

	USettings_execGetPropertyAsString_Parms GetPropertyAsString_Parms;
	GetPropertyAsString_Parms.PropertyId = PropertyId;

	pFnGetPropertyAsString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyAsString, &GetPropertyAsString_Parms, NULL );

	pFnGetPropertyAsString->FunctionFlags |= 0x400;

	return GetPropertyAsString_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyColumnHeader
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            PropertyId                     ( CPF_Parm )

struct FString USettings::GetPropertyColumnHeader ( int PropertyId )
{
	static UFunction* pFnGetPropertyColumnHeader = NULL;

	if ( ! pFnGetPropertyColumnHeader )
		pFnGetPropertyColumnHeader = (UFunction*) UObject::GObjObjects()->Data[ 21298 ];

	USettings_execGetPropertyColumnHeader_Parms GetPropertyColumnHeader_Parms;
	GetPropertyColumnHeader_Parms.PropertyId = PropertyId;

	pFnGetPropertyColumnHeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyColumnHeader, &GetPropertyColumnHeader_Parms, NULL );

	pFnGetPropertyColumnHeader->FunctionFlags |= 0x400;

	return GetPropertyColumnHeader_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )

struct FName USettings::GetPropertyName ( int PropertyId )
{
	static UFunction* pFnGetPropertyName = NULL;

	if ( ! pFnGetPropertyName )
		pFnGetPropertyName = (UFunction*) UObject::GObjObjects()->Data[ 21295 ];

	USettings_execGetPropertyName_Parms GetPropertyName_Parms;
	GetPropertyName_Parms.PropertyId = PropertyId;

	pFnGetPropertyName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyName, &GetPropertyName_Parms, NULL );

	pFnGetPropertyName->FunctionFlags |= 0x400;

	return GetPropertyName_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PropertyName                   ( CPF_Parm )
// int                            PropertyId                     ( CPF_Parm | CPF_OutParm )

bool USettings::GetPropertyId ( struct FName PropertyName, int* PropertyId )
{
	static UFunction* pFnGetPropertyId = NULL;

	if ( ! pFnGetPropertyId )
		pFnGetPropertyId = (UFunction*) UObject::GObjObjects()->Data[ 21291 ];

	USettings_execGetPropertyId_Parms GetPropertyId_Parms;
	memcpy ( &GetPropertyId_Parms.PropertyName, &PropertyName, 0x8 );

	pFnGetPropertyId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyId, &GetPropertyId_Parms, NULL );

	pFnGetPropertyId->FunctionFlags |= 0x400;

	if ( PropertyId )
		*PropertyId = GetPropertyId_Parms.PropertyId;

	return GetPropertyId_Parms.ReturnValue;
};

// Function Engine.Settings.SetStringSettingValueFromStringByName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StringSettingName              ( CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USettings::SetStringSettingValueFromStringByName ( struct FName StringSettingName, struct FString* NewValue )
{
	static UFunction* pFnSetStringSettingValueFromStringByName = NULL;

	if ( ! pFnSetStringSettingValueFromStringByName )
		pFnSetStringSettingValueFromStringByName = (UFunction*) UObject::GObjObjects()->Data[ 21287 ];

	USettings_execSetStringSettingValueFromStringByName_Parms SetStringSettingValueFromStringByName_Parms;
	memcpy ( &SetStringSettingValueFromStringByName_Parms.StringSettingName, &StringSettingName, 0x8 );

	pFnSetStringSettingValueFromStringByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStringSettingValueFromStringByName, &SetStringSettingValueFromStringByName_Parms, NULL );

	pFnSetStringSettingValueFromStringByName->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &SetStringSettingValueFromStringByName_Parms.NewValue, 0x10 );

	return SetStringSettingValueFromStringByName_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingValueNameByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StringSettingName              ( CPF_Parm )

struct FName USettings::GetStringSettingValueNameByName ( struct FName StringSettingName )
{
	static UFunction* pFnGetStringSettingValueNameByName = NULL;

	if ( ! pFnGetStringSettingValueNameByName )
		pFnGetStringSettingValueNameByName = (UFunction*) UObject::GObjObjects()->Data[ 21284 ];

	USettings_execGetStringSettingValueNameByName_Parms GetStringSettingValueNameByName_Parms;
	memcpy ( &GetStringSettingValueNameByName_Parms.StringSettingName, &StringSettingName, 0x8 );

	pFnGetStringSettingValueNameByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingValueNameByName, &GetStringSettingValueNameByName_Parms, NULL );

	pFnGetStringSettingValueNameByName->FunctionFlags |= 0x400;

	return GetStringSettingValueNameByName_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingValueName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )

struct FName USettings::GetStringSettingValueName ( int StringSettingId, int ValueIndex )
{
	static UFunction* pFnGetStringSettingValueName = NULL;

	if ( ! pFnGetStringSettingValueName )
		pFnGetStringSettingValueName = (UFunction*) UObject::GObjObjects()->Data[ 21280 ];

	USettings_execGetStringSettingValueName_Parms GetStringSettingValueName_Parms;
	GetStringSettingValueName_Parms.StringSettingId = StringSettingId;
	GetStringSettingValueName_Parms.ValueIndex = ValueIndex;

	pFnGetStringSettingValueName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingValueName, &GetStringSettingValueName_Parms, NULL );

	pFnGetStringSettingValueName->FunctionFlags |= 0x400;

	return GetStringSettingValueName_Parms.ReturnValue;
};

// Function Engine.Settings.IsWildcardStringSetting
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )

bool USettings::IsWildcardStringSetting ( int StringSettingId )
{
	static UFunction* pFnIsWildcardStringSetting = NULL;

	if ( ! pFnIsWildcardStringSetting )
		pFnIsWildcardStringSetting = (UFunction*) UObject::GObjObjects()->Data[ 21277 ];

	USettings_execIsWildcardStringSetting_Parms IsWildcardStringSetting_Parms;
	IsWildcardStringSetting_Parms.StringSettingId = StringSettingId;

	pFnIsWildcardStringSetting->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsWildcardStringSetting, &IsWildcardStringSetting_Parms, NULL );

	pFnIsWildcardStringSetting->FunctionFlags |= 0x400;

	return IsWildcardStringSetting_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingColumnHeader
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            StringSettingId                ( CPF_Parm )

struct FString USettings::GetStringSettingColumnHeader ( int StringSettingId )
{
	static UFunction* pFnGetStringSettingColumnHeader = NULL;

	if ( ! pFnGetStringSettingColumnHeader )
		pFnGetStringSettingColumnHeader = (UFunction*) UObject::GObjObjects()->Data[ 21274 ];

	USettings_execGetStringSettingColumnHeader_Parms GetStringSettingColumnHeader_Parms;
	GetStringSettingColumnHeader_Parms.StringSettingId = StringSettingId;

	pFnGetStringSettingColumnHeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingColumnHeader, &GetStringSettingColumnHeader_Parms, NULL );

	pFnGetStringSettingColumnHeader->FunctionFlags |= 0x400;

	return GetStringSettingColumnHeader_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )

struct FName USettings::GetStringSettingName ( int StringSettingId )
{
	static UFunction* pFnGetStringSettingName = NULL;

	if ( ! pFnGetStringSettingName )
		pFnGetStringSettingName = (UFunction*) UObject::GObjObjects()->Data[ 21271 ];

	USettings_execGetStringSettingName_Parms GetStringSettingName_Parms;
	GetStringSettingName_Parms.StringSettingId = StringSettingId;

	pFnGetStringSettingName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingName, &GetStringSettingName_Parms, NULL );

	pFnGetStringSettingName->FunctionFlags |= 0x400;

	return GetStringSettingName_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StringSettingName              ( CPF_Parm )
// int                            StringSettingId                ( CPF_Parm | CPF_OutParm )

bool USettings::GetStringSettingId ( struct FName StringSettingName, int* StringSettingId )
{
	static UFunction* pFnGetStringSettingId = NULL;

	if ( ! pFnGetStringSettingId )
		pFnGetStringSettingId = (UFunction*) UObject::GObjObjects()->Data[ 21267 ];

	USettings_execGetStringSettingId_Parms GetStringSettingId_Parms;
	memcpy ( &GetStringSettingId_Parms.StringSettingName, &StringSettingName, 0x8 );

	pFnGetStringSettingId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingId, &GetStringSettingId_Parms, NULL );

	pFnGetStringSettingId->FunctionFlags |= 0x400;

	if ( StringSettingId )
		*StringSettingId = GetStringSettingId_Parms.StringSettingId;

	return GetStringSettingId_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingValueByName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StringSettingName              ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm | CPF_OutParm )

bool USettings::GetStringSettingValueByName ( struct FName StringSettingName, int* ValueIndex )
{
	static UFunction* pFnGetStringSettingValueByName = NULL;

	if ( ! pFnGetStringSettingValueByName )
		pFnGetStringSettingValueByName = (UFunction*) UObject::GObjObjects()->Data[ 21263 ];

	USettings_execGetStringSettingValueByName_Parms GetStringSettingValueByName_Parms;
	memcpy ( &GetStringSettingValueByName_Parms.StringSettingName, &StringSettingName, 0x8 );

	pFnGetStringSettingValueByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingValueByName, &GetStringSettingValueByName_Parms, NULL );

	pFnGetStringSettingValueByName->FunctionFlags |= 0x400;

	if ( ValueIndex )
		*ValueIndex = GetStringSettingValueByName_Parms.ValueIndex;

	return GetStringSettingValueByName_Parms.ReturnValue;
};

// Function Engine.Settings.SetStringSettingValueByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   StringSettingName              ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bShouldAutoAdd                 ( CPF_Parm )

void USettings::SetStringSettingValueByName ( struct FName StringSettingName, int ValueIndex, unsigned long bShouldAutoAdd )
{
	static UFunction* pFnSetStringSettingValueByName = NULL;

	if ( ! pFnSetStringSettingValueByName )
		pFnSetStringSettingValueByName = (UFunction*) UObject::GObjObjects()->Data[ 21259 ];

	USettings_execSetStringSettingValueByName_Parms SetStringSettingValueByName_Parms;
	memcpy ( &SetStringSettingValueByName_Parms.StringSettingName, &StringSettingName, 0x8 );
	SetStringSettingValueByName_Parms.ValueIndex = ValueIndex;
	SetStringSettingValueByName_Parms.bShouldAutoAdd = bShouldAutoAdd;

	pFnSetStringSettingValueByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStringSettingValueByName, &SetStringSettingValueByName_Parms, NULL );

	pFnSetStringSettingValueByName->FunctionFlags |= 0x400;
};

// Function Engine.Settings.GetStringSettingValueNames
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )
// struct TArray<struct FIdToStringMapping> Values                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USettings::GetStringSettingValueNames ( int StringSettingId, struct TArray<struct FIdToStringMapping>* Values )
{
	static UFunction* pFnGetStringSettingValueNames = NULL;

	if ( ! pFnGetStringSettingValueNames )
		pFnGetStringSettingValueNames = (UFunction*) UObject::GObjObjects()->Data[ 21254 ];

	USettings_execGetStringSettingValueNames_Parms GetStringSettingValueNames_Parms;
	GetStringSettingValueNames_Parms.StringSettingId = StringSettingId;

	pFnGetStringSettingValueNames->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingValueNames, &GetStringSettingValueNames_Parms, NULL );

	pFnGetStringSettingValueNames->FunctionFlags |= 0x400;

	if ( Values )
		memcpy ( Values, &GetStringSettingValueNames_Parms.Values, 0x10 );

	return GetStringSettingValueNames_Parms.ReturnValue;
};

// Function Engine.Settings.IncrementStringSettingValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )
// int                            Direction                      ( CPF_Parm )
// unsigned long                  bShouldWrap                    ( CPF_Parm )

bool USettings::IncrementStringSettingValue ( int StringSettingId, int Direction, unsigned long bShouldWrap )
{
	static UFunction* pFnIncrementStringSettingValue = NULL;

	if ( ! pFnIncrementStringSettingValue )
		pFnIncrementStringSettingValue = (UFunction*) UObject::GObjObjects()->Data[ 21249 ];

	USettings_execIncrementStringSettingValue_Parms IncrementStringSettingValue_Parms;
	IncrementStringSettingValue_Parms.StringSettingId = StringSettingId;
	IncrementStringSettingValue_Parms.Direction = Direction;
	IncrementStringSettingValue_Parms.bShouldWrap = bShouldWrap;

	pFnIncrementStringSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementStringSettingValue, &IncrementStringSettingValue_Parms, NULL );

	pFnIncrementStringSettingValue->FunctionFlags |= 0x400;

	return IncrementStringSettingValue_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm | CPF_OutParm )

bool USettings::GetStringSettingValue ( int StringSettingId, int* ValueIndex )
{
	static UFunction* pFnGetStringSettingValue = NULL;

	if ( ! pFnGetStringSettingValue )
		pFnGetStringSettingValue = (UFunction*) UObject::GObjObjects()->Data[ 21245 ];

	USettings_execGetStringSettingValue_Parms GetStringSettingValue_Parms;
	GetStringSettingValue_Parms.StringSettingId = StringSettingId;

	pFnGetStringSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingValue, &GetStringSettingValue_Parms, NULL );

	pFnGetStringSettingValue->FunctionFlags |= 0x400;

	if ( ValueIndex )
		*ValueIndex = GetStringSettingValue_Parms.ValueIndex;

	return GetStringSettingValue_Parms.ReturnValue;
};

// Function Engine.Settings.SetStringSettingValue
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            StringSettingId                ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bShouldAutoAdd                 ( CPF_OptionalParm | CPF_Parm )

void USettings::SetStringSettingValue ( int StringSettingId, int ValueIndex, unsigned long bShouldAutoAdd )
{
	static UFunction* pFnSetStringSettingValue = NULL;

	if ( ! pFnSetStringSettingValue )
		pFnSetStringSettingValue = (UFunction*) UObject::GObjObjects()->Data[ 21241 ];

	USettings_execSetStringSettingValue_Parms SetStringSettingValue_Parms;
	SetStringSettingValue_Parms.StringSettingId = StringSettingId;
	SetStringSettingValue_Parms.ValueIndex = ValueIndex;
	SetStringSettingValue_Parms.bShouldAutoAdd = bShouldAutoAdd;

	pFnSetStringSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStringSettingValue, &SetStringSettingValue_Parms, NULL );

	pFnSetStringSettingValue->FunctionFlags |= 0x400;
};

// Function Engine.Settings.GetSettingsDataDateTime
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )
// int                            OutInt1                        ( CPF_Parm | CPF_OutParm )
// int                            OutInt2                        ( CPF_Parm | CPF_OutParm )

void USettings::GetSettingsDataDateTime ( struct FSettingsData* Data, int* OutInt1, int* OutInt2 )
{
	static UFunction* pFnGetSettingsDataDateTime = NULL;

	if ( ! pFnGetSettingsDataDateTime )
		pFnGetSettingsDataDateTime = (UFunction*) UObject::GObjObjects()->Data[ 21237 ];

	USettings_execGetSettingsDataDateTime_Parms GetSettingsDataDateTime_Parms;

	pFnGetSettingsDataDateTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSettingsDataDateTime, &GetSettingsDataDateTime_Parms, NULL );

	pFnGetSettingsDataDateTime->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &GetSettingsDataDateTime_Parms.Data, 0x10 );

	if ( OutInt1 )
		*OutInt1 = GetSettingsDataDateTime_Parms.OutInt1;

	if ( OutInt2 )
		*OutInt2 = GetSettingsDataDateTime_Parms.OutInt2;
};

// Function Engine.Settings.GetSettingsDataBlob
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )
// struct TArray<unsigned char>   OutBlob                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::GetSettingsDataBlob ( struct FSettingsData* Data, struct TArray<unsigned char>* OutBlob )
{
	static UFunction* pFnGetSettingsDataBlob = NULL;

	if ( ! pFnGetSettingsDataBlob )
		pFnGetSettingsDataBlob = (UFunction*) UObject::GObjObjects()->Data[ 21233 ];

	USettings_execGetSettingsDataBlob_Parms GetSettingsDataBlob_Parms;

	pFnGetSettingsDataBlob->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSettingsDataBlob, &GetSettingsDataBlob_Parms, NULL );

	pFnGetSettingsDataBlob->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &GetSettingsDataBlob_Parms.Data, 0x10 );

	if ( OutBlob )
		memcpy ( OutBlob, &GetSettingsDataBlob_Parms.OutBlob, 0x10 );
};

// Function Engine.Settings.GetSettingsDataInt
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

int USettings::GetSettingsDataInt ( struct FSettingsData* Data )
{
	static UFunction* pFnGetSettingsDataInt = NULL;

	if ( ! pFnGetSettingsDataInt )
		pFnGetSettingsDataInt = (UFunction*) UObject::GObjObjects()->Data[ 21230 ];

	USettings_execGetSettingsDataInt_Parms GetSettingsDataInt_Parms;

	pFnGetSettingsDataInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSettingsDataInt, &GetSettingsDataInt_Parms, NULL );

	pFnGetSettingsDataInt->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &GetSettingsDataInt_Parms.Data, 0x10 );

	return GetSettingsDataInt_Parms.ReturnValue;
};

// Function Engine.Settings.GetSettingsDataFloat
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

float USettings::GetSettingsDataFloat ( struct FSettingsData* Data )
{
	static UFunction* pFnGetSettingsDataFloat = NULL;

	if ( ! pFnGetSettingsDataFloat )
		pFnGetSettingsDataFloat = (UFunction*) UObject::GObjObjects()->Data[ 21227 ];

	USettings_execGetSettingsDataFloat_Parms GetSettingsDataFloat_Parms;

	pFnGetSettingsDataFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSettingsDataFloat, &GetSettingsDataFloat_Parms, NULL );

	pFnGetSettingsDataFloat->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &GetSettingsDataFloat_Parms.Data, 0x10 );

	return GetSettingsDataFloat_Parms.ReturnValue;
};

// Function Engine.Settings.GetSettingsDataString
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

struct FString USettings::GetSettingsDataString ( struct FSettingsData* Data )
{
	static UFunction* pFnGetSettingsDataString = NULL;

	if ( ! pFnGetSettingsDataString )
		pFnGetSettingsDataString = (UFunction*) UObject::GObjObjects()->Data[ 21224 ];

	USettings_execGetSettingsDataString_Parms GetSettingsDataString_Parms;

	pFnGetSettingsDataString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSettingsDataString, &GetSettingsDataString_Parms, NULL );

	pFnGetSettingsDataString->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &GetSettingsDataString_Parms.Data, 0x10 );

	return GetSettingsDataString_Parms.ReturnValue;
};

// Function Engine.Settings.EmptySettingsData
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

void USettings::EmptySettingsData ( struct FSettingsData* Data )
{
	static UFunction* pFnEmptySettingsData = NULL;

	if ( ! pFnEmptySettingsData )
		pFnEmptySettingsData = (UFunction*) UObject::GObjObjects()->Data[ 21222 ];

	USettings_execEmptySettingsData_Parms EmptySettingsData_Parms;

	pFnEmptySettingsData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEmptySettingsData, &EmptySettingsData_Parms, NULL );

	pFnEmptySettingsData->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &EmptySettingsData_Parms.Data, 0x10 );
};

// Function Engine.Settings.SetSettingsData
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )
// struct FSettingsData           Data2Copy                      ( CPF_Parm | CPF_OutParm )

void USettings::SetSettingsData ( struct FSettingsData* Data, struct FSettingsData* Data2Copy )
{
	static UFunction* pFnSetSettingsData = NULL;

	if ( ! pFnSetSettingsData )
		pFnSetSettingsData = (UFunction*) UObject::GObjObjects()->Data[ 21219 ];

	USettings_execSetSettingsData_Parms SetSettingsData_Parms;

	pFnSetSettingsData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsData, &SetSettingsData_Parms, NULL );

	pFnSetSettingsData->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsData_Parms.Data, 0x10 );

	if ( Data2Copy )
		memcpy ( Data2Copy, &SetSettingsData_Parms.Data2Copy, 0x10 );
};

// Function Engine.Settings.SetSettingsDataBlob
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )
// struct TArray<unsigned char>   InBlob                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::SetSettingsDataBlob ( struct FSettingsData* Data, struct TArray<unsigned char>* InBlob )
{
	static UFunction* pFnSetSettingsDataBlob = NULL;

	if ( ! pFnSetSettingsDataBlob )
		pFnSetSettingsDataBlob = (UFunction*) UObject::GObjObjects()->Data[ 21215 ];

	USettings_execSetSettingsDataBlob_Parms SetSettingsDataBlob_Parms;

	pFnSetSettingsDataBlob->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsDataBlob, &SetSettingsDataBlob_Parms, NULL );

	pFnSetSettingsDataBlob->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsDataBlob_Parms.Data, 0x10 );

	if ( InBlob )
		memcpy ( InBlob, &SetSettingsDataBlob_Parms.InBlob, 0x10 );
};

// Function Engine.Settings.SetSettingsDataDateTime
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// int                            InInt1                         ( CPF_Parm )
// int                            InInt2                         ( CPF_Parm )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

void USettings::SetSettingsDataDateTime ( int InInt1, int InInt2, struct FSettingsData* Data )
{
	static UFunction* pFnSetSettingsDataDateTime = NULL;

	if ( ! pFnSetSettingsDataDateTime )
		pFnSetSettingsDataDateTime = (UFunction*) UObject::GObjObjects()->Data[ 21211 ];

	USettings_execSetSettingsDataDateTime_Parms SetSettingsDataDateTime_Parms;
	SetSettingsDataDateTime_Parms.InInt1 = InInt1;
	SetSettingsDataDateTime_Parms.InInt2 = InInt2;

	pFnSetSettingsDataDateTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsDataDateTime, &SetSettingsDataDateTime_Parms, NULL );

	pFnSetSettingsDataDateTime->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsDataDateTime_Parms.Data, 0x10 );
};

// Function Engine.Settings.SetSettingsDataInt
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// int                            InInt                          ( CPF_Parm )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

void USettings::SetSettingsDataInt ( int InInt, struct FSettingsData* Data )
{
	static UFunction* pFnSetSettingsDataInt = NULL;

	if ( ! pFnSetSettingsDataInt )
		pFnSetSettingsDataInt = (UFunction*) UObject::GObjObjects()->Data[ 21208 ];

	USettings_execSetSettingsDataInt_Parms SetSettingsDataInt_Parms;
	SetSettingsDataInt_Parms.InInt = InInt;

	pFnSetSettingsDataInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsDataInt, &SetSettingsDataInt_Parms, NULL );

	pFnSetSettingsDataInt->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsDataInt_Parms.Data, 0x10 );
};

// Function Engine.Settings.SetSettingsDataFloat
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// float                          InFloat                        ( CPF_Parm )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

void USettings::SetSettingsDataFloat ( float InFloat, struct FSettingsData* Data )
{
	static UFunction* pFnSetSettingsDataFloat = NULL;

	if ( ! pFnSetSettingsDataFloat )
		pFnSetSettingsDataFloat = (UFunction*) UObject::GObjObjects()->Data[ 21205 ];

	USettings_execSetSettingsDataFloat_Parms SetSettingsDataFloat_Parms;
	SetSettingsDataFloat_Parms.InFloat = InFloat;

	pFnSetSettingsDataFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsDataFloat, &SetSettingsDataFloat_Parms, NULL );

	pFnSetSettingsDataFloat->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsDataFloat_Parms.Data, 0x10 );
};

// Function Engine.Settings.SetSettingsDataString
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FString                 InString                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

void USettings::SetSettingsDataString ( struct FString InString, struct FSettingsData* Data )
{
	static UFunction* pFnSetSettingsDataString = NULL;

	if ( ! pFnSetSettingsDataString )
		pFnSetSettingsDataString = (UFunction*) UObject::GObjObjects()->Data[ 21202 ];

	USettings_execSetSettingsDataString_Parms SetSettingsDataString_Parms;
	memcpy ( &SetSettingsDataString_Parms.InString, &InString, 0x10 );

	pFnSetSettingsDataString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsDataString, &SetSettingsDataString_Parms, NULL );

	pFnSetSettingsDataString->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsDataString_Parms.Data, 0x10 );
};

// Function Engine.Settings.NotifyPropertyValueUpdated
// [0x00120000] 
// Parameters infos:
// struct FName                   PropertyName                   ( CPF_Parm )

void USettings::NotifyPropertyValueUpdated ( struct FName PropertyName )
{
	static UFunction* pFnNotifyPropertyValueUpdated = NULL;

	if ( ! pFnNotifyPropertyValueUpdated )
		pFnNotifyPropertyValueUpdated = (UFunction*) UObject::GObjObjects()->Data[ 21200 ];

	USettings_execNotifyPropertyValueUpdated_Parms NotifyPropertyValueUpdated_Parms;
	memcpy ( &NotifyPropertyValueUpdated_Parms.PropertyName, &PropertyName, 0x8 );

	this->ProcessEvent ( pFnNotifyPropertyValueUpdated, &NotifyPropertyValueUpdated_Parms, NULL );
};

// Function Engine.Settings.NotifySettingValueUpdated
// [0x00120000] 
// Parameters infos:
// struct FName                   SettingName                    ( CPF_Parm )

void USettings::NotifySettingValueUpdated ( struct FName SettingName )
{
	static UFunction* pFnNotifySettingValueUpdated = NULL;

	if ( ! pFnNotifySettingValueUpdated )
		pFnNotifySettingValueUpdated = (UFunction*) UObject::GObjObjects()->Data[ 21198 ];

	USettings_execNotifySettingValueUpdated_Parms NotifySettingValueUpdated_Parms;
	memcpy ( &NotifySettingValueUpdated_Parms.SettingName, &SettingName, 0x8 );

	this->ProcessEvent ( pFnNotifySettingValueUpdated, &NotifySettingValueUpdated_Parms, NULL );
};

// Function Engine.OnlineGameSearch.SortSearchResults
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UOnlineGameSearch::eventSortSearchResults ( )
{
	static UFunction* pFnSortSearchResults = NULL;

	if ( ! pFnSortSearchResults )
		pFnSortSearchResults = (UFunction*) UObject::GObjObjects()->Data[ 25745 ];

	UOnlineGameSearch_eventSortSearchResults_Parms SortSearchResults_Parms;

	pFnSortSearchResults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSortSearchResults, &SortSearchResults_Parms, NULL );

	pFnSortSearchResults->FunctionFlags |= 0x400;
};

// Function Engine.OnlineGameSearch.SetSkillOverride
// [0x00420002] 
// Parameters infos:
// int                            LeaderboardId                  ( CPF_Parm )
// struct TArray<struct FUniqueNetId> Players                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineGameSearch::SetSkillOverride ( int LeaderboardId, struct TArray<struct FUniqueNetId>* Players )
{
	static UFunction* pFnSetSkillOverride = NULL;

	if ( ! pFnSetSkillOverride )
		pFnSetSkillOverride = (UFunction*) UObject::GObjObjects()->Data[ 25740 ];

	UOnlineGameSearch_execSetSkillOverride_Parms SetSkillOverride_Parms;
	SetSkillOverride_Parms.LeaderboardId = LeaderboardId;

	this->ProcessEvent ( pFnSetSkillOverride, &SetSkillOverride_Parms, NULL );

	if ( Players )
		memcpy ( Players, &SetSkillOverride_Parms.Players, 0x10 );
};

// Function Engine.SoundCue.GetCueDuration
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USoundCue::GetCueDuration ( )
{
	static UFunction* pFnGetCueDuration = NULL;

	if ( ! pFnGetCueDuration )
		pFnGetCueDuration = (UFunction*) UObject::GObjObjects()->Data[ 12425 ];

	USoundCue_execGetCueDuration_Parms GetCueDuration_Parms;

	pFnGetCueDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCueDuration, &GetCueDuration_Parms, NULL );

	pFnGetCueDuration->FunctionFlags |= 0x400;

	return GetCueDuration_Parms.ReturnValue;
};

// Function Engine.Texture2D.Create
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture2D*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InSizeX                        ( CPF_Parm )
// int                            InSizeY                        ( CPF_Parm )
// unsigned char                  InFormat                       ( CPF_OptionalParm | CPF_Parm )

class UTexture2D* UTexture2D::Create ( int InSizeX, int InSizeY, unsigned char InFormat )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 15318 ];

	UTexture2D_execCreate_Parms Create_Parms;
	Create_Parms.InSizeX = InSizeX;
	Create_Parms.InSizeY = InSizeY;
	Create_Parms.InFormat = InFormat;

	pFnCreate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );

	pFnCreate->FunctionFlags |= 0x400;

	return Create_Parms.ReturnValue;
};

// Function Engine.Texture2D.SetForceMipLevelsToBeResident
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          Seconds                        ( CPF_Parm )
// int                            CinematicTextureGroups         ( CPF_OptionalParm | CPF_Parm )

void UTexture2D::SetForceMipLevelsToBeResident ( float Seconds, int CinematicTextureGroups )
{
	static UFunction* pFnSetForceMipLevelsToBeResident = NULL;

	if ( ! pFnSetForceMipLevelsToBeResident )
		pFnSetForceMipLevelsToBeResident = (UFunction*) UObject::GObjObjects()->Data[ 15315 ];

	UTexture2D_execSetForceMipLevelsToBeResident_Parms SetForceMipLevelsToBeResident_Parms;
	SetForceMipLevelsToBeResident_Parms.Seconds = Seconds;
	SetForceMipLevelsToBeResident_Parms.CinematicTextureGroups = CinematicTextureGroups;

	pFnSetForceMipLevelsToBeResident->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetForceMipLevelsToBeResident, &SetForceMipLevelsToBeResident_Parms, NULL );

	pFnSetForceMipLevelsToBeResident->FunctionFlags |= 0x400;
};

// Function Engine.EnvironmentVolume.SetSplitNavMesh
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewValue                      ( CPF_Parm )

void AEnvironmentVolume::SetSplitNavMesh ( unsigned long bNewValue )
{
	static UFunction* pFnSetSplitNavMesh = NULL;

	if ( ! pFnSetSplitNavMesh )
		pFnSetSplitNavMesh = (UFunction*) UObject::GObjObjects()->Data[ 19927 ];

	AEnvironmentVolume_execSetSplitNavMesh_Parms SetSplitNavMesh_Parms;
	SetSplitNavMesh_Parms.bNewValue = bNewValue;

	pFnSetSplitNavMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSplitNavMesh, &SetSplitNavMesh_Parms, NULL );

	pFnSetSplitNavMesh->FunctionFlags |= 0x400;
};

// Function Engine.AIController.GetMyBalancingTickGroup
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int AAIController::GetMyBalancingTickGroup ( )
{
	static UFunction* pFnGetMyBalancingTickGroup = NULL;

	if ( ! pFnGetMyBalancingTickGroup )
		pFnGetMyBalancingTickGroup = (UFunction*) UObject::GObjObjects()->Data[ 12016 ];

	AAIController_execGetMyBalancingTickGroup_Parms GetMyBalancingTickGroup_Parms;

	pFnGetMyBalancingTickGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMyBalancingTickGroup, &GetMyBalancingTickGroup_Parms, NULL );

	pFnGetMyBalancingTickGroup->FunctionFlags |= 0x400;

	return GetMyBalancingTickGroup_Parms.ReturnValue;
};

// Function Engine.AIController.CanFireWeapon
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 Wpn                            ( CPF_Parm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

bool AAIController::CanFireWeapon ( class AWeapon* Wpn, unsigned char FireModeNum )
{
	static UFunction* pFnCanFireWeapon = NULL;

	if ( ! pFnCanFireWeapon )
		pFnCanFireWeapon = (UFunction*) UObject::GObjObjects()->Data[ 12070 ];

	AAIController_execCanFireWeapon_Parms CanFireWeapon_Parms;
	CanFireWeapon_Parms.Wpn = Wpn;
	CanFireWeapon_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnCanFireWeapon, &CanFireWeapon_Parms, NULL );

	return CanFireWeapon_Parms.ReturnValue;
};

// Function Engine.AIController.ShouldRefire
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AAIController::ShouldRefire ( )
{
	static UFunction* pFnShouldRefire = NULL;

	if ( ! pFnShouldRefire )
		pFnShouldRefire = (UFunction*) UObject::GObjObjects()->Data[ 12068 ];

	AAIController_execShouldRefire_Parms ShouldRefire_Parms;

	this->ProcessEvent ( pFnShouldRefire, &ShouldRefire_Parms, NULL );

	return ShouldRefire_Parms.ReturnValue;
};

// Function Engine.AIController.NotifyWeaponFinishedFiring
// [0x00020000] 
// Parameters infos:
// class AWeapon*                 W                              ( CPF_Parm )
// unsigned char                  FireMode                       ( CPF_Parm )

void AAIController::NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode )
{
	static UFunction* pFnNotifyWeaponFinishedFiring = NULL;

	if ( ! pFnNotifyWeaponFinishedFiring )
		pFnNotifyWeaponFinishedFiring = (UFunction*) UObject::GObjObjects()->Data[ 12065 ];

	AAIController_execNotifyWeaponFinishedFiring_Parms NotifyWeaponFinishedFiring_Parms;
	NotifyWeaponFinishedFiring_Parms.W = W;
	NotifyWeaponFinishedFiring_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyWeaponFinishedFiring, &NotifyWeaponFinishedFiring_Parms, NULL );
};

// Function Engine.AIController.NotifyWeaponFired
// [0x00020000] 
// Parameters infos:
// class AWeapon*                 W                              ( CPF_Parm )
// unsigned char                  FireMode                       ( CPF_Parm )

void AAIController::NotifyWeaponFired ( class AWeapon* W, unsigned char FireMode )
{
	static UFunction* pFnNotifyWeaponFired = NULL;

	if ( ! pFnNotifyWeaponFired )
		pFnNotifyWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 12062 ];

	AAIController_execNotifyWeaponFired_Parms NotifyWeaponFired_Parms;
	NotifyWeaponFired_Parms.W = W;
	NotifyWeaponFired_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyWeaponFired, &NotifyWeaponFired_Parms, NULL );
};

// Function Engine.AIController.OnAIMoveToActor
// [0x00020002] 
// Parameters infos:
// class USeqAct_AIMoveToActor*   Action                         ( CPF_Parm )

void AAIController::OnAIMoveToActor ( class USeqAct_AIMoveToActor* Action )
{
	static UFunction* pFnOnAIMoveToActor = NULL;

	if ( ! pFnOnAIMoveToActor )
		pFnOnAIMoveToActor = (UFunction*) UObject::GObjObjects()->Data[ 12042 ];

	AAIController_execOnAIMoveToActor_Parms OnAIMoveToActor_Parms;
	OnAIMoveToActor_Parms.Action = Action;

	this->ProcessEvent ( pFnOnAIMoveToActor, &OnAIMoveToActor_Parms, NULL );
};

// Function Engine.AIController.GetPlayerViewPoint
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void AAIController::eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetPlayerViewPoint = NULL;

	if ( ! pFnGetPlayerViewPoint )
		pFnGetPlayerViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 12039 ];

	AAIController_eventGetPlayerViewPoint_Parms GetPlayerViewPoint_Parms;

	this->ProcessEvent ( pFnGetPlayerViewPoint, &GetPlayerViewPoint_Parms, NULL );

	if ( out_Location )
		memcpy ( out_Location, &GetPlayerViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetPlayerViewPoint_Parms.out_Rotation, 0xC );
};

// Function Engine.AIController.SetTeam
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            inTeamIdx                      ( CPF_Parm )

void AAIController::eventSetTeam ( int inTeamIdx )
{
	static UFunction* pFnSetTeam = NULL;

	if ( ! pFnSetTeam )
		pFnSetTeam = (UFunction*) UObject::GObjObjects()->Data[ 12037 ];

	AAIController_eventSetTeam_Parms SetTeam_Parms;
	SetTeam_Parms.inTeamIdx = inTeamIdx;

	this->ProcessEvent ( pFnSetTeam, &SetTeam_Parms, NULL );
};

// Function Engine.AIController.PriorityObjective
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AAIController::PriorityObjective ( )
{
	static UFunction* pFnPriorityObjective = NULL;

	if ( ! pFnPriorityObjective )
		pFnPriorityObjective = (UFunction*) UObject::GObjObjects()->Data[ 12035 ];

	AAIController_execPriorityObjective_Parms PriorityObjective_Parms;

	this->ProcessEvent ( pFnPriorityObjective, &PriorityObjective_Parms, NULL );

	return PriorityObjective_Parms.ReturnValue;
};

// Function Engine.AIController.GetOrders
// [0x00020002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName AAIController::GetOrders ( )
{
	static UFunction* pFnGetOrders = NULL;

	if ( ! pFnGetOrders )
		pFnGetOrders = (UFunction*) UObject::GObjObjects()->Data[ 12033 ];

	AAIController_execGetOrders_Parms GetOrders_Parms;

	this->ProcessEvent ( pFnGetOrders, &GetOrders_Parms, NULL );

	return GetOrders_Parms.ReturnValue;
};

// Function Engine.AIController.GetOrderObject
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* AAIController::GetOrderObject ( )
{
	static UFunction* pFnGetOrderObject = NULL;

	if ( ! pFnGetOrderObject )
		pFnGetOrderObject = (UFunction*) UObject::GObjObjects()->Data[ 12031 ];

	AAIController_execGetOrderObject_Parms GetOrderObject_Parms;

	this->ProcessEvent ( pFnGetOrderObject, &GetOrderObject_Parms, NULL );

	return GetOrderObject_Parms.ReturnValue;
};

// Function Engine.AIController.SetOrders
// [0x00020000] 
// Parameters infos:
// struct FName                   NewOrders                      ( CPF_Parm )
// class AController*             OrderGiver                     ( CPF_Parm )

void AAIController::SetOrders ( struct FName NewOrders, class AController* OrderGiver )
{
	static UFunction* pFnSetOrders = NULL;

	if ( ! pFnSetOrders )
		pFnSetOrders = (UFunction*) UObject::GObjObjects()->Data[ 12028 ];

	AAIController_execSetOrders_Parms SetOrders_Parms;
	memcpy ( &SetOrders_Parms.NewOrders, &NewOrders, 0x8 );
	SetOrders_Parms.OrderGiver = OrderGiver;

	this->ProcessEvent ( pFnSetOrders, &SetOrders_Parms, NULL );
};

// Function Engine.AIController.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AAIController::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 12019 ];

	AAIController_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.AIController.Reset
// [0x00020002] 
// Parameters infos:

void AAIController::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 12018 ];

	AAIController_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.AIController.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AAIController::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 12012 ];

	AAIController_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.CrowdAgentBase.NotifyPathChanged
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void ACrowdAgentBase::eventNotifyPathChanged ( )
{
	static UFunction* pFnNotifyPathChanged = NULL;

	if ( ! pFnNotifyPathChanged )
		pFnNotifyPathChanged = (UFunction*) UObject::GObjObjects()->Data[ 17877 ];

	ACrowdAgentBase_eventNotifyPathChanged_Parms NotifyPathChanged_Parms;

	this->ProcessEvent ( pFnNotifyPathChanged, &NotifyPathChanged_Parms, NULL );
};

// Function Engine.NavMeshObstacle.SetEnabled
// [0x00020002] 
// Parameters infos:
// unsigned long                  bInEnabled                     ( CPF_Parm )

void ANavMeshObstacle::SetEnabled ( unsigned long bInEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 25104 ];

	ANavMeshObstacle_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bInEnabled = bInEnabled;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );
};

// Function Engine.NavMeshObstacle.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ANavMeshObstacle::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 25102 ];

	ANavMeshObstacle_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.NavMeshObstacle.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANavMeshObstacle::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 25100 ];

	ANavMeshObstacle_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.NavMeshObstacle.UnRegisterObstacle
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ANavMeshObstacle::UnRegisterObstacle ( )
{
	static UFunction* pFnUnRegisterObstacle = NULL;

	if ( ! pFnUnRegisterObstacle )
		pFnUnRegisterObstacle = (UFunction*) UObject::GObjObjects()->Data[ 25099 ];

	ANavMeshObstacle_execUnRegisterObstacle_Parms UnRegisterObstacle_Parms;

	pFnUnRegisterObstacle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnRegisterObstacle, &UnRegisterObstacle_Parms, NULL );

	pFnUnRegisterObstacle->FunctionFlags |= 0x400;
};

// Function Engine.NavMeshObstacle.RegisterObstacle
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ANavMeshObstacle::RegisterObstacle ( )
{
	static UFunction* pFnRegisterObstacle = NULL;

	if ( ! pFnRegisterObstacle )
		pFnRegisterObstacle = (UFunction*) UObject::GObjObjects()->Data[ 25098 ];

	ANavMeshObstacle_execRegisterObstacle_Parms RegisterObstacle_Parms;

	pFnRegisterObstacle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterObstacle, &RegisterObstacle_Parms, NULL );

	pFnRegisterObstacle->FunctionFlags |= 0x400;
};

// Function Engine.Interface_NavMeshPathSwitch.AIActivateSwitch
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AAIController*           AI                             ( CPF_Parm )

bool UInterface_NavMeshPathSwitch::eventAIActivateSwitch ( class AAIController* AI )
{
	static UFunction* pFnAIActivateSwitch = NULL;

	if ( ! pFnAIActivateSwitch )
		pFnAIActivateSwitch = (UFunction*) UObject::GObjObjects()->Data[ 22574 ];

	UInterface_NavMeshPathSwitch_eventAIActivateSwitch_Parms AIActivateSwitch_Parms;
	AIActivateSwitch_Parms.AI = AI;

	this->ProcessEvent ( pFnAIActivateSwitch, &AIActivateSwitch_Parms, NULL );

	return AIActivateSwitch_Parms.ReturnValue;
};

// Function Engine.NavMeshPathConstraint.GetDumpString
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UNavMeshPathConstraint::eventGetDumpString ( )
{
	static UFunction* pFnGetDumpString = NULL;

	if ( ! pFnGetDumpString )
		pFnGetDumpString = (UFunction*) UObject::GObjObjects()->Data[ 25116 ];

	UNavMeshPathConstraint_eventGetDumpString_Parms GetDumpString_Parms;

	this->ProcessEvent ( pFnGetDumpString, &GetDumpString_Parms, NULL );

	return GetDumpString_Parms.ReturnValue;
};

// Function Engine.NavMeshPathConstraint.Recycle
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UNavMeshPathConstraint::eventRecycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 25110 ];

	UNavMeshPathConstraint_eventRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshPath_AlongLine.Recycle
// [0x00020002] 
// Parameters infos:

void UNavMeshPath_AlongLine::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 25124 ];

	UNavMeshPath_AlongLine_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshPath_AlongLine.AlongLine
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// struct FVector                 Dir                            ( CPF_Parm )

bool UNavMeshPath_AlongLine::AlongLine ( class UNavigationHandle* NavHandle, struct FVector Dir )
{
	static UFunction* pFnAlongLine = NULL;

	if ( ! pFnAlongLine )
		pFnAlongLine = (UFunction*) UObject::GObjObjects()->Data[ 25118 ];

	UNavMeshPath_AlongLine_execAlongLine_Parms AlongLine_Parms;
	AlongLine_Parms.NavHandle = NavHandle;
	memcpy ( &AlongLine_Parms.Dir, &Dir, 0xC );

	this->ProcessEvent ( pFnAlongLine, &AlongLine_Parms, NULL );

	return AlongLine_Parms.ReturnValue;
};

// Function Engine.NavMeshPath_EnforceTwoWayEdges.EnforceTwoWayEdges
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )

bool UNavMeshPath_EnforceTwoWayEdges::EnforceTwoWayEdges ( class UNavigationHandle* NavHandle )
{
	static UFunction* pFnEnforceTwoWayEdges = NULL;

	if ( ! pFnEnforceTwoWayEdges )
		pFnEnforceTwoWayEdges = (UFunction*) UObject::GObjObjects()->Data[ 25125 ];

	UNavMeshPath_EnforceTwoWayEdges_execEnforceTwoWayEdges_Parms EnforceTwoWayEdges_Parms;
	EnforceTwoWayEdges_Parms.NavHandle = NavHandle;

	this->ProcessEvent ( pFnEnforceTwoWayEdges, &EnforceTwoWayEdges_Parms, NULL );

	return EnforceTwoWayEdges_Parms.ReturnValue;
};

// Function Engine.NavMeshPath_MinDistBetweenSpecsOfType.Recycle
// [0x00020002] 
// Parameters infos:

void UNavMeshPath_MinDistBetweenSpecsOfType::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 25139 ];

	UNavMeshPath_MinDistBetweenSpecsOfType_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshPath_MinDistBetweenSpecsOfType.EnforceMinDist
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// float                          InMinDist                      ( CPF_Parm )
// unsigned char                  InEdgeType                     ( CPF_Parm )
// struct FVector                 LastLocation                   ( CPF_OptionalParm | CPF_Parm )

bool UNavMeshPath_MinDistBetweenSpecsOfType::EnforceMinDist ( class UNavigationHandle* NavHandle, float InMinDist, unsigned char InEdgeType, struct FVector LastLocation )
{
	static UFunction* pFnEnforceMinDist = NULL;

	if ( ! pFnEnforceMinDist )
		pFnEnforceMinDist = (UFunction*) UObject::GObjObjects()->Data[ 25129 ];

	UNavMeshPath_MinDistBetweenSpecsOfType_execEnforceMinDist_Parms EnforceMinDist_Parms;
	EnforceMinDist_Parms.NavHandle = NavHandle;
	EnforceMinDist_Parms.InMinDist = InMinDist;
	EnforceMinDist_Parms.InEdgeType = InEdgeType;
	memcpy ( &EnforceMinDist_Parms.LastLocation, &LastLocation, 0xC );

	this->ProcessEvent ( pFnEnforceMinDist, &EnforceMinDist_Parms, NULL );

	return EnforceMinDist_Parms.ReturnValue;
};

// Function Engine.NavMeshPath_Toward.Recycle
// [0x00020002] 
// Parameters infos:

void UNavMeshPath_Toward::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 25150 ];

	UNavMeshPath_Toward_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshPath_Toward.TowardPoint
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// struct FVector                 Point                          ( CPF_Parm )

bool UNavMeshPath_Toward::TowardPoint ( class UNavigationHandle* NavHandle, struct FVector Point )
{
	static UFunction* pFnTowardPoint = NULL;

	if ( ! pFnTowardPoint )
		pFnTowardPoint = (UFunction*) UObject::GObjObjects()->Data[ 16843 ];

	UNavMeshPath_Toward_execTowardPoint_Parms TowardPoint_Parms;
	TowardPoint_Parms.NavHandle = NavHandle;
	memcpy ( &TowardPoint_Parms.Point, &Point, 0xC );

	this->ProcessEvent ( pFnTowardPoint, &TowardPoint_Parms, NULL );

	return TowardPoint_Parms.ReturnValue;
};

// Function Engine.NavMeshPath_Toward.TowardGoal
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// class AActor*                  Goal                           ( CPF_Parm )

bool UNavMeshPath_Toward::TowardGoal ( class UNavigationHandle* NavHandle, class AActor* Goal )
{
	static UFunction* pFnTowardGoal = NULL;

	if ( ! pFnTowardGoal )
		pFnTowardGoal = (UFunction*) UObject::GObjObjects()->Data[ 25140 ];

	UNavMeshPath_Toward_execTowardGoal_Parms TowardGoal_Parms;
	TowardGoal_Parms.NavHandle = NavHandle;
	TowardGoal_Parms.Goal = Goal;

	this->ProcessEvent ( pFnTowardGoal, &TowardGoal_Parms, NULL );

	return TowardGoal_Parms.ReturnValue;
};

// Function Engine.NavMeshPath_WithinDistanceEnvelope.Recycle
// [0x00020002] 
// Parameters infos:

void UNavMeshPath_WithinDistanceEnvelope::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 25167 ];

	UNavMeshPath_WithinDistanceEnvelope_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshPath_WithinDistanceEnvelope.StayWithinEnvelopeToLoc
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// struct FVector                 InEnvelopeTestPoint            ( CPF_Parm )
// float                          InMaxDistance                  ( CPF_Parm )
// float                          InMinDistance                  ( CPF_Parm )
// unsigned long                  bInSoft                        ( CPF_OptionalParm | CPF_Parm )
// float                          InSoftStartPenalty             ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOnlyTossOutSpecsThatLeave     ( CPF_OptionalParm | CPF_Parm )

bool UNavMeshPath_WithinDistanceEnvelope::StayWithinEnvelopeToLoc ( class UNavigationHandle* NavHandle, struct FVector InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, unsigned long bInSoft, float InSoftStartPenalty, unsigned long bOnlyTossOutSpecsThatLeave )
{
	static UFunction* pFnStayWithinEnvelopeToLoc = NULL;

	if ( ! pFnStayWithinEnvelopeToLoc )
		pFnStayWithinEnvelopeToLoc = (UFunction*) UObject::GObjObjects()->Data[ 25151 ];

	UNavMeshPath_WithinDistanceEnvelope_execStayWithinEnvelopeToLoc_Parms StayWithinEnvelopeToLoc_Parms;
	StayWithinEnvelopeToLoc_Parms.NavHandle = NavHandle;
	memcpy ( &StayWithinEnvelopeToLoc_Parms.InEnvelopeTestPoint, &InEnvelopeTestPoint, 0xC );
	StayWithinEnvelopeToLoc_Parms.InMaxDistance = InMaxDistance;
	StayWithinEnvelopeToLoc_Parms.InMinDistance = InMinDistance;
	StayWithinEnvelopeToLoc_Parms.bInSoft = bInSoft;
	StayWithinEnvelopeToLoc_Parms.InSoftStartPenalty = InSoftStartPenalty;
	StayWithinEnvelopeToLoc_Parms.bOnlyTossOutSpecsThatLeave = bOnlyTossOutSpecsThatLeave;

	this->ProcessEvent ( pFnStayWithinEnvelopeToLoc, &StayWithinEnvelopeToLoc_Parms, NULL );

	return StayWithinEnvelopeToLoc_Parms.ReturnValue;
};

// Function Engine.NavMeshPath_WithinTraversalDist.Recycle
// [0x00020002] 
// Parameters infos:

void UNavMeshPath_WithinTraversalDist::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 25176 ];

	UNavMeshPath_WithinTraversalDist_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshPath_WithinTraversalDist.DontExceedMaxDist
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// float                          InMaxTraversalDist             ( CPF_Parm )
// unsigned long                  bInSoft                        ( CPF_OptionalParm | CPF_Parm )

bool UNavMeshPath_WithinTraversalDist::DontExceedMaxDist ( class UNavigationHandle* NavHandle, float InMaxTraversalDist, unsigned long bInSoft )
{
	static UFunction* pFnDontExceedMaxDist = NULL;

	if ( ! pFnDontExceedMaxDist )
		pFnDontExceedMaxDist = (UFunction*) UObject::GObjObjects()->Data[ 25168 ];

	UNavMeshPath_WithinTraversalDist_execDontExceedMaxDist_Parms DontExceedMaxDist_Parms;
	DontExceedMaxDist_Parms.NavHandle = NavHandle;
	DontExceedMaxDist_Parms.InMaxTraversalDist = InMaxTraversalDist;
	DontExceedMaxDist_Parms.bInSoft = bInSoft;

	this->ProcessEvent ( pFnDontExceedMaxDist, &DontExceedMaxDist_Parms, NULL );

	return DontExceedMaxDist_Parms.ReturnValue;
};

// Function Engine.NavMeshPathGoalEvaluator.GetDumpString
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UNavMeshPathGoalEvaluator::eventGetDumpString ( )
{
	static UFunction* pFnGetDumpString = NULL;

	if ( ! pFnGetDumpString )
		pFnGetDumpString = (UFunction*) UObject::GObjObjects()->Data[ 25026 ];

	UNavMeshPathGoalEvaluator_eventGetDumpString_Parms GetDumpString_Parms;

	this->ProcessEvent ( pFnGetDumpString, &GetDumpString_Parms, NULL );

	return GetDumpString_Parms.ReturnValue;
};

// Function Engine.NavMeshPathGoalEvaluator.Recycle
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UNavMeshPathGoalEvaluator::eventRecycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 25022 ];

	UNavMeshPathGoalEvaluator_eventRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshGoal_At.Recycle
// [0x00020002] 
// Parameters infos:

void UNavMeshGoal_At::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 25047 ];

	UNavMeshGoal_At_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshGoal_At.AtLocation
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// struct FVector                 GoalLocation                   ( CPF_Parm )
// float                          Dist                           ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )

bool UNavMeshGoal_At::AtLocation ( class UNavigationHandle* NavHandle, struct FVector GoalLocation, float Dist, unsigned long bReturnPartial )
{
	static UFunction* pFnAtLocation = NULL;

	if ( ! pFnAtLocation )
		pFnAtLocation = (UFunction*) UObject::GObjObjects()->Data[ 16845 ];

	UNavMeshGoal_At_execAtLocation_Parms AtLocation_Parms;
	AtLocation_Parms.NavHandle = NavHandle;
	memcpy ( &AtLocation_Parms.GoalLocation, &GoalLocation, 0xC );
	AtLocation_Parms.Dist = Dist;
	AtLocation_Parms.bReturnPartial = bReturnPartial;

	this->ProcessEvent ( pFnAtLocation, &AtLocation_Parms, NULL );

	return AtLocation_Parms.ReturnValue;
};

// Function Engine.NavMeshGoal_At.AtActor
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// class AActor*                  GoalActor                      ( CPF_Parm )
// float                          Dist                           ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )

bool UNavMeshGoal_At::AtActor ( class UNavigationHandle* NavHandle, class AActor* GoalActor, float Dist, unsigned long bReturnPartial )
{
	static UFunction* pFnAtActor = NULL;

	if ( ! pFnAtActor )
		pFnAtActor = (UFunction*) UObject::GObjObjects()->Data[ 25031 ];

	UNavMeshGoal_At_execAtActor_Parms AtActor_Parms;
	AtActor_Parms.NavHandle = NavHandle;
	AtActor_Parms.GoalActor = GoalActor;
	AtActor_Parms.Dist = Dist;
	AtActor_Parms.bReturnPartial = bReturnPartial;

	this->ProcessEvent ( pFnAtActor, &AtActor_Parms, NULL );

	return AtActor_Parms.ReturnValue;
};

// Function Engine.NavMeshGoal_At.RecycleNative
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UNavMeshGoal_At::RecycleNative ( )
{
	static UFunction* pFnRecycleNative = NULL;

	if ( ! pFnRecycleNative )
		pFnRecycleNative = (UFunction*) UObject::GObjObjects()->Data[ 25030 ];

	UNavMeshGoal_At_execRecycleNative_Parms RecycleNative_Parms;

	pFnRecycleNative->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecycleNative, &RecycleNative_Parms, NULL );

	pFnRecycleNative->FunctionFlags |= 0x400;
};

// Function Engine.NavMeshGoal_ClosestActorInList.RecycleInternal
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UNavMeshGoal_ClosestActorInList::RecycleInternal ( )
{
	static UFunction* pFnRecycleInternal = NULL;

	if ( ! pFnRecycleInternal )
		pFnRecycleInternal = (UFunction*) UObject::GObjObjects()->Data[ 25062 ];

	UNavMeshGoal_ClosestActorInList_execRecycleInternal_Parms RecycleInternal_Parms;

	pFnRecycleInternal->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecycleInternal, &RecycleInternal_Parms, NULL );

	pFnRecycleInternal->FunctionFlags |= 0x400;
};

// Function Engine.NavMeshGoal_ClosestActorInList.Recycle
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UNavMeshGoal_ClosestActorInList::eventRecycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 25061 ];

	UNavMeshGoal_ClosestActorInList_eventRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshGoal_ClosestActorInList.ClosestActorInList
// [0x00422002] 
// Parameters infos:
// class UNavMeshGoal_ClosestActorInList* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// struct TArray<struct FBiasedGoalActor> InGoalList                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class UNavMeshGoal_ClosestActorInList* UNavMeshGoal_ClosestActorInList::ClosestActorInList ( class UNavigationHandle* NavHandle, struct TArray<struct FBiasedGoalActor>* InGoalList )
{
	static UFunction* pFnClosestActorInList = NULL;

	if ( ! pFnClosestActorInList )
		pFnClosestActorInList = (UFunction*) UObject::GObjObjects()->Data[ 25055 ];

	UNavMeshGoal_ClosestActorInList_execClosestActorInList_Parms ClosestActorInList_Parms;
	ClosestActorInList_Parms.NavHandle = NavHandle;

	this->ProcessEvent ( pFnClosestActorInList, &ClosestActorInList_Parms, NULL );

	if ( InGoalList )
		memcpy ( InGoalList, &ClosestActorInList_Parms.InGoalList, 0x10 );

	return ClosestActorInList_Parms.ReturnValue;
};

// Function Engine.NavMeshGoal_Null.Recycle
// [0x00020002] 
// Parameters infos:

void UNavMeshGoal_Null::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 25071 ];

	UNavMeshGoal_Null_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshGoal_Null.RecycleNative
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UNavMeshGoal_Null::RecycleNative ( )
{
	static UFunction* pFnRecycleNative = NULL;

	if ( ! pFnRecycleNative )
		pFnRecycleNative = (UFunction*) UObject::GObjObjects()->Data[ 25070 ];

	UNavMeshGoal_Null_execRecycleNative_Parms RecycleNative_Parms;

	pFnRecycleNative->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecycleNative, &RecycleNative_Parms, NULL );

	pFnRecycleNative->FunctionFlags |= 0x400;
};

// Function Engine.NavMeshGoal_Null.GoUntilBust
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// int                            InMaxPathVisits                ( CPF_OptionalParm | CPF_Parm )

bool UNavMeshGoal_Null::GoUntilBust ( class UNavigationHandle* NavHandle, int InMaxPathVisits )
{
	static UFunction* pFnGoUntilBust = NULL;

	if ( ! pFnGoUntilBust )
		pFnGoUntilBust = (UFunction*) UObject::GObjObjects()->Data[ 25065 ];

	UNavMeshGoal_Null_execGoUntilBust_Parms GoUntilBust_Parms;
	GoUntilBust_Parms.NavHandle = NavHandle;
	GoUntilBust_Parms.InMaxPathVisits = InMaxPathVisits;

	this->ProcessEvent ( pFnGoUntilBust, &GoUntilBust_Parms, NULL );

	return GoUntilBust_Parms.ReturnValue;
};

// Function Engine.NavMeshGoal_PolyEncompassesAI.Recycle
// [0x00020002] 
// Parameters infos:

void UNavMeshGoal_PolyEncompassesAI::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 25077 ];

	UNavMeshGoal_PolyEncompassesAI_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshGoal_PolyEncompassesAI.MakeSureAIFits
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )

bool UNavMeshGoal_PolyEncompassesAI::MakeSureAIFits ( class UNavigationHandle* NavHandle )
{
	static UFunction* pFnMakeSureAIFits = NULL;

	if ( ! pFnMakeSureAIFits )
		pFnMakeSureAIFits = (UFunction*) UObject::GObjObjects()->Data[ 25073 ];

	UNavMeshGoal_PolyEncompassesAI_execMakeSureAIFits_Parms MakeSureAIFits_Parms;
	MakeSureAIFits_Parms.NavHandle = NavHandle;

	this->ProcessEvent ( pFnMakeSureAIFits, &MakeSureAIFits_Parms, NULL );

	return MakeSureAIFits_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.CalculatePathDistance
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 FinalDest                      ( CPF_OptionalParm | CPF_Parm )

float UNavigationHandle::CalculatePathDistance ( struct FVector FinalDest )
{
	static UFunction* pFnCalculatePathDistance = NULL;

	if ( ! pFnCalculatePathDistance )
		pFnCalculatePathDistance = (UFunction*) UObject::GObjObjects()->Data[ 25005 ];

	UNavigationHandle_execCalculatePathDistance_Parms CalculatePathDistance_Parms;
	memcpy ( &CalculatePathDistance_Parms.FinalDest, &FinalDest, 0xC );

	pFnCalculatePathDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalculatePathDistance, &CalculatePathDistance_Parms, NULL );

	pFnCalculatePathDistance->FunctionFlags |= 0x400;

	return CalculatePathDistance_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.GetFirstMoveLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UNavigationHandle::GetFirstMoveLocation ( )
{
	static UFunction* pFnGetFirstMoveLocation = NULL;

	if ( ! pFnGetFirstMoveLocation )
		pFnGetFirstMoveLocation = (UFunction*) UObject::GObjObjects()->Data[ 25003 ];

	UNavigationHandle_execGetFirstMoveLocation_Parms GetFirstMoveLocation_Parms;

	pFnGetFirstMoveLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFirstMoveLocation, &GetFirstMoveLocation_Parms, NULL );

	pFnGetFirstMoveLocation->FunctionFlags |= 0x400;

	return GetFirstMoveLocation_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.IsAnchorInescapable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UNavigationHandle::IsAnchorInescapable ( )
{
	static UFunction* pFnIsAnchorInescapable = NULL;

	if ( ! pFnIsAnchorInescapable )
		pFnIsAnchorInescapable = (UFunction*) UObject::GObjObjects()->Data[ 25001 ];

	UNavigationHandle_execIsAnchorInescapable_Parms IsAnchorInescapable_Parms;

	pFnIsAnchorInescapable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAnchorInescapable, &IsAnchorInescapable_Parms, NULL );

	pFnIsAnchorInescapable->FunctionFlags |= 0x400;

	return IsAnchorInescapable_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.LimitPathCacheDistance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          MaxDist                        ( CPF_Parm )

void UNavigationHandle::LimitPathCacheDistance ( float MaxDist )
{
	static UFunction* pFnLimitPathCacheDistance = NULL;

	if ( ! pFnLimitPathCacheDistance )
		pFnLimitPathCacheDistance = (UFunction*) UObject::GObjObjects()->Data[ 24999 ];

	UNavigationHandle_execLimitPathCacheDistance_Parms LimitPathCacheDistance_Parms;
	LimitPathCacheDistance_Parms.MaxDist = MaxDist;

	pFnLimitPathCacheDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLimitPathCacheDistance, &LimitPathCacheDistance_Parms, NULL );

	pFnLimitPathCacheDistance->FunctionFlags |= 0x400;
};

// Function Engine.NavigationHandle.GetValidPositionsForBox
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 pos                            ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )
// unsigned long                  bMustBeReachableFromStartPos   ( CPF_Parm )
// int                            MaxPositions                   ( CPF_OptionalParm | CPF_Parm )
// float                          MinRadius                      ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 ValidBoxAroundStartPos         ( CPF_OptionalParm | CPF_Parm )
// struct TArray<struct FVector>  out_ValidPositions             ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UNavigationHandle::GetValidPositionsForBox ( struct FVector pos, float Radius, struct FVector Extent, unsigned long bMustBeReachableFromStartPos, int MaxPositions, float MinRadius, struct FVector ValidBoxAroundStartPos, struct TArray<struct FVector>* out_ValidPositions )
{
	static UFunction* pFnGetValidPositionsForBox = NULL;

	if ( ! pFnGetValidPositionsForBox )
		pFnGetValidPositionsForBox = (UFunction*) UObject::GObjObjects()->Data[ 24989 ];

	UNavigationHandle_execGetValidPositionsForBox_Parms GetValidPositionsForBox_Parms;
	memcpy ( &GetValidPositionsForBox_Parms.pos, &pos, 0xC );
	GetValidPositionsForBox_Parms.Radius = Radius;
	memcpy ( &GetValidPositionsForBox_Parms.Extent, &Extent, 0xC );
	GetValidPositionsForBox_Parms.bMustBeReachableFromStartPos = bMustBeReachableFromStartPos;
	GetValidPositionsForBox_Parms.MaxPositions = MaxPositions;
	GetValidPositionsForBox_Parms.MinRadius = MinRadius;
	memcpy ( &GetValidPositionsForBox_Parms.ValidBoxAroundStartPos, &ValidBoxAroundStartPos, 0xC );

	pFnGetValidPositionsForBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetValidPositionsForBox, &GetValidPositionsForBox_Parms, NULL );

	pFnGetValidPositionsForBox->FunctionFlags |= 0x400;

	if ( out_ValidPositions )
		memcpy ( out_ValidPositions, &GetValidPositionsForBox_Parms.out_ValidPositions, 0x10 );
};

// Function Engine.NavigationHandle.GetAllPolyCentersWithinBounds
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 pos                            ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )
// struct TArray<struct FVector>  out_PolyCtrs                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UNavigationHandle::GetAllPolyCentersWithinBounds ( struct FVector pos, struct FVector Extent, struct TArray<struct FVector>* out_PolyCtrs )
{
	static UFunction* pFnGetAllPolyCentersWithinBounds = NULL;

	if ( ! pFnGetAllPolyCentersWithinBounds )
		pFnGetAllPolyCentersWithinBounds = (UFunction*) UObject::GObjObjects()->Data[ 24984 ];

	UNavigationHandle_execGetAllPolyCentersWithinBounds_Parms GetAllPolyCentersWithinBounds_Parms;
	memcpy ( &GetAllPolyCentersWithinBounds_Parms.pos, &pos, 0xC );
	memcpy ( &GetAllPolyCentersWithinBounds_Parms.Extent, &Extent, 0xC );

	pFnGetAllPolyCentersWithinBounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAllPolyCentersWithinBounds, &GetAllPolyCentersWithinBounds_Parms, NULL );

	pFnGetAllPolyCentersWithinBounds->FunctionFlags |= 0x400;

	if ( out_PolyCtrs )
		memcpy ( out_PolyCtrs, &GetAllPolyCentersWithinBounds_Parms.out_PolyCtrs, 0x10 );
};

// Function Engine.NavigationHandle.DrawPathCache
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 DrawOffset                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FColor                  DrawColor                      ( CPF_OptionalParm | CPF_Parm )

void UNavigationHandle::DrawPathCache ( struct FVector DrawOffset, unsigned long bPersistent, struct FColor DrawColor )
{
	static UFunction* pFnDrawPathCache = NULL;

	if ( ! pFnDrawPathCache )
		pFnDrawPathCache = (UFunction*) UObject::GObjObjects()->Data[ 24980 ];

	UNavigationHandle_execDrawPathCache_Parms DrawPathCache_Parms;
	memcpy ( &DrawPathCache_Parms.DrawOffset, &DrawOffset, 0xC );
	DrawPathCache_Parms.bPersistent = bPersistent;
	memcpy ( &DrawPathCache_Parms.DrawColor, &DrawColor, 0x4 );

	pFnDrawPathCache->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawPathCache, &DrawPathCache_Parms, NULL );

	pFnDrawPathCache->FunctionFlags |= 0x400;
};

// Function Engine.NavigationHandle.ActorReachable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool UNavigationHandle::ActorReachable ( class AActor* A )
{
	static UFunction* pFnActorReachable = NULL;

	if ( ! pFnActorReachable )
		pFnActorReachable = (UFunction*) UObject::GObjObjects()->Data[ 24977 ];

	UNavigationHandle_execActorReachable_Parms ActorReachable_Parms;
	ActorReachable_Parms.A = A;

	pFnActorReachable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActorReachable, &ActorReachable_Parms, NULL );

	pFnActorReachable->FunctionFlags |= 0x400;

	return ActorReachable_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.PointReachable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Point                          ( CPF_Parm )

bool UNavigationHandle::PointReachable ( struct FVector Point )
{
	static UFunction* pFnPointReachable = NULL;

	if ( ! pFnPointReachable )
		pFnPointReachable = (UFunction*) UObject::GObjObjects()->Data[ 24974 ];

	UNavigationHandle_execPointReachable_Parms PointReachable_Parms;
	memcpy ( &PointReachable_Parms.Point, &Point, 0xC );

	pFnPointReachable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPointReachable, &PointReachable_Parms, NULL );

	pFnPointReachable->FunctionFlags |= 0x400;

	return PointReachable_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.PointCheck
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Pt                             ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )

bool UNavigationHandle::PointCheck ( struct FVector Pt, struct FVector Extent )
{
	static UFunction* pFnPointCheck = NULL;

	if ( ! pFnPointCheck )
		pFnPointCheck = (UFunction*) UObject::GObjObjects()->Data[ 24970 ];

	UNavigationHandle_execPointCheck_Parms PointCheck_Parms;
	memcpy ( &PointCheck_Parms.Pt, &Pt, 0xC );
	memcpy ( &PointCheck_Parms.Extent, &Extent, 0xC );

	pFnPointCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPointCheck, &PointCheck_Parms, NULL );

	pFnPointCheck->FunctionFlags |= 0x400;

	return PointCheck_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.LineCheck
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Start                          ( CPF_Parm )
// struct FVector                 End                            ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )
// struct FVector                 out_HitLocation                ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )
// struct FVector                 out_HitNormal                  ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UNavigationHandle::LineCheck ( struct FVector Start, struct FVector End, struct FVector Extent, struct FVector* out_HitLocation, struct FVector* out_HitNormal )
{
	static UFunction* pFnLineCheck = NULL;

	if ( ! pFnLineCheck )
		pFnLineCheck = (UFunction*) UObject::GObjObjects()->Data[ 24963 ];

	UNavigationHandle_execLineCheck_Parms LineCheck_Parms;
	memcpy ( &LineCheck_Parms.Start, &Start, 0xC );
	memcpy ( &LineCheck_Parms.End, &End, 0xC );
	memcpy ( &LineCheck_Parms.Extent, &Extent, 0xC );

	pFnLineCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLineCheck, &LineCheck_Parms, NULL );

	pFnLineCheck->FunctionFlags |= 0x400;

	if ( out_HitLocation )
		memcpy ( out_HitLocation, &LineCheck_Parms.out_HitLocation, 0xC );

	if ( out_HitNormal )
		memcpy ( out_HitNormal, &LineCheck_Parms.out_HitNormal, 0xC );

	return LineCheck_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.ObstaclePointCheck
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Pt                             ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )

bool UNavigationHandle::ObstaclePointCheck ( struct FVector Pt, struct FVector Extent )
{
	static UFunction* pFnObstaclePointCheck = NULL;

	if ( ! pFnObstaclePointCheck )
		pFnObstaclePointCheck = (UFunction*) UObject::GObjObjects()->Data[ 24959 ];

	UNavigationHandle_execObstaclePointCheck_Parms ObstaclePointCheck_Parms;
	memcpy ( &ObstaclePointCheck_Parms.Pt, &Pt, 0xC );
	memcpy ( &ObstaclePointCheck_Parms.Extent, &Extent, 0xC );

	pFnObstaclePointCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnObstaclePointCheck, &ObstaclePointCheck_Parms, NULL );

	pFnObstaclePointCheck->FunctionFlags |= 0x400;

	return ObstaclePointCheck_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.ObstacleLineCheck
// [0x00426401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Start                          ( CPF_Parm )
// struct FVector                 End                            ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )
// struct FVector                 out_HitLoc                     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )
// struct FVector                 out_HitNorm                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UNavigationHandle::ObstacleLineCheck ( struct FVector Start, struct FVector End, struct FVector Extent, struct FVector* out_HitLoc, struct FVector* out_HitNorm )
{
	static UFunction* pFnObstacleLineCheck = NULL;

	if ( ! pFnObstacleLineCheck )
		pFnObstacleLineCheck = (UFunction*) UObject::GObjObjects()->Data[ 24952 ];

	UNavigationHandle_execObstacleLineCheck_Parms ObstacleLineCheck_Parms;
	memcpy ( &ObstacleLineCheck_Parms.Start, &Start, 0xC );
	memcpy ( &ObstacleLineCheck_Parms.End, &End, 0xC );
	memcpy ( &ObstacleLineCheck_Parms.Extent, &Extent, 0xC );

	pFnObstacleLineCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnObstacleLineCheck, &ObstacleLineCheck_Parms, NULL );

	pFnObstacleLineCheck->FunctionFlags |= 0x400;

	if ( out_HitLoc )
		memcpy ( out_HitLoc, &ObstacleLineCheck_Parms.out_HitLoc, 0xC );

	if ( out_HitNorm )
		memcpy ( out_HitNorm, &ObstacleLineCheck_Parms.out_HitNorm, 0xC );

	return ObstacleLineCheck_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.SuggestMovePreparation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 MovePt                         ( CPF_Parm )
// class AController*             C                              ( CPF_Parm )

bool UNavigationHandle::SuggestMovePreparation ( struct FVector MovePt, class AController* C )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = (UFunction*) UObject::GObjObjects()->Data[ 24948 ];

	UNavigationHandle_execSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	memcpy ( &SuggestMovePreparation_Parms.MovePt, &MovePt, 0xC );
	SuggestMovePreparation_Parms.C = C;

	pFnSuggestMovePreparation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	pFnSuggestMovePreparation->FunctionFlags |= 0x400;

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.FindPath
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  out_DestActor                  ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )
// int                            out_DestItem                   ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UNavigationHandle::FindPath ( class AActor** out_DestActor, int* out_DestItem )
{
	static UFunction* pFnFindPath = NULL;

	if ( ! pFnFindPath )
		pFnFindPath = (UFunction*) UObject::GObjObjects()->Data[ 16848 ];

	UNavigationHandle_execFindPath_Parms FindPath_Parms;

	pFnFindPath->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPath, &FindPath_Parms, NULL );

	pFnFindPath->FunctionFlags |= 0x400;

	if ( out_DestActor )
		*out_DestActor = FindPath_Parms.out_DestActor;

	if ( out_DestItem )
		*out_DestItem = FindPath_Parms.out_DestItem;

	return FindPath_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.ComputeValidFinalDestination
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 out_ComputedPosition           ( CPF_Parm | CPF_OutParm )

bool UNavigationHandle::ComputeValidFinalDestination ( struct FVector* out_ComputedPosition )
{
	static UFunction* pFnComputeValidFinalDestination = NULL;

	if ( ! pFnComputeValidFinalDestination )
		pFnComputeValidFinalDestination = (UFunction*) UObject::GObjObjects()->Data[ 24943 ];

	UNavigationHandle_execComputeValidFinalDestination_Parms ComputeValidFinalDestination_Parms;

	pFnComputeValidFinalDestination->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnComputeValidFinalDestination, &ComputeValidFinalDestination_Parms, NULL );

	pFnComputeValidFinalDestination->FunctionFlags |= 0x400;

	if ( out_ComputedPosition )
		memcpy ( out_ComputedPosition, &ComputeValidFinalDestination_Parms.out_ComputedPosition, 0xC );

	return ComputeValidFinalDestination_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.SetFinalDestination
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 FinalDest                      ( CPF_Parm )

bool UNavigationHandle::SetFinalDestination ( struct FVector FinalDest )
{
	static UFunction* pFnSetFinalDestination = NULL;

	if ( ! pFnSetFinalDestination )
		pFnSetFinalDestination = (UFunction*) UObject::GObjObjects()->Data[ 24940 ];

	UNavigationHandle_execSetFinalDestination_Parms SetFinalDestination_Parms;
	memcpy ( &SetFinalDestination_Parms.FinalDest, &FinalDest, 0xC );

	pFnSetFinalDestination->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFinalDestination, &SetFinalDestination_Parms, NULL );

	pFnSetFinalDestination->FunctionFlags |= 0x400;

	return SetFinalDestination_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.GetNextMoveLocation
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          ArrivalDistance                ( CPF_Parm )
// struct FVector                 out_MoveDest                   ( CPF_Parm | CPF_OutParm )

bool UNavigationHandle::GetNextMoveLocation ( float ArrivalDistance, struct FVector* out_MoveDest )
{
	static UFunction* pFnGetNextMoveLocation = NULL;

	if ( ! pFnGetNextMoveLocation )
		pFnGetNextMoveLocation = (UFunction*) UObject::GObjObjects()->Data[ 24936 ];

	UNavigationHandle_execGetNextMoveLocation_Parms GetNextMoveLocation_Parms;
	GetNextMoveLocation_Parms.ArrivalDistance = ArrivalDistance;

	pFnGetNextMoveLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNextMoveLocation, &GetNextMoveLocation_Parms, NULL );

	pFnGetNextMoveLocation->FunctionFlags |= 0x400;

	if ( out_MoveDest )
		memcpy ( out_MoveDest, &GetNextMoveLocation_Parms.out_MoveDest, 0xC );

	return GetNextMoveLocation_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.GetPylonFromPos
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class APylon*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Position                       ( CPF_Parm )

class APylon* UNavigationHandle::GetPylonFromPos ( struct FVector Position )
{
	static UFunction* pFnGetPylonFromPos = NULL;

	if ( ! pFnGetPylonFromPos )
		pFnGetPylonFromPos = (UFunction*) UObject::GObjObjects()->Data[ 24933 ];

	UNavigationHandle_execGetPylonFromPos_Parms GetPylonFromPos_Parms;
	memcpy ( &GetPylonFromPos_Parms.Position, &Position, 0xC );

	pFnGetPylonFromPos->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPylonFromPos, &GetPylonFromPos_Parms, NULL );

	pFnGetPylonFromPos->FunctionFlags |= 0x400;

	return GetPylonFromPos_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.FindPylon
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UNavigationHandle::FindPylon ( )
{
	static UFunction* pFnFindPylon = NULL;

	if ( ! pFnFindPylon )
		pFnFindPylon = (UFunction*) UObject::GObjObjects()->Data[ 24931 ];

	UNavigationHandle_execFindPylon_Parms FindPylon_Parms;

	pFnFindPylon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPylon, &FindPylon_Parms, NULL );

	pFnFindPylon->FunctionFlags |= 0x400;

	return FindPylon_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.GetBestUnfinishedPathPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UNavigationHandle::GetBestUnfinishedPathPoint ( )
{
	static UFunction* pFnGetBestUnfinishedPathPoint = NULL;

	if ( ! pFnGetBestUnfinishedPathPoint )
		pFnGetBestUnfinishedPathPoint = (UFunction*) UObject::GObjObjects()->Data[ 24929 ];

	UNavigationHandle_execGetBestUnfinishedPathPoint_Parms GetBestUnfinishedPathPoint_Parms;

	pFnGetBestUnfinishedPathPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBestUnfinishedPathPoint, &GetBestUnfinishedPathPoint_Parms, NULL );

	pFnGetBestUnfinishedPathPoint->FunctionFlags |= 0x400;

	return GetBestUnfinishedPathPoint_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.PathCache_RemoveIndex
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            InIdx                          ( CPF_Parm )
// int                            Count                          ( CPF_OptionalParm | CPF_Parm )

void UNavigationHandle::PathCache_RemoveIndex ( int InIdx, int Count )
{
	static UFunction* pFnPathCache_RemoveIndex = NULL;

	if ( ! pFnPathCache_RemoveIndex )
		pFnPathCache_RemoveIndex = (UFunction*) UObject::GObjObjects()->Data[ 24926 ];

	UNavigationHandle_execPathCache_RemoveIndex_Parms PathCache_RemoveIndex_Parms;
	PathCache_RemoveIndex_Parms.InIdx = InIdx;
	PathCache_RemoveIndex_Parms.Count = Count;

	pFnPathCache_RemoveIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPathCache_RemoveIndex, &PathCache_RemoveIndex_Parms, NULL );

	pFnPathCache_RemoveIndex->FunctionFlags |= 0x400;
};

// Function Engine.NavigationHandle.PathCache_GetGoalPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UNavigationHandle::PathCache_GetGoalPoint ( )
{
	static UFunction* pFnPathCache_GetGoalPoint = NULL;

	if ( ! pFnPathCache_GetGoalPoint )
		pFnPathCache_GetGoalPoint = (UFunction*) UObject::GObjObjects()->Data[ 24924 ];

	UNavigationHandle_execPathCache_GetGoalPoint_Parms PathCache_GetGoalPoint_Parms;

	pFnPathCache_GetGoalPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPathCache_GetGoalPoint, &PathCache_GetGoalPoint_Parms, NULL );

	pFnPathCache_GetGoalPoint->FunctionFlags |= 0x400;

	return PathCache_GetGoalPoint_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.PathCache_Empty
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UNavigationHandle::PathCache_Empty ( )
{
	static UFunction* pFnPathCache_Empty = NULL;

	if ( ! pFnPathCache_Empty )
		pFnPathCache_Empty = (UFunction*) UObject::GObjObjects()->Data[ 24923 ];

	UNavigationHandle_execPathCache_Empty_Parms PathCache_Empty_Parms;

	pFnPathCache_Empty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPathCache_Empty, &PathCache_Empty_Parms, NULL );

	pFnPathCache_Empty->FunctionFlags |= 0x400;
};

// Function Engine.NavigationHandle.GetPathCacheLength
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UNavigationHandle::GetPathCacheLength ( )
{
	static UFunction* pFnGetPathCacheLength = NULL;

	if ( ! pFnGetPathCacheLength )
		pFnGetPathCacheLength = (UFunction*) UObject::GObjObjects()->Data[ 24920 ];

	UNavigationHandle_execGetPathCacheLength_Parms GetPathCacheLength_Parms;

	this->ProcessEvent ( pFnGetPathCacheLength, &GetPathCacheLength_Parms, NULL );

	return GetPathCacheLength_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.CreatePathGoalEvaluator
// [0x00020002] 
// Parameters infos:
// class UNavMeshPathGoalEvaluator* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  GoalEvalClass                  ( CPF_Parm )

class UNavMeshPathGoalEvaluator* UNavigationHandle::CreatePathGoalEvaluator ( class UClass* GoalEvalClass )
{
	static UFunction* pFnCreatePathGoalEvaluator = NULL;

	if ( ! pFnCreatePathGoalEvaluator )
		pFnCreatePathGoalEvaluator = (UFunction*) UObject::GObjObjects()->Data[ 24917 ];

	UNavigationHandle_execCreatePathGoalEvaluator_Parms CreatePathGoalEvaluator_Parms;
	CreatePathGoalEvaluator_Parms.GoalEvalClass = GoalEvalClass;

	this->ProcessEvent ( pFnCreatePathGoalEvaluator, &CreatePathGoalEvaluator_Parms, NULL );

	return CreatePathGoalEvaluator_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.CreatePathConstraint
// [0x00020002] 
// Parameters infos:
// class UNavMeshPathConstraint*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ConstraintClass                ( CPF_Parm )

class UNavMeshPathConstraint* UNavigationHandle::CreatePathConstraint ( class UClass* ConstraintClass )
{
	static UFunction* pFnCreatePathConstraint = NULL;

	if ( ! pFnCreatePathConstraint )
		pFnCreatePathConstraint = (UFunction*) UObject::GObjObjects()->Data[ 24914 ];

	UNavigationHandle_execCreatePathConstraint_Parms CreatePathConstraint_Parms;
	CreatePathConstraint_Parms.ConstraintClass = ConstraintClass;

	this->ProcessEvent ( pFnCreatePathConstraint, &CreatePathConstraint_Parms, NULL );

	return CreatePathConstraint_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.AddGoalEvaluator
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UNavMeshPathGoalEvaluator* Evaluator                      ( CPF_Parm )

void UNavigationHandle::AddGoalEvaluator ( class UNavMeshPathGoalEvaluator* Evaluator )
{
	static UFunction* pFnAddGoalEvaluator = NULL;

	if ( ! pFnAddGoalEvaluator )
		pFnAddGoalEvaluator = (UFunction*) UObject::GObjObjects()->Data[ 24912 ];

	UNavigationHandle_execAddGoalEvaluator_Parms AddGoalEvaluator_Parms;
	AddGoalEvaluator_Parms.Evaluator = Evaluator;

	pFnAddGoalEvaluator->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddGoalEvaluator, &AddGoalEvaluator_Parms, NULL );

	pFnAddGoalEvaluator->FunctionFlags |= 0x400;
};

// Function Engine.NavigationHandle.AddPathConstraint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UNavMeshPathConstraint*  Constraint                     ( CPF_Parm )

void UNavigationHandle::AddPathConstraint ( class UNavMeshPathConstraint* Constraint )
{
	static UFunction* pFnAddPathConstraint = NULL;

	if ( ! pFnAddPathConstraint )
		pFnAddPathConstraint = (UFunction*) UObject::GObjObjects()->Data[ 24910 ];

	UNavigationHandle_execAddPathConstraint_Parms AddPathConstraint_Parms;
	AddPathConstraint_Parms.Constraint = Constraint;

	pFnAddPathConstraint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddPathConstraint, &AddPathConstraint_Parms, NULL );

	pFnAddPathConstraint->FunctionFlags |= 0x400;
};

// Function Engine.NavigationHandle.ClearConstraints
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UNavigationHandle::ClearConstraints ( )
{
	static UFunction* pFnClearConstraints = NULL;

	if ( ! pFnClearConstraints )
		pFnClearConstraints = (UFunction*) UObject::GObjObjects()->Data[ 24909 ];

	UNavigationHandle_execClearConstraints_Parms ClearConstraints_Parms;

	pFnClearConstraints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearConstraints, &ClearConstraints_Parms, NULL );

	pFnClearConstraints->FunctionFlags |= 0x400;
};

// Function Engine.PathConstraint.GetDumpString
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UPathConstraint::eventGetDumpString ( )
{
	static UFunction* pFnGetDumpString = NULL;

	if ( ! pFnGetDumpString )
		pFnGetDumpString = (UFunction*) UObject::GObjObjects()->Data[ 27729 ];

	UPathConstraint_eventGetDumpString_Parms GetDumpString_Parms;

	this->ProcessEvent ( pFnGetDumpString, &GetDumpString_Parms, NULL );

	return GetDumpString_Parms.ReturnValue;
};

// Function Engine.PathConstraint.Recycle
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UPathConstraint::eventRecycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 27727 ];

	UPathConstraint_eventRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.Path_AlongLine.Recycle
// [0x00020002] 
// Parameters infos:

void UPath_AlongLine::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 27738 ];

	UPath_AlongLine_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.Path_AlongLine.AlongLine
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// struct FVector                 Dir                            ( CPF_Parm )

bool UPath_AlongLine::AlongLine ( class APawn* P, struct FVector Dir )
{
	static UFunction* pFnAlongLine = NULL;

	if ( ! pFnAlongLine )
		pFnAlongLine = (UFunction*) UObject::GObjObjects()->Data[ 27732 ];

	UPath_AlongLine_execAlongLine_Parms AlongLine_Parms;
	AlongLine_Parms.P = P;
	memcpy ( &AlongLine_Parms.Dir, &Dir, 0xC );

	this->ProcessEvent ( pFnAlongLine, &AlongLine_Parms, NULL );

	return AlongLine_Parms.ReturnValue;
};

// Function Engine.Path_AvoidInEscapableNodes.Recycle
// [0x00020002] 
// Parameters infos:

void UPath_AvoidInEscapableNodes::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 27745 ];

	UPath_AvoidInEscapableNodes_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.Path_AvoidInEscapableNodes.DontGetStuck
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool UPath_AvoidInEscapableNodes::DontGetStuck ( class APawn* P )
{
	static UFunction* pFnDontGetStuck = NULL;

	if ( ! pFnDontGetStuck )
		pFnDontGetStuck = (UFunction*) UObject::GObjObjects()->Data[ 27741 ];

	UPath_AvoidInEscapableNodes_execDontGetStuck_Parms DontGetStuck_Parms;
	DontGetStuck_Parms.P = P;

	this->ProcessEvent ( pFnDontGetStuck, &DontGetStuck_Parms, NULL );

	return DontGetStuck_Parms.ReturnValue;
};

// Function Engine.Path_AvoidInEscapableNodes.CachePawnReacFlags
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void UPath_AvoidInEscapableNodes::CachePawnReacFlags ( class APawn* P )
{
	static UFunction* pFnCachePawnReacFlags = NULL;

	if ( ! pFnCachePawnReacFlags )
		pFnCachePawnReacFlags = (UFunction*) UObject::GObjObjects()->Data[ 27739 ];

	UPath_AvoidInEscapableNodes_execCachePawnReacFlags_Parms CachePawnReacFlags_Parms;
	CachePawnReacFlags_Parms.P = P;

	pFnCachePawnReacFlags->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCachePawnReacFlags, &CachePawnReacFlags_Parms, NULL );

	pFnCachePawnReacFlags->FunctionFlags |= 0x400;
};

// Function Engine.Path_MinDistBetweenSpecsOfType.Recycle
// [0x00020002] 
// Parameters infos:

void UPath_MinDistBetweenSpecsOfType::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 27760 ];

	UPath_MinDistBetweenSpecsOfType_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.Path_MinDistBetweenSpecsOfType.EnforceMinDist
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// float                          InMinDist                      ( CPF_Parm )
// class UClass*                  InSpecClass                    ( CPF_Parm )
// struct FVector                 LastLocation                   ( CPF_OptionalParm | CPF_Parm )

bool UPath_MinDistBetweenSpecsOfType::EnforceMinDist ( class APawn* P, float InMinDist, class UClass* InSpecClass, struct FVector LastLocation )
{
	static UFunction* pFnEnforceMinDist = NULL;

	if ( ! pFnEnforceMinDist )
		pFnEnforceMinDist = (UFunction*) UObject::GObjObjects()->Data[ 27750 ];

	UPath_MinDistBetweenSpecsOfType_execEnforceMinDist_Parms EnforceMinDist_Parms;
	EnforceMinDist_Parms.P = P;
	EnforceMinDist_Parms.InMinDist = InMinDist;
	EnforceMinDist_Parms.InSpecClass = InSpecClass;
	memcpy ( &EnforceMinDist_Parms.LastLocation, &LastLocation, 0xC );

	this->ProcessEvent ( pFnEnforceMinDist, &EnforceMinDist_Parms, NULL );

	return EnforceMinDist_Parms.ReturnValue;
};

// Function Engine.Path_TowardGoal.Recycle
// [0x00020002] 
// Parameters infos:

void UPath_TowardGoal::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 27767 ];

	UPath_TowardGoal_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.Path_TowardGoal.TowardGoal
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// class AActor*                  Goal                           ( CPF_Parm )

bool UPath_TowardGoal::TowardGoal ( class APawn* P, class AActor* Goal )
{
	static UFunction* pFnTowardGoal = NULL;

	if ( ! pFnTowardGoal )
		pFnTowardGoal = (UFunction*) UObject::GObjObjects()->Data[ 27761 ];

	UPath_TowardGoal_execTowardGoal_Parms TowardGoal_Parms;
	TowardGoal_Parms.P = P;
	TowardGoal_Parms.Goal = Goal;

	this->ProcessEvent ( pFnTowardGoal, &TowardGoal_Parms, NULL );

	return TowardGoal_Parms.ReturnValue;
};

// Function Engine.Path_TowardPoint.Recycle
// [0x00020002] 
// Parameters infos:

void UPath_TowardPoint::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 27774 ];

	UPath_TowardPoint_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.Path_TowardPoint.TowardPoint
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// struct FVector                 Point                          ( CPF_Parm )

bool UPath_TowardPoint::TowardPoint ( class APawn* P, struct FVector Point )
{
	static UFunction* pFnTowardPoint = NULL;

	if ( ! pFnTowardPoint )
		pFnTowardPoint = (UFunction*) UObject::GObjObjects()->Data[ 27768 ];

	UPath_TowardPoint_execTowardPoint_Parms TowardPoint_Parms;
	TowardPoint_Parms.P = P;
	memcpy ( &TowardPoint_Parms.Point, &Point, 0xC );

	this->ProcessEvent ( pFnTowardPoint, &TowardPoint_Parms, NULL );

	return TowardPoint_Parms.ReturnValue;
};

// Function Engine.Path_WithinDistanceEnvelope.Recycle
// [0x00020002] 
// Parameters infos:

void UPath_WithinDistanceEnvelope::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 27791 ];

	UPath_WithinDistanceEnvelope_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.Path_WithinDistanceEnvelope.StayWithinEnvelopeToLoc
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// struct FVector                 InEnvelopeTestPoint            ( CPF_Parm )
// float                          InMaxDistance                  ( CPF_Parm )
// float                          InMinDistance                  ( CPF_Parm )
// unsigned long                  bInSoft                        ( CPF_OptionalParm | CPF_Parm )
// float                          InSoftStartPenalty             ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOnlyTossOutSpecsThatLeave     ( CPF_OptionalParm | CPF_Parm )

bool UPath_WithinDistanceEnvelope::StayWithinEnvelopeToLoc ( class APawn* P, struct FVector InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, unsigned long bInSoft, float InSoftStartPenalty, unsigned long bOnlyTossOutSpecsThatLeave )
{
	static UFunction* pFnStayWithinEnvelopeToLoc = NULL;

	if ( ! pFnStayWithinEnvelopeToLoc )
		pFnStayWithinEnvelopeToLoc = (UFunction*) UObject::GObjObjects()->Data[ 27775 ];

	UPath_WithinDistanceEnvelope_execStayWithinEnvelopeToLoc_Parms StayWithinEnvelopeToLoc_Parms;
	StayWithinEnvelopeToLoc_Parms.P = P;
	memcpy ( &StayWithinEnvelopeToLoc_Parms.InEnvelopeTestPoint, &InEnvelopeTestPoint, 0xC );
	StayWithinEnvelopeToLoc_Parms.InMaxDistance = InMaxDistance;
	StayWithinEnvelopeToLoc_Parms.InMinDistance = InMinDistance;
	StayWithinEnvelopeToLoc_Parms.bInSoft = bInSoft;
	StayWithinEnvelopeToLoc_Parms.InSoftStartPenalty = InSoftStartPenalty;
	StayWithinEnvelopeToLoc_Parms.bOnlyTossOutSpecsThatLeave = bOnlyTossOutSpecsThatLeave;

	this->ProcessEvent ( pFnStayWithinEnvelopeToLoc, &StayWithinEnvelopeToLoc_Parms, NULL );

	return StayWithinEnvelopeToLoc_Parms.ReturnValue;
};

// Function Engine.Path_WithinTraversalDist.Recycle
// [0x00020002] 
// Parameters infos:

void UPath_WithinTraversalDist::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 27800 ];

	UPath_WithinTraversalDist_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.Path_WithinTraversalDist.DontExceedMaxDist
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// float                          InMaxTraversalDist             ( CPF_Parm )
// unsigned long                  bInSoft                        ( CPF_OptionalParm | CPF_Parm )

bool UPath_WithinTraversalDist::DontExceedMaxDist ( class APawn* P, float InMaxTraversalDist, unsigned long bInSoft )
{
	static UFunction* pFnDontExceedMaxDist = NULL;

	if ( ! pFnDontExceedMaxDist )
		pFnDontExceedMaxDist = (UFunction*) UObject::GObjObjects()->Data[ 27792 ];

	UPath_WithinTraversalDist_execDontExceedMaxDist_Parms DontExceedMaxDist_Parms;
	DontExceedMaxDist_Parms.P = P;
	DontExceedMaxDist_Parms.InMaxTraversalDist = InMaxTraversalDist;
	DontExceedMaxDist_Parms.bInSoft = bInSoft;

	this->ProcessEvent ( pFnDontExceedMaxDist, &DontExceedMaxDist_Parms, NULL );

	return DontExceedMaxDist_Parms.ReturnValue;
};

// Function Engine.PathGoalEvaluator.GetDumpString
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UPathGoalEvaluator::eventGetDumpString ( )
{
	static UFunction* pFnGetDumpString = NULL;

	if ( ! pFnGetDumpString )
		pFnGetDumpString = (UFunction*) UObject::GObjObjects()->Data[ 22429 ];

	UPathGoalEvaluator_eventGetDumpString_Parms GetDumpString_Parms;

	this->ProcessEvent ( pFnGetDumpString, &GetDumpString_Parms, NULL );

	return GetDumpString_Parms.ReturnValue;
};

// Function Engine.PathGoalEvaluator.Recycle
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UPathGoalEvaluator::eventRecycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 22426 ];

	UPathGoalEvaluator_eventRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.Goal_AtActor.Recycle
// [0x00020002] 
// Parameters infos:

void UGoal_AtActor::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 22453 ];

	UGoal_AtActor_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.Goal_AtActor.AtActor
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// class AActor*                  Goal                           ( CPF_Parm )
// float                          Dist                           ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )

bool UGoal_AtActor::AtActor ( class APawn* P, class AActor* Goal, float Dist, unsigned long bReturnPartial )
{
	static UFunction* pFnAtActor = NULL;

	if ( ! pFnAtActor )
		pFnAtActor = (UFunction*) UObject::GObjObjects()->Data[ 22434 ];

	UGoal_AtActor_execAtActor_Parms AtActor_Parms;
	AtActor_Parms.P = P;
	AtActor_Parms.Goal = Goal;
	AtActor_Parms.Dist = Dist;
	AtActor_Parms.bReturnPartial = bReturnPartial;

	this->ProcessEvent ( pFnAtActor, &AtActor_Parms, NULL );

	return AtActor_Parms.ReturnValue;
};

// Function Engine.Goal_Null.Recycle
// [0x00020002] 
// Parameters infos:

void UGoal_Null::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 22459 ];

	UGoal_Null_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.Goal_Null.GoUntilBust
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// int                            InMaxPathVisits                ( CPF_OptionalParm | CPF_Parm )

bool UGoal_Null::GoUntilBust ( class APawn* P, int InMaxPathVisits )
{
	static UFunction* pFnGoUntilBust = NULL;

	if ( ! pFnGoUntilBust )
		pFnGoUntilBust = (UFunction*) UObject::GObjObjects()->Data[ 22454 ];

	UGoal_Null_execGoUntilBust_Parms GoUntilBust_Parms;
	GoUntilBust_Parms.P = P;
	GoUntilBust_Parms.InMaxPathVisits = InMaxPathVisits;

	this->ProcessEvent ( pFnGoUntilBust, &GoUntilBust_Parms, NULL );

	return GoUntilBust_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.GetPrimarySkelMeshComponent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class USkeletalMeshComponent* ASkeletalMeshActor::GetPrimarySkelMeshComponent ( )
{
	static UFunction* pFnGetPrimarySkelMeshComponent = NULL;

	if ( ! pFnGetPrimarySkelMeshComponent )
		pFnGetPrimarySkelMeshComponent = (UFunction*) UObject::GObjObjects()->Data[ 30849 ];

	ASkeletalMeshActor_execGetPrimarySkelMeshComponent_Parms GetPrimarySkelMeshComponent_Parms;

	pFnGetPrimarySkelMeshComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPrimarySkelMeshComponent, &GetPrimarySkelMeshComponent_Parms, NULL );

	pFnGetPrimarySkelMeshComponent->FunctionFlags |= 0x400;

	return GetPrimarySkelMeshComponent_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.SkelMeshActorOnParticleSystemFinished
// [0x00020102] 
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )

void ASkeletalMeshActor::SkelMeshActorOnParticleSystemFinished ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnSkelMeshActorOnParticleSystemFinished = NULL;

	if ( ! pFnSkelMeshActorOnParticleSystemFinished )
		pFnSkelMeshActorOnParticleSystemFinished = (UFunction*) UObject::GObjObjects()->Data[ 30847 ];

	ASkeletalMeshActor_execSkelMeshActorOnParticleSystemFinished_Parms SkelMeshActorOnParticleSystemFinished_Parms;
	SkelMeshActorOnParticleSystemFinished_Parms.PSC = PSC;

	this->ProcessEvent ( pFnSkelMeshActorOnParticleSystemFinished, &SkelMeshActorOnParticleSystemFinished_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.PlayParticleEffect
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UAnimNotify_PlayParticleEffect* AnimNotifyData                 ( CPF_Const | CPF_Parm )

void ASkeletalMeshActor::eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData )
{
	static UFunction* pFnPlayParticleEffect = NULL;

	if ( ! pFnPlayParticleEffect )
		pFnPlayParticleEffect = (UFunction*) UObject::GObjObjects()->Data[ 30841 ];

	ASkeletalMeshActor_eventPlayParticleEffect_Parms PlayParticleEffect_Parms;
	PlayParticleEffect_Parms.AnimNotifyData = AnimNotifyData;

	this->ProcessEvent ( pFnPlayParticleEffect, &PlayParticleEffect_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ASkeletalMeshActor_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void ASkeletalMeshActor::ApplyCheckpointRecord ( struct ASkeletalMeshActor_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 30839 ];

	ASkeletalMeshActor_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x10 );
};

// Function Engine.SkeletalMeshActor.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ASkeletalMeshActor_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void ASkeletalMeshActor::CreateCheckpointRecord ( struct ASkeletalMeshActor_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 30837 ];

	ASkeletalMeshActor_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x10 );
};

// Function Engine.SkeletalMeshActor.ShouldSaveForCheckpoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASkeletalMeshActor::ShouldSaveForCheckpoint ( )
{
	static UFunction* pFnShouldSaveForCheckpoint = NULL;

	if ( ! pFnShouldSaveForCheckpoint )
		pFnShouldSaveForCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 30834 ];

	ASkeletalMeshActor_execShouldSaveForCheckpoint_Parms ShouldSaveForCheckpoint_Parms;

	this->ProcessEvent ( pFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Parms, NULL );

	return ShouldSaveForCheckpoint_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )
// class UDamageType*             pDamage                        ( CPF_OptionalParm | CPF_Parm )

void ASkeletalMeshActor::eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UDamageType* pDamage )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 30823 ];

	ASkeletalMeshActor_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x28 );
	TakeDamage_Parms.DamageCauser = DamageCauser;
	TakeDamage_Parms.pDamage = pDamage;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.OnEffectsMaterial
// [0x00020002] 
// Parameters infos:
// class UBioSeqAct_EffectsMaterial* Action                         ( CPF_Parm )

void ASkeletalMeshActor::OnEffectsMaterial ( class UBioSeqAct_EffectsMaterial* Action )
{
	static UFunction* pFnOnEffectsMaterial = NULL;

	if ( ! pFnOnEffectsMaterial )
		pFnOnEffectsMaterial = (UFunction*) UObject::GObjObjects()->Data[ 30821 ];

	ASkeletalMeshActor_execOnEffectsMaterial_Parms OnEffectsMaterial_Parms;
	OnEffectsMaterial_Parms.Action = Action;

	this->ProcessEvent ( pFnOnEffectsMaterial, &OnEffectsMaterial_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.GetFractionOfEffectsMaterialEnabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASkeletalMeshActor::GetFractionOfEffectsMaterialEnabled ( )
{
	static UFunction* pFnGetFractionOfEffectsMaterialEnabled = NULL;

	if ( ! pFnGetFractionOfEffectsMaterialEnabled )
		pFnGetFractionOfEffectsMaterialEnabled = (UFunction*) UObject::GObjObjects()->Data[ 30819 ];

	ASkeletalMeshActor_execGetFractionOfEffectsMaterialEnabled_Parms GetFractionOfEffectsMaterialEnabled_Parms;

	pFnGetFractionOfEffectsMaterialEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFractionOfEffectsMaterialEnabled, &GetFractionOfEffectsMaterialEnabled_Parms, NULL );

	pFnGetFractionOfEffectsMaterialEnabled->FunctionFlags |= 0x400;

	return GetFractionOfEffectsMaterialEnabled_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.SetFractionOfEffectsMaterialEnabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          FractionEnabled                ( CPF_Parm )

void ASkeletalMeshActor::SetFractionOfEffectsMaterialEnabled ( float FractionEnabled )
{
	static UFunction* pFnSetFractionOfEffectsMaterialEnabled = NULL;

	if ( ! pFnSetFractionOfEffectsMaterialEnabled )
		pFnSetFractionOfEffectsMaterialEnabled = (UFunction*) UObject::GObjObjects()->Data[ 30817 ];

	ASkeletalMeshActor_execSetFractionOfEffectsMaterialEnabled_Parms SetFractionOfEffectsMaterialEnabled_Parms;
	SetFractionOfEffectsMaterialEnabled_Parms.FractionEnabled = FractionEnabled;

	pFnSetFractionOfEffectsMaterialEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFractionOfEffectsMaterialEnabled, &SetFractionOfEffectsMaterialEnabled_Parms, NULL );

	pFnSetFractionOfEffectsMaterialEnabled->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActor.GetEffectsMaterialType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ASkeletalMeshActor::GetEffectsMaterialType ( )
{
	static UFunction* pFnGetEffectsMaterialType = NULL;

	if ( ! pFnGetEffectsMaterialType )
		pFnGetEffectsMaterialType = (UFunction*) UObject::GObjObjects()->Data[ 30815 ];

	ASkeletalMeshActor_execGetEffectsMaterialType_Parms GetEffectsMaterialType_Parms;

	pFnGetEffectsMaterialType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEffectsMaterialType, &GetEffectsMaterialType_Parms, NULL );

	pFnGetEffectsMaterialType->FunctionFlags |= 0x400;

	return GetEffectsMaterialType_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.SetEffectsMaterialType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  EffectsMaterialType            ( CPF_Parm )

void ASkeletalMeshActor::SetEffectsMaterialType ( unsigned char EffectsMaterialType )
{
	static UFunction* pFnSetEffectsMaterialType = NULL;

	if ( ! pFnSetEffectsMaterialType )
		pFnSetEffectsMaterialType = (UFunction*) UObject::GObjObjects()->Data[ 30813 ];

	ASkeletalMeshActor_execSetEffectsMaterialType_Parms SetEffectsMaterialType_Parms;
	SetEffectsMaterialType_Parms.EffectsMaterialType = EffectsMaterialType;

	pFnSetEffectsMaterialType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEffectsMaterialType, &SetEffectsMaterialType_Parms, NULL );

	pFnSetEffectsMaterialType->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActor.DoKismetAttachment
// [0x00020002] 
// Parameters infos:
// class AActor*                  Attachment                     ( CPF_Parm )
// class USeqAct_AttachToActor*   Action                         ( CPF_Parm )

void ASkeletalMeshActor::DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action )
{
	static UFunction* pFnDoKismetAttachment = NULL;

	if ( ! pFnDoKismetAttachment )
		pFnDoKismetAttachment = (UFunction*) UObject::GObjObjects()->Data[ 30806 ];

	ASkeletalMeshActor_execDoKismetAttachment_Parms DoKismetAttachment_Parms;
	DoKismetAttachment_Parms.Attachment = Attachment;
	DoKismetAttachment_Parms.Action = Action;

	this->ProcessEvent ( pFnDoKismetAttachment, &DoKismetAttachment_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.OnSetSkelControlTarget
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_SetSkelControlTarget* Action                         ( CPF_Parm )

void ASkeletalMeshActor::eventOnSetSkelControlTarget ( class USeqAct_SetSkelControlTarget* Action )
{
	static UFunction* pFnOnSetSkelControlTarget = NULL;

	if ( ! pFnOnSetSkelControlTarget )
		pFnOnSetSkelControlTarget = (UFunction*) UObject::GObjObjects()->Data[ 30803 ];

	ASkeletalMeshActor_eventOnSetSkelControlTarget_Parms OnSetSkelControlTarget_Parms;
	OnSetSkelControlTarget_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetSkelControlTarget, &OnSetSkelControlTarget_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.OnUpdatePhysBonesFromAnim
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_UpdatePhysBonesFromAnim* Action                         ( CPF_Parm )

void ASkeletalMeshActor::eventOnUpdatePhysBonesFromAnim ( class USeqAct_UpdatePhysBonesFromAnim* Action )
{
	static UFunction* pFnOnUpdatePhysBonesFromAnim = NULL;

	if ( ! pFnOnUpdatePhysBonesFromAnim )
		pFnOnUpdatePhysBonesFromAnim = (UFunction*) UObject::GObjObjects()->Data[ 30801 ];

	ASkeletalMeshActor_eventOnUpdatePhysBonesFromAnim_Parms OnUpdatePhysBonesFromAnim_Parms;
	OnUpdatePhysBonesFromAnim_Parms.Action = Action;

	this->ProcessEvent ( pFnOnUpdatePhysBonesFromAnim, &OnUpdatePhysBonesFromAnim_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.OnSetMesh
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class USeqAct_SetMesh*         Action                         ( CPF_Parm )

void ASkeletalMeshActor::eventOnSetMesh ( class USeqAct_SetMesh* Action )
{
	static UFunction* pFnOnSetMesh = NULL;

	if ( ! pFnOnSetMesh )
		pFnOnSetMesh = (UFunction*) UObject::GObjObjects()->Data[ 30799 ];

	ASkeletalMeshActor_eventOnSetMesh_Parms OnSetMesh_Parms;
	OnSetMesh_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetMesh, &OnSetMesh_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.IsActorPlayingFaceFXAnim
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASkeletalMeshActor::IsActorPlayingFaceFXAnim ( )
{
	static UFunction* pFnIsActorPlayingFaceFXAnim = NULL;

	if ( ! pFnIsActorPlayingFaceFXAnim )
		pFnIsActorPlayingFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 30797 ];

	ASkeletalMeshActor_execIsActorPlayingFaceFXAnim_Parms IsActorPlayingFaceFXAnim_Parms;

	this->ProcessEvent ( pFnIsActorPlayingFaceFXAnim, &IsActorPlayingFaceFXAnim_Parms, NULL );

	return IsActorPlayingFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.GetActorFaceFXAsset
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UFaceFXAsset*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFaceFXAsset* ASkeletalMeshActor::eventGetActorFaceFXAsset ( )
{
	static UFunction* pFnGetActorFaceFXAsset = NULL;

	if ( ! pFnGetActorFaceFXAsset )
		pFnGetActorFaceFXAsset = (UFunction*) UObject::GObjObjects()->Data[ 30795 ];

	ASkeletalMeshActor_eventGetActorFaceFXAsset_Parms GetActorFaceFXAsset_Parms;

	this->ProcessEvent ( pFnGetActorFaceFXAsset, &GetActorFaceFXAsset_Parms, NULL );

	return GetActorFaceFXAsset_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.OnPlayFaceFXAnim
// [0x00020102] 
// Parameters infos:
// class USeqAct_PlayFaceFXAnim*  inAction                       ( CPF_Parm )

void ASkeletalMeshActor::OnPlayFaceFXAnim ( class USeqAct_PlayFaceFXAnim* inAction )
{
	static UFunction* pFnOnPlayFaceFXAnim = NULL;

	if ( ! pFnOnPlayFaceFXAnim )
		pFnOnPlayFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 30792 ];

	ASkeletalMeshActor_execOnPlayFaceFXAnim_Parms OnPlayFaceFXAnim_Parms;
	OnPlayFaceFXAnim_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnPlayFaceFXAnim, &OnPlayFaceFXAnim_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.GetFaceFXAudioComponent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAudioComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UAudioComponent* ASkeletalMeshActor::eventGetFaceFXAudioComponent ( )
{
	static UFunction* pFnGetFaceFXAudioComponent = NULL;

	if ( ! pFnGetFaceFXAudioComponent )
		pFnGetFaceFXAudioComponent = (UFunction*) UObject::GObjObjects()->Data[ 30789 ];

	ASkeletalMeshActor_eventGetFaceFXAudioComponent_Parms GetFaceFXAudioComponent_Parms;

	this->ProcessEvent ( pFnGetFaceFXAudioComponent, &GetFaceFXAudioComponent_Parms, NULL );

	return GetFaceFXAudioComponent_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.StopActorFaceFXAnim
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASkeletalMeshActor::eventStopActorFaceFXAnim ( )
{
	static UFunction* pFnStopActorFaceFXAnim = NULL;

	if ( ! pFnStopActorFaceFXAnim )
		pFnStopActorFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 30788 ];

	ASkeletalMeshActor_eventStopActorFaceFXAnim_Parms StopActorFaceFXAnim_Parms;

	this->ProcessEvent ( pFnStopActorFaceFXAnim, &StopActorFaceFXAnim_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.PlayActorFaceFXAnim
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )
// struct FString                 GroupName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SeqName                        ( CPF_Parm | CPF_NeedCtorLink )
// class USoundCue*               SoundCueToPlay                 ( CPF_Parm )

bool ASkeletalMeshActor::eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay )
{
	static UFunction* pFnPlayActorFaceFXAnim = NULL;

	if ( ! pFnPlayActorFaceFXAnim )
		pFnPlayActorFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 30782 ];

	ASkeletalMeshActor_eventPlayActorFaceFXAnim_Parms PlayActorFaceFXAnim_Parms;
	PlayActorFaceFXAnim_Parms.AnimSet = AnimSet;
	memcpy ( &PlayActorFaceFXAnim_Parms.GroupName, &GroupName, 0x10 );
	memcpy ( &PlayActorFaceFXAnim_Parms.SeqName, &SeqName, 0x10 );
	PlayActorFaceFXAnim_Parms.SoundCueToPlay = SoundCueToPlay;

	this->ProcessEvent ( pFnPlayActorFaceFXAnim, &PlayActorFaceFXAnim_Parms, NULL );

	return PlayActorFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.MAT_FinishAnimControl
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void ASkeletalMeshActor::MAT_FinishAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnMAT_FinishAnimControl = NULL;

	if ( ! pFnMAT_FinishAnimControl )
		pFnMAT_FinishAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 30780 ];

	ASkeletalMeshActor_execMAT_FinishAnimControl_Parms MAT_FinishAnimControl_Parms;
	MAT_FinishAnimControl_Parms.InInterpGroup = InInterpGroup;

	pFnMAT_FinishAnimControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_FinishAnimControl, &MAT_FinishAnimControl_Parms, NULL );

	pFnMAT_FinishAnimControl->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActor.FinishAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void ASkeletalMeshActor::eventFinishAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnFinishAnimControl = NULL;

	if ( ! pFnFinishAnimControl )
		pFnFinishAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 30778 ];

	ASkeletalMeshActor_eventFinishAnimControl_Parms FinishAnimControl_Parms;
	FinishAnimControl_Parms.InInterpGroup = InInterpGroup;

	this->ProcessEvent ( pFnFinishAnimControl, &FinishAnimControl_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.SetAnimPosition
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )

void ASkeletalMeshActor::eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping )
{
	static UFunction* pFnSetAnimPosition = NULL;

	if ( ! pFnSetAnimPosition )
		pFnSetAnimPosition = (UFunction*) UObject::GObjObjects()->Data[ 30770 ];

	ASkeletalMeshActor_eventSetAnimPosition_Parms SetAnimPosition_Parms;
	memcpy ( &SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	SetAnimPosition_Parms.InPosition = InPosition;
	SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	SetAnimPosition_Parms.bLooping = bLooping;

	this->ProcessEvent ( pFnSetAnimPosition, &SetAnimPosition_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.MAT_BeginAnimControl
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void ASkeletalMeshActor::MAT_BeginAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnMAT_BeginAnimControl = NULL;

	if ( ! pFnMAT_BeginAnimControl )
		pFnMAT_BeginAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 30768 ];

	ASkeletalMeshActor_execMAT_BeginAnimControl_Parms MAT_BeginAnimControl_Parms;
	MAT_BeginAnimControl_Parms.InInterpGroup = InInterpGroup;

	pFnMAT_BeginAnimControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_BeginAnimControl, &MAT_BeginAnimControl_Parms, NULL );

	pFnMAT_BeginAnimControl->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActor.BeginAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void ASkeletalMeshActor::eventBeginAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnBeginAnimControl = NULL;

	if ( ! pFnBeginAnimControl )
		pFnBeginAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 30766 ];

	ASkeletalMeshActor_eventBeginAnimControl_Parms BeginAnimControl_Parms;
	BeginAnimControl_Parms.InInterpGroup = InInterpGroup;

	this->ProcessEvent ( pFnBeginAnimControl, &BeginAnimControl_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.OnSetMaterial
// [0x00020002] 
// Parameters infos:
// class USeqAct_SetMaterial*     Action                         ( CPF_Parm )

void ASkeletalMeshActor::OnSetMaterial ( class USeqAct_SetMaterial* Action )
{
	static UFunction* pFnOnSetMaterial = NULL;

	if ( ! pFnOnSetMaterial )
		pFnOnSetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 30764 ];

	ASkeletalMeshActor_execOnSetMaterial_Parms OnSetMaterial_Parms;
	OnSetMaterial_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetMaterial, &OnSetMaterial_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ASkeletalMeshActor::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 30761 ];

	ASkeletalMeshActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASkeletalMeshActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 30758 ];

	ASkeletalMeshActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.UpdateAnimSetList
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void ASkeletalMeshActor::UpdateAnimSetList ( )
{
	static UFunction* pFnUpdateAnimSetList = NULL;

	if ( ! pFnUpdateAnimSetList )
		pFnUpdateAnimSetList = (UFunction*) UObject::GObjObjects()->Data[ 30757 ];

	ASkeletalMeshActor_execUpdateAnimSetList_Parms UpdateAnimSetList_Parms;

	pFnUpdateAnimSetList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateAnimSetList, &UpdateAnimSetList_Parms, NULL );

	pFnUpdateAnimSetList->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActor.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASkeletalMeshActor::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 30756 ];

	ASkeletalMeshActor_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASkeletalMeshActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 30753 ];

	ASkeletalMeshActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.SkeletalMeshActorBasedOnExtremeContent.SetMaterialBasedOnExtremeContent
// [0x00020102] 
// Parameters infos:

void ASkeletalMeshActorBasedOnExtremeContent::SetMaterialBasedOnExtremeContent ( )
{
	static UFunction* pFnSetMaterialBasedOnExtremeContent = NULL;

	if ( ! pFnSetMaterialBasedOnExtremeContent )
		pFnSetMaterialBasedOnExtremeContent = (UFunction*) UObject::GObjObjects()->Data[ 30864 ];

	ASkeletalMeshActorBasedOnExtremeContent_execSetMaterialBasedOnExtremeContent_Parms SetMaterialBasedOnExtremeContent_Parms;

	this->ProcessEvent ( pFnSetMaterialBasedOnExtremeContent, &SetMaterialBasedOnExtremeContent_Parms, NULL );
};

// Function Engine.SkeletalMeshActorBasedOnExtremeContent.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASkeletalMeshActorBasedOnExtremeContent::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 30863 ];

	ASkeletalMeshActorBasedOnExtremeContent_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.SetSkelControlScale
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   SkelControlName                ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void ASkeletalMeshActorMAT::eventSetSkelControlScale ( struct FName SkelControlName, float Scale )
{
	static UFunction* pFnSetSkelControlScale = NULL;

	if ( ! pFnSetSkelControlScale )
		pFnSetSkelControlScale = (UFunction*) UObject::GObjObjects()->Data[ 30908 ];

	ASkeletalMeshActorMAT_eventSetSkelControlScale_Parms SetSkelControlScale_Parms;
	memcpy ( &SetSkelControlScale_Parms.SkelControlName, &SkelControlName, 0x8 );
	SetSkelControlScale_Parms.Scale = Scale;

	this->ProcessEvent ( pFnSetSkelControlScale, &SetSkelControlScale_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.SetMorphWeight
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   MorphNodeName                  ( CPF_Parm )
// float                          MorphWeight                    ( CPF_Parm )

void ASkeletalMeshActorMAT::eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight )
{
	static UFunction* pFnSetMorphWeight = NULL;

	if ( ! pFnSetMorphWeight )
		pFnSetMorphWeight = (UFunction*) UObject::GObjObjects()->Data[ 30905 ];

	ASkeletalMeshActorMAT_eventSetMorphWeight_Parms SetMorphWeight_Parms;
	memcpy ( &SetMorphWeight_Parms.MorphNodeName, &MorphNodeName, 0x8 );
	SetMorphWeight_Parms.MorphWeight = MorphWeight;

	this->ProcessEvent ( pFnSetMorphWeight, &SetMorphWeight_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.FinishAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void ASkeletalMeshActorMAT::eventFinishAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnFinishAnimControl = NULL;

	if ( ! pFnFinishAnimControl )
		pFnFinishAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 30903 ];

	ASkeletalMeshActorMAT_eventFinishAnimControl_Parms FinishAnimControl_Parms;
	FinishAnimControl_Parms.InInterpGroup = InInterpGroup;

	this->ProcessEvent ( pFnFinishAnimControl, &FinishAnimControl_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.MAT_SetAnimPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )

void ASkeletalMeshActorMAT::MAT_SetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping )
{
	static UFunction* pFnMAT_SetAnimPosition = NULL;

	if ( ! pFnMAT_SetAnimPosition )
		pFnMAT_SetAnimPosition = (UFunction*) UObject::GObjObjects()->Data[ 30896 ];

	ASkeletalMeshActorMAT_execMAT_SetAnimPosition_Parms MAT_SetAnimPosition_Parms;
	memcpy ( &MAT_SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	MAT_SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &MAT_SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	MAT_SetAnimPosition_Parms.InPosition = InPosition;
	MAT_SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	MAT_SetAnimPosition_Parms.bLooping = bLooping;

	pFnMAT_SetAnimPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetAnimPosition, &MAT_SetAnimPosition_Parms, NULL );

	pFnMAT_SetAnimPosition->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActorMAT.SetAnimPosition
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )

void ASkeletalMeshActorMAT::eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping )
{
	static UFunction* pFnSetAnimPosition = NULL;

	if ( ! pFnSetAnimPosition )
		pFnSetAnimPosition = (UFunction*) UObject::GObjObjects()->Data[ 30889 ];

	ASkeletalMeshActorMAT_eventSetAnimPosition_Parms SetAnimPosition_Parms;
	memcpy ( &SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	SetAnimPosition_Parms.InPosition = InPosition;
	SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	SetAnimPosition_Parms.bLooping = bLooping;

	this->ProcessEvent ( pFnSetAnimPosition, &SetAnimPosition_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.ClearAnimNodes
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ASkeletalMeshActorMAT::ClearAnimNodes ( )
{
	static UFunction* pFnClearAnimNodes = NULL;

	if ( ! pFnClearAnimNodes )
		pFnClearAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 30888 ];

	ASkeletalMeshActorMAT_execClearAnimNodes_Parms ClearAnimNodes_Parms;

	pFnClearAnimNodes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearAnimNodes, &ClearAnimNodes_Parms, NULL );

	pFnClearAnimNodes->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActorMAT.CacheAnimNodes
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ASkeletalMeshActorMAT::CacheAnimNodes ( )
{
	static UFunction* pFnCacheAnimNodes = NULL;

	if ( ! pFnCacheAnimNodes )
		pFnCacheAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 30887 ];

	ASkeletalMeshActorMAT_execCacheAnimNodes_Parms CacheAnimNodes_Parms;

	pFnCacheAnimNodes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCacheAnimNodes, &CacheAnimNodes_Parms, NULL );

	pFnCacheAnimNodes->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActorMAT.PostInitAnimTree
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ASkeletalMeshActorMAT::PostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 30885 ];

	ASkeletalMeshActorMAT_execPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	pFnPostInitAnimTree->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );

	pFnPostInitAnimTree->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActorMAT.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASkeletalMeshActorMAT::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 30884 ];

	ASkeletalMeshActorMAT_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.MAT_SetSkelControlScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   SkelControlName                ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void ASkeletalMeshActorMAT::MAT_SetSkelControlScale ( struct FName SkelControlName, float Scale )
{
	static UFunction* pFnMAT_SetSkelControlScale = NULL;

	if ( ! pFnMAT_SetSkelControlScale )
		pFnMAT_SetSkelControlScale = (UFunction*) UObject::GObjObjects()->Data[ 30881 ];

	ASkeletalMeshActorMAT_execMAT_SetSkelControlScale_Parms MAT_SetSkelControlScale_Parms;
	memcpy ( &MAT_SetSkelControlScale_Parms.SkelControlName, &SkelControlName, 0x8 );
	MAT_SetSkelControlScale_Parms.Scale = Scale;

	pFnMAT_SetSkelControlScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetSkelControlScale, &MAT_SetSkelControlScale_Parms, NULL );

	pFnMAT_SetSkelControlScale->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActorMAT.MAT_SetMorphWeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   MorphNodeName                  ( CPF_Parm )
// float                          MorphWeight                    ( CPF_Parm )

void ASkeletalMeshActorMAT::MAT_SetMorphWeight ( struct FName MorphNodeName, float MorphWeight )
{
	static UFunction* pFnMAT_SetMorphWeight = NULL;

	if ( ! pFnMAT_SetMorphWeight )
		pFnMAT_SetMorphWeight = (UFunction*) UObject::GObjObjects()->Data[ 30878 ];

	ASkeletalMeshActorMAT_execMAT_SetMorphWeight_Parms MAT_SetMorphWeight_Parms;
	memcpy ( &MAT_SetMorphWeight_Parms.MorphNodeName, &MorphNodeName, 0x8 );
	MAT_SetMorphWeight_Parms.MorphWeight = MorphWeight;

	pFnMAT_SetMorphWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetMorphWeight, &MAT_SetMorphWeight_Parms, NULL );

	pFnMAT_SetMorphWeight->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActorMAT.MAT_SetAnimWeights
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct TArray<struct FAnimSlotInfo> SlotInfos                      ( CPF_Parm | CPF_NeedCtorLink )

void ASkeletalMeshActorMAT::MAT_SetAnimWeights ( struct TArray<struct FAnimSlotInfo> SlotInfos )
{
	static UFunction* pFnMAT_SetAnimWeights = NULL;

	if ( ! pFnMAT_SetAnimWeights )
		pFnMAT_SetAnimWeights = (UFunction*) UObject::GObjObjects()->Data[ 30875 ];

	ASkeletalMeshActorMAT_execMAT_SetAnimWeights_Parms MAT_SetAnimWeights_Parms;
	memcpy ( &MAT_SetAnimWeights_Parms.SlotInfos, &SlotInfos, 0x10 );

	pFnMAT_SetAnimWeights->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetAnimWeights, &MAT_SetAnimWeights_Parms, NULL );

	pFnMAT_SetAnimWeights->FunctionFlags |= 0x400;
};

// Function Engine.AnimNotify.FindNextNotifyOfClass
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAnimNodeSequence*       AnimSeqInstigator              ( CPF_Parm )
// class UClass*                  NotifyClass                    ( CPF_Parm )
// struct FAnimNotifyEvent        OutEvent                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UAnimNotify::FindNextNotifyOfClass ( class UAnimNodeSequence* AnimSeqInstigator, class UClass* NotifyClass, struct FAnimNotifyEvent* OutEvent )
{
	static UFunction* pFnFindNextNotifyOfClass = NULL;

	if ( ! pFnFindNextNotifyOfClass )
		pFnFindNextNotifyOfClass = (UFunction*) UObject::GObjObjects()->Data[ 13068 ];

	UAnimNotify_execFindNextNotifyOfClass_Parms FindNextNotifyOfClass_Parms;
	FindNextNotifyOfClass_Parms.AnimSeqInstigator = AnimSeqInstigator;
	FindNextNotifyOfClass_Parms.NotifyClass = NotifyClass;

	this->ProcessEvent ( pFnFindNextNotifyOfClass, &FindNextNotifyOfClass_Parms, NULL );

	if ( OutEvent )
		memcpy ( OutEvent, &FindNextNotifyOfClass_Parms.OutEvent, 0x1C );

	return FindNextNotifyOfClass_Parms.ReturnValue;
};

// Function Engine.AnimNotify_Scripted.Notify
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Owner                          ( CPF_Parm )
// class UAnimNodeSequence*       AnimSeqInstigator              ( CPF_Parm )

void UAnimNotify_Scripted::eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator )
{
	static UFunction* pFnNotify = NULL;

	if ( ! pFnNotify )
		pFnNotify = (UFunction*) UObject::GObjObjects()->Data[ 13083 ];

	UAnimNotify_Scripted_eventNotify_Parms Notify_Parms;
	Notify_Parms.Owner = Owner;
	Notify_Parms.AnimSeqInstigator = AnimSeqInstigator;

	this->ProcessEvent ( pFnNotify, &Notify_Parms, NULL );
};

// Function Engine.AnimNotify_ViewShake.Notify
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Owner                          ( CPF_Parm )
// class UAnimNodeSequence*       AnimSeqInstigator              ( CPF_Parm )

void UAnimNotify_ViewShake::eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator )
{
	static UFunction* pFnNotify = NULL;

	if ( ! pFnNotify )
		pFnNotify = (UFunction*) UObject::GObjObjects()->Data[ 13141 ];

	UAnimNotify_ViewShake_eventNotify_Parms Notify_Parms;
	Notify_Parms.Owner = Owner;
	Notify_Parms.AnimSeqInstigator = AnimSeqInstigator;

	this->ProcessEvent ( pFnNotify, &Notify_Parms, NULL );
};

// Function Engine.AnimNotify_Trails.GetNumSteps
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InLastTrailIndex               ( CPF_Parm )

int UAnimNotify_Trails::GetNumSteps ( int InLastTrailIndex )
{
	static UFunction* pFnGetNumSteps = NULL;

	if ( ! pFnGetNumSteps )
		pFnGetNumSteps = (UFunction*) UObject::GObjObjects()->Data[ 13123 ];

	UAnimNotify_Trails_execGetNumSteps_Parms GetNumSteps_Parms;
	GetNumSteps_Parms.InLastTrailIndex = InLastTrailIndex;

	pFnGetNumSteps->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumSteps, &GetNumSteps_Parms, NULL );

	pFnGetNumSteps->FunctionFlags |= 0x400;

	return GetNumSteps_Parms.ReturnValue;
};

// Function Engine.AnimNode.ReplayAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAnimNode::ReplayAnim ( )
{
	static UFunction* pFnReplayAnim = NULL;

	if ( ! pFnReplayAnim )
		pFnReplayAnim = (UFunction*) UObject::GObjObjects()->Data[ 12647 ];

	UAnimNode_execReplayAnim_Parms ReplayAnim_Parms;

	pFnReplayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReplayAnim, &ReplayAnim_Parms, NULL );

	pFnReplayAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNode.StopAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAnimNode::StopAnim ( )
{
	static UFunction* pFnStopAnim = NULL;

	if ( ! pFnStopAnim )
		pFnStopAnim = (UFunction*) UObject::GObjObjects()->Data[ 12646 ];

	UAnimNode_execStopAnim_Parms StopAnim_Parms;

	pFnStopAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAnim, &StopAnim_Parms, NULL );

	pFnStopAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNode.PlayAnim
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )
// float                          StartTime                      ( CPF_OptionalParm | CPF_Parm )

void UAnimNode::PlayAnim ( unsigned long bLoop, float Rate, float StartTime )
{
	static UFunction* pFnPlayAnim = NULL;

	if ( ! pFnPlayAnim )
		pFnPlayAnim = (UFunction*) UObject::GObjObjects()->Data[ 12642 ];

	UAnimNode_execPlayAnim_Parms PlayAnim_Parms;
	PlayAnim_Parms.bLoop = bLoop;
	PlayAnim_Parms.Rate = Rate;
	PlayAnim_Parms.StartTime = StartTime;

	pFnPlayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayAnim, &PlayAnim_Parms, NULL );

	pFnPlayAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNode.FindAnimNode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNode*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InNodeName                     ( CPF_Parm )

class UAnimNode* UAnimNode::FindAnimNode ( struct FName InNodeName )
{
	static UFunction* pFnFindAnimNode = NULL;

	if ( ! pFnFindAnimNode )
		pFnFindAnimNode = (UFunction*) UObject::GObjObjects()->Data[ 12639 ];

	UAnimNode_execFindAnimNode_Parms FindAnimNode_Parms;
	memcpy ( &FindAnimNode_Parms.InNodeName, &InNodeName, 0x8 );

	pFnFindAnimNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindAnimNode, &FindAnimNode_Parms, NULL );

	pFnFindAnimNode->FunctionFlags |= 0x400;

	return FindAnimNode_Parms.ReturnValue;
};

// Function Engine.AnimNode.OnCeaseRelevant
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UAnimNode::eventOnCeaseRelevant ( )
{
	static UFunction* pFnOnCeaseRelevant = NULL;

	if ( ! pFnOnCeaseRelevant )
		pFnOnCeaseRelevant = (UFunction*) UObject::GObjObjects()->Data[ 12638 ];

	UAnimNode_eventOnCeaseRelevant_Parms OnCeaseRelevant_Parms;

	this->ProcessEvent ( pFnOnCeaseRelevant, &OnCeaseRelevant_Parms, NULL );
};

// Function Engine.AnimNode.OnBecomeRelevant
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UAnimNode::eventOnBecomeRelevant ( )
{
	static UFunction* pFnOnBecomeRelevant = NULL;

	if ( ! pFnOnBecomeRelevant )
		pFnOnBecomeRelevant = (UFunction*) UObject::GObjObjects()->Data[ 12637 ];

	UAnimNode_eventOnBecomeRelevant_Parms OnBecomeRelevant_Parms;

	this->ProcessEvent ( pFnOnBecomeRelevant, &OnBecomeRelevant_Parms, NULL );
};

// Function Engine.AnimNode.OnInit
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UAnimNode::eventOnInit ( )
{
	static UFunction* pFnOnInit = NULL;

	if ( ! pFnOnInit )
		pFnOnInit = (UFunction*) UObject::GObjObjects()->Data[ 12636 ];

	UAnimNode_eventOnInit_Parms OnInit_Parms;

	this->ProcessEvent ( pFnOnInit, &OnInit_Parms, NULL );
};

// Function Engine.AnimNodeBlendBase.ReplayAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAnimNodeBlendBase::ReplayAnim ( )
{
	static UFunction* pFnReplayAnim = NULL;

	if ( ! pFnReplayAnim )
		pFnReplayAnim = (UFunction*) UObject::GObjObjects()->Data[ 12674 ];

	UAnimNodeBlendBase_execReplayAnim_Parms ReplayAnim_Parms;

	pFnReplayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReplayAnim, &ReplayAnim_Parms, NULL );

	pFnReplayAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeBlendBase.StopAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAnimNodeBlendBase::StopAnim ( )
{
	static UFunction* pFnStopAnim = NULL;

	if ( ! pFnStopAnim )
		pFnStopAnim = (UFunction*) UObject::GObjObjects()->Data[ 12673 ];

	UAnimNodeBlendBase_execStopAnim_Parms StopAnim_Parms;

	pFnStopAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAnim, &StopAnim_Parms, NULL );

	pFnStopAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeBlendBase.PlayAnim
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )
// float                          StartTime                      ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeBlendBase::PlayAnim ( unsigned long bLoop, float Rate, float StartTime )
{
	static UFunction* pFnPlayAnim = NULL;

	if ( ! pFnPlayAnim )
		pFnPlayAnim = (UFunction*) UObject::GObjObjects()->Data[ 12669 ];

	UAnimNodeBlendBase_execPlayAnim_Parms PlayAnim_Parms;
	PlayAnim_Parms.bLoop = bLoop;
	PlayAnim_Parms.Rate = Rate;
	PlayAnim_Parms.StartTime = StartTime;

	pFnPlayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayAnim, &PlayAnim_Parms, NULL );

	pFnPlayAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeAimOffset.SetActiveProfileByIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ProfileIndex                   ( CPF_Parm )

void UAnimNodeAimOffset::SetActiveProfileByIndex ( int ProfileIndex )
{
	static UFunction* pFnSetActiveProfileByIndex = NULL;

	if ( ! pFnSetActiveProfileByIndex )
		pFnSetActiveProfileByIndex = (UFunction*) UObject::GObjObjects()->Data[ 12763 ];

	UAnimNodeAimOffset_execSetActiveProfileByIndex_Parms SetActiveProfileByIndex_Parms;
	SetActiveProfileByIndex_Parms.ProfileIndex = ProfileIndex;

	pFnSetActiveProfileByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveProfileByIndex, &SetActiveProfileByIndex_Parms, NULL );

	pFnSetActiveProfileByIndex->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeAimOffset.SetActiveProfileByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ProfileName                    ( CPF_Parm )

void UAnimNodeAimOffset::SetActiveProfileByName ( struct FName ProfileName )
{
	static UFunction* pFnSetActiveProfileByName = NULL;

	if ( ! pFnSetActiveProfileByName )
		pFnSetActiveProfileByName = (UFunction*) UObject::GObjObjects()->Data[ 12761 ];

	UAnimNodeAimOffset_execSetActiveProfileByName_Parms SetActiveProfileByName_Parms;
	memcpy ( &SetActiveProfileByName_Parms.ProfileName, &ProfileName, 0x8 );

	pFnSetActiveProfileByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveProfileByName, &SetActiveProfileByName_Parms, NULL );

	pFnSetActiveProfileByName->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeBlend.SetBlendTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          BlendTarget                    ( CPF_Parm )
// float                          BlendTime                      ( CPF_Parm )

void UAnimNodeBlend::SetBlendTarget ( float BlendTarget, float BlendTime )
{
	static UFunction* pFnSetBlendTarget = NULL;

	if ( ! pFnSetBlendTarget )
		pFnSetBlendTarget = (UFunction*) UObject::GObjObjects()->Data[ 12714 ];

	UAnimNodeBlend_execSetBlendTarget_Parms SetBlendTarget_Parms;
	SetBlendTarget_Parms.BlendTarget = BlendTarget;
	SetBlendTarget_Parms.BlendTime = BlendTime;

	pFnSetBlendTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBlendTarget, &SetBlendTarget_Parms, NULL );

	pFnSetBlendTarget->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeCrossfader.GetActiveChild
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAnimNodeSequence* UAnimNodeCrossfader::GetActiveChild ( )
{
	static UFunction* pFnGetActiveChild = NULL;

	if ( ! pFnGetActiveChild )
		pFnGetActiveChild = (UFunction*) UObject::GObjObjects()->Data[ 12854 ];

	UAnimNodeCrossfader_execGetActiveChild_Parms GetActiveChild_Parms;

	pFnGetActiveChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActiveChild, &GetActiveChild_Parms, NULL );

	pFnGetActiveChild->FunctionFlags |= 0x400;

	return GetActiveChild_Parms.ReturnValue;
};

// Function Engine.AnimNodeCrossfader.GetAnimName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UAnimNodeCrossfader::GetAnimName ( )
{
	static UFunction* pFnGetAnimName = NULL;

	if ( ! pFnGetAnimName )
		pFnGetAnimName = (UFunction*) UObject::GObjObjects()->Data[ 12852 ];

	UAnimNodeCrossfader_execGetAnimName_Parms GetAnimName_Parms;

	pFnGetAnimName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAnimName, &GetAnimName_Parms, NULL );

	pFnGetAnimName->FunctionFlags |= 0x400;

	return GetAnimName_Parms.ReturnValue;
};

// Function Engine.AnimNodeCrossfader.BlendToLoopingAnim
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   AnimSeqName                    ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeCrossfader::BlendToLoopingAnim ( struct FName AnimSeqName, float BlendInTime, float Rate )
{
	static UFunction* pFnBlendToLoopingAnim = NULL;

	if ( ! pFnBlendToLoopingAnim )
		pFnBlendToLoopingAnim = (UFunction*) UObject::GObjObjects()->Data[ 12848 ];

	UAnimNodeCrossfader_execBlendToLoopingAnim_Parms BlendToLoopingAnim_Parms;
	memcpy ( &BlendToLoopingAnim_Parms.AnimSeqName, &AnimSeqName, 0x8 );
	BlendToLoopingAnim_Parms.BlendInTime = BlendInTime;
	BlendToLoopingAnim_Parms.Rate = Rate;

	pFnBlendToLoopingAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBlendToLoopingAnim, &BlendToLoopingAnim_Parms, NULL );

	pFnBlendToLoopingAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeCrossfader.PlayOneShotAnim
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   AnimSeqName                    ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDontBlendOut                  ( CPF_OptionalParm | CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeCrossfader::PlayOneShotAnim ( struct FName AnimSeqName, float BlendInTime, float BlendOutTime, unsigned long bDontBlendOut, float Rate )
{
	static UFunction* pFnPlayOneShotAnim = NULL;

	if ( ! pFnPlayOneShotAnim )
		pFnPlayOneShotAnim = (UFunction*) UObject::GObjObjects()->Data[ 12842 ];

	UAnimNodeCrossfader_execPlayOneShotAnim_Parms PlayOneShotAnim_Parms;
	memcpy ( &PlayOneShotAnim_Parms.AnimSeqName, &AnimSeqName, 0x8 );
	PlayOneShotAnim_Parms.BlendInTime = BlendInTime;
	PlayOneShotAnim_Parms.BlendOutTime = BlendOutTime;
	PlayOneShotAnim_Parms.bDontBlendOut = bDontBlendOut;
	PlayOneShotAnim_Parms.Rate = Rate;

	pFnPlayOneShotAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayOneShotAnim, &PlayOneShotAnim_Parms, NULL );

	pFnPlayOneShotAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodePlayCustomAnim.SetRootBoneAxisOption
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  AxisX                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisY                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisZ                          ( CPF_OptionalParm | CPF_Parm )

void UAnimNodePlayCustomAnim::SetRootBoneAxisOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ )
{
	static UFunction* pFnSetRootBoneAxisOption = NULL;

	if ( ! pFnSetRootBoneAxisOption )
		pFnSetRootBoneAxisOption = (UFunction*) UObject::GObjObjects()->Data[ 12943 ];

	UAnimNodePlayCustomAnim_execSetRootBoneAxisOption_Parms SetRootBoneAxisOption_Parms;
	SetRootBoneAxisOption_Parms.AxisX = AxisX;
	SetRootBoneAxisOption_Parms.AxisY = AxisY;
	SetRootBoneAxisOption_Parms.AxisZ = AxisZ;

	this->ProcessEvent ( pFnSetRootBoneAxisOption, &SetRootBoneAxisOption_Parms, NULL );
};

// Function Engine.AnimNodePlayCustomAnim.GetCustomAnimNodeSeq
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAnimNodeSequence* UAnimNodePlayCustomAnim::GetCustomAnimNodeSeq ( )
{
	static UFunction* pFnGetCustomAnimNodeSeq = NULL;

	if ( ! pFnGetCustomAnimNodeSeq )
		pFnGetCustomAnimNodeSeq = (UFunction*) UObject::GObjObjects()->Data[ 12941 ];

	UAnimNodePlayCustomAnim_execGetCustomAnimNodeSeq_Parms GetCustomAnimNodeSeq_Parms;

	this->ProcessEvent ( pFnGetCustomAnimNodeSeq, &GetCustomAnimNodeSeq_Parms, NULL );

	return GetCustomAnimNodeSeq_Parms.ReturnValue;
};

// Function Engine.AnimNodePlayCustomAnim.SetActorAnimEndNotification
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bNewStatus                     ( CPF_Parm )

void UAnimNodePlayCustomAnim::SetActorAnimEndNotification ( unsigned long bNewStatus )
{
	static UFunction* pFnSetActorAnimEndNotification = NULL;

	if ( ! pFnSetActorAnimEndNotification )
		pFnSetActorAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 12938 ];

	UAnimNodePlayCustomAnim_execSetActorAnimEndNotification_Parms SetActorAnimEndNotification_Parms;
	SetActorAnimEndNotification_Parms.bNewStatus = bNewStatus;

	this->ProcessEvent ( pFnSetActorAnimEndNotification, &SetActorAnimEndNotification_Parms, NULL );
};

// Function Engine.AnimNodePlayCustomAnim.SetCustomAnim
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )

void UAnimNodePlayCustomAnim::SetCustomAnim ( struct FName AnimName )
{
	static UFunction* pFnSetCustomAnim = NULL;

	if ( ! pFnSetCustomAnim )
		pFnSetCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 12935 ];

	UAnimNodePlayCustomAnim_execSetCustomAnim_Parms SetCustomAnim_Parms;
	memcpy ( &SetCustomAnim_Parms.AnimName, &AnimName, 0x8 );

	this->ProcessEvent ( pFnSetCustomAnim, &SetCustomAnim_Parms, NULL );
};

// Function Engine.AnimNodePlayCustomAnim.StopCustomAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          BlendOutTime                   ( CPF_Parm )

void UAnimNodePlayCustomAnim::StopCustomAnim ( float BlendOutTime )
{
	static UFunction* pFnStopCustomAnim = NULL;

	if ( ! pFnStopCustomAnim )
		pFnStopCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 12933 ];

	UAnimNodePlayCustomAnim_execStopCustomAnim_Parms StopCustomAnim_Parms;
	StopCustomAnim_Parms.BlendOutTime = BlendOutTime;

	pFnStopCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopCustomAnim, &StopCustomAnim_Parms, NULL );

	pFnStopCustomAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodePlayCustomAnim.PlayCustomAnimByDuration
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLooping                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOverride                      ( CPF_OptionalParm | CPF_Parm )

void UAnimNodePlayCustomAnim::PlayCustomAnimByDuration ( struct FName AnimName, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride )
{
	static UFunction* pFnPlayCustomAnimByDuration = NULL;

	if ( ! pFnPlayCustomAnimByDuration )
		pFnPlayCustomAnimByDuration = (UFunction*) UObject::GObjObjects()->Data[ 12926 ];

	UAnimNodePlayCustomAnim_execPlayCustomAnimByDuration_Parms PlayCustomAnimByDuration_Parms;
	memcpy ( &PlayCustomAnimByDuration_Parms.AnimName, &AnimName, 0x8 );
	PlayCustomAnimByDuration_Parms.Duration = Duration;
	PlayCustomAnimByDuration_Parms.BlendInTime = BlendInTime;
	PlayCustomAnimByDuration_Parms.BlendOutTime = BlendOutTime;
	PlayCustomAnimByDuration_Parms.bLooping = bLooping;
	PlayCustomAnimByDuration_Parms.bOverride = bOverride;

	pFnPlayCustomAnimByDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCustomAnimByDuration, &PlayCustomAnimByDuration_Parms, NULL );

	pFnPlayCustomAnimByDuration->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodePlayCustomAnim.PlayCustomAnim
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Rate                           ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLooping                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOverride                      ( CPF_OptionalParm | CPF_Parm )

float UAnimNodePlayCustomAnim::PlayCustomAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride )
{
	static UFunction* pFnPlayCustomAnim = NULL;

	if ( ! pFnPlayCustomAnim )
		pFnPlayCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 12918 ];

	UAnimNodePlayCustomAnim_execPlayCustomAnim_Parms PlayCustomAnim_Parms;
	memcpy ( &PlayCustomAnim_Parms.AnimName, &AnimName, 0x8 );
	PlayCustomAnim_Parms.Rate = Rate;
	PlayCustomAnim_Parms.BlendInTime = BlendInTime;
	PlayCustomAnim_Parms.BlendOutTime = BlendOutTime;
	PlayCustomAnim_Parms.bLooping = bLooping;
	PlayCustomAnim_Parms.bOverride = bOverride;

	pFnPlayCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCustomAnim, &PlayCustomAnim_Parms, NULL );

	pFnPlayCustomAnim->FunctionFlags |= 0x400;

	return PlayCustomAnim_Parms.ReturnValue;
};

// Function Engine.AnimNodeBlendList.SetActiveChild
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ChildIndex                     ( CPF_Parm )
// float                          BlendTime                      ( CPF_Parm )

void UAnimNodeBlendList::SetActiveChild ( int ChildIndex, float BlendTime )
{
	static UFunction* pFnSetActiveChild = NULL;

	if ( ! pFnSetActiveChild )
		pFnSetActiveChild = (UFunction*) UObject::GObjObjects()->Data[ 12777 ];

	UAnimNodeBlendList_execSetActiveChild_Parms SetActiveChild_Parms;
	SetActiveChild_Parms.ChildIndex = ChildIndex;
	SetActiveChild_Parms.BlendTime = BlendTime;

	pFnSetActiveChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveChild, &SetActiveChild_Parms, NULL );

	pFnSetActiveChild->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeBlendMultiBone.SetTargetStartBone
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            TargetIdx                      ( CPF_Parm )
// struct FName                   StartBoneName                  ( CPF_Parm )
// float                          PerBoneIncrease                ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeBlendMultiBone::SetTargetStartBone ( int TargetIdx, struct FName StartBoneName, float PerBoneIncrease )
{
	static UFunction* pFnSetTargetStartBone = NULL;

	if ( ! pFnSetTargetStartBone )
		pFnSetTargetStartBone = (UFunction*) UObject::GObjObjects()->Data[ 12831 ];

	UAnimNodeBlendMultiBone_execSetTargetStartBone_Parms SetTargetStartBone_Parms;
	SetTargetStartBone_Parms.TargetIdx = TargetIdx;
	memcpy ( &SetTargetStartBone_Parms.StartBoneName, &StartBoneName, 0x8 );
	SetTargetStartBone_Parms.PerBoneIncrease = PerBoneIncrease;

	pFnSetTargetStartBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTargetStartBone, &SetTargetStartBone_Parms, NULL );

	pFnSetTargetStartBone->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.AddToSynchGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )

void UAnimNodeSlot::AddToSynchGroup ( struct FName GroupName )
{
	static UFunction* pFnAddToSynchGroup = NULL;

	if ( ! pFnAddToSynchGroup )
		pFnAddToSynchGroup = (UFunction*) UObject::GObjObjects()->Data[ 13030 ];

	UAnimNodeSlot_execAddToSynchGroup_Parms AddToSynchGroup_Parms;
	memcpy ( &AddToSynchGroup_Parms.GroupName, &GroupName, 0x8 );

	pFnAddToSynchGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddToSynchGroup, &AddToSynchGroup_Parms, NULL );

	pFnAddToSynchGroup->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.AccelerateBlend
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          BlendAmount                    ( CPF_Parm )

void UAnimNodeSlot::AccelerateBlend ( float BlendAmount )
{
	static UFunction* pFnAccelerateBlend = NULL;

	if ( ! pFnAccelerateBlend )
		pFnAccelerateBlend = (UFunction*) UObject::GObjObjects()->Data[ 13026 ];

	UAnimNodeSlot_execAccelerateBlend_Parms AccelerateBlend_Parms;
	AccelerateBlend_Parms.BlendAmount = BlendAmount;

	this->ProcessEvent ( pFnAccelerateBlend, &AccelerateBlend_Parms, NULL );
};

// Function Engine.AnimNodeSlot.SetRootBoneRotationOption
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  AxisX                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisY                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisZ                          ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeSlot::SetRootBoneRotationOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ )
{
	static UFunction* pFnSetRootBoneRotationOption = NULL;

	if ( ! pFnSetRootBoneRotationOption )
		pFnSetRootBoneRotationOption = (UFunction*) UObject::GObjObjects()->Data[ 13022 ];

	UAnimNodeSlot_execSetRootBoneRotationOption_Parms SetRootBoneRotationOption_Parms;
	SetRootBoneRotationOption_Parms.AxisX = AxisX;
	SetRootBoneRotationOption_Parms.AxisY = AxisY;
	SetRootBoneRotationOption_Parms.AxisZ = AxisZ;

	pFnSetRootBoneRotationOption->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRootBoneRotationOption, &SetRootBoneRotationOption_Parms, NULL );

	pFnSetRootBoneRotationOption->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.SetRootBoneAxisOption
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  AxisX                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisY                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisZ                          ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeSlot::SetRootBoneAxisOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ )
{
	static UFunction* pFnSetRootBoneAxisOption = NULL;

	if ( ! pFnSetRootBoneAxisOption )
		pFnSetRootBoneAxisOption = (UFunction*) UObject::GObjObjects()->Data[ 13018 ];

	UAnimNodeSlot_execSetRootBoneAxisOption_Parms SetRootBoneAxisOption_Parms;
	SetRootBoneAxisOption_Parms.AxisX = AxisX;
	SetRootBoneAxisOption_Parms.AxisY = AxisY;
	SetRootBoneAxisOption_Parms.AxisZ = AxisZ;

	pFnSetRootBoneAxisOption->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRootBoneAxisOption, &SetRootBoneAxisOption_Parms, NULL );

	pFnSetRootBoneAxisOption->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.GetCustomAnimNodeSeq
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAnimNodeSequence* UAnimNodeSlot::GetCustomAnimNodeSeq ( )
{
	static UFunction* pFnGetCustomAnimNodeSeq = NULL;

	if ( ! pFnGetCustomAnimNodeSeq )
		pFnGetCustomAnimNodeSeq = (UFunction*) UObject::GObjObjects()->Data[ 13016 ];

	UAnimNodeSlot_execGetCustomAnimNodeSeq_Parms GetCustomAnimNodeSeq_Parms;

	pFnGetCustomAnimNodeSeq->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCustomAnimNodeSeq, &GetCustomAnimNodeSeq_Parms, NULL );

	pFnGetCustomAnimNodeSeq->FunctionFlags |= 0x400;

	return GetCustomAnimNodeSeq_Parms.ReturnValue;
};

// Function Engine.AnimNodeSlot.SetActorAnimEndNotification
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewStatus                     ( CPF_Parm )

void UAnimNodeSlot::SetActorAnimEndNotification ( unsigned long bNewStatus )
{
	static UFunction* pFnSetActorAnimEndNotification = NULL;

	if ( ! pFnSetActorAnimEndNotification )
		pFnSetActorAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 13014 ];

	UAnimNodeSlot_execSetActorAnimEndNotification_Parms SetActorAnimEndNotification_Parms;
	SetActorAnimEndNotification_Parms.bNewStatus = bNewStatus;

	pFnSetActorAnimEndNotification->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActorAnimEndNotification, &SetActorAnimEndNotification_Parms, NULL );

	pFnSetActorAnimEndNotification->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.SetCustomAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )

void UAnimNodeSlot::SetCustomAnim ( struct FName AnimName )
{
	static UFunction* pFnSetCustomAnim = NULL;

	if ( ! pFnSetCustomAnim )
		pFnSetCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 13012 ];

	UAnimNodeSlot_execSetCustomAnim_Parms SetCustomAnim_Parms;
	memcpy ( &SetCustomAnim_Parms.AnimName, &AnimName, 0x8 );

	pFnSetCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCustomAnim, &SetCustomAnim_Parms, NULL );

	pFnSetCustomAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.StopCustomAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          BlendOutTime                   ( CPF_Parm )

void UAnimNodeSlot::StopCustomAnim ( float BlendOutTime )
{
	static UFunction* pFnStopCustomAnim = NULL;

	if ( ! pFnStopCustomAnim )
		pFnStopCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 13010 ];

	UAnimNodeSlot_execStopCustomAnim_Parms StopCustomAnim_Parms;
	StopCustomAnim_Parms.BlendOutTime = BlendOutTime;

	pFnStopCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopCustomAnim, &StopCustomAnim_Parms, NULL );

	pFnStopCustomAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.GetPlayedAnimation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UAnimNodeSlot::GetPlayedAnimation ( )
{
	static UFunction* pFnGetPlayedAnimation = NULL;

	if ( ! pFnGetPlayedAnimation )
		pFnGetPlayedAnimation = (UFunction*) UObject::GObjObjects()->Data[ 13008 ];

	UAnimNodeSlot_execGetPlayedAnimation_Parms GetPlayedAnimation_Parms;

	pFnGetPlayedAnimation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayedAnimation, &GetPlayedAnimation_Parms, NULL );

	pFnGetPlayedAnimation->FunctionFlags |= 0x400;

	return GetPlayedAnimation_Parms.ReturnValue;
};

// Function Engine.AnimNodeSlot.PlayCustomAnimByDuration
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLooping                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOverride                      ( CPF_OptionalParm | CPF_Parm )

bool UAnimNodeSlot::PlayCustomAnimByDuration ( struct FName AnimName, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride )
{
	static UFunction* pFnPlayCustomAnimByDuration = NULL;

	if ( ! pFnPlayCustomAnimByDuration )
		pFnPlayCustomAnimByDuration = (UFunction*) UObject::GObjObjects()->Data[ 13000 ];

	UAnimNodeSlot_execPlayCustomAnimByDuration_Parms PlayCustomAnimByDuration_Parms;
	memcpy ( &PlayCustomAnimByDuration_Parms.AnimName, &AnimName, 0x8 );
	PlayCustomAnimByDuration_Parms.Duration = Duration;
	PlayCustomAnimByDuration_Parms.BlendInTime = BlendInTime;
	PlayCustomAnimByDuration_Parms.BlendOutTime = BlendOutTime;
	PlayCustomAnimByDuration_Parms.bLooping = bLooping;
	PlayCustomAnimByDuration_Parms.bOverride = bOverride;

	pFnPlayCustomAnimByDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCustomAnimByDuration, &PlayCustomAnimByDuration_Parms, NULL );

	pFnPlayCustomAnimByDuration->FunctionFlags |= 0x400;

	return PlayCustomAnimByDuration_Parms.ReturnValue;
};

// Function Engine.AnimNodeSlot.PlayCustomAnim
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Rate                           ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLooping                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOverride                      ( CPF_OptionalParm | CPF_Parm )
// float                          StartTime                      ( CPF_OptionalParm | CPF_Parm )

float UAnimNodeSlot::PlayCustomAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride, float StartTime )
{
	static UFunction* pFnPlayCustomAnim = NULL;

	if ( ! pFnPlayCustomAnim )
		pFnPlayCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 12991 ];

	UAnimNodeSlot_execPlayCustomAnim_Parms PlayCustomAnim_Parms;
	memcpy ( &PlayCustomAnim_Parms.AnimName, &AnimName, 0x8 );
	PlayCustomAnim_Parms.Rate = Rate;
	PlayCustomAnim_Parms.BlendInTime = BlendInTime;
	PlayCustomAnim_Parms.BlendOutTime = BlendOutTime;
	PlayCustomAnim_Parms.bLooping = bLooping;
	PlayCustomAnim_Parms.bOverride = bOverride;
	PlayCustomAnim_Parms.StartTime = StartTime;

	pFnPlayCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCustomAnim, &PlayCustomAnim_Parms, NULL );

	pFnPlayCustomAnim->FunctionFlags |= 0x400;

	return PlayCustomAnim_Parms.ReturnValue;
};

// Function Engine.AnimNodeSynch.SetGroupRateScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )
// float                          NewRateScale                   ( CPF_Parm )

void UAnimNodeSynch::SetGroupRateScale ( struct FName GroupName, float NewRateScale )
{
	static UFunction* pFnSetGroupRateScale = NULL;

	if ( ! pFnSetGroupRateScale )
		pFnSetGroupRateScale = (UFunction*) UObject::GObjObjects()->Data[ 13065 ];

	UAnimNodeSynch_execSetGroupRateScale_Parms SetGroupRateScale_Parms;
	memcpy ( &SetGroupRateScale_Parms.GroupName, &GroupName, 0x8 );
	SetGroupRateScale_Parms.NewRateScale = NewRateScale;

	pFnSetGroupRateScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetGroupRateScale, &SetGroupRateScale_Parms, NULL );

	pFnSetGroupRateScale->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSynch.GetRelativePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

float UAnimNodeSynch::GetRelativePosition ( struct FName GroupName )
{
	static UFunction* pFnGetRelativePosition = NULL;

	if ( ! pFnGetRelativePosition )
		pFnGetRelativePosition = (UFunction*) UObject::GObjObjects()->Data[ 13062 ];

	UAnimNodeSynch_execGetRelativePosition_Parms GetRelativePosition_Parms;
	memcpy ( &GetRelativePosition_Parms.GroupName, &GroupName, 0x8 );

	pFnGetRelativePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRelativePosition, &GetRelativePosition_Parms, NULL );

	pFnGetRelativePosition->FunctionFlags |= 0x400;

	return GetRelativePosition_Parms.ReturnValue;
};

// Function Engine.AnimNodeSynch.ForceRelativePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )
// float                          RelativePosition               ( CPF_Parm )

void UAnimNodeSynch::ForceRelativePosition ( struct FName GroupName, float RelativePosition )
{
	static UFunction* pFnForceRelativePosition = NULL;

	if ( ! pFnForceRelativePosition )
		pFnForceRelativePosition = (UFunction*) UObject::GObjObjects()->Data[ 13059 ];

	UAnimNodeSynch_execForceRelativePosition_Parms ForceRelativePosition_Parms;
	memcpy ( &ForceRelativePosition_Parms.GroupName, &GroupName, 0x8 );
	ForceRelativePosition_Parms.RelativePosition = RelativePosition;

	pFnForceRelativePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceRelativePosition, &ForceRelativePosition_Parms, NULL );

	pFnForceRelativePosition->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSynch.GetMasterNodeOfGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

class UAnimNodeSequence* UAnimNodeSynch::GetMasterNodeOfGroup ( struct FName GroupName )
{
	static UFunction* pFnGetMasterNodeOfGroup = NULL;

	if ( ! pFnGetMasterNodeOfGroup )
		pFnGetMasterNodeOfGroup = (UFunction*) UObject::GObjObjects()->Data[ 13056 ];

	UAnimNodeSynch_execGetMasterNodeOfGroup_Parms GetMasterNodeOfGroup_Parms;
	memcpy ( &GetMasterNodeOfGroup_Parms.GroupName, &GroupName, 0x8 );

	pFnGetMasterNodeOfGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMasterNodeOfGroup, &GetMasterNodeOfGroup_Parms, NULL );

	pFnGetMasterNodeOfGroup->FunctionFlags |= 0x400;

	return GetMasterNodeOfGroup_Parms.ReturnValue;
};

// Function Engine.AnimNodeSynch.RemoveNodeFromGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// struct FName                   GroupName                      ( CPF_Parm )

void UAnimNodeSynch::RemoveNodeFromGroup ( class UAnimNodeSequence* SeqNode, struct FName GroupName )
{
	static UFunction* pFnRemoveNodeFromGroup = NULL;

	if ( ! pFnRemoveNodeFromGroup )
		pFnRemoveNodeFromGroup = (UFunction*) UObject::GObjObjects()->Data[ 13053 ];

	UAnimNodeSynch_execRemoveNodeFromGroup_Parms RemoveNodeFromGroup_Parms;
	RemoveNodeFromGroup_Parms.SeqNode = SeqNode;
	memcpy ( &RemoveNodeFromGroup_Parms.GroupName, &GroupName, 0x8 );

	pFnRemoveNodeFromGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveNodeFromGroup, &RemoveNodeFromGroup_Parms, NULL );

	pFnRemoveNodeFromGroup->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSynch.AddNodeToGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// struct FName                   GroupName                      ( CPF_Parm )

void UAnimNodeSynch::AddNodeToGroup ( class UAnimNodeSequence* SeqNode, struct FName GroupName )
{
	static UFunction* pFnAddNodeToGroup = NULL;

	if ( ! pFnAddNodeToGroup )
		pFnAddNodeToGroup = (UFunction*) UObject::GObjObjects()->Data[ 13050 ];

	UAnimNodeSynch_execAddNodeToGroup_Parms AddNodeToGroup_Parms;
	AddNodeToGroup_Parms.SeqNode = SeqNode;
	memcpy ( &AddNodeToGroup_Parms.GroupName, &GroupName, 0x8 );

	pFnAddNodeToGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNodeToGroup, &AddNodeToGroup_Parms, NULL );

	pFnAddNodeToGroup->FunctionFlags |= 0x400;
};

// Function Engine.AnimNode_MultiBlendPerBone.SetMaskWeight
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            MaskIndex                      ( CPF_Parm )
// float                          DesiredWeight                  ( CPF_Parm )
// float                          BlendTime                      ( CPF_Parm )

void UAnimNode_MultiBlendPerBone::SetMaskWeight ( int MaskIndex, float DesiredWeight, float BlendTime )
{
	static UFunction* pFnSetMaskWeight = NULL;

	if ( ! pFnSetMaskWeight )
		pFnSetMaskWeight = (UFunction*) UObject::GObjObjects()->Data[ 12708 ];

	UAnimNode_MultiBlendPerBone_execSetMaskWeight_Parms SetMaskWeight_Parms;
	SetMaskWeight_Parms.MaskIndex = MaskIndex;
	SetMaskWeight_Parms.DesiredWeight = DesiredWeight;
	SetMaskWeight_Parms.BlendTime = BlendTime;

	pFnSetMaskWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaskWeight, &SetMaskWeight_Parms, NULL );

	pFnSetMaskWeight->FunctionFlags |= 0x400;
};

// Function Engine.AnimTree.GetGroupIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

int UAnimTree::GetGroupIndex ( struct FName GroupName )
{
	static UFunction* pFnGetGroupIndex = NULL;

	if ( ! pFnGetGroupIndex )
		pFnGetGroupIndex = (UFunction*) UObject::GObjObjects()->Data[ 13237 ];

	UAnimTree_execGetGroupIndex_Parms GetGroupIndex_Parms;
	memcpy ( &GetGroupIndex_Parms.GroupName, &GroupName, 0x8 );

	pFnGetGroupIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupIndex, &GetGroupIndex_Parms, NULL );

	pFnGetGroupIndex->FunctionFlags |= 0x400;

	return GetGroupIndex_Parms.ReturnValue;
};

// Function Engine.AnimTree.GetGroupRateScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

float UAnimTree::GetGroupRateScale ( struct FName GroupName )
{
	static UFunction* pFnGetGroupRateScale = NULL;

	if ( ! pFnGetGroupRateScale )
		pFnGetGroupRateScale = (UFunction*) UObject::GObjObjects()->Data[ 13234 ];

	UAnimTree_execGetGroupRateScale_Parms GetGroupRateScale_Parms;
	memcpy ( &GetGroupRateScale_Parms.GroupName, &GroupName, 0x8 );

	pFnGetGroupRateScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupRateScale, &GetGroupRateScale_Parms, NULL );

	pFnGetGroupRateScale->FunctionFlags |= 0x400;

	return GetGroupRateScale_Parms.ReturnValue;
};

// Function Engine.AnimTree.SetGroupRateScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )
// float                          NewRateScale                   ( CPF_Parm )

void UAnimTree::SetGroupRateScale ( struct FName GroupName, float NewRateScale )
{
	static UFunction* pFnSetGroupRateScale = NULL;

	if ( ! pFnSetGroupRateScale )
		pFnSetGroupRateScale = (UFunction*) UObject::GObjObjects()->Data[ 13231 ];

	UAnimTree_execSetGroupRateScale_Parms SetGroupRateScale_Parms;
	memcpy ( &SetGroupRateScale_Parms.GroupName, &GroupName, 0x8 );
	SetGroupRateScale_Parms.NewRateScale = NewRateScale;

	pFnSetGroupRateScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetGroupRateScale, &SetGroupRateScale_Parms, NULL );

	pFnSetGroupRateScale->FunctionFlags |= 0x400;
};

// Function Engine.AnimTree.GetGroupRelativePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

float UAnimTree::GetGroupRelativePosition ( struct FName GroupName )
{
	static UFunction* pFnGetGroupRelativePosition = NULL;

	if ( ! pFnGetGroupRelativePosition )
		pFnGetGroupRelativePosition = (UFunction*) UObject::GObjObjects()->Data[ 13228 ];

	UAnimTree_execGetGroupRelativePosition_Parms GetGroupRelativePosition_Parms;
	memcpy ( &GetGroupRelativePosition_Parms.GroupName, &GroupName, 0x8 );

	pFnGetGroupRelativePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupRelativePosition, &GetGroupRelativePosition_Parms, NULL );

	pFnGetGroupRelativePosition->FunctionFlags |= 0x400;

	return GetGroupRelativePosition_Parms.ReturnValue;
};

// Function Engine.AnimTree.ForceGroupRelativePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )
// float                          RelativePosition               ( CPF_Parm )

void UAnimTree::ForceGroupRelativePosition ( struct FName GroupName, float RelativePosition )
{
	static UFunction* pFnForceGroupRelativePosition = NULL;

	if ( ! pFnForceGroupRelativePosition )
		pFnForceGroupRelativePosition = (UFunction*) UObject::GObjObjects()->Data[ 13225 ];

	UAnimTree_execForceGroupRelativePosition_Parms ForceGroupRelativePosition_Parms;
	memcpy ( &ForceGroupRelativePosition_Parms.GroupName, &GroupName, 0x8 );
	ForceGroupRelativePosition_Parms.RelativePosition = RelativePosition;

	pFnForceGroupRelativePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceGroupRelativePosition, &ForceGroupRelativePosition_Parms, NULL );

	pFnForceGroupRelativePosition->FunctionFlags |= 0x400;
};

// Function Engine.AnimTree.GetGroupNotifyMaster
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

class UAnimNodeSequence* UAnimTree::GetGroupNotifyMaster ( struct FName GroupName )
{
	static UFunction* pFnGetGroupNotifyMaster = NULL;

	if ( ! pFnGetGroupNotifyMaster )
		pFnGetGroupNotifyMaster = (UFunction*) UObject::GObjObjects()->Data[ 13222 ];

	UAnimTree_execGetGroupNotifyMaster_Parms GetGroupNotifyMaster_Parms;
	memcpy ( &GetGroupNotifyMaster_Parms.GroupName, &GroupName, 0x8 );

	pFnGetGroupNotifyMaster->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupNotifyMaster, &GetGroupNotifyMaster_Parms, NULL );

	pFnGetGroupNotifyMaster->FunctionFlags |= 0x400;

	return GetGroupNotifyMaster_Parms.ReturnValue;
};

// Function Engine.AnimTree.GetGroupSynchMaster
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

class UAnimNodeSequence* UAnimTree::GetGroupSynchMaster ( struct FName GroupName )
{
	static UFunction* pFnGetGroupSynchMaster = NULL;

	if ( ! pFnGetGroupSynchMaster )
		pFnGetGroupSynchMaster = (UFunction*) UObject::GObjObjects()->Data[ 13219 ];

	UAnimTree_execGetGroupSynchMaster_Parms GetGroupSynchMaster_Parms;
	memcpy ( &GetGroupSynchMaster_Parms.GroupName, &GroupName, 0x8 );

	pFnGetGroupSynchMaster->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupSynchMaster, &GetGroupSynchMaster_Parms, NULL );

	pFnGetGroupSynchMaster->FunctionFlags |= 0x400;

	return GetGroupSynchMaster_Parms.ReturnValue;
};

// Function Engine.AnimTree.SetAnimGroupForNode
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// struct FName                   GroupName                      ( CPF_Parm )
// unsigned long                  bCreateIfNotFound              ( CPF_OptionalParm | CPF_Parm )

bool UAnimTree::SetAnimGroupForNode ( class UAnimNodeSequence* SeqNode, struct FName GroupName, unsigned long bCreateIfNotFound )
{
	static UFunction* pFnSetAnimGroupForNode = NULL;

	if ( ! pFnSetAnimGroupForNode )
		pFnSetAnimGroupForNode = (UFunction*) UObject::GObjObjects()->Data[ 13214 ];

	UAnimTree_execSetAnimGroupForNode_Parms SetAnimGroupForNode_Parms;
	SetAnimGroupForNode_Parms.SeqNode = SeqNode;
	memcpy ( &SetAnimGroupForNode_Parms.GroupName, &GroupName, 0x8 );
	SetAnimGroupForNode_Parms.bCreateIfNotFound = bCreateIfNotFound;

	pFnSetAnimGroupForNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAnimGroupForNode, &SetAnimGroupForNode_Parms, NULL );

	pFnSetAnimGroupForNode->FunctionFlags |= 0x400;

	return SetAnimGroupForNode_Parms.ReturnValue;
};

// Function Engine.AnimTree.SetUseSavedPose
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bUseSaved                      ( CPF_Parm )

void UAnimTree::SetUseSavedPose ( unsigned long bUseSaved )
{
	static UFunction* pFnSetUseSavedPose = NULL;

	if ( ! pFnSetUseSavedPose )
		pFnSetUseSavedPose = (UFunction*) UObject::GObjObjects()->Data[ 13212 ];

	UAnimTree_execSetUseSavedPose_Parms SetUseSavedPose_Parms;
	SetUseSavedPose_Parms.bUseSaved = bUseSaved;

	pFnSetUseSavedPose->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetUseSavedPose, &SetUseSavedPose_Parms, NULL );

	pFnSetUseSavedPose->FunctionFlags |= 0x400;
};

// Function Engine.AnimTree.FindMorphNode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMorphNodeBase*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InNodeName                     ( CPF_Parm )

class UMorphNodeBase* UAnimTree::FindMorphNode ( struct FName InNodeName )
{
	static UFunction* pFnFindMorphNode = NULL;

	if ( ! pFnFindMorphNode )
		pFnFindMorphNode = (UFunction*) UObject::GObjObjects()->Data[ 13209 ];

	UAnimTree_execFindMorphNode_Parms FindMorphNode_Parms;
	memcpy ( &FindMorphNode_Parms.InNodeName, &InNodeName, 0x8 );

	pFnFindMorphNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindMorphNode, &FindMorphNode_Parms, NULL );

	pFnFindMorphNode->FunctionFlags |= 0x400;

	return FindMorphNode_Parms.ReturnValue;
};

// Function Engine.AnimTree.FindSkelControl
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkelControlBase*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InControlName                  ( CPF_Parm )

class USkelControlBase* UAnimTree::FindSkelControl ( struct FName InControlName )
{
	static UFunction* pFnFindSkelControl = NULL;

	if ( ! pFnFindSkelControl )
		pFnFindSkelControl = (UFunction*) UObject::GObjObjects()->Data[ 13206 ];

	UAnimTree_execFindSkelControl_Parms FindSkelControl_Parms;
	memcpy ( &FindSkelControl_Parms.InControlName, &InControlName, 0x8 );

	pFnFindSkelControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSkelControl, &FindSkelControl_Parms, NULL );

	pFnFindSkelControl->FunctionFlags |= 0x400;

	return FindSkelControl_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.GetTimeLeft
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UAnimNodeSequence::GetTimeLeft ( )
{
	static UFunction* pFnGetTimeLeft = NULL;

	if ( ! pFnGetTimeLeft )
		pFnGetTimeLeft = (UFunction*) UObject::GObjObjects()->Data[ 12887 ];

	UAnimNodeSequence_execGetTimeLeft_Parms GetTimeLeft_Parms;

	pFnGetTimeLeft->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTimeLeft, &GetTimeLeft_Parms, NULL );

	pFnGetTimeLeft->FunctionFlags |= 0x400;

	return GetTimeLeft_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.GetAnimPlaybackLength
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UAnimNodeSequence::GetAnimPlaybackLength ( )
{
	static UFunction* pFnGetAnimPlaybackLength = NULL;

	if ( ! pFnGetAnimPlaybackLength )
		pFnGetAnimPlaybackLength = (UFunction*) UObject::GObjObjects()->Data[ 12885 ];

	UAnimNodeSequence_execGetAnimPlaybackLength_Parms GetAnimPlaybackLength_Parms;

	pFnGetAnimPlaybackLength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAnimPlaybackLength, &GetAnimPlaybackLength_Parms, NULL );

	pFnGetAnimPlaybackLength->FunctionFlags |= 0x400;

	return GetAnimPlaybackLength_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.GetGlobalPlayRate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UAnimNodeSequence::GetGlobalPlayRate ( )
{
	static UFunction* pFnGetGlobalPlayRate = NULL;

	if ( ! pFnGetGlobalPlayRate )
		pFnGetGlobalPlayRate = (UFunction*) UObject::GObjObjects()->Data[ 12883 ];

	UAnimNodeSequence_execGetGlobalPlayRate_Parms GetGlobalPlayRate_Parms;

	pFnGetGlobalPlayRate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGlobalPlayRate, &GetGlobalPlayRate_Parms, NULL );

	pFnGetGlobalPlayRate->FunctionFlags |= 0x400;

	return GetGlobalPlayRate_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.GetGroupRelativePosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UAnimNodeSequence::GetGroupRelativePosition ( )
{
	static UFunction* pFnGetGroupRelativePosition = NULL;

	if ( ! pFnGetGroupRelativePosition )
		pFnGetGroupRelativePosition = (UFunction*) UObject::GObjObjects()->Data[ 12881 ];

	UAnimNodeSequence_execGetGroupRelativePosition_Parms GetGroupRelativePosition_Parms;

	pFnGetGroupRelativePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupRelativePosition, &GetGroupRelativePosition_Parms, NULL );

	pFnGetGroupRelativePosition->FunctionFlags |= 0x400;

	return GetGroupRelativePosition_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.FindGroupPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          GroupRelativePosition          ( CPF_Parm )

float UAnimNodeSequence::FindGroupPosition ( float GroupRelativePosition )
{
	static UFunction* pFnFindGroupPosition = NULL;

	if ( ! pFnFindGroupPosition )
		pFnFindGroupPosition = (UFunction*) UObject::GObjObjects()->Data[ 12878 ];

	UAnimNodeSequence_execFindGroupPosition_Parms FindGroupPosition_Parms;
	FindGroupPosition_Parms.GroupRelativePosition = GroupRelativePosition;

	pFnFindGroupPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindGroupPosition, &FindGroupPosition_Parms, NULL );

	pFnFindGroupPosition->FunctionFlags |= 0x400;

	return FindGroupPosition_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.FindGroupRelativePosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          GroupRelativePosition          ( CPF_Parm )

float UAnimNodeSequence::FindGroupRelativePosition ( float GroupRelativePosition )
{
	static UFunction* pFnFindGroupRelativePosition = NULL;

	if ( ! pFnFindGroupRelativePosition )
		pFnFindGroupRelativePosition = (UFunction*) UObject::GObjObjects()->Data[ 12875 ];

	UAnimNodeSequence_execFindGroupRelativePosition_Parms FindGroupRelativePosition_Parms;
	FindGroupRelativePosition_Parms.GroupRelativePosition = GroupRelativePosition;

	pFnFindGroupRelativePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindGroupRelativePosition, &FindGroupRelativePosition_Parms, NULL );

	pFnFindGroupRelativePosition->FunctionFlags |= 0x400;

	return FindGroupRelativePosition_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.GetNormalizedPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UAnimNodeSequence::GetNormalizedPosition ( )
{
	static UFunction* pFnGetNormalizedPosition = NULL;

	if ( ! pFnGetNormalizedPosition )
		pFnGetNormalizedPosition = (UFunction*) UObject::GObjObjects()->Data[ 12873 ];

	UAnimNodeSequence_execGetNormalizedPosition_Parms GetNormalizedPosition_Parms;

	pFnGetNormalizedPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNormalizedPosition, &GetNormalizedPosition_Parms, NULL );

	pFnGetNormalizedPosition->FunctionFlags |= 0x400;

	return GetNormalizedPosition_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.SetPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          NewTime                        ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )

void UAnimNodeSequence::SetPosition ( float NewTime, unsigned long bFireNotifies )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = (UFunction*) UObject::GObjObjects()->Data[ 12870 ];

	UAnimNodeSequence_execSetPosition_Parms SetPosition_Parms;
	SetPosition_Parms.NewTime = NewTime;
	SetPosition_Parms.bFireNotifies = bFireNotifies;

	pFnSetPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );

	pFnSetPosition->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSequence.ReplayAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAnimNodeSequence::ReplayAnim ( )
{
	static UFunction* pFnReplayAnim = NULL;

	if ( ! pFnReplayAnim )
		pFnReplayAnim = (UFunction*) UObject::GObjObjects()->Data[ 12869 ];

	UAnimNodeSequence_execReplayAnim_Parms ReplayAnim_Parms;

	pFnReplayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReplayAnim, &ReplayAnim_Parms, NULL );

	pFnReplayAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSequence.StopAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAnimNodeSequence::StopAnim ( )
{
	static UFunction* pFnStopAnim = NULL;

	if ( ! pFnStopAnim )
		pFnStopAnim = (UFunction*) UObject::GObjObjects()->Data[ 12868 ];

	UAnimNodeSequence_execStopAnim_Parms StopAnim_Parms;

	pFnStopAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAnim, &StopAnim_Parms, NULL );

	pFnStopAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSequence.PlayAnim
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// float                          InRate                         ( CPF_OptionalParm | CPF_Parm )
// float                          StartTime                      ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeSequence::PlayAnim ( unsigned long bLoop, float InRate, float StartTime )
{
	static UFunction* pFnPlayAnim = NULL;

	if ( ! pFnPlayAnim )
		pFnPlayAnim = (UFunction*) UObject::GObjObjects()->Data[ 12864 ];

	UAnimNodeSequence_execPlayAnim_Parms PlayAnim_Parms;
	PlayAnim_Parms.bLoop = bLoop;
	PlayAnim_Parms.InRate = InRate;
	PlayAnim_Parms.StartTime = StartTime;

	pFnPlayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayAnim, &PlayAnim_Parms, NULL );

	pFnPlayAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSequence.SetAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   Sequence                       ( CPF_Parm )

void UAnimNodeSequence::SetAnim ( struct FName Sequence )
{
	static UFunction* pFnSetAnim = NULL;

	if ( ! pFnSetAnim )
		pFnSetAnim = (UFunction*) UObject::GObjObjects()->Data[ 12862 ];

	UAnimNodeSequence_execSetAnim_Parms SetAnim_Parms;
	memcpy ( &SetAnim_Parms.Sequence, &Sequence, 0x8 );

	pFnSetAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAnim, &SetAnim_Parms, NULL );

	pFnSetAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSequenceBlendByAim.CheckAnimsUpToDate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UAnimNodeSequenceBlendByAim::CheckAnimsUpToDate ( )
{
	static UFunction* pFnCheckAnimsUpToDate = NULL;

	if ( ! pFnCheckAnimsUpToDate )
		pFnCheckAnimsUpToDate = (UFunction*) UObject::GObjObjects()->Data[ 12974 ];

	UAnimNodeSequenceBlendByAim_execCheckAnimsUpToDate_Parms CheckAnimsUpToDate_Parms;

	pFnCheckAnimsUpToDate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckAnimsUpToDate, &CheckAnimsUpToDate_Parms, NULL );

	pFnCheckAnimsUpToDate->FunctionFlags |= 0x400;
};

// Function Engine.MorphNodeMultiPose.UpdateMorphTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UMorphTarget*            Target                         ( CPF_Parm )
// float                          InWeight                       ( CPF_Parm )

bool UMorphNodeMultiPose::UpdateMorphTarget ( class UMorphTarget* Target, float InWeight )
{
	static UFunction* pFnUpdateMorphTarget = NULL;

	if ( ! pFnUpdateMorphTarget )
		pFnUpdateMorphTarget = (UFunction*) UObject::GObjObjects()->Data[ 24733 ];

	UMorphNodeMultiPose_execUpdateMorphTarget_Parms UpdateMorphTarget_Parms;
	UpdateMorphTarget_Parms.Target = Target;
	UpdateMorphTarget_Parms.InWeight = InWeight;

	pFnUpdateMorphTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateMorphTarget, &UpdateMorphTarget_Parms, NULL );

	pFnUpdateMorphTarget->FunctionFlags |= 0x400;

	return UpdateMorphTarget_Parms.ReturnValue;
};

// Function Engine.MorphNodeMultiPose.RemoveMorphTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   MorphTargetName                ( CPF_Parm )

void UMorphNodeMultiPose::RemoveMorphTarget ( struct FName MorphTargetName )
{
	static UFunction* pFnRemoveMorphTarget = NULL;

	if ( ! pFnRemoveMorphTarget )
		pFnRemoveMorphTarget = (UFunction*) UObject::GObjObjects()->Data[ 24731 ];

	UMorphNodeMultiPose_execRemoveMorphTarget_Parms RemoveMorphTarget_Parms;
	memcpy ( &RemoveMorphTarget_Parms.MorphTargetName, &MorphTargetName, 0x8 );

	pFnRemoveMorphTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveMorphTarget, &RemoveMorphTarget_Parms, NULL );

	pFnRemoveMorphTarget->FunctionFlags |= 0x400;
};

// Function Engine.MorphNodeMultiPose.AddMorphTarget
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   MorphTargetName                ( CPF_Parm )
// float                          InWeight                       ( CPF_OptionalParm | CPF_Parm )

bool UMorphNodeMultiPose::AddMorphTarget ( struct FName MorphTargetName, float InWeight )
{
	static UFunction* pFnAddMorphTarget = NULL;

	if ( ! pFnAddMorphTarget )
		pFnAddMorphTarget = (UFunction*) UObject::GObjObjects()->Data[ 24727 ];

	UMorphNodeMultiPose_execAddMorphTarget_Parms AddMorphTarget_Parms;
	memcpy ( &AddMorphTarget_Parms.MorphTargetName, &MorphTargetName, 0x8 );
	AddMorphTarget_Parms.InWeight = InWeight;

	pFnAddMorphTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddMorphTarget, &AddMorphTarget_Parms, NULL );

	pFnAddMorphTarget->FunctionFlags |= 0x400;

	return AddMorphTarget_Parms.ReturnValue;
};

// Function Engine.MorphNodePose.SetMorphTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   MorphTargetName                ( CPF_Parm )

void UMorphNodePose::SetMorphTarget ( struct FName MorphTargetName )
{
	static UFunction* pFnSetMorphTarget = NULL;

	if ( ! pFnSetMorphTarget )
		pFnSetMorphTarget = (UFunction*) UObject::GObjObjects()->Data[ 24737 ];

	UMorphNodePose_execSetMorphTarget_Parms SetMorphTarget_Parms;
	memcpy ( &SetMorphTarget_Parms.MorphTargetName, &MorphTargetName, 0x8 );

	pFnSetMorphTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMorphTarget, &SetMorphTarget_Parms, NULL );

	pFnSetMorphTarget->FunctionFlags |= 0x400;
};

// Function Engine.MorphNodeWeight.SetNodeWeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          NewWeight                      ( CPF_Parm )

void UMorphNodeWeight::SetNodeWeight ( float NewWeight )
{
	static UFunction* pFnSetNodeWeight = NULL;

	if ( ! pFnSetNodeWeight )
		pFnSetNodeWeight = (UFunction*) UObject::GObjObjects()->Data[ 24749 ];

	UMorphNodeWeight_execSetNodeWeight_Parms SetNodeWeight_Parms;
	SetNodeWeight_Parms.NewWeight = NewWeight;

	pFnSetNodeWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNodeWeight, &SetNodeWeight_Parms, NULL );

	pFnSetNodeWeight->FunctionFlags |= 0x400;
};

// Function Engine.SkelControlBase.TickSkelControl
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void USkelControlBase::eventTickSkelControl ( float DeltaTime, class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnTickSkelControl = NULL;

	if ( ! pFnTickSkelControl )
		pFnTickSkelControl = (UFunction*) UObject::GObjObjects()->Data[ 30419 ];

	USkelControlBase_eventTickSkelControl_Parms TickSkelControl_Parms;
	TickSkelControl_Parms.DeltaTime = DeltaTime;
	TickSkelControl_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnTickSkelControl, &TickSkelControl_Parms, NULL );
};

// Function Engine.SkelControlBase.SetSkelControlStrength
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewStrength                    ( CPF_Parm )
// float                          InBlendTime                    ( CPF_Parm )

void USkelControlBase::SetSkelControlStrength ( float NewStrength, float InBlendTime )
{
	static UFunction* pFnSetSkelControlStrength = NULL;

	if ( ! pFnSetSkelControlStrength )
		pFnSetSkelControlStrength = (UFunction*) UObject::GObjObjects()->Data[ 30416 ];

	USkelControlBase_execSetSkelControlStrength_Parms SetSkelControlStrength_Parms;
	SetSkelControlStrength_Parms.NewStrength = NewStrength;
	SetSkelControlStrength_Parms.InBlendTime = InBlendTime;

	pFnSetSkelControlStrength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSkelControlStrength, &SetSkelControlStrength_Parms, NULL );

	pFnSetSkelControlStrength->FunctionFlags |= 0x400;
};

// Function Engine.SkelControlBase.SetSkelControlActive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInActive                      ( CPF_Parm )

void USkelControlBase::SetSkelControlActive ( unsigned long bInActive )
{
	static UFunction* pFnSetSkelControlActive = NULL;

	if ( ! pFnSetSkelControlActive )
		pFnSetSkelControlActive = (UFunction*) UObject::GObjObjects()->Data[ 30414 ];

	USkelControlBase_execSetSkelControlActive_Parms SetSkelControlActive_Parms;
	SetSkelControlActive_Parms.bInActive = bInActive;

	pFnSetSkelControlActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSkelControlActive, &SetSkelControlActive_Parms, NULL );

	pFnSetSkelControlActive->FunctionFlags |= 0x400;
};

// Function Engine.SkelControlLookAt.CanLookAtPoint
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 PointLoc                       ( CPF_Parm )
// unsigned long                  bDrawDebugInfo                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDebugUsePersistentLines       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDebugFlushLinesFirst          ( CPF_OptionalParm | CPF_Parm )

bool USkelControlLookAt::CanLookAtPoint ( struct FVector PointLoc, unsigned long bDrawDebugInfo, unsigned long bDebugUsePersistentLines, unsigned long bDebugFlushLinesFirst )
{
	static UFunction* pFnCanLookAtPoint = NULL;

	if ( ! pFnCanLookAtPoint )
		pFnCanLookAtPoint = (UFunction*) UObject::GObjObjects()->Data[ 30503 ];

	USkelControlLookAt_execCanLookAtPoint_Parms CanLookAtPoint_Parms;
	memcpy ( &CanLookAtPoint_Parms.PointLoc, &PointLoc, 0xC );
	CanLookAtPoint_Parms.bDrawDebugInfo = bDrawDebugInfo;
	CanLookAtPoint_Parms.bDebugUsePersistentLines = bDebugUsePersistentLines;
	CanLookAtPoint_Parms.bDebugFlushLinesFirst = bDebugFlushLinesFirst;

	pFnCanLookAtPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanLookAtPoint, &CanLookAtPoint_Parms, NULL );

	pFnCanLookAtPoint->FunctionFlags |= 0x400;

	return CanLookAtPoint_Parms.ReturnValue;
};

// Function Engine.SkelControlLookAt.SetLookAtAlpha
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          DesiredAlpha                   ( CPF_Parm )
// float                          DesiredBlendTime               ( CPF_Parm )

void USkelControlLookAt::SetLookAtAlpha ( float DesiredAlpha, float DesiredBlendTime )
{
	static UFunction* pFnSetLookAtAlpha = NULL;

	if ( ! pFnSetLookAtAlpha )
		pFnSetLookAtAlpha = (UFunction*) UObject::GObjObjects()->Data[ 30500 ];

	USkelControlLookAt_execSetLookAtAlpha_Parms SetLookAtAlpha_Parms;
	SetLookAtAlpha_Parms.DesiredAlpha = DesiredAlpha;
	SetLookAtAlpha_Parms.DesiredBlendTime = DesiredBlendTime;

	pFnSetLookAtAlpha->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLookAtAlpha, &SetLookAtAlpha_Parms, NULL );

	pFnSetLookAtAlpha->FunctionFlags |= 0x400;
};

// Function Engine.SkelControlLookAt.InterpolateTargetLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void USkelControlLookAt::InterpolateTargetLocation ( float DeltaTime )
{
	static UFunction* pFnInterpolateTargetLocation = NULL;

	if ( ! pFnInterpolateTargetLocation )
		pFnInterpolateTargetLocation = (UFunction*) UObject::GObjObjects()->Data[ 30498 ];

	USkelControlLookAt_execInterpolateTargetLocation_Parms InterpolateTargetLocation_Parms;
	InterpolateTargetLocation_Parms.DeltaTime = DeltaTime;

	pFnInterpolateTargetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInterpolateTargetLocation, &InterpolateTargetLocation_Parms, NULL );

	pFnInterpolateTargetLocation->FunctionFlags |= 0x400;
};

// Function Engine.SkelControlLookAt.SetTargetLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewTargetLocation              ( CPF_Parm )

void USkelControlLookAt::SetTargetLocation ( struct FVector NewTargetLocation )
{
	static UFunction* pFnSetTargetLocation = NULL;

	if ( ! pFnSetTargetLocation )
		pFnSetTargetLocation = (UFunction*) UObject::GObjObjects()->Data[ 30496 ];

	USkelControlLookAt_execSetTargetLocation_Parms SetTargetLocation_Parms;
	memcpy ( &SetTargetLocation_Parms.NewTargetLocation, &NewTargetLocation, 0xC );

	pFnSetTargetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTargetLocation, &SetTargetLocation_Parms, NULL );

	pFnSetTargetLocation->FunctionFlags |= 0x400;
};

// Function Engine.AnimSequence.GetNotifyTimeByClass
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  NotifyClass                    ( CPF_Parm )
// float                          PlayRate                       ( CPF_OptionalParm | CPF_Parm )
// float                          StartPosition                  ( CPF_OptionalParm | CPF_Parm )

float UAnimSequence::GetNotifyTimeByClass ( class UClass* NotifyClass, float PlayRate, float StartPosition )
{
	static UFunction* pFnGetNotifyTimeByClass = NULL;

	if ( ! pFnGetNotifyTimeByClass )
		pFnGetNotifyTimeByClass = (UFunction*) UObject::GObjObjects()->Data[ 12584 ];

	UAnimSequence_execGetNotifyTimeByClass_Parms GetNotifyTimeByClass_Parms;
	GetNotifyTimeByClass_Parms.NotifyClass = NotifyClass;
	GetNotifyTimeByClass_Parms.PlayRate = PlayRate;
	GetNotifyTimeByClass_Parms.StartPosition = StartPosition;

	pFnGetNotifyTimeByClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNotifyTimeByClass, &GetNotifyTimeByClass_Parms, NULL );

	pFnGetNotifyTimeByClass->FunctionFlags |= 0x400;

	return GetNotifyTimeByClass_Parms.ReturnValue;
};

// Function Engine.MorphTargetSet.FindMorphTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMorphTarget*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   MorphTargetName                ( CPF_Parm )

class UMorphTarget* UMorphTargetSet::FindMorphTarget ( struct FName MorphTargetName )
{
	static UFunction* pFnFindMorphTarget = NULL;

	if ( ! pFnFindMorphTarget )
		pFnFindMorphTarget = (UFunction*) UObject::GObjObjects()->Data[ 24791 ];

	UMorphTargetSet_execFindMorphTarget_Parms FindMorphTarget_Parms;
	memcpy ( &FindMorphTarget_Parms.MorphTargetName, &MorphTargetName, 0x8 );

	pFnFindMorphTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindMorphTarget, &FindMorphTarget_Parms, NULL );

	pFnFindMorphTarget->FunctionFlags |= 0x400;

	return FindMorphTarget_Parms.ReturnValue;
};

// Function Engine.DecalComponent.DisconnectFromManager
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UDecalComponent::DisconnectFromManager ( )
{
	static UFunction* pFnDisconnectFromManager = NULL;

	if ( ! pFnDisconnectFromManager )
		pFnDisconnectFromManager = (UFunction*) UObject::GObjObjects()->Data[ 18631 ];

	UDecalComponent_execDisconnectFromManager_Parms DisconnectFromManager_Parms;

	pFnDisconnectFromManager->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisconnectFromManager, &DisconnectFromManager_Parms, NULL );

	pFnDisconnectFromManager->FunctionFlags |= 0x400;
};

// Function Engine.DecalComponent.ConnectToManager
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UDecalComponent::ConnectToManager ( )
{
	static UFunction* pFnConnectToManager = NULL;

	if ( ! pFnConnectToManager )
		pFnConnectToManager = (UFunction*) UObject::GObjObjects()->Data[ 18630 ];

	UDecalComponent_execConnectToManager_Parms ConnectToManager_Parms;

	pFnConnectToManager->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConnectToManager, &ConnectToManager_Parms, NULL );

	pFnConnectToManager->FunctionFlags |= 0x400;
};

// Function Engine.DecalComponent.GetManager
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UDecalManager*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UDecalManager* UDecalComponent::GetManager ( )
{
	static UFunction* pFnGetManager = NULL;

	if ( ! pFnGetManager )
		pFnGetManager = (UFunction*) UObject::GObjObjects()->Data[ 18628 ];

	UDecalComponent_execGetManager_Parms GetManager_Parms;

	pFnGetManager->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetManager, &GetManager_Parms, NULL );

	pFnGetManager->FunctionFlags |= 0x400;

	return GetManager_Parms.ReturnValue;
};

// Function Engine.DecalComponent.GetDecalMaterial
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UMaterialInterface* UDecalComponent::GetDecalMaterial ( )
{
	static UFunction* pFnGetDecalMaterial = NULL;

	if ( ! pFnGetDecalMaterial )
		pFnGetDecalMaterial = (UFunction*) UObject::GObjObjects()->Data[ 18626 ];

	UDecalComponent_execGetDecalMaterial_Parms GetDecalMaterial_Parms;

	pFnGetDecalMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDecalMaterial, &GetDecalMaterial_Parms, NULL );

	pFnGetDecalMaterial->FunctionFlags |= 0x400;

	return GetDecalMaterial_Parms.ReturnValue;
};

// Function Engine.DecalComponent.SetDecalMaterial
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      NewDecalMaterial               ( CPF_Parm )
// unsigned long                  bShouldReattach                ( CPF_OptionalParm | CPF_Parm )

void UDecalComponent::SetDecalMaterial ( class UMaterialInterface* NewDecalMaterial, unsigned long bShouldReattach )
{
	static UFunction* pFnSetDecalMaterial = NULL;

	if ( ! pFnSetDecalMaterial )
		pFnSetDecalMaterial = (UFunction*) UObject::GObjObjects()->Data[ 18623 ];

	UDecalComponent_execSetDecalMaterial_Parms SetDecalMaterial_Parms;
	SetDecalMaterial_Parms.NewDecalMaterial = NewDecalMaterial;
	SetDecalMaterial_Parms.bShouldReattach = bShouldReattach;

	pFnSetDecalMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDecalMaterial, &SetDecalMaterial_Parms, NULL );

	pFnSetDecalMaterial->FunctionFlags |= 0x400;
};

// Function Engine.DecalComponent.ResetToDefaults
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UDecalComponent::ResetToDefaults ( )
{
	static UFunction* pFnResetToDefaults = NULL;

	if ( ! pFnResetToDefaults )
		pFnResetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 18622 ];

	UDecalComponent_execResetToDefaults_Parms ResetToDefaults_Parms;

	pFnResetToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetToDefaults, &ResetToDefaults_Parms, NULL );

	pFnResetToDefaults->FunctionFlags |= 0x400;
};

// Function Engine.DecalManager.Disconnect
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UDecalComponent*         InDecalComponent               ( CPF_Parm | CPF_EditInline )

void UDecalManager::Disconnect ( class UDecalComponent* InDecalComponent )
{
	static UFunction* pFnDisconnect = NULL;

	if ( ! pFnDisconnect )
		pFnDisconnect = (UFunction*) UObject::GObjObjects()->Data[ 18692 ];

	UDecalManager_execDisconnect_Parms Disconnect_Parms;
	Disconnect_Parms.InDecalComponent = InDecalComponent;

	pFnDisconnect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisconnect, &Disconnect_Parms, NULL );

	pFnDisconnect->FunctionFlags |= 0x400;
};

// Function Engine.DecalManager.Connect
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UDecalComponent*         InDecalComponent               ( CPF_Parm | CPF_EditInline )

void UDecalManager::Connect ( class UDecalComponent* InDecalComponent )
{
	static UFunction* pFnConnect = NULL;

	if ( ! pFnConnect )
		pFnConnect = (UFunction*) UObject::GObjObjects()->Data[ 18690 ];

	UDecalManager_execConnect_Parms Connect_Parms;
	Connect_Parms.InDecalComponent = InDecalComponent;

	pFnConnect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConnect, &Connect_Parms, NULL );

	pFnConnect->FunctionFlags |= 0x400;
};

// Function Engine.FogVolumeDensityInfo.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AFogVolumeDensityInfo_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void AFogVolumeDensityInfo::ApplyCheckpointRecord ( struct AFogVolumeDensityInfo_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 20191 ];

	AFogVolumeDensityInfo_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.FogVolumeDensityInfo.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AFogVolumeDensityInfo_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void AFogVolumeDensityInfo::CreateCheckpointRecord ( struct AFogVolumeDensityInfo_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 20189 ];

	AFogVolumeDensityInfo_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.FogVolumeDensityInfo.ShouldSaveForCheckpoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AFogVolumeDensityInfo::ShouldSaveForCheckpoint ( )
{
	static UFunction* pFnShouldSaveForCheckpoint = NULL;

	if ( ! pFnShouldSaveForCheckpoint )
		pFnShouldSaveForCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 20187 ];

	AFogVolumeDensityInfo_execShouldSaveForCheckpoint_Parms ShouldSaveForCheckpoint_Parms;

	this->ProcessEvent ( pFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Parms, NULL );

	return ShouldSaveForCheckpoint_Parms.ReturnValue;
};

// Function Engine.FogVolumeDensityInfo.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AFogVolumeDensityInfo::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 20185 ];

	AFogVolumeDensityInfo_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.FogVolumeDensityInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AFogVolumeDensityInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 20183 ];

	AFogVolumeDensityInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.FogVolumeDensityInfo.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AFogVolumeDensityInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 20180 ];

	AFogVolumeDensityInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.FogVolumeDensityComponent.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bSetEnabled                    ( CPF_Parm )

void UFogVolumeDensityComponent::SetEnabled ( unsigned long bSetEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 20161 ];

	UFogVolumeDensityComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bSetEnabled = bSetEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.ApexDestructibleActor.ApexTakeRadiusDamage
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )

void AApexDestructibleActor::ApexTakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser )
{
	static UFunction* pFnApexTakeRadiusDamage = NULL;

	if ( ! pFnApexTakeRadiusDamage )
		pFnApexTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 13422 ];

	AApexDestructibleActor_execApexTakeRadiusDamage_Parms ApexTakeRadiusDamage_Parms;
	ApexTakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	ApexTakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	ApexTakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	ApexTakeRadiusDamage_Parms.DamageType = DamageType;
	ApexTakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &ApexTakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	ApexTakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	ApexTakeRadiusDamage_Parms.DamageCauser = DamageCauser;

	pFnApexTakeRadiusDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApexTakeRadiusDamage, &ApexTakeRadiusDamage_Parms, NULL );

	pFnApexTakeRadiusDamage->FunctionFlags |= 0x400;
};

// Function Engine.ApexDestructibleActor.TakeDamage
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )
// class UDamageType*             pDamage                        ( CPF_OptionalParm | CPF_Parm )

void AApexDestructibleActor::TakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UDamageType* pDamage )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 13413 ];

	AApexDestructibleActor_execTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x28 );
	TakeDamage_Parms.DamageCauser = DamageCauser;
	TakeDamage_Parms.pDamage = pDamage;

	pFnTakeDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );

	pFnTakeDamage->FunctionFlags |= 0x400;
};

// Function Engine.BioInterpTrack.GetNewTrackSubMenuName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioInterpTrack::eventGetNewTrackSubMenuName ( )
{
	static UFunction* pFnGetNewTrackSubMenuName = NULL;

	if ( ! pFnGetNewTrackSubMenuName )
		pFnGetNewTrackSubMenuName = (UFunction*) UObject::GObjObjects()->Data[ 14666 ];

	UBioInterpTrack_eventGetNewTrackSubMenuName_Parms GetNewTrackSubMenuName_Parms;

	this->ProcessEvent ( pFnGetNewTrackSubMenuName, &GetNewTrackSubMenuName_Parms, NULL );

	return GetNewTrackSubMenuName_Parms.ReturnValue;
};

// Function Engine.BioInterpTrack.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioInterpTrack::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 14664 ];

	UBioInterpTrack_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function Engine.BioInterpTrack.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioInterpTrack::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 14662 ];

	UBioInterpTrack_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function Engine.BioInterpTrack.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioInterpTrack::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 14660 ];

	UBioInterpTrack_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function Engine.BioInterpTrack.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioInterpTrack::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 14658 ];

	UBioInterpTrack_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function Engine.MaterialInstance.IsInMapOrTransientPackage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UMaterialInstance::IsInMapOrTransientPackage ( )
{
	static UFunction* pFnIsInMapOrTransientPackage = NULL;

	if ( ! pFnIsInMapOrTransientPackage )
		pFnIsInMapOrTransientPackage = (UFunction*) UObject::GObjObjects()->Data[ 14784 ];

	UMaterialInstance_execIsInMapOrTransientPackage_Parms IsInMapOrTransientPackage_Parms;

	pFnIsInMapOrTransientPackage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInMapOrTransientPackage, &IsInMapOrTransientPackage_Parms, NULL );

	pFnIsInMapOrTransientPackage->FunctionFlags |= 0x400;

	return IsInMapOrTransientPackage_Parms.ReturnValue;
};

// Function Engine.MaterialInstance.ClearParameterValues
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UMaterialInstance::ClearParameterValues ( )
{
	static UFunction* pFnClearParameterValues = NULL;

	if ( ! pFnClearParameterValues )
		pFnClearParameterValues = (UFunction*) UObject::GObjObjects()->Data[ 14783 ];

	UMaterialInstance_execClearParameterValues_Parms ClearParameterValues_Parms;

	pFnClearParameterValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearParameterValues, &ClearParameterValues_Parms, NULL );

	pFnClearParameterValues->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.SetFontParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UFont*                   FontValue                      ( CPF_Parm )
// int                            FontPage                       ( CPF_Parm )

void UMaterialInstance::SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage )
{
	static UFunction* pFnSetFontParameterValue = NULL;

	if ( ! pFnSetFontParameterValue )
		pFnSetFontParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 14779 ];

	UMaterialInstance_execSetFontParameterValue_Parms SetFontParameterValue_Parms;
	memcpy ( &SetFontParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetFontParameterValue_Parms.FontValue = FontValue;
	SetFontParameterValue_Parms.FontPage = FontPage;

	pFnSetFontParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFontParameterValue, &SetFontParameterValue_Parms, NULL );

	pFnSetFontParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.SetEffectsMaterialFractionValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          Value                          ( CPF_Parm )

void UMaterialInstance::SetEffectsMaterialFractionValue ( float Value )
{
	static UFunction* pFnSetEffectsMaterialFractionValue = NULL;

	if ( ! pFnSetEffectsMaterialFractionValue )
		pFnSetEffectsMaterialFractionValue = (UFunction*) UObject::GObjObjects()->Data[ 14777 ];

	UMaterialInstance_execSetEffectsMaterialFractionValue_Parms SetEffectsMaterialFractionValue_Parms;
	SetEffectsMaterialFractionValue_Parms.Value = Value;

	pFnSetEffectsMaterialFractionValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEffectsMaterialFractionValue, &SetEffectsMaterialFractionValue_Parms, NULL );

	pFnSetEffectsMaterialFractionValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.SetEffectsMaterialNameValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   EffectName                     ( CPF_Parm )

void UMaterialInstance::SetEffectsMaterialNameValue ( struct FName EffectName )
{
	static UFunction* pFnSetEffectsMaterialNameValue = NULL;

	if ( ! pFnSetEffectsMaterialNameValue )
		pFnSetEffectsMaterialNameValue = (UFunction*) UObject::GObjObjects()->Data[ 14775 ];

	UMaterialInstance_execSetEffectsMaterialNameValue_Parms SetEffectsMaterialNameValue_Parms;
	memcpy ( &SetEffectsMaterialNameValue_Parms.EffectName, &EffectName, 0x8 );

	pFnSetEffectsMaterialNameValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEffectsMaterialNameValue, &SetEffectsMaterialNameValue_Parms, NULL );

	pFnSetEffectsMaterialNameValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.SetTextureParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UTexture*                Value                          ( CPF_Parm )

void UMaterialInstance::SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value )
{
	static UFunction* pFnSetTextureParameterValue = NULL;

	if ( ! pFnSetTextureParameterValue )
		pFnSetTextureParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 14772 ];

	UMaterialInstance_execSetTextureParameterValue_Parms SetTextureParameterValue_Parms;
	memcpy ( &SetTextureParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetTextureParameterValue_Parms.Value = Value;

	pFnSetTextureParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextureParameterValue, &SetTextureParameterValue_Parms, NULL );

	pFnSetTextureParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.SetScalarCurveParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FInterpCurveFloat       Value                          ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UMaterialInstance::SetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat* Value )
{
	static UFunction* pFnSetScalarCurveParameterValue = NULL;

	if ( ! pFnSetScalarCurveParameterValue )
		pFnSetScalarCurveParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 14769 ];

	UMaterialInstance_execSetScalarCurveParameterValue_Parms SetScalarCurveParameterValue_Parms;
	memcpy ( &SetScalarCurveParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnSetScalarCurveParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarCurveParameterValue, &SetScalarCurveParameterValue_Parms, NULL );

	pFnSetScalarCurveParameterValue->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &SetScalarCurveParameterValue_Parms.Value, 0x14 );
};

// Function Engine.MaterialInstance.SetScalarParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UMaterialInstance::SetScalarParameterValue ( struct FName ParameterName, float Value )
{
	static UFunction* pFnSetScalarParameterValue = NULL;

	if ( ! pFnSetScalarParameterValue )
		pFnSetScalarParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 14766 ];

	UMaterialInstance_execSetScalarParameterValue_Parms SetScalarParameterValue_Parms;
	memcpy ( &SetScalarParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetScalarParameterValue_Parms.Value = Value;

	pFnSetScalarParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarParameterValue, &SetScalarParameterValue_Parms, NULL );

	pFnSetScalarParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.SetVectorParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            Value                          ( CPF_Const | CPF_Parm | CPF_OutParm )

void UMaterialInstance::SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor* Value )
{
	static UFunction* pFnSetVectorParameterValue = NULL;

	if ( ! pFnSetVectorParameterValue )
		pFnSetVectorParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 14763 ];

	UMaterialInstance_execSetVectorParameterValue_Parms SetVectorParameterValue_Parms;
	memcpy ( &SetVectorParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnSetVectorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameterValue, &SetVectorParameterValue_Parms, NULL );

	pFnSetVectorParameterValue->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &SetVectorParameterValue_Parms.Value, 0x10 );
};

// Function Engine.MaterialInstance.SetParent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      NewParent                      ( CPF_Parm )

void UMaterialInstance::SetParent ( class UMaterialInterface* NewParent )
{
	static UFunction* pFnSetParent = NULL;

	if ( ! pFnSetParent )
		pFnSetParent = (UFunction*) UObject::GObjObjects()->Data[ 14761 ];

	UMaterialInstance_execSetParent_Parms SetParent_Parms;
	SetParent_Parms.NewParent = NewParent;

	pFnSetParent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetParent, &SetParent_Parms, NULL );

	pFnSetParent->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.ClearParameterValues
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UMaterialInstanceConstant::ClearParameterValues ( )
{
	static UFunction* pFnClearParameterValues = NULL;

	if ( ! pFnClearParameterValues )
		pFnClearParameterValues = (UFunction*) UObject::GObjObjects()->Data[ 14835 ];

	UMaterialInstanceConstant_execClearParameterValues_Parms ClearParameterValues_Parms;

	pFnClearParameterValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearParameterValues, &ClearParameterValues_Parms, NULL );

	pFnClearParameterValues->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetFontParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UFont*                   FontValue                      ( CPF_Parm )
// int                            FontPage                       ( CPF_Parm )

void UMaterialInstanceConstant::SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage )
{
	static UFunction* pFnSetFontParameterValue = NULL;

	if ( ! pFnSetFontParameterValue )
		pFnSetFontParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 14831 ];

	UMaterialInstanceConstant_execSetFontParameterValue_Parms SetFontParameterValue_Parms;
	memcpy ( &SetFontParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetFontParameterValue_Parms.FontValue = FontValue;
	SetFontParameterValue_Parms.FontPage = FontPage;

	pFnSetFontParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFontParameterValue, &SetFontParameterValue_Parms, NULL );

	pFnSetFontParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetVectorParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            Value                          ( CPF_Const | CPF_Parm | CPF_OutParm )

void UMaterialInstanceConstant::SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor* Value )
{
	static UFunction* pFnSetVectorParameterValue = NULL;

	if ( ! pFnSetVectorParameterValue )
		pFnSetVectorParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 14828 ];

	UMaterialInstanceConstant_execSetVectorParameterValue_Parms SetVectorParameterValue_Parms;
	memcpy ( &SetVectorParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnSetVectorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameterValue, &SetVectorParameterValue_Parms, NULL );

	pFnSetVectorParameterValue->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &SetVectorParameterValue_Parms.Value, 0x10 );
};

// Function Engine.MaterialInstanceConstant.SetTextureParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UTexture*                Value                          ( CPF_Parm )

void UMaterialInstanceConstant::SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value )
{
	static UFunction* pFnSetTextureParameterValue = NULL;

	if ( ! pFnSetTextureParameterValue )
		pFnSetTextureParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 14825 ];

	UMaterialInstanceConstant_execSetTextureParameterValue_Parms SetTextureParameterValue_Parms;
	memcpy ( &SetTextureParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetTextureParameterValue_Parms.Value = Value;

	pFnSetTextureParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextureParameterValue, &SetTextureParameterValue_Parms, NULL );

	pFnSetTextureParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetScalarParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UMaterialInstanceConstant::SetScalarParameterValue ( struct FName ParameterName, float Value )
{
	static UFunction* pFnSetScalarParameterValue = NULL;

	if ( ! pFnSetScalarParameterValue )
		pFnSetScalarParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 14822 ];

	UMaterialInstanceConstant_execSetScalarParameterValue_Parms SetScalarParameterValue_Parms;
	memcpy ( &SetScalarParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetScalarParameterValue_Parms.Value = Value;

	pFnSetScalarParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarParameterValue, &SetScalarParameterValue_Parms, NULL );

	pFnSetScalarParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetParent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      NewParent                      ( CPF_Parm )

void UMaterialInstanceConstant::SetParent ( class UMaterialInterface* NewParent )
{
	static UFunction* pFnSetParent = NULL;

	if ( ! pFnSetParent )
		pFnSetParent = (UFunction*) UObject::GObjObjects()->Data[ 14820 ];

	UMaterialInstanceConstant_execSetParent_Parms SetParent_Parms;
	SetParent_Parms.NewParent = NewParent;

	pFnSetParent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetParent, &SetParent_Parms, NULL );

	pFnSetParent->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.GetMaxDurationFromAllParameters
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UMaterialInstanceTimeVarying::GetMaxDurationFromAllParameters ( )
{
	static UFunction* pFnGetMaxDurationFromAllParameters = NULL;

	if ( ! pFnGetMaxDurationFromAllParameters )
		pFnGetMaxDurationFromAllParameters = (UFunction*) UObject::GObjObjects()->Data[ 23785 ];

	UMaterialInstanceTimeVarying_execGetMaxDurationFromAllParameters_Parms GetMaxDurationFromAllParameters_Parms;

	pFnGetMaxDurationFromAllParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxDurationFromAllParameters, &GetMaxDurationFromAllParameters_Parms, NULL );

	pFnGetMaxDurationFromAllParameters->FunctionFlags |= 0x400;

	return GetMaxDurationFromAllParameters_Parms.ReturnValue;
};

// Function Engine.MaterialInstanceTimeVarying.ClearParameterValues
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UMaterialInstanceTimeVarying::ClearParameterValues ( )
{
	static UFunction* pFnClearParameterValues = NULL;

	if ( ! pFnClearParameterValues )
		pFnClearParameterValues = (UFunction*) UObject::GObjObjects()->Data[ 23784 ];

	UMaterialInstanceTimeVarying_execClearParameterValues_Parms ClearParameterValues_Parms;

	pFnClearParameterValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearParameterValues, &ClearParameterValues_Parms, NULL );

	pFnClearParameterValues->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetFontParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UFont*                   FontValue                      ( CPF_Parm )
// int                            FontPage                       ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage )
{
	static UFunction* pFnSetFontParameterValue = NULL;

	if ( ! pFnSetFontParameterValue )
		pFnSetFontParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 23780 ];

	UMaterialInstanceTimeVarying_execSetFontParameterValue_Parms SetFontParameterValue_Parms;
	memcpy ( &SetFontParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetFontParameterValue_Parms.FontValue = FontValue;
	SetFontParameterValue_Parms.FontPage = FontPage;

	pFnSetFontParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFontParameterValue, &SetFontParameterValue_Parms, NULL );

	pFnSetFontParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetVectorStartTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetVectorStartTime ( struct FName ParameterName, float Value )
{
	static UFunction* pFnSetVectorStartTime = NULL;

	if ( ! pFnSetVectorStartTime )
		pFnSetVectorStartTime = (UFunction*) UObject::GObjObjects()->Data[ 23777 ];

	UMaterialInstanceTimeVarying_execSetVectorStartTime_Parms SetVectorStartTime_Parms;
	memcpy ( &SetVectorStartTime_Parms.ParameterName, &ParameterName, 0x8 );
	SetVectorStartTime_Parms.Value = Value;

	pFnSetVectorStartTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorStartTime, &SetVectorStartTime_Parms, NULL );

	pFnSetVectorStartTime->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetVectorCurveParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FInterpCurveVector      Value                          ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UMaterialInstanceTimeVarying::SetVectorCurveParameterValue ( struct FName ParameterName, struct FInterpCurveVector* Value )
{
	static UFunction* pFnSetVectorCurveParameterValue = NULL;

	if ( ! pFnSetVectorCurveParameterValue )
		pFnSetVectorCurveParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 23774 ];

	UMaterialInstanceTimeVarying_execSetVectorCurveParameterValue_Parms SetVectorCurveParameterValue_Parms;
	memcpy ( &SetVectorCurveParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnSetVectorCurveParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorCurveParameterValue, &SetVectorCurveParameterValue_Parms, NULL );

	pFnSetVectorCurveParameterValue->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &SetVectorCurveParameterValue_Parms.Value, 0x14 );
};

// Function Engine.MaterialInstanceTimeVarying.SetVectorParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            Value                          ( CPF_Const | CPF_Parm | CPF_OutParm )

void UMaterialInstanceTimeVarying::SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor* Value )
{
	static UFunction* pFnSetVectorParameterValue = NULL;

	if ( ! pFnSetVectorParameterValue )
		pFnSetVectorParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 23771 ];

	UMaterialInstanceTimeVarying_execSetVectorParameterValue_Parms SetVectorParameterValue_Parms;
	memcpy ( &SetVectorParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnSetVectorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameterValue, &SetVectorParameterValue_Parms, NULL );

	pFnSetVectorParameterValue->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &SetVectorParameterValue_Parms.Value, 0x10 );
};

// Function Engine.MaterialInstanceTimeVarying.SetTextureParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UTexture*                Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value )
{
	static UFunction* pFnSetTextureParameterValue = NULL;

	if ( ! pFnSetTextureParameterValue )
		pFnSetTextureParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 23768 ];

	UMaterialInstanceTimeVarying_execSetTextureParameterValue_Parms SetTextureParameterValue_Parms;
	memcpy ( &SetTextureParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetTextureParameterValue_Parms.Value = Value;

	pFnSetTextureParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextureParameterValue, &SetTextureParameterValue_Parms, NULL );

	pFnSetTextureParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetDuration
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetDuration ( float Value )
{
	static UFunction* pFnSetDuration = NULL;

	if ( ! pFnSetDuration )
		pFnSetDuration = (UFunction*) UObject::GObjObjects()->Data[ 23766 ];

	UMaterialInstanceTimeVarying_execSetDuration_Parms SetDuration_Parms;
	SetDuration_Parms.Value = Value;

	pFnSetDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDuration, &SetDuration_Parms, NULL );

	pFnSetDuration->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetScalarStartTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetScalarStartTime ( struct FName ParameterName, float Value )
{
	static UFunction* pFnSetScalarStartTime = NULL;

	if ( ! pFnSetScalarStartTime )
		pFnSetScalarStartTime = (UFunction*) UObject::GObjObjects()->Data[ 23763 ];

	UMaterialInstanceTimeVarying_execSetScalarStartTime_Parms SetScalarStartTime_Parms;
	memcpy ( &SetScalarStartTime_Parms.ParameterName, &ParameterName, 0x8 );
	SetScalarStartTime_Parms.Value = Value;

	pFnSetScalarStartTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarStartTime, &SetScalarStartTime_Parms, NULL );

	pFnSetScalarStartTime->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetScalarCurveParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FInterpCurveFloat       Value                          ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UMaterialInstanceTimeVarying::SetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat* Value )
{
	static UFunction* pFnSetScalarCurveParameterValue = NULL;

	if ( ! pFnSetScalarCurveParameterValue )
		pFnSetScalarCurveParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 23760 ];

	UMaterialInstanceTimeVarying_execSetScalarCurveParameterValue_Parms SetScalarCurveParameterValue_Parms;
	memcpy ( &SetScalarCurveParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnSetScalarCurveParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarCurveParameterValue, &SetScalarCurveParameterValue_Parms, NULL );

	pFnSetScalarCurveParameterValue->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &SetScalarCurveParameterValue_Parms.Value, 0x14 );
};

// Function Engine.MaterialInstanceTimeVarying.SetScalarParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetScalarParameterValue ( struct FName ParameterName, float Value )
{
	static UFunction* pFnSetScalarParameterValue = NULL;

	if ( ! pFnSetScalarParameterValue )
		pFnSetScalarParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 23757 ];

	UMaterialInstanceTimeVarying_execSetScalarParameterValue_Parms SetScalarParameterValue_Parms;
	memcpy ( &SetScalarParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetScalarParameterValue_Parms.Value = Value;

	pFnSetScalarParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarParameterValue, &SetScalarParameterValue_Parms, NULL );

	pFnSetScalarParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetParent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      NewParent                      ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetParent ( class UMaterialInterface* NewParent )
{
	static UFunction* pFnSetParent = NULL;

	if ( ! pFnSetParent )
		pFnSetParent = (UFunction*) UObject::GObjObjects()->Data[ 23755 ];

	UMaterialInstanceTimeVarying_execSetParent_Parms SetParent_Parms;
	SetParent_Parms.NewParent = NewParent;

	pFnSetParent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetParent, &SetParent_Parms, NULL );

	pFnSetParent->FunctionFlags |= 0x400;
};

// Function Engine.EmitterCameraLensEffectBase.UpdateLocation
// [0x00420500] ( FUNC_Native )
// Parameters infos:
// float                          CamFOVDeg                      ( CPF_Parm )
// struct FVector                 CamLoc                         ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FRotator                CamRot                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void AEmitterCameraLensEffectBase::UpdateLocation ( float CamFOVDeg, struct FVector* CamLoc, struct FRotator* CamRot )
{
	static UFunction* pFnUpdateLocation = NULL;

	if ( ! pFnUpdateLocation )
		pFnUpdateLocation = (UFunction*) UObject::GObjObjects()->Data[ 19492 ];

	AEmitterCameraLensEffectBase_execUpdateLocation_Parms UpdateLocation_Parms;
	UpdateLocation_Parms.CamFOVDeg = CamFOVDeg;

	pFnUpdateLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateLocation, &UpdateLocation_Parms, NULL );

	pFnUpdateLocation->FunctionFlags |= 0x400;

	if ( CamLoc )
		memcpy ( CamLoc, &UpdateLocation_Parms.CamLoc, 0xC );

	if ( CamRot )
		memcpy ( CamRot, &UpdateLocation_Parms.CamRot, 0xC );
};

// Function Engine.EmitterCameraLensEffectBase.ActivateLensEffect
// [0x00020102] 
// Parameters infos:

void AEmitterCameraLensEffectBase::ActivateLensEffect ( )
{
	static UFunction* pFnActivateLensEffect = NULL;

	if ( ! pFnActivateLensEffect )
		pFnActivateLensEffect = (UFunction*) UObject::GObjObjects()->Data[ 19488 ];

	AEmitterCameraLensEffectBase_execActivateLensEffect_Parms ActivateLensEffect_Parms;

	this->ProcessEvent ( pFnActivateLensEffect, &ActivateLensEffect_Parms, NULL );
};

// Function Engine.EmitterCameraLensEffectBase.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AEmitterCameraLensEffectBase::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 19487 ];

	AEmitterCameraLensEffectBase_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.EmitterCameraLensEffectBase.NotifyRetriggered
// [0x00020000] 
// Parameters infos:

void AEmitterCameraLensEffectBase::NotifyRetriggered ( )
{
	static UFunction* pFnNotifyRetriggered = NULL;

	if ( ! pFnNotifyRetriggered )
		pFnNotifyRetriggered = (UFunction*) UObject::GObjObjects()->Data[ 19486 ];

	AEmitterCameraLensEffectBase_execNotifyRetriggered_Parms NotifyRetriggered_Parms;

	this->ProcessEvent ( pFnNotifyRetriggered, &NotifyRetriggered_Parms, NULL );
};

// Function Engine.EmitterCameraLensEffectBase.RegisterCamera
// [0x00020002] 
// Parameters infos:
// class ACamera*                 C                              ( CPF_Parm )

void AEmitterCameraLensEffectBase::RegisterCamera ( class ACamera* C )
{
	static UFunction* pFnRegisterCamera = NULL;

	if ( ! pFnRegisterCamera )
		pFnRegisterCamera = (UFunction*) UObject::GObjObjects()->Data[ 19484 ];

	AEmitterCameraLensEffectBase_execRegisterCamera_Parms RegisterCamera_Parms;
	RegisterCamera_Parms.C = C;

	this->ProcessEvent ( pFnRegisterCamera, &RegisterCamera_Parms, NULL );
};

// Function Engine.EmitterCameraLensEffectBase.Destroyed
// [0x00020002] 
// Parameters infos:

void AEmitterCameraLensEffectBase::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 19482 ];

	AEmitterCameraLensEffectBase_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.PhysXEmitterSpawnable.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void APhysXEmitterSpawnable::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 28186 ];

	APhysXEmitterSpawnable_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.PhysXEmitterSpawnable.SetTemplate
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// class UParticleSystem*         NewTemplate                    ( CPF_Parm )
// unsigned long                  bDestroyOnFinish               ( CPF_OptionalParm | CPF_Parm )

void APhysXEmitterSpawnable::eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = (UFunction*) UObject::GObjObjects()->Data[ 28182 ];

	APhysXEmitterSpawnable_eventSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.NewTemplate = NewTemplate;
	SetTemplate_Parms.bDestroyOnFinish = bDestroyOnFinish;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );
};

// Function Engine.PhysXEmitterSpawnable.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APhysXEmitterSpawnable::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 28181 ];

	APhysXEmitterSpawnable_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.PhysXEmitterSpawnable.Term
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APhysXEmitterSpawnable::Term ( )
{
	static UFunction* pFnTerm = NULL;

	if ( ! pFnTerm )
		pFnTerm = (UFunction*) UObject::GObjObjects()->Data[ 28180 ];

	APhysXEmitterSpawnable_execTerm_Parms Term_Parms;

	pFnTerm->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTerm, &Term_Parms, NULL );

	pFnTerm->FunctionFlags |= 0x400;
};

// Function Engine.ParticleEventManager.HandleParticleModuleEventSendToGame
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// class UParticleModuleEventSendToGame* InEvent                        ( CPF_Parm )
// struct FVector                 InCollideDirection             ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FVector                 inHitLocation                  ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FVector                 InHitNormal                    ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FName                   InBoneName                     ( CPF_Const | CPF_Parm | CPF_OutParm )

void AParticleEventManager::eventHandleParticleModuleEventSendToGame ( class UParticleModuleEventSendToGame* InEvent, struct FVector* InCollideDirection, struct FVector* inHitLocation, struct FVector* InHitNormal, struct FName* InBoneName )
{
	static UFunction* pFnHandleParticleModuleEventSendToGame = NULL;

	if ( ! pFnHandleParticleModuleEventSendToGame )
		pFnHandleParticleModuleEventSendToGame = (UFunction*) UObject::GObjObjects()->Data[ 26906 ];

	AParticleEventManager_eventHandleParticleModuleEventSendToGame_Parms HandleParticleModuleEventSendToGame_Parms;
	HandleParticleModuleEventSendToGame_Parms.InEvent = InEvent;

	this->ProcessEvent ( pFnHandleParticleModuleEventSendToGame, &HandleParticleModuleEventSendToGame_Parms, NULL );

	if ( InCollideDirection )
		memcpy ( InCollideDirection, &HandleParticleModuleEventSendToGame_Parms.InCollideDirection, 0xC );

	if ( inHitLocation )
		memcpy ( inHitLocation, &HandleParticleModuleEventSendToGame_Parms.inHitLocation, 0xC );

	if ( InHitNormal )
		memcpy ( InHitNormal, &HandleParticleModuleEventSendToGame_Parms.InHitNormal, 0xC );

	if ( InBoneName )
		memcpy ( InBoneName, &HandleParticleModuleEventSendToGame_Parms.InBoneName, 0x8 );
};

// Function Engine.ParticleSystemComponent.SetStopSpawning
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            InEmitterIndex                 ( CPF_Parm )
// unsigned long                  bInStopSpawning                ( CPF_Parm )

void UParticleSystemComponent::SetStopSpawning ( int InEmitterIndex, unsigned long bInStopSpawning )
{
	static UFunction* pFnSetStopSpawning = NULL;

	if ( ! pFnSetStopSpawning )
		pFnSetStopSpawning = (UFunction*) UObject::GObjObjects()->Data[ 19382 ];

	UParticleSystemComponent_execSetStopSpawning_Parms SetStopSpawning_Parms;
	SetStopSpawning_Parms.InEmitterIndex = InEmitterIndex;
	SetStopSpawning_Parms.bInStopSpawning = bInStopSpawning;

	pFnSetStopSpawning->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStopSpawning, &SetStopSpawning_Parms, NULL );

	pFnSetStopSpawning->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.ResetToDefaults
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UParticleSystemComponent::ResetToDefaults ( )
{
	static UFunction* pFnResetToDefaults = NULL;

	if ( ! pFnResetToDefaults )
		pFnResetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 19381 ];

	UParticleSystemComponent_execResetToDefaults_Parms ResetToDefaults_Parms;

	pFnResetToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetToDefaults, &ResetToDefaults_Parms, NULL );

	pFnResetToDefaults->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetActive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNowActive                     ( CPF_Parm )

void UParticleSystemComponent::SetActive ( unsigned long bNowActive )
{
	static UFunction* pFnSetActive = NULL;

	if ( ! pFnSetActive )
		pFnSetActive = (UFunction*) UObject::GObjObjects()->Data[ 19011 ];

	UParticleSystemComponent_execSetActive_Parms SetActive_Parms;
	SetActive_Parms.bNowActive = bNowActive;

	pFnSetActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActive, &SetActive_Parms, NULL );

	pFnSetActive->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SuppressSpawning
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UParticleSystemComponent::SuppressSpawning ( )
{
	static UFunction* pFnSuppressSpawning = NULL;

	if ( ! pFnSuppressSpawning )
		pFnSuppressSpawning = (UFunction*) UObject::GObjObjects()->Data[ 19379 ];

	UParticleSystemComponent_execSuppressSpawning_Parms SuppressSpawning_Parms;

	pFnSuppressSpawning->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSuppressSpawning, &SuppressSpawning_Parms, NULL );

	pFnSuppressSpawning->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.ClearAllParameters
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UParticleSystemComponent::ClearAllParameters ( )
{
	static UFunction* pFnClearAllParameters = NULL;

	if ( ! pFnClearAllParameters )
		pFnClearAllParameters = (UFunction*) UObject::GObjObjects()->Data[ 19378 ];

	UParticleSystemComponent_execClearAllParameters_Parms ClearAllParameters_Parms;

	pFnClearAllParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearAllParameters, &ClearAllParameters_Parms, NULL );

	pFnClearAllParameters->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.ClearParameter
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// unsigned char                  ParameterType                  ( CPF_OptionalParm | CPF_Parm )

void UParticleSystemComponent::ClearParameter ( struct FName ParameterName, unsigned char ParameterType )
{
	static UFunction* pFnClearParameter = NULL;

	if ( ! pFnClearParameter )
		pFnClearParameter = (UFunction*) UObject::GObjObjects()->Data[ 19375 ];

	UParticleSystemComponent_execClearParameter_Parms ClearParameter_Parms;
	memcpy ( &ClearParameter_Parms.ParameterName, &ParameterName, 0x8 );
	ClearParameter_Parms.ParameterType = ParameterType;

	pFnClearParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearParameter, &ClearParameter_Parms, NULL );

	pFnClearParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.GetMaterialParameter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Const | CPF_Parm )
// class UMaterialInterface*      OutMaterial                    ( CPF_Parm | CPF_OutParm )

bool UParticleSystemComponent::GetMaterialParameter ( struct FName InName, class UMaterialInterface** OutMaterial )
{
	static UFunction* pFnGetMaterialParameter = NULL;

	if ( ! pFnGetMaterialParameter )
		pFnGetMaterialParameter = (UFunction*) UObject::GObjObjects()->Data[ 19371 ];

	UParticleSystemComponent_execGetMaterialParameter_Parms GetMaterialParameter_Parms;
	memcpy ( &GetMaterialParameter_Parms.InName, &InName, 0x8 );

	pFnGetMaterialParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaterialParameter, &GetMaterialParameter_Parms, NULL );

	pFnGetMaterialParameter->FunctionFlags |= 0x400;

	if ( OutMaterial )
		*OutMaterial = GetMaterialParameter_Parms.OutMaterial;

	return GetMaterialParameter_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetActorParameter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Const | CPF_Parm )
// class AActor*                  OutActor                       ( CPF_Parm | CPF_OutParm )

bool UParticleSystemComponent::GetActorParameter ( struct FName InName, class AActor** OutActor )
{
	static UFunction* pFnGetActorParameter = NULL;

	if ( ! pFnGetActorParameter )
		pFnGetActorParameter = (UFunction*) UObject::GObjObjects()->Data[ 19367 ];

	UParticleSystemComponent_execGetActorParameter_Parms GetActorParameter_Parms;
	memcpy ( &GetActorParameter_Parms.InName, &InName, 0x8 );

	pFnGetActorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActorParameter, &GetActorParameter_Parms, NULL );

	pFnGetActorParameter->FunctionFlags |= 0x400;

	if ( OutActor )
		*OutActor = GetActorParameter_Parms.OutActor;

	return GetActorParameter_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetColorParameter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Const | CPF_Parm )
// struct FColor                  OutColor                       ( CPF_Parm | CPF_OutParm )

bool UParticleSystemComponent::GetColorParameter ( struct FName InName, struct FColor* OutColor )
{
	static UFunction* pFnGetColorParameter = NULL;

	if ( ! pFnGetColorParameter )
		pFnGetColorParameter = (UFunction*) UObject::GObjObjects()->Data[ 19363 ];

	UParticleSystemComponent_execGetColorParameter_Parms GetColorParameter_Parms;
	memcpy ( &GetColorParameter_Parms.InName, &InName, 0x8 );

	pFnGetColorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetColorParameter, &GetColorParameter_Parms, NULL );

	pFnGetColorParameter->FunctionFlags |= 0x400;

	if ( OutColor )
		memcpy ( OutColor, &GetColorParameter_Parms.OutColor, 0x4 );

	return GetColorParameter_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetVectorParameter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Const | CPF_Parm )
// struct FVector                 OutVector                      ( CPF_Parm | CPF_OutParm )

bool UParticleSystemComponent::GetVectorParameter ( struct FName InName, struct FVector* OutVector )
{
	static UFunction* pFnGetVectorParameter = NULL;

	if ( ! pFnGetVectorParameter )
		pFnGetVectorParameter = (UFunction*) UObject::GObjObjects()->Data[ 19359 ];

	UParticleSystemComponent_execGetVectorParameter_Parms GetVectorParameter_Parms;
	memcpy ( &GetVectorParameter_Parms.InName, &InName, 0x8 );

	pFnGetVectorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVectorParameter, &GetVectorParameter_Parms, NULL );

	pFnGetVectorParameter->FunctionFlags |= 0x400;

	if ( OutVector )
		memcpy ( OutVector, &GetVectorParameter_Parms.OutVector, 0xC );

	return GetVectorParameter_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetFloatParameter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Const | CPF_Parm )
// float                          OutFloat                       ( CPF_Parm | CPF_OutParm )

bool UParticleSystemComponent::GetFloatParameter ( struct FName InName, float* OutFloat )
{
	static UFunction* pFnGetFloatParameter = NULL;

	if ( ! pFnGetFloatParameter )
		pFnGetFloatParameter = (UFunction*) UObject::GObjObjects()->Data[ 19355 ];

	UParticleSystemComponent_execGetFloatParameter_Parms GetFloatParameter_Parms;
	memcpy ( &GetFloatParameter_Parms.InName, &InName, 0x8 );

	pFnGetFloatParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFloatParameter, &GetFloatParameter_Parms, NULL );

	pFnGetFloatParameter->FunctionFlags |= 0x400;

	if ( OutFloat )
		*OutFloat = GetFloatParameter_Parms.OutFloat;

	return GetFloatParameter_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.SetMaterialParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UMaterialInterface*      Param                          ( CPF_Parm )

void UParticleSystemComponent::SetMaterialParameter ( struct FName ParameterName, class UMaterialInterface* Param )
{
	static UFunction* pFnSetMaterialParameter = NULL;

	if ( ! pFnSetMaterialParameter )
		pFnSetMaterialParameter = (UFunction*) UObject::GObjObjects()->Data[ 19352 ];

	UParticleSystemComponent_execSetMaterialParameter_Parms SetMaterialParameter_Parms;
	memcpy ( &SetMaterialParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetMaterialParameter_Parms.Param = Param;

	pFnSetMaterialParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterialParameter, &SetMaterialParameter_Parms, NULL );

	pFnSetMaterialParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetActorParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class AActor*                  Param                          ( CPF_Parm )

void UParticleSystemComponent::SetActorParameter ( struct FName ParameterName, class AActor* Param )
{
	static UFunction* pFnSetActorParameter = NULL;

	if ( ! pFnSetActorParameter )
		pFnSetActorParameter = (UFunction*) UObject::GObjObjects()->Data[ 19349 ];

	UParticleSystemComponent_execSetActorParameter_Parms SetActorParameter_Parms;
	memcpy ( &SetActorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetActorParameter_Parms.Param = Param;

	pFnSetActorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActorParameter, &SetActorParameter_Parms, NULL );

	pFnSetActorParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetColorParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FColor                  Param                          ( CPF_Parm )

void UParticleSystemComponent::SetColorParameter ( struct FName ParameterName, struct FColor Param )
{
	static UFunction* pFnSetColorParameter = NULL;

	if ( ! pFnSetColorParameter )
		pFnSetColorParameter = (UFunction*) UObject::GObjObjects()->Data[ 19346 ];

	UParticleSystemComponent_execSetColorParameter_Parms SetColorParameter_Parms;
	memcpy ( &SetColorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetColorParameter_Parms.Param, &Param, 0x4 );

	pFnSetColorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetColorParameter, &SetColorParameter_Parms, NULL );

	pFnSetColorParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetVectorParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FVector                 Param                          ( CPF_Parm )

void UParticleSystemComponent::SetVectorParameter ( struct FName ParameterName, struct FVector Param )
{
	static UFunction* pFnSetVectorParameter = NULL;

	if ( ! pFnSetVectorParameter )
		pFnSetVectorParameter = (UFunction*) UObject::GObjObjects()->Data[ 19343 ];

	UParticleSystemComponent_execSetVectorParameter_Parms SetVectorParameter_Parms;
	memcpy ( &SetVectorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetVectorParameter_Parms.Param, &Param, 0xC );

	pFnSetVectorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameter, &SetVectorParameter_Parms, NULL );

	pFnSetVectorParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetFloatParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Param                          ( CPF_Parm )

void UParticleSystemComponent::SetFloatParameter ( struct FName ParameterName, float Param )
{
	static UFunction* pFnSetFloatParameter = NULL;

	if ( ! pFnSetFloatParameter )
		pFnSetFloatParameter = (UFunction*) UObject::GObjObjects()->Data[ 19340 ];

	UParticleSystemComponent_execSetFloatParameter_Parms SetFloatParameter_Parms;
	memcpy ( &SetFloatParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetFloatParameter_Parms.Param = Param;

	pFnSetFloatParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatParameter, &SetFloatParameter_Parms, NULL );

	pFnSetFloatParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.GetEditorLODLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UParticleSystemComponent::GetEditorLODLevel ( )
{
	static UFunction* pFnGetEditorLODLevel = NULL;

	if ( ! pFnGetEditorLODLevel )
		pFnGetEditorLODLevel = (UFunction*) UObject::GObjObjects()->Data[ 19338 ];

	UParticleSystemComponent_execGetEditorLODLevel_Parms GetEditorLODLevel_Parms;

	pFnGetEditorLODLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEditorLODLevel, &GetEditorLODLevel_Parms, NULL );

	pFnGetEditorLODLevel->FunctionFlags |= 0x400;

	return GetEditorLODLevel_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetLODLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UParticleSystemComponent::GetLODLevel ( )
{
	static UFunction* pFnGetLODLevel = NULL;

	if ( ! pFnGetLODLevel )
		pFnGetLODLevel = (UFunction*) UObject::GObjObjects()->Data[ 19336 ];

	UParticleSystemComponent_execGetLODLevel_Parms GetLODLevel_Parms;

	pFnGetLODLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLODLevel, &GetLODLevel_Parms, NULL );

	pFnGetLODLevel->FunctionFlags |= 0x400;

	return GetLODLevel_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.SetEditorLODLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            InLODLevel                     ( CPF_Parm )

void UParticleSystemComponent::SetEditorLODLevel ( int InLODLevel )
{
	static UFunction* pFnSetEditorLODLevel = NULL;

	if ( ! pFnSetEditorLODLevel )
		pFnSetEditorLODLevel = (UFunction*) UObject::GObjObjects()->Data[ 19334 ];

	UParticleSystemComponent_execSetEditorLODLevel_Parms SetEditorLODLevel_Parms;
	SetEditorLODLevel_Parms.InLODLevel = InLODLevel;

	pFnSetEditorLODLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEditorLODLevel, &SetEditorLODLevel_Parms, NULL );

	pFnSetEditorLODLevel->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetLODLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            InLODLevel                     ( CPF_Parm )

void UParticleSystemComponent::SetLODLevel ( int InLODLevel )
{
	static UFunction* pFnSetLODLevel = NULL;

	if ( ! pFnSetLODLevel )
		pFnSetLODLevel = (UFunction*) UObject::GObjObjects()->Data[ 19332 ];

	UParticleSystemComponent_execSetLODLevel_Parms SetLODLevel_Parms;
	SetLODLevel_Parms.InLODLevel = InLODLevel;

	pFnSetLODLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLODLevel, &SetLODLevel_Parms, NULL );

	pFnSetLODLevel->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.DetermineLODLevelForLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 EffectLocation                 ( CPF_Parm )

int UParticleSystemComponent::DetermineLODLevelForLocation ( struct FVector EffectLocation )
{
	static UFunction* pFnDetermineLODLevelForLocation = NULL;

	if ( ! pFnDetermineLODLevelForLocation )
		pFnDetermineLODLevelForLocation = (UFunction*) UObject::GObjObjects()->Data[ 19329 ];

	UParticleSystemComponent_execDetermineLODLevelForLocation_Parms DetermineLODLevelForLocation_Parms;
	memcpy ( &DetermineLODLevelForLocation_Parms.EffectLocation, &EffectLocation, 0xC );

	pFnDetermineLODLevelForLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetermineLODLevelForLocation, &DetermineLODLevelForLocation_Parms, NULL );

	pFnDetermineLODLevelForLocation->FunctionFlags |= 0x400;

	return DetermineLODLevelForLocation_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.SetBeamTargetStrength
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// float                          NewTargetStrength              ( CPF_Parm )
// int                            TargetIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamTargetStrength ( int EmitterIndex, float NewTargetStrength, int TargetIndex )
{
	static UFunction* pFnSetBeamTargetStrength = NULL;

	if ( ! pFnSetBeamTargetStrength )
		pFnSetBeamTargetStrength = (UFunction*) UObject::GObjObjects()->Data[ 19325 ];

	UParticleSystemComponent_execSetBeamTargetStrength_Parms SetBeamTargetStrength_Parms;
	SetBeamTargetStrength_Parms.EmitterIndex = EmitterIndex;
	SetBeamTargetStrength_Parms.NewTargetStrength = NewTargetStrength;
	SetBeamTargetStrength_Parms.TargetIndex = TargetIndex;

	pFnSetBeamTargetStrength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamTargetStrength, &SetBeamTargetStrength_Parms, NULL );

	pFnSetBeamTargetStrength->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamTargetTangent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// struct FVector                 NewTangentPoint                ( CPF_Parm )
// int                            TargetIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamTargetTangent ( int EmitterIndex, struct FVector NewTangentPoint, int TargetIndex )
{
	static UFunction* pFnSetBeamTargetTangent = NULL;

	if ( ! pFnSetBeamTargetTangent )
		pFnSetBeamTargetTangent = (UFunction*) UObject::GObjObjects()->Data[ 19321 ];

	UParticleSystemComponent_execSetBeamTargetTangent_Parms SetBeamTargetTangent_Parms;
	SetBeamTargetTangent_Parms.EmitterIndex = EmitterIndex;
	memcpy ( &SetBeamTargetTangent_Parms.NewTangentPoint, &NewTangentPoint, 0xC );
	SetBeamTargetTangent_Parms.TargetIndex = TargetIndex;

	pFnSetBeamTargetTangent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamTargetTangent, &SetBeamTargetTangent_Parms, NULL );

	pFnSetBeamTargetTangent->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamTargetPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// struct FVector                 NewTargetPoint                 ( CPF_Parm )
// int                            TargetIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamTargetPoint ( int EmitterIndex, struct FVector NewTargetPoint, int TargetIndex )
{
	static UFunction* pFnSetBeamTargetPoint = NULL;

	if ( ! pFnSetBeamTargetPoint )
		pFnSetBeamTargetPoint = (UFunction*) UObject::GObjObjects()->Data[ 19317 ];

	UParticleSystemComponent_execSetBeamTargetPoint_Parms SetBeamTargetPoint_Parms;
	SetBeamTargetPoint_Parms.EmitterIndex = EmitterIndex;
	memcpy ( &SetBeamTargetPoint_Parms.NewTargetPoint, &NewTargetPoint, 0xC );
	SetBeamTargetPoint_Parms.TargetIndex = TargetIndex;

	pFnSetBeamTargetPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamTargetPoint, &SetBeamTargetPoint_Parms, NULL );

	pFnSetBeamTargetPoint->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamSourceStrength
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// float                          NewSourceStrength              ( CPF_Parm )
// int                            SourceIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamSourceStrength ( int EmitterIndex, float NewSourceStrength, int SourceIndex )
{
	static UFunction* pFnSetBeamSourceStrength = NULL;

	if ( ! pFnSetBeamSourceStrength )
		pFnSetBeamSourceStrength = (UFunction*) UObject::GObjObjects()->Data[ 19313 ];

	UParticleSystemComponent_execSetBeamSourceStrength_Parms SetBeamSourceStrength_Parms;
	SetBeamSourceStrength_Parms.EmitterIndex = EmitterIndex;
	SetBeamSourceStrength_Parms.NewSourceStrength = NewSourceStrength;
	SetBeamSourceStrength_Parms.SourceIndex = SourceIndex;

	pFnSetBeamSourceStrength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamSourceStrength, &SetBeamSourceStrength_Parms, NULL );

	pFnSetBeamSourceStrength->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamSourceTangent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// struct FVector                 NewTangentPoint                ( CPF_Parm )
// int                            SourceIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamSourceTangent ( int EmitterIndex, struct FVector NewTangentPoint, int SourceIndex )
{
	static UFunction* pFnSetBeamSourceTangent = NULL;

	if ( ! pFnSetBeamSourceTangent )
		pFnSetBeamSourceTangent = (UFunction*) UObject::GObjObjects()->Data[ 19309 ];

	UParticleSystemComponent_execSetBeamSourceTangent_Parms SetBeamSourceTangent_Parms;
	SetBeamSourceTangent_Parms.EmitterIndex = EmitterIndex;
	memcpy ( &SetBeamSourceTangent_Parms.NewTangentPoint, &NewTangentPoint, 0xC );
	SetBeamSourceTangent_Parms.SourceIndex = SourceIndex;

	pFnSetBeamSourceTangent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamSourceTangent, &SetBeamSourceTangent_Parms, NULL );

	pFnSetBeamSourceTangent->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamSourcePoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// struct FVector                 NewSourcePoint                 ( CPF_Parm )
// int                            SourceIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamSourcePoint ( int EmitterIndex, struct FVector NewSourcePoint, int SourceIndex )
{
	static UFunction* pFnSetBeamSourcePoint = NULL;

	if ( ! pFnSetBeamSourcePoint )
		pFnSetBeamSourcePoint = (UFunction*) UObject::GObjObjects()->Data[ 19305 ];

	UParticleSystemComponent_execSetBeamSourcePoint_Parms SetBeamSourcePoint_Parms;
	SetBeamSourcePoint_Parms.EmitterIndex = EmitterIndex;
	memcpy ( &SetBeamSourcePoint_Parms.NewSourcePoint, &NewSourcePoint, 0xC );
	SetBeamSourcePoint_Parms.SourceIndex = SourceIndex;

	pFnSetBeamSourcePoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamSourcePoint, &SetBeamSourcePoint_Parms, NULL );

	pFnSetBeamSourcePoint->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamDistance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// float                          Distance                       ( CPF_Parm )

void UParticleSystemComponent::SetBeamDistance ( int EmitterIndex, float Distance )
{
	static UFunction* pFnSetBeamDistance = NULL;

	if ( ! pFnSetBeamDistance )
		pFnSetBeamDistance = (UFunction*) UObject::GObjObjects()->Data[ 19302 ];

	UParticleSystemComponent_execSetBeamDistance_Parms SetBeamDistance_Parms;
	SetBeamDistance_Parms.EmitterIndex = EmitterIndex;
	SetBeamDistance_Parms.Distance = Distance;

	pFnSetBeamDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamDistance, &SetBeamDistance_Parms, NULL );

	pFnSetBeamDistance->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamEndPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// struct FVector                 NewEndPoint                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamEndPoint ( int EmitterIndex, struct FVector NewEndPoint )
{
	static UFunction* pFnSetBeamEndPoint = NULL;

	if ( ! pFnSetBeamEndPoint )
		pFnSetBeamEndPoint = (UFunction*) UObject::GObjObjects()->Data[ 19299 ];

	UParticleSystemComponent_execSetBeamEndPoint_Parms SetBeamEndPoint_Parms;
	SetBeamEndPoint_Parms.EmitterIndex = EmitterIndex;
	memcpy ( &SetBeamEndPoint_Parms.NewEndPoint, &NewEndPoint, 0xC );

	pFnSetBeamEndPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamEndPoint, &SetBeamEndPoint_Parms, NULL );

	pFnSetBeamEndPoint->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamTessellationFactor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// float                          NewFactor                      ( CPF_Parm )

void UParticleSystemComponent::SetBeamTessellationFactor ( int EmitterIndex, float NewFactor )
{
	static UFunction* pFnSetBeamTessellationFactor = NULL;

	if ( ! pFnSetBeamTessellationFactor )
		pFnSetBeamTessellationFactor = (UFunction*) UObject::GObjObjects()->Data[ 19296 ];

	UParticleSystemComponent_execSetBeamTessellationFactor_Parms SetBeamTessellationFactor_Parms;
	SetBeamTessellationFactor_Parms.EmitterIndex = EmitterIndex;
	SetBeamTessellationFactor_Parms.NewFactor = NewFactor;

	pFnSetBeamTessellationFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamTessellationFactor, &SetBeamTessellationFactor_Parms, NULL );

	pFnSetBeamTessellationFactor->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// int                            NewMethod                      ( CPF_Parm )

void UParticleSystemComponent::SetBeamType ( int EmitterIndex, int NewMethod )
{
	static UFunction* pFnSetBeamType = NULL;

	if ( ! pFnSetBeamType )
		pFnSetBeamType = (UFunction*) UObject::GObjObjects()->Data[ 19293 ];

	UParticleSystemComponent_execSetBeamType_Parms SetBeamType_Parms;
	SetBeamType_Parms.EmitterIndex = EmitterIndex;
	SetBeamType_Parms.NewMethod = NewMethod;

	pFnSetBeamType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamType, &SetBeamType_Parms, NULL );

	pFnSetBeamType->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.RewindEmitterInstances
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UParticleSystemComponent::RewindEmitterInstances ( )
{
	static UFunction* pFnRewindEmitterInstances = NULL;

	if ( ! pFnRewindEmitterInstances )
		pFnRewindEmitterInstances = (UFunction*) UObject::GObjObjects()->Data[ 19292 ];

	UParticleSystemComponent_execRewindEmitterInstances_Parms RewindEmitterInstances_Parms;

	pFnRewindEmitterInstances->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRewindEmitterInstances, &RewindEmitterInstances_Parms, NULL );

	pFnRewindEmitterInstances->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.RewindEmitterInstance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )

void UParticleSystemComponent::RewindEmitterInstance ( int EmitterIndex )
{
	static UFunction* pFnRewindEmitterInstance = NULL;

	if ( ! pFnRewindEmitterInstance )
		pFnRewindEmitterInstance = (UFunction*) UObject::GObjObjects()->Data[ 19290 ];

	UParticleSystemComponent_execRewindEmitterInstance_Parms RewindEmitterInstance_Parms;
	RewindEmitterInstance_Parms.EmitterIndex = EmitterIndex;

	pFnRewindEmitterInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRewindEmitterInstance, &RewindEmitterInstance_Parms, NULL );

	pFnRewindEmitterInstance->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetKillOnCompleted
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// unsigned long                  bKill                          ( CPF_Parm )

void UParticleSystemComponent::SetKillOnCompleted ( int EmitterIndex, unsigned long bKill )
{
	static UFunction* pFnSetKillOnCompleted = NULL;

	if ( ! pFnSetKillOnCompleted )
		pFnSetKillOnCompleted = (UFunction*) UObject::GObjObjects()->Data[ 19287 ];

	UParticleSystemComponent_execSetKillOnCompleted_Parms SetKillOnCompleted_Parms;
	SetKillOnCompleted_Parms.EmitterIndex = EmitterIndex;
	SetKillOnCompleted_Parms.bKill = bKill;

	pFnSetKillOnCompleted->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetKillOnCompleted, &SetKillOnCompleted_Parms, NULL );

	pFnSetKillOnCompleted->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetKillOnDeactivate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// unsigned long                  bKill                          ( CPF_Parm )

void UParticleSystemComponent::SetKillOnDeactivate ( int EmitterIndex, unsigned long bKill )
{
	static UFunction* pFnSetKillOnDeactivate = NULL;

	if ( ! pFnSetKillOnDeactivate )
		pFnSetKillOnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 19284 ];

	UParticleSystemComponent_execSetKillOnDeactivate_Parms SetKillOnDeactivate_Parms;
	SetKillOnDeactivate_Parms.EmitterIndex = EmitterIndex;
	SetKillOnDeactivate_Parms.bKill = bKill;

	pFnSetKillOnDeactivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetKillOnDeactivate, &SetKillOnDeactivate_Parms, NULL );

	pFnSetKillOnDeactivate->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.GetSkipUpdateDynamicDataDuringTick
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UParticleSystemComponent::GetSkipUpdateDynamicDataDuringTick ( )
{
	static UFunction* pFnGetSkipUpdateDynamicDataDuringTick = NULL;

	if ( ! pFnGetSkipUpdateDynamicDataDuringTick )
		pFnGetSkipUpdateDynamicDataDuringTick = (UFunction*) UObject::GObjObjects()->Data[ 19282 ];

	UParticleSystemComponent_execGetSkipUpdateDynamicDataDuringTick_Parms GetSkipUpdateDynamicDataDuringTick_Parms;

	pFnGetSkipUpdateDynamicDataDuringTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSkipUpdateDynamicDataDuringTick, &GetSkipUpdateDynamicDataDuringTick_Parms, NULL );

	pFnGetSkipUpdateDynamicDataDuringTick->FunctionFlags |= 0x400;

	return GetSkipUpdateDynamicDataDuringTick_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.SetSkipUpdateDynamicDataDuringTick
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInSkipUpdateDynamicDataDuringTick ( CPF_Parm )

void UParticleSystemComponent::SetSkipUpdateDynamicDataDuringTick ( unsigned long bInSkipUpdateDynamicDataDuringTick )
{
	static UFunction* pFnSetSkipUpdateDynamicDataDuringTick = NULL;

	if ( ! pFnSetSkipUpdateDynamicDataDuringTick )
		pFnSetSkipUpdateDynamicDataDuringTick = (UFunction*) UObject::GObjObjects()->Data[ 19280 ];

	UParticleSystemComponent_execSetSkipUpdateDynamicDataDuringTick_Parms SetSkipUpdateDynamicDataDuringTick_Parms;
	SetSkipUpdateDynamicDataDuringTick_Parms.bInSkipUpdateDynamicDataDuringTick = bInSkipUpdateDynamicDataDuringTick;

	pFnSetSkipUpdateDynamicDataDuringTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSkipUpdateDynamicDataDuringTick, &SetSkipUpdateDynamicDataDuringTick_Parms, NULL );

	pFnSetSkipUpdateDynamicDataDuringTick->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.KillParticlesForced
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UParticleSystemComponent::KillParticlesForced ( )
{
	static UFunction* pFnKillParticlesForced = NULL;

	if ( ! pFnKillParticlesForced )
		pFnKillParticlesForced = (UFunction*) UObject::GObjObjects()->Data[ 19279 ];

	UParticleSystemComponent_execKillParticlesForced_Parms KillParticlesForced_Parms;

	pFnKillParticlesForced->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnKillParticlesForced, &KillParticlesForced_Parms, NULL );

	pFnKillParticlesForced->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.DeactivateSystem
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UParticleSystemComponent::DeactivateSystem ( )
{
	static UFunction* pFnDeactivateSystem = NULL;

	if ( ! pFnDeactivateSystem )
		pFnDeactivateSystem = (UFunction*) UObject::GObjObjects()->Data[ 19278 ];

	UParticleSystemComponent_execDeactivateSystem_Parms DeactivateSystem_Parms;

	pFnDeactivateSystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeactivateSystem, &DeactivateSystem_Parms, NULL );

	pFnDeactivateSystem->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.ActivateSystem
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bFlagAsJustAttached            ( CPF_OptionalParm | CPF_Parm )

void UParticleSystemComponent::ActivateSystem ( unsigned long bFlagAsJustAttached )
{
	static UFunction* pFnActivateSystem = NULL;

	if ( ! pFnActivateSystem )
		pFnActivateSystem = (UFunction*) UObject::GObjObjects()->Data[ 9722 ];

	UParticleSystemComponent_execActivateSystem_Parms ActivateSystem_Parms;
	ActivateSystem_Parms.bFlagAsJustAttached = bFlagAsJustAttached;

	pFnActivateSystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateSystem, &ActivateSystem_Parms, NULL );

	pFnActivateSystem->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetTemplate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystem*         NewTemplate                    ( CPF_Parm )

void UParticleSystemComponent::SetTemplate ( class UParticleSystem* NewTemplate )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = (UFunction*) UObject::GObjObjects()->Data[ 9719 ];

	UParticleSystemComponent_execSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.NewTemplate = NewTemplate;

	pFnSetTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );

	pFnSetTemplate->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.OnSystemFinished
// [0x00120000] 
// Parameters infos:
// class UParticleSystemComponent* PSystem                        ( CPF_Parm | CPF_EditInline )

void UParticleSystemComponent::OnSystemFinished ( class UParticleSystemComponent* PSystem )
{
	static UFunction* pFnOnSystemFinished = NULL;

	if ( ! pFnOnSystemFinished )
		pFnOnSystemFinished = (UFunction*) UObject::GObjObjects()->Data[ 19274 ];

	UParticleSystemComponent_execOnSystemFinished_Parms OnSystemFinished_Parms;
	OnSystemFinished_Parms.PSystem = PSystem;

	this->ProcessEvent ( pFnOnSystemFinished, &OnSystemFinished_Parms, NULL );
};

// Function Engine.ParticleModuleEventSendToGame.DoEvent
// [0x00420000] 
// Parameters infos:
// struct FVector                 InCollideDirection             ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FVector                 inHitLocation                  ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FVector                 InHitNormal                    ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FName                   InBoneName                     ( CPF_Const | CPF_Parm | CPF_OutParm )

void UParticleModuleEventSendToGame::DoEvent ( struct FVector* InCollideDirection, struct FVector* inHitLocation, struct FVector* InHitNormal, struct FName* InBoneName )
{
	static UFunction* pFnDoEvent = NULL;

	if ( ! pFnDoEvent )
		pFnDoEvent = (UFunction*) UObject::GObjObjects()->Data[ 27133 ];

	UParticleModuleEventSendToGame_execDoEvent_Parms DoEvent_Parms;

	this->ProcessEvent ( pFnDoEvent, &DoEvent_Parms, NULL );

	if ( InCollideDirection )
		memcpy ( InCollideDirection, &DoEvent_Parms.InCollideDirection, 0xC );

	if ( inHitLocation )
		memcpy ( inHitLocation, &DoEvent_Parms.inHitLocation, 0xC );

	if ( InHitNormal )
		memcpy ( InHitNormal, &DoEvent_Parms.InHitNormal, 0xC );

	if ( InBoneName )
		memcpy ( InBoneName, &DoEvent_Parms.InBoneName, 0x8 );
};

// Function Engine.ParticleSystem.SetLODDistance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LODLevelIndex                  ( CPF_Parm )
// float                          InDistance                     ( CPF_Parm )

bool UParticleSystem::SetLODDistance ( int LODLevelIndex, float InDistance )
{
	static UFunction* pFnSetLODDistance = NULL;

	if ( ! pFnSetLODDistance )
		pFnSetLODDistance = (UFunction*) UObject::GObjObjects()->Data[ 19182 ];

	UParticleSystem_execSetLODDistance_Parms SetLODDistance_Parms;
	SetLODDistance_Parms.LODLevelIndex = LODLevelIndex;
	SetLODDistance_Parms.InDistance = InDistance;

	pFnSetLODDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLODDistance, &SetLODDistance_Parms, NULL );

	pFnSetLODDistance->FunctionFlags |= 0x400;

	return SetLODDistance_Parms.ReturnValue;
};

// Function Engine.ParticleSystem.SetCurrentLODMethod
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  InMethod                       ( CPF_Parm )

void UParticleSystem::SetCurrentLODMethod ( unsigned char InMethod )
{
	static UFunction* pFnSetCurrentLODMethod = NULL;

	if ( ! pFnSetCurrentLODMethod )
		pFnSetCurrentLODMethod = (UFunction*) UObject::GObjObjects()->Data[ 19180 ];

	UParticleSystem_execSetCurrentLODMethod_Parms SetCurrentLODMethod_Parms;
	SetCurrentLODMethod_Parms.InMethod = InMethod;

	pFnSetCurrentLODMethod->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCurrentLODMethod, &SetCurrentLODMethod_Parms, NULL );

	pFnSetCurrentLODMethod->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystem.GetLODDistance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LODLevelIndex                  ( CPF_Parm )

float UParticleSystem::GetLODDistance ( int LODLevelIndex )
{
	static UFunction* pFnGetLODDistance = NULL;

	if ( ! pFnGetLODDistance )
		pFnGetLODDistance = (UFunction*) UObject::GObjObjects()->Data[ 19177 ];

	UParticleSystem_execGetLODDistance_Parms GetLODDistance_Parms;
	GetLODDistance_Parms.LODLevelIndex = LODLevelIndex;

	pFnGetLODDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLODDistance, &GetLODDistance_Parms, NULL );

	pFnGetLODDistance->FunctionFlags |= 0x400;

	return GetLODDistance_Parms.ReturnValue;
};

// Function Engine.ParticleSystem.GetLODLevelCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UParticleSystem::GetLODLevelCount ( )
{
	static UFunction* pFnGetLODLevelCount = NULL;

	if ( ! pFnGetLODLevelCount )
		pFnGetLODLevelCount = (UFunction*) UObject::GObjObjects()->Data[ 19175 ];

	UParticleSystem_execGetLODLevelCount_Parms GetLODLevelCount_Parms;

	pFnGetLODLevelCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLODLevelCount, &GetLODLevelCount_Parms, NULL );

	pFnGetLODLevelCount->FunctionFlags |= 0x400;

	return GetLODLevelCount_Parms.ReturnValue;
};

// Function Engine.ParticleSystem.GetCurrentLODMethod
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UParticleSystem::GetCurrentLODMethod ( )
{
	static UFunction* pFnGetCurrentLODMethod = NULL;

	if ( ! pFnGetCurrentLODMethod )
		pFnGetCurrentLODMethod = (UFunction*) UObject::GObjObjects()->Data[ 19173 ];

	UParticleSystem_execGetCurrentLODMethod_Parms GetCurrentLODMethod_Parms;

	pFnGetCurrentLODMethod->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentLODMethod, &GetCurrentLODMethod_Parms, NULL );

	pFnGetCurrentLODMethod->FunctionFlags |= 0x400;

	return GetCurrentLODMethod_Parms.ReturnValue;
};

// Function Engine.KActor.Reset
// [0x00020102] 
// Parameters infos:

void AKActor::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 23179 ];

	AKActor_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.KActor.OnTeleport
// [0x00020102] 
// Parameters infos:
// class USeqAct_Teleport*        inAction                       ( CPF_Parm )

void AKActor::OnTeleport ( class USeqAct_Teleport* inAction )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 23173 ];

	AKActor_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function Engine.KActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AKActor::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 23171 ];

	AKActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.KActor.TakeRadiusDamage
// [0x00024102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// class UDamageType*             pDamage                        ( CPF_OptionalParm | CPF_Parm )
// float                          DamageFalloffExponent          ( CPF_OptionalParm | CPF_Parm )

void AKActor::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, class UDamageType* pDamage, float DamageFalloffExponent )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 23158 ];

	AKActor_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;
	TakeRadiusDamage_Parms.pDamage = pDamage;
	TakeRadiusDamage_Parms.DamageFalloffExponent = DamageFalloffExponent;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.KActor.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )
// class UDamageType*             pDamage                        ( CPF_OptionalParm | CPF_Parm )

void AKActor::eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UDamageType* pDamage )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 23148 ];

	AKActor_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x28 );
	TakeDamage_Parms.DamageCauser = DamageCauser;
	TakeDamage_Parms.pDamage = pDamage;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.KActor.ApplyImpulse
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ImpulseDir                     ( CPF_Parm )
// float                          ImpulseMag                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class UClass*                  DamageType                     ( CPF_OptionalParm | CPF_Parm )

void AKActor::eventApplyImpulse ( struct FVector ImpulseDir, float ImpulseMag, struct FVector HitLocation, struct FTraceHitInfo HitInfo, class UClass* DamageType )
{
	static UFunction* pFnApplyImpulse = NULL;

	if ( ! pFnApplyImpulse )
		pFnApplyImpulse = (UFunction*) UObject::GObjObjects()->Data[ 23141 ];

	AKActor_eventApplyImpulse_Parms ApplyImpulse_Parms;
	memcpy ( &ApplyImpulse_Parms.ImpulseDir, &ImpulseDir, 0xC );
	ApplyImpulse_Parms.ImpulseMag = ImpulseMag;
	memcpy ( &ApplyImpulse_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ApplyImpulse_Parms.HitInfo, &HitInfo, 0x28 );
	ApplyImpulse_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnApplyImpulse, &ApplyImpulse_Parms, NULL );
};

// Function Engine.KActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AKActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 23138 ];

	AKActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.KActor.SpawnedByKismet
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKActor::eventSpawnedByKismet ( )
{
	static UFunction* pFnSpawnedByKismet = NULL;

	if ( ! pFnSpawnedByKismet )
		pFnSpawnedByKismet = (UFunction*) UObject::GObjObjects()->Data[ 23137 ];

	AKActor_eventSpawnedByKismet_Parms SpawnedByKismet_Parms;

	this->ProcessEvent ( pFnSpawnedByKismet, &SpawnedByKismet_Parms, NULL );
};

// Function Engine.KActor.SetPhysicalCollisionProperties
// [0x00020102] 
// Parameters infos:

void AKActor::SetPhysicalCollisionProperties ( )
{
	static UFunction* pFnSetPhysicalCollisionProperties = NULL;

	if ( ! pFnSetPhysicalCollisionProperties )
		pFnSetPhysicalCollisionProperties = (UFunction*) UObject::GObjObjects()->Data[ 23131 ];

	AKActor_execSetPhysicalCollisionProperties_Parms SetPhysicalCollisionProperties_Parms;

	this->ProcessEvent ( pFnSetPhysicalCollisionProperties, &SetPhysicalCollisionProperties_Parms, NULL );
};

// Function Engine.KActor.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKActor::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 23125 ];

	AKActor_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.KActor.FellOutOfWorld
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void AKActor::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 23123 ];

	AKActor_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function Engine.KActor.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 23116 ];

	AKActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.KActor.ResolveRBState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKActor::ResolveRBState ( )
{
	static UFunction* pFnResolveRBState = NULL;

	if ( ! pFnResolveRBState )
		pFnResolveRBState = (UFunction*) UObject::GObjObjects()->Data[ 23115 ];

	AKActor_execResolveRBState_Parms ResolveRBState_Parms;

	pFnResolveRBState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveRBState, &ResolveRBState_Parms, NULL );

	pFnResolveRBState->FunctionFlags |= 0x400;
};

// Function Engine.KActor.GetKActorPhysMaterial
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicalMaterial*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPhysicalMaterial* AKActor::GetKActorPhysMaterial ( )
{
	static UFunction* pFnGetKActorPhysMaterial = NULL;

	if ( ! pFnGetKActorPhysMaterial )
		pFnGetKActorPhysMaterial = (UFunction*) UObject::GObjObjects()->Data[ 23113 ];

	AKActor_execGetKActorPhysMaterial_Parms GetKActorPhysMaterial_Parms;

	pFnGetKActorPhysMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetKActorPhysMaterial, &GetKActorPhysMaterial_Parms, NULL );

	pFnGetKActorPhysMaterial->FunctionFlags |= 0x400;

	return GetKActorPhysMaterial_Parms.ReturnValue;
};

// Function Engine.KActorFromStatic.TakeRadiusDamage
// [0x00024102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// class UDamageType*             pDamage                        ( CPF_OptionalParm | CPF_Parm )
// float                          DamageFalloffExponent          ( CPF_OptionalParm | CPF_Parm )

void AKActorFromStatic::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, class UDamageType* pDamage, float DamageFalloffExponent )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 23214 ];

	AKActorFromStatic_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;
	TakeRadiusDamage_Parms.pDamage = pDamage;
	TakeRadiusDamage_Parms.DamageFalloffExponent = DamageFalloffExponent;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.KActorFromStatic.Bump
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AKActorFromStatic::eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal )
{
	static UFunction* pFnBump = NULL;

	if ( ! pFnBump )
		pFnBump = (UFunction*) UObject::GObjObjects()->Data[ 23208 ];

	AKActorFromStatic_eventBump_Parms Bump_Parms;
	Bump_Parms.Other = Other;
	Bump_Parms.OtherComp = OtherComp;
	memcpy ( &Bump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnBump, &Bump_Parms, NULL );
};

// Function Engine.KActorFromStatic.ApplyImpulse
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ImpulseDir                     ( CPF_Parm )
// float                          ImpulseMag                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class UClass*                  DamageType                     ( CPF_OptionalParm | CPF_Parm )

void AKActorFromStatic::eventApplyImpulse ( struct FVector ImpulseDir, float ImpulseMag, struct FVector HitLocation, struct FTraceHitInfo HitInfo, class UClass* DamageType )
{
	static UFunction* pFnApplyImpulse = NULL;

	if ( ! pFnApplyImpulse )
		pFnApplyImpulse = (UFunction*) UObject::GObjObjects()->Data[ 23198 ];

	AKActorFromStatic_eventApplyImpulse_Parms ApplyImpulse_Parms;
	memcpy ( &ApplyImpulse_Parms.ImpulseDir, &ImpulseDir, 0xC );
	ApplyImpulse_Parms.ImpulseMag = ImpulseMag;
	memcpy ( &ApplyImpulse_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ApplyImpulse_Parms.HitInfo, &HitInfo, 0x28 );
	ApplyImpulse_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnApplyImpulse, &ApplyImpulse_Parms, NULL );
};

// Function Engine.KActorFromStatic.MakeDynamic
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class AKActorFromStatic*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UStaticMeshComponent*    MovableMesh                    ( CPF_Parm | CPF_EditInline )

class AKActorFromStatic* AKActorFromStatic::MakeDynamic ( class UStaticMeshComponent* MovableMesh )
{
	static UFunction* pFnMakeDynamic = NULL;

	if ( ! pFnMakeDynamic )
		pFnMakeDynamic = (UFunction*) UObject::GObjObjects()->Data[ 6830 ];

	AKActorFromStatic_execMakeDynamic_Parms MakeDynamic_Parms;
	MakeDynamic_Parms.MovableMesh = MovableMesh;

	pFnMakeDynamic->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMakeDynamic, &MakeDynamic_Parms, NULL );

	pFnMakeDynamic->FunctionFlags |= 0x400;

	return MakeDynamic_Parms.ReturnValue;
};

// Function Engine.KActorFromStatic.MakeStatic
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void AKActorFromStatic::MakeStatic ( )
{
	static UFunction* pFnMakeStatic = NULL;

	if ( ! pFnMakeStatic )
		pFnMakeStatic = (UFunction*) UObject::GObjObjects()->Data[ 23196 ];

	AKActorFromStatic_execMakeStatic_Parms MakeStatic_Parms;

	pFnMakeStatic->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMakeStatic, &MakeStatic_Parms, NULL );

	pFnMakeStatic->FunctionFlags |= 0x400;
};

// Function Engine.KActorFromStatic.BecomeStatic
// [0x00020002] 
// Parameters infos:

void AKActorFromStatic::BecomeStatic ( )
{
	static UFunction* pFnBecomeStatic = NULL;

	if ( ! pFnBecomeStatic )
		pFnBecomeStatic = (UFunction*) UObject::GObjObjects()->Data[ 23195 ];

	AKActorFromStatic_execBecomeStatic_Parms BecomeStatic_Parms;

	this->ProcessEvent ( pFnBecomeStatic, &BecomeStatic_Parms, NULL );
};

// Function Engine.KActorFromStatic.OnWakeRBPhysics
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKActorFromStatic::eventOnWakeRBPhysics ( )
{
	static UFunction* pFnOnWakeRBPhysics = NULL;

	if ( ! pFnOnWakeRBPhysics )
		pFnOnWakeRBPhysics = (UFunction*) UObject::GObjObjects()->Data[ 23194 ];

	AKActorFromStatic_eventOnWakeRBPhysics_Parms OnWakeRBPhysics_Parms;

	this->ProcessEvent ( pFnOnWakeRBPhysics, &OnWakeRBPhysics_Parms, NULL );
};

// Function Engine.KActorFromStatic.OnSleepRBPhysics
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKActorFromStatic::eventOnSleepRBPhysics ( )
{
	static UFunction* pFnOnSleepRBPhysics = NULL;

	if ( ! pFnOnSleepRBPhysics )
		pFnOnSleepRBPhysics = (UFunction*) UObject::GObjObjects()->Data[ 23193 ];

	AKActorFromStatic_eventOnSleepRBPhysics_Parms OnSleepRBPhysics_Parms;

	this->ProcessEvent ( pFnOnSleepRBPhysics, &OnSleepRBPhysics_Parms, NULL );
};

// Function Engine.KActorSpawnable.ResetComponents
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKActorSpawnable::ResetComponents ( )
{
	static UFunction* pFnResetComponents = NULL;

	if ( ! pFnResetComponents )
		pFnResetComponents = (UFunction*) UObject::GObjObjects()->Data[ 23237 ];

	AKActorSpawnable_execResetComponents_Parms ResetComponents_Parms;

	pFnResetComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetComponents, &ResetComponents_Parms, NULL );

	pFnResetComponents->FunctionFlags |= 0x400;
};

// Function Engine.KActorSpawnable.RecycleInternal
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKActorSpawnable::eventRecycleInternal ( )
{
	static UFunction* pFnRecycleInternal = NULL;

	if ( ! pFnRecycleInternal )
		pFnRecycleInternal = (UFunction*) UObject::GObjObjects()->Data[ 23236 ];

	AKActorSpawnable_eventRecycleInternal_Parms RecycleInternal_Parms;

	this->ProcessEvent ( pFnRecycleInternal, &RecycleInternal_Parms, NULL );
};

// Function Engine.KActorSpawnable.Recycle
// [0x00020102] 
// Parameters infos:

void AKActorSpawnable::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 23234 ];

	AKActorSpawnable_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.KActorSpawnable.Initialize
// [0x00020102] 
// Parameters infos:

void AKActorSpawnable::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 23232 ];

	AKActorSpawnable_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function Engine.KAsset.DoKismetAttachment
// [0x00020002] 
// Parameters infos:
// class AActor*                  Attachment                     ( CPF_Parm )
// class USeqAct_AttachToActor*   Action                         ( CPF_Parm )

void AKAsset::DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action )
{
	static UFunction* pFnDoKismetAttachment = NULL;

	if ( ! pFnDoKismetAttachment )
		pFnDoKismetAttachment = (UFunction*) UObject::GObjObjects()->Data[ 23277 ];

	AKAsset_execDoKismetAttachment_Parms DoKismetAttachment_Parms;
	DoKismetAttachment_Parms.Attachment = Attachment;
	DoKismetAttachment_Parms.Action = Action;

	this->ProcessEvent ( pFnDoKismetAttachment, &DoKismetAttachment_Parms, NULL );
};

// Function Engine.KAsset.OnTeleport
// [0x00020102] 
// Parameters infos:
// class USeqAct_Teleport*        inAction                       ( CPF_Parm )

void AKAsset::OnTeleport ( class USeqAct_Teleport* inAction )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 23274 ];

	AKAsset_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function Engine.KAsset.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AKAsset::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 23272 ];

	AKAsset_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.KAsset.TakeRadiusDamage
// [0x00024102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// class UDamageType*             pDamage                        ( CPF_OptionalParm | CPF_Parm )
// float                          DamageFalloffExponent          ( CPF_OptionalParm | CPF_Parm )

void AKAsset::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, class UDamageType* pDamage, float DamageFalloffExponent )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 23261 ];

	AKAsset_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;
	TakeRadiusDamage_Parms.pDamage = pDamage;
	TakeRadiusDamage_Parms.DamageFalloffExponent = DamageFalloffExponent;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.KAsset.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )
// class UDamageType*             pDamage                        ( CPF_OptionalParm | CPF_Parm )

void AKAsset::eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UDamageType* pDamage )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 23250 ];

	AKAsset_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x28 );
	TakeDamage_Parms.DamageCauser = DamageCauser;
	TakeDamage_Parms.pDamage = pDamage;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.KAsset.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AKAsset::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 23248 ];

	AKAsset_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.KAsset.SetMeshAndPhysAsset
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USkeletalMesh*           NewMesh                        ( CPF_Parm )
// class UPhysicsAsset*           NewPhysAsset                   ( CPF_Parm )

void AKAsset::SetMeshAndPhysAsset ( class USkeletalMesh* NewMesh, class UPhysicsAsset* NewPhysAsset )
{
	static UFunction* pFnSetMeshAndPhysAsset = NULL;

	if ( ! pFnSetMeshAndPhysAsset )
		pFnSetMeshAndPhysAsset = (UFunction*) UObject::GObjObjects()->Data[ 23245 ];

	AKAsset_execSetMeshAndPhysAsset_Parms SetMeshAndPhysAsset_Parms;
	SetMeshAndPhysAsset_Parms.NewMesh = NewMesh;
	SetMeshAndPhysAsset_Parms.NewPhysAsset = NewPhysAsset;

	this->ProcessEvent ( pFnSetMeshAndPhysAsset, &SetMeshAndPhysAsset_Parms, NULL );
};

// Function Engine.KAsset.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKAsset::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 23240 ];

	AKAsset_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Pawn.OnFaceFXAnimStopped
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void APawn::eventOnFaceFXAnimStopped ( )
{
	static UFunction* pFnOnFaceFXAnimStopped = NULL;

	if ( ! pFnOnFaceFXAnimStopped )
		pFnOnFaceFXAnimStopped = (UFunction*) UObject::GObjObjects()->Data[ 24548 ];

	APawn_eventOnFaceFXAnimStopped_Parms OnFaceFXAnimStopped_Parms;

	this->ProcessEvent ( pFnOnFaceFXAnimStopped, &OnFaceFXAnimStopped_Parms, NULL );
};

// Function Engine.Pawn.OnFaceFXAnimStarted
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void APawn::eventOnFaceFXAnimStarted ( )
{
	static UFunction* pFnOnFaceFXAnimStarted = NULL;

	if ( ! pFnOnFaceFXAnimStarted )
		pFnOnFaceFXAnimStarted = (UFunction*) UObject::GObjObjects()->Data[ 24547 ];

	APawn_eventOnFaceFXAnimStarted_Parms OnFaceFXAnimStarted_Parms;

	this->ProcessEvent ( pFnOnFaceFXAnimStarted, &OnFaceFXAnimStarted_Parms, NULL );
};

// Function Engine.Pawn.GetPrimarySkelMeshComponent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class USkeletalMeshComponent* APawn::GetPrimarySkelMeshComponent ( )
{
	static UFunction* pFnGetPrimarySkelMeshComponent = NULL;

	if ( ! pFnGetPrimarySkelMeshComponent )
		pFnGetPrimarySkelMeshComponent = (UFunction*) UObject::GObjObjects()->Data[ 24545 ];

	APawn_execGetPrimarySkelMeshComponent_Parms GetPrimarySkelMeshComponent_Parms;

	pFnGetPrimarySkelMeshComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPrimarySkelMeshComponent, &GetPrimarySkelMeshComponent_Parms, NULL );

	pFnGetPrimarySkelMeshComponent->FunctionFlags |= 0x400;

	return GetPrimarySkelMeshComponent_Parms.ReturnValue;
};

// Function Engine.Pawn.IsBioSoftwareSkinned
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsBioSoftwareSkinned ( )
{
	static UFunction* pFnIsBioSoftwareSkinned = NULL;

	if ( ! pFnIsBioSoftwareSkinned )
		pFnIsBioSoftwareSkinned = (UFunction*) UObject::GObjObjects()->Data[ 24543 ];

	APawn_execIsBioSoftwareSkinned_Parms IsBioSoftwareSkinned_Parms;

	pFnIsBioSoftwareSkinned->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsBioSoftwareSkinned, &IsBioSoftwareSkinned_Parms, NULL );

	pFnIsBioSoftwareSkinned->FunctionFlags |= 0x400;

	return IsBioSoftwareSkinned_Parms.ReturnValue;
};

// Function Engine.Pawn.SFXDoComponentAction
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UActorComponent*         pComponent                     ( CPF_Parm | CPF_EditInline )

void APawn::eventSFXDoComponentAction ( class UActorComponent* pComponent )
{
	static UFunction* pFnSFXDoComponentAction = NULL;

	if ( ! pFnSFXDoComponentAction )
		pFnSFXDoComponentAction = (UFunction*) UObject::GObjObjects()->Data[ 24541 ];

	APawn_eventSFXDoComponentAction_Parms SFXDoComponentAction_Parms;
	SFXDoComponentAction_Parms.pComponent = pComponent;

	this->ProcessEvent ( pFnSFXDoComponentAction, &SFXDoComponentAction_Parms, NULL );
};

// Function Engine.Pawn.GetAdjustedMoveDirection
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  MoveTarget                     ( CPF_Parm )
// struct FVector                 Dest                           ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FVector                 Direction                      ( CPF_Parm | CPF_OutParm )

void APawn::GetAdjustedMoveDirection ( class AActor* MoveTarget, struct FVector* Dest, struct FVector* Direction )
{
	static UFunction* pFnGetAdjustedMoveDirection = NULL;

	if ( ! pFnGetAdjustedMoveDirection )
		pFnGetAdjustedMoveDirection = (UFunction*) UObject::GObjObjects()->Data[ 24537 ];

	APawn_execGetAdjustedMoveDirection_Parms GetAdjustedMoveDirection_Parms;
	GetAdjustedMoveDirection_Parms.MoveTarget = MoveTarget;

	pFnGetAdjustedMoveDirection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAdjustedMoveDirection, &GetAdjustedMoveDirection_Parms, NULL );

	pFnGetAdjustedMoveDirection->FunctionFlags |= 0x400;

	if ( Dest )
		memcpy ( Dest, &GetAdjustedMoveDirection_Parms.Dest, 0xC );

	if ( Direction )
		memcpy ( Direction, &GetAdjustedMoveDirection_Parms.Direction, 0xC );
};

// Function Engine.Pawn.IsDead
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsDead ( )
{
	static UFunction* pFnIsDead = NULL;

	if ( ! pFnIsDead )
		pFnIsDead = (UFunction*) UObject::GObjObjects()->Data[ 24535 ];

	APawn_execIsDead_Parms IsDead_Parms;

	pFnIsDead->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDead, &IsDead_Parms, NULL );

	pFnIsDead->FunctionFlags |= 0x400;

	return IsDead_Parms.ReturnValue;
};

// Function Engine.Pawn.InPlayerParty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::InPlayerParty ( )
{
	static UFunction* pFnInPlayerParty = NULL;

	if ( ! pFnInPlayerParty )
		pFnInPlayerParty = (UFunction*) UObject::GObjObjects()->Data[ 24533 ];

	APawn_execInPlayerParty_Parms InPlayerParty_Parms;

	pFnInPlayerParty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInPlayerParty, &InPlayerParty_Parms, NULL );

	pFnInPlayerParty->FunctionFlags |= 0x400;

	return InPlayerParty_Parms.ReturnValue;
};

// Function Engine.Pawn.GetMaxSpeed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::GetMaxSpeed ( )
{
	static UFunction* pFnGetMaxSpeed = NULL;

	if ( ! pFnGetMaxSpeed )
		pFnGetMaxSpeed = (UFunction*) UObject::GObjObjects()->Data[ 24531 ];

	APawn_execGetMaxSpeed_Parms GetMaxSpeed_Parms;

	pFnGetMaxSpeed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxSpeed, &GetMaxSpeed_Parms, NULL );

	pFnGetMaxSpeed->FunctionFlags |= 0x400;

	return GetMaxSpeed_Parms.ReturnValue;
};

// Function Engine.Pawn.GetDesiredSpeed
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eMode                          ( CPF_OptionalParm | CPF_Parm )

float APawn::GetDesiredSpeed ( unsigned char eMode )
{
	static UFunction* pFnGetDesiredSpeed = NULL;

	if ( ! pFnGetDesiredSpeed )
		pFnGetDesiredSpeed = (UFunction*) UObject::GObjObjects()->Data[ 24528 ];

	APawn_execGetDesiredSpeed_Parms GetDesiredSpeed_Parms;
	GetDesiredSpeed_Parms.eMode = eMode;

	pFnGetDesiredSpeed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDesiredSpeed, &GetDesiredSpeed_Parms, NULL );

	pFnGetDesiredSpeed->FunctionFlags |= 0x400;

	return GetDesiredSpeed_Parms.ReturnValue;
};

// Function Engine.Pawn.SetDesiredSpeed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDesiredSpeed                  ( CPF_Parm )
// unsigned long                  bForce                         ( CPF_Parm )

void APawn::SetDesiredSpeed ( float fDesiredSpeed, unsigned long bForce )
{
	static UFunction* pFnSetDesiredSpeed = NULL;

	if ( ! pFnSetDesiredSpeed )
		pFnSetDesiredSpeed = (UFunction*) UObject::GObjObjects()->Data[ 24525 ];

	APawn_execSetDesiredSpeed_Parms SetDesiredSpeed_Parms;
	SetDesiredSpeed_Parms.fDesiredSpeed = fDesiredSpeed;
	SetDesiredSpeed_Parms.bForce = bForce;

	pFnSetDesiredSpeed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDesiredSpeed, &SetDesiredSpeed_Parms, NULL );

	pFnSetDesiredSpeed->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.SetRootMotionInterpCurrentTime
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// float                          inTime                         ( CPF_Parm )
// float                          DeltaTime                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUpdateSkelPose                ( CPF_OptionalParm | CPF_Parm )

void APawn::SetRootMotionInterpCurrentTime ( float inTime, float DeltaTime, unsigned long bUpdateSkelPose )
{
	static UFunction* pFnSetRootMotionInterpCurrentTime = NULL;

	if ( ! pFnSetRootMotionInterpCurrentTime )
		pFnSetRootMotionInterpCurrentTime = (UFunction*) UObject::GObjObjects()->Data[ 24521 ];

	APawn_execSetRootMotionInterpCurrentTime_Parms SetRootMotionInterpCurrentTime_Parms;
	SetRootMotionInterpCurrentTime_Parms.inTime = inTime;
	SetRootMotionInterpCurrentTime_Parms.DeltaTime = DeltaTime;
	SetRootMotionInterpCurrentTime_Parms.bUpdateSkelPose = bUpdateSkelPose;

	pFnSetRootMotionInterpCurrentTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRootMotionInterpCurrentTime, &SetRootMotionInterpCurrentTime_Parms, NULL );

	pFnSetRootMotionInterpCurrentTime->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.SetCinematicMode
// [0x00020100] 
// Parameters infos:
// unsigned long                  bInCinematicMode               ( CPF_Parm )

void APawn::SetCinematicMode ( unsigned long bInCinematicMode )
{
	static UFunction* pFnSetCinematicMode = NULL;

	if ( ! pFnSetCinematicMode )
		pFnSetCinematicMode = (UFunction*) UObject::GObjObjects()->Data[ 24519 ];

	APawn_execSetCinematicMode_Parms SetCinematicMode_Parms;
	SetCinematicMode_Parms.bInCinematicMode = bInCinematicMode;

	this->ProcessEvent ( pFnSetCinematicMode, &SetCinematicMode_Parms, NULL );
};

// Function Engine.Pawn.ZeroMovementVariables
// [0x00020102] 
// Parameters infos:

void APawn::ZeroMovementVariables ( )
{
	static UFunction* pFnZeroMovementVariables = NULL;

	if ( ! pFnZeroMovementVariables )
		pFnZeroMovementVariables = (UFunction*) UObject::GObjObjects()->Data[ 24518 ];

	APawn_execZeroMovementVariables_Parms ZeroMovementVariables_Parms;

	this->ProcessEvent ( pFnZeroMovementVariables, &ZeroMovementVariables_Parms, NULL );
};

// Function Engine.Pawn.ClearPathStep
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::ClearPathStep ( )
{
	static UFunction* pFnClearPathStep = NULL;

	if ( ! pFnClearPathStep )
		pFnClearPathStep = (UFunction*) UObject::GObjObjects()->Data[ 24517 ];

	APawn_execClearPathStep_Parms ClearPathStep_Parms;

	pFnClearPathStep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearPathStep, &ClearPathStep_Parms, NULL );

	pFnClearPathStep->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.DrawPathStep
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UCanvas*                 C                              ( CPF_Parm )

void APawn::DrawPathStep ( class UCanvas* C )
{
	static UFunction* pFnDrawPathStep = NULL;

	if ( ! pFnDrawPathStep )
		pFnDrawPathStep = (UFunction*) UObject::GObjObjects()->Data[ 24515 ];

	APawn_execDrawPathStep_Parms DrawPathStep_Parms;
	DrawPathStep_Parms.C = C;

	pFnDrawPathStep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawPathStep, &DrawPathStep_Parms, NULL );

	pFnDrawPathStep->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.IncrementPathChild
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Cnt                            ( CPF_Parm )
// class UCanvas*                 C                              ( CPF_Parm )

void APawn::IncrementPathChild ( int Cnt, class UCanvas* C )
{
	static UFunction* pFnIncrementPathChild = NULL;

	if ( ! pFnIncrementPathChild )
		pFnIncrementPathChild = (UFunction*) UObject::GObjObjects()->Data[ 24512 ];

	APawn_execIncrementPathChild_Parms IncrementPathChild_Parms;
	IncrementPathChild_Parms.Cnt = Cnt;
	IncrementPathChild_Parms.C = C;

	pFnIncrementPathChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementPathChild, &IncrementPathChild_Parms, NULL );

	pFnIncrementPathChild->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.IncrementPathStep
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Cnt                            ( CPF_Parm )
// class UCanvas*                 C                              ( CPF_Parm )

void APawn::IncrementPathStep ( int Cnt, class UCanvas* C )
{
	static UFunction* pFnIncrementPathStep = NULL;

	if ( ! pFnIncrementPathStep )
		pFnIncrementPathStep = (UFunction*) UObject::GObjObjects()->Data[ 24509 ];

	APawn_execIncrementPathStep_Parms IncrementPathStep_Parms;
	IncrementPathStep_Parms.Cnt = Cnt;
	IncrementPathStep_Parms.C = C;

	pFnIncrementPathStep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementPathStep, &IncrementPathStep_Parms, NULL );

	pFnIncrementPathStep->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.CreatePathGoalEvaluator
// [0x00020002] 
// Parameters infos:
// class UPathGoalEvaluator*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  GoalEvalClass                  ( CPF_Parm )

class UPathGoalEvaluator* APawn::CreatePathGoalEvaluator ( class UClass* GoalEvalClass )
{
	static UFunction* pFnCreatePathGoalEvaluator = NULL;

	if ( ! pFnCreatePathGoalEvaluator )
		pFnCreatePathGoalEvaluator = (UFunction*) UObject::GObjObjects()->Data[ 22448 ];

	APawn_execCreatePathGoalEvaluator_Parms CreatePathGoalEvaluator_Parms;
	CreatePathGoalEvaluator_Parms.GoalEvalClass = GoalEvalClass;

	this->ProcessEvent ( pFnCreatePathGoalEvaluator, &CreatePathGoalEvaluator_Parms, NULL );

	return CreatePathGoalEvaluator_Parms.ReturnValue;
};

// Function Engine.Pawn.CreatePathConstraint
// [0x00020002] 
// Parameters infos:
// class UPathConstraint*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ConstraintClass                ( CPF_Parm )

class UPathConstraint* APawn::CreatePathConstraint ( class UClass* ConstraintClass )
{
	static UFunction* pFnCreatePathConstraint = NULL;

	if ( ! pFnCreatePathConstraint )
		pFnCreatePathConstraint = (UFunction*) UObject::GObjObjects()->Data[ 24505 ];

	APawn_execCreatePathConstraint_Parms CreatePathConstraint_Parms;
	CreatePathConstraint_Parms.ConstraintClass = ConstraintClass;

	this->ProcessEvent ( pFnCreatePathConstraint, &CreatePathConstraint_Parms, NULL );

	return CreatePathConstraint_Parms.ReturnValue;
};

// Function Engine.Pawn.AddGoalEvaluator
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPathGoalEvaluator*      Evaluator                      ( CPF_Parm )

void APawn::AddGoalEvaluator ( class UPathGoalEvaluator* Evaluator )
{
	static UFunction* pFnAddGoalEvaluator = NULL;

	if ( ! pFnAddGoalEvaluator )
		pFnAddGoalEvaluator = (UFunction*) UObject::GObjObjects()->Data[ 24503 ];

	APawn_execAddGoalEvaluator_Parms AddGoalEvaluator_Parms;
	AddGoalEvaluator_Parms.Evaluator = Evaluator;

	pFnAddGoalEvaluator->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddGoalEvaluator, &AddGoalEvaluator_Parms, NULL );

	pFnAddGoalEvaluator->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.AddPathConstraint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPathConstraint*         Constraint                     ( CPF_Parm )

void APawn::AddPathConstraint ( class UPathConstraint* Constraint )
{
	static UFunction* pFnAddPathConstraint = NULL;

	if ( ! pFnAddPathConstraint )
		pFnAddPathConstraint = (UFunction*) UObject::GObjObjects()->Data[ 24501 ];

	APawn_execAddPathConstraint_Parms AddPathConstraint_Parms;
	AddPathConstraint_Parms.Constraint = Constraint;

	pFnAddPathConstraint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddPathConstraint, &AddPathConstraint_Parms, NULL );

	pFnAddPathConstraint->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.ClearConstraints
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::ClearConstraints ( )
{
	static UFunction* pFnClearConstraints = NULL;

	if ( ! pFnClearConstraints )
		pFnClearConstraints = (UFunction*) UObject::GObjObjects()->Data[ 24500 ];

	APawn_execClearConstraints_Parms ClearConstraints_Parms;

	pFnClearConstraints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearConstraints, &ClearConstraints_Parms, NULL );

	pFnClearConstraints->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.SoakPause
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APawn::eventSoakPause ( )
{
	static UFunction* pFnSoakPause = NULL;

	if ( ! pFnSoakPause )
		pFnSoakPause = (UFunction*) UObject::GObjObjects()->Data[ 24498 ];

	APawn_eventSoakPause_Parms SoakPause_Parms;

	this->ProcessEvent ( pFnSoakPause, &SoakPause_Parms, NULL );
};

// Function Engine.Pawn.BecomeViewTarget
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void APawn::eventBecomeViewTarget ( class APlayerController* PC )
{
	static UFunction* pFnBecomeViewTarget = NULL;

	if ( ! pFnBecomeViewTarget )
		pFnBecomeViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 24495 ];

	APawn_eventBecomeViewTarget_Parms BecomeViewTarget_Parms;
	BecomeViewTarget_Parms.PC = PC;

	this->ProcessEvent ( pFnBecomeViewTarget, &BecomeViewTarget_Parms, NULL );
};

// Function Engine.Pawn.AdjustCameraScale
// [0x00020100] 
// Parameters infos:
// unsigned long                  bMoveCameraIn                  ( CPF_Parm )

void APawn::AdjustCameraScale ( unsigned long bMoveCameraIn )
{
	static UFunction* pFnAdjustCameraScale = NULL;

	if ( ! pFnAdjustCameraScale )
		pFnAdjustCameraScale = (UFunction*) UObject::GObjObjects()->Data[ 24493 ];

	APawn_execAdjustCameraScale_Parms AdjustCameraScale_Parms;
	AdjustCameraScale_Parms.bMoveCameraIn = bMoveCameraIn;

	this->ProcessEvent ( pFnAdjustCameraScale, &AdjustCameraScale_Parms, NULL );
};

// Function Engine.Pawn.MessagePlayer
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void APawn::eventMessagePlayer ( struct FString msg )
{
	static UFunction* pFnMessagePlayer = NULL;

	if ( ! pFnMessagePlayer )
		pFnMessagePlayer = (UFunction*) UObject::GObjObjects()->Data[ 16859 ];

	APawn_eventMessagePlayer_Parms MessagePlayer_Parms;
	memcpy ( &MessagePlayer_Parms.msg, &msg, 0x10 );

	this->ProcessEvent ( pFnMessagePlayer, &MessagePlayer_Parms, NULL );
};

// Function Engine.Pawn.EffectIsRelevant
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// unsigned long                  bForceDedicated                ( CPF_Parm )
// float                          CullDistance                   ( CPF_OptionalParm | CPF_Parm )

bool APawn::EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance )
{
	static UFunction* pFnEffectIsRelevant = NULL;

	if ( ! pFnEffectIsRelevant )
		pFnEffectIsRelevant = (UFunction*) UObject::GObjObjects()->Data[ 24485 ];

	APawn_execEffectIsRelevant_Parms EffectIsRelevant_Parms;
	memcpy ( &EffectIsRelevant_Parms.SpawnLocation, &SpawnLocation, 0xC );
	EffectIsRelevant_Parms.bForceDedicated = bForceDedicated;
	EffectIsRelevant_Parms.CullDistance = CullDistance;

	this->ProcessEvent ( pFnEffectIsRelevant, &EffectIsRelevant_Parms, NULL );

	return EffectIsRelevant_Parms.ReturnValue;
};

// Function Engine.Pawn.CanMount
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::eventCanMount ( )
{
	static UFunction* pFnCanMount = NULL;

	if ( ! pFnCanMount )
		pFnCanMount = (UFunction*) UObject::GObjObjects()->Data[ 24482 ];

	APawn_eventCanMount_Parms CanMount_Parms;

	this->ProcessEvent ( pFnCanMount, &CanMount_Parms, NULL );

	return CanMount_Parms.ReturnValue;
};

// Function Engine.Pawn.OnTeleport
// [0x00020102] 
// Parameters infos:
// class USeqAct_Teleport*        Action                         ( CPF_Parm )

void APawn::OnTeleport ( class USeqAct_Teleport* Action )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 24475 ];

	APawn_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.Action = Action;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function Engine.Pawn.OnSetMaterial
// [0x00020002] 
// Parameters infos:
// class USeqAct_SetMaterial*     Action                         ( CPF_Parm )

void APawn::OnSetMaterial ( class USeqAct_SetMaterial* Action )
{
	static UFunction* pFnOnSetMaterial = NULL;

	if ( ! pFnOnSetMaterial )
		pFnOnSetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 24473 ];

	APawn_execOnSetMaterial_Parms OnSetMaterial_Parms;
	OnSetMaterial_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetMaterial, &OnSetMaterial_Parms, NULL );
};

// Function Engine.Pawn.GetDamageScaling
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::GetDamageScaling ( )
{
	static UFunction* pFnGetDamageScaling = NULL;

	if ( ! pFnGetDamageScaling )
		pFnGetDamageScaling = (UFunction*) UObject::GObjObjects()->Data[ 24470 ];

	APawn_execGetDamageScaling_Parms GetDamageScaling_Parms;

	this->ProcessEvent ( pFnGetDamageScaling, &GetDamageScaling_Parms, NULL );

	return GetDamageScaling_Parms.ReturnValue;
};

// Function Engine.Pawn.DoKismetAttachment
// [0x00020002] 
// Parameters infos:
// class AActor*                  Attachment                     ( CPF_Parm )
// class USeqAct_AttachToActor*   Action                         ( CPF_Parm )

void APawn::DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action )
{
	static UFunction* pFnDoKismetAttachment = NULL;

	if ( ! pFnDoKismetAttachment )
		pFnDoKismetAttachment = (UFunction*) UObject::GObjObjects()->Data[ 24463 ];

	APawn_execDoKismetAttachment_Parms DoKismetAttachment_Parms;
	DoKismetAttachment_Parms.Attachment = Attachment;
	DoKismetAttachment_Parms.Action = Action;

	this->ProcessEvent ( pFnDoKismetAttachment, &DoKismetAttachment_Parms, NULL );
};

// Function Engine.Pawn.SpawnedByKismet
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APawn::eventSpawnedByKismet ( )
{
	static UFunction* pFnSpawnedByKismet = NULL;

	if ( ! pFnSpawnedByKismet )
		pFnSpawnedByKismet = (UFunction*) UObject::GObjObjects()->Data[ 24462 ];

	APawn_eventSpawnedByKismet_Parms SpawnedByKismet_Parms;

	this->ProcessEvent ( pFnSpawnedByKismet, &SpawnedByKismet_Parms, NULL );
};

// Function Engine.Pawn.IsStationary
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsStationary ( )
{
	static UFunction* pFnIsStationary = NULL;

	if ( ! pFnIsStationary )
		pFnIsStationary = (UFunction*) UObject::GObjObjects()->Data[ 24460 ];

	APawn_execIsStationary_Parms IsStationary_Parms;

	this->ProcessEvent ( pFnIsStationary, &IsStationary_Parms, NULL );

	return IsStationary_Parms.ReturnValue;
};

// Function Engine.Pawn.GetCollisionExtent
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector APawn::GetCollisionExtent ( )
{
	static UFunction* pFnGetCollisionExtent = NULL;

	if ( ! pFnGetCollisionExtent )
		pFnGetCollisionExtent = (UFunction*) UObject::GObjObjects()->Data[ 16850 ];

	APawn_execGetCollisionExtent_Parms GetCollisionExtent_Parms;

	this->ProcessEvent ( pFnGetCollisionExtent, &GetCollisionExtent_Parms, NULL );

	return GetCollisionExtent_Parms.ReturnValue;
};

// Function Engine.Pawn.GetCollisionHeight
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::GetCollisionHeight ( )
{
	static UFunction* pFnGetCollisionHeight = NULL;

	if ( ! pFnGetCollisionHeight )
		pFnGetCollisionHeight = (UFunction*) UObject::GObjObjects()->Data[ 22608 ];

	APawn_execGetCollisionHeight_Parms GetCollisionHeight_Parms;

	this->ProcessEvent ( pFnGetCollisionHeight, &GetCollisionHeight_Parms, NULL );

	return GetCollisionHeight_Parms.ReturnValue;
};

// Function Engine.Pawn.GetCollisionRadius
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::GetCollisionRadius ( )
{
	static UFunction* pFnGetCollisionRadius = NULL;

	if ( ! pFnGetCollisionRadius )
		pFnGetCollisionRadius = (UFunction*) UObject::GObjObjects()->Data[ 24457 ];

	APawn_execGetCollisionRadius_Parms GetCollisionRadius_Parms;

	this->ProcessEvent ( pFnGetCollisionRadius, &GetCollisionRadius_Parms, NULL );

	return GetCollisionRadius_Parms.ReturnValue;
};

// Function Engine.Pawn.CheatFly
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CheatFly ( )
{
	static UFunction* pFnCheatFly = NULL;

	if ( ! pFnCheatFly )
		pFnCheatFly = (UFunction*) UObject::GObjObjects()->Data[ 16704 ];

	APawn_execCheatFly_Parms CheatFly_Parms;

	this->ProcessEvent ( pFnCheatFly, &CheatFly_Parms, NULL );

	return CheatFly_Parms.ReturnValue;
};

// Function Engine.Pawn.CheatGhost
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CheatGhost ( )
{
	static UFunction* pFnCheatGhost = NULL;

	if ( ! pFnCheatGhost )
		pFnCheatGhost = (UFunction*) UObject::GObjObjects()->Data[ 16711 ];

	APawn_execCheatGhost_Parms CheatGhost_Parms;

	this->ProcessEvent ( pFnCheatGhost, &CheatGhost_Parms, NULL );

	return CheatGhost_Parms.ReturnValue;
};

// Function Engine.Pawn.CheatWalk
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CheatWalk ( )
{
	static UFunction* pFnCheatWalk = NULL;

	if ( ! pFnCheatWalk )
		pFnCheatWalk = (UFunction*) UObject::GObjObjects()->Data[ 16707 ];

	APawn_execCheatWalk_Parms CheatWalk_Parms;

	this->ProcessEvent ( pFnCheatWalk, &CheatWalk_Parms, NULL );

	return CheatWalk_Parms.ReturnValue;
};

// Function Engine.Pawn.PlayWeaponSwitch
// [0x00020100] 
// Parameters infos:
// class AWeapon*                 OldWeapon                      ( CPF_Parm )
// class AWeapon*                 NewWeapon                      ( CPF_Parm )

void APawn::PlayWeaponSwitch ( class AWeapon* OldWeapon, class AWeapon* NewWeapon )
{
	static UFunction* pFnPlayWeaponSwitch = NULL;

	if ( ! pFnPlayWeaponSwitch )
		pFnPlayWeaponSwitch = (UFunction*) UObject::GObjObjects()->Data[ 24453 ];

	APawn_execPlayWeaponSwitch_Parms PlayWeaponSwitch_Parms;
	PlayWeaponSwitch_Parms.OldWeapon = OldWeapon;
	PlayWeaponSwitch_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnPlayWeaponSwitch, &PlayWeaponSwitch_Parms, NULL );
};

// Function Engine.Pawn.SetActiveWeapon
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 NewWeapon                      ( CPF_Parm )

void APawn::SetActiveWeapon ( class AWeapon* NewWeapon )
{
	static UFunction* pFnSetActiveWeapon = NULL;

	if ( ! pFnSetActiveWeapon )
		pFnSetActiveWeapon = (UFunction*) UObject::GObjObjects()->Data[ 24451 ];

	APawn_execSetActiveWeapon_Parms SetActiveWeapon_Parms;
	SetActiveWeapon_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnSetActiveWeapon, &SetActiveWeapon_Parms, NULL );
};

// Function Engine.Pawn.TossInventory
// [0x00024002] 
// Parameters infos:
// class AInventory*              Inv                            ( CPF_Parm )
// struct FVector                 ForceVelocity                  ( CPF_OptionalParm | CPF_Parm )

void APawn::TossInventory ( class AInventory* Inv, struct FVector ForceVelocity )
{
	static UFunction* pFnTossInventory = NULL;

	if ( ! pFnTossInventory )
		pFnTossInventory = (UFunction*) UObject::GObjObjects()->Data[ 24442 ];

	APawn_execTossInventory_Parms TossInventory_Parms;
	TossInventory_Parms.Inv = Inv;
	memcpy ( &TossInventory_Parms.ForceVelocity, &ForceVelocity, 0xC );

	this->ProcessEvent ( pFnTossInventory, &TossInventory_Parms, NULL );
};

// Function Engine.Pawn.ThrowActiveWeapon
// [0x00020002] 
// Parameters infos:

void APawn::ThrowActiveWeapon ( )
{
	static UFunction* pFnThrowActiveWeapon = NULL;

	if ( ! pFnThrowActiveWeapon )
		pFnThrowActiveWeapon = (UFunction*) UObject::GObjObjects()->Data[ 24441 ];

	APawn_execThrowActiveWeapon_Parms ThrowActiveWeapon_Parms;

	this->ProcessEvent ( pFnThrowActiveWeapon, &ThrowActiveWeapon_Parms, NULL );
};

// Function Engine.Pawn.DrawHUD
// [0x00020102] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void APawn::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 24439 ];

	APawn_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.Pawn.FindInventoryType
// [0x00024103] ( FUNC_Final )
// Parameters infos:
// class AInventory*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  DesiredClass                   ( CPF_Parm )
// unsigned long                  bAllowSubclass                 ( CPF_OptionalParm | CPF_Parm )

class AInventory* APawn::FindInventoryType ( class UClass* DesiredClass, unsigned long bAllowSubclass )
{
	static UFunction* pFnFindInventoryType = NULL;

	if ( ! pFnFindInventoryType )
		pFnFindInventoryType = (UFunction*) UObject::GObjObjects()->Data[ 8179 ];

	APawn_execFindInventoryType_Parms FindInventoryType_Parms;
	FindInventoryType_Parms.DesiredClass = DesiredClass;
	FindInventoryType_Parms.bAllowSubclass = bAllowSubclass;

	this->ProcessEvent ( pFnFindInventoryType, &FindInventoryType_Parms, NULL );

	return FindInventoryType_Parms.ReturnValue;
};

// Function Engine.Pawn.CreateInventory
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class AInventory*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  NewInvClass                    ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

class AInventory* APawn::eventCreateInventory ( class UClass* NewInvClass, unsigned long bDoNotActivate )
{
	static UFunction* pFnCreateInventory = NULL;

	if ( ! pFnCreateInventory )
		pFnCreateInventory = (UFunction*) UObject::GObjObjects()->Data[ 16754 ];

	APawn_eventCreateInventory_Parms CreateInventory_Parms;
	CreateInventory_Parms.NewInvClass = NewInvClass;
	CreateInventory_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnCreateInventory, &CreateInventory_Parms, NULL );

	return CreateInventory_Parms.ReturnValue;
};

// Function Engine.Pawn.AddDefaultInventory
// [0x00020000] 
// Parameters infos:

void APawn::AddDefaultInventory ( )
{
	static UFunction* pFnAddDefaultInventory = NULL;

	if ( ! pFnAddDefaultInventory )
		pFnAddDefaultInventory = (UFunction*) UObject::GObjObjects()->Data[ 24434 ];

	APawn_execAddDefaultInventory_Parms AddDefaultInventory_Parms;

	this->ProcessEvent ( pFnAddDefaultInventory, &AddDefaultInventory_Parms, NULL );
};

// Function Engine.Pawn.StopDriving
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )

void APawn::eventStopDriving ( class AVehicle* V )
{
	static UFunction* pFnStopDriving = NULL;

	if ( ! pFnStopDriving )
		pFnStopDriving = (UFunction*) UObject::GObjObjects()->Data[ 24432 ];

	APawn_eventStopDriving_Parms StopDriving_Parms;
	StopDriving_Parms.V = V;

	this->ProcessEvent ( pFnStopDriving, &StopDriving_Parms, NULL );
};

// Function Engine.Pawn.StartDriving
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )

void APawn::eventStartDriving ( class AVehicle* V )
{
	static UFunction* pFnStartDriving = NULL;

	if ( ! pFnStartDriving )
		pFnStartDriving = (UFunction*) UObject::GObjObjects()->Data[ 24430 ];

	APawn_eventStartDriving_Parms StartDriving_Parms;
	StartDriving_Parms.V = V;

	this->ProcessEvent ( pFnStartDriving, &StartDriving_Parms, NULL );
};

// Function Engine.Pawn.CanThrowWeapon
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CanThrowWeapon ( )
{
	static UFunction* pFnCanThrowWeapon = NULL;

	if ( ! pFnCanThrowWeapon )
		pFnCanThrowWeapon = (UFunction*) UObject::GObjObjects()->Data[ 10716 ];

	APawn_execCanThrowWeapon_Parms CanThrowWeapon_Parms;

	this->ProcessEvent ( pFnCanThrowWeapon, &CanThrowWeapon_Parms, NULL );

	return CanThrowWeapon_Parms.ReturnValue;
};

// Function Engine.Pawn.Suicide
// [0x00020002] 
// Parameters infos:

void APawn::Suicide ( )
{
	static UFunction* pFnSuicide = NULL;

	if ( ! pFnSuicide )
		pFnSuicide = (UFunction*) UObject::GObjObjects()->Data[ 24427 ];

	APawn_execSuicide_Parms Suicide_Parms;

	this->ProcessEvent ( pFnSuicide, &Suicide_Parms, NULL );
};

// Function Engine.Pawn.GetVehicleBase
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AVehicle*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AVehicle* APawn::GetVehicleBase ( )
{
	static UFunction* pFnGetVehicleBase = NULL;

	if ( ! pFnGetVehicleBase )
		pFnGetVehicleBase = (UFunction*) UObject::GObjObjects()->Data[ 24425 ];

	APawn_execGetVehicleBase_Parms GetVehicleBase_Parms;

	pFnGetVehicleBase->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVehicleBase, &GetVehicleBase_Parms, NULL );

	pFnGetVehicleBase->FunctionFlags |= 0x400;

	return GetVehicleBase_Parms.ReturnValue;
};

// Function Engine.Pawn.PlayLanded
// [0x00020000] 
// Parameters infos:
// float                          ImpactVel                      ( CPF_Parm )

void APawn::PlayLanded ( float ImpactVel )
{
	static UFunction* pFnPlayLanded = NULL;

	if ( ! pFnPlayLanded )
		pFnPlayLanded = (UFunction*) UObject::GObjObjects()->Data[ 24423 ];

	APawn_execPlayLanded_Parms PlayLanded_Parms;
	PlayLanded_Parms.ImpactVel = ImpactVel;

	this->ProcessEvent ( pFnPlayLanded, &PlayLanded_Parms, NULL );
};

// Function Engine.Pawn.CannotJumpNow
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CannotJumpNow ( )
{
	static UFunction* pFnCannotJumpNow = NULL;

	if ( ! pFnCannotJumpNow )
		pFnCannotJumpNow = (UFunction*) UObject::GObjObjects()->Data[ 10954 ];

	APawn_execCannotJumpNow_Parms CannotJumpNow_Parms;

	this->ProcessEvent ( pFnCannotJumpNow, &CannotJumpNow_Parms, NULL );

	return CannotJumpNow_Parms.ReturnValue;
};

// Function Engine.Pawn.PlayFootStepSound
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            FootDown                       ( CPF_Parm )

void APawn::eventPlayFootStepSound ( int FootDown )
{
	static UFunction* pFnPlayFootStepSound = NULL;

	if ( ! pFnPlayFootStepSound )
		pFnPlayFootStepSound = (UFunction*) UObject::GObjObjects()->Data[ 24421 ];

	APawn_eventPlayFootStepSound_Parms PlayFootStepSound_Parms;
	PlayFootStepSound_Parms.FootDown = FootDown;

	this->ProcessEvent ( pFnPlayFootStepSound, &PlayFootStepSound_Parms, NULL );
};

// Function Engine.Pawn.TornOff
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APawn::eventTornOff ( )
{
	static UFunction* pFnTornOff = NULL;

	if ( ! pFnTornOff )
		pFnTornOff = (UFunction*) UObject::GObjObjects()->Data[ 24418 ];

	APawn_eventTornOff_Parms TornOff_Parms;

	this->ProcessEvent ( pFnTornOff, &TornOff_Parms, NULL );
};

// Function Engine.Pawn.PlayDying
// [0x00020102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void APawn::PlayDying ( class UClass* DamageType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 24414 ];

	APawn_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.DamageType = DamageType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function Engine.Pawn.SetDyingPhysics
// [0x00020002] 
// Parameters infos:

void APawn::SetDyingPhysics ( )
{
	static UFunction* pFnSetDyingPhysics = NULL;

	if ( ! pFnSetDyingPhysics )
		pFnSetDyingPhysics = (UFunction*) UObject::GObjObjects()->Data[ 24379 ];

	APawn_execSetDyingPhysics_Parms SetDyingPhysics_Parms;

	this->ProcessEvent ( pFnSetDyingPhysics, &SetDyingPhysics_Parms, NULL );
};

// Function Engine.Pawn.TurnOff
// [0x00020102] 
// Parameters infos:

void APawn::TurnOff ( )
{
	static UFunction* pFnTurnOff = NULL;

	if ( ! pFnTurnOff )
		pFnTurnOff = (UFunction*) UObject::GObjObjects()->Data[ 24378 ];

	APawn_execTurnOff_Parms TurnOff_Parms;

	this->ProcessEvent ( pFnTurnOff, &TurnOff_Parms, NULL );
};

// Function Engine.Pawn.PlayHit
// [0x00020002] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )

void APawn::PlayHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnPlayHit = NULL;

	if ( ! pFnPlayHit )
		pFnPlayHit = (UFunction*) UObject::GObjObjects()->Data[ 24370 ];

	APawn_execPlayHit_Parms PlayHit_Parms;
	PlayHit_Parms.Damage = Damage;
	PlayHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &PlayHit_Parms.HitLocation, &HitLocation, 0xC );
	PlayHit_Parms.DamageType = DamageType;
	memcpy ( &PlayHit_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &PlayHit_Parms.HitInfo, &HitInfo, 0x28 );

	this->ProcessEvent ( pFnPlayHit, &PlayHit_Parms, NULL );
};

// Function Engine.Pawn.PlayDyingSound
// [0x00020000] 
// Parameters infos:

void APawn::PlayDyingSound ( )
{
	static UFunction* pFnPlayDyingSound = NULL;

	if ( ! pFnPlayDyingSound )
		pFnPlayDyingSound = (UFunction*) UObject::GObjObjects()->Data[ 24369 ];

	APawn_execPlayDyingSound_Parms PlayDyingSound_Parms;

	this->ProcessEvent ( pFnPlayDyingSound, &PlayDyingSound_Parms, NULL );
};

// Function Engine.Pawn.DoJump
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bUpdating                      ( CPF_Parm )

bool APawn::DoJump ( unsigned long bUpdating )
{
	static UFunction* pFnDoJump = NULL;

	if ( ! pFnDoJump )
		pFnDoJump = (UFunction*) UObject::GObjObjects()->Data[ 10929 ];

	APawn_execDoJump_Parms DoJump_Parms;
	DoJump_Parms.bUpdating = bUpdating;

	this->ProcessEvent ( pFnDoJump, &DoJump_Parms, NULL );

	return DoJump_Parms.ReturnValue;
};

// Function Engine.Pawn.CheckWaterJump
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 WallNormal                     ( CPF_Parm | CPF_OutParm )

bool APawn::CheckWaterJump ( struct FVector* WallNormal )
{
	static UFunction* pFnCheckWaterJump = NULL;

	if ( ! pFnCheckWaterJump )
		pFnCheckWaterJump = (UFunction*) UObject::GObjObjects()->Data[ 11023 ];

	APawn_execCheckWaterJump_Parms CheckWaterJump_Parms;

	this->ProcessEvent ( pFnCheckWaterJump, &CheckWaterJump_Parms, NULL );

	if ( WallNormal )
		memcpy ( WallNormal, &CheckWaterJump_Parms.WallNormal, 0xC );

	return CheckWaterJump_Parms.ReturnValue;
};

// Function Engine.Pawn.TakeDrowningDamage
// [0x00020000] 
// Parameters infos:

void APawn::TakeDrowningDamage ( )
{
	static UFunction* pFnTakeDrowningDamage = NULL;

	if ( ! pFnTakeDrowningDamage )
		pFnTakeDrowningDamage = (UFunction*) UObject::GObjObjects()->Data[ 24357 ];

	APawn_execTakeDrowningDamage_Parms TakeDrowningDamage_Parms;

	this->ProcessEvent ( pFnTakeDrowningDamage, &TakeDrowningDamage_Parms, NULL );
};

// Function Engine.Pawn.BreathTimer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APawn::eventBreathTimer ( )
{
	static UFunction* pFnBreathTimer = NULL;

	if ( ! pFnBreathTimer )
		pFnBreathTimer = (UFunction*) UObject::GObjObjects()->Data[ 24356 ];

	APawn_eventBreathTimer_Parms BreathTimer_Parms;

	this->ProcessEvent ( pFnBreathTimer, &BreathTimer_Parms, NULL );
};

// Function Engine.Pawn.IsInPain
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsInPain ( )
{
	static UFunction* pFnIsInPain = NULL;

	if ( ! pFnIsInPain )
		pFnIsInPain = (UFunction*) UObject::GObjObjects()->Data[ 24353 ];

	APawn_execIsInPain_Parms IsInPain_Parms;

	this->ProcessEvent ( pFnIsInPain, &IsInPain_Parms, NULL );

	return IsInPain_Parms.ReturnValue;
};

// Function Engine.Pawn.TouchingWaterVolume
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::TouchingWaterVolume ( )
{
	static UFunction* pFnTouchingWaterVolume = NULL;

	if ( ! pFnTouchingWaterVolume )
		pFnTouchingWaterVolume = (UFunction*) UObject::GObjObjects()->Data[ 11026 ];

	APawn_execTouchingWaterVolume_Parms TouchingWaterVolume_Parms;

	this->ProcessEvent ( pFnTouchingWaterVolume, &TouchingWaterVolume_Parms, NULL );

	return TouchingWaterVolume_Parms.ReturnValue;
};

// Function Engine.Pawn.HeadVolumeChange
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APhysicsVolume*          newHeadVolume                  ( CPF_Parm )

void APawn::eventHeadVolumeChange ( class APhysicsVolume* newHeadVolume )
{
	static UFunction* pFnHeadVolumeChange = NULL;

	if ( ! pFnHeadVolumeChange )
		pFnHeadVolumeChange = (UFunction*) UObject::GObjObjects()->Data[ 24350 ];

	APawn_eventHeadVolumeChange_Parms HeadVolumeChange_Parms;
	HeadVolumeChange_Parms.newHeadVolume = newHeadVolume;

	this->ProcessEvent ( pFnHeadVolumeChange, &HeadVolumeChange_Parms, NULL );
};

// Function Engine.Pawn.Landed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void APawn::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 24347 ];

	APawn_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function Engine.Pawn.Falling
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void APawn::eventFalling ( )
{
	static UFunction* pFnFalling = NULL;

	if ( ! pFnFalling )
		pFnFalling = (UFunction*) UObject::GObjObjects()->Data[ 24346 ];

	APawn_eventFalling_Parms Falling_Parms;

	this->ProcessEvent ( pFnFalling, &Falling_Parms, NULL );
};

// Function Engine.Pawn.Died
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool APawn::Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 10371 ];

	APawn_execDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.DamageType = DamageType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function Engine.Pawn.ThrowWeaponOnDeath
// [0x00020002] 
// Parameters infos:

void APawn::ThrowWeaponOnDeath ( )
{
	static UFunction* pFnThrowWeaponOnDeath = NULL;

	if ( ! pFnThrowWeaponOnDeath )
		pFnThrowWeaponOnDeath = (UFunction*) UObject::GObjObjects()->Data[ 24341 ];

	APawn_execThrowWeaponOnDeath_Parms ThrowWeaponOnDeath_Parms;

	this->ProcessEvent ( pFnThrowWeaponOnDeath, &ThrowWeaponOnDeath_Parms, NULL );
};

// Function Engine.Pawn.IsSameTeam
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool APawn::eventIsSameTeam ( class APawn* Other )
{
	static UFunction* pFnIsSameTeam = NULL;

	if ( ! pFnIsSameTeam )
		pFnIsSameTeam = (UFunction*) UObject::GObjObjects()->Data[ 24338 ];

	APawn_eventIsSameTeam_Parms IsSameTeam_Parms;
	IsSameTeam_Parms.Other = Other;

	this->ProcessEvent ( pFnIsSameTeam, &IsSameTeam_Parms, NULL );

	return IsSameTeam_Parms.ReturnValue;
};

// Function Engine.Pawn.GetTeam
// [0x00020102] 
// Parameters infos:
// class ATeamInfo*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATeamInfo* APawn::GetTeam ( )
{
	static UFunction* pFnGetTeam = NULL;

	if ( ! pFnGetTeam )
		pFnGetTeam = (UFunction*) UObject::GObjObjects()->Data[ 24336 ];

	APawn_execGetTeam_Parms GetTeam_Parms;

	this->ProcessEvent ( pFnGetTeam, &GetTeam_Parms, NULL );

	return GetTeam_Parms.ReturnValue;
};

// Function Engine.Pawn.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char APawn::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = (UFunction*) UObject::GObjObjects()->Data[ 24334 ];

	APawn_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.Pawn.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )
// class UDamageType*             pDamage                        ( CPF_OptionalParm | CPF_Parm )

void APawn::eventTakeDamage ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UDamageType* pDamage )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 24321 ];

	APawn_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x28 );
	TakeDamage_Parms.DamageCauser = DamageCauser;
	TakeDamage_Parms.pDamage = pDamage;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.Pawn.SetKillInstigator
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

class AController* APawn::SetKillInstigator ( class AController* InstigatedBy, class UClass* DamageType )
{
	static UFunction* pFnSetKillInstigator = NULL;

	if ( ! pFnSetKillInstigator )
		pFnSetKillInstigator = (UFunction*) UObject::GObjObjects()->Data[ 24317 ];

	APawn_execSetKillInstigator_Parms SetKillInstigator_Parms;
	SetKillInstigator_Parms.InstigatedBy = InstigatedBy;
	SetKillInstigator_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnSetKillInstigator, &SetKillInstigator_Parms, NULL );

	return SetKillInstigator_Parms.ReturnValue;
};

// Function Engine.Pawn.NotifyTakeHit
// [0x00020002] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void APawn::NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 24311 ];

	APawn_execNotifyTakeHit_Parms NotifyTakeHit_Parms;
	NotifyTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NotifyTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyTakeHit_Parms.Damage = Damage;
	NotifyTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function Engine.Pawn.TakeRadiusDamageOnBones
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// struct TArray<struct FName>    Bones                          ( CPF_Parm | CPF_NeedCtorLink )

bool APawn::eventTakeRadiusDamageOnBones ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, struct TArray<struct FName> Bones )
{
	static UFunction* pFnTakeRadiusDamageOnBones = NULL;

	if ( ! pFnTakeRadiusDamageOnBones )
		pFnTakeRadiusDamageOnBones = (UFunction*) UObject::GObjObjects()->Data[ 24292 ];

	APawn_eventTakeRadiusDamageOnBones_Parms TakeRadiusDamageOnBones_Parms;
	TakeRadiusDamageOnBones_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamageOnBones_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamageOnBones_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamageOnBones_Parms.DamageType = DamageType;
	TakeRadiusDamageOnBones_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamageOnBones_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamageOnBones_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamageOnBones_Parms.DamageCauser = DamageCauser;
	memcpy ( &TakeRadiusDamageOnBones_Parms.Bones, &Bones, 0x10 );

	this->ProcessEvent ( pFnTakeRadiusDamageOnBones, &TakeRadiusDamageOnBones_Parms, NULL );

	return TakeRadiusDamageOnBones_Parms.ReturnValue;
};

// Function Engine.Pawn.PruneDamagedBoneList
// [0x00420000] 
// Parameters infos:
// struct TArray<struct FName>    Bones                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void APawn::PruneDamagedBoneList ( struct TArray<struct FName>* Bones )
{
	static UFunction* pFnPruneDamagedBoneList = NULL;

	if ( ! pFnPruneDamagedBoneList )
		pFnPruneDamagedBoneList = (UFunction*) UObject::GObjObjects()->Data[ 24289 ];

	APawn_execPruneDamagedBoneList_Parms PruneDamagedBoneList_Parms;

	this->ProcessEvent ( pFnPruneDamagedBoneList, &PruneDamagedBoneList_Parms, NULL );

	if ( Bones )
		memcpy ( Bones, &PruneDamagedBoneList_Parms.Bones, 0x10 );
};

// Function Engine.Pawn.HealDamage
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )
// class AController*             Healer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

bool APawn::eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType )
{
	static UFunction* pFnHealDamage = NULL;

	if ( ! pFnHealDamage )
		pFnHealDamage = (UFunction*) UObject::GObjObjects()->Data[ 24284 ];

	APawn_eventHealDamage_Parms HealDamage_Parms;
	HealDamage_Parms.Amount = Amount;
	HealDamage_Parms.Healer = Healer;
	HealDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnHealDamage, &HealDamage_Parms, NULL );

	return HealDamage_Parms.ReturnValue;
};

// Function Engine.Pawn.AdjustDamage
// [0x00424000] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// int                            inDamage                       ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void APawn::AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, int* inDamage, struct FVector* Momentum )
{
	static UFunction* pFnAdjustDamage = NULL;

	if ( ! pFnAdjustDamage )
		pFnAdjustDamage = (UFunction*) UObject::GObjObjects()->Data[ 24277 ];

	APawn_execAdjustDamage_Parms AdjustDamage_Parms;
	AdjustDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &AdjustDamage_Parms.HitLocation, &HitLocation, 0xC );
	AdjustDamage_Parms.DamageType = DamageType;
	memcpy ( &AdjustDamage_Parms.HitInfo, &HitInfo, 0x28 );

	this->ProcessEvent ( pFnAdjustDamage, &AdjustDamage_Parms, NULL );

	if ( inDamage )
		*inDamage = AdjustDamage_Parms.inDamage;

	if ( Momentum )
		memcpy ( Momentum, &AdjustDamage_Parms.Momentum, 0xC );
};

// Function Engine.Pawn.SetMovementPhysics
// [0x00020002] 
// Parameters infos:

void APawn::SetMovementPhysics ( )
{
	static UFunction* pFnSetMovementPhysics = NULL;

	if ( ! pFnSetMovementPhysics )
		pFnSetMovementPhysics = (UFunction*) UObject::GObjObjects()->Data[ 24276 ];

	APawn_execSetMovementPhysics_Parms SetMovementPhysics_Parms;

	this->ProcessEvent ( pFnSetMovementPhysics, &SetMovementPhysics_Parms, NULL );
};

// Function Engine.Pawn.Gasp
// [0x00020000] 
// Parameters infos:

void APawn::Gasp ( )
{
	static UFunction* pFnGasp = NULL;

	if ( ! pFnGasp )
		pFnGasp = (UFunction*) UObject::GObjObjects()->Data[ 24275 ];

	APawn_execGasp_Parms Gasp_Parms;

	this->ProcessEvent ( pFnGasp, &Gasp_Parms, NULL );
};

// Function Engine.Pawn.OnGiveInventory
// [0x00020102] 
// Parameters infos:
// class USeqAct_GiveInventory*   inAction                       ( CPF_Parm )

void APawn::OnGiveInventory ( class USeqAct_GiveInventory* inAction )
{
	static UFunction* pFnOnGiveInventory = NULL;

	if ( ! pFnOnGiveInventory )
		pFnOnGiveInventory = (UFunction*) UObject::GObjObjects()->Data[ 24268 ];

	APawn_execOnGiveInventory_Parms OnGiveInventory_Parms;
	OnGiveInventory_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnGiveInventory, &OnGiveInventory_Parms, NULL );
};

// Function Engine.Pawn.OnAssignController
// [0x00020002] 
// Parameters infos:
// class USeqAct_AssignController* inAction                       ( CPF_Parm )

void APawn::OnAssignController ( class USeqAct_AssignController* inAction )
{
	static UFunction* pFnOnAssignController = NULL;

	if ( ! pFnOnAssignController )
		pFnOnAssignController = (UFunction*) UObject::GObjObjects()->Data[ 24264 ];

	APawn_execOnAssignController_Parms OnAssignController_Parms;
	OnAssignController_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnAssignController, &OnAssignController_Parms, NULL );
};

// Function Engine.Pawn.ReceivedNewEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USequenceEvent*          Evt                            ( CPF_Parm )

void APawn::eventReceivedNewEvent ( class USequenceEvent* Evt )
{
	static UFunction* pFnReceivedNewEvent = NULL;

	if ( ! pFnReceivedNewEvent )
		pFnReceivedNewEvent = (UFunction*) UObject::GObjObjects()->Data[ 24262 ];

	APawn_eventReceivedNewEvent_Parms ReceivedNewEvent_Parms;
	ReceivedNewEvent_Parms.Evt = Evt;

	this->ProcessEvent ( pFnReceivedNewEvent, &ReceivedNewEvent_Parms, NULL );
};

// Function Engine.Pawn.SpawnDefaultController
// [0x00020002] 
// Parameters infos:

void APawn::SpawnDefaultController ( )
{
	static UFunction* pFnSpawnDefaultController = NULL;

	if ( ! pFnSpawnDefaultController )
		pFnSpawnDefaultController = (UFunction*) UObject::GObjObjects()->Data[ 24260 ];

	APawn_execSpawnDefaultController_Parms SpawnDefaultController_Parms;

	this->ProcessEvent ( pFnSpawnDefaultController, &SpawnDefaultController_Parms, NULL );
};

// Function Engine.Pawn.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APawn::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 24256 ];

	APawn_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Pawn.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APawn::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 24254 ];

	APawn_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.Pawn.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APawn::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 24253 ];

	APawn_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Pawn.DetachFromController
// [0x00024002] 
// Parameters infos:
// unsigned long                  bDestroyController             ( CPF_OptionalParm | CPF_Parm )

void APawn::DetachFromController ( unsigned long bDestroyController )
{
	static UFunction* pFnDetachFromController = NULL;

	if ( ! pFnDetachFromController )
		pFnDetachFromController = (UFunction*) UObject::GObjObjects()->Data[ 24250 ];

	APawn_execDetachFromController_Parms DetachFromController_Parms;
	DetachFromController_Parms.bDestroyController = bDestroyController;

	this->ProcessEvent ( pFnDetachFromController, &DetachFromController_Parms, NULL );
};

// Function Engine.Pawn.CrushedBy
// [0x00020002] 
// Parameters infos:
// class APawn*                   OtherPawn                      ( CPF_Parm )

void APawn::CrushedBy ( class APawn* OtherPawn )
{
	static UFunction* pFnCrushedBy = NULL;

	if ( ! pFnCrushedBy )
		pFnCrushedBy = (UFunction*) UObject::GObjObjects()->Data[ 24248 ];

	APawn_execCrushedBy_Parms CrushedBy_Parms;
	CrushedBy_Parms.OtherPawn = OtherPawn;

	this->ProcessEvent ( pFnCrushedBy, &CrushedBy_Parms, NULL );
};

// Function Engine.Pawn.CanBeBaseForPawn
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   aPawn                          ( CPF_Parm )

bool APawn::CanBeBaseForPawn ( class APawn* aPawn )
{
	static UFunction* pFnCanBeBaseForPawn = NULL;

	if ( ! pFnCanBeBaseForPawn )
		pFnCanBeBaseForPawn = (UFunction*) UObject::GObjObjects()->Data[ 24244 ];

	APawn_execCanBeBaseForPawn_Parms CanBeBaseForPawn_Parms;
	CanBeBaseForPawn_Parms.aPawn = aPawn;

	this->ProcessEvent ( pFnCanBeBaseForPawn, &CanBeBaseForPawn_Parms, NULL );

	return CanBeBaseForPawn_Parms.ReturnValue;
};

// Function Engine.Pawn.BaseChange
// [0x00020822] ( FUNC_Event )
// Parameters infos:

void APawn::eventBaseChange ( )
{
	static UFunction* pFnBaseChange = NULL;

	if ( ! pFnBaseChange )
		pFnBaseChange = (UFunction*) UObject::GObjObjects()->Data[ 24242 ];

	APawn_eventBaseChange_Parms BaseChange_Parms;

	this->ProcessEvent ( pFnBaseChange, &BaseChange_Parms, NULL );
};

// Function Engine.Pawn.StuckOnPawn
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   OtherPawn                      ( CPF_Parm )

void APawn::eventStuckOnPawn ( class APawn* OtherPawn )
{
	static UFunction* pFnStuckOnPawn = NULL;

	if ( ! pFnStuckOnPawn )
		pFnStuckOnPawn = (UFunction*) UObject::GObjObjects()->Data[ 24240 ];

	APawn_eventStuckOnPawn_Parms StuckOnPawn_Parms;
	StuckOnPawn_Parms.OtherPawn = OtherPawn;

	this->ProcessEvent ( pFnStuckOnPawn, &StuckOnPawn_Parms, NULL );
};

// Function Engine.Pawn.JumpOffPawn
// [0x00020002] 
// Parameters infos:

void APawn::JumpOffPawn ( )
{
	static UFunction* pFnJumpOffPawn = NULL;

	if ( ! pFnJumpOffPawn )
		pFnJumpOffPawn = (UFunction*) UObject::GObjObjects()->Data[ 24239 ];

	APawn_execJumpOffPawn_Parms JumpOffPawn_Parms;

	this->ProcessEvent ( pFnJumpOffPawn, &JumpOffPawn_Parms, NULL );
};

// Function Engine.Pawn.gibbedBy
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APawn::gibbedBy ( class AActor* Other )
{
	static UFunction* pFngibbedBy = NULL;

	if ( ! pFngibbedBy )
		pFngibbedBy = (UFunction*) UObject::GObjObjects()->Data[ 24237 ];

	APawn_execgibbedBy_Parms gibbedBy_Parms;
	gibbedBy_Parms.Other = Other;

	this->ProcessEvent ( pFngibbedBy, &gibbedBy_Parms, NULL );
};

// Function Engine.Pawn.EncroachedBy
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APawn::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = (UFunction*) UObject::GObjObjects()->Data[ 24235 ];

	APawn_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function Engine.Pawn.EncroachingOn
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool APawn::eventEncroachingOn ( class AActor* Other )
{
	static UFunction* pFnEncroachingOn = NULL;

	if ( ! pFnEncroachingOn )
		pFnEncroachingOn = (UFunction*) UObject::GObjObjects()->Data[ 24232 ];

	APawn_eventEncroachingOn_Parms EncroachingOn_Parms;
	EncroachingOn_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachingOn, &EncroachingOn_Parms, NULL );

	return EncroachingOn_Parms.ReturnValue;
};

// Function Engine.Pawn.FaceRotation
// [0x00020102] 
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )

void APawn::FaceRotation ( struct FRotator NewRotation, float DeltaTime )
{
	static UFunction* pFnFaceRotation = NULL;

	if ( ! pFnFaceRotation )
		pFnFaceRotation = (UFunction*) UObject::GObjObjects()->Data[ 24229 ];

	APawn_execFaceRotation_Parms FaceRotation_Parms;
	memcpy ( &FaceRotation_Parms.NewRotation, &NewRotation, 0xC );
	FaceRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnFaceRotation, &FaceRotation_Parms, NULL );
};

// Function Engine.Pawn.UpdatePawnRotation
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )

void APawn::eventUpdatePawnRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnUpdatePawnRotation = NULL;

	if ( ! pFnUpdatePawnRotation )
		pFnUpdatePawnRotation = (UFunction*) UObject::GObjObjects()->Data[ 24227 ];

	APawn_eventUpdatePawnRotation_Parms UpdatePawnRotation_Parms;
	memcpy ( &UpdatePawnRotation_Parms.NewRotation, &NewRotation, 0xC );

	this->ProcessEvent ( pFnUpdatePawnRotation, &UpdatePawnRotation_Parms, NULL );
};

// Function Engine.Pawn.ClientSetRotation
// [0x00020002] 
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )

void APawn::ClientSetRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnClientSetRotation = NULL;

	if ( ! pFnClientSetRotation )
		pFnClientSetRotation = (UFunction*) UObject::GObjObjects()->Data[ 24225 ];

	APawn_execClientSetRotation_Parms ClientSetRotation_Parms;
	memcpy ( &ClientSetRotation_Parms.NewRotation, &NewRotation, 0xC );

	this->ProcessEvent ( pFnClientSetRotation, &ClientSetRotation_Parms, NULL );
};

// Function Engine.Pawn.ClientSetLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Parm )
// struct FRotator                NewRotation                    ( CPF_Parm )

void APawn::ClientSetLocation ( struct FVector NewLocation, struct FRotator NewRotation )
{
	static UFunction* pFnClientSetLocation = NULL;

	if ( ! pFnClientSetLocation )
		pFnClientSetLocation = (UFunction*) UObject::GObjObjects()->Data[ 24222 ];

	APawn_execClientSetLocation_Parms ClientSetLocation_Parms;
	memcpy ( &ClientSetLocation_Parms.NewLocation, &NewLocation, 0xC );
	memcpy ( &ClientSetLocation_Parms.NewRotation, &NewRotation, 0xC );

	this->ProcessEvent ( pFnClientSetLocation, &ClientSetLocation_Parms, NULL );
};

// Function Engine.Pawn.ClientRestart
// [0x00020102] 
// Parameters infos:

void APawn::ClientRestart ( )
{
	static UFunction* pFnClientRestart = NULL;

	if ( ! pFnClientRestart )
		pFnClientRestart = (UFunction*) UObject::GObjObjects()->Data[ 24221 ];

	APawn_execClientRestart_Parms ClientRestart_Parms;

	this->ProcessEvent ( pFnClientRestart, &ClientRestart_Parms, NULL );
};

// Function Engine.Pawn.Restart
// [0x00020000] 
// Parameters infos:

void APawn::Restart ( )
{
	static UFunction* pFnRestart = NULL;

	if ( ! pFnRestart )
		pFnRestart = (UFunction*) UObject::GObjObjects()->Data[ 24220 ];

	APawn_execRestart_Parms Restart_Parms;

	this->ProcessEvent ( pFnRestart, &Restart_Parms, NULL );
};

// Function Engine.Pawn.TakeFallingDamage
// [0x00020002] 
// Parameters infos:

void APawn::TakeFallingDamage ( )
{
	static UFunction* pFnTakeFallingDamage = NULL;

	if ( ! pFnTakeFallingDamage )
		pFnTakeFallingDamage = (UFunction*) UObject::GObjObjects()->Data[ 24217 ];

	APawn_execTakeFallingDamage_Parms TakeFallingDamage_Parms;

	this->ProcessEvent ( pFnTakeFallingDamage, &TakeFallingDamage_Parms, NULL );
};

// Function Engine.Pawn.KilledBy
// [0x00020002] 
// Parameters infos:
// class APawn*                   EventInstigator                ( CPF_Parm )

void APawn::KilledBy ( class APawn* EventInstigator )
{
	static UFunction* pFnKilledBy = NULL;

	if ( ! pFnKilledBy )
		pFnKilledBy = (UFunction*) UObject::GObjObjects()->Data[ 24213 ];

	APawn_execKilledBy_Parms KilledBy_Parms;
	KilledBy_Parms.EventInstigator = EventInstigator;

	this->ProcessEvent ( pFnKilledBy, &KilledBy_Parms, NULL );
};

// Function Engine.Pawn.AddVelocity
// [0x00024002] 
// Parameters infos:
// struct FVector                 NewVelocity                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )

void APawn::AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnAddVelocity = NULL;

	if ( ! pFnAddVelocity )
		pFnAddVelocity = (UFunction*) UObject::GObjObjects()->Data[ 24207 ];

	APawn_execAddVelocity_Parms AddVelocity_Parms;
	memcpy ( &AddVelocity_Parms.NewVelocity, &NewVelocity, 0xC );
	memcpy ( &AddVelocity_Parms.HitLocation, &HitLocation, 0xC );
	AddVelocity_Parms.DamageType = DamageType;
	memcpy ( &AddVelocity_Parms.HitInfo, &HitInfo, 0x28 );

	this->ProcessEvent ( pFnAddVelocity, &AddVelocity_Parms, NULL );
};

// Function Engine.Pawn.HandleMomentum
// [0x00024002] 
// Parameters infos:
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )

void APawn::HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnHandleMomentum = NULL;

	if ( ! pFnHandleMomentum )
		pFnHandleMomentum = (UFunction*) UObject::GObjObjects()->Data[ 24202 ];

	APawn_execHandleMomentum_Parms HandleMomentum_Parms;
	memcpy ( &HandleMomentum_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &HandleMomentum_Parms.HitLocation, &HitLocation, 0xC );
	HandleMomentum_Parms.DamageType = DamageType;
	memcpy ( &HandleMomentum_Parms.HitInfo, &HitInfo, 0x28 );

	this->ProcessEvent ( pFnHandleMomentum, &HandleMomentum_Parms, NULL );
};

// Function Engine.Pawn.RestartPlayer
// [0x00020000] 
// Parameters infos:

void APawn::RestartPlayer ( )
{
	static UFunction* pFnRestartPlayer = NULL;

	if ( ! pFnRestartPlayer )
		pFnRestartPlayer = (UFunction*) UObject::GObjObjects()->Data[ 24201 ];

	APawn_execRestartPlayer_Parms RestartPlayer_Parms;

	this->ProcessEvent ( pFnRestartPlayer, &RestartPlayer_Parms, NULL );
};

// Function Engine.Pawn.StartCrouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          HeightAdjust                   ( CPF_Parm )

void APawn::eventStartCrouch ( float HeightAdjust )
{
	static UFunction* pFnStartCrouch = NULL;

	if ( ! pFnStartCrouch )
		pFnStartCrouch = (UFunction*) UObject::GObjObjects()->Data[ 24199 ];

	APawn_eventStartCrouch_Parms StartCrouch_Parms;
	StartCrouch_Parms.HeightAdjust = HeightAdjust;

	this->ProcessEvent ( pFnStartCrouch, &StartCrouch_Parms, NULL );
};

// Function Engine.Pawn.EndCrouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          HeightAdjust                   ( CPF_Parm )

void APawn::eventEndCrouch ( float HeightAdjust )
{
	static UFunction* pFnEndCrouch = NULL;

	if ( ! pFnEndCrouch )
		pFnEndCrouch = (UFunction*) UObject::GObjObjects()->Data[ 24196 ];

	APawn_eventEndCrouch_Parms EndCrouch_Parms;
	EndCrouch_Parms.HeightAdjust = HeightAdjust;

	this->ProcessEvent ( pFnEndCrouch, &EndCrouch_Parms, NULL );
};

// Function Engine.Pawn.ShouldCrouch
// [0x00020002] 
// Parameters infos:
// unsigned long                  bCrouch                        ( CPF_Parm )

void APawn::ShouldCrouch ( unsigned long bCrouch )
{
	static UFunction* pFnShouldCrouch = NULL;

	if ( ! pFnShouldCrouch )
		pFnShouldCrouch = (UFunction*) UObject::GObjObjects()->Data[ 24194 ];

	APawn_execShouldCrouch_Parms ShouldCrouch_Parms;
	ShouldCrouch_Parms.bCrouch = bCrouch;

	this->ProcessEvent ( pFnShouldCrouch, &ShouldCrouch_Parms, NULL );
};

// Function Engine.Pawn.UnCrouch
// [0x00020102] 
// Parameters infos:

void APawn::UnCrouch ( )
{
	static UFunction* pFnUnCrouch = NULL;

	if ( ! pFnUnCrouch )
		pFnUnCrouch = (UFunction*) UObject::GObjObjects()->Data[ 24192 ];

	APawn_execUnCrouch_Parms UnCrouch_Parms;

	this->ProcessEvent ( pFnUnCrouch, &UnCrouch_Parms, NULL );
};

// Function Engine.Pawn.OutsideWorldBounds
// [0x00020922] ( FUNC_Event )
// Parameters infos:

void APawn::eventOutsideWorldBounds ( )
{
	static UFunction* pFnOutsideWorldBounds = NULL;

	if ( ! pFnOutsideWorldBounds )
		pFnOutsideWorldBounds = (UFunction*) UObject::GObjObjects()->Data[ 24191 ];

	APawn_eventOutsideWorldBounds_Parms OutsideWorldBounds_Parms;

	this->ProcessEvent ( pFnOutsideWorldBounds, &OutsideWorldBounds_Parms, NULL );
};

// Function Engine.Pawn.FellOutOfWorld
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void APawn::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 24189 ];

	APawn_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function Engine.Pawn.ModifyVelocity
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 OldVelocity                    ( CPF_Parm )

void APawn::eventModifyVelocity ( float DeltaTime, struct FVector OldVelocity )
{
	static UFunction* pFnModifyVelocity = NULL;

	if ( ! pFnModifyVelocity )
		pFnModifyVelocity = (UFunction*) UObject::GObjObjects()->Data[ 24186 ];

	APawn_eventModifyVelocity_Parms ModifyVelocity_Parms;
	ModifyVelocity_Parms.DeltaTime = DeltaTime;
	memcpy ( &ModifyVelocity_Parms.OldVelocity, &OldVelocity, 0xC );

	this->ProcessEvent ( pFnModifyVelocity, &ModifyVelocity_Parms, NULL );
};

// Function Engine.Pawn.JumpOutOfWater
// [0x00020002] 
// Parameters infos:
// struct FVector                 jumpDir                        ( CPF_Parm )

void APawn::JumpOutOfWater ( struct FVector jumpDir )
{
	static UFunction* pFnJumpOutOfWater = NULL;

	if ( ! pFnJumpOutOfWater )
		pFnJumpOutOfWater = (UFunction*) UObject::GObjObjects()->Data[ 24184 ];

	APawn_execJumpOutOfWater_Parms JumpOutOfWater_Parms;
	memcpy ( &JumpOutOfWater_Parms.jumpDir, &jumpDir, 0xC );

	this->ProcessEvent ( pFnJumpOutOfWater, &JumpOutOfWater_Parms, NULL );
};

// Function Engine.Pawn.FinishedInterpolation
// [0x00020002] 
// Parameters infos:

void APawn::FinishedInterpolation ( )
{
	static UFunction* pFnFinishedInterpolation = NULL;

	if ( ! pFnFinishedInterpolation )
		pFnFinishedInterpolation = (UFunction*) UObject::GObjObjects()->Data[ 24183 ];

	APawn_execFinishedInterpolation_Parms FinishedInterpolation_Parms;

	this->ProcessEvent ( pFnFinishedInterpolation, &FinishedInterpolation_Parms, NULL );
};

// Function Engine.Pawn.ClientMessage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void APawn::eventClientMessage ( struct FString S, struct FName Type )
{
	static UFunction* pFnClientMessage = NULL;

	if ( ! pFnClientMessage )
		pFnClientMessage = (UFunction*) UObject::GObjObjects()->Data[ 24180 ];

	APawn_eventClientMessage_Parms ClientMessage_Parms;
	memcpy ( &ClientMessage_Parms.S, &S, 0x10 );
	memcpy ( &ClientMessage_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnClientMessage, &ClientMessage_Parms, NULL );
};

// Function Engine.Pawn.ReceiveLocalizedMessage
// [0x00024002] 
// Parameters infos:
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void APawn::ReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnReceiveLocalizedMessage = NULL;

	if ( ! pFnReceiveLocalizedMessage )
		pFnReceiveLocalizedMessage = (UFunction*) UObject::GObjObjects()->Data[ 24174 ];

	APawn_execReceiveLocalizedMessage_Parms ReceiveLocalizedMessage_Parms;
	ReceiveLocalizedMessage_Parms.Message = Message;
	ReceiveLocalizedMessage_Parms.Switch = Switch;
	ReceiveLocalizedMessage_Parms.RelatedPRI = RelatedPRI;
	ReceiveLocalizedMessage_Parms.RelatedPRI01 = RelatedPRI01;
	ReceiveLocalizedMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnReceiveLocalizedMessage, &ReceiveLocalizedMessage_Parms, NULL );
};

// Function Engine.Pawn.HandlePickup
// [0x00020002] 
// Parameters infos:
// class AInventory*              Inv                            ( CPF_Parm )

void APawn::HandlePickup ( class AInventory* Inv )
{
	static UFunction* pFnHandlePickup = NULL;

	if ( ! pFnHandlePickup )
		pFnHandlePickup = (UFunction*) UObject::GObjObjects()->Data[ 24172 ];

	APawn_execHandlePickup_Parms HandlePickup_Parms;
	HandlePickup_Parms.Inv = Inv;

	this->ProcessEvent ( pFnHandlePickup, &HandlePickup_Parms, NULL );
};

// Function Engine.Pawn.AdjustedStrength
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::AdjustedStrength ( )
{
	static UFunction* pFnAdjustedStrength = NULL;

	if ( ! pFnAdjustedStrength )
		pFnAdjustedStrength = (UFunction*) UObject::GObjObjects()->Data[ 24170 ];

	APawn_execAdjustedStrength_Parms AdjustedStrength_Parms;

	this->ProcessEvent ( pFnAdjustedStrength, &AdjustedStrength_Parms, NULL );

	return AdjustedStrength_Parms.ReturnValue;
};

// Function Engine.Pawn.LineOfSightTo
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool APawn::LineOfSightTo ( class AActor* Other )
{
	static UFunction* pFnLineOfSightTo = NULL;

	if ( ! pFnLineOfSightTo )
		pFnLineOfSightTo = (UFunction*) UObject::GObjObjects()->Data[ 23378 ];

	APawn_execLineOfSightTo_Parms LineOfSightTo_Parms;
	LineOfSightTo_Parms.Other = Other;

	this->ProcessEvent ( pFnLineOfSightTo, &LineOfSightTo_Parms, NULL );

	return LineOfSightTo_Parms.ReturnValue;
};

// Function Engine.Pawn.SetMoveTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  NewTarget                      ( CPF_Parm )

void APawn::SetMoveTarget ( class AActor* NewTarget )
{
	static UFunction* pFnSetMoveTarget = NULL;

	if ( ! pFnSetMoveTarget )
		pFnSetMoveTarget = (UFunction*) UObject::GObjObjects()->Data[ 24167 ];

	APawn_execSetMoveTarget_Parms SetMoveTarget_Parms;
	SetMoveTarget_Parms.NewTarget = NewTarget;

	this->ProcessEvent ( pFnSetMoveTarget, &SetMoveTarget_Parms, NULL );
};

// Function Engine.Pawn.GetMoveTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* APawn::GetMoveTarget ( )
{
	static UFunction* pFnGetMoveTarget = NULL;

	if ( ! pFnGetMoveTarget )
		pFnGetMoveTarget = (UFunction*) UObject::GObjObjects()->Data[ 24165 ];

	APawn_execGetMoveTarget_Parms GetMoveTarget_Parms;

	this->ProcessEvent ( pFnGetMoveTarget, &GetMoveTarget_Parms, NULL );

	return GetMoveTarget_Parms.ReturnValue;
};

// Function Engine.Pawn.NearMoveTarget
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::NearMoveTarget ( )
{
	static UFunction* pFnNearMoveTarget = NULL;

	if ( ! pFnNearMoveTarget )
		pFnNearMoveTarget = (UFunction*) UObject::GObjObjects()->Data[ 24163 ];

	APawn_execNearMoveTarget_Parms NearMoveTarget_Parms;

	this->ProcessEvent ( pFnNearMoveTarget, &NearMoveTarget_Parms, NULL );

	return NearMoveTarget_Parms.ReturnValue;
};

// Function Engine.Pawn.AffectedByHitEffects
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::AffectedByHitEffects ( )
{
	static UFunction* pFnAffectedByHitEffects = NULL;

	if ( ! pFnAffectedByHitEffects )
		pFnAffectedByHitEffects = (UFunction*) UObject::GObjObjects()->Data[ 24161 ];

	APawn_execAffectedByHitEffects_Parms AffectedByHitEffects_Parms;

	this->ProcessEvent ( pFnAffectedByHitEffects, &AffectedByHitEffects_Parms, NULL );

	return AffectedByHitEffects_Parms.ReturnValue;
};

// Function Engine.Pawn.InGodMode
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::InGodMode ( )
{
	static UFunction* pFnInGodMode = NULL;

	if ( ! pFnInGodMode )
		pFnInGodMode = (UFunction*) UObject::GObjObjects()->Data[ 20801 ];

	APawn_execInGodMode_Parms InGodMode_Parms;

	this->ProcessEvent ( pFnInGodMode, &InGodMode_Parms, NULL );

	return InGodMode_Parms.ReturnValue;
};

// Function Engine.Pawn.PawnCalcCamera
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaTime                     ( CPF_Parm )
// struct FVector                 out_CamLoc                     ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_CamRot                     ( CPF_Parm | CPF_OutParm )
// float                          out_FOV                        ( CPF_Parm | CPF_OutParm )

bool APawn::PawnCalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV )
{
	static UFunction* pFnPawnCalcCamera = NULL;

	if ( ! pFnPawnCalcCamera )
		pFnPawnCalcCamera = (UFunction*) UObject::GObjObjects()->Data[ 24155 ];

	APawn_execPawnCalcCamera_Parms PawnCalcCamera_Parms;
	PawnCalcCamera_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnPawnCalcCamera, &PawnCalcCamera_Parms, NULL );

	if ( out_CamLoc )
		memcpy ( out_CamLoc, &PawnCalcCamera_Parms.out_CamLoc, 0xC );

	if ( out_CamRot )
		memcpy ( out_CamRot, &PawnCalcCamera_Parms.out_CamRot, 0xC );

	if ( out_FOV )
		*out_FOV = PawnCalcCamera_Parms.out_FOV;

	return PawnCalcCamera_Parms.ReturnValue;
};

// Function Engine.Pawn.SetViewRotation
// [0x00020102] 
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )

void APawn::SetViewRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnSetViewRotation = NULL;

	if ( ! pFnSetViewRotation )
		pFnSetViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 24153 ];

	APawn_execSetViewRotation_Parms SetViewRotation_Parms;
	memcpy ( &SetViewRotation_Parms.NewRotation, &NewRotation, 0xC );

	this->ProcessEvent ( pFnSetViewRotation, &SetViewRotation_Parms, NULL );
};

// Function Engine.Pawn.GetAdjustedAimFor
// [0x00020102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 W                              ( CPF_Parm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator APawn::GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAimFor = NULL;

	if ( ! pFnGetAdjustedAimFor )
		pFnGetAdjustedAimFor = (UFunction*) UObject::GObjObjects()->Data[ 24149 ];

	APawn_execGetAdjustedAimFor_Parms GetAdjustedAimFor_Parms;
	GetAdjustedAimFor_Parms.W = W;
	memcpy ( &GetAdjustedAimFor_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAimFor, &GetAdjustedAimFor_Parms, NULL );

	return GetAdjustedAimFor_Parms.ReturnValue;
};

// Function Engine.Pawn.InFreeCam
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::eventInFreeCam ( )
{
	static UFunction* pFnInFreeCam = NULL;

	if ( ! pFnInFreeCam )
		pFnInFreeCam = (UFunction*) UObject::GObjObjects()->Data[ 24146 ];

	APawn_eventInFreeCam_Parms InFreeCam_Parms;

	this->ProcessEvent ( pFnInFreeCam, &InFreeCam_Parms, NULL );

	return InFreeCam_Parms.ReturnValue;
};

// Function Engine.Pawn.GetBaseAimRotation
// [0x00020922] ( FUNC_Event )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator APawn::eventGetBaseAimRotation ( )
{
	static UFunction* pFnGetBaseAimRotation = NULL;

	if ( ! pFnGetBaseAimRotation )
		pFnGetBaseAimRotation = (UFunction*) UObject::GObjObjects()->Data[ 8153 ];

	APawn_eventGetBaseAimRotation_Parms GetBaseAimRotation_Parms;

	this->ProcessEvent ( pFnGetBaseAimRotation, &GetBaseAimRotation_Parms, NULL );

	return GetBaseAimRotation_Parms.ReturnValue;
};

// Function Engine.Pawn.GetWeaponStartTraceLocation
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 CurrentWeapon                  ( CPF_OptionalParm | CPF_Parm )

struct FVector APawn::eventGetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon )
{
	static UFunction* pFnGetWeaponStartTraceLocation = NULL;

	if ( ! pFnGetWeaponStartTraceLocation )
		pFnGetWeaponStartTraceLocation = (UFunction*) UObject::GObjObjects()->Data[ 24138 ];

	APawn_eventGetWeaponStartTraceLocation_Parms GetWeaponStartTraceLocation_Parms;
	GetWeaponStartTraceLocation_Parms.CurrentWeapon = CurrentWeapon;

	this->ProcessEvent ( pFnGetWeaponStartTraceLocation, &GetWeaponStartTraceLocation_Parms, NULL );

	return GetWeaponStartTraceLocation_Parms.ReturnValue;
};

// Function Engine.Pawn.GetPawnViewLocation
// [0x00020D00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector APawn::eventGetPawnViewLocation ( )
{
	static UFunction* pFnGetPawnViewLocation = NULL;

	if ( ! pFnGetPawnViewLocation )
		pFnGetPawnViewLocation = (UFunction*) UObject::GObjObjects()->Data[ 24136 ];

	APawn_eventGetPawnViewLocation_Parms GetPawnViewLocation_Parms;

	pFnGetPawnViewLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPawnViewLocation, &GetPawnViewLocation_Parms, NULL );

	pFnGetPawnViewLocation->FunctionFlags |= 0x400;

	return GetPawnViewLocation_Parms.ReturnValue;
};

// Function Engine.Pawn.GetViewRotation
// [0x00020D00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator APawn::eventGetViewRotation ( )
{
	static UFunction* pFnGetViewRotation = NULL;

	if ( ! pFnGetViewRotation )
		pFnGetViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 23032 ];

	APawn_eventGetViewRotation_Parms GetViewRotation_Parms;

	pFnGetViewRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewRotation, &GetViewRotation_Parms, NULL );

	pFnGetViewRotation->FunctionFlags |= 0x400;

	return GetViewRotation_Parms.ReturnValue;
};

// Function Engine.Pawn.GetActorEyesViewPoint
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void APawn::eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetActorEyesViewPoint = NULL;

	if ( ! pFnGetActorEyesViewPoint )
		pFnGetActorEyesViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 24133 ];

	APawn_eventGetActorEyesViewPoint_Parms GetActorEyesViewPoint_Parms;

	this->ProcessEvent ( pFnGetActorEyesViewPoint, &GetActorEyesViewPoint_Parms, NULL );

	if ( out_Location )
		memcpy ( out_Location, &GetActorEyesViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetActorEyesViewPoint_Parms.out_Rotation, 0xC );
};

// Function Engine.Pawn.ProcessViewRotation
// [0x00420102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

void APawn::ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 24127 ];

	APawn_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &ProcessViewRotation_Parms.out_DeltaRot, 0xC );
};

// Function Engine.Pawn.IsFirstPerson
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsFirstPerson ( )
{
	static UFunction* pFnIsFirstPerson = NULL;

	if ( ! pFnIsFirstPerson )
		pFnIsFirstPerson = (UFunction*) UObject::GObjObjects()->Data[ 24124 ];

	APawn_execIsFirstPerson_Parms IsFirstPerson_Parms;

	this->ProcessEvent ( pFnIsFirstPerson, &IsFirstPerson_Parms, NULL );

	return IsFirstPerson_Parms.ReturnValue;
};

// Function Engine.Pawn.WasPlayerPawn
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::WasPlayerPawn ( )
{
	static UFunction* pFnWasPlayerPawn = NULL;

	if ( ! pFnWasPlayerPawn )
		pFnWasPlayerPawn = (UFunction*) UObject::GObjObjects()->Data[ 24122 ];

	APawn_execWasPlayerPawn_Parms WasPlayerPawn_Parms;

	this->ProcessEvent ( pFnWasPlayerPawn, &WasPlayerPawn_Parms, NULL );

	return WasPlayerPawn_Parms.ReturnValue;
};

// Function Engine.Pawn.IsPlayerPawn
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsPlayerPawn ( )
{
	static UFunction* pFnIsPlayerPawn = NULL;

	if ( ! pFnIsPlayerPawn )
		pFnIsPlayerPawn = (UFunction*) UObject::GObjObjects()->Data[ 16735 ];

	APawn_execIsPlayerPawn_Parms IsPlayerPawn_Parms;

	pFnIsPlayerPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayerPawn, &IsPlayerPawn_Parms, NULL );

	pFnIsPlayerPawn->FunctionFlags |= 0x400;

	return IsPlayerPawn_Parms.ReturnValue;
};

// Function Engine.Pawn.IsLocallyControlled
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             PawnController                 ( CPF_OptionalParm | CPF_Parm )

bool APawn::IsLocallyControlled ( class AController* PawnController )
{
	static UFunction* pFnIsLocallyControlled = NULL;

	if ( ! pFnIsLocallyControlled )
		pFnIsLocallyControlled = (UFunction*) UObject::GObjObjects()->Data[ 7011 ];

	APawn_execIsLocallyControlled_Parms IsLocallyControlled_Parms;
	IsLocallyControlled_Parms.PawnController = PawnController;

	pFnIsLocallyControlled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLocallyControlled, &IsLocallyControlled_Parms, NULL );

	pFnIsLocallyControlled->FunctionFlags |= 0x400;

	return IsLocallyControlled_Parms.ReturnValue;
};

// Function Engine.Pawn.IsHumanControlled
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             PawnController                 ( CPF_OptionalParm | CPF_Parm )

bool APawn::IsHumanControlled ( class AController* PawnController )
{
	static UFunction* pFnIsHumanControlled = NULL;

	if ( ! pFnIsHumanControlled )
		pFnIsHumanControlled = (UFunction*) UObject::GObjObjects()->Data[ 7009 ];

	APawn_execIsHumanControlled_Parms IsHumanControlled_Parms;
	IsHumanControlled_Parms.PawnController = PawnController;

	pFnIsHumanControlled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHumanControlled, &IsHumanControlled_Parms, NULL );

	pFnIsHumanControlled->FunctionFlags |= 0x400;

	return IsHumanControlled_Parms.ReturnValue;
};

// Function Engine.Pawn.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void APawn::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 24109 ];

	APawn_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Pawn.ClimbLadder
// [0x00020002] 
// Parameters infos:
// class ALadderVolume*           L                              ( CPF_Parm )

void APawn::ClimbLadder ( class ALadderVolume* L )
{
	static UFunction* pFnClimbLadder = NULL;

	if ( ! pFnClimbLadder )
		pFnClimbLadder = (UFunction*) UObject::GObjObjects()->Data[ 24107 ];

	APawn_execClimbLadder_Parms ClimbLadder_Parms;
	ClimbLadder_Parms.L = L;

	this->ProcessEvent ( pFnClimbLadder, &ClimbLadder_Parms, NULL );
};

// Function Engine.Pawn.EndClimbLadder
// [0x00020002] 
// Parameters infos:
// class ALadderVolume*           OldLadder                      ( CPF_Parm )

void APawn::EndClimbLadder ( class ALadderVolume* OldLadder )
{
	static UFunction* pFnEndClimbLadder = NULL;

	if ( ! pFnEndClimbLadder )
		pFnEndClimbLadder = (UFunction*) UObject::GObjObjects()->Data[ 24105 ];

	APawn_execEndClimbLadder_Parms EndClimbLadder_Parms;
	EndClimbLadder_Parms.OldLadder = OldLadder;

	this->ProcessEvent ( pFnEndClimbLadder, &EndClimbLadder_Parms, NULL );
};

// Function Engine.Pawn.CanSplash
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CanSplash ( )
{
	static UFunction* pFnCanSplash = NULL;

	if ( ! pFnCanSplash )
		pFnCanSplash = (UFunction*) UObject::GObjObjects()->Data[ 24102 ];

	APawn_execCanSplash_Parms CanSplash_Parms;

	this->ProcessEvent ( pFnCanSplash, &CanSplash_Parms, NULL );

	return CanSplash_Parms.ReturnValue;
};

// Function Engine.Pawn.SetWalking
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bNewIsWalking                  ( CPF_Parm )

void APawn::eventSetWalking ( unsigned long bNewIsWalking )
{
	static UFunction* pFnSetWalking = NULL;

	if ( ! pFnSetWalking )
		pFnSetWalking = (UFunction*) UObject::GObjObjects()->Data[ 24100 ];

	APawn_eventSetWalking_Parms SetWalking_Parms;
	SetWalking_Parms.bNewIsWalking = bNewIsWalking;

	this->ProcessEvent ( pFnSetWalking, &SetWalking_Parms, NULL );
};

// Function Engine.Pawn.RangedAttackTime
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::RangedAttackTime ( )
{
	static UFunction* pFnRangedAttackTime = NULL;

	if ( ! pFnRangedAttackTime )
		pFnRangedAttackTime = (UFunction*) UObject::GObjObjects()->Data[ 24098 ];

	APawn_execRangedAttackTime_Parms RangedAttackTime_Parms;

	this->ProcessEvent ( pFnRangedAttackTime, &RangedAttackTime_Parms, NULL );

	return RangedAttackTime_Parms.ReturnValue;
};

// Function Engine.Pawn.RecommendLongRangedAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::RecommendLongRangedAttack ( )
{
	static UFunction* pFnRecommendLongRangedAttack = NULL;

	if ( ! pFnRecommendLongRangedAttack )
		pFnRecommendLongRangedAttack = (UFunction*) UObject::GObjObjects()->Data[ 24096 ];

	APawn_execRecommendLongRangedAttack_Parms RecommendLongRangedAttack_Parms;

	this->ProcessEvent ( pFnRecommendLongRangedAttack, &RecommendLongRangedAttack_Parms, NULL );

	return RecommendLongRangedAttack_Parms.ReturnValue;
};

// Function Engine.Pawn.CanGrabLadder
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CanGrabLadder ( )
{
	static UFunction* pFnCanGrabLadder = NULL;

	if ( ! pFnCanGrabLadder )
		pFnCanGrabLadder = (UFunction*) UObject::GObjObjects()->Data[ 23301 ];

	APawn_execCanGrabLadder_Parms CanGrabLadder_Parms;

	this->ProcessEvent ( pFnCanGrabLadder, &CanGrabLadder_Parms, NULL );

	return CanGrabLadder_Parms.ReturnValue;
};

// Function Engine.Pawn.DropToGround
// [0x00020002] 
// Parameters infos:

void APawn::DropToGround ( )
{
	static UFunction* pFnDropToGround = NULL;

	if ( ! pFnDropToGround )
		pFnDropToGround = (UFunction*) UObject::GObjObjects()->Data[ 24094 ];

	APawn_execDropToGround_Parms DropToGround_Parms;

	this->ProcessEvent ( pFnDropToGround, &DropToGround_Parms, NULL );
};

// Function Engine.Pawn.GetDefaultCameraMode
// [0x00020102] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       RequestedBy                    ( CPF_Parm )

struct FName APawn::GetDefaultCameraMode ( class APlayerController* RequestedBy )
{
	static UFunction* pFnGetDefaultCameraMode = NULL;

	if ( ! pFnGetDefaultCameraMode )
		pFnGetDefaultCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 10425 ];

	APawn_execGetDefaultCameraMode_Parms GetDefaultCameraMode_Parms;
	GetDefaultCameraMode_Parms.RequestedBy = RequestedBy;

	this->ProcessEvent ( pFnGetDefaultCameraMode, &GetDefaultCameraMode_Parms, NULL );

	return GetDefaultCameraMode_Parms.ReturnValue;
};

// Function Engine.Pawn.UnPossessed
// [0x00020002] 
// Parameters infos:

void APawn::UnPossessed ( )
{
	static UFunction* pFnUnPossessed = NULL;

	if ( ! pFnUnPossessed )
		pFnUnPossessed = (UFunction*) UObject::GObjObjects()->Data[ 24092 ];

	APawn_execUnPossessed_Parms UnPossessed_Parms;

	this->ProcessEvent ( pFnUnPossessed, &UnPossessed_Parms, NULL );
};

// Function Engine.Pawn.UpdateControllerOnPossess
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void APawn::UpdateControllerOnPossess ( unsigned long bVehicleTransition )
{
	static UFunction* pFnUpdateControllerOnPossess = NULL;

	if ( ! pFnUpdateControllerOnPossess )
		pFnUpdateControllerOnPossess = (UFunction*) UObject::GObjObjects()->Data[ 24090 ];

	APawn_execUpdateControllerOnPossess_Parms UpdateControllerOnPossess_Parms;
	UpdateControllerOnPossess_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnUpdateControllerOnPossess, &UpdateControllerOnPossess_Parms, NULL );
};

// Function Engine.Pawn.PossessedBy
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void APawn::PossessedBy ( class AController* C, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = (UFunction*) UObject::GObjObjects()->Data[ 24087 ];

	APawn_execPossessedBy_Parms PossessedBy_Parms;
	PossessedBy_Parms.C = C;
	PossessedBy_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function Engine.Pawn.NotifyTeamChanged
// [0x00020100] 
// Parameters infos:

void APawn::NotifyTeamChanged ( )
{
	static UFunction* pFnNotifyTeamChanged = NULL;

	if ( ! pFnNotifyTeamChanged )
		pFnNotifyTeamChanged = (UFunction*) UObject::GObjObjects()->Data[ 24086 ];

	APawn_execNotifyTeamChanged_Parms NotifyTeamChanged_Parms;

	this->ProcessEvent ( pFnNotifyTeamChanged, &NotifyTeamChanged_Parms, NULL );
};

// Function Engine.Pawn.PlayTeleportEffect
// [0x00020002] 
// Parameters infos:
// unsigned long                  bOut                           ( CPF_Parm )
// unsigned long                  bSound                         ( CPF_Parm )

void APawn::PlayTeleportEffect ( unsigned long bOut, unsigned long bSound )
{
	static UFunction* pFnPlayTeleportEffect = NULL;

	if ( ! pFnPlayTeleportEffect )
		pFnPlayTeleportEffect = (UFunction*) UObject::GObjObjects()->Data[ 24083 ];

	APawn_execPlayTeleportEffect_Parms PlayTeleportEffect_Parms;
	PlayTeleportEffect_Parms.bOut = bOut;
	PlayTeleportEffect_Parms.bSound = bSound;

	this->ProcessEvent ( pFnPlayTeleportEffect, &PlayTeleportEffect_Parms, NULL );
};

// Function Engine.Pawn.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APawn::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = (UFunction*) UObject::GObjObjects()->Data[ 8354 ];

	APawn_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.Pawn.NeedToTurn
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 targ                           ( CPF_Parm )

bool APawn::NeedToTurn ( struct FVector targ )
{
	static UFunction* pFnNeedToTurn = NULL;

	if ( ! pFnNeedToTurn )
		pFnNeedToTurn = (UFunction*) UObject::GObjObjects()->Data[ 24077 ];

	APawn_execNeedToTurn_Parms NeedToTurn_Parms;
	memcpy ( &NeedToTurn_Parms.targ, &targ, 0xC );

	this->ProcessEvent ( pFnNeedToTurn, &NeedToTurn_Parms, NULL );

	return NeedToTurn_Parms.ReturnValue;
};

// Function Engine.Pawn.IsFiring
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsFiring ( )
{
	static UFunction* pFnIsFiring = NULL;

	if ( ! pFnIsFiring )
		pFnIsFiring = (UFunction*) UObject::GObjObjects()->Data[ 24073 ];

	APawn_execIsFiring_Parms IsFiring_Parms;

	this->ProcessEvent ( pFnIsFiring, &IsFiring_Parms, NULL );

	return IsFiring_Parms.ReturnValue;
};

// Function Engine.Pawn.HasRangedAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::HasRangedAttack ( )
{
	static UFunction* pFnHasRangedAttack = NULL;

	if ( ! pFnHasRangedAttack )
		pFnHasRangedAttack = (UFunction*) UObject::GObjObjects()->Data[ 24071 ];

	APawn_execHasRangedAttack_Parms HasRangedAttack_Parms;

	this->ProcessEvent ( pFnHasRangedAttack, &HasRangedAttack_Parms, NULL );

	return HasRangedAttack_Parms.ReturnValue;
};

// Function Engine.Pawn.FireOnRelease
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::FireOnRelease ( )
{
	static UFunction* pFnFireOnRelease = NULL;

	if ( ! pFnFireOnRelease )
		pFnFireOnRelease = (UFunction*) UObject::GObjObjects()->Data[ 24067 ];

	APawn_execFireOnRelease_Parms FireOnRelease_Parms;

	this->ProcessEvent ( pFnFireOnRelease, &FireOnRelease_Parms, NULL );

	return FireOnRelease_Parms.ReturnValue;
};

// Function Engine.Pawn.TooCloseToAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool APawn::TooCloseToAttack ( class AActor* Other )
{
	static UFunction* pFnTooCloseToAttack = NULL;

	if ( ! pFnTooCloseToAttack )
		pFnTooCloseToAttack = (UFunction*) UObject::GObjObjects()->Data[ 24064 ];

	APawn_execTooCloseToAttack_Parms TooCloseToAttack_Parms;
	TooCloseToAttack_Parms.Other = Other;

	this->ProcessEvent ( pFnTooCloseToAttack, &TooCloseToAttack_Parms, NULL );

	return TooCloseToAttack_Parms.ReturnValue;
};

// Function Engine.Pawn.CanAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool APawn::CanAttack ( class AActor* Other )
{
	static UFunction* pFnCanAttack = NULL;

	if ( ! pFnCanAttack )
		pFnCanAttack = (UFunction*) UObject::GObjObjects()->Data[ 24059 ];

	APawn_execCanAttack_Parms CanAttack_Parms;
	CanAttack_Parms.Other = Other;

	this->ProcessEvent ( pFnCanAttack, &CanAttack_Parms, NULL );

	return CanAttack_Parms.ReturnValue;
};

// Function Engine.Pawn.ChooseFireMode
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char APawn::ChooseFireMode ( )
{
	static UFunction* pFnChooseFireMode = NULL;

	if ( ! pFnChooseFireMode )
		pFnChooseFireMode = (UFunction*) UObject::GObjObjects()->Data[ 24057 ];

	APawn_execChooseFireMode_Parms ChooseFireMode_Parms;

	this->ProcessEvent ( pFnChooseFireMode, &ChooseFireMode_Parms, NULL );

	return ChooseFireMode_Parms.ReturnValue;
};

// Function Engine.Pawn.BotFire
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bFinished                      ( CPF_Parm )

bool APawn::BotFire ( unsigned long bFinished )
{
	static UFunction* pFnBotFire = NULL;

	if ( ! pFnBotFire )
		pFnBotFire = (UFunction*) UObject::GObjObjects()->Data[ 24054 ];

	APawn_execBotFire_Parms BotFire_Parms;
	BotFire_Parms.bFinished = bFinished;

	this->ProcessEvent ( pFnBotFire, &BotFire_Parms, NULL );

	return BotFire_Parms.ReturnValue;
};

// Function Engine.Pawn.WeaponStoppedFiring
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void APawn::WeaponStoppedFiring ( class AWeapon* InWeapon, unsigned long bViaReplication )
{
	static UFunction* pFnWeaponStoppedFiring = NULL;

	if ( ! pFnWeaponStoppedFiring )
		pFnWeaponStoppedFiring = (UFunction*) UObject::GObjObjects()->Data[ 24051 ];

	APawn_execWeaponStoppedFiring_Parms WeaponStoppedFiring_Parms;
	WeaponStoppedFiring_Parms.InWeapon = InWeapon;
	WeaponStoppedFiring_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnWeaponStoppedFiring, &WeaponStoppedFiring_Parms, NULL );
};

// Function Engine.Pawn.WeaponFired
// [0x00024102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void APawn::WeaponFired ( class AWeapon* InWeapon, unsigned long bViaReplication, struct FVector HitLocation )
{
	static UFunction* pFnWeaponFired = NULL;

	if ( ! pFnWeaponFired )
		pFnWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 24046 ];

	APawn_execWeaponFired_Parms WeaponFired_Parms;
	WeaponFired_Parms.InWeapon = InWeapon;
	WeaponFired_Parms.bViaReplication = bViaReplication;
	memcpy ( &WeaponFired_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnWeaponFired, &WeaponFired_Parms, NULL );
};

// Function Engine.Pawn.FlashLocationUpdated
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// struct FVector                 InFlashLocation                ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void APawn::FlashLocationUpdated ( class AWeapon* InWeapon, struct FVector InFlashLocation, unsigned long bViaReplication )
{
	static UFunction* pFnFlashLocationUpdated = NULL;

	if ( ! pFnFlashLocationUpdated )
		pFnFlashLocationUpdated = (UFunction*) UObject::GObjObjects()->Data[ 24042 ];

	APawn_execFlashLocationUpdated_Parms FlashLocationUpdated_Parms;
	FlashLocationUpdated_Parms.InWeapon = InWeapon;
	memcpy ( &FlashLocationUpdated_Parms.InFlashLocation, &InFlashLocation, 0xC );
	FlashLocationUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFlashLocationUpdated, &FlashLocationUpdated_Parms, NULL );
};

// Function Engine.Pawn.Internal_ClearFlashLocation
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// struct FVector                 out_FlashLocation              ( CPF_Parm | CPF_OutParm )

void APawn::Internal_ClearFlashLocation ( class AWeapon* InWeapon, struct FVector* out_FlashLocation )
{
	static UFunction* pFnInternal_ClearFlashLocation = NULL;

	if ( ! pFnInternal_ClearFlashLocation )
		pFnInternal_ClearFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 24039 ];

	APawn_execInternal_ClearFlashLocation_Parms Internal_ClearFlashLocation_Parms;
	Internal_ClearFlashLocation_Parms.InWeapon = InWeapon;

	this->ProcessEvent ( pFnInternal_ClearFlashLocation, &Internal_ClearFlashLocation_Parms, NULL );

	if ( out_FlashLocation )
		memcpy ( out_FlashLocation, &Internal_ClearFlashLocation_Parms.out_FlashLocation, 0xC );
};

// Function Engine.Pawn.ClearFlashLocation
// [0x00020002] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )

void APawn::ClearFlashLocation ( class AWeapon* InWeapon )
{
	static UFunction* pFnClearFlashLocation = NULL;

	if ( ! pFnClearFlashLocation )
		pFnClearFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 24037 ];

	APawn_execClearFlashLocation_Parms ClearFlashLocation_Parms;
	ClearFlashLocation_Parms.InWeapon = InWeapon;

	this->ProcessEvent ( pFnClearFlashLocation, &ClearFlashLocation_Parms, NULL );
};

// Function Engine.Pawn.Internal_SetFlashLocation
// [0x00420103] ( FUNC_Final )
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned char                  InFiringMode                   ( CPF_Parm )
// struct FVector                 NewLoc                         ( CPF_Parm )
// struct FVector                 out_FlashLocation              ( CPF_Parm | CPF_OutParm )

void APawn::Internal_SetFlashLocation ( class AWeapon* InWeapon, unsigned char InFiringMode, struct FVector NewLoc, struct FVector* out_FlashLocation )
{
	static UFunction* pFnInternal_SetFlashLocation = NULL;

	if ( ! pFnInternal_SetFlashLocation )
		pFnInternal_SetFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 24031 ];

	APawn_execInternal_SetFlashLocation_Parms Internal_SetFlashLocation_Parms;
	Internal_SetFlashLocation_Parms.InWeapon = InWeapon;
	Internal_SetFlashLocation_Parms.InFiringMode = InFiringMode;
	memcpy ( &Internal_SetFlashLocation_Parms.NewLoc, &NewLoc, 0xC );

	this->ProcessEvent ( pFnInternal_SetFlashLocation, &Internal_SetFlashLocation_Parms, NULL );

	if ( out_FlashLocation )
		memcpy ( out_FlashLocation, &Internal_SetFlashLocation_Parms.out_FlashLocation, 0xC );
};

// Function Engine.Pawn.SetFlashLocation
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned char                  InFiringMode                   ( CPF_Parm )
// struct FVector                 NewLoc                         ( CPF_Parm )

void APawn::SetFlashLocation ( class AWeapon* InWeapon, unsigned char InFiringMode, struct FVector NewLoc )
{
	static UFunction* pFnSetFlashLocation = NULL;

	if ( ! pFnSetFlashLocation )
		pFnSetFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 24027 ];

	APawn_execSetFlashLocation_Parms SetFlashLocation_Parms;
	SetFlashLocation_Parms.InWeapon = InWeapon;
	SetFlashLocation_Parms.InFiringMode = InFiringMode;
	memcpy ( &SetFlashLocation_Parms.NewLoc, &NewLoc, 0xC );

	this->ProcessEvent ( pFnSetFlashLocation, &SetFlashLocation_Parms, NULL );
};

// Function Engine.Pawn.Internal_ClearFlashCount
// [0x00420103] ( FUNC_Final )
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned char                  out_FlashCountVar              ( CPF_Parm | CPF_OutParm )

void APawn::Internal_ClearFlashCount ( class AWeapon* InWeapon, unsigned char* out_FlashCountVar )
{
	static UFunction* pFnInternal_ClearFlashCount = NULL;

	if ( ! pFnInternal_ClearFlashCount )
		pFnInternal_ClearFlashCount = (UFunction*) UObject::GObjObjects()->Data[ 24024 ];

	APawn_execInternal_ClearFlashCount_Parms Internal_ClearFlashCount_Parms;
	Internal_ClearFlashCount_Parms.InWeapon = InWeapon;

	this->ProcessEvent ( pFnInternal_ClearFlashCount, &Internal_ClearFlashCount_Parms, NULL );

	if ( out_FlashCountVar )
		*out_FlashCountVar = Internal_ClearFlashCount_Parms.out_FlashCountVar;
};

// Function Engine.Pawn.ClearFlashCount
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )

void APawn::ClearFlashCount ( class AWeapon* InWeapon )
{
	static UFunction* pFnClearFlashCount = NULL;

	if ( ! pFnClearFlashCount )
		pFnClearFlashCount = (UFunction*) UObject::GObjObjects()->Data[ 24022 ];

	APawn_execClearFlashCount_Parms ClearFlashCount_Parms;
	ClearFlashCount_Parms.InWeapon = InWeapon;

	this->ProcessEvent ( pFnClearFlashCount, &ClearFlashCount_Parms, NULL );
};

// Function Engine.Pawn.FlashCountUpdated
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned char                  InFlashCount                   ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void APawn::FlashCountUpdated ( class AWeapon* InWeapon, unsigned char InFlashCount, unsigned long bViaReplication )
{
	static UFunction* pFnFlashCountUpdated = NULL;

	if ( ! pFnFlashCountUpdated )
		pFnFlashCountUpdated = (UFunction*) UObject::GObjObjects()->Data[ 24018 ];

	APawn_execFlashCountUpdated_Parms FlashCountUpdated_Parms;
	FlashCountUpdated_Parms.InWeapon = InWeapon;
	FlashCountUpdated_Parms.InFlashCount = InFlashCount;
	FlashCountUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFlashCountUpdated, &FlashCountUpdated_Parms, NULL );
};

// Function Engine.Pawn.Internal_IncrementFlashCount
// [0x00420103] ( FUNC_Final )
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned char                  InFiringMode                   ( CPF_Parm )
// unsigned char                  out_FlashCountVar              ( CPF_Parm | CPF_OutParm )

void APawn::Internal_IncrementFlashCount ( class AWeapon* InWeapon, unsigned char InFiringMode, unsigned char* out_FlashCountVar )
{
	static UFunction* pFnInternal_IncrementFlashCount = NULL;

	if ( ! pFnInternal_IncrementFlashCount )
		pFnInternal_IncrementFlashCount = (UFunction*) UObject::GObjObjects()->Data[ 24014 ];

	APawn_execInternal_IncrementFlashCount_Parms Internal_IncrementFlashCount_Parms;
	Internal_IncrementFlashCount_Parms.InWeapon = InWeapon;
	Internal_IncrementFlashCount_Parms.InFiringMode = InFiringMode;

	this->ProcessEvent ( pFnInternal_IncrementFlashCount, &Internal_IncrementFlashCount_Parms, NULL );

	if ( out_FlashCountVar )
		*out_FlashCountVar = Internal_IncrementFlashCount_Parms.out_FlashCountVar;
};

// Function Engine.Pawn.IncrementFlashCount
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned char                  InFiringMode                   ( CPF_Parm )

void APawn::IncrementFlashCount ( class AWeapon* InWeapon, unsigned char InFiringMode )
{
	static UFunction* pFnIncrementFlashCount = NULL;

	if ( ! pFnIncrementFlashCount )
		pFnIncrementFlashCount = (UFunction*) UObject::GObjObjects()->Data[ 24011 ];

	APawn_execIncrementFlashCount_Parms IncrementFlashCount_Parms;
	IncrementFlashCount_Parms.InWeapon = InWeapon;
	IncrementFlashCount_Parms.InFiringMode = InFiringMode;

	this->ProcessEvent ( pFnIncrementFlashCount, &IncrementFlashCount_Parms, NULL );
};

// Function Engine.Pawn.FiringModeUpdated
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned char                  InFiringMode                   ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void APawn::FiringModeUpdated ( class AWeapon* InWeapon, unsigned char InFiringMode, unsigned long bViaReplication )
{
	static UFunction* pFnFiringModeUpdated = NULL;

	if ( ! pFnFiringModeUpdated )
		pFnFiringModeUpdated = (UFunction*) UObject::GObjObjects()->Data[ 24007 ];

	APawn_execFiringModeUpdated_Parms FiringModeUpdated_Parms;
	FiringModeUpdated_Parms.InWeapon = InWeapon;
	FiringModeUpdated_Parms.InFiringMode = InFiringMode;
	FiringModeUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFiringModeUpdated, &FiringModeUpdated_Parms, NULL );
};

// Function Engine.Pawn.Internal_SetFiringMode
// [0x00420103] ( FUNC_Final )
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned char                  InFiringMode                   ( CPF_Parm )
// unsigned char                  out_FiringModeVar              ( CPF_Parm | CPF_OutParm )

void APawn::Internal_SetFiringMode ( class AWeapon* InWeapon, unsigned char InFiringMode, unsigned char* out_FiringModeVar )
{
	static UFunction* pFnInternal_SetFiringMode = NULL;

	if ( ! pFnInternal_SetFiringMode )
		pFnInternal_SetFiringMode = (UFunction*) UObject::GObjObjects()->Data[ 24003 ];

	APawn_execInternal_SetFiringMode_Parms Internal_SetFiringMode_Parms;
	Internal_SetFiringMode_Parms.InWeapon = InWeapon;
	Internal_SetFiringMode_Parms.InFiringMode = InFiringMode;

	this->ProcessEvent ( pFnInternal_SetFiringMode, &Internal_SetFiringMode_Parms, NULL );

	if ( out_FiringModeVar )
		*out_FiringModeVar = Internal_SetFiringMode_Parms.out_FiringModeVar;
};

// Function Engine.Pawn.SetFiringMode
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned char                  InFiringMode                   ( CPF_Parm )

void APawn::SetFiringMode ( class AWeapon* InWeapon, unsigned char InFiringMode )
{
	static UFunction* pFnSetFiringMode = NULL;

	if ( ! pFnSetFiringMode )
		pFnSetFiringMode = (UFunction*) UObject::GObjObjects()->Data[ 24000 ];

	APawn_execSetFiringMode_Parms SetFiringMode_Parms;
	SetFiringMode_Parms.InWeapon = InWeapon;
	SetFiringMode_Parms.InFiringMode = InFiringMode;

	this->ProcessEvent ( pFnSetFiringMode, &SetFiringMode_Parms, NULL );
};

// Function Engine.Pawn.GetWeaponFiringMode
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 InWeapon                       ( CPF_Parm )

unsigned char APawn::GetWeaponFiringMode ( class AWeapon* InWeapon )
{
	static UFunction* pFnGetWeaponFiringMode = NULL;

	if ( ! pFnGetWeaponFiringMode )
		pFnGetWeaponFiringMode = (UFunction*) UObject::GObjObjects()->Data[ 23997 ];

	APawn_execGetWeaponFiringMode_Parms GetWeaponFiringMode_Parms;
	GetWeaponFiringMode_Parms.InWeapon = InWeapon;

	this->ProcessEvent ( pFnGetWeaponFiringMode, &GetWeaponFiringMode_Parms, NULL );

	return GetWeaponFiringMode_Parms.ReturnValue;
};

// Function Engine.Pawn.StopFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void APawn::StopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = (UFunction*) UObject::GObjObjects()->Data[ 23995 ];

	APawn_execStopFire_Parms StopFire_Parms;
	StopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function Engine.Pawn.StartFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void APawn::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 23992 ];

	APawn_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function Engine.Pawn.StopFiring
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::StopFiring ( )
{
	static UFunction* pFnStopFiring = NULL;

	if ( ! pFnStopFiring )
		pFnStopFiring = (UFunction*) UObject::GObjObjects()->Data[ 8143 ];

	APawn_execStopFiring_Parms StopFiring_Parms;

	this->ProcessEvent ( pFnStopFiring, &StopFiring_Parms, NULL );

	return StopFiring_Parms.ReturnValue;
};

// Function Engine.Pawn.Reset
// [0x00020002] 
// Parameters infos:

void APawn::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 23990 ];

	APawn_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Pawn.PlayerChangedTeam
// [0x00020002] 
// Parameters infos:

void APawn::PlayerChangedTeam ( )
{
	static UFunction* pFnPlayerChangedTeam = NULL;

	if ( ! pFnPlayerChangedTeam )
		pFnPlayerChangedTeam = (UFunction*) UObject::GObjObjects()->Data[ 23989 ];

	APawn_execPlayerChangedTeam_Parms PlayerChangedTeam_Parms;

	this->ProcessEvent ( pFnPlayerChangedTeam, &PlayerChangedTeam_Parms, NULL );
};

// Function Engine.Pawn.SetBaseEyeheight
// [0x00020102] 
// Parameters infos:

void APawn::SetBaseEyeheight ( )
{
	static UFunction* pFnSetBaseEyeheight = NULL;

	if ( ! pFnSetBaseEyeheight )
		pFnSetBaseEyeheight = (UFunction*) UObject::GObjObjects()->Data[ 23988 ];

	APawn_execSetBaseEyeheight_Parms SetBaseEyeheight_Parms;

	this->ProcessEvent ( pFnSetBaseEyeheight, &SetBaseEyeheight_Parms, NULL );
};

// Function Engine.Pawn.IsFriendly
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool APawn::IsFriendly ( class APawn* Other )
{
	static UFunction* pFnIsFriendly = NULL;

	if ( ! pFnIsFriendly )
		pFnIsFriendly = (UFunction*) UObject::GObjObjects()->Data[ 23985 ];

	APawn_execIsFriendly_Parms IsFriendly_Parms;
	IsFriendly_Parms.Other = Other;

	pFnIsFriendly->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFriendly, &IsFriendly_Parms, NULL );

	pFnIsFriendly->FunctionFlags |= 0x400;

	return IsFriendly_Parms.ReturnValue;
};

// Function Engine.Pawn.IsHostile
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool APawn::IsHostile ( class APawn* Other )
{
	static UFunction* pFnIsHostile = NULL;

	if ( ! pFnIsHostile )
		pFnIsHostile = (UFunction*) UObject::GObjObjects()->Data[ 23982 ];

	APawn_execIsHostile_Parms IsHostile_Parms;
	IsHostile_Parms.Other = Other;

	pFnIsHostile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHostile, &IsHostile_Parms, NULL );

	pFnIsHostile->FunctionFlags |= 0x400;

	return IsHostile_Parms.ReturnValue;
};

// Function Engine.Pawn.SpecialMoveThruEdge
// [0x00024800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Type                           ( CPF_Parm )
// int                            Dir                            ( CPF_Parm )
// struct FVector                 MoveStart                      ( CPF_Parm )
// struct FVector                 MoveDest                       ( CPF_Parm )
// class AActor*                  RelActor                       ( CPF_OptionalParm | CPF_Parm )
// int                            RelItem                        ( CPF_OptionalParm | CPF_Parm )

bool APawn::eventSpecialMoveThruEdge ( unsigned char Type, int Dir, struct FVector MoveStart, struct FVector MoveDest, class AActor* RelActor, int RelItem )
{
	static UFunction* pFnSpecialMoveThruEdge = NULL;

	if ( ! pFnSpecialMoveThruEdge )
		pFnSpecialMoveThruEdge = (UFunction*) UObject::GObjObjects()->Data[ 23974 ];

	APawn_eventSpecialMoveThruEdge_Parms SpecialMoveThruEdge_Parms;
	SpecialMoveThruEdge_Parms.Type = Type;
	SpecialMoveThruEdge_Parms.Dir = Dir;
	memcpy ( &SpecialMoveThruEdge_Parms.MoveStart, &MoveStart, 0xC );
	memcpy ( &SpecialMoveThruEdge_Parms.MoveDest, &MoveDest, 0xC );
	SpecialMoveThruEdge_Parms.RelActor = RelActor;
	SpecialMoveThruEdge_Parms.RelItem = RelItem;

	this->ProcessEvent ( pFnSpecialMoveThruEdge, &SpecialMoveThruEdge_Parms, NULL );

	return SpecialMoveThruEdge_Parms.ReturnValue;
};

// Function Engine.Pawn.SpecialMoveTo
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        Start                          ( CPF_Parm )
// class ANavigationPoint*        End                            ( CPF_Parm )
// class AActor*                  Next                           ( CPF_Parm )

bool APawn::SpecialMoveTo ( class ANavigationPoint* Start, class ANavigationPoint* End, class AActor* Next )
{
	static UFunction* pFnSpecialMoveTo = NULL;

	if ( ! pFnSpecialMoveTo )
		pFnSpecialMoveTo = (UFunction*) UObject::GObjObjects()->Data[ 12123 ];

	APawn_execSpecialMoveTo_Parms SpecialMoveTo_Parms;
	SpecialMoveTo_Parms.Start = Start;
	SpecialMoveTo_Parms.End = End;
	SpecialMoveTo_Parms.Next = Next;

	this->ProcessEvent ( pFnSpecialMoveTo, &SpecialMoveTo_Parms, NULL );

	return SpecialMoveTo_Parms.ReturnValue;
};

// Function Engine.Pawn.OnStreamingLevelLeavingStasis
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::OnStreamingLevelLeavingStasis ( )
{
	static UFunction* pFnOnStreamingLevelLeavingStasis = NULL;

	if ( ! pFnOnStreamingLevelLeavingStasis )
		pFnOnStreamingLevelLeavingStasis = (UFunction*) UObject::GObjObjects()->Data[ 23970 ];

	APawn_execOnStreamingLevelLeavingStasis_Parms OnStreamingLevelLeavingStasis_Parms;

	pFnOnStreamingLevelLeavingStasis->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnStreamingLevelLeavingStasis, &OnStreamingLevelLeavingStasis_Parms, NULL );

	pFnOnStreamingLevelLeavingStasis->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.OnStreamingLevelEnteringStasis
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::OnStreamingLevelEnteringStasis ( )
{
	static UFunction* pFnOnStreamingLevelEnteringStasis = NULL;

	if ( ! pFnOnStreamingLevelEnteringStasis )
		pFnOnStreamingLevelEnteringStasis = (UFunction*) UObject::GObjObjects()->Data[ 23969 ];

	APawn_execOnStreamingLevelEnteringStasis_Parms OnStreamingLevelEnteringStasis_Parms;

	pFnOnStreamingLevelEnteringStasis->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnStreamingLevelEnteringStasis, &OnStreamingLevelEnteringStasis_Parms, NULL );

	pFnOnStreamingLevelEnteringStasis->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.TermRagdoll
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::TermRagdoll ( )
{
	static UFunction* pFnTermRagdoll = NULL;

	if ( ! pFnTermRagdoll )
		pFnTermRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 23967 ];

	APawn_execTermRagdoll_Parms TermRagdoll_Parms;

	pFnTermRagdoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTermRagdoll, &TermRagdoll_Parms, NULL );

	pFnTermRagdoll->FunctionFlags |= 0x400;

	return TermRagdoll_Parms.ReturnValue;
};

// Function Engine.Pawn.InitRagdoll
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::InitRagdoll ( )
{
	static UFunction* pFnInitRagdoll = NULL;

	if ( ! pFnInitRagdoll )
		pFnInitRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 23965 ];

	APawn_execInitRagdoll_Parms InitRagdoll_Parms;

	pFnInitRagdoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitRagdoll, &InitRagdoll_Parms, NULL );

	pFnInitRagdoll->FunctionFlags |= 0x400;

	return InitRagdoll_Parms.ReturnValue;
};

// Function Engine.Pawn.IsValidEnemy
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsValidEnemy ( )
{
	static UFunction* pFnIsValidEnemy = NULL;

	if ( ! pFnIsValidEnemy )
		pFnIsValidEnemy = (UFunction*) UObject::GObjObjects()->Data[ 23963 ];

	APawn_execIsValidEnemy_Parms IsValidEnemy_Parms;

	this->ProcessEvent ( pFnIsValidEnemy, &IsValidEnemy_Parms, NULL );

	return IsValidEnemy_Parms.ReturnValue;
};

// Function Engine.Pawn.SpecialCostForPath
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UReachSpec*              Path                           ( CPF_Parm )

int APawn::SpecialCostForPath ( class UReachSpec* Path )
{
	static UFunction* pFnSpecialCostForPath = NULL;

	if ( ! pFnSpecialCostForPath )
		pFnSpecialCostForPath = (UFunction*) UObject::GObjObjects()->Data[ 23960 ];

	APawn_execSpecialCostForPath_Parms SpecialCostForPath_Parms;
	SpecialCostForPath_Parms.Path = Path;

	this->ProcessEvent ( pFnSpecialCostForPath, &SpecialCostForPath_Parms, NULL );

	return SpecialCostForPath_Parms.ReturnValue;
};

// Function Engine.Pawn.GetBoundingCylinder
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          CollisionRadius                ( CPF_Parm | CPF_OutParm )
// float                          CollisionHeight                ( CPF_Parm | CPF_OutParm )

void APawn::GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight )
{
	static UFunction* pFnGetBoundingCylinder = NULL;

	if ( ! pFnGetBoundingCylinder )
		pFnGetBoundingCylinder = (UFunction*) UObject::GObjObjects()->Data[ 23957 ];

	APawn_execGetBoundingCylinder_Parms GetBoundingCylinder_Parms;

	pFnGetBoundingCylinder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundingCylinder, &GetBoundingCylinder_Parms, NULL );

	pFnGetBoundingCylinder->FunctionFlags |= 0x400;

	if ( CollisionRadius )
		*CollisionRadius = GetBoundingCylinder_Parms.CollisionRadius;

	if ( CollisionHeight )
		*CollisionHeight = GetBoundingCylinder_Parms.CollisionHeight;
};

// Function Engine.Pawn.ReachedDesiredRotation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::ReachedDesiredRotation ( )
{
	static UFunction* pFnReachedDesiredRotation = NULL;

	if ( ! pFnReachedDesiredRotation )
		pFnReachedDesiredRotation = (UFunction*) UObject::GObjObjects()->Data[ 23955 ];

	APawn_execReachedDesiredRotation_Parms ReachedDesiredRotation_Parms;

	pFnReachedDesiredRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReachedDesiredRotation, &ReachedDesiredRotation_Parms, NULL );

	pFnReachedDesiredRotation->FunctionFlags |= 0x400;

	return ReachedDesiredRotation_Parms.ReturnValue;
};

// Function Engine.Pawn.SetPushesRigidBodies
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  NewPush                        ( CPF_Parm )

void APawn::SetPushesRigidBodies ( unsigned long NewPush )
{
	static UFunction* pFnSetPushesRigidBodies = NULL;

	if ( ! pFnSetPushesRigidBodies )
		pFnSetPushesRigidBodies = (UFunction*) UObject::GObjObjects()->Data[ 23953 ];

	APawn_execSetPushesRigidBodies_Parms SetPushesRigidBodies_Parms;
	SetPushesRigidBodies_Parms.NewPush = NewPush;

	pFnSetPushesRigidBodies->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPushesRigidBodies, &SetPushesRigidBodies_Parms, NULL );

	pFnSetPushesRigidBodies->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.ForceCrouch
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::ForceCrouch ( )
{
	static UFunction* pFnForceCrouch = NULL;

	if ( ! pFnForceCrouch )
		pFnForceCrouch = (UFunction*) UObject::GObjObjects()->Data[ 23952 ];

	APawn_execForceCrouch_Parms ForceCrouch_Parms;

	pFnForceCrouch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceCrouch, &ForceCrouch_Parms, NULL );

	pFnForceCrouch->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.ReachedPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Point                          ( CPF_Parm )
// class AActor*                  NewAnchor                      ( CPF_Parm )

bool APawn::ReachedPoint ( struct FVector Point, class AActor* NewAnchor )
{
	static UFunction* pFnReachedPoint = NULL;

	if ( ! pFnReachedPoint )
		pFnReachedPoint = (UFunction*) UObject::GObjObjects()->Data[ 23948 ];

	APawn_execReachedPoint_Parms ReachedPoint_Parms;
	memcpy ( &ReachedPoint_Parms.Point, &Point, 0xC );
	ReachedPoint_Parms.NewAnchor = NewAnchor;

	pFnReachedPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReachedPoint, &ReachedPoint_Parms, NULL );

	pFnReachedPoint->FunctionFlags |= 0x400;

	return ReachedPoint_Parms.ReturnValue;
};

// Function Engine.Pawn.ReachedDestination
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Goal                           ( CPF_Parm )

bool APawn::ReachedDestination ( class AActor* Goal )
{
	static UFunction* pFnReachedDestination = NULL;

	if ( ! pFnReachedDestination )
		pFnReachedDestination = (UFunction*) UObject::GObjObjects()->Data[ 12026 ];

	APawn_execReachedDestination_Parms ReachedDestination_Parms;
	ReachedDestination_Parms.Goal = Goal;

	pFnReachedDestination->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReachedDestination, &ReachedDestination_Parms, NULL );

	pFnReachedDestination->FunctionFlags |= 0x400;

	return ReachedDestination_Parms.ReturnValue;
};

// Function Engine.Pawn.GetBestAnchor
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TestActor                      ( CPF_Parm )
// struct FVector                 TestLocation                   ( CPF_Parm )
// unsigned long                  bStartPoint                    ( CPF_Parm )
// unsigned long                  bOnlyCheckVisible              ( CPF_Parm )
// float                          out_Dist                       ( CPF_Parm | CPF_OutParm )

class ANavigationPoint* APawn::GetBestAnchor ( class AActor* TestActor, struct FVector TestLocation, unsigned long bStartPoint, unsigned long bOnlyCheckVisible, float* out_Dist )
{
	static UFunction* pFnGetBestAnchor = NULL;

	if ( ! pFnGetBestAnchor )
		pFnGetBestAnchor = (UFunction*) UObject::GObjObjects()->Data[ 22446 ];

	APawn_execGetBestAnchor_Parms GetBestAnchor_Parms;
	GetBestAnchor_Parms.TestActor = TestActor;
	memcpy ( &GetBestAnchor_Parms.TestLocation, &TestLocation, 0xC );
	GetBestAnchor_Parms.bStartPoint = bStartPoint;
	GetBestAnchor_Parms.bOnlyCheckVisible = bOnlyCheckVisible;

	pFnGetBestAnchor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBestAnchor, &GetBestAnchor_Parms, NULL );

	pFnGetBestAnchor->FunctionFlags |= 0x400;

	if ( out_Dist )
		*out_Dist = GetBestAnchor_Parms.out_Dist;

	return GetBestAnchor_Parms.ReturnValue;
};

// Function Engine.Pawn.SetAnchor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        NewAnchor                      ( CPF_Parm )

void APawn::SetAnchor ( class ANavigationPoint* NewAnchor )
{
	static UFunction* pFnSetAnchor = NULL;

	if ( ! pFnSetAnchor )
		pFnSetAnchor = (UFunction*) UObject::GObjObjects()->Data[ 23940 ];

	APawn_execSetAnchor_Parms SetAnchor_Parms;
	SetAnchor_Parms.NewAnchor = NewAnchor;

	pFnSetAnchor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAnchor, &SetAnchor_Parms, NULL );

	pFnSetAnchor->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.SetRemoteViewPitch
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            NewRemoteViewPitch             ( CPF_Parm )

void APawn::SetRemoteViewPitch ( int NewRemoteViewPitch )
{
	static UFunction* pFnSetRemoteViewPitch = NULL;

	if ( ! pFnSetRemoteViewPitch )
		pFnSetRemoteViewPitch = (UFunction*) UObject::GObjObjects()->Data[ 10939 ];

	APawn_execSetRemoteViewPitch_Parms SetRemoteViewPitch_Parms;
	SetRemoteViewPitch_Parms.NewRemoteViewPitch = NewRemoteViewPitch;

	pFnSetRemoteViewPitch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRemoteViewPitch, &SetRemoteViewPitch_Parms, NULL );

	pFnSetRemoteViewPitch->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.IsInvisible
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsInvisible ( )
{
	static UFunction* pFnIsInvisible = NULL;

	if ( ! pFnIsInvisible )
		pFnIsInvisible = (UFunction*) UObject::GObjObjects()->Data[ 23937 ];

	APawn_execIsInvisible_Parms IsInvisible_Parms;

	pFnIsInvisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInvisible, &IsInvisible_Parms, NULL );

	pFnIsInvisible->FunctionFlags |= 0x400;

	return IsInvisible_Parms.ReturnValue;
};

// Function Engine.Pawn.IsValidEnemyTargetFor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Const | CPF_Parm )
// unsigned long                  bNoPRIisEnemy                  ( CPF_Parm )

bool APawn::IsValidEnemyTargetFor ( class APlayerReplicationInfo* PRI, unsigned long bNoPRIisEnemy )
{
	static UFunction* pFnIsValidEnemyTargetFor = NULL;

	if ( ! pFnIsValidEnemyTargetFor )
		pFnIsValidEnemyTargetFor = (UFunction*) UObject::GObjObjects()->Data[ 23933 ];

	APawn_execIsValidEnemyTargetFor_Parms IsValidEnemyTargetFor_Parms;
	IsValidEnemyTargetFor_Parms.PRI = PRI;
	IsValidEnemyTargetFor_Parms.bNoPRIisEnemy = bNoPRIisEnemy;

	pFnIsValidEnemyTargetFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidEnemyTargetFor, &IsValidEnemyTargetFor_Parms, NULL );

	pFnIsValidEnemyTargetFor->FunctionFlags |= 0x400;

	return IsValidEnemyTargetFor_Parms.ReturnValue;
};

// Function Engine.Pawn.IsValidTargetFor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             C                              ( CPF_Const | CPF_Parm )

bool APawn::IsValidTargetFor ( class AController* C )
{
	static UFunction* pFnIsValidTargetFor = NULL;

	if ( ! pFnIsValidTargetFor )
		pFnIsValidTargetFor = (UFunction*) UObject::GObjObjects()->Data[ 23930 ];

	APawn_execIsValidTargetFor_Parms IsValidTargetFor_Parms;
	IsValidTargetFor_Parms.C = C;

	pFnIsValidTargetFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidTargetFor, &IsValidTargetFor_Parms, NULL );

	pFnIsValidTargetFor->FunctionFlags |= 0x400;

	return IsValidTargetFor_Parms.ReturnValue;
};

// Function Engine.Pawn.GetFallDuration
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::GetFallDuration ( )
{
	static UFunction* pFnGetFallDuration = NULL;

	if ( ! pFnGetFallDuration )
		pFnGetFallDuration = (UFunction*) UObject::GObjObjects()->Data[ 23928 ];

	APawn_execGetFallDuration_Parms GetFallDuration_Parms;

	pFnGetFallDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFallDuration, &GetFallDuration_Parms, NULL );

	pFnGetFallDuration->FunctionFlags |= 0x400;

	return GetFallDuration_Parms.ReturnValue;
};

// Function Engine.Pawn.SuggestJumpVelocity
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Destination                    ( CPF_Parm )
// struct FVector                 Start                          ( CPF_Parm )
// struct FVector                 JumpVelocity                   ( CPF_Parm | CPF_OutParm )

bool APawn::SuggestJumpVelocity ( struct FVector Destination, struct FVector Start, struct FVector* JumpVelocity )
{
	static UFunction* pFnSuggestJumpVelocity = NULL;

	if ( ! pFnSuggestJumpVelocity )
		pFnSuggestJumpVelocity = (UFunction*) UObject::GObjObjects()->Data[ 23923 ];

	APawn_execSuggestJumpVelocity_Parms SuggestJumpVelocity_Parms;
	memcpy ( &SuggestJumpVelocity_Parms.Destination, &Destination, 0xC );
	memcpy ( &SuggestJumpVelocity_Parms.Start, &Start, 0xC );

	pFnSuggestJumpVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSuggestJumpVelocity, &SuggestJumpVelocity_Parms, NULL );

	pFnSuggestJumpVelocity->FunctionFlags |= 0x400;

	if ( JumpVelocity )
		memcpy ( JumpVelocity, &SuggestJumpVelocity_Parms.JumpVelocity, 0xC );

	return SuggestJumpVelocity_Parms.ReturnValue;
};

// Function Engine.Pawn.ValidAnchor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::ValidAnchor ( )
{
	static UFunction* pFnValidAnchor = NULL;

	if ( ! pFnValidAnchor )
		pFnValidAnchor = (UFunction*) UObject::GObjObjects()->Data[ 22444 ];

	APawn_execValidAnchor_Parms ValidAnchor_Parms;

	pFnValidAnchor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnValidAnchor, &ValidAnchor_Parms, NULL );

	pFnValidAnchor->FunctionFlags |= 0x400;

	return ValidAnchor_Parms.ReturnValue;
};

// Function Engine.Pawn.AdjustDestination
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  GoalActor                      ( CPF_Parm )
// struct FVector                 Dest                           ( CPF_OptionalParm | CPF_Parm )

struct FVector APawn::AdjustDestination ( class AActor* GoalActor, struct FVector Dest )
{
	static UFunction* pFnAdjustDestination = NULL;

	if ( ! pFnAdjustDestination )
		pFnAdjustDestination = (UFunction*) UObject::GObjObjects()->Data[ 23919 ];

	APawn_execAdjustDestination_Parms AdjustDestination_Parms;
	AdjustDestination_Parms.GoalActor = GoalActor;
	memcpy ( &AdjustDestination_Parms.Dest, &Dest, 0xC );

	pFnAdjustDestination->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdjustDestination, &AdjustDestination_Parms, NULL );

	pFnAdjustDestination->FunctionFlags |= 0x400;

	return AdjustDestination_Parms.ReturnValue;
};

// Function Engine.Pawn.IsAliveAndWell
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsAliveAndWell ( )
{
	static UFunction* pFnIsAliveAndWell = NULL;

	if ( ! pFnIsAliveAndWell )
		pFnIsAliveAndWell = (UFunction*) UObject::GObjObjects()->Data[ 23917 ];

	APawn_execIsAliveAndWell_Parms IsAliveAndWell_Parms;

	pFnIsAliveAndWell->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAliveAndWell, &IsAliveAndWell_Parms, NULL );

	pFnIsAliveAndWell->FunctionFlags |= 0x400;

	return IsAliveAndWell_Parms.ReturnValue;
};

// Function Engine.Pawn.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void APawn::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 23912 ];

	APawn_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.Pawn.SetSkelControlScale
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   SkelControlName                ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void APawn::eventSetSkelControlScale ( struct FName SkelControlName, float Scale )
{
	static UFunction* pFnSetSkelControlScale = NULL;

	if ( ! pFnSetSkelControlScale )
		pFnSetSkelControlScale = (UFunction*) UObject::GObjObjects()->Data[ 23909 ];

	APawn_eventSetSkelControlScale_Parms SetSkelControlScale_Parms;
	memcpy ( &SetSkelControlScale_Parms.SkelControlName, &SkelControlName, 0x8 );
	SetSkelControlScale_Parms.Scale = Scale;

	this->ProcessEvent ( pFnSetSkelControlScale, &SetSkelControlScale_Parms, NULL );
};

// Function Engine.Pawn.SetMorphWeight
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   MorphNodeName                  ( CPF_Parm )
// float                          MorphWeight                    ( CPF_Parm )

void APawn::eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight )
{
	static UFunction* pFnSetMorphWeight = NULL;

	if ( ! pFnSetMorphWeight )
		pFnSetMorphWeight = (UFunction*) UObject::GObjObjects()->Data[ 23906 ];

	APawn_eventSetMorphWeight_Parms SetMorphWeight_Parms;
	memcpy ( &SetMorphWeight_Parms.MorphNodeName, &MorphNodeName, 0x8 );
	SetMorphWeight_Parms.MorphWeight = MorphWeight;

	this->ProcessEvent ( pFnSetMorphWeight, &SetMorphWeight_Parms, NULL );
};

// Function Engine.Pawn.GetActorFaceFXAsset
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UFaceFXAsset*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFaceFXAsset* APawn::eventGetActorFaceFXAsset ( )
{
	static UFunction* pFnGetActorFaceFXAsset = NULL;

	if ( ! pFnGetActorFaceFXAsset )
		pFnGetActorFaceFXAsset = (UFunction*) UObject::GObjObjects()->Data[ 23904 ];

	APawn_eventGetActorFaceFXAsset_Parms GetActorFaceFXAsset_Parms;

	this->ProcessEvent ( pFnGetActorFaceFXAsset, &GetActorFaceFXAsset_Parms, NULL );

	return GetActorFaceFXAsset_Parms.ReturnValue;
};

// Function Engine.Pawn.FaceFXAudioFinished
// [0x00020100] 
// Parameters infos:
// class UAudioComponent*         AC                             ( CPF_Parm | CPF_EditInline )

void APawn::FaceFXAudioFinished ( class UAudioComponent* AC )
{
	static UFunction* pFnFaceFXAudioFinished = NULL;

	if ( ! pFnFaceFXAudioFinished )
		pFnFaceFXAudioFinished = (UFunction*) UObject::GObjObjects()->Data[ 23902 ];

	APawn_execFaceFXAudioFinished_Parms FaceFXAudioFinished_Parms;
	FaceFXAudioFinished_Parms.AC = AC;

	this->ProcessEvent ( pFnFaceFXAudioFinished, &FaceFXAudioFinished_Parms, NULL );
};

// Function Engine.Pawn.OnPlayFaceFXAnim
// [0x00020102] 
// Parameters infos:
// class USeqAct_PlayFaceFXAnim*  inAction                       ( CPF_Parm )

void APawn::OnPlayFaceFXAnim ( class USeqAct_PlayFaceFXAnim* inAction )
{
	static UFunction* pFnOnPlayFaceFXAnim = NULL;

	if ( ! pFnOnPlayFaceFXAnim )
		pFnOnPlayFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 23896 ];

	APawn_execOnPlayFaceFXAnim_Parms OnPlayFaceFXAnim_Parms;
	OnPlayFaceFXAnim_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnPlayFaceFXAnim, &OnPlayFaceFXAnim_Parms, NULL );
};

// Function Engine.Pawn.CanActorPlayFaceFXAnim
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CanActorPlayFaceFXAnim ( )
{
	static UFunction* pFnCanActorPlayFaceFXAnim = NULL;

	if ( ! pFnCanActorPlayFaceFXAnim )
		pFnCanActorPlayFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 23894 ];

	APawn_execCanActorPlayFaceFXAnim_Parms CanActorPlayFaceFXAnim_Parms;

	this->ProcessEvent ( pFnCanActorPlayFaceFXAnim, &CanActorPlayFaceFXAnim_Parms, NULL );

	return CanActorPlayFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.Pawn.IsActorPlayingFaceFXAnim
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsActorPlayingFaceFXAnim ( )
{
	static UFunction* pFnIsActorPlayingFaceFXAnim = NULL;

	if ( ! pFnIsActorPlayingFaceFXAnim )
		pFnIsActorPlayingFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 23892 ];

	APawn_execIsActorPlayingFaceFXAnim_Parms IsActorPlayingFaceFXAnim_Parms;

	this->ProcessEvent ( pFnIsActorPlayingFaceFXAnim, &IsActorPlayingFaceFXAnim_Parms, NULL );

	return IsActorPlayingFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.Pawn.GetFaceFXAudioComponent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAudioComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UAudioComponent* APawn::eventGetFaceFXAudioComponent ( )
{
	static UFunction* pFnGetFaceFXAudioComponent = NULL;

	if ( ! pFnGetFaceFXAudioComponent )
		pFnGetFaceFXAudioComponent = (UFunction*) UObject::GObjObjects()->Data[ 23889 ];

	APawn_eventGetFaceFXAudioComponent_Parms GetFaceFXAudioComponent_Parms;

	this->ProcessEvent ( pFnGetFaceFXAudioComponent, &GetFaceFXAudioComponent_Parms, NULL );

	return GetFaceFXAudioComponent_Parms.ReturnValue;
};

// Function Engine.Pawn.PlayActorFaceFXAnim
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )
// struct FString                 GroupName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SeqName                        ( CPF_Parm | CPF_NeedCtorLink )
// class USoundCue*               SoundCueToPlay                 ( CPF_Parm )

bool APawn::eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay )
{
	static UFunction* pFnPlayActorFaceFXAnim = NULL;

	if ( ! pFnPlayActorFaceFXAnim )
		pFnPlayActorFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 8041 ];

	APawn_eventPlayActorFaceFXAnim_Parms PlayActorFaceFXAnim_Parms;
	PlayActorFaceFXAnim_Parms.AnimSet = AnimSet;
	memcpy ( &PlayActorFaceFXAnim_Parms.GroupName, &GroupName, 0x10 );
	memcpy ( &PlayActorFaceFXAnim_Parms.SeqName, &SeqName, 0x10 );
	PlayActorFaceFXAnim_Parms.SoundCueToPlay = SoundCueToPlay;

	this->ProcessEvent ( pFnPlayActorFaceFXAnim, &PlayActorFaceFXAnim_Parms, NULL );

	return PlayActorFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.Pawn.MAT_BeginAIGroup
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 StartLoc                       ( CPF_Parm )
// struct FRotator                StartRot                       ( CPF_Parm )

void APawn::eventMAT_BeginAIGroup ( struct FVector StartLoc, struct FRotator StartRot )
{
	static UFunction* pFnMAT_BeginAIGroup = NULL;

	if ( ! pFnMAT_BeginAIGroup )
		pFnMAT_BeginAIGroup = (UFunction*) UObject::GObjObjects()->Data[ 23882 ];

	APawn_eventMAT_BeginAIGroup_Parms MAT_BeginAIGroup_Parms;
	memcpy ( &MAT_BeginAIGroup_Parms.StartLoc, &StartLoc, 0xC );
	memcpy ( &MAT_BeginAIGroup_Parms.StartRot, &StartRot, 0xC );

	this->ProcessEvent ( pFnMAT_BeginAIGroup, &MAT_BeginAIGroup_Parms, NULL );
};

// Function Engine.Pawn.InterpolationFinished
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void APawn::eventInterpolationFinished ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationFinished = NULL;

	if ( ! pFnInterpolationFinished )
		pFnInterpolationFinished = (UFunction*) UObject::GObjObjects()->Data[ 23880 ];

	APawn_eventInterpolationFinished_Parms InterpolationFinished_Parms;
	InterpolationFinished_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationFinished, &InterpolationFinished_Parms, NULL );
};

// Function Engine.Pawn.InterpolationStarted
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )
// class UInterpGroupInst*        GroupInst                      ( CPF_Parm )

void APawn::eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst )
{
	static UFunction* pFnInterpolationStarted = NULL;

	if ( ! pFnInterpolationStarted )
		pFnInterpolationStarted = (UFunction*) UObject::GObjObjects()->Data[ 23876 ];

	APawn_eventInterpolationStarted_Parms InterpolationStarted_Parms;
	InterpolationStarted_Parms.InterpAction = InterpAction;
	InterpolationStarted_Parms.GroupInst = GroupInst;

	this->ProcessEvent ( pFnInterpolationStarted, &InterpolationStarted_Parms, NULL );
};

// Function Engine.Pawn.MAT_SetSkelControlScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   SkelControlName                ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void APawn::MAT_SetSkelControlScale ( struct FName SkelControlName, float Scale )
{
	static UFunction* pFnMAT_SetSkelControlScale = NULL;

	if ( ! pFnMAT_SetSkelControlScale )
		pFnMAT_SetSkelControlScale = (UFunction*) UObject::GObjObjects()->Data[ 23873 ];

	APawn_execMAT_SetSkelControlScale_Parms MAT_SetSkelControlScale_Parms;
	memcpy ( &MAT_SetSkelControlScale_Parms.SkelControlName, &SkelControlName, 0x8 );
	MAT_SetSkelControlScale_Parms.Scale = Scale;

	pFnMAT_SetSkelControlScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetSkelControlScale, &MAT_SetSkelControlScale_Parms, NULL );

	pFnMAT_SetSkelControlScale->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.MAT_SetMorphWeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   MorphNodeName                  ( CPF_Parm )
// float                          MorphWeight                    ( CPF_Parm )

void APawn::MAT_SetMorphWeight ( struct FName MorphNodeName, float MorphWeight )
{
	static UFunction* pFnMAT_SetMorphWeight = NULL;

	if ( ! pFnMAT_SetMorphWeight )
		pFnMAT_SetMorphWeight = (UFunction*) UObject::GObjObjects()->Data[ 23870 ];

	APawn_execMAT_SetMorphWeight_Parms MAT_SetMorphWeight_Parms;
	memcpy ( &MAT_SetMorphWeight_Parms.MorphNodeName, &MorphNodeName, 0x8 );
	MAT_SetMorphWeight_Parms.MorphWeight = MorphWeight;

	pFnMAT_SetMorphWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetMorphWeight, &MAT_SetMorphWeight_Parms, NULL );

	pFnMAT_SetMorphWeight->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.MAT_SetAnimWeights
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct TArray<struct FAnimSlotInfo> SlotInfos                      ( CPF_Parm | CPF_NeedCtorLink )

void APawn::MAT_SetAnimWeights ( struct TArray<struct FAnimSlotInfo> SlotInfos )
{
	static UFunction* pFnMAT_SetAnimWeights = NULL;

	if ( ! pFnMAT_SetAnimWeights )
		pFnMAT_SetAnimWeights = (UFunction*) UObject::GObjObjects()->Data[ 23867 ];

	APawn_execMAT_SetAnimWeights_Parms MAT_SetAnimWeights_Parms;
	memcpy ( &MAT_SetAnimWeights_Parms.SlotInfos, &SlotInfos, 0x10 );

	pFnMAT_SetAnimWeights->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetAnimWeights, &MAT_SetAnimWeights_Parms, NULL );

	pFnMAT_SetAnimWeights->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.MAT_SetAnimPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )

void APawn::MAT_SetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping )
{
	static UFunction* pFnMAT_SetAnimPosition = NULL;

	if ( ! pFnMAT_SetAnimPosition )
		pFnMAT_SetAnimPosition = (UFunction*) UObject::GObjObjects()->Data[ 23860 ];

	APawn_execMAT_SetAnimPosition_Parms MAT_SetAnimPosition_Parms;
	memcpy ( &MAT_SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	MAT_SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &MAT_SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	MAT_SetAnimPosition_Parms.InPosition = InPosition;
	MAT_SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	MAT_SetAnimPosition_Parms.bLooping = bLooping;

	pFnMAT_SetAnimPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetAnimPosition, &MAT_SetAnimPosition_Parms, NULL );

	pFnMAT_SetAnimPosition->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.SetAnimPosition
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )

void APawn::eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping )
{
	static UFunction* pFnSetAnimPosition = NULL;

	if ( ! pFnSetAnimPosition )
		pFnSetAnimPosition = (UFunction*) UObject::GObjObjects()->Data[ 23853 ];

	APawn_eventSetAnimPosition_Parms SetAnimPosition_Parms;
	memcpy ( &SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	SetAnimPosition_Parms.InPosition = InPosition;
	SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	SetAnimPosition_Parms.bLooping = bLooping;

	this->ProcessEvent ( pFnSetAnimPosition, &SetAnimPosition_Parms, NULL );
};

// Function Engine.Pawn.MAT_FinishAnimControl
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void APawn::MAT_FinishAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnMAT_FinishAnimControl = NULL;

	if ( ! pFnMAT_FinishAnimControl )
		pFnMAT_FinishAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 23851 ];

	APawn_execMAT_FinishAnimControl_Parms MAT_FinishAnimControl_Parms;
	MAT_FinishAnimControl_Parms.InInterpGroup = InInterpGroup;

	pFnMAT_FinishAnimControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_FinishAnimControl, &MAT_FinishAnimControl_Parms, NULL );

	pFnMAT_FinishAnimControl->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.FinishAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void APawn::eventFinishAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnFinishAnimControl = NULL;

	if ( ! pFnFinishAnimControl )
		pFnFinishAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 23849 ];

	APawn_eventFinishAnimControl_Parms FinishAnimControl_Parms;
	FinishAnimControl_Parms.InInterpGroup = InInterpGroup;

	this->ProcessEvent ( pFnFinishAnimControl, &FinishAnimControl_Parms, NULL );
};

// Function Engine.Pawn.MAT_BeginAnimControl
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void APawn::MAT_BeginAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnMAT_BeginAnimControl = NULL;

	if ( ! pFnMAT_BeginAnimControl )
		pFnMAT_BeginAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 23847 ];

	APawn_execMAT_BeginAnimControl_Parms MAT_BeginAnimControl_Parms;
	MAT_BeginAnimControl_Parms.InInterpGroup = InInterpGroup;

	pFnMAT_BeginAnimControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_BeginAnimControl, &MAT_BeginAnimControl_Parms, NULL );

	pFnMAT_BeginAnimControl->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.BeginAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void APawn::eventBeginAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnBeginAnimControl = NULL;

	if ( ! pFnBeginAnimControl )
		pFnBeginAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 23845 ];

	APawn_eventBeginAnimControl_Parms BeginAnimControl_Parms;
	BeginAnimControl_Parms.InInterpGroup = InInterpGroup;

	this->ProcessEvent ( pFnBeginAnimControl, &BeginAnimControl_Parms, NULL );
};

// Function Engine.Pawn.RestoreAnimSetsToDefault
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::eventRestoreAnimSetsToDefault ( )
{
	static UFunction* pFnRestoreAnimSetsToDefault = NULL;

	if ( ! pFnRestoreAnimSetsToDefault )
		pFnRestoreAnimSetsToDefault = (UFunction*) UObject::GObjObjects()->Data[ 23843 ];

	APawn_eventRestoreAnimSetsToDefault_Parms RestoreAnimSetsToDefault_Parms;

	this->ProcessEvent ( pFnRestoreAnimSetsToDefault, &RestoreAnimSetsToDefault_Parms, NULL );

	return RestoreAnimSetsToDefault_Parms.ReturnValue;
};

// Function Engine.Pawn.AnimSetListUpdated
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void APawn::eventAnimSetListUpdated ( )
{
	static UFunction* pFnAnimSetListUpdated = NULL;

	if ( ! pFnAnimSetListUpdated )
		pFnAnimSetListUpdated = (UFunction*) UObject::GObjObjects()->Data[ 23842 ];

	APawn_eventAnimSetListUpdated_Parms AnimSetListUpdated_Parms;

	this->ProcessEvent ( pFnAnimSetListUpdated, &AnimSetListUpdated_Parms, NULL );
};

// Function Engine.Pawn.AddAnimSets
// [0x00420501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct TArray<class UAnimSet*> CustomAnimSets                 ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void APawn::AddAnimSets ( struct TArray<class UAnimSet*>* CustomAnimSets )
{
	static UFunction* pFnAddAnimSets = NULL;

	if ( ! pFnAddAnimSets )
		pFnAddAnimSets = (UFunction*) UObject::GObjObjects()->Data[ 23839 ];

	APawn_execAddAnimSets_Parms AddAnimSets_Parms;

	pFnAddAnimSets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddAnimSets, &AddAnimSets_Parms, NULL );

	pFnAddAnimSets->FunctionFlags |= 0x400;

	if ( CustomAnimSets )
		memcpy ( CustomAnimSets, &AddAnimSets_Parms.CustomAnimSets, 0x10 );
};

// Function Engine.Pawn.BuildScriptAnimSetList
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void APawn::eventBuildScriptAnimSetList ( )
{
	static UFunction* pFnBuildScriptAnimSetList = NULL;

	if ( ! pFnBuildScriptAnimSetList )
		pFnBuildScriptAnimSetList = (UFunction*) UObject::GObjObjects()->Data[ 23838 ];

	APawn_eventBuildScriptAnimSetList_Parms BuildScriptAnimSetList_Parms;

	this->ProcessEvent ( pFnBuildScriptAnimSetList, &BuildScriptAnimSetList_Parms, NULL );
};

// Function Engine.Pawn.UpdateAnimSetList
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void APawn::UpdateAnimSetList ( )
{
	static UFunction* pFnUpdateAnimSetList = NULL;

	if ( ! pFnUpdateAnimSetList )
		pFnUpdateAnimSetList = (UFunction*) UObject::GObjObjects()->Data[ 23837 ];

	APawn_execUpdateAnimSetList_Parms UpdateAnimSetList_Parms;

	pFnUpdateAnimSetList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateAnimSetList, &UpdateAnimSetList_Parms, NULL );

	pFnUpdateAnimSetList->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.ClearAnimNodes
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::ClearAnimNodes ( )
{
	static UFunction* pFnClearAnimNodes = NULL;

	if ( ! pFnClearAnimNodes )
		pFnClearAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 23836 ];

	APawn_execClearAnimNodes_Parms ClearAnimNodes_Parms;

	pFnClearAnimNodes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearAnimNodes, &ClearAnimNodes_Parms, NULL );

	pFnClearAnimNodes->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.CacheAnimNodes
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::CacheAnimNodes ( )
{
	static UFunction* pFnCacheAnimNodes = NULL;

	if ( ! pFnCacheAnimNodes )
		pFnCacheAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 23835 ];

	APawn_execCacheAnimNodes_Parms CacheAnimNodes_Parms;

	pFnCacheAnimNodes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCacheAnimNodes, &CacheAnimNodes_Parms, NULL );

	pFnCacheAnimNodes->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.PostInitAnimTree
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void APawn::PostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 23833 ];

	APawn_execPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	pFnPostInitAnimTree->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );

	pFnPostInitAnimTree->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.IsDesiredRotationLocked
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsDesiredRotationLocked ( )
{
	static UFunction* pFnIsDesiredRotationLocked = NULL;

	if ( ! pFnIsDesiredRotationLocked )
		pFnIsDesiredRotationLocked = (UFunction*) UObject::GObjObjects()->Data[ 23831 ];

	APawn_execIsDesiredRotationLocked_Parms IsDesiredRotationLocked_Parms;

	pFnIsDesiredRotationLocked->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDesiredRotationLocked, &IsDesiredRotationLocked_Parms, NULL );

	pFnIsDesiredRotationLocked->FunctionFlags |= 0x400;

	return IsDesiredRotationLocked_Parms.ReturnValue;
};

// Function Engine.Pawn.IsDesiredRotationInUse
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsDesiredRotationInUse ( )
{
	static UFunction* pFnIsDesiredRotationInUse = NULL;

	if ( ! pFnIsDesiredRotationInUse )
		pFnIsDesiredRotationInUse = (UFunction*) UObject::GObjObjects()->Data[ 23829 ];

	APawn_execIsDesiredRotationInUse_Parms IsDesiredRotationInUse_Parms;

	pFnIsDesiredRotationInUse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDesiredRotationInUse, &IsDesiredRotationInUse_Parms, NULL );

	pFnIsDesiredRotationInUse->FunctionFlags |= 0x400;

	return IsDesiredRotationInUse_Parms.ReturnValue;
};

// Function Engine.Pawn.CheckDesiredRotation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void APawn::CheckDesiredRotation ( )
{
	static UFunction* pFnCheckDesiredRotation = NULL;

	if ( ! pFnCheckDesiredRotation )
		pFnCheckDesiredRotation = (UFunction*) UObject::GObjObjects()->Data[ 23828 ];

	APawn_execCheckDesiredRotation_Parms CheckDesiredRotation_Parms;

	pFnCheckDesiredRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckDesiredRotation, &CheckDesiredRotation_Parms, NULL );

	pFnCheckDesiredRotation->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.ResetDesiredRotation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void APawn::ResetDesiredRotation ( )
{
	static UFunction* pFnResetDesiredRotation = NULL;

	if ( ! pFnResetDesiredRotation )
		pFnResetDesiredRotation = (UFunction*) UObject::GObjObjects()->Data[ 23827 ];

	APawn_execResetDesiredRotation_Parms ResetDesiredRotation_Parms;

	pFnResetDesiredRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetDesiredRotation, &ResetDesiredRotation_Parms, NULL );

	pFnResetDesiredRotation->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.LockDesiredRotation
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  Lock                           ( CPF_Parm )
// unsigned long                  InUnlockWhenReached            ( CPF_OptionalParm | CPF_Parm )

void APawn::LockDesiredRotation ( unsigned long Lock, unsigned long InUnlockWhenReached )
{
	static UFunction* pFnLockDesiredRotation = NULL;

	if ( ! pFnLockDesiredRotation )
		pFnLockDesiredRotation = (UFunction*) UObject::GObjObjects()->Data[ 23824 ];

	APawn_execLockDesiredRotation_Parms LockDesiredRotation_Parms;
	LockDesiredRotation_Parms.Lock = Lock;
	LockDesiredRotation_Parms.InUnlockWhenReached = InUnlockWhenReached;

	pFnLockDesiredRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLockDesiredRotation, &LockDesiredRotation_Parms, NULL );

	pFnLockDesiredRotation->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.EpicSetDesiredRotation
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                TargetDesiredRotation          ( CPF_Parm )
// unsigned long                  InLockDesiredRotation          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  InUnlockWhenReached            ( CPF_OptionalParm | CPF_Parm )
// float                          InterpolationTime              ( CPF_OptionalParm | CPF_Parm )

bool APawn::EpicSetDesiredRotation ( struct FRotator TargetDesiredRotation, unsigned long InLockDesiredRotation, unsigned long InUnlockWhenReached, float InterpolationTime )
{
	static UFunction* pFnEpicSetDesiredRotation = NULL;

	if ( ! pFnEpicSetDesiredRotation )
		pFnEpicSetDesiredRotation = (UFunction*) UObject::GObjObjects()->Data[ 10913 ];

	APawn_execEpicSetDesiredRotation_Parms EpicSetDesiredRotation_Parms;
	memcpy ( &EpicSetDesiredRotation_Parms.TargetDesiredRotation, &TargetDesiredRotation, 0xC );
	EpicSetDesiredRotation_Parms.InLockDesiredRotation = InLockDesiredRotation;
	EpicSetDesiredRotation_Parms.InUnlockWhenReached = InUnlockWhenReached;
	EpicSetDesiredRotation_Parms.InterpolationTime = InterpolationTime;

	pFnEpicSetDesiredRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEpicSetDesiredRotation, &EpicSetDesiredRotation_Parms, NULL );

	pFnEpicSetDesiredRotation->FunctionFlags |= 0x400;

	return EpicSetDesiredRotation_Parms.ReturnValue;
};

// Function Engine.Vehicle.NotifyDriverTakeHit
// [0x00020000] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void AVehicle::NotifyDriverTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnNotifyDriverTakeHit = NULL;

	if ( ! pFnNotifyDriverTakeHit )
		pFnNotifyDriverTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 31433 ];

	AVehicle_execNotifyDriverTakeHit_Parms NotifyDriverTakeHit_Parms;
	NotifyDriverTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NotifyDriverTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyDriverTakeHit_Parms.Damage = Damage;
	NotifyDriverTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyDriverTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnNotifyDriverTakeHit, &NotifyDriverTakeHit_Parms, NULL );
};

// Function Engine.Vehicle.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AVehicle::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 31431 ];

	AVehicle_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.Vehicle.DrivingStatusChanged
// [0x00020100] 
// Parameters infos:

void AVehicle::DrivingStatusChanged ( )
{
	static UFunction* pFnDrivingStatusChanged = NULL;

	if ( ! pFnDrivingStatusChanged )
		pFnDrivingStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 31430 ];

	AVehicle_execDrivingStatusChanged_Parms DrivingStatusChanged_Parms;

	this->ProcessEvent ( pFnDrivingStatusChanged, &DrivingStatusChanged_Parms, NULL );
};

// Function Engine.Vehicle.KillDriver
// [0x00020000] 
// Parameters infos:

void AVehicle::KillDriver ( )
{
	static UFunction* pFnKillDriver = NULL;

	if ( ! pFnKillDriver )
		pFnKillDriver = (UFunction*) UObject::GObjObjects()->Data[ 31429 ];

	AVehicle_execKillDriver_Parms KillDriver_Parms;

	this->ProcessEvent ( pFnKillDriver, &KillDriver_Parms, NULL );
};

// Function Engine.Vehicle.SetDriving
// [0x00020102] 
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void AVehicle::SetDriving ( unsigned long B )
{
	static UFunction* pFnSetDriving = NULL;

	if ( ! pFnSetDriving )
		pFnSetDriving = (UFunction*) UObject::GObjObjects()->Data[ 31426 ];

	AVehicle_execSetDriving_Parms SetDriving_Parms;
	SetDriving_Parms.B = B;

	this->ProcessEvent ( pFnSetDriving, &SetDriving_Parms, NULL );
};

// Function Engine.Vehicle.GetEntryLocation
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector AVehicle::GetEntryLocation ( )
{
	static UFunction* pFnGetEntryLocation = NULL;

	if ( ! pFnGetEntryLocation )
		pFnGetEntryLocation = (UFunction*) UObject::GObjObjects()->Data[ 31424 ];

	AVehicle_execGetEntryLocation_Parms GetEntryLocation_Parms;

	this->ProcessEvent ( pFnGetEntryLocation, &GetEntryLocation_Parms, NULL );

	return GetEntryLocation_Parms.ReturnValue;
};

// Function Engine.Vehicle.CrushedBy
// [0x00020000] 
// Parameters infos:
// class APawn*                   OtherPawn                      ( CPF_Parm )

void AVehicle::CrushedBy ( class APawn* OtherPawn )
{
	static UFunction* pFnCrushedBy = NULL;

	if ( ! pFnCrushedBy )
		pFnCrushedBy = (UFunction*) UObject::GObjObjects()->Data[ 31422 ];

	AVehicle_execCrushedBy_Parms CrushedBy_Parms;
	CrushedBy_Parms.OtherPawn = OtherPawn;

	this->ProcessEvent ( pFnCrushedBy, &CrushedBy_Parms, NULL );
};

// Function Engine.Vehicle.EncroachingOn
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AVehicle::eventEncroachingOn ( class AActor* Other )
{
	static UFunction* pFnEncroachingOn = NULL;

	if ( ! pFnEncroachingOn )
		pFnEncroachingOn = (UFunction*) UObject::GObjObjects()->Data[ 31414 ];

	AVehicle_eventEncroachingOn_Parms EncroachingOn_Parms;
	EncroachingOn_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachingOn, &EncroachingOn_Parms, NULL );

	return EncroachingOn_Parms.ReturnValue;
};

// Function Engine.Vehicle.EncroachedBy
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AVehicle::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = (UFunction*) UObject::GObjObjects()->Data[ 31412 ];

	AVehicle_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function Engine.Vehicle.FaceRotation
// [0x00020100] 
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )

void AVehicle::FaceRotation ( struct FRotator NewRotation, float DeltaTime )
{
	static UFunction* pFnFaceRotation = NULL;

	if ( ! pFnFaceRotation )
		pFnFaceRotation = (UFunction*) UObject::GObjObjects()->Data[ 31409 ];

	AVehicle_execFaceRotation_Parms FaceRotation_Parms;
	memcpy ( &FaceRotation_Parms.NewRotation, &NewRotation, 0xC );
	FaceRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnFaceRotation, &FaceRotation_Parms, NULL );
};

// Function Engine.Vehicle.GetDefaultCameraMode
// [0x00020102] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       RequestedBy                    ( CPF_Parm )

struct FName AVehicle::GetDefaultCameraMode ( class APlayerController* RequestedBy )
{
	static UFunction* pFnGetDefaultCameraMode = NULL;

	if ( ! pFnGetDefaultCameraMode )
		pFnGetDefaultCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 31406 ];

	AVehicle_execGetDefaultCameraMode_Parms GetDefaultCameraMode_Parms;
	GetDefaultCameraMode_Parms.RequestedBy = RequestedBy;

	this->ProcessEvent ( pFnGetDefaultCameraMode, &GetDefaultCameraMode_Parms, NULL );

	return GetDefaultCameraMode_Parms.ReturnValue;
};

// Function Engine.Vehicle.PlayDying
// [0x00020100] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void AVehicle::PlayDying ( class UClass* DamageType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 31403 ];

	AVehicle_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.DamageType = DamageType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function Engine.Vehicle.DriverDied
// [0x00020002] 
// Parameters infos:

void AVehicle::DriverDied ( )
{
	static UFunction* pFnDriverDied = NULL;

	if ( ! pFnDriverDied )
		pFnDriverDied = (UFunction*) UObject::GObjObjects()->Data[ 31401 ];

	AVehicle_execDriverDied_Parms DriverDied_Parms;

	this->ProcessEvent ( pFnDriverDied, &DriverDied_Parms, NULL );
};

// Function Engine.Vehicle.Died
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool AVehicle::Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 31396 ];

	AVehicle_execDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.DamageType = DamageType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function Engine.Vehicle.TossWeapon
// [0x00020000] 
// Parameters infos:
// struct FVector                 TossVel                        ( CPF_Parm )

void AVehicle::TossWeapon ( struct FVector TossVel )
{
	static UFunction* pFnTossWeapon = NULL;

	if ( ! pFnTossWeapon )
		pFnTossWeapon = (UFunction*) UObject::GObjObjects()->Data[ 31394 ];

	AVehicle_execTossWeapon_Parms TossWeapon_Parms;
	memcpy ( &TossWeapon_Parms.TossVel, &TossVel, 0xC );

	this->ProcessEvent ( pFnTossWeapon, &TossWeapon_Parms, NULL );
};

// Function Engine.Vehicle.AdjustDriverDamage
// [0x00420002] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Damage                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void AVehicle::AdjustDriverDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, float* Damage, struct FVector* Momentum )
{
	static UFunction* pFnAdjustDriverDamage = NULL;

	if ( ! pFnAdjustDriverDamage )
		pFnAdjustDriverDamage = (UFunction*) UObject::GObjObjects()->Data[ 31387 ];

	AVehicle_execAdjustDriverDamage_Parms AdjustDriverDamage_Parms;
	AdjustDriverDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &AdjustDriverDamage_Parms.HitLocation, &HitLocation, 0xC );
	AdjustDriverDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnAdjustDriverDamage, &AdjustDriverDamage_Parms, NULL );

	if ( Damage )
		*Damage = AdjustDriverDamage_Parms.Damage;

	if ( Momentum )
		memcpy ( Momentum, &AdjustDriverDamage_Parms.Momentum, 0xC );
};

// Function Engine.Vehicle.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )
// class UDamageType*             pDamage                        ( CPF_OptionalParm | CPF_Parm )

void AVehicle::eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UDamageType* pDamage )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 31377 ];

	AVehicle_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x28 );
	TakeDamage_Parms.DamageCauser = DamageCauser;
	TakeDamage_Parms.pDamage = pDamage;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.Vehicle.UnPossessed
// [0x00020002] 
// Parameters infos:

void AVehicle::UnPossessed ( )
{
	static UFunction* pFnUnPossessed = NULL;

	if ( ! pFnUnPossessed )
		pFnUnPossessed = (UFunction*) UObject::GObjObjects()->Data[ 31376 ];

	AVehicle_execUnPossessed_Parms UnPossessed_Parms;

	this->ProcessEvent ( pFnUnPossessed, &UnPossessed_Parms, NULL );
};

// Function Engine.Vehicle.TryExitPos
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ExitingDriver                  ( CPF_Parm )
// struct FVector                 ExitPos                        ( CPF_Parm )

bool AVehicle::TryExitPos ( class APawn* ExitingDriver, struct FVector ExitPos )
{
	static UFunction* pFnTryExitPos = NULL;

	if ( ! pFnTryExitPos )
		pFnTryExitPos = (UFunction*) UObject::GObjObjects()->Data[ 31367 ];

	AVehicle_execTryExitPos_Parms TryExitPos_Parms;
	TryExitPos_Parms.ExitingDriver = ExitingDriver;
	memcpy ( &TryExitPos_Parms.ExitPos, &ExitPos, 0xC );

	this->ProcessEvent ( pFnTryExitPos, &TryExitPos_Parms, NULL );

	return TryExitPos_Parms.ReturnValue;
};

// Function Engine.Vehicle.FindAutoExit
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ExitingDriver                  ( CPF_Parm )

bool AVehicle::FindAutoExit ( class APawn* ExitingDriver )
{
	static UFunction* pFnFindAutoExit = NULL;

	if ( ! pFnFindAutoExit )
		pFnFindAutoExit = (UFunction*) UObject::GObjObjects()->Data[ 31359 ];

	AVehicle_execFindAutoExit_Parms FindAutoExit_Parms;
	FindAutoExit_Parms.ExitingDriver = ExitingDriver;

	this->ProcessEvent ( pFnFindAutoExit, &FindAutoExit_Parms, NULL );

	return FindAutoExit_Parms.ReturnValue;
};

// Function Engine.Vehicle.PlaceExitingDriver
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ExitingDriver                  ( CPF_OptionalParm | CPF_Parm )

bool AVehicle::PlaceExitingDriver ( class APawn* ExitingDriver )
{
	static UFunction* pFnPlaceExitingDriver = NULL;

	if ( ! pFnPlaceExitingDriver )
		pFnPlaceExitingDriver = (UFunction*) UObject::GObjObjects()->Data[ 31350 ];

	AVehicle_execPlaceExitingDriver_Parms PlaceExitingDriver_Parms;
	PlaceExitingDriver_Parms.ExitingDriver = ExitingDriver;

	this->ProcessEvent ( pFnPlaceExitingDriver, &PlaceExitingDriver_Parms, NULL );

	return PlaceExitingDriver_Parms.ReturnValue;
};

// Function Engine.Vehicle.DriverLeft
// [0x00020102] 
// Parameters infos:

void AVehicle::DriverLeft ( )
{
	static UFunction* pFnDriverLeft = NULL;

	if ( ! pFnDriverLeft )
		pFnDriverLeft = (UFunction*) UObject::GObjObjects()->Data[ 31349 ];

	AVehicle_execDriverLeft_Parms DriverLeft_Parms;

	this->ProcessEvent ( pFnDriverLeft, &DriverLeft_Parms, NULL );
};

// Function Engine.Vehicle.SetInputs
// [0x00020102] 
// Parameters infos:
// float                          InForward                      ( CPF_Parm )
// float                          InStrafe                       ( CPF_Parm )
// float                          InUp                           ( CPF_Parm )

void AVehicle::SetInputs ( float InForward, float InStrafe, float InUp )
{
	static UFunction* pFnSetInputs = NULL;

	if ( ! pFnSetInputs )
		pFnSetInputs = (UFunction*) UObject::GObjObjects()->Data[ 31345 ];

	AVehicle_execSetInputs_Parms SetInputs_Parms;
	SetInputs_Parms.InForward = InForward;
	SetInputs_Parms.InStrafe = InStrafe;
	SetInputs_Parms.InUp = InUp;

	this->ProcessEvent ( pFnSetInputs, &SetInputs_Parms, NULL );
};

// Function Engine.Vehicle.DriverLeave
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceLeave                    ( CPF_Parm )

bool AVehicle::eventDriverLeave ( unsigned long bForceLeave )
{
	static UFunction* pFnDriverLeave = NULL;

	if ( ! pFnDriverLeave )
		pFnDriverLeave = (UFunction*) UObject::GObjObjects()->Data[ 8076 ];

	AVehicle_eventDriverLeave_Parms DriverLeave_Parms;
	DriverLeave_Parms.bForceLeave = bForceLeave;

	this->ProcessEvent ( pFnDriverLeave, &DriverLeave_Parms, NULL );

	return DriverLeave_Parms.ReturnValue;
};

// Function Engine.Vehicle.ContinueOnFoot
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AVehicle::eventContinueOnFoot ( )
{
	static UFunction* pFnContinueOnFoot = NULL;

	if ( ! pFnContinueOnFoot )
		pFnContinueOnFoot = (UFunction*) UObject::GObjObjects()->Data[ 31339 ];

	AVehicle_eventContinueOnFoot_Parms ContinueOnFoot_Parms;

	this->ProcessEvent ( pFnContinueOnFoot, &ContinueOnFoot_Parms, NULL );

	return ContinueOnFoot_Parms.ReturnValue;
};

// Function Engine.Vehicle.DetachDriver
// [0x00020100] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AVehicle::DetachDriver ( class APawn* P )
{
	static UFunction* pFnDetachDriver = NULL;

	if ( ! pFnDetachDriver )
		pFnDetachDriver = (UFunction*) UObject::GObjObjects()->Data[ 31337 ];

	AVehicle_execDetachDriver_Parms DetachDriver_Parms;
	DetachDriver_Parms.P = P;

	this->ProcessEvent ( pFnDetachDriver, &DetachDriver_Parms, NULL );
};

// Function Engine.Vehicle.AttachDriver
// [0x00020102] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AVehicle::AttachDriver ( class APawn* P )
{
	static UFunction* pFnAttachDriver = NULL;

	if ( ! pFnAttachDriver )
		pFnAttachDriver = (UFunction*) UObject::GObjObjects()->Data[ 31334 ];

	AVehicle_execAttachDriver_Parms AttachDriver_Parms;
	AttachDriver_Parms.P = P;

	this->ProcessEvent ( pFnAttachDriver, &AttachDriver_Parms, NULL );
};

// Function Engine.Vehicle.EntryAnnouncement
// [0x00020000] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )

void AVehicle::EntryAnnouncement ( class AController* C )
{
	static UFunction* pFnEntryAnnouncement = NULL;

	if ( ! pFnEntryAnnouncement )
		pFnEntryAnnouncement = (UFunction*) UObject::GObjObjects()->Data[ 31332 ];

	AVehicle_execEntryAnnouncement_Parms EntryAnnouncement_Parms;
	EntryAnnouncement_Parms.C = C;

	this->ProcessEvent ( pFnEntryAnnouncement, &EntryAnnouncement_Parms, NULL );
};

// Function Engine.Vehicle.PossessedBy
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void AVehicle::PossessedBy ( class AController* C, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = (UFunction*) UObject::GObjObjects()->Data[ 31328 ];

	AVehicle_execPossessedBy_Parms PossessedBy_Parms;
	PossessedBy_Parms.C = C;
	PossessedBy_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function Engine.Vehicle.DriverEnter
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool AVehicle::DriverEnter ( class APawn* P )
{
	static UFunction* pFnDriverEnter = NULL;

	if ( ! pFnDriverEnter )
		pFnDriverEnter = (UFunction*) UObject::GObjObjects()->Data[ 31324 ];

	AVehicle_execDriverEnter_Parms DriverEnter_Parms;
	DriverEnter_Parms.P = P;

	this->ProcessEvent ( pFnDriverEnter, &DriverEnter_Parms, NULL );

	return DriverEnter_Parms.ReturnValue;
};

// Function Engine.Vehicle.TryToDrive
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool AVehicle::TryToDrive ( class APawn* P )
{
	static UFunction* pFnTryToDrive = NULL;

	if ( ! pFnTryToDrive )
		pFnTryToDrive = (UFunction*) UObject::GObjObjects()->Data[ 8079 ];

	AVehicle_execTryToDrive_Parms TryToDrive_Parms;
	TryToDrive_Parms.P = P;

	this->ProcessEvent ( pFnTryToDrive, &TryToDrive_Parms, NULL );

	return TryToDrive_Parms.ReturnValue;
};

// Function Engine.Vehicle.AnySeatAvailable
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AVehicle::AnySeatAvailable ( )
{
	static UFunction* pFnAnySeatAvailable = NULL;

	if ( ! pFnAnySeatAvailable )
		pFnAnySeatAvailable = (UFunction*) UObject::GObjObjects()->Data[ 31321 ];

	AVehicle_execAnySeatAvailable_Parms AnySeatAvailable_Parms;

	this->ProcessEvent ( pFnAnySeatAvailable, &AnySeatAvailable_Parms, NULL );

	return AnySeatAvailable_Parms.ReturnValue;
};

// Function Engine.Vehicle.CanEnterVehicle
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool AVehicle::CanEnterVehicle ( class APawn* P )
{
	static UFunction* pFnCanEnterVehicle = NULL;

	if ( ! pFnCanEnterVehicle )
		pFnCanEnterVehicle = (UFunction*) UObject::GObjObjects()->Data[ 31318 ];

	AVehicle_execCanEnterVehicle_Parms CanEnterVehicle_Parms;
	CanEnterVehicle_Parms.P = P;

	this->ProcessEvent ( pFnCanEnterVehicle, &CanEnterVehicle_Parms, NULL );

	return CanEnterVehicle_Parms.ReturnValue;
};

// Function Engine.Vehicle.Destroyed_HandleDriver
// [0x00020102] 
// Parameters infos:

void AVehicle::Destroyed_HandleDriver ( )
{
	static UFunction* pFnDestroyed_HandleDriver = NULL;

	if ( ! pFnDestroyed_HandleDriver )
		pFnDestroyed_HandleDriver = (UFunction*) UObject::GObjObjects()->Data[ 31316 ];

	AVehicle_execDestroyed_HandleDriver_Parms Destroyed_HandleDriver_Parms;

	this->ProcessEvent ( pFnDestroyed_HandleDriver, &Destroyed_HandleDriver_Parms, NULL );
};

// Function Engine.Vehicle.Destroyed
// [0x00020102] 
// Parameters infos:

void AVehicle::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 31315 ];

	AVehicle_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Vehicle.CheatFly
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AVehicle::CheatFly ( )
{
	static UFunction* pFnCheatFly = NULL;

	if ( ! pFnCheatFly )
		pFnCheatFly = (UFunction*) UObject::GObjObjects()->Data[ 31313 ];

	AVehicle_execCheatFly_Parms CheatFly_Parms;

	this->ProcessEvent ( pFnCheatFly, &CheatFly_Parms, NULL );

	return CheatFly_Parms.ReturnValue;
};

// Function Engine.Vehicle.CheatGhost
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AVehicle::CheatGhost ( )
{
	static UFunction* pFnCheatGhost = NULL;

	if ( ! pFnCheatGhost )
		pFnCheatGhost = (UFunction*) UObject::GObjObjects()->Data[ 31311 ];

	AVehicle_execCheatGhost_Parms CheatGhost_Parms;

	this->ProcessEvent ( pFnCheatGhost, &CheatGhost_Parms, NULL );

	return CheatGhost_Parms.ReturnValue;
};

// Function Engine.Vehicle.CheatWalk
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AVehicle::CheatWalk ( )
{
	static UFunction* pFnCheatWalk = NULL;

	if ( ! pFnCheatWalk )
		pFnCheatWalk = (UFunction*) UObject::GObjObjects()->Data[ 31309 ];

	AVehicle_execCheatWalk_Parms CheatWalk_Parms;

	this->ProcessEvent ( pFnCheatWalk, &CheatWalk_Parms, NULL );

	return CheatWalk_Parms.ReturnValue;
};

// Function Engine.Vehicle.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void AVehicle::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 31308 ];

	AVehicle_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Vehicle.SetBaseEyeheight
// [0x00020102] 
// Parameters infos:

void AVehicle::SetBaseEyeheight ( )
{
	static UFunction* pFnSetBaseEyeheight = NULL;

	if ( ! pFnSetBaseEyeheight )
		pFnSetBaseEyeheight = (UFunction*) UObject::GObjObjects()->Data[ 31307 ];

	AVehicle_execSetBaseEyeheight_Parms SetBaseEyeheight_Parms;

	this->ProcessEvent ( pFnSetBaseEyeheight, &SetBaseEyeheight_Parms, NULL );
};

// Function Engine.Vehicle.PlayerChangedTeam
// [0x00020002] 
// Parameters infos:

void AVehicle::PlayerChangedTeam ( )
{
	static UFunction* pFnPlayerChangedTeam = NULL;

	if ( ! pFnPlayerChangedTeam )
		pFnPlayerChangedTeam = (UFunction*) UObject::GObjObjects()->Data[ 31306 ];

	AVehicle_execPlayerChangedTeam_Parms PlayerChangedTeam_Parms;

	this->ProcessEvent ( pFnPlayerChangedTeam, &PlayerChangedTeam_Parms, NULL );
};

// Function Engine.Vehicle.DriverRadiusDamage
// [0x00020002] 
// Parameters infos:
// float                          DamageAmount                   ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )

void AVehicle::DriverRadiusDamage ( float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, struct FVector HitLocation, class AActor* DamageCauser )
{
	static UFunction* pFnDriverRadiusDamage = NULL;

	if ( ! pFnDriverRadiusDamage )
		pFnDriverRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 31297 ];

	AVehicle_execDriverRadiusDamage_Parms DriverRadiusDamage_Parms;
	DriverRadiusDamage_Parms.DamageAmount = DamageAmount;
	DriverRadiusDamage_Parms.DamageRadius = DamageRadius;
	DriverRadiusDamage_Parms.EventInstigator = EventInstigator;
	DriverRadiusDamage_Parms.DamageType = DamageType;
	DriverRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &DriverRadiusDamage_Parms.HitLocation, &HitLocation, 0xC );
	DriverRadiusDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnDriverRadiusDamage, &DriverRadiusDamage_Parms, NULL );
};

// Function Engine.Vehicle.TakeRadiusDamage
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// class UDamageType*             pDamage                        ( CPF_OptionalParm | CPF_Parm )
// float                          DamageFalloffExponent          ( CPF_OptionalParm | CPF_Parm )

void AVehicle::eventTakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, class UDamageType* pDamage, float DamageFalloffExponent )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 31286 ];

	AVehicle_eventTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;
	TakeRadiusDamage_Parms.pDamage = pDamage;
	TakeRadiusDamage_Parms.DamageFalloffExponent = DamageFalloffExponent;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.Vehicle.GetTargetLocation
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  RequestedBy                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRequestAlternateLoc           ( CPF_OptionalParm | CPF_Parm )

struct FVector AVehicle::GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc )
{
	static UFunction* pFnGetTargetLocation = NULL;

	if ( ! pFnGetTargetLocation )
		pFnGetTargetLocation = (UFunction*) UObject::GObjObjects()->Data[ 31282 ];

	AVehicle_execGetTargetLocation_Parms GetTargetLocation_Parms;
	GetTargetLocation_Parms.RequestedBy = RequestedBy;
	GetTargetLocation_Parms.bRequestAlternateLoc = bRequestAlternateLoc;

	pFnGetTargetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTargetLocation, &GetTargetLocation_Parms, NULL );

	pFnGetTargetLocation->FunctionFlags |= 0x400;

	return GetTargetLocation_Parms.ReturnValue;
};

// Function Engine.Vehicle.Suicide
// [0x00020002] 
// Parameters infos:

void AVehicle::Suicide ( )
{
	static UFunction* pFnSuicide = NULL;

	if ( ! pFnSuicide )
		pFnSuicide = (UFunction*) UObject::GObjObjects()->Data[ 31281 ];

	AVehicle_execSuicide_Parms Suicide_Parms;

	this->ProcessEvent ( pFnSuicide, &Suicide_Parms, NULL );
};

// Function Engine.Vehicle.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AVehicle::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 31273 ];

	AVehicle_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Vehicle.NotifyTeamChanged
// [0x00020102] 
// Parameters infos:

void AVehicle::NotifyTeamChanged ( )
{
	static UFunction* pFnNotifyTeamChanged = NULL;

	if ( ! pFnNotifyTeamChanged )
		pFnNotifyTeamChanged = (UFunction*) UObject::GObjObjects()->Data[ 31272 ];

	AVehicle_execNotifyTeamChanged_Parms NotifyTeamChanged_Parms;

	this->ProcessEvent ( pFnNotifyTeamChanged, &NotifyTeamChanged_Parms, NULL );
};

// Function Engine.SVehicle.GetSVehicleDebug
// [0x00420102] 
// Parameters infos:
// struct TArray<struct FString>  DebugInfo                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASVehicle::GetSVehicleDebug ( struct TArray<struct FString>* DebugInfo )
{
	static UFunction* pFnGetSVehicleDebug = NULL;

	if ( ! pFnGetSVehicleDebug )
		pFnGetSVehicleDebug = (UFunction*) UObject::GObjObjects()->Data[ 31587 ];

	ASVehicle_execGetSVehicleDebug_Parms GetSVehicleDebug_Parms;

	this->ProcessEvent ( pFnGetSVehicleDebug, &GetSVehicleDebug_Parms, NULL );

	if ( DebugInfo )
		memcpy ( DebugInfo, &GetSVehicleDebug_Parms.DebugInfo, 0x10 );
};

// Function Engine.SVehicle.HermiteEval
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Slip                           ( CPF_Parm )

float ASVehicle::HermiteEval ( float Slip )
{
	static UFunction* pFnHermiteEval = NULL;

	if ( ! pFnHermiteEval )
		pFnHermiteEval = (UFunction*) UObject::GObjObjects()->Data[ 31572 ];

	ASVehicle_execHermiteEval_Parms HermiteEval_Parms;
	HermiteEval_Parms.Slip = Slip;

	this->ProcessEvent ( pFnHermiteEval, &HermiteEval_Parms, NULL );

	return HermiteEval_Parms.ReturnValue;
};

// Function Engine.SVehicle.DisplayWheelsDebug
// [0x00020102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          YL                             ( CPF_Parm )

void ASVehicle::DisplayWheelsDebug ( class AHUD* HUD, float YL )
{
	static UFunction* pFnDisplayWheelsDebug = NULL;

	if ( ! pFnDisplayWheelsDebug )
		pFnDisplayWheelsDebug = (UFunction*) UObject::GObjObjects()->Data[ 31553 ];

	ASVehicle_execDisplayWheelsDebug_Parms DisplayWheelsDebug_Parms;
	DisplayWheelsDebug_Parms.HUD = HUD;
	DisplayWheelsDebug_Parms.YL = YL;

	this->ProcessEvent ( pFnDisplayWheelsDebug, &DisplayWheelsDebug_Parms, NULL );
};

// Function Engine.SVehicle.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void ASVehicle::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 31546 ];

	ASVehicle_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.SVehicle.PostTeleport
// [0x00020002] 
// Parameters infos:
// class ATeleporter*             OutTeleporter                  ( CPF_Parm )

void ASVehicle::PostTeleport ( class ATeleporter* OutTeleporter )
{
	static UFunction* pFnPostTeleport = NULL;

	if ( ! pFnPostTeleport )
		pFnPostTeleport = (UFunction*) UObject::GObjObjects()->Data[ 31544 ];

	ASVehicle_execPostTeleport_Parms PostTeleport_Parms;
	PostTeleport_Parms.OutTeleporter = OutTeleporter;

	this->ProcessEvent ( pFnPostTeleport, &PostTeleport_Parms, NULL );
};

// Function Engine.SVehicle.RigidBodyCollision
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     HitComponent                   ( CPF_Parm | CPF_EditInline )
// class UPrimitiveComponent*     OtherComponent                 ( CPF_Parm | CPF_EditInline )
// int                            ContactIndex                   ( CPF_Parm )
// struct FCollisionImpactData    RigidCollisionData             ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASVehicle::eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData )
{
	static UFunction* pFnRigidBodyCollision = NULL;

	if ( ! pFnRigidBodyCollision )
		pFnRigidBodyCollision = (UFunction*) UObject::GObjObjects()->Data[ 31536 ];

	ASVehicle_eventRigidBodyCollision_Parms RigidBodyCollision_Parms;
	RigidBodyCollision_Parms.HitComponent = HitComponent;
	RigidBodyCollision_Parms.OtherComponent = OtherComponent;
	RigidBodyCollision_Parms.ContactIndex = ContactIndex;

	this->ProcessEvent ( pFnRigidBodyCollision, &RigidBodyCollision_Parms, NULL );

	if ( RigidCollisionData )
		memcpy ( RigidCollisionData, &RigidBodyCollision_Parms.RigidCollisionData, 0x28 );
};

// Function Engine.SVehicle.DrivingStatusChanged
// [0x00020102] 
// Parameters infos:

void ASVehicle::DrivingStatusChanged ( )
{
	static UFunction* pFnDrivingStatusChanged = NULL;

	if ( ! pFnDrivingStatusChanged )
		pFnDrivingStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 31535 ];

	ASVehicle_execDrivingStatusChanged_Parms DrivingStatusChanged_Parms;

	this->ProcessEvent ( pFnDrivingStatusChanged, &DrivingStatusChanged_Parms, NULL );
};

// Function Engine.SVehicle.VehiclePlayExitSound
// [0x00020102] 
// Parameters infos:

void ASVehicle::VehiclePlayExitSound ( )
{
	static UFunction* pFnVehiclePlayExitSound = NULL;

	if ( ! pFnVehiclePlayExitSound )
		pFnVehiclePlayExitSound = (UFunction*) UObject::GObjObjects()->Data[ 31534 ];

	ASVehicle_execVehiclePlayExitSound_Parms VehiclePlayExitSound_Parms;

	this->ProcessEvent ( pFnVehiclePlayExitSound, &VehiclePlayExitSound_Parms, NULL );
};

// Function Engine.SVehicle.VehiclePlayEnterSound
// [0x00020102] 
// Parameters infos:

void ASVehicle::VehiclePlayEnterSound ( )
{
	static UFunction* pFnVehiclePlayEnterSound = NULL;

	if ( ! pFnVehiclePlayEnterSound )
		pFnVehiclePlayEnterSound = (UFunction*) UObject::GObjObjects()->Data[ 31531 ];

	ASVehicle_execVehiclePlayEnterSound_Parms VehiclePlayEnterSound_Parms;

	this->ProcessEvent ( pFnVehiclePlayEnterSound, &VehiclePlayEnterSound_Parms, NULL );
};

// Function Engine.SVehicle.StopEngineSoundTimed
// [0x00020102] 
// Parameters infos:

void ASVehicle::StopEngineSoundTimed ( )
{
	static UFunction* pFnStopEngineSoundTimed = NULL;

	if ( ! pFnStopEngineSoundTimed )
		pFnStopEngineSoundTimed = (UFunction*) UObject::GObjObjects()->Data[ 31529 ];

	ASVehicle_execStopEngineSoundTimed_Parms StopEngineSoundTimed_Parms;

	this->ProcessEvent ( pFnStopEngineSoundTimed, &StopEngineSoundTimed_Parms, NULL );
};

// Function Engine.SVehicle.StopEngineSound
// [0x00020102] 
// Parameters infos:

void ASVehicle::StopEngineSound ( )
{
	static UFunction* pFnStopEngineSound = NULL;

	if ( ! pFnStopEngineSound )
		pFnStopEngineSound = (UFunction*) UObject::GObjObjects()->Data[ 31528 ];

	ASVehicle_execStopEngineSound_Parms StopEngineSound_Parms;

	this->ProcessEvent ( pFnStopEngineSound, &StopEngineSound_Parms, NULL );
};

// Function Engine.SVehicle.StartEngineSoundTimed
// [0x00020102] 
// Parameters infos:

void ASVehicle::StartEngineSoundTimed ( )
{
	static UFunction* pFnStartEngineSoundTimed = NULL;

	if ( ! pFnStartEngineSoundTimed )
		pFnStartEngineSoundTimed = (UFunction*) UObject::GObjObjects()->Data[ 31526 ];

	ASVehicle_execStartEngineSoundTimed_Parms StartEngineSoundTimed_Parms;

	this->ProcessEvent ( pFnStartEngineSoundTimed, &StartEngineSoundTimed_Parms, NULL );
};

// Function Engine.SVehicle.StartEngineSound
// [0x00020102] 
// Parameters infos:

void ASVehicle::StartEngineSound ( )
{
	static UFunction* pFnStartEngineSound = NULL;

	if ( ! pFnStartEngineSound )
		pFnStartEngineSound = (UFunction*) UObject::GObjObjects()->Data[ 31525 ];

	ASVehicle_execStartEngineSound_Parms StartEngineSound_Parms;

	this->ProcessEvent ( pFnStartEngineSound, &StartEngineSound_Parms, NULL );
};

// Function Engine.SVehicle.HasWheelsOnGround
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASVehicle::HasWheelsOnGround ( )
{
	static UFunction* pFnHasWheelsOnGround = NULL;

	if ( ! pFnHasWheelsOnGround )
		pFnHasWheelsOnGround = (UFunction*) UObject::GObjObjects()->Data[ 31523 ];

	ASVehicle_execHasWheelsOnGround_Parms HasWheelsOnGround_Parms;

	pFnHasWheelsOnGround->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasWheelsOnGround, &HasWheelsOnGround_Parms, NULL );

	pFnHasWheelsOnGround->FunctionFlags |= 0x400;

	return HasWheelsOnGround_Parms.ReturnValue;
};

// Function Engine.SVehicle.NotifyTeamChanged
// [0x00020102] 
// Parameters infos:

void ASVehicle::NotifyTeamChanged ( )
{
	static UFunction* pFnNotifyTeamChanged = NULL;

	if ( ! pFnNotifyTeamChanged )
		pFnNotifyTeamChanged = (UFunction*) UObject::GObjObjects()->Data[ 31522 ];

	ASVehicle_execNotifyTeamChanged_Parms NotifyTeamChanged_Parms;

	this->ProcessEvent ( pFnNotifyTeamChanged, &NotifyTeamChanged_Parms, NULL );
};

// Function Engine.SVehicle.TryToDrive
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool ASVehicle::TryToDrive ( class APawn* P )
{
	static UFunction* pFnTryToDrive = NULL;

	if ( ! pFnTryToDrive )
		pFnTryToDrive = (UFunction*) UObject::GObjObjects()->Data[ 31519 ];

	ASVehicle_execTryToDrive_Parms TryToDrive_Parms;
	TryToDrive_Parms.P = P;

	this->ProcessEvent ( pFnTryToDrive, &TryToDrive_Parms, NULL );

	return TryToDrive_Parms.ReturnValue;
};

// Function Engine.SVehicle.GetDefaultCameraMode
// [0x00020102] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       RequestedBy                    ( CPF_Parm )

struct FName ASVehicle::GetDefaultCameraMode ( class APlayerController* RequestedBy )
{
	static UFunction* pFnGetDefaultCameraMode = NULL;

	if ( ! pFnGetDefaultCameraMode )
		pFnGetDefaultCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 31516 ];

	ASVehicle_execGetDefaultCameraMode_Parms GetDefaultCameraMode_Parms;
	GetDefaultCameraMode_Parms.RequestedBy = RequestedBy;

	this->ProcessEvent ( pFnGetDefaultCameraMode, &GetDefaultCameraMode_Parms, NULL );

	return GetDefaultCameraMode_Parms.ReturnValue;
};

// Function Engine.SVehicle.CalcCamera
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaTime                     ( CPF_Parm )
// struct FVector                 out_CamLoc                     ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_CamRot                     ( CPF_Parm | CPF_OutParm )
// float                          out_FOV                        ( CPF_Parm | CPF_OutParm )

bool ASVehicle::CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV )
{
	static UFunction* pFnCalcCamera = NULL;

	if ( ! pFnCalcCamera )
		pFnCalcCamera = (UFunction*) UObject::GObjObjects()->Data[ 31505 ];

	ASVehicle_execCalcCamera_Parms CalcCamera_Parms;
	CalcCamera_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnCalcCamera, &CalcCamera_Parms, NULL );

	if ( out_CamLoc )
		memcpy ( out_CamLoc, &CalcCamera_Parms.out_CamLoc, 0xC );

	if ( out_CamRot )
		memcpy ( out_CamRot, &CalcCamera_Parms.out_CamRot, 0xC );

	if ( out_FOV )
		*out_FOV = CalcCamera_Parms.out_FOV;

	return CalcCamera_Parms.ReturnValue;
};

// Function Engine.SVehicle.Died
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool ASVehicle::Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 31500 ];

	ASVehicle_execDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.DamageType = DamageType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function Engine.SVehicle.AddVelocity
// [0x00024002] 
// Parameters infos:
// struct FVector                 NewVelocity                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )

void ASVehicle::AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnAddVelocity = NULL;

	if ( ! pFnAddVelocity )
		pFnAddVelocity = (UFunction*) UObject::GObjObjects()->Data[ 31495 ];

	ASVehicle_execAddVelocity_Parms AddVelocity_Parms;
	memcpy ( &AddVelocity_Parms.NewVelocity, &NewVelocity, 0xC );
	memcpy ( &AddVelocity_Parms.HitLocation, &HitLocation, 0xC );
	AddVelocity_Parms.DamageType = DamageType;
	memcpy ( &AddVelocity_Parms.HitInfo, &HitInfo, 0x28 );

	this->ProcessEvent ( pFnAddVelocity, &AddVelocity_Parms, NULL );
};

// Function Engine.SVehicle.InitVehicleRagdoll
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMesh*           RagdollMesh                    ( CPF_Parm )
// class UPhysicsAsset*           RagdollPhysAsset               ( CPF_Parm )
// struct FVector                 ActorMove                      ( CPF_Parm )

void ASVehicle::InitVehicleRagdoll ( class USkeletalMesh* RagdollMesh, class UPhysicsAsset* RagdollPhysAsset, struct FVector ActorMove )
{
	static UFunction* pFnInitVehicleRagdoll = NULL;

	if ( ! pFnInitVehicleRagdoll )
		pFnInitVehicleRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 31491 ];

	ASVehicle_execInitVehicleRagdoll_Parms InitVehicleRagdoll_Parms;
	InitVehicleRagdoll_Parms.RagdollMesh = RagdollMesh;
	InitVehicleRagdoll_Parms.RagdollPhysAsset = RagdollPhysAsset;
	memcpy ( &InitVehicleRagdoll_Parms.ActorMove, &ActorMove, 0xC );

	pFnInitVehicleRagdoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitVehicleRagdoll, &InitVehicleRagdoll_Parms, NULL );

	pFnInitVehicleRagdoll->FunctionFlags |= 0x400;
};

// Function Engine.SVehicle.TakeRadiusDamage
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// class UDamageType*             pDamage                        ( CPF_OptionalParm | CPF_Parm )
// float                          DamageFalloffExponent          ( CPF_OptionalParm | CPF_Parm )

void ASVehicle::eventTakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, class UDamageType* pDamage, float DamageFalloffExponent )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 31475 ];

	ASVehicle_eventTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;
	TakeRadiusDamage_Parms.pDamage = pDamage;
	TakeRadiusDamage_Parms.DamageFalloffExponent = DamageFalloffExponent;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.SVehicle.StopVehicleSounds
// [0x00020102] 
// Parameters infos:

void ASVehicle::StopVehicleSounds ( )
{
	static UFunction* pFnStopVehicleSounds = NULL;

	if ( ! pFnStopVehicleSounds )
		pFnStopVehicleSounds = (UFunction*) UObject::GObjObjects()->Data[ 31473 ];

	ASVehicle_execStopVehicleSounds_Parms StopVehicleSounds_Parms;

	this->ProcessEvent ( pFnStopVehicleSounds, &StopVehicleSounds_Parms, NULL );
};

// Function Engine.SVehicle.TurnOff
// [0x00020102] 
// Parameters infos:

void ASVehicle::TurnOff ( )
{
	static UFunction* pFnTurnOff = NULL;

	if ( ! pFnTurnOff )
		pFnTurnOff = (UFunction*) UObject::GObjObjects()->Data[ 31472 ];

	ASVehicle_execTurnOff_Parms TurnOff_Parms;

	this->ProcessEvent ( pFnTurnOff, &TurnOff_Parms, NULL );
};

// Function Engine.SVehicle.Destroyed
// [0x00020102] 
// Parameters infos:

void ASVehicle::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 31471 ];

	ASVehicle_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.SVehicle.PostInitAnimTree
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ASVehicle::PostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 31469 ];

	ASVehicle_execPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	pFnPostInitAnimTree->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );

	pFnPostInitAnimTree->FunctionFlags |= 0x400;
};

// Function Engine.SVehicle.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASVehicle::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 31467 ];

	ASVehicle_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.SVehicle.SetWheelCollision
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            WheelNum                       ( CPF_Parm )
// unsigned long                  bCollision                     ( CPF_Parm )

void ASVehicle::SetWheelCollision ( int WheelNum, unsigned long bCollision )
{
	static UFunction* pFnSetWheelCollision = NULL;

	if ( ! pFnSetWheelCollision )
		pFnSetWheelCollision = (UFunction*) UObject::GObjObjects()->Data[ 31464 ];

	ASVehicle_execSetWheelCollision_Parms SetWheelCollision_Parms;
	SetWheelCollision_Parms.WheelNum = WheelNum;
	SetWheelCollision_Parms.bCollision = bCollision;

	pFnSetWheelCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWheelCollision, &SetWheelCollision_Parms, NULL );

	pFnSetWheelCollision->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintActor.OnToggleConstraintDrive
// [0x00020102] 
// Parameters infos:
// class USeqAct_ToggleConstraintDrive* Action                         ( CPF_Parm )

void ARB_ConstraintActor::OnToggleConstraintDrive ( class USeqAct_ToggleConstraintDrive* Action )
{
	static UFunction* pFnOnToggleConstraintDrive = NULL;

	if ( ! pFnOnToggleConstraintDrive )
		pFnOnToggleConstraintDrive = (UFunction*) UObject::GObjObjects()->Data[ 28920 ];

	ARB_ConstraintActor_execOnToggleConstraintDrive_Parms OnToggleConstraintDrive_Parms;
	OnToggleConstraintDrive_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggleConstraintDrive, &OnToggleConstraintDrive_Parms, NULL );
};

// Function Engine.RB_ConstraintActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ARB_ConstraintActor::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 28913 ];

	ARB_ConstraintActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.RB_ConstraintActor.OnDestroy
// [0x00020102] 
// Parameters infos:
// class USeqAct_Destroy*         Action                         ( CPF_Parm )

void ARB_ConstraintActor::OnDestroy ( class USeqAct_Destroy* Action )
{
	static UFunction* pFnOnDestroy = NULL;

	if ( ! pFnOnDestroy )
		pFnOnDestroy = (UFunction*) UObject::GObjObjects()->Data[ 28911 ];

	ARB_ConstraintActor_execOnDestroy_Parms OnDestroy_Parms;
	OnDestroy_Parms.Action = Action;

	this->ProcessEvent ( pFnOnDestroy, &OnDestroy_Parms, NULL );
};

// Function Engine.RB_ConstraintActor.TermConstraint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ARB_ConstraintActor::TermConstraint ( )
{
	static UFunction* pFnTermConstraint = NULL;

	if ( ! pFnTermConstraint )
		pFnTermConstraint = (UFunction*) UObject::GObjObjects()->Data[ 28910 ];

	ARB_ConstraintActor_execTermConstraint_Parms TermConstraint_Parms;

	pFnTermConstraint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTermConstraint, &TermConstraint_Parms, NULL );

	pFnTermConstraint->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintActor.InitConstraint
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  Actor1                         ( CPF_Parm )
// class AActor*                  Actor2                         ( CPF_Parm )
// struct FName                   Actor1Bone                     ( CPF_OptionalParm | CPF_Parm )
// struct FName                   Actor2Bone                     ( CPF_OptionalParm | CPF_Parm )
// float                          BreakThreshold                 ( CPF_OptionalParm | CPF_Parm )

void ARB_ConstraintActor::InitConstraint ( class AActor* Actor1, class AActor* Actor2, struct FName Actor1Bone, struct FName Actor2Bone, float BreakThreshold )
{
	static UFunction* pFnInitConstraint = NULL;

	if ( ! pFnInitConstraint )
		pFnInitConstraint = (UFunction*) UObject::GObjObjects()->Data[ 28904 ];

	ARB_ConstraintActor_execInitConstraint_Parms InitConstraint_Parms;
	InitConstraint_Parms.Actor1 = Actor1;
	InitConstraint_Parms.Actor2 = Actor2;
	memcpy ( &InitConstraint_Parms.Actor1Bone, &Actor1Bone, 0x8 );
	memcpy ( &InitConstraint_Parms.Actor2Bone, &Actor2Bone, 0x8 );
	InitConstraint_Parms.BreakThreshold = BreakThreshold;

	pFnInitConstraint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitConstraint, &InitConstraint_Parms, NULL );

	pFnInitConstraint->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintActor.SetDisableCollision
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  NewDisableCollision            ( CPF_Parm )

void ARB_ConstraintActor::SetDisableCollision ( unsigned long NewDisableCollision )
{
	static UFunction* pFnSetDisableCollision = NULL;

	if ( ! pFnSetDisableCollision )
		pFnSetDisableCollision = (UFunction*) UObject::GObjObjects()->Data[ 28902 ];

	ARB_ConstraintActor_execSetDisableCollision_Parms SetDisableCollision_Parms;
	SetDisableCollision_Parms.NewDisableCollision = NewDisableCollision;

	pFnSetDisableCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDisableCollision, &SetDisableCollision_Parms, NULL );

	pFnSetDisableCollision->FunctionFlags |= 0x400;
};

// Function Engine.RB_LineImpulseActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ARB_LineImpulseActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 29045 ];

	ARB_LineImpulseActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.RB_LineImpulseActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ARB_LineImpulseActor::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 29042 ];

	ARB_LineImpulseActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.RB_LineImpulseActor.FireLineImpulse
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ARB_LineImpulseActor::FireLineImpulse ( )
{
	static UFunction* pFnFireLineImpulse = NULL;

	if ( ! pFnFireLineImpulse )
		pFnFireLineImpulse = (UFunction*) UObject::GObjObjects()->Data[ 29041 ];

	ARB_LineImpulseActor_execFireLineImpulse_Parms FireLineImpulse_Parms;

	pFnFireLineImpulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFireLineImpulse, &FireLineImpulse_Parms, NULL );

	pFnFireLineImpulse->FunctionFlags |= 0x400;
};

// Function Engine.RB_RadialImpulseActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ARB_RadialImpulseActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 29090 ];

	ARB_RadialImpulseActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.RB_RadialImpulseActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ARB_RadialImpulseActor::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 29086 ];

	ARB_RadialImpulseActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.RB_Thruster.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ARB_Thruster::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 29119 ];

	ARB_Thruster_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.RB_RadialImpulseComponent.FireImpulse
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 Origin                         ( CPF_Parm )

void URB_RadialImpulseComponent::FireImpulse ( struct FVector Origin )
{
	static UFunction* pFnFireImpulse = NULL;

	if ( ! pFnFireImpulse )
		pFnFireImpulse = (UFunction*) UObject::GObjObjects()->Data[ 29079 ];

	URB_RadialImpulseComponent_execFireImpulse_Parms FireImpulse_Parms;
	memcpy ( &FireImpulse_Parms.Origin, &Origin, 0xC );

	pFnFireImpulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFireImpulse, &FireImpulse_Parms, NULL );

	pFnFireImpulse->FunctionFlags |= 0x400;
};

// Function Engine.RB_Handle.GetOrientation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FQuat                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FQuat URB_Handle::GetOrientation ( )
{
	static UFunction* pFnGetOrientation = NULL;

	if ( ! pFnGetOrientation )
		pFnGetOrientation = (UFunction*) UObject::GObjObjects()->Data[ 29017 ];

	URB_Handle_execGetOrientation_Parms GetOrientation_Parms;

	pFnGetOrientation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOrientation, &GetOrientation_Parms, NULL );

	pFnGetOrientation->FunctionFlags |= 0x400;

	return GetOrientation_Parms.ReturnValue;
};

// Function Engine.RB_Handle.SetOrientation
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FQuat                   NewOrientation                 ( CPF_Const | CPF_Parm | CPF_OutParm )

void URB_Handle::SetOrientation ( struct FQuat* NewOrientation )
{
	static UFunction* pFnSetOrientation = NULL;

	if ( ! pFnSetOrientation )
		pFnSetOrientation = (UFunction*) UObject::GObjObjects()->Data[ 29015 ];

	URB_Handle_execSetOrientation_Parms SetOrientation_Parms;

	pFnSetOrientation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOrientation, &SetOrientation_Parms, NULL );

	pFnSetOrientation->FunctionFlags |= 0x400;

	if ( NewOrientation )
		memcpy ( NewOrientation, &SetOrientation_Parms.NewOrientation, 0x10 );
};

// Function Engine.RB_Handle.UpdateSmoothLocation
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Const | CPF_Parm | CPF_OutParm )

void URB_Handle::UpdateSmoothLocation ( struct FVector* NewLocation )
{
	static UFunction* pFnUpdateSmoothLocation = NULL;

	if ( ! pFnUpdateSmoothLocation )
		pFnUpdateSmoothLocation = (UFunction*) UObject::GObjObjects()->Data[ 29013 ];

	URB_Handle_execUpdateSmoothLocation_Parms UpdateSmoothLocation_Parms;

	pFnUpdateSmoothLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSmoothLocation, &UpdateSmoothLocation_Parms, NULL );

	pFnUpdateSmoothLocation->FunctionFlags |= 0x400;

	if ( NewLocation )
		memcpy ( NewLocation, &UpdateSmoothLocation_Parms.NewLocation, 0xC );
};

// Function Engine.RB_Handle.SetSmoothLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Parm )
// float                          MoveTime                       ( CPF_Parm )

void URB_Handle::SetSmoothLocation ( struct FVector NewLocation, float MoveTime )
{
	static UFunction* pFnSetSmoothLocation = NULL;

	if ( ! pFnSetSmoothLocation )
		pFnSetSmoothLocation = (UFunction*) UObject::GObjObjects()->Data[ 29010 ];

	URB_Handle_execSetSmoothLocation_Parms SetSmoothLocation_Parms;
	memcpy ( &SetSmoothLocation_Parms.NewLocation, &NewLocation, 0xC );
	SetSmoothLocation_Parms.MoveTime = MoveTime;

	pFnSetSmoothLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSmoothLocation, &SetSmoothLocation_Parms, NULL );

	pFnSetSmoothLocation->FunctionFlags |= 0x400;
};

// Function Engine.RB_Handle.SetLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Parm )

void URB_Handle::SetLocation ( struct FVector NewLocation )
{
	static UFunction* pFnSetLocation = NULL;

	if ( ! pFnSetLocation )
		pFnSetLocation = (UFunction*) UObject::GObjObjects()->Data[ 29008 ];

	URB_Handle_execSetLocation_Parms SetLocation_Parms;
	memcpy ( &SetLocation_Parms.NewLocation, &NewLocation, 0xC );

	pFnSetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLocation, &SetLocation_Parms, NULL );

	pFnSetLocation->FunctionFlags |= 0x400;
};

// Function Engine.RB_Handle.ReleaseComponent
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void URB_Handle::ReleaseComponent ( )
{
	static UFunction* pFnReleaseComponent = NULL;

	if ( ! pFnReleaseComponent )
		pFnReleaseComponent = (UFunction*) UObject::GObjObjects()->Data[ 29007 ];

	URB_Handle_execReleaseComponent_Parms ReleaseComponent_Parms;

	pFnReleaseComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReleaseComponent, &ReleaseComponent_Parms, NULL );

	pFnReleaseComponent->FunctionFlags |= 0x400;
};

// Function Engine.RB_Handle.GrabComponent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPrimitiveComponent*     Component                      ( CPF_Parm | CPF_EditInline )
// struct FName                   InBoneName                     ( CPF_Parm )
// struct FVector                 GrabLocation                   ( CPF_Parm )
// unsigned long                  bConstrainRotation             ( CPF_Parm )

void URB_Handle::GrabComponent ( class UPrimitiveComponent* Component, struct FName InBoneName, struct FVector GrabLocation, unsigned long bConstrainRotation )
{
	static UFunction* pFnGrabComponent = NULL;

	if ( ! pFnGrabComponent )
		pFnGrabComponent = (UFunction*) UObject::GObjObjects()->Data[ 29002 ];

	URB_Handle_execGrabComponent_Parms GrabComponent_Parms;
	GrabComponent_Parms.Component = Component;
	memcpy ( &GrabComponent_Parms.InBoneName, &InBoneName, 0x8 );
	memcpy ( &GrabComponent_Parms.GrabLocation, &GrabLocation, 0xC );
	GrabComponent_Parms.bConstrainRotation = bConstrainRotation;

	pFnGrabComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGrabComponent, &GrabComponent_Parms, NULL );

	pFnGrabComponent->FunctionFlags |= 0x400;
};

// Function Engine.RB_Spring.Clear
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void URB_Spring::Clear ( )
{
	static UFunction* pFnClear = NULL;

	if ( ! pFnClear )
		pFnClear = (UFunction*) UObject::GObjObjects()->Data[ 29102 ];

	URB_Spring_execClear_Parms Clear_Parms;

	pFnClear->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClear, &Clear_Parms, NULL );

	pFnClear->FunctionFlags |= 0x400;
};

// Function Engine.RB_Spring.SetComponents
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPrimitiveComponent*     InComponent1                   ( CPF_Parm | CPF_EditInline )
// struct FName                   InBoneName1                    ( CPF_Parm )
// struct FVector                 Position1                      ( CPF_Parm )
// class UPrimitiveComponent*     InComponent2                   ( CPF_Parm | CPF_EditInline )
// struct FName                   InBoneName2                    ( CPF_Parm )
// struct FVector                 Position2                      ( CPF_Parm )

void URB_Spring::SetComponents ( class UPrimitiveComponent* InComponent1, struct FName InBoneName1, struct FVector Position1, class UPrimitiveComponent* InComponent2, struct FName InBoneName2, struct FVector Position2 )
{
	static UFunction* pFnSetComponents = NULL;

	if ( ! pFnSetComponents )
		pFnSetComponents = (UFunction*) UObject::GObjObjects()->Data[ 29095 ];

	URB_Spring_execSetComponents_Parms SetComponents_Parms;
	SetComponents_Parms.InComponent1 = InComponent1;
	memcpy ( &SetComponents_Parms.InBoneName1, &InBoneName1, 0x8 );
	memcpy ( &SetComponents_Parms.Position1, &Position1, 0xC );
	SetComponents_Parms.InComponent2 = InComponent2;
	memcpy ( &SetComponents_Parms.InBoneName2, &InBoneName2, 0x8 );
	memcpy ( &SetComponents_Parms.Position2, &Position2, 0xC );

	pFnSetComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetComponents, &SetComponents_Parms, NULL );

	pFnSetComponents->FunctionFlags |= 0x400;
};

// Function Engine.PhysicalMaterial.AllPhysicalMaterials
// [0x00422405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicalMaterial*       OutPhysMat                     ( CPF_Parm | CPF_OutParm )

void UPhysicalMaterial::AllPhysicalMaterials ( class UPhysicalMaterial** OutPhysMat )
{
	static UFunction* pFnAllPhysicalMaterials = NULL;

	if ( ! pFnAllPhysicalMaterials )
		pFnAllPhysicalMaterials = (UFunction*) UObject::GObjObjects()->Data[ 28036 ];

	UPhysicalMaterial_execAllPhysicalMaterials_Parms AllPhysicalMaterials_Parms;

	pFnAllPhysicalMaterials->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllPhysicalMaterials, &AllPhysicalMaterials_Parms, NULL );

	pFnAllPhysicalMaterials->FunctionFlags |= 0x400;

	if ( OutPhysMat )
		*OutPhysMat = AllPhysicalMaterials_Parms.OutPhysMat;
};

// Function Engine.PhysicalMaterial.GetPhysicalMaterialProperty
// [0x00020102] 
// Parameters infos:
// class UPhysicalMaterialPropertyBase* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  DesiredClass                   ( CPF_Parm )

class UPhysicalMaterialPropertyBase* UPhysicalMaterial::GetPhysicalMaterialProperty ( class UClass* DesiredClass )
{
	static UFunction* pFnGetPhysicalMaterialProperty = NULL;

	if ( ! pFnGetPhysicalMaterialProperty )
		pFnGetPhysicalMaterialProperty = (UFunction*) UObject::GObjObjects()->Data[ 28032 ];

	UPhysicalMaterial_execGetPhysicalMaterialProperty_Parms GetPhysicalMaterialProperty_Parms;
	GetPhysicalMaterialProperty_Parms.DesiredClass = DesiredClass;

	this->ProcessEvent ( pFnGetPhysicalMaterialProperty, &GetPhysicalMaterialProperty_Parms, NULL );

	return GetPhysicalMaterialProperty_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterial.FindFractureSounds
// [0x00420102] 
// Parameters infos:
// class USoundCue*               OutSoundExplosion              ( CPF_Parm | CPF_OutParm )
// class USoundCue*               OutSoundSingle                 ( CPF_Parm | CPF_OutParm )

void UPhysicalMaterial::FindFractureSounds ( class USoundCue** OutSoundExplosion, class USoundCue** OutSoundSingle )
{
	static UFunction* pFnFindFractureSounds = NULL;

	if ( ! pFnFindFractureSounds )
		pFnFindFractureSounds = (UFunction*) UObject::GObjObjects()->Data[ 28025 ];

	UPhysicalMaterial_execFindFractureSounds_Parms FindFractureSounds_Parms;

	this->ProcessEvent ( pFnFindFractureSounds, &FindFractureSounds_Parms, NULL );

	if ( OutSoundExplosion )
		*OutSoundExplosion = FindFractureSounds_Parms.OutSoundExplosion;

	if ( OutSoundSingle )
		*OutSoundSingle = FindFractureSounds_Parms.OutSoundSingle;
};

// Function Engine.PhysicalMaterial.FindPhysEffectInfo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FPhysEffectInfo         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Type                           ( CPF_Parm )

struct FPhysEffectInfo UPhysicalMaterial::FindPhysEffectInfo ( unsigned char Type )
{
	static UFunction* pFnFindPhysEffectInfo = NULL;

	if ( ! pFnFindPhysEffectInfo )
		pFnFindPhysEffectInfo = (UFunction*) UObject::GObjObjects()->Data[ 23133 ];

	UPhysicalMaterial_execFindPhysEffectInfo_Parms FindPhysEffectInfo_Parms;
	FindPhysEffectInfo_Parms.Type = Type;

	pFnFindPhysEffectInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPhysEffectInfo, &FindPhysEffectInfo_Parms, NULL );

	pFnFindPhysEffectInfo->FunctionFlags |= 0x400;

	return FindPhysEffectInfo_Parms.ReturnValue;
};

// Function Engine.PhysicsAsset.FindBodyIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BodyName                       ( CPF_Parm )

int UPhysicsAsset::FindBodyIndex ( struct FName BodyName )
{
	static UFunction* pFnFindBodyIndex = NULL;

	if ( ! pFnFindBodyIndex )
		pFnFindBodyIndex = (UFunction*) UObject::GObjObjects()->Data[ 28068 ];

	UPhysicsAsset_execFindBodyIndex_Parms FindBodyIndex_Parms;
	memcpy ( &FindBodyIndex_Parms.BodyName, &BodyName, 0x8 );

	pFnFindBodyIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindBodyIndex, &FindBodyIndex_Parms, NULL );

	pFnFindBodyIndex->FunctionFlags |= 0x400;

	return FindBodyIndex_Parms.ReturnValue;
};

// Function Engine.PhysicsAssetInstance.FindConstraintInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class URB_ConstraintInstance*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ConName                        ( CPF_Parm )
// class UPhysicsAsset*           InAsset                        ( CPF_Parm )

class URB_ConstraintInstance* UPhysicsAssetInstance::FindConstraintInstance ( struct FName ConName, class UPhysicsAsset* InAsset )
{
	static UFunction* pFnFindConstraintInstance = NULL;

	if ( ! pFnFindConstraintInstance )
		pFnFindConstraintInstance = (UFunction*) UObject::GObjObjects()->Data[ 28155 ];

	UPhysicsAssetInstance_execFindConstraintInstance_Parms FindConstraintInstance_Parms;
	memcpy ( &FindConstraintInstance_Parms.ConName, &ConName, 0x8 );
	FindConstraintInstance_Parms.InAsset = InAsset;

	pFnFindConstraintInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindConstraintInstance, &FindConstraintInstance_Parms, NULL );

	pFnFindConstraintInstance->FunctionFlags |= 0x400;

	return FindConstraintInstance_Parms.ReturnValue;
};

// Function Engine.PhysicsAssetInstance.FindBodyInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class URB_BodyInstance*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BodyName                       ( CPF_Parm )
// class UPhysicsAsset*           InAsset                        ( CPF_Parm )

class URB_BodyInstance* UPhysicsAssetInstance::FindBodyInstance ( struct FName BodyName, class UPhysicsAsset* InAsset )
{
	static UFunction* pFnFindBodyInstance = NULL;

	if ( ! pFnFindBodyInstance )
		pFnFindBodyInstance = (UFunction*) UObject::GObjObjects()->Data[ 28151 ];

	UPhysicsAssetInstance_execFindBodyInstance_Parms FindBodyInstance_Parms;
	memcpy ( &FindBodyInstance_Parms.BodyName, &BodyName, 0x8 );
	FindBodyInstance_Parms.InAsset = InAsset;

	pFnFindBodyInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindBodyInstance, &FindBodyInstance_Parms, NULL );

	pFnFindBodyInstance->FunctionFlags |= 0x400;

	return FindBodyInstance_Parms.ReturnValue;
};

// Function Engine.PhysicsAssetInstance.SetFullAnimWeightBonesFixed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFixed                      ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm | CPF_EditInline )

void UPhysicsAssetInstance::SetFullAnimWeightBonesFixed ( unsigned long bNewFixed, class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnSetFullAnimWeightBonesFixed = NULL;

	if ( ! pFnSetFullAnimWeightBonesFixed )
		pFnSetFullAnimWeightBonesFixed = (UFunction*) UObject::GObjObjects()->Data[ 28148 ];

	UPhysicsAssetInstance_execSetFullAnimWeightBonesFixed_Parms SetFullAnimWeightBonesFixed_Parms;
	SetFullAnimWeightBonesFixed_Parms.bNewFixed = bNewFixed;
	SetFullAnimWeightBonesFixed_Parms.SkelMesh = SkelMesh;

	pFnSetFullAnimWeightBonesFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFullAnimWeightBonesFixed, &SetFullAnimWeightBonesFixed_Parms, NULL );

	pFnSetFullAnimWeightBonesFixed->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetFullAnimWeightBlockRigidBody
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewBlockRigidBody             ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm | CPF_EditInline )

void UPhysicsAssetInstance::SetFullAnimWeightBlockRigidBody ( unsigned long bNewBlockRigidBody, class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnSetFullAnimWeightBlockRigidBody = NULL;

	if ( ! pFnSetFullAnimWeightBlockRigidBody )
		pFnSetFullAnimWeightBlockRigidBody = (UFunction*) UObject::GObjObjects()->Data[ 28145 ];

	UPhysicsAssetInstance_execSetFullAnimWeightBlockRigidBody_Parms SetFullAnimWeightBlockRigidBody_Parms;
	SetFullAnimWeightBlockRigidBody_Parms.bNewBlockRigidBody = bNewBlockRigidBody;
	SetFullAnimWeightBlockRigidBody_Parms.SkelMesh = SkelMesh;

	pFnSetFullAnimWeightBlockRigidBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFullAnimWeightBlockRigidBody, &SetFullAnimWeightBlockRigidBody_Parms, NULL );

	pFnSetFullAnimWeightBlockRigidBody->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetNamedBodiesBlockRigidBody
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewBlockRigidBody             ( CPF_Parm )
// struct TArray<struct FName>    BoneNames                      ( CPF_Parm | CPF_NeedCtorLink )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm | CPF_EditInline )

void UPhysicsAssetInstance::SetNamedBodiesBlockRigidBody ( unsigned long bNewBlockRigidBody, struct TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnSetNamedBodiesBlockRigidBody = NULL;

	if ( ! pFnSetNamedBodiesBlockRigidBody )
		pFnSetNamedBodiesBlockRigidBody = (UFunction*) UObject::GObjObjects()->Data[ 28140 ];

	UPhysicsAssetInstance_execSetNamedBodiesBlockRigidBody_Parms SetNamedBodiesBlockRigidBody_Parms;
	SetNamedBodiesBlockRigidBody_Parms.bNewBlockRigidBody = bNewBlockRigidBody;
	memcpy ( &SetNamedBodiesBlockRigidBody_Parms.BoneNames, &BoneNames, 0x10 );
	SetNamedBodiesBlockRigidBody_Parms.SkelMesh = SkelMesh;

	pFnSetNamedBodiesBlockRigidBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNamedBodiesBlockRigidBody, &SetNamedBodiesBlockRigidBody_Parms, NULL );

	pFnSetNamedBodiesBlockRigidBody->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetNamedRBBoneSprings
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_Parm )
// struct TArray<struct FName>    BoneNames                      ( CPF_Parm | CPF_NeedCtorLink )
// float                          InBoneLinearSpring             ( CPF_Parm )
// float                          InBoneAngularSpring            ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMeshComp                   ( CPF_Parm | CPF_EditInline )

void UPhysicsAssetInstance::SetNamedRBBoneSprings ( unsigned long bEnable, struct TArray<struct FName> BoneNames, float InBoneLinearSpring, float InBoneAngularSpring, class USkeletalMeshComponent* SkelMeshComp )
{
	static UFunction* pFnSetNamedRBBoneSprings = NULL;

	if ( ! pFnSetNamedRBBoneSprings )
		pFnSetNamedRBBoneSprings = (UFunction*) UObject::GObjObjects()->Data[ 28133 ];

	UPhysicsAssetInstance_execSetNamedRBBoneSprings_Parms SetNamedRBBoneSprings_Parms;
	SetNamedRBBoneSprings_Parms.bEnable = bEnable;
	memcpy ( &SetNamedRBBoneSprings_Parms.BoneNames, &BoneNames, 0x10 );
	SetNamedRBBoneSprings_Parms.InBoneLinearSpring = InBoneLinearSpring;
	SetNamedRBBoneSprings_Parms.InBoneAngularSpring = InBoneAngularSpring;
	SetNamedRBBoneSprings_Parms.SkelMeshComp = SkelMeshComp;

	pFnSetNamedRBBoneSprings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNamedRBBoneSprings, &SetNamedRBBoneSprings_Parms, NULL );

	pFnSetNamedRBBoneSprings->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularVelocityDrive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableSwingDrive              ( CPF_Parm )
// unsigned long                  bEnableTwistDrive              ( CPF_Parm )
// struct TArray<struct FName>    BoneNames                      ( CPF_Parm | CPF_NeedCtorLink )
// class USkeletalMeshComponent*  SkelMeshComp                   ( CPF_Parm | CPF_EditInline )
// unsigned long                  bSetOtherBodiesToComplement    ( CPF_OptionalParm | CPF_Parm )

void UPhysicsAssetInstance::SetNamedMotorsAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, struct TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSetOtherBodiesToComplement )
{
	static UFunction* pFnSetNamedMotorsAngularVelocityDrive = NULL;

	if ( ! pFnSetNamedMotorsAngularVelocityDrive )
		pFnSetNamedMotorsAngularVelocityDrive = (UFunction*) UObject::GObjObjects()->Data[ 28126 ];

	UPhysicsAssetInstance_execSetNamedMotorsAngularVelocityDrive_Parms SetNamedMotorsAngularVelocityDrive_Parms;
	SetNamedMotorsAngularVelocityDrive_Parms.bEnableSwingDrive = bEnableSwingDrive;
	SetNamedMotorsAngularVelocityDrive_Parms.bEnableTwistDrive = bEnableTwistDrive;
	memcpy ( &SetNamedMotorsAngularVelocityDrive_Parms.BoneNames, &BoneNames, 0x10 );
	SetNamedMotorsAngularVelocityDrive_Parms.SkelMeshComp = SkelMeshComp;
	SetNamedMotorsAngularVelocityDrive_Parms.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;

	pFnSetNamedMotorsAngularVelocityDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNamedMotorsAngularVelocityDrive, &SetNamedMotorsAngularVelocityDrive_Parms, NULL );

	pFnSetNamedMotorsAngularVelocityDrive->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularPositionDrive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableSwingDrive              ( CPF_Parm )
// unsigned long                  bEnableTwistDrive              ( CPF_Parm )
// struct TArray<struct FName>    BoneNames                      ( CPF_Parm | CPF_NeedCtorLink )
// class USkeletalMeshComponent*  SkelMeshComp                   ( CPF_Parm | CPF_EditInline )
// unsigned long                  bSetOtherBodiesToComplement    ( CPF_OptionalParm | CPF_Parm )

void UPhysicsAssetInstance::SetNamedMotorsAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, struct TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSetOtherBodiesToComplement )
{
	static UFunction* pFnSetNamedMotorsAngularPositionDrive = NULL;

	if ( ! pFnSetNamedMotorsAngularPositionDrive )
		pFnSetNamedMotorsAngularPositionDrive = (UFunction*) UObject::GObjObjects()->Data[ 28119 ];

	UPhysicsAssetInstance_execSetNamedMotorsAngularPositionDrive_Parms SetNamedMotorsAngularPositionDrive_Parms;
	SetNamedMotorsAngularPositionDrive_Parms.bEnableSwingDrive = bEnableSwingDrive;
	SetNamedMotorsAngularPositionDrive_Parms.bEnableTwistDrive = bEnableTwistDrive;
	memcpy ( &SetNamedMotorsAngularPositionDrive_Parms.BoneNames, &BoneNames, 0x10 );
	SetNamedMotorsAngularPositionDrive_Parms.SkelMeshComp = SkelMeshComp;
	SetNamedMotorsAngularPositionDrive_Parms.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;

	pFnSetNamedMotorsAngularPositionDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNamedMotorsAngularPositionDrive, &SetNamedMotorsAngularPositionDrive_Parms, NULL );

	pFnSetNamedMotorsAngularPositionDrive->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularDriveParams
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InSpring                       ( CPF_Parm )
// float                          InDamping                      ( CPF_Parm )
// float                          InForceLimit                   ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_OptionalParm | CPF_Parm | CPF_EditInline )
// unsigned long                  bSkipFullAnimWeightBodies      ( CPF_OptionalParm | CPF_Parm )

void UPhysicsAssetInstance::SetAllMotorsAngularDriveParams ( float InSpring, float InDamping, float InForceLimit, class USkeletalMeshComponent* SkelMesh, unsigned long bSkipFullAnimWeightBodies )
{
	static UFunction* pFnSetAllMotorsAngularDriveParams = NULL;

	if ( ! pFnSetAllMotorsAngularDriveParams )
		pFnSetAllMotorsAngularDriveParams = (UFunction*) UObject::GObjObjects()->Data[ 28113 ];

	UPhysicsAssetInstance_execSetAllMotorsAngularDriveParams_Parms SetAllMotorsAngularDriveParams_Parms;
	SetAllMotorsAngularDriveParams_Parms.InSpring = InSpring;
	SetAllMotorsAngularDriveParams_Parms.InDamping = InDamping;
	SetAllMotorsAngularDriveParams_Parms.InForceLimit = InForceLimit;
	SetAllMotorsAngularDriveParams_Parms.SkelMesh = SkelMesh;
	SetAllMotorsAngularDriveParams_Parms.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	pFnSetAllMotorsAngularDriveParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAllMotorsAngularDriveParams, &SetAllMotorsAngularDriveParams_Parms, NULL );

	pFnSetAllMotorsAngularDriveParams->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularVelocityDrive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableSwingDrive              ( CPF_Parm )
// unsigned long                  bEnableTwistDrive              ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMeshComp                   ( CPF_Parm | CPF_EditInline )
// unsigned long                  bSkipFullAnimWeightBodies      ( CPF_OptionalParm | CPF_Parm )

void UPhysicsAssetInstance::SetAllMotorsAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSkipFullAnimWeightBodies )
{
	static UFunction* pFnSetAllMotorsAngularVelocityDrive = NULL;

	if ( ! pFnSetAllMotorsAngularVelocityDrive )
		pFnSetAllMotorsAngularVelocityDrive = (UFunction*) UObject::GObjObjects()->Data[ 28108 ];

	UPhysicsAssetInstance_execSetAllMotorsAngularVelocityDrive_Parms SetAllMotorsAngularVelocityDrive_Parms;
	SetAllMotorsAngularVelocityDrive_Parms.bEnableSwingDrive = bEnableSwingDrive;
	SetAllMotorsAngularVelocityDrive_Parms.bEnableTwistDrive = bEnableTwistDrive;
	SetAllMotorsAngularVelocityDrive_Parms.SkelMeshComp = SkelMeshComp;
	SetAllMotorsAngularVelocityDrive_Parms.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	pFnSetAllMotorsAngularVelocityDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAllMotorsAngularVelocityDrive, &SetAllMotorsAngularVelocityDrive_Parms, NULL );

	pFnSetAllMotorsAngularVelocityDrive->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularPositionDrive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableSwingDrive              ( CPF_Parm )
// unsigned long                  bEnableTwistDrive              ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_OptionalParm | CPF_Parm | CPF_EditInline )
// unsigned long                  bSkipFullAnimWeightBodies      ( CPF_OptionalParm | CPF_Parm )

void UPhysicsAssetInstance::SetAllMotorsAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, class USkeletalMeshComponent* SkelMesh, unsigned long bSkipFullAnimWeightBodies )
{
	static UFunction* pFnSetAllMotorsAngularPositionDrive = NULL;

	if ( ! pFnSetAllMotorsAngularPositionDrive )
		pFnSetAllMotorsAngularPositionDrive = (UFunction*) UObject::GObjObjects()->Data[ 28103 ];

	UPhysicsAssetInstance_execSetAllMotorsAngularPositionDrive_Parms SetAllMotorsAngularPositionDrive_Parms;
	SetAllMotorsAngularPositionDrive_Parms.bEnableSwingDrive = bEnableSwingDrive;
	SetAllMotorsAngularPositionDrive_Parms.bEnableTwistDrive = bEnableTwistDrive;
	SetAllMotorsAngularPositionDrive_Parms.SkelMesh = SkelMesh;
	SetAllMotorsAngularPositionDrive_Parms.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	pFnSetAllMotorsAngularPositionDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAllMotorsAngularPositionDrive, &SetAllMotorsAngularPositionDrive_Parms, NULL );

	pFnSetAllMotorsAngularPositionDrive->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.ForceAllBodiesBelowUnfixed
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicsAsset*           InAsset                        ( CPF_Parm )
// class USkeletalMeshComponent*  InSkelMesh                     ( CPF_Parm | CPF_EditInline )
// unsigned long                  InbInstanceAlwaysFullAnimWeight ( CPF_Parm )
// struct FName                   InBoneName                     ( CPF_Const | CPF_Parm | CPF_OutParm )

void UPhysicsAssetInstance::ForceAllBodiesBelowUnfixed ( class UPhysicsAsset* InAsset, class USkeletalMeshComponent* InSkelMesh, unsigned long InbInstanceAlwaysFullAnimWeight, struct FName* InBoneName )
{
	static UFunction* pFnForceAllBodiesBelowUnfixed = NULL;

	if ( ! pFnForceAllBodiesBelowUnfixed )
		pFnForceAllBodiesBelowUnfixed = (UFunction*) UObject::GObjObjects()->Data[ 28098 ];

	UPhysicsAssetInstance_execForceAllBodiesBelowUnfixed_Parms ForceAllBodiesBelowUnfixed_Parms;
	ForceAllBodiesBelowUnfixed_Parms.InAsset = InAsset;
	ForceAllBodiesBelowUnfixed_Parms.InSkelMesh = InSkelMesh;
	ForceAllBodiesBelowUnfixed_Parms.InbInstanceAlwaysFullAnimWeight = InbInstanceAlwaysFullAnimWeight;

	pFnForceAllBodiesBelowUnfixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceAllBodiesBelowUnfixed, &ForceAllBodiesBelowUnfixed_Parms, NULL );

	pFnForceAllBodiesBelowUnfixed->FunctionFlags |= 0x400;

	if ( InBoneName )
		memcpy ( InBoneName, &ForceAllBodiesBelowUnfixed_Parms.InBoneName, 0x8 );
};

// Function Engine.PhysicsAssetInstance.SetNamedBodiesFixed
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFixed                      ( CPF_Parm )
// struct TArray<struct FName>    BoneNames                      ( CPF_Parm | CPF_NeedCtorLink )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm | CPF_EditInline )
// unsigned long                  bSetOtherBodiesToComplement    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipFullAnimWeightBodies      ( CPF_OptionalParm | CPF_Parm )

void UPhysicsAssetInstance::SetNamedBodiesFixed ( unsigned long bNewFixed, struct TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMesh, unsigned long bSetOtherBodiesToComplement, unsigned long bSkipFullAnimWeightBodies )
{
	static UFunction* pFnSetNamedBodiesFixed = NULL;

	if ( ! pFnSetNamedBodiesFixed )
		pFnSetNamedBodiesFixed = (UFunction*) UObject::GObjObjects()->Data[ 28091 ];

	UPhysicsAssetInstance_execSetNamedBodiesFixed_Parms SetNamedBodiesFixed_Parms;
	SetNamedBodiesFixed_Parms.bNewFixed = bNewFixed;
	memcpy ( &SetNamedBodiesFixed_Parms.BoneNames, &BoneNames, 0x10 );
	SetNamedBodiesFixed_Parms.SkelMesh = SkelMesh;
	SetNamedBodiesFixed_Parms.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;
	SetNamedBodiesFixed_Parms.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	pFnSetNamedBodiesFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNamedBodiesFixed, &SetNamedBodiesFixed_Parms, NULL );

	pFnSetNamedBodiesFixed->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetAllBodiesFixed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFixed                      ( CPF_Parm )

void UPhysicsAssetInstance::SetAllBodiesFixed ( unsigned long bNewFixed )
{
	static UFunction* pFnSetAllBodiesFixed = NULL;

	if ( ! pFnSetAllBodiesFixed )
		pFnSetAllBodiesFixed = (UFunction*) UObject::GObjObjects()->Data[ 28089 ];

	UPhysicsAssetInstance_execSetAllBodiesFixed_Parms SetAllBodiesFixed_Parms;
	SetAllBodiesFixed_Parms.bNewFixed = bNewFixed;

	pFnSetAllBodiesFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAllBodiesFixed, &SetAllBodiesFixed_Parms, NULL );

	pFnSetAllBodiesFixed->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.GetTotalMassBelowBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InBoneName                     ( CPF_Parm )
// class UPhysicsAsset*           InAsset                        ( CPF_Parm )
// class USkeletalMesh*           InSkelMesh                     ( CPF_Parm )

float UPhysicsAssetInstance::GetTotalMassBelowBone ( struct FName InBoneName, class UPhysicsAsset* InAsset, class USkeletalMesh* InSkelMesh )
{
	static UFunction* pFnGetTotalMassBelowBone = NULL;

	if ( ! pFnGetTotalMassBelowBone )
		pFnGetTotalMassBelowBone = (UFunction*) UObject::GObjObjects()->Data[ 28084 ];

	UPhysicsAssetInstance_execGetTotalMassBelowBone_Parms GetTotalMassBelowBone_Parms;
	memcpy ( &GetTotalMassBelowBone_Parms.InBoneName, &InBoneName, 0x8 );
	GetTotalMassBelowBone_Parms.InAsset = InAsset;
	GetTotalMassBelowBone_Parms.InSkelMesh = InSkelMesh;

	pFnGetTotalMassBelowBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTotalMassBelowBone, &GetTotalMassBelowBone_Parms, NULL );

	pFnGetTotalMassBelowBone->FunctionFlags |= 0x400;

	return GetTotalMassBelowBone_Parms.ReturnValue;
};

// Function Engine.PhysicsAssetInstance.SetAngularDriveScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InAngularSpringScale           ( CPF_Parm )
// float                          InAngularDampingScale          ( CPF_Parm )
// float                          InAngularForceLimitScale       ( CPF_Parm )

void UPhysicsAssetInstance::SetAngularDriveScale ( float InAngularSpringScale, float InAngularDampingScale, float InAngularForceLimitScale )
{
	static UFunction* pFnSetAngularDriveScale = NULL;

	if ( ! pFnSetAngularDriveScale )
		pFnSetAngularDriveScale = (UFunction*) UObject::GObjObjects()->Data[ 28080 ];

	UPhysicsAssetInstance_execSetAngularDriveScale_Parms SetAngularDriveScale_Parms;
	SetAngularDriveScale_Parms.InAngularSpringScale = InAngularSpringScale;
	SetAngularDriveScale_Parms.InAngularDampingScale = InAngularDampingScale;
	SetAngularDriveScale_Parms.InAngularForceLimitScale = InAngularForceLimitScale;

	pFnSetAngularDriveScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularDriveScale, &SetAngularDriveScale_Parms, NULL );

	pFnSetAngularDriveScale->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetLinearDriveScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InLinearSpringScale            ( CPF_Parm )
// float                          InLinearDampingScale           ( CPF_Parm )
// float                          InLinearForceLimitScale        ( CPF_Parm )

void UPhysicsAssetInstance::SetLinearDriveScale ( float InLinearSpringScale, float InLinearDampingScale, float InLinearForceLimitScale )
{
	static UFunction* pFnSetLinearDriveScale = NULL;

	if ( ! pFnSetLinearDriveScale )
		pFnSetLinearDriveScale = (UFunction*) UObject::GObjObjects()->Data[ 28076 ];

	UPhysicsAssetInstance_execSetLinearDriveScale_Parms SetLinearDriveScale_Parms;
	SetLinearDriveScale_Parms.InLinearSpringScale = InLinearSpringScale;
	SetLinearDriveScale_Parms.InLinearDampingScale = InLinearDampingScale;
	SetLinearDriveScale_Parms.InLinearForceLimitScale = InLinearForceLimitScale;

	pFnSetLinearDriveScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearDriveScale, &SetLinearDriveScale_Parms, NULL );

	pFnSetLinearDriveScale->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.UpdateDampingProperties
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void URB_BodyInstance::UpdateDampingProperties ( )
{
	static UFunction* pFnUpdateDampingProperties = NULL;

	if ( ! pFnUpdateDampingProperties )
		pFnUpdateDampingProperties = (UFunction*) UObject::GObjObjects()->Data[ 28756 ];

	URB_BodyInstance_execUpdateDampingProperties_Parms UpdateDampingProperties_Parms;

	pFnUpdateDampingProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateDampingProperties, &UpdateDampingProperties_Parms, NULL );

	pFnUpdateDampingProperties->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.UpdateMassProperties
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class URB_BodySetup*           Setup                          ( CPF_Parm )

void URB_BodyInstance::UpdateMassProperties ( class URB_BodySetup* Setup )
{
	static UFunction* pFnUpdateMassProperties = NULL;

	if ( ! pFnUpdateMassProperties )
		pFnUpdateMassProperties = (UFunction*) UObject::GObjObjects()->Data[ 28754 ];

	URB_BodyInstance_execUpdateMassProperties_Parms UpdateMassProperties_Parms;
	UpdateMassProperties_Parms.Setup = Setup;

	pFnUpdateMassProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateMassProperties, &UpdateMassProperties_Parms, NULL );

	pFnUpdateMassProperties->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.SetContactReportForceThreshold
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          Threshold                      ( CPF_Parm )

void URB_BodyInstance::SetContactReportForceThreshold ( float Threshold )
{
	static UFunction* pFnSetContactReportForceThreshold = NULL;

	if ( ! pFnSetContactReportForceThreshold )
		pFnSetContactReportForceThreshold = (UFunction*) UObject::GObjObjects()->Data[ 28752 ];

	URB_BodyInstance_execSetContactReportForceThreshold_Parms SetContactReportForceThreshold_Parms;
	SetContactReportForceThreshold_Parms.Threshold = Threshold;

	pFnSetContactReportForceThreshold->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetContactReportForceThreshold, &SetContactReportForceThreshold_Parms, NULL );

	pFnSetContactReportForceThreshold->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.EnableCollisionResponse
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableResponse                ( CPF_Parm )

void URB_BodyInstance::EnableCollisionResponse ( unsigned long bEnableResponse )
{
	static UFunction* pFnEnableCollisionResponse = NULL;

	if ( ! pFnEnableCollisionResponse )
		pFnEnableCollisionResponse = (UFunction*) UObject::GObjObjects()->Data[ 28750 ];

	URB_BodyInstance_execEnableCollisionResponse_Parms EnableCollisionResponse_Parms;
	EnableCollisionResponse_Parms.bEnableResponse = bEnableResponse;

	pFnEnableCollisionResponse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableCollisionResponse, &EnableCollisionResponse_Parms, NULL );

	pFnEnableCollisionResponse->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.SetPhysMaterialOverride
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicalMaterial*       NewPhysMaterial                ( CPF_Parm )

void URB_BodyInstance::SetPhysMaterialOverride ( class UPhysicalMaterial* NewPhysMaterial )
{
	static UFunction* pFnSetPhysMaterialOverride = NULL;

	if ( ! pFnSetPhysMaterialOverride )
		pFnSetPhysMaterialOverride = (UFunction*) UObject::GObjObjects()->Data[ 28748 ];

	URB_BodyInstance_execSetPhysMaterialOverride_Parms SetPhysMaterialOverride_Parms;
	SetPhysMaterialOverride_Parms.NewPhysMaterial = NewPhysMaterial;

	pFnSetPhysMaterialOverride->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPhysMaterialOverride, &SetPhysMaterialOverride_Parms, NULL );

	pFnSetPhysMaterialOverride->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.SetBlockRigidBody
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewBlockRigidBody             ( CPF_Parm )

void URB_BodyInstance::SetBlockRigidBody ( unsigned long bNewBlockRigidBody )
{
	static UFunction* pFnSetBlockRigidBody = NULL;

	if ( ! pFnSetBlockRigidBody )
		pFnSetBlockRigidBody = (UFunction*) UObject::GObjObjects()->Data[ 28746 ];

	URB_BodyInstance_execSetBlockRigidBody_Parms SetBlockRigidBody_Parms;
	SetBlockRigidBody_Parms.bNewBlockRigidBody = bNewBlockRigidBody;

	pFnSetBlockRigidBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBlockRigidBody, &SetBlockRigidBody_Parms, NULL );

	pFnSetBlockRigidBody->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.SetBoneSpringTarget
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bTeleport                      ( CPF_Parm )
// struct FMatrix                 InBoneTarget                   ( CPF_Const | CPF_Parm | CPF_OutParm )

void URB_BodyInstance::SetBoneSpringTarget ( unsigned long bTeleport, struct FMatrix* InBoneTarget )
{
	static UFunction* pFnSetBoneSpringTarget = NULL;

	if ( ! pFnSetBoneSpringTarget )
		pFnSetBoneSpringTarget = (UFunction*) UObject::GObjObjects()->Data[ 28743 ];

	URB_BodyInstance_execSetBoneSpringTarget_Parms SetBoneSpringTarget_Parms;
	SetBoneSpringTarget_Parms.bTeleport = bTeleport;

	pFnSetBoneSpringTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBoneSpringTarget, &SetBoneSpringTarget_Parms, NULL );

	pFnSetBoneSpringTarget->FunctionFlags |= 0x400;

	if ( InBoneTarget )
		memcpy ( InBoneTarget, &SetBoneSpringTarget_Parms.InBoneTarget, 0x40 );
};

// Function Engine.RB_BodyInstance.SetBoneSpringParams
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InLinearSpring                 ( CPF_Parm )
// float                          InLinearDamping                ( CPF_Parm )
// float                          InAngularSpring                ( CPF_Parm )
// float                          InAngularDamping               ( CPF_Parm )

void URB_BodyInstance::SetBoneSpringParams ( float InLinearSpring, float InLinearDamping, float InAngularSpring, float InAngularDamping )
{
	static UFunction* pFnSetBoneSpringParams = NULL;

	if ( ! pFnSetBoneSpringParams )
		pFnSetBoneSpringParams = (UFunction*) UObject::GObjObjects()->Data[ 28738 ];

	URB_BodyInstance_execSetBoneSpringParams_Parms SetBoneSpringParams_Parms;
	SetBoneSpringParams_Parms.InLinearSpring = InLinearSpring;
	SetBoneSpringParams_Parms.InLinearDamping = InLinearDamping;
	SetBoneSpringParams_Parms.InAngularSpring = InAngularSpring;
	SetBoneSpringParams_Parms.InAngularDamping = InAngularDamping;

	pFnSetBoneSpringParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBoneSpringParams, &SetBoneSpringParams_Parms, NULL );

	pFnSetBoneSpringParams->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.EnableBoneSpring
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInEnableLinear                ( CPF_Parm )
// unsigned long                  bInEnableAngular               ( CPF_Parm )
// struct FMatrix                 InBoneTarget                   ( CPF_Const | CPF_Parm | CPF_OutParm )

void URB_BodyInstance::EnableBoneSpring ( unsigned long bInEnableLinear, unsigned long bInEnableAngular, struct FMatrix* InBoneTarget )
{
	static UFunction* pFnEnableBoneSpring = NULL;

	if ( ! pFnEnableBoneSpring )
		pFnEnableBoneSpring = (UFunction*) UObject::GObjObjects()->Data[ 28734 ];

	URB_BodyInstance_execEnableBoneSpring_Parms EnableBoneSpring_Parms;
	EnableBoneSpring_Parms.bInEnableLinear = bInEnableLinear;
	EnableBoneSpring_Parms.bInEnableAngular = bInEnableAngular;

	pFnEnableBoneSpring->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableBoneSpring, &EnableBoneSpring_Parms, NULL );

	pFnEnableBoneSpring->FunctionFlags |= 0x400;

	if ( InBoneTarget )
		memcpy ( InBoneTarget, &EnableBoneSpring_Parms.InBoneTarget, 0x40 );
};

// Function Engine.RB_BodyInstance.GetUnrealWorldVelocityAtPoint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Point                          ( CPF_Parm )

struct FVector URB_BodyInstance::GetUnrealWorldVelocityAtPoint ( struct FVector Point )
{
	static UFunction* pFnGetUnrealWorldVelocityAtPoint = NULL;

	if ( ! pFnGetUnrealWorldVelocityAtPoint )
		pFnGetUnrealWorldVelocityAtPoint = (UFunction*) UObject::GObjObjects()->Data[ 28731 ];

	URB_BodyInstance_execGetUnrealWorldVelocityAtPoint_Parms GetUnrealWorldVelocityAtPoint_Parms;
	memcpy ( &GetUnrealWorldVelocityAtPoint_Parms.Point, &Point, 0xC );

	pFnGetUnrealWorldVelocityAtPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUnrealWorldVelocityAtPoint, &GetUnrealWorldVelocityAtPoint_Parms, NULL );

	pFnGetUnrealWorldVelocityAtPoint->FunctionFlags |= 0x400;

	return GetUnrealWorldVelocityAtPoint_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.GetUnrealWorldAngularVelocity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector URB_BodyInstance::GetUnrealWorldAngularVelocity ( )
{
	static UFunction* pFnGetUnrealWorldAngularVelocity = NULL;

	if ( ! pFnGetUnrealWorldAngularVelocity )
		pFnGetUnrealWorldAngularVelocity = (UFunction*) UObject::GObjObjects()->Data[ 28729 ];

	URB_BodyInstance_execGetUnrealWorldAngularVelocity_Parms GetUnrealWorldAngularVelocity_Parms;

	pFnGetUnrealWorldAngularVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUnrealWorldAngularVelocity, &GetUnrealWorldAngularVelocity_Parms, NULL );

	pFnGetUnrealWorldAngularVelocity->FunctionFlags |= 0x400;

	return GetUnrealWorldAngularVelocity_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.GetUnrealWorldVelocity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector URB_BodyInstance::GetUnrealWorldVelocity ( )
{
	static UFunction* pFnGetUnrealWorldVelocity = NULL;

	if ( ! pFnGetUnrealWorldVelocity )
		pFnGetUnrealWorldVelocity = (UFunction*) UObject::GObjObjects()->Data[ 28727 ];

	URB_BodyInstance_execGetUnrealWorldVelocity_Parms GetUnrealWorldVelocity_Parms;

	pFnGetUnrealWorldVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUnrealWorldVelocity, &GetUnrealWorldVelocity_Parms, NULL );

	pFnGetUnrealWorldVelocity->FunctionFlags |= 0x400;

	return GetUnrealWorldVelocity_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.GetUnrealWorldTM
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FMatrix URB_BodyInstance::GetUnrealWorldTM ( )
{
	static UFunction* pFnGetUnrealWorldTM = NULL;

	if ( ! pFnGetUnrealWorldTM )
		pFnGetUnrealWorldTM = (UFunction*) UObject::GObjObjects()->Data[ 28725 ];

	URB_BodyInstance_execGetUnrealWorldTM_Parms GetUnrealWorldTM_Parms;

	pFnGetUnrealWorldTM->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUnrealWorldTM, &GetUnrealWorldTM_Parms, NULL );

	pFnGetUnrealWorldTM->FunctionFlags |= 0x400;

	return GetUnrealWorldTM_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.GetPhysicsAssetInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicsAssetInstance*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPhysicsAssetInstance* URB_BodyInstance::GetPhysicsAssetInstance ( )
{
	static UFunction* pFnGetPhysicsAssetInstance = NULL;

	if ( ! pFnGetPhysicsAssetInstance )
		pFnGetPhysicsAssetInstance = (UFunction*) UObject::GObjObjects()->Data[ 28723 ];

	URB_BodyInstance_execGetPhysicsAssetInstance_Parms GetPhysicsAssetInstance_Parms;

	pFnGetPhysicsAssetInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPhysicsAssetInstance, &GetPhysicsAssetInstance_Parms, NULL );

	pFnGetPhysicsAssetInstance->FunctionFlags |= 0x400;

	return GetPhysicsAssetInstance_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.IsValidBodyInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool URB_BodyInstance::IsValidBodyInstance ( )
{
	static UFunction* pFnIsValidBodyInstance = NULL;

	if ( ! pFnIsValidBodyInstance )
		pFnIsValidBodyInstance = (UFunction*) UObject::GObjObjects()->Data[ 28721 ];

	URB_BodyInstance_execIsValidBodyInstance_Parms IsValidBodyInstance_Parms;

	pFnIsValidBodyInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidBodyInstance, &IsValidBodyInstance_Parms, NULL );

	pFnIsValidBodyInstance->FunctionFlags |= 0x400;

	return IsValidBodyInstance_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.IsFixed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool URB_BodyInstance::IsFixed ( )
{
	static UFunction* pFnIsFixed = NULL;

	if ( ! pFnIsFixed )
		pFnIsFixed = (UFunction*) UObject::GObjObjects()->Data[ 9749 ];

	URB_BodyInstance_execIsFixed_Parms IsFixed_Parms;

	pFnIsFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFixed, &IsFixed_Parms, NULL );

	pFnIsFixed->FunctionFlags |= 0x400;

	return IsFixed_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.SetFixed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFixed                      ( CPF_Parm )

void URB_BodyInstance::SetFixed ( unsigned long bNewFixed )
{
	static UFunction* pFnSetFixed = NULL;

	if ( ! pFnSetFixed )
		pFnSetFixed = (UFunction*) UObject::GObjObjects()->Data[ 9751 ];

	URB_BodyInstance_execSetFixed_Parms SetFixed_Parms;
	SetFixed_Parms.bNewFixed = bNewFixed;

	pFnSetFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFixed, &SetFixed_Parms, NULL );

	pFnSetFixed->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.GetBodyMass
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float URB_BodyInstance::GetBodyMass ( )
{
	static UFunction* pFnGetBodyMass = NULL;

	if ( ! pFnGetBodyMass )
		pFnGetBodyMass = (UFunction*) UObject::GObjObjects()->Data[ 23205 ];

	URB_BodyInstance_execGetBodyMass_Parms GetBodyMass_Parms;

	pFnGetBodyMass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBodyMass, &GetBodyMass_Parms, NULL );

	pFnGetBodyMass->FunctionFlags |= 0x400;

	return GetBodyMass_Parms.ReturnValue;
};

// Function Engine.RB_ConstraintInstance.MoveKinActorTransform
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 NewTM                          ( CPF_Parm | CPF_OutParm )

void URB_ConstraintInstance::MoveKinActorTransform ( struct FMatrix* NewTM )
{
	static UFunction* pFnMoveKinActorTransform = NULL;

	if ( ! pFnMoveKinActorTransform )
		pFnMoveKinActorTransform = (UFunction*) UObject::GObjObjects()->Data[ 28873 ];

	URB_ConstraintInstance_execMoveKinActorTransform_Parms MoveKinActorTransform_Parms;

	pFnMoveKinActorTransform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveKinActorTransform, &MoveKinActorTransform_Parms, NULL );

	pFnMoveKinActorTransform->FunctionFlags |= 0x400;

	if ( NewTM )
		memcpy ( NewTM, &MoveKinActorTransform_Parms.NewTM, 0x40 );
};

// Function Engine.RB_ConstraintInstance.SetLinearLimitSize
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewLimitSize                   ( CPF_Parm )

void URB_ConstraintInstance::SetLinearLimitSize ( float NewLimitSize )
{
	static UFunction* pFnSetLinearLimitSize = NULL;

	if ( ! pFnSetLinearLimitSize )
		pFnSetLinearLimitSize = (UFunction*) UObject::GObjObjects()->Data[ 28871 ];

	URB_ConstraintInstance_execSetLinearLimitSize_Parms SetLinearLimitSize_Parms;
	SetLinearLimitSize_Parms.NewLimitSize = NewLimitSize;

	pFnSetLinearLimitSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearLimitSize, &SetLinearLimitSize_Parms, NULL );

	pFnSetLinearLimitSize->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularDOFLimitScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InSwing1LimitScale             ( CPF_Parm )
// float                          InSwing2LimitScale             ( CPF_Parm )
// float                          InTwistLimitScale              ( CPF_Parm )
// class URB_ConstraintSetup*     InSetup                        ( CPF_Parm )

void URB_ConstraintInstance::SetAngularDOFLimitScale ( float InSwing1LimitScale, float InSwing2LimitScale, float InTwistLimitScale, class URB_ConstraintSetup* InSetup )
{
	static UFunction* pFnSetAngularDOFLimitScale = NULL;

	if ( ! pFnSetAngularDOFLimitScale )
		pFnSetAngularDOFLimitScale = (UFunction*) UObject::GObjObjects()->Data[ 28866 ];

	URB_ConstraintInstance_execSetAngularDOFLimitScale_Parms SetAngularDOFLimitScale_Parms;
	SetAngularDOFLimitScale_Parms.InSwing1LimitScale = InSwing1LimitScale;
	SetAngularDOFLimitScale_Parms.InSwing2LimitScale = InSwing2LimitScale;
	SetAngularDOFLimitScale_Parms.InTwistLimitScale = InTwistLimitScale;
	SetAngularDOFLimitScale_Parms.InSetup = InSetup;

	pFnSetAngularDOFLimitScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularDOFLimitScale, &SetAngularDOFLimitScale_Parms, NULL );

	pFnSetAngularDOFLimitScale->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularDriveParams
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InSpring                       ( CPF_Parm )
// float                          InDamping                      ( CPF_Parm )
// float                          InForceLimit                   ( CPF_Parm )

void URB_ConstraintInstance::SetAngularDriveParams ( float InSpring, float InDamping, float InForceLimit )
{
	static UFunction* pFnSetAngularDriveParams = NULL;

	if ( ! pFnSetAngularDriveParams )
		pFnSetAngularDriveParams = (UFunction*) UObject::GObjObjects()->Data[ 28862 ];

	URB_ConstraintInstance_execSetAngularDriveParams_Parms SetAngularDriveParams_Parms;
	SetAngularDriveParams_Parms.InSpring = InSpring;
	SetAngularDriveParams_Parms.InDamping = InDamping;
	SetAngularDriveParams_Parms.InForceLimit = InForceLimit;

	pFnSetAngularDriveParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularDriveParams, &SetAngularDriveParams_Parms, NULL );

	pFnSetAngularDriveParams->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularVelocityTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 InVelTarget                    ( CPF_Parm )

void URB_ConstraintInstance::SetAngularVelocityTarget ( struct FVector InVelTarget )
{
	static UFunction* pFnSetAngularVelocityTarget = NULL;

	if ( ! pFnSetAngularVelocityTarget )
		pFnSetAngularVelocityTarget = (UFunction*) UObject::GObjObjects()->Data[ 28860 ];

	URB_ConstraintInstance_execSetAngularVelocityTarget_Parms SetAngularVelocityTarget_Parms;
	memcpy ( &SetAngularVelocityTarget_Parms.InVelTarget, &InVelTarget, 0xC );

	pFnSetAngularVelocityTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularVelocityTarget, &SetAngularVelocityTarget_Parms, NULL );

	pFnSetAngularVelocityTarget->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularPositionTarget
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FQuat                   InPosTarget                    ( CPF_Const | CPF_Parm | CPF_OutParm )

void URB_ConstraintInstance::SetAngularPositionTarget ( struct FQuat* InPosTarget )
{
	static UFunction* pFnSetAngularPositionTarget = NULL;

	if ( ! pFnSetAngularPositionTarget )
		pFnSetAngularPositionTarget = (UFunction*) UObject::GObjObjects()->Data[ 28858 ];

	URB_ConstraintInstance_execSetAngularPositionTarget_Parms SetAngularPositionTarget_Parms;

	pFnSetAngularPositionTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularPositionTarget, &SetAngularPositionTarget_Parms, NULL );

	pFnSetAngularPositionTarget->FunctionFlags |= 0x400;

	if ( InPosTarget )
		memcpy ( InPosTarget, &SetAngularPositionTarget_Parms.InPosTarget, 0x10 );
};

// Function Engine.RB_ConstraintInstance.SetLinearDriveParams
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InSpring                       ( CPF_Parm )
// float                          InDamping                      ( CPF_Parm )
// float                          InForceLimit                   ( CPF_Parm )

void URB_ConstraintInstance::SetLinearDriveParams ( float InSpring, float InDamping, float InForceLimit )
{
	static UFunction* pFnSetLinearDriveParams = NULL;

	if ( ! pFnSetLinearDriveParams )
		pFnSetLinearDriveParams = (UFunction*) UObject::GObjObjects()->Data[ 28854 ];

	URB_ConstraintInstance_execSetLinearDriveParams_Parms SetLinearDriveParams_Parms;
	SetLinearDriveParams_Parms.InSpring = InSpring;
	SetLinearDriveParams_Parms.InDamping = InDamping;
	SetLinearDriveParams_Parms.InForceLimit = InForceLimit;

	pFnSetLinearDriveParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearDriveParams, &SetLinearDriveParams_Parms, NULL );

	pFnSetLinearDriveParams->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetLinearVelocityTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 InVelTarget                    ( CPF_Parm )

void URB_ConstraintInstance::SetLinearVelocityTarget ( struct FVector InVelTarget )
{
	static UFunction* pFnSetLinearVelocityTarget = NULL;

	if ( ! pFnSetLinearVelocityTarget )
		pFnSetLinearVelocityTarget = (UFunction*) UObject::GObjObjects()->Data[ 28852 ];

	URB_ConstraintInstance_execSetLinearVelocityTarget_Parms SetLinearVelocityTarget_Parms;
	memcpy ( &SetLinearVelocityTarget_Parms.InVelTarget, &InVelTarget, 0xC );

	pFnSetLinearVelocityTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearVelocityTarget, &SetLinearVelocityTarget_Parms, NULL );

	pFnSetLinearVelocityTarget->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetLinearPositionTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 InPosTarget                    ( CPF_Parm )

void URB_ConstraintInstance::SetLinearPositionTarget ( struct FVector InPosTarget )
{
	static UFunction* pFnSetLinearPositionTarget = NULL;

	if ( ! pFnSetLinearPositionTarget )
		pFnSetLinearPositionTarget = (UFunction*) UObject::GObjObjects()->Data[ 28850 ];

	URB_ConstraintInstance_execSetLinearPositionTarget_Parms SetLinearPositionTarget_Parms;
	memcpy ( &SetLinearPositionTarget_Parms.InPosTarget, &InPosTarget, 0xC );

	pFnSetLinearPositionTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearPositionTarget, &SetLinearPositionTarget_Parms, NULL );

	pFnSetLinearPositionTarget->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularVelocityDrive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableSwingDrive              ( CPF_Parm )
// unsigned long                  bEnableTwistDrive              ( CPF_Parm )

void URB_ConstraintInstance::SetAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive )
{
	static UFunction* pFnSetAngularVelocityDrive = NULL;

	if ( ! pFnSetAngularVelocityDrive )
		pFnSetAngularVelocityDrive = (UFunction*) UObject::GObjObjects()->Data[ 28847 ];

	URB_ConstraintInstance_execSetAngularVelocityDrive_Parms SetAngularVelocityDrive_Parms;
	SetAngularVelocityDrive_Parms.bEnableSwingDrive = bEnableSwingDrive;
	SetAngularVelocityDrive_Parms.bEnableTwistDrive = bEnableTwistDrive;

	pFnSetAngularVelocityDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularVelocityDrive, &SetAngularVelocityDrive_Parms, NULL );

	pFnSetAngularVelocityDrive->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularPositionDrive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableSwingDrive              ( CPF_Parm )
// unsigned long                  bEnableTwistDrive              ( CPF_Parm )

void URB_ConstraintInstance::SetAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive )
{
	static UFunction* pFnSetAngularPositionDrive = NULL;

	if ( ! pFnSetAngularPositionDrive )
		pFnSetAngularPositionDrive = (UFunction*) UObject::GObjObjects()->Data[ 28844 ];

	URB_ConstraintInstance_execSetAngularPositionDrive_Parms SetAngularPositionDrive_Parms;
	SetAngularPositionDrive_Parms.bEnableSwingDrive = bEnableSwingDrive;
	SetAngularPositionDrive_Parms.bEnableTwistDrive = bEnableTwistDrive;

	pFnSetAngularPositionDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularPositionDrive, &SetAngularPositionDrive_Parms, NULL );

	pFnSetAngularPositionDrive->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetLinearVelocityDrive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableXDrive                  ( CPF_Parm )
// unsigned long                  bEnableYDrive                  ( CPF_Parm )
// unsigned long                  bEnableZDrive                  ( CPF_Parm )

void URB_ConstraintInstance::SetLinearVelocityDrive ( unsigned long bEnableXDrive, unsigned long bEnableYDrive, unsigned long bEnableZDrive )
{
	static UFunction* pFnSetLinearVelocityDrive = NULL;

	if ( ! pFnSetLinearVelocityDrive )
		pFnSetLinearVelocityDrive = (UFunction*) UObject::GObjObjects()->Data[ 28840 ];

	URB_ConstraintInstance_execSetLinearVelocityDrive_Parms SetLinearVelocityDrive_Parms;
	SetLinearVelocityDrive_Parms.bEnableXDrive = bEnableXDrive;
	SetLinearVelocityDrive_Parms.bEnableYDrive = bEnableYDrive;
	SetLinearVelocityDrive_Parms.bEnableZDrive = bEnableZDrive;

	pFnSetLinearVelocityDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearVelocityDrive, &SetLinearVelocityDrive_Parms, NULL );

	pFnSetLinearVelocityDrive->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetLinearPositionDrive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableXDrive                  ( CPF_Parm )
// unsigned long                  bEnableYDrive                  ( CPF_Parm )
// unsigned long                  bEnableZDrive                  ( CPF_Parm )

void URB_ConstraintInstance::SetLinearPositionDrive ( unsigned long bEnableXDrive, unsigned long bEnableYDrive, unsigned long bEnableZDrive )
{
	static UFunction* pFnSetLinearPositionDrive = NULL;

	if ( ! pFnSetLinearPositionDrive )
		pFnSetLinearPositionDrive = (UFunction*) UObject::GObjObjects()->Data[ 28836 ];

	URB_ConstraintInstance_execSetLinearPositionDrive_Parms SetLinearPositionDrive_Parms;
	SetLinearPositionDrive_Parms.bEnableXDrive = bEnableXDrive;
	SetLinearPositionDrive_Parms.bEnableYDrive = bEnableYDrive;
	SetLinearPositionDrive_Parms.bEnableZDrive = bEnableZDrive;

	pFnSetLinearPositionDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearPositionDrive, &SetLinearPositionDrive_Parms, NULL );

	pFnSetLinearPositionDrive->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.GetConstraintLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector URB_ConstraintInstance::GetConstraintLocation ( )
{
	static UFunction* pFnGetConstraintLocation = NULL;

	if ( ! pFnGetConstraintLocation )
		pFnGetConstraintLocation = (UFunction*) UObject::GObjObjects()->Data[ 28834 ];

	URB_ConstraintInstance_execGetConstraintLocation_Parms GetConstraintLocation_Parms;

	pFnGetConstraintLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetConstraintLocation, &GetConstraintLocation_Parms, NULL );

	pFnGetConstraintLocation->FunctionFlags |= 0x400;

	return GetConstraintLocation_Parms.ReturnValue;
};

// Function Engine.RB_ConstraintInstance.GetPhysicsAssetInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicsAssetInstance*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPhysicsAssetInstance* URB_ConstraintInstance::GetPhysicsAssetInstance ( )
{
	static UFunction* pFnGetPhysicsAssetInstance = NULL;

	if ( ! pFnGetPhysicsAssetInstance )
		pFnGetPhysicsAssetInstance = (UFunction*) UObject::GObjObjects()->Data[ 28832 ];

	URB_ConstraintInstance_execGetPhysicsAssetInstance_Parms GetPhysicsAssetInstance_Parms;

	pFnGetPhysicsAssetInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPhysicsAssetInstance, &GetPhysicsAssetInstance_Parms, NULL );

	pFnGetPhysicsAssetInstance->FunctionFlags |= 0x400;

	return GetPhysicsAssetInstance_Parms.ReturnValue;
};

// Function Engine.RB_ConstraintInstance.TermConstraint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void URB_ConstraintInstance::TermConstraint ( )
{
	static UFunction* pFnTermConstraint = NULL;

	if ( ! pFnTermConstraint )
		pFnTermConstraint = (UFunction*) UObject::GObjObjects()->Data[ 9752 ];

	URB_ConstraintInstance_execTermConstraint_Parms TermConstraint_Parms;

	pFnTermConstraint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTermConstraint, &TermConstraint_Parms, NULL );

	pFnTermConstraint->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.InitConstraint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPrimitiveComponent*     PrimComp1                      ( CPF_Parm | CPF_EditInline )
// class UPrimitiveComponent*     PrimComp2                      ( CPF_Parm | CPF_EditInline )
// class URB_ConstraintSetup*     Setup                          ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )
// class AActor*                  InOwner                        ( CPF_Parm )
// class UPrimitiveComponent*     InPrimComp                     ( CPF_Parm | CPF_EditInline )
// unsigned long                  bMakeKinForBody1               ( CPF_Parm )

void URB_ConstraintInstance::InitConstraint ( class UPrimitiveComponent* PrimComp1, class UPrimitiveComponent* PrimComp2, class URB_ConstraintSetup* Setup, float Scale, class AActor* InOwner, class UPrimitiveComponent* InPrimComp, unsigned long bMakeKinForBody1 )
{
	static UFunction* pFnInitConstraint = NULL;

	if ( ! pFnInitConstraint )
		pFnInitConstraint = (UFunction*) UObject::GObjObjects()->Data[ 28824 ];

	URB_ConstraintInstance_execInitConstraint_Parms InitConstraint_Parms;
	InitConstraint_Parms.PrimComp1 = PrimComp1;
	InitConstraint_Parms.PrimComp2 = PrimComp2;
	InitConstraint_Parms.Setup = Setup;
	InitConstraint_Parms.Scale = Scale;
	InitConstraint_Parms.InOwner = InOwner;
	InitConstraint_Parms.InPrimComp = InPrimComp;
	InitConstraint_Parms.bMakeKinForBody1 = bMakeKinForBody1;

	pFnInitConstraint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitConstraint, &InitConstraint_Parms, NULL );

	pFnInitConstraint->FunctionFlags |= 0x400;
};

// Function Engine.NxGenericForceFieldBrush.StopsProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AProjectile*             P                              ( CPF_Parm )

bool ANxGenericForceFieldBrush::StopsProjectile ( class AProjectile* P )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = (UFunction*) UObject::GObjObjects()->Data[ 25282 ];

	ANxGenericForceFieldBrush_execStopsProjectile_Parms StopsProjectile_Parms;
	StopsProjectile_Parms.P = P;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );

	return StopsProjectile_Parms.ReturnValue;
};

// Function Engine.NxGenericForceFieldBrush.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANxGenericForceFieldBrush::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 25281 ];

	ANxGenericForceFieldBrush_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.NxForceField.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ANxForceField::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 25186 ];

	ANxForceField_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.NxForceField.DoInitRBPhys
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ANxForceField::DoInitRBPhys ( )
{
	static UFunction* pFnDoInitRBPhys = NULL;

	if ( ! pFnDoInitRBPhys )
		pFnDoInitRBPhys = (UFunction*) UObject::GObjObjects()->Data[ 25185 ];

	ANxForceField_execDoInitRBPhys_Parms DoInitRBPhys_Parms;

	pFnDoInitRBPhys->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoInitRBPhys, &DoInitRBPhys_Parms, NULL );

	pFnDoInitRBPhys->FunctionFlags |= 0x400;
};

// Function Engine.NxCylindricalForceFieldCapsule.DoInitRBPhys
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ANxCylindricalForceFieldCapsule::DoInitRBPhys ( )
{
	static UFunction* pFnDoInitRBPhys = NULL;

	if ( ! pFnDoInitRBPhys )
		pFnDoInitRBPhys = (UFunction*) UObject::GObjObjects()->Data[ 25207 ];

	ANxCylindricalForceFieldCapsule_execDoInitRBPhys_Parms DoInitRBPhys_Parms;

	pFnDoInitRBPhys->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoInitRBPhys, &DoInitRBPhys_Parms, NULL );

	pFnDoInitRBPhys->FunctionFlags |= 0x400;
};

// Function Engine.NxForceFieldGeneric.DoInitRBPhys
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ANxForceFieldGeneric::DoInitRBPhys ( )
{
	static UFunction* pFnDoInitRBPhys = NULL;

	if ( ! pFnDoInitRBPhys )
		pFnDoInitRBPhys = (UFunction*) UObject::GObjObjects()->Data[ 25211 ];

	ANxForceFieldGeneric_execDoInitRBPhys_Parms DoInitRBPhys_Parms;

	pFnDoInitRBPhys->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoInitRBPhys, &DoInitRBPhys_Parms, NULL );

	pFnDoInitRBPhys->FunctionFlags |= 0x400;
};

// Function Engine.NxForceFieldRadial.DoInitRBPhys
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ANxForceFieldRadial::DoInitRBPhys ( )
{
	static UFunction* pFnDoInitRBPhys = NULL;

	if ( ! pFnDoInitRBPhys )
		pFnDoInitRBPhys = (UFunction*) UObject::GObjObjects()->Data[ 25232 ];

	ANxForceFieldRadial_execDoInitRBPhys_Parms DoInitRBPhys_Parms;

	pFnDoInitRBPhys->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoInitRBPhys, &DoInitRBPhys_Parms, NULL );

	pFnDoInitRBPhys->FunctionFlags |= 0x400;
};

// Function Engine.NxForceFieldTornado.DoInitRBPhys
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ANxForceFieldTornado::DoInitRBPhys ( )
{
	static UFunction* pFnDoInitRBPhys = NULL;

	if ( ! pFnDoInitRBPhys )
		pFnDoInitRBPhys = (UFunction*) UObject::GObjObjects()->Data[ 25240 ];

	ANxForceFieldTornado_execDoInitRBPhys_Parms DoInitRBPhys_Parms;

	pFnDoInitRBPhys->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoInitRBPhys, &DoInitRBPhys_Parms, NULL );

	pFnDoInitRBPhys->FunctionFlags |= 0x400;
};

// Function Engine.NxGenericForceFieldBox.DoInitRBPhys
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ANxGenericForceFieldBox::DoInitRBPhys ( )
{
	static UFunction* pFnDoInitRBPhys = NULL;

	if ( ! pFnDoInitRBPhys )
		pFnDoInitRBPhys = (UFunction*) UObject::GObjObjects()->Data[ 25270 ];

	ANxGenericForceFieldBox_execDoInitRBPhys_Parms DoInitRBPhys_Parms;

	pFnDoInitRBPhys->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoInitRBPhys, &DoInitRBPhys_Parms, NULL );

	pFnDoInitRBPhys->FunctionFlags |= 0x400;
};

// Function Engine.RB_CylindricalForceActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ARB_CylindricalForceActor::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 28981 ];

	ARB_CylindricalForceActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.RB_RadialForceActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ARB_RadialForceActor::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 29064 ];

	ARB_RadialForceActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.ForceFieldShape.GetDrawComponent
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UPrimitiveComponent* UForceFieldShape::eventGetDrawComponent ( )
{
	static UFunction* pFnGetDrawComponent = NULL;

	if ( ! pFnGetDrawComponent )
		pFnGetDrawComponent = (UFunction*) UObject::GObjObjects()->Data[ 20297 ];

	UForceFieldShape_eventGetDrawComponent_Parms GetDrawComponent_Parms;

	this->ProcessEvent ( pFnGetDrawComponent, &GetDrawComponent_Parms, NULL );

	return GetDrawComponent_Parms.ReturnValue;
};

// Function Engine.ForceFieldShape.FillByCylinder
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          BottomRadius                   ( CPF_Parm )
// float                          TopRadius                      ( CPF_Parm )
// float                          Height                         ( CPF_Parm )
// float                          HeightOffset                   ( CPF_Parm )

void UForceFieldShape::eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset )
{
	static UFunction* pFnFillByCylinder = NULL;

	if ( ! pFnFillByCylinder )
		pFnFillByCylinder = (UFunction*) UObject::GObjObjects()->Data[ 20292 ];

	UForceFieldShape_eventFillByCylinder_Parms FillByCylinder_Parms;
	FillByCylinder_Parms.BottomRadius = BottomRadius;
	FillByCylinder_Parms.TopRadius = TopRadius;
	FillByCylinder_Parms.Height = Height;
	FillByCylinder_Parms.HeightOffset = HeightOffset;

	this->ProcessEvent ( pFnFillByCylinder, &FillByCylinder_Parms, NULL );
};

// Function Engine.ForceFieldShape.FillByCapsule
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          Height                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

void UForceFieldShape::eventFillByCapsule ( float Height, float Radius )
{
	static UFunction* pFnFillByCapsule = NULL;

	if ( ! pFnFillByCapsule )
		pFnFillByCapsule = (UFunction*) UObject::GObjObjects()->Data[ 20289 ];

	UForceFieldShape_eventFillByCapsule_Parms FillByCapsule_Parms;
	FillByCapsule_Parms.Height = Height;
	FillByCapsule_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillByCapsule, &FillByCapsule_Parms, NULL );
};

// Function Engine.ForceFieldShape.FillByBox
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FVector                 Dimension                      ( CPF_Parm )

void UForceFieldShape::eventFillByBox ( struct FVector Dimension )
{
	static UFunction* pFnFillByBox = NULL;

	if ( ! pFnFillByBox )
		pFnFillByBox = (UFunction*) UObject::GObjObjects()->Data[ 20287 ];

	UForceFieldShape_eventFillByBox_Parms FillByBox_Parms;
	memcpy ( &FillByBox_Parms.Dimension, &Dimension, 0xC );

	this->ProcessEvent ( pFnFillByBox, &FillByBox_Parms, NULL );
};

// Function Engine.ForceFieldShape.FillBySphere
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          Radius                         ( CPF_Parm )

void UForceFieldShape::eventFillBySphere ( float Radius )
{
	static UFunction* pFnFillBySphere = NULL;

	if ( ! pFnFillBySphere )
		pFnFillBySphere = (UFunction*) UObject::GObjObjects()->Data[ 20285 ];

	UForceFieldShape_eventFillBySphere_Parms FillBySphere_Parms;
	FillBySphere_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillBySphere, &FillBySphere_Parms, NULL );
};

// Function Engine.ForceFieldShapeBox.GetDrawComponent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UPrimitiveComponent* UForceFieldShapeBox::eventGetDrawComponent ( )
{
	static UFunction* pFnGetDrawComponent = NULL;

	if ( ! pFnGetDrawComponent )
		pFnGetDrawComponent = (UFunction*) UObject::GObjObjects()->Data[ 20314 ];

	UForceFieldShapeBox_eventGetDrawComponent_Parms GetDrawComponent_Parms;

	this->ProcessEvent ( pFnGetDrawComponent, &GetDrawComponent_Parms, NULL );

	return GetDrawComponent_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeBox.FillByCylinder
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          BottomRadius                   ( CPF_Parm )
// float                          TopRadius                      ( CPF_Parm )
// float                          Height                         ( CPF_Parm )
// float                          HeightOffset                   ( CPF_Parm )

void UForceFieldShapeBox::eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset )
{
	static UFunction* pFnFillByCylinder = NULL;

	if ( ! pFnFillByCylinder )
		pFnFillByCylinder = (UFunction*) UObject::GObjObjects()->Data[ 20309 ];

	UForceFieldShapeBox_eventFillByCylinder_Parms FillByCylinder_Parms;
	FillByCylinder_Parms.BottomRadius = BottomRadius;
	FillByCylinder_Parms.TopRadius = TopRadius;
	FillByCylinder_Parms.Height = Height;
	FillByCylinder_Parms.HeightOffset = HeightOffset;

	this->ProcessEvent ( pFnFillByCylinder, &FillByCylinder_Parms, NULL );
};

// Function Engine.ForceFieldShapeBox.FillByCapsule
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Height                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeBox::eventFillByCapsule ( float Height, float Radius )
{
	static UFunction* pFnFillByCapsule = NULL;

	if ( ! pFnFillByCapsule )
		pFnFillByCapsule = (UFunction*) UObject::GObjObjects()->Data[ 20306 ];

	UForceFieldShapeBox_eventFillByCapsule_Parms FillByCapsule_Parms;
	FillByCapsule_Parms.Height = Height;
	FillByCapsule_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillByCapsule, &FillByCapsule_Parms, NULL );
};

// Function Engine.ForceFieldShapeBox.FillByBox
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 Extent                         ( CPF_Parm )

void UForceFieldShapeBox::eventFillByBox ( struct FVector Extent )
{
	static UFunction* pFnFillByBox = NULL;

	if ( ! pFnFillByBox )
		pFnFillByBox = (UFunction*) UObject::GObjObjects()->Data[ 20304 ];

	UForceFieldShapeBox_eventFillByBox_Parms FillByBox_Parms;
	memcpy ( &FillByBox_Parms.Extent, &Extent, 0xC );

	this->ProcessEvent ( pFnFillByBox, &FillByBox_Parms, NULL );
};

// Function Engine.ForceFieldShapeBox.FillBySphere
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeBox::eventFillBySphere ( float Radius )
{
	static UFunction* pFnFillBySphere = NULL;

	if ( ! pFnFillBySphere )
		pFnFillBySphere = (UFunction*) UObject::GObjObjects()->Data[ 20302 ];

	UForceFieldShapeBox_eventFillBySphere_Parms FillBySphere_Parms;
	FillBySphere_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillBySphere, &FillBySphere_Parms, NULL );
};

// Function Engine.ForceFieldShapeBox.GetRadii
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UForceFieldShapeBox::eventGetRadii ( )
{
	static UFunction* pFnGetRadii = NULL;

	if ( ! pFnGetRadii )
		pFnGetRadii = (UFunction*) UObject::GObjObjects()->Data[ 20299 ];

	UForceFieldShapeBox_eventGetRadii_Parms GetRadii_Parms;

	this->ProcessEvent ( pFnGetRadii, &GetRadii_Parms, NULL );

	return GetRadii_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeCapsule.GetDrawComponent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UPrimitiveComponent* UForceFieldShapeCapsule::eventGetDrawComponent ( )
{
	static UFunction* pFnGetDrawComponent = NULL;

	if ( ! pFnGetDrawComponent )
		pFnGetDrawComponent = (UFunction*) UObject::GObjObjects()->Data[ 20334 ];

	UForceFieldShapeCapsule_eventGetDrawComponent_Parms GetDrawComponent_Parms;

	this->ProcessEvent ( pFnGetDrawComponent, &GetDrawComponent_Parms, NULL );

	return GetDrawComponent_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeCapsule.FillByCylinder
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          BottomRadius                   ( CPF_Parm )
// float                          TopRadius                      ( CPF_Parm )
// float                          Height                         ( CPF_Parm )
// float                          HeightOffset                   ( CPF_Parm )

void UForceFieldShapeCapsule::eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset )
{
	static UFunction* pFnFillByCylinder = NULL;

	if ( ! pFnFillByCylinder )
		pFnFillByCylinder = (UFunction*) UObject::GObjObjects()->Data[ 20329 ];

	UForceFieldShapeCapsule_eventFillByCylinder_Parms FillByCylinder_Parms;
	FillByCylinder_Parms.BottomRadius = BottomRadius;
	FillByCylinder_Parms.TopRadius = TopRadius;
	FillByCylinder_Parms.Height = Height;
	FillByCylinder_Parms.HeightOffset = HeightOffset;

	this->ProcessEvent ( pFnFillByCylinder, &FillByCylinder_Parms, NULL );
};

// Function Engine.ForceFieldShapeCapsule.FillByCapsule
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Height                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeCapsule::eventFillByCapsule ( float Height, float Radius )
{
	static UFunction* pFnFillByCapsule = NULL;

	if ( ! pFnFillByCapsule )
		pFnFillByCapsule = (UFunction*) UObject::GObjObjects()->Data[ 20326 ];

	UForceFieldShapeCapsule_eventFillByCapsule_Parms FillByCapsule_Parms;
	FillByCapsule_Parms.Height = Height;
	FillByCapsule_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillByCapsule, &FillByCapsule_Parms, NULL );
};

// Function Engine.ForceFieldShapeCapsule.FillByBox
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 Extent                         ( CPF_Parm )

void UForceFieldShapeCapsule::eventFillByBox ( struct FVector Extent )
{
	static UFunction* pFnFillByBox = NULL;

	if ( ! pFnFillByBox )
		pFnFillByBox = (UFunction*) UObject::GObjObjects()->Data[ 20324 ];

	UForceFieldShapeCapsule_eventFillByBox_Parms FillByBox_Parms;
	memcpy ( &FillByBox_Parms.Extent, &Extent, 0xC );

	this->ProcessEvent ( pFnFillByBox, &FillByBox_Parms, NULL );
};

// Function Engine.ForceFieldShapeCapsule.FillBySphere
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeCapsule::eventFillBySphere ( float Radius )
{
	static UFunction* pFnFillBySphere = NULL;

	if ( ! pFnFillBySphere )
		pFnFillBySphere = (UFunction*) UObject::GObjObjects()->Data[ 20322 ];

	UForceFieldShapeCapsule_eventFillBySphere_Parms FillBySphere_Parms;
	FillBySphere_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillBySphere, &FillBySphere_Parms, NULL );
};

// Function Engine.ForceFieldShapeCapsule.GetRadius
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UForceFieldShapeCapsule::eventGetRadius ( )
{
	static UFunction* pFnGetRadius = NULL;

	if ( ! pFnGetRadius )
		pFnGetRadius = (UFunction*) UObject::GObjObjects()->Data[ 20320 ];

	UForceFieldShapeCapsule_eventGetRadius_Parms GetRadius_Parms;

	this->ProcessEvent ( pFnGetRadius, &GetRadius_Parms, NULL );

	return GetRadius_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeCapsule.GetHeight
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UForceFieldShapeCapsule::eventGetHeight ( )
{
	static UFunction* pFnGetHeight = NULL;

	if ( ! pFnGetHeight )
		pFnGetHeight = (UFunction*) UObject::GObjObjects()->Data[ 20317 ];

	UForceFieldShapeCapsule_eventGetHeight_Parms GetHeight_Parms;

	this->ProcessEvent ( pFnGetHeight, &GetHeight_Parms, NULL );

	return GetHeight_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeSphere.GetDrawComponent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UPrimitiveComponent* UForceFieldShapeSphere::eventGetDrawComponent ( )
{
	static UFunction* pFnGetDrawComponent = NULL;

	if ( ! pFnGetDrawComponent )
		pFnGetDrawComponent = (UFunction*) UObject::GObjObjects()->Data[ 20356 ];

	UForceFieldShapeSphere_eventGetDrawComponent_Parms GetDrawComponent_Parms;

	this->ProcessEvent ( pFnGetDrawComponent, &GetDrawComponent_Parms, NULL );

	return GetDrawComponent_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeSphere.FillByCylinder
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          BottomRadius                   ( CPF_Parm )
// float                          TopRadius                      ( CPF_Parm )
// float                          Height                         ( CPF_Parm )
// float                          HeightOffset                   ( CPF_Parm )

void UForceFieldShapeSphere::eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset )
{
	static UFunction* pFnFillByCylinder = NULL;

	if ( ! pFnFillByCylinder )
		pFnFillByCylinder = (UFunction*) UObject::GObjObjects()->Data[ 20347 ];

	UForceFieldShapeSphere_eventFillByCylinder_Parms FillByCylinder_Parms;
	FillByCylinder_Parms.BottomRadius = BottomRadius;
	FillByCylinder_Parms.TopRadius = TopRadius;
	FillByCylinder_Parms.Height = Height;
	FillByCylinder_Parms.HeightOffset = HeightOffset;

	this->ProcessEvent ( pFnFillByCylinder, &FillByCylinder_Parms, NULL );
};

// Function Engine.ForceFieldShapeSphere.FillByCapsule
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Height                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeSphere::eventFillByCapsule ( float Height, float Radius )
{
	static UFunction* pFnFillByCapsule = NULL;

	if ( ! pFnFillByCapsule )
		pFnFillByCapsule = (UFunction*) UObject::GObjObjects()->Data[ 20344 ];

	UForceFieldShapeSphere_eventFillByCapsule_Parms FillByCapsule_Parms;
	FillByCapsule_Parms.Height = Height;
	FillByCapsule_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillByCapsule, &FillByCapsule_Parms, NULL );
};

// Function Engine.ForceFieldShapeSphere.FillByBox
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 Extent                         ( CPF_Parm )

void UForceFieldShapeSphere::eventFillByBox ( struct FVector Extent )
{
	static UFunction* pFnFillByBox = NULL;

	if ( ! pFnFillByBox )
		pFnFillByBox = (UFunction*) UObject::GObjObjects()->Data[ 20342 ];

	UForceFieldShapeSphere_eventFillByBox_Parms FillByBox_Parms;
	memcpy ( &FillByBox_Parms.Extent, &Extent, 0xC );

	this->ProcessEvent ( pFnFillByBox, &FillByBox_Parms, NULL );
};

// Function Engine.ForceFieldShapeSphere.FillBySphere
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeSphere::eventFillBySphere ( float Radius )
{
	static UFunction* pFnFillBySphere = NULL;

	if ( ! pFnFillBySphere )
		pFnFillBySphere = (UFunction*) UObject::GObjObjects()->Data[ 20340 ];

	UForceFieldShapeSphere_eventFillBySphere_Parms FillBySphere_Parms;
	FillBySphere_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillBySphere, &FillBySphere_Parms, NULL );
};

// Function Engine.ForceFieldShapeSphere.GetRadius
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UForceFieldShapeSphere::eventGetRadius ( )
{
	static UFunction* pFnGetRadius = NULL;

	if ( ! pFnGetRadius )
		pFnGetRadius = (UFunction*) UObject::GObjObjects()->Data[ 20337 ];

	UForceFieldShapeSphere_eventGetRadius_Parms GetRadius_Parms;

	this->ProcessEvent ( pFnGetRadius, &GetRadius_Parms, NULL );

	return GetRadius_Parms.ReturnValue;
};

// Function Engine.SequenceObject.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USequenceObject::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 7142 ];

	USequenceObject_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SequenceObject.IsPastingIntoUISequenceAllowed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USequenceObject::eventIsPastingIntoUISequenceAllowed ( )
{
	static UFunction* pFnIsPastingIntoUISequenceAllowed = NULL;

	if ( ! pFnIsPastingIntoUISequenceAllowed )
		pFnIsPastingIntoUISequenceAllowed = (UFunction*) UObject::GObjObjects()->Data[ 8869 ];

	USequenceObject_eventIsPastingIntoUISequenceAllowed_Parms IsPastingIntoUISequenceAllowed_Parms;

	this->ProcessEvent ( pFnIsPastingIntoUISequenceAllowed, &IsPastingIntoUISequenceAllowed_Parms, NULL );

	return IsPastingIntoUISequenceAllowed_Parms.ReturnValue;
};

// Function Engine.SequenceObject.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USequenceObject::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 8866 ];

	USequenceObject_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SequenceObject.IsPastingIntoLevelSequenceAllowed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USequenceObject::eventIsPastingIntoLevelSequenceAllowed ( )
{
	static UFunction* pFnIsPastingIntoLevelSequenceAllowed = NULL;

	if ( ! pFnIsPastingIntoLevelSequenceAllowed )
		pFnIsPastingIntoLevelSequenceAllowed = (UFunction*) UObject::GObjObjects()->Data[ 8864 ];

	USequenceObject_eventIsPastingIntoLevelSequenceAllowed_Parms IsPastingIntoLevelSequenceAllowed_Parms;

	this->ProcessEvent ( pFnIsPastingIntoLevelSequenceAllowed, &IsPastingIntoLevelSequenceAllowed_Parms, NULL );

	return IsPastingIntoLevelSequenceAllowed_Parms.ReturnValue;
};

// Function Engine.SequenceObject.IsValidLevelSequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USequenceObject::eventIsValidLevelSequenceObject ( )
{
	static UFunction* pFnIsValidLevelSequenceObject = NULL;

	if ( ! pFnIsValidLevelSequenceObject )
		pFnIsValidLevelSequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 8862 ];

	USequenceObject_eventIsValidLevelSequenceObject_Parms IsValidLevelSequenceObject_Parms;

	this->ProcessEvent ( pFnIsValidLevelSequenceObject, &IsValidLevelSequenceObject_Parms, NULL );

	return IsValidLevelSequenceObject_Parms.ReturnValue;
};

// Function Engine.SequenceObject.GetWorldInfo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AWorldInfo*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AWorldInfo* USequenceObject::GetWorldInfo ( )
{
	static UFunction* pFnGetWorldInfo = NULL;

	if ( ! pFnGetWorldInfo )
		pFnGetWorldInfo = (UFunction*) UObject::GObjObjects()->Data[ 8860 ];

	USequenceObject_execGetWorldInfo_Parms GetWorldInfo_Parms;

	pFnGetWorldInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWorldInfo, &GetWorldInfo_Parms, NULL );

	pFnGetWorldInfo->FunctionFlags |= 0x400;

	return GetWorldInfo_Parms.ReturnValue;
};

// Function Engine.SequenceObject.ScriptLog
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 LogText                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bWarning                       ( CPF_OptionalParm | CPF_Parm )

void USequenceObject::ScriptLog ( struct FString LogText, unsigned long bWarning )
{
	static UFunction* pFnScriptLog = NULL;

	if ( ! pFnScriptLog )
		pFnScriptLog = (UFunction*) UObject::GObjObjects()->Data[ 8857 ];

	USequenceObject_execScriptLog_Parms ScriptLog_Parms;
	memcpy ( &ScriptLog_Parms.LogText, &LogText, 0x10 );
	ScriptLog_Parms.bWarning = bWarning;

	pFnScriptLog->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScriptLog, &ScriptLog_Parms, NULL );

	pFnScriptLog->FunctionFlags |= 0x400;
};

// Function Engine.SequenceFrame.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USequenceFrame::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 30234 ];

	USequenceFrame_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SequenceOp.ForceActivateInput
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            InputIdx                       ( CPF_Parm )

void USequenceOp::ForceActivateInput ( int InputIdx )
{
	static UFunction* pFnForceActivateInput = NULL;

	if ( ! pFnForceActivateInput )
		pFnForceActivateInput = (UFunction*) UObject::GObjObjects()->Data[ 9011 ];

	USequenceOp_execForceActivateInput_Parms ForceActivateInput_Parms;
	ForceActivateInput_Parms.InputIdx = InputIdx;

	pFnForceActivateInput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceActivateInput, &ForceActivateInput_Parms, NULL );

	pFnForceActivateInput->FunctionFlags |= 0x400;
};

// Function Engine.SequenceOp.GetController
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TheActor                       ( CPF_Parm )

class AController* USequenceOp::GetController ( class AActor* TheActor )
{
	static UFunction* pFnGetController = NULL;

	if ( ! pFnGetController )
		pFnGetController = (UFunction*) UObject::GObjObjects()->Data[ 9006 ];

	USequenceOp_execGetController_Parms GetController_Parms;
	GetController_Parms.TheActor = TheActor;

	this->ProcessEvent ( pFnGetController, &GetController_Parms, NULL );

	return GetController_Parms.ReturnValue;
};

// Function Engine.SequenceOp.GetPawn
// [0x00020002] 
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TheActor                       ( CPF_Parm )

class APawn* USequenceOp::GetPawn ( class AActor* TheActor )
{
	static UFunction* pFnGetPawn = NULL;

	if ( ! pFnGetPawn )
		pFnGetPawn = (UFunction*) UObject::GObjObjects()->Data[ 9001 ];

	USequenceOp_execGetPawn_Parms GetPawn_Parms;
	GetPawn_Parms.TheActor = TheActor;

	this->ProcessEvent ( pFnGetPawn, &GetPawn_Parms, NULL );

	return GetPawn_Parms.ReturnValue;
};

// Function Engine.SequenceOp.Reset
// [0x00020000] 
// Parameters infos:

void USequenceOp::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 9000 ];

	USequenceOp_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SequenceOp.PublishLinkedVariableValues
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USequenceOp::PublishLinkedVariableValues ( )
{
	static UFunction* pFnPublishLinkedVariableValues = NULL;

	if ( ! pFnPublishLinkedVariableValues )
		pFnPublishLinkedVariableValues = (UFunction*) UObject::GObjObjects()->Data[ 8999 ];

	USequenceOp_execPublishLinkedVariableValues_Parms PublishLinkedVariableValues_Parms;

	pFnPublishLinkedVariableValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPublishLinkedVariableValues, &PublishLinkedVariableValues_Parms, NULL );

	pFnPublishLinkedVariableValues->FunctionFlags |= 0x400;
};

// Function Engine.SequenceOp.PopulateLinkedVariableValues
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USequenceOp::PopulateLinkedVariableValues ( )
{
	static UFunction* pFnPopulateLinkedVariableValues = NULL;

	if ( ! pFnPopulateLinkedVariableValues )
		pFnPopulateLinkedVariableValues = (UFunction*) UObject::GObjObjects()->Data[ 8998 ];

	USequenceOp_execPopulateLinkedVariableValues_Parms PopulateLinkedVariableValues_Parms;

	pFnPopulateLinkedVariableValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPopulateLinkedVariableValues, &PopulateLinkedVariableValues_Parms, NULL );

	pFnPopulateLinkedVariableValues->FunctionFlags |= 0x400;
};

// Function Engine.SequenceOp.PreVersionUpdated
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            OldVersion                     ( CPF_Parm )
// int                            NewVersion                     ( CPF_Parm )

void USequenceOp::eventPreVersionUpdated ( int OldVersion, int NewVersion )
{
	static UFunction* pFnPreVersionUpdated = NULL;

	if ( ! pFnPreVersionUpdated )
		pFnPreVersionUpdated = (UFunction*) UObject::GObjObjects()->Data[ 8995 ];

	USequenceOp_eventPreVersionUpdated_Parms PreVersionUpdated_Parms;
	PreVersionUpdated_Parms.OldVersion = OldVersion;
	PreVersionUpdated_Parms.NewVersion = NewVersion;

	this->ProcessEvent ( pFnPreVersionUpdated, &PreVersionUpdated_Parms, NULL );
};

// Function Engine.SequenceOp.VersionUpdated
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            OldVersion                     ( CPF_Parm )
// int                            NewVersion                     ( CPF_Parm )

void USequenceOp::eventVersionUpdated ( int OldVersion, int NewVersion )
{
	static UFunction* pFnVersionUpdated = NULL;

	if ( ! pFnVersionUpdated )
		pFnVersionUpdated = (UFunction*) UObject::GObjObjects()->Data[ 8992 ];

	USequenceOp_eventVersionUpdated_Parms VersionUpdated_Parms;
	VersionUpdated_Parms.OldVersion = OldVersion;
	VersionUpdated_Parms.NewVersion = NewVersion;

	this->ProcessEvent ( pFnVersionUpdated, &VersionUpdated_Parms, NULL );
};

// Function Engine.SequenceOp.SetStringRefVars
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sLink                          ( CPF_Parm | CPF_NeedCtorLink )
// int                            srValue                        ( CPF_Parm )

void USequenceOp::SetStringRefVars ( struct FString sLink, int srValue )
{
	static UFunction* pFnSetStringRefVars = NULL;

	if ( ! pFnSetStringRefVars )
		pFnSetStringRefVars = (UFunction*) UObject::GObjObjects()->Data[ 8989 ];

	USequenceOp_execSetStringRefVars_Parms SetStringRefVars_Parms;
	memcpy ( &SetStringRefVars_Parms.sLink, &sLink, 0x10 );
	SetStringRefVars_Parms.srValue = srValue;

	pFnSetStringRefVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStringRefVars, &SetStringRefVars_Parms, NULL );

	pFnSetStringRefVars->FunctionFlags |= 0x400;
};

// Function Engine.SequenceOp.SetNameVars
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sLink                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FName                   sValue                         ( CPF_Parm )

void USequenceOp::SetNameVars ( struct FString sLink, struct FName sValue )
{
	static UFunction* pFnSetNameVars = NULL;

	if ( ! pFnSetNameVars )
		pFnSetNameVars = (UFunction*) UObject::GObjObjects()->Data[ 8986 ];

	USequenceOp_execSetNameVars_Parms SetNameVars_Parms;
	memcpy ( &SetNameVars_Parms.sLink, &sLink, 0x10 );
	memcpy ( &SetNameVars_Parms.sValue, &sValue, 0x8 );

	pFnSetNameVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNameVars, &SetNameVars_Parms, NULL );

	pFnSetNameVars->FunctionFlags |= 0x400;
};

// Function Engine.SequenceOp.SetObjectVars
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sLink                          ( CPF_Parm | CPF_NeedCtorLink )
// class UObject*                 oValue                         ( CPF_Parm )

void USequenceOp::SetObjectVars ( struct FString sLink, class UObject* oValue )
{
	static UFunction* pFnSetObjectVars = NULL;

	if ( ! pFnSetObjectVars )
		pFnSetObjectVars = (UFunction*) UObject::GObjObjects()->Data[ 8983 ];

	USequenceOp_execSetObjectVars_Parms SetObjectVars_Parms;
	memcpy ( &SetObjectVars_Parms.sLink, &sLink, 0x10 );
	SetObjectVars_Parms.oValue = oValue;

	pFnSetObjectVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetObjectVars, &SetObjectVars_Parms, NULL );

	pFnSetObjectVars->FunctionFlags |= 0x400;
};

// Function Engine.SequenceOp.SetStringVars
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sLink                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sValue                         ( CPF_Parm | CPF_NeedCtorLink )

void USequenceOp::SetStringVars ( struct FString sLink, struct FString sValue )
{
	static UFunction* pFnSetStringVars = NULL;

	if ( ! pFnSetStringVars )
		pFnSetStringVars = (UFunction*) UObject::GObjObjects()->Data[ 8980 ];

	USequenceOp_execSetStringVars_Parms SetStringVars_Parms;
	memcpy ( &SetStringVars_Parms.sLink, &sLink, 0x10 );
	memcpy ( &SetStringVars_Parms.sValue, &sValue, 0x10 );

	pFnSetStringVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStringVars, &SetStringVars_Parms, NULL );

	pFnSetStringVars->FunctionFlags |= 0x400;
};

// Function Engine.SequenceOp.SetFloatVars
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sLink                          ( CPF_Parm | CPF_NeedCtorLink )
// float                          fValue                         ( CPF_Parm )

void USequenceOp::SetFloatVars ( struct FString sLink, float fValue )
{
	static UFunction* pFnSetFloatVars = NULL;

	if ( ! pFnSetFloatVars )
		pFnSetFloatVars = (UFunction*) UObject::GObjObjects()->Data[ 8977 ];

	USequenceOp_execSetFloatVars_Parms SetFloatVars_Parms;
	memcpy ( &SetFloatVars_Parms.sLink, &sLink, 0x10 );
	SetFloatVars_Parms.fValue = fValue;

	pFnSetFloatVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatVars, &SetFloatVars_Parms, NULL );

	pFnSetFloatVars->FunctionFlags |= 0x400;
};

// Function Engine.SequenceOp.SetIntVars
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sLink                          ( CPF_Parm | CPF_NeedCtorLink )
// int                            nValue                         ( CPF_Parm )

void USequenceOp::SetIntVars ( struct FString sLink, int nValue )
{
	static UFunction* pFnSetIntVars = NULL;

	if ( ! pFnSetIntVars )
		pFnSetIntVars = (UFunction*) UObject::GObjObjects()->Data[ 8974 ];

	USequenceOp_execSetIntVars_Parms SetIntVars_Parms;
	memcpy ( &SetIntVars_Parms.sLink, &sLink, 0x10 );
	SetIntVars_Parms.nValue = nValue;

	pFnSetIntVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIntVars, &SetIntVars_Parms, NULL );

	pFnSetIntVars->FunctionFlags |= 0x400;
};

// Function Engine.SequenceOp.SetBoolVars
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sLink                          ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bValue                         ( CPF_Parm )

void USequenceOp::SetBoolVars ( struct FString sLink, unsigned long bValue )
{
	static UFunction* pFnSetBoolVars = NULL;

	if ( ! pFnSetBoolVars )
		pFnSetBoolVars = (UFunction*) UObject::GObjObjects()->Data[ 8971 ];

	USequenceOp_execSetBoolVars_Parms SetBoolVars_Parms;
	memcpy ( &SetBoolVars_Parms.sLink, &sLink, 0x10 );
	SetBoolVars_Parms.bValue = bValue;

	pFnSetBoolVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBoolVars, &SetBoolVars_Parms, NULL );

	pFnSetBoolVars->FunctionFlags |= 0x400;
};

// Function Engine.SequenceOp.Deactivated
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USequenceOp::eventDeactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 8970 ];

	USequenceOp_eventDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function Engine.SequenceOp.Activated
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USequenceOp::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 8969 ];

	USequenceOp_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.SequenceOp.ActivateNamedOutputLink
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 LinkDesc                       ( CPF_Parm | CPF_NeedCtorLink )

bool USequenceOp::ActivateNamedOutputLink ( struct FString LinkDesc )
{
	static UFunction* pFnActivateNamedOutputLink = NULL;

	if ( ! pFnActivateNamedOutputLink )
		pFnActivateNamedOutputLink = (UFunction*) UObject::GObjObjects()->Data[ 8966 ];

	USequenceOp_execActivateNamedOutputLink_Parms ActivateNamedOutputLink_Parms;
	memcpy ( &ActivateNamedOutputLink_Parms.LinkDesc, &LinkDesc, 0x10 );

	pFnActivateNamedOutputLink->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateNamedOutputLink, &ActivateNamedOutputLink_Parms, NULL );

	pFnActivateNamedOutputLink->FunctionFlags |= 0x400;

	return ActivateNamedOutputLink_Parms.ReturnValue;
};

// Function Engine.SequenceOp.ActivateOutputLink
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OutputIdx                      ( CPF_Parm )

bool USequenceOp::ActivateOutputLink ( int OutputIdx )
{
	static UFunction* pFnActivateOutputLink = NULL;

	if ( ! pFnActivateOutputLink )
		pFnActivateOutputLink = (UFunction*) UObject::GObjObjects()->Data[ 8963 ];

	USequenceOp_execActivateOutputLink_Parms ActivateOutputLink_Parms;
	ActivateOutputLink_Parms.OutputIdx = OutputIdx;

	pFnActivateOutputLink->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateOutputLink, &ActivateOutputLink_Parms, NULL );

	pFnActivateOutputLink->FunctionFlags |= 0x400;

	return ActivateOutputLink_Parms.ReturnValue;
};

// Function Engine.SequenceOp.GetStringRefVars
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 sDescription                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct TArray<int>             aStringRef                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USequenceOp::GetStringRefVars ( struct FString sDescription, struct TArray<int>* aStringRef )
{
	static UFunction* pFnGetStringRefVars = NULL;

	if ( ! pFnGetStringRefVars )
		pFnGetStringRefVars = (UFunction*) UObject::GObjObjects()->Data[ 8959 ];

	USequenceOp_execGetStringRefVars_Parms GetStringRefVars_Parms;
	memcpy ( &GetStringRefVars_Parms.sDescription, &sDescription, 0x10 );

	pFnGetStringRefVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringRefVars, &GetStringRefVars_Parms, NULL );

	pFnGetStringRefVars->FunctionFlags |= 0x400;

	if ( aStringRef )
		memcpy ( aStringRef, &GetStringRefVars_Parms.aStringRef, 0x10 );
};

// Function Engine.SequenceOp.GetNameVars
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 inDesc                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct TArray<struct FName>    nameVars                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USequenceOp::GetNameVars ( struct FString inDesc, struct TArray<struct FName>* nameVars )
{
	static UFunction* pFnGetNameVars = NULL;

	if ( ! pFnGetNameVars )
		pFnGetNameVars = (UFunction*) UObject::GObjObjects()->Data[ 8955 ];

	USequenceOp_execGetNameVars_Parms GetNameVars_Parms;
	memcpy ( &GetNameVars_Parms.inDesc, &inDesc, 0x10 );

	pFnGetNameVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNameVars, &GetNameVars_Parms, NULL );

	pFnGetNameVars->FunctionFlags |= 0x400;

	if ( nameVars )
		memcpy ( nameVars, &GetNameVars_Parms.nameVars, 0x10 );
};

// Function Engine.SequenceOp.GetStringVars
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 inDesc                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct TArray<struct FString>  strVars                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USequenceOp::GetStringVars ( struct FString inDesc, struct TArray<struct FString>* strVars )
{
	static UFunction* pFnGetStringVars = NULL;

	if ( ! pFnGetStringVars )
		pFnGetStringVars = (UFunction*) UObject::GObjObjects()->Data[ 8951 ];

	USequenceOp_execGetStringVars_Parms GetStringVars_Parms;
	memcpy ( &GetStringVars_Parms.inDesc, &inDesc, 0x10 );

	pFnGetStringVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringVars, &GetStringVars_Parms, NULL );

	pFnGetStringVars->FunctionFlags |= 0x400;

	if ( strVars )
		memcpy ( strVars, &GetStringVars_Parms.strVars, 0x10 );
};

// Function Engine.SequenceOp.GetFloatVars
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 inDesc                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct TArray<float>           floatVars                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USequenceOp::GetFloatVars ( struct FString inDesc, struct TArray<float>* floatVars )
{
	static UFunction* pFnGetFloatVars = NULL;

	if ( ! pFnGetFloatVars )
		pFnGetFloatVars = (UFunction*) UObject::GObjObjects()->Data[ 8947 ];

	USequenceOp_execGetFloatVars_Parms GetFloatVars_Parms;
	memcpy ( &GetFloatVars_Parms.inDesc, &inDesc, 0x10 );

	pFnGetFloatVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFloatVars, &GetFloatVars_Parms, NULL );

	pFnGetFloatVars->FunctionFlags |= 0x400;

	if ( floatVars )
		memcpy ( floatVars, &GetFloatVars_Parms.floatVars, 0x10 );
};

// Function Engine.SequenceOp.GetIntVars
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 inDesc                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct TArray<int>             intVars                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USequenceOp::GetIntVars ( struct FString inDesc, struct TArray<int>* intVars )
{
	static UFunction* pFnGetIntVars = NULL;

	if ( ! pFnGetIntVars )
		pFnGetIntVars = (UFunction*) UObject::GObjObjects()->Data[ 8943 ];

	USequenceOp_execGetIntVars_Parms GetIntVars_Parms;
	memcpy ( &GetIntVars_Parms.inDesc, &inDesc, 0x10 );

	pFnGetIntVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetIntVars, &GetIntVars_Parms, NULL );

	pFnGetIntVars->FunctionFlags |= 0x400;

	if ( intVars )
		memcpy ( intVars, &GetIntVars_Parms.intVars, 0x10 );
};

// Function Engine.SequenceOp.LinkedVariables
// [0x00424405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  VarClass                       ( CPF_Parm )
// struct FString                 inDesc                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// class USequenceVariable*       OutVariable                    ( CPF_Parm | CPF_OutParm )

void USequenceOp::LinkedVariables ( class UClass* VarClass, struct FString inDesc, class USequenceVariable** OutVariable )
{
	static UFunction* pFnLinkedVariables = NULL;

	if ( ! pFnLinkedVariables )
		pFnLinkedVariables = (UFunction*) UObject::GObjObjects()->Data[ 8939 ];

	USequenceOp_execLinkedVariables_Parms LinkedVariables_Parms;
	LinkedVariables_Parms.VarClass = VarClass;
	memcpy ( &LinkedVariables_Parms.inDesc, &inDesc, 0x10 );

	pFnLinkedVariables->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLinkedVariables, &LinkedVariables_Parms, NULL );

	pFnLinkedVariables->FunctionFlags |= 0x400;

	if ( OutVariable )
		*OutVariable = LinkedVariables_Parms.OutVariable;
};

// Function Engine.SequenceOp.GetBoolVars
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 inDesc                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct TArray<unsigned char>   boolVars                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USequenceOp::GetBoolVars ( struct FString inDesc, struct TArray<unsigned char>* boolVars )
{
	static UFunction* pFnGetBoolVars = NULL;

	if ( ! pFnGetBoolVars )
		pFnGetBoolVars = (UFunction*) UObject::GObjObjects()->Data[ 8935 ];

	USequenceOp_execGetBoolVars_Parms GetBoolVars_Parms;
	memcpy ( &GetBoolVars_Parms.inDesc, &inDesc, 0x10 );

	pFnGetBoolVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoolVars, &GetBoolVars_Parms, NULL );

	pFnGetBoolVars->FunctionFlags |= 0x400;

	if ( boolVars )
		memcpy ( boolVars, &GetBoolVars_Parms.boolVars, 0x10 );
};

// Function Engine.SequenceOp.GetInterpDataVars
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 inDesc                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct TArray<class UInterpData*> outIData                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USequenceOp::GetInterpDataVars ( struct FString inDesc, struct TArray<class UInterpData*>* outIData )
{
	static UFunction* pFnGetInterpDataVars = NULL;

	if ( ! pFnGetInterpDataVars )
		pFnGetInterpDataVars = (UFunction*) UObject::GObjObjects()->Data[ 8931 ];

	USequenceOp_execGetInterpDataVars_Parms GetInterpDataVars_Parms;
	memcpy ( &GetInterpDataVars_Parms.inDesc, &inDesc, 0x10 );

	pFnGetInterpDataVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInterpDataVars, &GetInterpDataVars_Parms, NULL );

	pFnGetInterpDataVars->FunctionFlags |= 0x400;

	if ( outIData )
		memcpy ( outIData, &GetInterpDataVars_Parms.outIData, 0x10 );
};

// Function Engine.SequenceOp.GetObjectVars
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 inDesc                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct TArray<class UObject*>  objVars                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USequenceOp::GetObjectVars ( struct FString inDesc, struct TArray<class UObject*>* objVars )
{
	static UFunction* pFnGetObjectVars = NULL;

	if ( ! pFnGetObjectVars )
		pFnGetObjectVars = (UFunction*) UObject::GObjObjects()->Data[ 7114 ];

	USequenceOp_execGetObjectVars_Parms GetObjectVars_Parms;
	memcpy ( &GetObjectVars_Parms.inDesc, &inDesc, 0x10 );

	pFnGetObjectVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetObjectVars, &GetObjectVars_Parms, NULL );

	pFnGetObjectVars->FunctionFlags |= 0x400;

	if ( objVars )
		memcpy ( objVars, &GetObjectVars_Parms.objVars, 0x10 );
};

// Function Engine.SequenceOp.GetLinkedObjects
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  ObjectType                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )
// struct TArray<class USequenceObject*> out_Objects                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USequenceOp::GetLinkedObjects ( class UClass* ObjectType, unsigned long bRecurse, struct TArray<class USequenceObject*>* out_Objects )
{
	static UFunction* pFnGetLinkedObjects = NULL;

	if ( ! pFnGetLinkedObjects )
		pFnGetLinkedObjects = (UFunction*) UObject::GObjObjects()->Data[ 8923 ];

	USequenceOp_execGetLinkedObjects_Parms GetLinkedObjects_Parms;
	GetLinkedObjects_Parms.ObjectType = ObjectType;
	GetLinkedObjects_Parms.bRecurse = bRecurse;

	pFnGetLinkedObjects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLinkedObjects, &GetLinkedObjects_Parms, NULL );

	pFnGetLinkedObjects->FunctionFlags |= 0x400;

	if ( out_Objects )
		memcpy ( out_Objects, &GetLinkedObjects_Parms.out_Objects, 0x10 );
};

// Function Engine.SequenceOp.HasLinkedOps
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bConsiderInputLinks            ( CPF_OptionalParm | CPF_Parm )

bool USequenceOp::HasLinkedOps ( unsigned long bConsiderInputLinks )
{
	static UFunction* pFnHasLinkedOps = NULL;

	if ( ! pFnHasLinkedOps )
		pFnHasLinkedOps = (UFunction*) UObject::GObjObjects()->Data[ 8920 ];

	USequenceOp_execHasLinkedOps_Parms HasLinkedOps_Parms;
	HasLinkedOps_Parms.bConsiderInputLinks = bConsiderInputLinks;

	pFnHasLinkedOps->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasLinkedOps, &HasLinkedOps_Parms, NULL );

	pFnHasLinkedOps->FunctionFlags |= 0x400;

	return HasLinkedOps_Parms.ReturnValue;
};

// Function Engine.Sequence.InitializeDelayedActiveOpPostLoadGame
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            i_IndexOfActiveOp              ( CPF_Parm )
// struct FActivateOp             i_newActiveOp                  ( CPF_Parm )

void USequence::InitializeDelayedActiveOpPostLoadGame ( int i_IndexOfActiveOp, struct FActivateOp i_newActiveOp )
{
	static UFunction* pFnInitializeDelayedActiveOpPostLoadGame = NULL;

	if ( ! pFnInitializeDelayedActiveOpPostLoadGame )
		pFnInitializeDelayedActiveOpPostLoadGame = (UFunction*) UObject::GObjObjects()->Data[ 18827 ];

	USequence_execInitializeDelayedActiveOpPostLoadGame_Parms InitializeDelayedActiveOpPostLoadGame_Parms;
	InitializeDelayedActiveOpPostLoadGame_Parms.i_IndexOfActiveOp = i_IndexOfActiveOp;
	memcpy ( &InitializeDelayedActiveOpPostLoadGame_Parms.i_newActiveOp, &i_newActiveOp, 0x18 );

	pFnInitializeDelayedActiveOpPostLoadGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeDelayedActiveOpPostLoadGame, &InitializeDelayedActiveOpPostLoadGame_Parms, NULL );

	pFnInitializeDelayedActiveOpPostLoadGame->FunctionFlags |= 0x400;
};

// Function Engine.Sequence.InitializeInternalArrayPostLoadGame
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct TArray<int>             i_ArrayOfIndexes               ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  i_arrayType                    ( CPF_Parm )

void USequence::InitializeInternalArrayPostLoadGame ( struct TArray<int> i_ArrayOfIndexes, unsigned char i_arrayType )
{
	static UFunction* pFnInitializeInternalArrayPostLoadGame = NULL;

	if ( ! pFnInitializeInternalArrayPostLoadGame )
		pFnInitializeInternalArrayPostLoadGame = (UFunction*) UObject::GObjObjects()->Data[ 18823 ];

	USequence_execInitializeInternalArrayPostLoadGame_Parms InitializeInternalArrayPostLoadGame_Parms;
	memcpy ( &InitializeInternalArrayPostLoadGame_Parms.i_ArrayOfIndexes, &i_ArrayOfIndexes, 0x10 );
	InitializeInternalArrayPostLoadGame_Parms.i_arrayType = i_arrayType;

	pFnInitializeInternalArrayPostLoadGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeInternalArrayPostLoadGame, &InitializeInternalArrayPostLoadGame_Parms, NULL );

	pFnInitializeInternalArrayPostLoadGame->FunctionFlags |= 0x400;
};

// Function Engine.Sequence.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInEnabled                     ( CPF_Parm )

void USequence::SetEnabled ( unsigned long bInEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 18821 ];

	USequence_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bInEnabled = bInEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.Sequence.Reset
// [0x00020002] 
// Parameters infos:

void USequence::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 18818 ];

	USequence_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Sequence.FindSeqObjectsByName
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 SeqObjName                     ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bCheckComment                  ( CPF_Parm )
// unsigned long                  bRecursive                     ( CPF_OptionalParm | CPF_Parm )
// struct TArray<class USequenceObject*> OutputObjects                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USequence::FindSeqObjectsByName ( struct FString SeqObjName, unsigned long bCheckComment, unsigned long bRecursive, struct TArray<class USequenceObject*>* OutputObjects )
{
	static UFunction* pFnFindSeqObjectsByName = NULL;

	if ( ! pFnFindSeqObjectsByName )
		pFnFindSeqObjectsByName = (UFunction*) UObject::GObjObjects()->Data[ 18812 ];

	USequence_execFindSeqObjectsByName_Parms FindSeqObjectsByName_Parms;
	memcpy ( &FindSeqObjectsByName_Parms.SeqObjName, &SeqObjName, 0x10 );
	FindSeqObjectsByName_Parms.bCheckComment = bCheckComment;
	FindSeqObjectsByName_Parms.bRecursive = bRecursive;

	pFnFindSeqObjectsByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSeqObjectsByName, &FindSeqObjectsByName_Parms, NULL );

	pFnFindSeqObjectsByName->FunctionFlags |= 0x400;

	if ( OutputObjects )
		memcpy ( OutputObjects, &FindSeqObjectsByName_Parms.OutputObjects, 0x10 );
};

// Function Engine.Sequence.FindSeqObjectsByClass
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  DesiredClass                   ( CPF_Parm )
// unsigned long                  bRecursive                     ( CPF_Parm )
// struct TArray<class USequenceObject*> OutputObjects                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USequence::FindSeqObjectsByClass ( class UClass* DesiredClass, unsigned long bRecursive, struct TArray<class USequenceObject*>* OutputObjects )
{
	static UFunction* pFnFindSeqObjectsByClass = NULL;

	if ( ! pFnFindSeqObjectsByClass )
		pFnFindSeqObjectsByClass = (UFunction*) UObject::GObjObjects()->Data[ 7043 ];

	USequence_execFindSeqObjectsByClass_Parms FindSeqObjectsByClass_Parms;
	FindSeqObjectsByClass_Parms.DesiredClass = DesiredClass;
	FindSeqObjectsByClass_Parms.bRecursive = bRecursive;

	pFnFindSeqObjectsByClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSeqObjectsByClass, &FindSeqObjectsByClass_Parms, NULL );

	pFnFindSeqObjectsByClass->FunctionFlags |= 0x400;

	if ( OutputObjects )
		memcpy ( OutputObjects, &FindSeqObjectsByClass_Parms.OutputObjects, 0x10 );
};

// Function Engine.PrefabSequence.GetOwnerPrefab
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APrefabInstance*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class APrefabInstance* UPrefabSequence::GetOwnerPrefab ( )
{
	static UFunction* pFnGetOwnerPrefab = NULL;

	if ( ! pFnGetOwnerPrefab )
		pFnGetOwnerPrefab = (UFunction*) UObject::GObjObjects()->Data[ 28588 ];

	UPrefabSequence_execGetOwnerPrefab_Parms GetOwnerPrefab_Parms;

	pFnGetOwnerPrefab->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwnerPrefab, &GetOwnerPrefab_Parms, NULL );

	pFnGetOwnerPrefab->FunctionFlags |= 0x400;

	return GetOwnerPrefab_Parms.ReturnValue;
};

// Function Engine.PrefabSequence.SetOwnerPrefab
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APrefabInstance*         InOwner                        ( CPF_Parm )

void UPrefabSequence::SetOwnerPrefab ( class APrefabInstance* InOwner )
{
	static UFunction* pFnSetOwnerPrefab = NULL;

	if ( ! pFnSetOwnerPrefab )
		pFnSetOwnerPrefab = (UFunction*) UObject::GObjObjects()->Data[ 28586 ];

	UPrefabSequence_execSetOwnerPrefab_Parms SetOwnerPrefab_Parms;
	SetOwnerPrefab_Parms.InOwner = InOwner;

	pFnSetOwnerPrefab->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOwnerPrefab, &SetOwnerPrefab_Parms, NULL );

	pFnSetOwnerPrefab->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_ActivateRemoteEvent.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ActivateRemoteEvent::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29428 ];

	USeqAct_ActivateRemoteEvent_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_CameraFade.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_CameraFade::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29503 ];

	USeqAct_CameraFade_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_CameraLookAt.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_CameraLookAt::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29510 ];

	USeqAct_CameraLookAt_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_CameraShake.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_CameraShake::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29530 ];

	USeqAct_CameraShake_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_CauseDamage.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_CauseDamage::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29538 ];

	USeqAct_CauseDamage_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ChangeCollision.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ChangeCollision::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 7141 ];

	USeqAct_ChangeCollision_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ConvertToString.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ConvertToString::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29552 ];

	USeqAct_ConvertToString_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_CrossFadeMusicTracks.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_CrossFadeMusicTracks::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29559 ];

	USeqAct_CrossFadeMusicTracks_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_CrossFadeMusicTracks.StopAllMusicManagerSounds
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void USeqAct_CrossFadeMusicTracks::StopAllMusicManagerSounds ( )
{
	static UFunction* pFnStopAllMusicManagerSounds = NULL;

	if ( ! pFnStopAllMusicManagerSounds )
		pFnStopAllMusicManagerSounds = (UFunction*) UObject::GObjObjects()->Data[ 29558 ];

	USeqAct_CrossFadeMusicTracks_execStopAllMusicManagerSounds_Parms StopAllMusicManagerSounds_Parms;

	pFnStopAllMusicManagerSounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAllMusicManagerSounds, &StopAllMusicManagerSounds_Parms, NULL );

	pFnStopAllMusicManagerSounds->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_CrossFadeMusicTracks.CrossFadeTrack
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMusicTrackStruct       TrackToPlay                    ( CPF_Const | CPF_Parm | CPF_OutParm )

void USeqAct_CrossFadeMusicTracks::CrossFadeTrack ( struct FMusicTrackStruct* TrackToPlay )
{
	static UFunction* pFnCrossFadeTrack = NULL;

	if ( ! pFnCrossFadeTrack )
		pFnCrossFadeTrack = (UFunction*) UObject::GObjObjects()->Data[ 11668 ];

	USeqAct_CrossFadeMusicTracks_execCrossFadeTrack_Parms CrossFadeTrack_Parms;

	pFnCrossFadeTrack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCrossFadeTrack, &CrossFadeTrack_Parms, NULL );

	pFnCrossFadeTrack->FunctionFlags |= 0x400;

	if ( TrackToPlay )
		memcpy ( TrackToPlay, &CrossFadeTrack_Parms.TrackToPlay, 0x24 );
};

// Function Engine.SeqAct_DrawText.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_DrawText::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29589 ];

	USeqAct_DrawText_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_Gate.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_Gate::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 29602 ];

	USeqAct_Gate_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_GetLocationAndRotation.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_GetLocationAndRotation::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29609 ];

	USeqAct_GetLocationAndRotation_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_GetVelocity.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_GetVelocity::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29619 ];

	USeqAct_GetVelocity_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_IsInObjectList.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_IsInObjectList::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 29701 ];

	USeqAct_IsInObjectList_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_Latent.Update
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

bool USeqAct_Latent::eventUpdate ( float DeltaTime )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 29437 ];

	USeqAct_Latent_eventUpdate_Parms Update_Parms;
	Update_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );

	return Update_Parms.ReturnValue;
};

// Function Engine.SeqAct_Latent.AbortFor
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  latentActor                    ( CPF_Parm )
// unsigned long                  bCancel                        ( CPF_OptionalParm | CPF_Parm )

void USeqAct_Latent::AbortFor ( class AActor* latentActor, unsigned long bCancel )
{
	static UFunction* pFnAbortFor = NULL;

	if ( ! pFnAbortFor )
		pFnAbortFor = (UFunction*) UObject::GObjObjects()->Data[ 29434 ];

	USeqAct_Latent_execAbortFor_Parms AbortFor_Parms;
	AbortFor_Parms.latentActor = latentActor;
	AbortFor_Parms.bCancel = bCancel;

	pFnAbortFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAbortFor, &AbortFor_Parms, NULL );

	pFnAbortFor->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_AIMoveToActor.PickDestination
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Requestor                      ( CPF_Parm )

class AActor* USeqAct_AIMoveToActor::PickDestination ( class AActor* Requestor )
{
	static UFunction* pFnPickDestination = NULL;

	if ( ! pFnPickDestination )
		pFnPickDestination = (UFunction*) UObject::GObjObjects()->Data[ 12046 ];

	USeqAct_AIMoveToActor_execPickDestination_Parms PickDestination_Parms;
	PickDestination_Parms.Requestor = Requestor;

	this->ProcessEvent ( pFnPickDestination, &PickDestination_Parms, NULL );

	return PickDestination_Parms.ReturnValue;
};

// Function Engine.SeqAct_AIMoveToActor.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_AIMoveToActor::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29477 ];

	USeqAct_AIMoveToActor_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ActorFactory.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ActorFactory::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29449 ];

	USeqAct_ActorFactory_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_Delay.ResetDelayActive
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USeqAct_Delay::ResetDelayActive ( )
{
	static UFunction* pFnResetDelayActive = NULL;

	if ( ! pFnResetDelayActive )
		pFnResetDelayActive = (UFunction*) UObject::GObjObjects()->Data[ 29568 ];

	USeqAct_Delay_execResetDelayActive_Parms ResetDelayActive_Parms;

	pFnResetDelayActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetDelayActive, &ResetDelayActive_Parms, NULL );

	pFnResetDelayActive->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_Delay.Reset
// [0x00020002] 
// Parameters infos:

void USeqAct_Delay::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 29567 ];

	USeqAct_Delay_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SeqAct_Delay.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_Delay::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 29564 ];

	USeqAct_Delay_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_Interp.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_Interp::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29663 ];

	USeqAct_Interp_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_Interp.Reset
// [0x00020002] 
// Parameters infos:

void USeqAct_Interp::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 29662 ];

	USeqAct_Interp_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SeqAct_Interp.AddPlayerToDirectorTracks
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void USeqAct_Interp::AddPlayerToDirectorTracks ( class APlayerController* PC )
{
	static UFunction* pFnAddPlayerToDirectorTracks = NULL;

	if ( ! pFnAddPlayerToDirectorTracks )
		pFnAddPlayerToDirectorTracks = (UFunction*) UObject::GObjObjects()->Data[ 10156 ];

	USeqAct_Interp_execAddPlayerToDirectorTracks_Parms AddPlayerToDirectorTracks_Parms;
	AddPlayerToDirectorTracks_Parms.PC = PC;

	pFnAddPlayerToDirectorTracks->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddPlayerToDirectorTracks, &AddPlayerToDirectorTracks_Parms, NULL );

	pFnAddPlayerToDirectorTracks->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_Interp.Stop
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USeqAct_Interp::Stop ( )
{
	static UFunction* pFnStop = NULL;

	if ( ! pFnStop )
		pFnStop = (UFunction*) UObject::GObjObjects()->Data[ 29660 ];

	USeqAct_Interp_execStop_Parms Stop_Parms;

	pFnStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStop, &Stop_Parms, NULL );

	pFnStop->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_Interp.SetPosition
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewPosition                    ( CPF_Parm )
// unsigned long                  bJump                          ( CPF_OptionalParm | CPF_Parm )

void USeqAct_Interp::SetPosition ( float NewPosition, unsigned long bJump )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = (UFunction*) UObject::GObjObjects()->Data[ 29657 ];

	USeqAct_Interp_execSetPosition_Parms SetPosition_Parms;
	SetPosition_Parms.NewPosition = NewPosition;
	SetPosition_Parms.bJump = bJump;

	pFnSetPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );

	pFnSetPosition->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_Interp.BioScrubbingDisableDOF
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPriority                      ( CPF_Parm )

void USeqAct_Interp::BioScrubbingDisableDOF ( int nPriority )
{
	static UFunction* pFnBioScrubbingDisableDOF = NULL;

	if ( ! pFnBioScrubbingDisableDOF )
		pFnBioScrubbingDisableDOF = (UFunction*) UObject::GObjObjects()->Data[ 29654 ];

	USeqAct_Interp_execBioScrubbingDisableDOF_Parms BioScrubbingDisableDOF_Parms;
	BioScrubbingDisableDOF_Parms.nPriority = nPriority;

	pFnBioScrubbingDisableDOF->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioScrubbingDisableDOF, &BioScrubbingDisableDOF_Parms, NULL );

	pFnBioScrubbingDisableDOF->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_Interp.BioScrubbingGetDOF
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UDOFAndBloomEffect*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPriority                      ( CPF_Parm )

class UDOFAndBloomEffect* USeqAct_Interp::BioScrubbingGetDOF ( int nPriority )
{
	static UFunction* pFnBioScrubbingGetDOF = NULL;

	if ( ! pFnBioScrubbingGetDOF )
		pFnBioScrubbingGetDOF = (UFunction*) UObject::GObjObjects()->Data[ 29651 ];

	USeqAct_Interp_execBioScrubbingGetDOF_Parms BioScrubbingGetDOF_Parms;
	BioScrubbingGetDOF_Parms.nPriority = nPriority;

	pFnBioScrubbingGetDOF->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioScrubbingGetDOF, &BioScrubbingGetDOF_Parms, NULL );

	pFnBioScrubbingGetDOF->FunctionFlags |= 0x400;

	return BioScrubbingGetDOF_Parms.ReturnValue;
};

// Function Engine.SeqAct_Interp.BioResetScrubbingCamera
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USeqAct_Interp::BioResetScrubbingCamera ( )
{
	static UFunction* pFnBioResetScrubbingCamera = NULL;

	if ( ! pFnBioResetScrubbingCamera )
		pFnBioResetScrubbingCamera = (UFunction*) UObject::GObjObjects()->Data[ 29650 ];

	USeqAct_Interp_execBioResetScrubbingCamera_Parms BioResetScrubbingCamera_Parms;

	pFnBioResetScrubbingCamera->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioResetScrubbingCamera, &BioResetScrubbingCamera_Parms, NULL );

	pFnBioResetScrubbingCamera->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_Interp.BioSetScrubbingCamera
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 vCamPos                        ( CPF_Parm )
// struct FRotator                rCamRot                        ( CPF_Parm )
// float                          fFov                           ( CPF_Parm )
// float                          fNearPlane                     ( CPF_Parm )
// int                            nPriority                      ( CPF_Parm )

void USeqAct_Interp::BioSetScrubbingCamera ( struct FVector vCamPos, struct FRotator rCamRot, float fFov, float fNearPlane, int nPriority )
{
	static UFunction* pFnBioSetScrubbingCamera = NULL;

	if ( ! pFnBioSetScrubbingCamera )
		pFnBioSetScrubbingCamera = (UFunction*) UObject::GObjObjects()->Data[ 29644 ];

	USeqAct_Interp_execBioSetScrubbingCamera_Parms BioSetScrubbingCamera_Parms;
	memcpy ( &BioSetScrubbingCamera_Parms.vCamPos, &vCamPos, 0xC );
	memcpy ( &BioSetScrubbingCamera_Parms.rCamRot, &rCamRot, 0xC );
	BioSetScrubbingCamera_Parms.fFov = fFov;
	BioSetScrubbingCamera_Parms.fNearPlane = fNearPlane;
	BioSetScrubbingCamera_Parms.nPriority = nPriority;

	pFnBioSetScrubbingCamera->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioSetScrubbingCamera, &BioSetScrubbingCamera_Parms, NULL );

	pFnBioSetScrubbingCamera->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_PlaySound.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_PlaySound::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29801 ];

	USeqAct_PlaySound_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_StreamInTextures.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_StreamInTextures::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29951 ];

	USeqAct_StreamInTextures_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_StreamInTextures.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_StreamInTextures::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 29948 ];

	USeqAct_StreamInTextures_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_Log.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_Log::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29726 ];

	USeqAct_Log_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_Log.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_Log::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 29723 ];

	USeqAct_Log_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_ModifyHealth.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ModifyHealth::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29736 ];

	USeqAct_ModifyHealth_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ParticleEventGenerator.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ParticleEventGenerator::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29759 ];

	USeqAct_ParticleEventGenerator_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_PlayCameraAnim.PreVersionUpdated
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            OldVersion                     ( CPF_Parm )
// int                            NewVersion                     ( CPF_Parm )

void USeqAct_PlayCameraAnim::eventPreVersionUpdated ( int OldVersion, int NewVersion )
{
	static UFunction* pFnPreVersionUpdated = NULL;

	if ( ! pFnPreVersionUpdated )
		pFnPreVersionUpdated = (UFunction*) UObject::GObjObjects()->Data[ 29771 ];

	USeqAct_PlayCameraAnim_eventPreVersionUpdated_Parms PreVersionUpdated_Parms;
	PreVersionUpdated_Parms.OldVersion = OldVersion;
	PreVersionUpdated_Parms.NewVersion = NewVersion;

	this->ProcessEvent ( pFnPreVersionUpdated, &PreVersionUpdated_Parms, NULL );
};

// Function Engine.SeqAct_PlayCameraAnim.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_PlayCameraAnim::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29769 ];

	USeqAct_PlayCameraAnim_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetCameraTarget.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetCameraTarget::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29837 ];

	USeqAct_SetCameraTarget_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetMatInstVectorParam.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetMatInstVectorParam::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29884 ];

	USeqAct_SetMatInstVectorParam_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetSequenceVariable.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_SetSequenceVariable::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 29421 ];

	USeqAct_SetSequenceVariable_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetBool.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetBool::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29833 ];

	USeqAct_SetBool_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetFloat.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetFloat::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29862 ];

	USeqAct_SetFloat_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetInt.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetInt::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29867 ];

	USeqAct_SetInt_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetLocation.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetLocation::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29871 ];

	USeqAct_SetLocation_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetObject.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetObject::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29901 ];

	USeqAct_SetObject_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetString.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetString::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29925 ];

	USeqAct_SetString_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_Switch.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_Switch::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 29819 ];

	USeqAct_Switch_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_Timer.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_Timer::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 29968 ];

	USeqAct_Timer_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_Toggle.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_Toggle::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 29973 ];

	USeqAct_Toggle_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_ToggleHUD.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ToggleHUD::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 30005 ];

	USeqAct_ToggleHUD_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ToggleHUD.DoActivatedWork
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USeqAct_ToggleHUD::DoActivatedWork ( )
{
	static UFunction* pFnDoActivatedWork = NULL;

	if ( ! pFnDoActivatedWork )
		pFnDoActivatedWork = (UFunction*) UObject::GObjObjects()->Data[ 30004 ];

	USeqAct_ToggleHUD_execDoActivatedWork_Parms DoActivatedWork_Parms;

	pFnDoActivatedWork->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoActivatedWork, &DoActivatedWork_Parms, NULL );

	pFnDoActivatedWork->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_ToggleHUD.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_ToggleHUD::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 30001 ];

	USeqAct_ToggleHUD_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_Trace.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_Trace::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 30013 ];

	USeqAct_Trace_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SequenceCondition.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USequenceCondition::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 30034 ];

	USequenceCondition_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqCond_GetServerType.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqCond_GetServerType::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 30045 ];

	USeqCond_GetServerType_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqCond_IsLoggedIn.CheckLogins
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USeqCond_IsLoggedIn::eventCheckLogins ( )
{
	static UFunction* pFnCheckLogins = NULL;

	if ( ! pFnCheckLogins )
		pFnCheckLogins = (UFunction*) UObject::GObjObjects()->Data[ 30053 ];

	USeqCond_IsLoggedIn_eventCheckLogins_Parms CheckLogins_Parms;

	this->ProcessEvent ( pFnCheckLogins, &CheckLogins_Parms, NULL );

	return CheckLogins_Parms.ReturnValue;
};

// Function Engine.SeqCond_SwitchBase.RemoveValueEntry
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            RemoveIndex                    ( CPF_Parm )

void USeqCond_SwitchBase::eventRemoveValueEntry ( int RemoveIndex )
{
	static UFunction* pFnRemoveValueEntry = NULL;

	if ( ! pFnRemoveValueEntry )
		pFnRemoveValueEntry = (UFunction*) UObject::GObjObjects()->Data[ 30066 ];

	USeqCond_SwitchBase_eventRemoveValueEntry_Parms RemoveValueEntry_Parms;
	RemoveValueEntry_Parms.RemoveIndex = RemoveIndex;

	this->ProcessEvent ( pFnRemoveValueEntry, &RemoveValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchBase.InsertValueEntry
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            InsertIndex                    ( CPF_Parm )

void USeqCond_SwitchBase::eventInsertValueEntry ( int InsertIndex )
{
	static UFunction* pFnInsertValueEntry = NULL;

	if ( ! pFnInsertValueEntry )
		pFnInsertValueEntry = (UFunction*) UObject::GObjObjects()->Data[ 30064 ];

	USeqCond_SwitchBase_eventInsertValueEntry_Parms InsertValueEntry_Parms;
	InsertValueEntry_Parms.InsertIndex = InsertIndex;

	this->ProcessEvent ( pFnInsertValueEntry, &InsertValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchBase.IsFallThruEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ValueIndex                     ( CPF_Parm )

bool USeqCond_SwitchBase::eventIsFallThruEnabled ( int ValueIndex )
{
	static UFunction* pFnIsFallThruEnabled = NULL;

	if ( ! pFnIsFallThruEnabled )
		pFnIsFallThruEnabled = (UFunction*) UObject::GObjObjects()->Data[ 30061 ];

	USeqCond_SwitchBase_eventIsFallThruEnabled_Parms IsFallThruEnabled_Parms;
	IsFallThruEnabled_Parms.ValueIndex = ValueIndex;

	this->ProcessEvent ( pFnIsFallThruEnabled, &IsFallThruEnabled_Parms, NULL );

	return IsFallThruEnabled_Parms.ReturnValue;
};

// Function Engine.SeqCond_SwitchBase.VerifyDefaultCaseValue
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USeqCond_SwitchBase::eventVerifyDefaultCaseValue ( )
{
	static UFunction* pFnVerifyDefaultCaseValue = NULL;

	if ( ! pFnVerifyDefaultCaseValue )
		pFnVerifyDefaultCaseValue = (UFunction*) UObject::GObjObjects()->Data[ 30060 ];

	USeqCond_SwitchBase_eventVerifyDefaultCaseValue_Parms VerifyDefaultCaseValue_Parms;

	this->ProcessEvent ( pFnVerifyDefaultCaseValue, &VerifyDefaultCaseValue_Parms, NULL );
};

// Function Engine.SeqCond_SwitchClass.RemoveValueEntry
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            RemoveIndex                    ( CPF_Parm )

void USeqCond_SwitchClass::eventRemoveValueEntry ( int RemoveIndex )
{
	static UFunction* pFnRemoveValueEntry = NULL;

	if ( ! pFnRemoveValueEntry )
		pFnRemoveValueEntry = (UFunction*) UObject::GObjObjects()->Data[ 30079 ];

	USeqCond_SwitchClass_eventRemoveValueEntry_Parms RemoveValueEntry_Parms;
	RemoveValueEntry_Parms.RemoveIndex = RemoveIndex;

	this->ProcessEvent ( pFnRemoveValueEntry, &RemoveValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchClass.InsertValueEntry
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            InsertIndex                    ( CPF_Parm )

void USeqCond_SwitchClass::eventInsertValueEntry ( int InsertIndex )
{
	static UFunction* pFnInsertValueEntry = NULL;

	if ( ! pFnInsertValueEntry )
		pFnInsertValueEntry = (UFunction*) UObject::GObjObjects()->Data[ 30077 ];

	USeqCond_SwitchClass_eventInsertValueEntry_Parms InsertValueEntry_Parms;
	InsertValueEntry_Parms.InsertIndex = InsertIndex;

	this->ProcessEvent ( pFnInsertValueEntry, &InsertValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchClass.IsFallThruEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ValueIndex                     ( CPF_Parm )

bool USeqCond_SwitchClass::eventIsFallThruEnabled ( int ValueIndex )
{
	static UFunction* pFnIsFallThruEnabled = NULL;

	if ( ! pFnIsFallThruEnabled )
		pFnIsFallThruEnabled = (UFunction*) UObject::GObjObjects()->Data[ 30074 ];

	USeqCond_SwitchClass_eventIsFallThruEnabled_Parms IsFallThruEnabled_Parms;
	IsFallThruEnabled_Parms.ValueIndex = ValueIndex;

	this->ProcessEvent ( pFnIsFallThruEnabled, &IsFallThruEnabled_Parms, NULL );

	return IsFallThruEnabled_Parms.ReturnValue;
};

// Function Engine.SeqCond_SwitchClass.VerifyDefaultCaseValue
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqCond_SwitchClass::eventVerifyDefaultCaseValue ( )
{
	static UFunction* pFnVerifyDefaultCaseValue = NULL;

	if ( ! pFnVerifyDefaultCaseValue )
		pFnVerifyDefaultCaseValue = (UFunction*) UObject::GObjObjects()->Data[ 30073 ];

	USeqCond_SwitchClass_eventVerifyDefaultCaseValue_Parms VerifyDefaultCaseValue_Parms;

	this->ProcessEvent ( pFnVerifyDefaultCaseValue, &VerifyDefaultCaseValue_Parms, NULL );
};

// Function Engine.SeqCond_SwitchObject.RemoveValueEntry
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            RemoveIndex                    ( CPF_Parm )

void USeqCond_SwitchObject::eventRemoveValueEntry ( int RemoveIndex )
{
	static UFunction* pFnRemoveValueEntry = NULL;

	if ( ! pFnRemoveValueEntry )
		pFnRemoveValueEntry = (UFunction*) UObject::GObjObjects()->Data[ 30094 ];

	USeqCond_SwitchObject_eventRemoveValueEntry_Parms RemoveValueEntry_Parms;
	RemoveValueEntry_Parms.RemoveIndex = RemoveIndex;

	this->ProcessEvent ( pFnRemoveValueEntry, &RemoveValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchObject.InsertValueEntry
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            InsertIndex                    ( CPF_Parm )

void USeqCond_SwitchObject::eventInsertValueEntry ( int InsertIndex )
{
	static UFunction* pFnInsertValueEntry = NULL;

	if ( ! pFnInsertValueEntry )
		pFnInsertValueEntry = (UFunction*) UObject::GObjObjects()->Data[ 30092 ];

	USeqCond_SwitchObject_eventInsertValueEntry_Parms InsertValueEntry_Parms;
	InsertValueEntry_Parms.InsertIndex = InsertIndex;

	this->ProcessEvent ( pFnInsertValueEntry, &InsertValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchObject.IsFallThruEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ValueIndex                     ( CPF_Parm )

bool USeqCond_SwitchObject::eventIsFallThruEnabled ( int ValueIndex )
{
	static UFunction* pFnIsFallThruEnabled = NULL;

	if ( ! pFnIsFallThruEnabled )
		pFnIsFallThruEnabled = (UFunction*) UObject::GObjObjects()->Data[ 30089 ];

	USeqCond_SwitchObject_eventIsFallThruEnabled_Parms IsFallThruEnabled_Parms;
	IsFallThruEnabled_Parms.ValueIndex = ValueIndex;

	this->ProcessEvent ( pFnIsFallThruEnabled, &IsFallThruEnabled_Parms, NULL );

	return IsFallThruEnabled_Parms.ReturnValue;
};

// Function Engine.SeqCond_SwitchObject.VerifyDefaultCaseValue
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqCond_SwitchObject::eventVerifyDefaultCaseValue ( )
{
	static UFunction* pFnVerifyDefaultCaseValue = NULL;

	if ( ! pFnVerifyDefaultCaseValue )
		pFnVerifyDefaultCaseValue = (UFunction*) UObject::GObjObjects()->Data[ 30087 ];

	USeqCond_SwitchObject_eventVerifyDefaultCaseValue_Parms VerifyDefaultCaseValue_Parms;

	this->ProcessEvent ( pFnVerifyDefaultCaseValue, &VerifyDefaultCaseValue_Parms, NULL );
};

// Function Engine.SeqCond_SwitchPlatform.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqCond_SwitchPlatform::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 30097 ];

	USeqCond_SwitchPlatform_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SequenceEvent.Toggled
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USequenceEvent::eventToggled ( )
{
	static UFunction* pFnToggled = NULL;

	if ( ! pFnToggled )
		pFnToggled = (UFunction*) UObject::GObjObjects()->Data[ 15118 ];

	USequenceEvent_eventToggled_Parms Toggled_Parms;

	this->ProcessEvent ( pFnToggled, &Toggled_Parms, NULL );
};

// Function Engine.SequenceEvent.Reset
// [0x00020002] 
// Parameters infos:

void USequenceEvent::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 15115 ];

	USequenceEvent_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SequenceEvent.PassesWhoTriggers
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  InInstigator                   ( CPF_Parm )

bool USequenceEvent::PassesWhoTriggers ( class AActor* InInstigator )
{
	static UFunction* pFnPassesWhoTriggers = NULL;

	if ( ! pFnPassesWhoTriggers )
		pFnPassesWhoTriggers = (UFunction*) UObject::GObjObjects()->Data[ 15112 ];

	USequenceEvent_execPassesWhoTriggers_Parms PassesWhoTriggers_Parms;
	PassesWhoTriggers_Parms.InInstigator = InInstigator;

	pFnPassesWhoTriggers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPassesWhoTriggers, &PassesWhoTriggers_Parms, NULL );

	pFnPassesWhoTriggers->FunctionFlags |= 0x400;

	return PassesWhoTriggers_Parms.ReturnValue;
};

// Function Engine.SequenceEvent.CheckActivate
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  InOriginator                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPushTop                       ( CPF_OptionalParm | CPF_Parm )
// struct TArray<int>             ActivateIndices                ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USequenceEvent::CheckActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest, unsigned long bPushTop, struct TArray<int>* ActivateIndices )
{
	static UFunction* pFnCheckActivate = NULL;

	if ( ! pFnCheckActivate )
		pFnCheckActivate = (UFunction*) UObject::GObjObjects()->Data[ 7044 ];

	USequenceEvent_execCheckActivate_Parms CheckActivate_Parms;
	CheckActivate_Parms.InOriginator = InOriginator;
	CheckActivate_Parms.InInstigator = InInstigator;
	CheckActivate_Parms.bTest = bTest;
	CheckActivate_Parms.bPushTop = bPushTop;

	pFnCheckActivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckActivate, &CheckActivate_Parms, NULL );

	pFnCheckActivate->FunctionFlags |= 0x400;

	if ( ActivateIndices )
		memcpy ( ActivateIndices, &CheckActivate_Parms.ActivateIndices, 0x10 );

	return CheckActivate_Parms.ReturnValue;
};

// Function Engine.SequenceEvent.RegisterEvent
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USequenceEvent::eventRegisterEvent ( )
{
	static UFunction* pFnRegisterEvent = NULL;

	if ( ! pFnRegisterEvent )
		pFnRegisterEvent = (UFunction*) UObject::GObjObjects()->Data[ 15105 ];

	USequenceEvent_eventRegisterEvent_Parms RegisterEvent_Parms;

	this->ProcessEvent ( pFnRegisterEvent, &RegisterEvent_Parms, NULL );
};

// Function Engine.BioSeqEvt_ProximityAlarm.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioSeqEvt_ProximityAlarm::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 15126 ];

	UBioSeqEvt_ProximityAlarm_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqEvent_LevelLoaded.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqEvent_LevelLoaded::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 30108 ];

	USeqEvent_LevelLoaded_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqEvent_Mover.NotifyFinishedOpen
// [0x00020002] 
// Parameters infos:

void USeqEvent_Mover::NotifyFinishedOpen ( )
{
	static UFunction* pFnNotifyFinishedOpen = NULL;

	if ( ! pFnNotifyFinishedOpen )
		pFnNotifyFinishedOpen = (UFunction*) UObject::GObjObjects()->Data[ 30139 ];

	USeqEvent_Mover_execNotifyFinishedOpen_Parms NotifyFinishedOpen_Parms;

	this->ProcessEvent ( pFnNotifyFinishedOpen, &NotifyFinishedOpen_Parms, NULL );
};

// Function Engine.SeqEvent_Mover.NotifyDetached
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void USeqEvent_Mover::NotifyDetached ( class AActor* Other )
{
	static UFunction* pFnNotifyDetached = NULL;

	if ( ! pFnNotifyDetached )
		pFnNotifyDetached = (UFunction*) UObject::GObjObjects()->Data[ 30134 ];

	USeqEvent_Mover_execNotifyDetached_Parms NotifyDetached_Parms;
	NotifyDetached_Parms.Other = Other;

	this->ProcessEvent ( pFnNotifyDetached, &NotifyDetached_Parms, NULL );
};

// Function Engine.SeqEvent_Mover.NotifyAttached
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void USeqEvent_Mover::NotifyAttached ( class AActor* Other )
{
	static UFunction* pFnNotifyAttached = NULL;

	if ( ! pFnNotifyAttached )
		pFnNotifyAttached = (UFunction*) UObject::GObjObjects()->Data[ 30130 ];

	USeqEvent_Mover_execNotifyAttached_Parms NotifyAttached_Parms;
	NotifyAttached_Parms.Other = Other;

	this->ProcessEvent ( pFnNotifyAttached, &NotifyAttached_Parms, NULL );
};

// Function Engine.SeqEvent_Mover.NotifyEncroachingOn
// [0x00020002] 
// Parameters infos:
// class AActor*                  Hit                            ( CPF_Parm )

void USeqEvent_Mover::NotifyEncroachingOn ( class AActor* Hit )
{
	static UFunction* pFnNotifyEncroachingOn = NULL;

	if ( ! pFnNotifyEncroachingOn )
		pFnNotifyEncroachingOn = (UFunction*) UObject::GObjObjects()->Data[ 30125 ];

	USeqEvent_Mover_execNotifyEncroachingOn_Parms NotifyEncroachingOn_Parms;
	NotifyEncroachingOn_Parms.Hit = Hit;

	this->ProcessEvent ( pFnNotifyEncroachingOn, &NotifyEncroachingOn_Parms, NULL );
};

// Function Engine.SeqEvent_Mover.RegisterEvent
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqEvent_Mover::eventRegisterEvent ( )
{
	static UFunction* pFnRegisterEvent = NULL;

	if ( ! pFnRegisterEvent )
		pFnRegisterEvent = (UFunction*) UObject::GObjObjects()->Data[ 30122 ];

	USeqEvent_Mover_eventRegisterEvent_Parms RegisterEvent_Parms;

	this->ProcessEvent ( pFnRegisterEvent, &RegisterEvent_Parms, NULL );
};

// Function Engine.SeqEvent_ParticleEvent.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqEvent_ParticleEvent::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 30143 ];

	USeqEvent_ParticleEvent_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqEvent_RemoteEvent.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqEvent_RemoteEvent::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 30160 ];

	USeqEvent_RemoteEvent_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqEvent_RemoteEvent.FindRemoteEvent
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class USeqEvent_RemoteEvent*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   fnEventName                    ( CPF_Parm )

class USeqEvent_RemoteEvent* USeqEvent_RemoteEvent::FindRemoteEvent ( struct FName fnEventName )
{
	static UFunction* pFnFindRemoteEvent = NULL;

	if ( ! pFnFindRemoteEvent )
		pFnFindRemoteEvent = (UFunction*) UObject::GObjObjects()->Data[ 30157 ];

	USeqEvent_RemoteEvent_execFindRemoteEvent_Parms FindRemoteEvent_Parms;
	memcpy ( &FindRemoteEvent_Parms.fnEventName, &fnEventName, 0x8 );

	pFnFindRemoteEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindRemoteEvent, &FindRemoteEvent_Parms, NULL );

	pFnFindRemoteEvent->FunctionFlags |= 0x400;

	return FindRemoteEvent_Parms.ReturnValue;
};

// Function Engine.SeqEvent_TakeDamage.Toggled
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqEvent_TakeDamage::eventToggled ( )
{
	static UFunction* pFnToggled = NULL;

	if ( ! pFnToggled )
		pFnToggled = (UFunction*) UObject::GObjObjects()->Data[ 30192 ];

	USeqEvent_TakeDamage_eventToggled_Parms Toggled_Parms;

	this->ProcessEvent ( pFnToggled, &Toggled_Parms, NULL );
};

// Function Engine.SeqEvent_TakeDamage.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqEvent_TakeDamage::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 30190 ];

	USeqEvent_TakeDamage_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqEvent_TakeDamage.Reset
// [0x00020002] 
// Parameters infos:

void USeqEvent_TakeDamage::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 30189 ];

	USeqEvent_TakeDamage_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SeqEvent_TakeDamage.HandleDamage
// [0x00024002] 
// Parameters infos:
// class AActor*                  InOriginator                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// class UClass*                  inDamageType                   ( CPF_Parm )
// float                          inAmount                       ( CPF_Parm )
// struct FVector                 inHitLocation                  ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void USeqEvent_TakeDamage::HandleDamage ( class AActor* InOriginator, class AActor* InInstigator, class UClass* inDamageType, float inAmount, struct FVector inHitLocation, class AActor* DamageCauser )
{
	static UFunction* pFnHandleDamage = NULL;

	if ( ! pFnHandleDamage )
		pFnHandleDamage = (UFunction*) UObject::GObjObjects()->Data[ 30175 ];

	USeqEvent_TakeDamage_execHandleDamage_Parms HandleDamage_Parms;
	HandleDamage_Parms.InOriginator = InOriginator;
	HandleDamage_Parms.InInstigator = InInstigator;
	HandleDamage_Parms.inDamageType = inDamageType;
	HandleDamage_Parms.inAmount = inAmount;
	memcpy ( &HandleDamage_Parms.inHitLocation, &inHitLocation, 0xC );
	HandleDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnHandleDamage, &HandleDamage_Parms, NULL );
};

// Function Engine.SeqEvent_TakeDamage.IsValidDamageType
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  inDamageType                   ( CPF_Parm )

bool USeqEvent_TakeDamage::IsValidDamageType ( class UClass* inDamageType )
{
	static UFunction* pFnIsValidDamageType = NULL;

	if ( ! pFnIsValidDamageType )
		pFnIsValidDamageType = (UFunction*) UObject::GObjObjects()->Data[ 30170 ];

	USeqEvent_TakeDamage_execIsValidDamageType_Parms IsValidDamageType_Parms;
	IsValidDamageType_Parms.inDamageType = inDamageType;

	this->ProcessEvent ( pFnIsValidDamageType, &IsValidDamageType_Parms, NULL );

	return IsValidDamageType_Parms.ReturnValue;
};

// Function Engine.SeqEvent_Touch.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqEvent_Touch::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 30214 ];

	USeqEvent_Touch_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqEvent_Touch.NotifyTouchingPawnDied
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void USeqEvent_Touch::NotifyTouchingPawnDied ( class APawn* P )
{
	static UFunction* pFnNotifyTouchingPawnDied = NULL;

	if ( ! pFnNotifyTouchingPawnDied )
		pFnNotifyTouchingPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 30211 ];

	USeqEvent_Touch_execNotifyTouchingPawnDied_Parms NotifyTouchingPawnDied_Parms;
	NotifyTouchingPawnDied_Parms.P = P;

	this->ProcessEvent ( pFnNotifyTouchingPawnDied, &NotifyTouchingPawnDied_Parms, NULL );
};

// Function Engine.SeqEvent_Touch.Toggled
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqEvent_Touch::eventToggled ( )
{
	static UFunction* pFnToggled = NULL;

	if ( ! pFnToggled )
		pFnToggled = (UFunction*) UObject::GObjObjects()->Data[ 30209 ];

	USeqEvent_Touch_eventToggled_Parms Toggled_Parms;

	this->ProcessEvent ( pFnToggled, &Toggled_Parms, NULL );
};

// Function Engine.SeqEvent_Touch.CheckUnTouchActivate
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  InOriginator                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )

bool USeqEvent_Touch::CheckUnTouchActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest )
{
	static UFunction* pFnCheckUnTouchActivate = NULL;

	if ( ! pFnCheckUnTouchActivate )
		pFnCheckUnTouchActivate = (UFunction*) UObject::GObjObjects()->Data[ 30204 ];

	USeqEvent_Touch_execCheckUnTouchActivate_Parms CheckUnTouchActivate_Parms;
	CheckUnTouchActivate_Parms.InOriginator = InOriginator;
	CheckUnTouchActivate_Parms.InInstigator = InInstigator;
	CheckUnTouchActivate_Parms.bTest = bTest;

	pFnCheckUnTouchActivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckUnTouchActivate, &CheckUnTouchActivate_Parms, NULL );

	pFnCheckUnTouchActivate->FunctionFlags |= 0x400;

	return CheckUnTouchActivate_Parms.ReturnValue;
};

// Function Engine.SeqEvent_Touch.CheckTouchActivate
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  InOriginator                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )

bool USeqEvent_Touch::CheckTouchActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest )
{
	static UFunction* pFnCheckTouchActivate = NULL;

	if ( ! pFnCheckTouchActivate )
		pFnCheckTouchActivate = (UFunction*) UObject::GObjObjects()->Data[ 10242 ];

	USeqEvent_Touch_execCheckTouchActivate_Parms CheckTouchActivate_Parms;
	CheckTouchActivate_Parms.InOriginator = InOriginator;
	CheckTouchActivate_Parms.InInstigator = InInstigator;
	CheckTouchActivate_Parms.bTest = bTest;

	pFnCheckTouchActivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckTouchActivate, &CheckTouchActivate_Parms, NULL );

	pFnCheckTouchActivate->FunctionFlags |= 0x400;

	return CheckTouchActivate_Parms.ReturnValue;
};

// Function Engine.SeqEvent_Used.PreVersionUpdated
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            OldVersion                     ( CPF_Parm )
// int                            NewVersion                     ( CPF_Parm )

void USeqEvent_Used::eventPreVersionUpdated ( int OldVersion, int NewVersion )
{
	static UFunction* pFnPreVersionUpdated = NULL;

	if ( ! pFnPreVersionUpdated )
		pFnPreVersionUpdated = (UFunction*) UObject::GObjObjects()->Data[ 30227 ];

	USeqEvent_Used_eventPreVersionUpdated_Parms PreVersionUpdated_Parms;
	PreVersionUpdated_Parms.OldVersion = OldVersion;
	PreVersionUpdated_Parms.NewVersion = NewVersion;

	this->ProcessEvent ( pFnPreVersionUpdated, &PreVersionUpdated_Parms, NULL );
};

// Function Engine.SeqEvent_Used.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqEvent_Used::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 30225 ];

	USeqEvent_Used_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SequenceVariable.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USequenceVariable::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 15128 ];

	USequenceVariable_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqVar_Object.SetObjectValue
// [0x00020002] 
// Parameters infos:
// class UObject*                 NewValue                       ( CPF_Parm )

void USeqVar_Object::SetObjectValue ( class UObject* NewValue )
{
	static UFunction* pFnSetObjectValue = NULL;

	if ( ! pFnSetObjectValue )
		pFnSetObjectValue = (UFunction*) UObject::GObjObjects()->Data[ 30262 ];

	USeqVar_Object_execSetObjectValue_Parms SetObjectValue_Parms;
	SetObjectValue_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnSetObjectValue, &SetObjectValue_Parms, NULL );
};

// Function Engine.SeqVar_Object.GetObjectValue
// [0x00020002] 
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UObject* USeqVar_Object::GetObjectValue ( )
{
	static UFunction* pFnGetObjectValue = NULL;

	if ( ! pFnGetObjectValue )
		pFnGetObjectValue = (UFunction*) UObject::GObjObjects()->Data[ 12053 ];

	USeqVar_Object_execGetObjectValue_Parms GetObjectValue_Parms;

	this->ProcessEvent ( pFnGetObjectValue, &GetObjectValue_Parms, NULL );

	return GetObjectValue_Parms.ReturnValue;
};

// Function Engine.SeqVar_ObjectList.SetObjectValue
// [0x00020002] 
// Parameters infos:
// class UObject*                 NewValue                       ( CPF_Parm )

void USeqVar_ObjectList::SetObjectValue ( class UObject* NewValue )
{
	static UFunction* pFnSetObjectValue = NULL;

	if ( ! pFnSetObjectValue )
		pFnSetObjectValue = (UFunction*) UObject::GObjObjects()->Data[ 30283 ];

	USeqVar_ObjectList_execSetObjectValue_Parms SetObjectValue_Parms;
	SetObjectValue_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnSetObjectValue, &SetObjectValue_Parms, NULL );
};

// Function Engine.SeqVar_ObjectList.GetObjectValue
// [0x00020002] 
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UObject* USeqVar_ObjectList::GetObjectValue ( )
{
	static UFunction* pFnGetObjectValue = NULL;

	if ( ! pFnGetObjectValue )
		pFnGetObjectValue = (UFunction*) UObject::GObjObjects()->Data[ 30281 ];

	USeqVar_ObjectList_execGetObjectValue_Parms GetObjectValue_Parms;

	this->ProcessEvent ( pFnGetObjectValue, &GetObjectValue_Parms, NULL );

	return GetObjectValue_Parms.ReturnValue;
};

// Function Engine.SeqVar_Player.GetObjectValue
// [0x00020002] 
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UObject* USeqVar_Player::GetObjectValue ( )
{
	static UFunction* pFnGetObjectValue = NULL;

	if ( ! pFnGetObjectValue )
		pFnGetObjectValue = (UFunction*) UObject::GObjObjects()->Data[ 30296 ];

	USeqVar_Player_execGetObjectValue_Parms GetObjectValue_Parms;

	this->ProcessEvent ( pFnGetObjectValue, &GetObjectValue_Parms, NULL );

	return GetObjectValue_Parms.ReturnValue;
};

// Function Engine.SeqVar_Player.UpdatePlayersList
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USeqVar_Player::UpdatePlayersList ( )
{
	static UFunction* pFnUpdatePlayersList = NULL;

	if ( ! pFnUpdatePlayersList )
		pFnUpdatePlayersList = (UFunction*) UObject::GObjObjects()->Data[ 30295 ];

	USeqVar_Player_execUpdatePlayersList_Parms UpdatePlayersList_Parms;

	pFnUpdatePlayersList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdatePlayersList, &UpdatePlayersList_Parms, NULL );

	pFnUpdatePlayersList->FunctionFlags |= 0x400;
};

// Function Engine.AmbientSoundSimpleToggleable.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AAmbientSoundSimpleToggleable_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void AAmbientSoundSimpleToggleable::ApplyCheckpointRecord ( struct AAmbientSoundSimpleToggleable_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 12518 ];

	AAmbientSoundSimpleToggleable_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.AmbientSoundSimpleToggleable.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AAmbientSoundSimpleToggleable_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void AAmbientSoundSimpleToggleable::CreateCheckpointRecord ( struct AAmbientSoundSimpleToggleable_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 12516 ];

	AAmbientSoundSimpleToggleable_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.AmbientSoundSimpleToggleable.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AAmbientSoundSimpleToggleable::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 12514 ];

	AAmbientSoundSimpleToggleable_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.AmbientSoundSimpleToggleable.StopPlaying
// [0x00020102] 
// Parameters infos:

void AAmbientSoundSimpleToggleable::StopPlaying ( )
{
	static UFunction* pFnStopPlaying = NULL;

	if ( ! pFnStopPlaying )
		pFnStopPlaying = (UFunction*) UObject::GObjObjects()->Data[ 12511 ];

	AAmbientSoundSimpleToggleable_execStopPlaying_Parms StopPlaying_Parms;

	this->ProcessEvent ( pFnStopPlaying, &StopPlaying_Parms, NULL );
};

// Function Engine.AmbientSoundSimpleToggleable.StartPlaying
// [0x00020102] 
// Parameters infos:

void AAmbientSoundSimpleToggleable::StartPlaying ( )
{
	static UFunction* pFnStartPlaying = NULL;

	if ( ! pFnStartPlaying )
		pFnStartPlaying = (UFunction*) UObject::GObjObjects()->Data[ 12507 ];

	AAmbientSoundSimpleToggleable_execStartPlaying_Parms StartPlaying_Parms;

	this->ProcessEvent ( pFnStartPlaying, &StartPlaying_Parms, NULL );
};

// Function Engine.AmbientSoundSimpleToggleable.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AAmbientSoundSimpleToggleable::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 12505 ];

	AAmbientSoundSimpleToggleable_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.AmbientSoundSimpleToggleable.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AAmbientSoundSimpleToggleable::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 12503 ];

	AAmbientSoundSimpleToggleable_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.SoundNodeWaveStreaming.GeneratePCMData
// [0x00420C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// int                            SamplesNeeded                  ( CPF_Parm )
// struct TArray<unsigned char>   Buffer                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USoundNodeWaveStreaming::eventGeneratePCMData ( int SamplesNeeded, struct TArray<unsigned char>* Buffer )
{
	static UFunction* pFnGeneratePCMData = NULL;

	if ( ! pFnGeneratePCMData )
		pFnGeneratePCMData = (UFunction*) UObject::GObjObjects()->Data[ 31042 ];

	USoundNodeWaveStreaming_eventGeneratePCMData_Parms GeneratePCMData_Parms;
	GeneratePCMData_Parms.SamplesNeeded = SamplesNeeded;

	pFnGeneratePCMData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGeneratePCMData, &GeneratePCMData_Parms, NULL );

	pFnGeneratePCMData->FunctionFlags |= 0x400;

	if ( Buffer )
		memcpy ( Buffer, &GeneratePCMData_Parms.Buffer, 0x10 );
};

// Function Engine.SoundNodeWaveStreaming.AvailableAudioBytes
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USoundNodeWaveStreaming::eventAvailableAudioBytes ( )
{
	static UFunction* pFnAvailableAudioBytes = NULL;

	if ( ! pFnAvailableAudioBytes )
		pFnAvailableAudioBytes = (UFunction*) UObject::GObjObjects()->Data[ 31040 ];

	USoundNodeWaveStreaming_eventAvailableAudioBytes_Parms AvailableAudioBytes_Parms;

	pFnAvailableAudioBytes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAvailableAudioBytes, &AvailableAudioBytes_Parms, NULL );

	pFnAvailableAudioBytes->FunctionFlags |= 0x400;

	return AvailableAudioBytes_Parms.ReturnValue;
};

// Function Engine.SoundNodeWaveStreaming.ResetAudio
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void USoundNodeWaveStreaming::eventResetAudio ( )
{
	static UFunction* pFnResetAudio = NULL;

	if ( ! pFnResetAudio )
		pFnResetAudio = (UFunction*) UObject::GObjObjects()->Data[ 31039 ];

	USoundNodeWaveStreaming_eventResetAudio_Parms ResetAudio_Parms;

	pFnResetAudio->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetAudio, &ResetAudio_Parms, NULL );

	pFnResetAudio->FunctionFlags |= 0x400;
};

// Function Engine.SoundNodeWaveStreaming.QueueAudio
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct TArray<unsigned char>   Data                           ( CPF_Parm | CPF_NeedCtorLink )

void USoundNodeWaveStreaming::eventQueueAudio ( struct TArray<unsigned char> Data )
{
	static UFunction* pFnQueueAudio = NULL;

	if ( ! pFnQueueAudio )
		pFnQueueAudio = (UFunction*) UObject::GObjObjects()->Data[ 31036 ];

	USoundNodeWaveStreaming_eventQueueAudio_Parms QueueAudio_Parms;
	memcpy ( &QueueAudio_Parms.Data, &Data, 0x10 );

	pFnQueueAudio->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnQueueAudio, &QueueAudio_Parms, NULL );

	pFnQueueAudio->FunctionFlags |= 0x400;
};

// Function Engine.Terrain.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATerrain::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 31848 ];

	ATerrain_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Terrain.CalcLayerBounds
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ATerrain::CalcLayerBounds ( )
{
	static UFunction* pFnCalcLayerBounds = NULL;

	if ( ! pFnCalcLayerBounds )
		pFnCalcLayerBounds = (UFunction*) UObject::GObjObjects()->Data[ 31847 ];

	ATerrain_execCalcLayerBounds_Parms CalcLayerBounds_Parms;

	pFnCalcLayerBounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcLayerBounds, &CalcLayerBounds_Parms, NULL );

	pFnCalcLayerBounds->FunctionFlags |= 0x400;
};

// Function Engine.TerrainLayerSetup.PostBeginPlay
// [0x00020100] 
// Parameters infos:

void UTerrainLayerSetup::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 31951 ];

	UTerrainLayerSetup_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.TerrainLayerSetup.SetMaterials
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct TArray<struct FTerrainFilteredMaterial> NewMaterials                   ( CPF_Parm | CPF_NeedCtorLink )

void UTerrainLayerSetup::SetMaterials ( struct TArray<struct FTerrainFilteredMaterial> NewMaterials )
{
	static UFunction* pFnSetMaterials = NULL;

	if ( ! pFnSetMaterials )
		pFnSetMaterials = (UFunction*) UObject::GObjObjects()->Data[ 31948 ];

	UTerrainLayerSetup_execSetMaterials_Parms SetMaterials_Parms;
	memcpy ( &SetMaterials_Parms.NewMaterials, &NewMaterials, 0x10 );

	pFnSetMaterials->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterials, &SetMaterials_Parms, NULL );

	pFnSetMaterials->FunctionFlags |= 0x400;
};

// Function Engine.UIRoot.GetOnlinePlayerInterfaceEx
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UOnlinePlayerInterfaceEx* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlinePlayerInterfaceEx* UUIRoot::GetOnlinePlayerInterfaceEx ( )
{
	static UFunction* pFnGetOnlinePlayerInterfaceEx = NULL;

	if ( ! pFnGetOnlinePlayerInterfaceEx )
		pFnGetOnlinePlayerInterfaceEx = (UFunction*) UObject::GObjObjects()->Data[ 17270 ];

	UUIRoot_execGetOnlinePlayerInterfaceEx_Parms GetOnlinePlayerInterfaceEx_Parms;

	this->ProcessEvent ( pFnGetOnlinePlayerInterfaceEx, &GetOnlinePlayerInterfaceEx_Parms, NULL );

	return GetOnlinePlayerInterfaceEx_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetOnlinePlayerInterface
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UOnlinePlayerInterface*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlinePlayerInterface* UUIRoot::GetOnlinePlayerInterface ( )
{
	static UFunction* pFnGetOnlinePlayerInterface = NULL;

	if ( ! pFnGetOnlinePlayerInterface )
		pFnGetOnlinePlayerInterface = (UFunction*) UObject::GObjObjects()->Data[ 17266 ];

	UUIRoot_execGetOnlinePlayerInterface_Parms GetOnlinePlayerInterface_Parms;

	this->ProcessEvent ( pFnGetOnlinePlayerInterface, &GetOnlinePlayerInterface_Parms, NULL );

	return GetOnlinePlayerInterface_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetOnlineGameInterface
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UOnlineGameInterface*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineGameInterface* UUIRoot::GetOnlineGameInterface ( )
{
	static UFunction* pFnGetOnlineGameInterface = NULL;

	if ( ! pFnGetOnlineGameInterface )
		pFnGetOnlineGameInterface = (UFunction*) UObject::GObjObjects()->Data[ 17262 ];

	UUIRoot_execGetOnlineGameInterface_Parms GetOnlineGameInterface_Parms;

	this->ProcessEvent ( pFnGetOnlineGameInterface, &GetOnlineGameInterface_Parms, NULL );

	return GetOnlineGameInterface_Parms.ReturnValue;
};

// Function Engine.UIRoot.ConvertWidgetIDToString
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class UUIObject*               SourceWidget                   ( CPF_Parm )

struct FString UUIRoot::ConvertWidgetIDToString ( class UUIObject* SourceWidget )
{
	static UFunction* pFnConvertWidgetIDToString = NULL;

	if ( ! pFnConvertWidgetIDToString )
		pFnConvertWidgetIDToString = (UFunction*) UObject::GObjObjects()->Data[ 17257 ];

	UUIRoot_execConvertWidgetIDToString_Parms ConvertWidgetIDToString_Parms;
	ConvertWidgetIDToString_Parms.SourceWidget = SourceWidget;

	this->ProcessEvent ( pFnConvertWidgetIDToString, &ConvertWidgetIDToString_Parms, NULL );

	return ConvertWidgetIDToString_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetDataStoreStringValue
// [0x00426002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InDataStoreMarkup              ( CPF_Parm | CPF_NeedCtorLink )
// class UUIScene*                OwnerScene                     ( CPF_OptionalParm | CPF_Parm )
// class ULocalPlayer*            OwnerPlayer                    ( CPF_OptionalParm | CPF_Parm )
// struct FString                 OutStringValue                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIRoot::GetDataStoreStringValue ( struct FString InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FString* OutStringValue )
{
	static UFunction* pFnGetDataStoreStringValue = NULL;

	if ( ! pFnGetDataStoreStringValue )
		pFnGetDataStoreStringValue = (UFunction*) UObject::GObjObjects()->Data[ 11624 ];

	UUIRoot_execGetDataStoreStringValue_Parms GetDataStoreStringValue_Parms;
	memcpy ( &GetDataStoreStringValue_Parms.InDataStoreMarkup, &InDataStoreMarkup, 0x10 );
	GetDataStoreStringValue_Parms.OwnerScene = OwnerScene;
	GetDataStoreStringValue_Parms.OwnerPlayer = OwnerPlayer;

	this->ProcessEvent ( pFnGetDataStoreStringValue, &GetDataStoreStringValue_Parms, NULL );

	if ( OutStringValue )
		memcpy ( OutStringValue, &GetDataStoreStringValue_Parms.OutStringValue, 0x10 );

	return GetDataStoreStringValue_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetDataStoreFieldValue
// [0x00426401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InDataStoreMarkup              ( CPF_Parm | CPF_NeedCtorLink )
// class UUIScene*                OwnerScene                     ( CPF_OptionalParm | CPF_Parm )
// class ULocalPlayer*            OwnerPlayer                    ( CPF_OptionalParm | CPF_Parm )
// struct FUIProviderFieldValue   OutFieldValue                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIRoot::GetDataStoreFieldValue ( struct FString InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FUIProviderFieldValue* OutFieldValue )
{
	static UFunction* pFnGetDataStoreFieldValue = NULL;

	if ( ! pFnGetDataStoreFieldValue )
		pFnGetDataStoreFieldValue = (UFunction*) UObject::GObjObjects()->Data[ 17245 ];

	UUIRoot_execGetDataStoreFieldValue_Parms GetDataStoreFieldValue_Parms;
	memcpy ( &GetDataStoreFieldValue_Parms.InDataStoreMarkup, &InDataStoreMarkup, 0x10 );
	GetDataStoreFieldValue_Parms.OwnerScene = OwnerScene;
	GetDataStoreFieldValue_Parms.OwnerPlayer = OwnerPlayer;

	pFnGetDataStoreFieldValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreFieldValue, &GetDataStoreFieldValue_Parms, NULL );

	pFnGetDataStoreFieldValue->FunctionFlags |= 0x400;

	if ( OutFieldValue )
		memcpy ( OutFieldValue, &GetDataStoreFieldValue_Parms.OutFieldValue, 0x68 );

	return GetDataStoreFieldValue_Parms.ReturnValue;
};

// Function Engine.UIRoot.SetDataStoreStringValue
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InDataStoreMarkup              ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 InStringValue                  ( CPF_Parm | CPF_NeedCtorLink )
// class UUIScene*                OwnerScene                     ( CPF_OptionalParm | CPF_Parm )
// class ULocalPlayer*            OwnerPlayer                    ( CPF_OptionalParm | CPF_Parm )

bool UUIRoot::SetDataStoreStringValue ( struct FString InDataStoreMarkup, struct FString InStringValue, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer )
{
	static UFunction* pFnSetDataStoreStringValue = NULL;

	if ( ! pFnSetDataStoreStringValue )
		pFnSetDataStoreStringValue = (UFunction*) UObject::GObjObjects()->Data[ 11626 ];

	UUIRoot_execSetDataStoreStringValue_Parms SetDataStoreStringValue_Parms;
	memcpy ( &SetDataStoreStringValue_Parms.InDataStoreMarkup, &InDataStoreMarkup, 0x10 );
	memcpy ( &SetDataStoreStringValue_Parms.InStringValue, &InStringValue, 0x10 );
	SetDataStoreStringValue_Parms.OwnerScene = OwnerScene;
	SetDataStoreStringValue_Parms.OwnerPlayer = OwnerPlayer;

	this->ProcessEvent ( pFnSetDataStoreStringValue, &SetDataStoreStringValue_Parms, NULL );

	return SetDataStoreStringValue_Parms.ReturnValue;
};

// Function Engine.UIRoot.SetDataStoreFieldValue
// [0x00426401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InDataStoreMarkup              ( CPF_Parm | CPF_NeedCtorLink )
// class UUIScene*                OwnerScene                     ( CPF_OptionalParm | CPF_Parm )
// class ULocalPlayer*            OwnerPlayer                    ( CPF_OptionalParm | CPF_Parm )
// struct FUIProviderFieldValue   InFieldValue                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIRoot::SetDataStoreFieldValue ( struct FString InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FUIProviderFieldValue* InFieldValue )
{
	static UFunction* pFnSetDataStoreFieldValue = NULL;

	if ( ! pFnSetDataStoreFieldValue )
		pFnSetDataStoreFieldValue = (UFunction*) UObject::GObjObjects()->Data[ 17234 ];

	UUIRoot_execSetDataStoreFieldValue_Parms SetDataStoreFieldValue_Parms;
	memcpy ( &SetDataStoreFieldValue_Parms.InDataStoreMarkup, &InDataStoreMarkup, 0x10 );
	SetDataStoreFieldValue_Parms.OwnerScene = OwnerScene;
	SetDataStoreFieldValue_Parms.OwnerPlayer = OwnerPlayer;

	pFnSetDataStoreFieldValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreFieldValue, &SetDataStoreFieldValue_Parms, NULL );

	pFnSetDataStoreFieldValue->FunctionFlags |= 0x400;

	if ( InFieldValue )
		memcpy ( InFieldValue, &SetDataStoreFieldValue_Parms.InFieldValue, 0x68 );

	return SetDataStoreFieldValue_Parms.ReturnValue;
};

// Function Engine.UIRoot.StaticResolveDataStore
// [0x00026003] ( FUNC_Final )
// Parameters infos:
// class UUIDataStore*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DataStoreTag                   ( CPF_Parm )
// class UUIScene*                OwnerScene                     ( CPF_OptionalParm | CPF_Parm )
// class ULocalPlayer*            InPlayerOwner                  ( CPF_OptionalParm | CPF_Parm )

class UUIDataStore* UUIRoot::StaticResolveDataStore ( struct FName DataStoreTag, class UUIScene* OwnerScene, class ULocalPlayer* InPlayerOwner )
{
	static UFunction* pFnStaticResolveDataStore = NULL;

	if ( ! pFnStaticResolveDataStore )
		pFnStaticResolveDataStore = (UFunction*) UObject::GObjObjects()->Data[ 17225 ];

	UUIRoot_execStaticResolveDataStore_Parms StaticResolveDataStore_Parms;
	memcpy ( &StaticResolveDataStore_Parms.DataStoreTag, &DataStoreTag, 0x8 );
	StaticResolveDataStore_Parms.OwnerScene = OwnerScene;
	StaticResolveDataStore_Parms.InPlayerOwner = InPlayerOwner;

	this->ProcessEvent ( pFnStaticResolveDataStore, &StaticResolveDataStore_Parms, NULL );

	return StaticResolveDataStore_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetPrimitiveTransform
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Parm )
// unsigned long                  bIncludeAnchorPosition         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncudeRotation                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncludeScale                  ( CPF_OptionalParm | CPF_Parm )

struct FMatrix UUIRoot::GetPrimitiveTransform ( class UUIObject* Widget, unsigned long bIncludeAnchorPosition, unsigned long bIncudeRotation, unsigned long bIncludeScale )
{
	static UFunction* pFnGetPrimitiveTransform = NULL;

	if ( ! pFnGetPrimitiveTransform )
		pFnGetPrimitiveTransform = (UFunction*) UObject::GObjObjects()->Data[ 17219 ];

	UUIRoot_execGetPrimitiveTransform_Parms GetPrimitiveTransform_Parms;
	GetPrimitiveTransform_Parms.Widget = Widget;
	GetPrimitiveTransform_Parms.bIncludeAnchorPosition = bIncludeAnchorPosition;
	GetPrimitiveTransform_Parms.bIncudeRotation = bIncudeRotation;
	GetPrimitiveTransform_Parms.bIncludeScale = bIncludeScale;

	pFnGetPrimitiveTransform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPrimitiveTransform, &GetPrimitiveTransform_Parms, NULL );

	pFnGetPrimitiveTransform->FunctionFlags |= 0x400;

	return GetPrimitiveTransform_Parms.ReturnValue;
};

// Function Engine.UIRoot.SetMouseCaptureOverride
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bCaptureMouse                  ( CPF_Parm )

void UUIRoot::SetMouseCaptureOverride ( unsigned long bCaptureMouse )
{
	static UFunction* pFnSetMouseCaptureOverride = NULL;

	if ( ! pFnSetMouseCaptureOverride )
		pFnSetMouseCaptureOverride = (UFunction*) UObject::GObjObjects()->Data[ 17217 ];

	UUIRoot_execSetMouseCaptureOverride_Parms SetMouseCaptureOverride_Parms;
	SetMouseCaptureOverride_Parms.bCaptureMouse = bCaptureMouse;

	pFnSetMouseCaptureOverride->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMouseCaptureOverride, &SetMouseCaptureOverride_Parms, NULL );

	pFnSetMouseCaptureOverride->FunctionFlags |= 0x400;
};

// Function Engine.UIRoot.GetCursorSize
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          CursorXL                       ( CPF_Parm | CPF_OutParm )
// float                          CursorYL                       ( CPF_Parm | CPF_OutParm )

bool UUIRoot::GetCursorSize ( float* CursorXL, float* CursorYL )
{
	static UFunction* pFnGetCursorSize = NULL;

	if ( ! pFnGetCursorSize )
		pFnGetCursorSize = (UFunction*) UObject::GObjObjects()->Data[ 17213 ];

	UUIRoot_execGetCursorSize_Parms GetCursorSize_Parms;

	pFnGetCursorSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCursorSize, &GetCursorSize_Parms, NULL );

	pFnGetCursorSize->FunctionFlags |= 0x400;

	if ( CursorXL )
		*CursorXL = GetCursorSize_Parms.CursorXL;

	if ( CursorYL )
		*CursorYL = GetCursorSize_Parms.CursorYL;

	return GetCursorSize_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetCursorPosition
// [0x00426401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Const | CPF_OptionalParm | CPF_Parm )
// int                            CursorX                        ( CPF_Parm | CPF_OutParm )
// int                            CursorY                        ( CPF_Parm | CPF_OutParm )

bool UUIRoot::GetCursorPosition ( class UUIScene* Scene, int* CursorX, int* CursorY )
{
	static UFunction* pFnGetCursorPosition = NULL;

	if ( ! pFnGetCursorPosition )
		pFnGetCursorPosition = (UFunction*) UObject::GObjObjects()->Data[ 17208 ];

	UUIRoot_execGetCursorPosition_Parms GetCursorPosition_Parms;
	GetCursorPosition_Parms.Scene = Scene;

	pFnGetCursorPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCursorPosition, &GetCursorPosition_Parms, NULL );

	pFnGetCursorPosition->FunctionFlags |= 0x400;

	if ( CursorX )
		*CursorX = GetCursorPosition_Parms.CursorX;

	if ( CursorY )
		*CursorY = GetCursorPosition_Parms.CursorY;

	return GetCursorPosition_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetFaceOrientation
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Face                           ( CPF_Parm )

unsigned char UUIRoot::GetFaceOrientation ( unsigned char Face )
{
	static UFunction* pFnGetFaceOrientation = NULL;

	if ( ! pFnGetFaceOrientation )
		pFnGetFaceOrientation = (UFunction*) UObject::GObjObjects()->Data[ 17205 ];

	UUIRoot_execGetFaceOrientation_Parms GetFaceOrientation_Parms;
	GetFaceOrientation_Parms.Face = Face;

	pFnGetFaceOrientation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFaceOrientation, &GetFaceOrientation_Parms, NULL );

	pFnGetFaceOrientation->FunctionFlags |= 0x400;

	return GetFaceOrientation_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetSceneClient
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UGameUISceneClient*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UGameUISceneClient* UUIRoot::GetSceneClient ( )
{
	static UFunction* pFnGetSceneClient = NULL;

	if ( ! pFnGetSceneClient )
		pFnGetSceneClient = (UFunction*) UObject::GObjObjects()->Data[ 17203 ];

	UUIRoot_execGetSceneClient_Parms GetSceneClient_Parms;

	pFnGetSceneClient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSceneClient, &GetSceneClient_Parms, NULL );

	pFnGetSceneClient->FunctionFlags |= 0x400;

	return GetSceneClient_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetCurrentUIController
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIInteraction*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIInteraction* UUIRoot::GetCurrentUIController ( )
{
	static UFunction* pFnGetCurrentUIController = NULL;

	if ( ! pFnGetCurrentUIController )
		pFnGetCurrentUIController = (UFunction*) UObject::GObjObjects()->Data[ 17201 ];

	UUIRoot_execGetCurrentUIController_Parms GetCurrentUIController_Parms;

	pFnGetCurrentUIController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentUIController, &GetCurrentUIController_Parms, NULL );

	pFnGetCurrentUIController->FunctionFlags |= 0x400;

	return GetCurrentUIController_Parms.ReturnValue;
};

// Function Engine.UIRoot.IsEditor
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIRoot::IsEditor ( )
{
	static UFunction* pFnIsEditor = NULL;

	if ( ! pFnIsEditor )
		pFnIsEditor = (UFunction*) UObject::GObjObjects()->Data[ 17199 ];

	UUIRoot_execIsEditor_Parms IsEditor_Parms;

	this->ProcessEvent ( pFnIsEditor, &IsEditor_Parms, NULL );

	return IsEditor_Parms.ReturnValue;
};

// Function Engine.UIRoot.IsConsole
// [0x00026003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ConsoleType                    ( CPF_OptionalParm | CPF_Parm )

bool UUIRoot::IsConsole ( unsigned char ConsoleType )
{
	static UFunction* pFnIsConsole = NULL;

	if ( ! pFnIsConsole )
		pFnIsConsole = (UFunction*) UObject::GObjObjects()->Data[ 17196 ];

	UUIRoot_execIsConsole_Parms IsConsole_Parms;
	IsConsole_Parms.ConsoleType = ConsoleType;

	this->ProcessEvent ( pFnIsConsole, &IsConsole_Parms, NULL );

	return IsConsole_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetInputPlatformType
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            OwningPlayer                   ( CPF_OptionalParm | CPF_Parm )

unsigned char UUIRoot::GetInputPlatformType ( class ULocalPlayer* OwningPlayer )
{
	static UFunction* pFnGetInputPlatformType = NULL;

	if ( ! pFnGetInputPlatformType )
		pFnGetInputPlatformType = (UFunction*) UObject::GObjObjects()->Data[ 17193 ];

	UUIRoot_execGetInputPlatformType_Parms GetInputPlatformType_Parms;
	GetInputPlatformType_Parms.OwningPlayer = OwningPlayer;

	pFnGetInputPlatformType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInputPlatformType, &GetInputPlatformType_Parms, NULL );

	pFnGetInputPlatformType->FunctionFlags |= 0x400;

	return GetInputPlatformType_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.LogCurrentState
// [0x00020002] 
// Parameters infos:
// int                            Indent                         ( CPF_Parm )

void UUIScreenObject::LogCurrentState ( int Indent )
{
	static UFunction* pFnLogCurrentState = NULL;

	if ( ! pFnLogCurrentState )
		pFnLogCurrentState = (UFunction*) UObject::GObjObjects()->Data[ 32828 ];

	UUIScreenObject_execLogCurrentState_Parms LogCurrentState_Parms;
	LogCurrentState_Parms.Indent = Indent;

	this->ProcessEvent ( pFnLogCurrentState, &LogCurrentState_Parms, NULL );
};

// Function Engine.UIScreenObject.Find_UIAnimTrackCompletedHandler
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FScriptDelegate         TrackCompletedDelegate         ( CPF_Parm | CPF_NeedCtorLink )

int UUIScreenObject::Find_UIAnimTrackCompletedHandler ( struct FScriptDelegate TrackCompletedDelegate )
{
	static UFunction* pFnFind_UIAnimTrackCompletedHandler = NULL;

	if ( ! pFnFind_UIAnimTrackCompletedHandler )
		pFnFind_UIAnimTrackCompletedHandler = (UFunction*) UObject::GObjObjects()->Data[ 32825 ];

	UUIScreenObject_execFind_UIAnimTrackCompletedHandler_Parms Find_UIAnimTrackCompletedHandler_Parms;
	memcpy ( &Find_UIAnimTrackCompletedHandler_Parms.TrackCompletedDelegate, &TrackCompletedDelegate, 0x10 );

	this->ProcessEvent ( pFnFind_UIAnimTrackCompletedHandler, &Find_UIAnimTrackCompletedHandler_Parms, NULL );

	return Find_UIAnimTrackCompletedHandler_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.Find_UIAnimKeyFrameCompletedHandler
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FScriptDelegate         KeyFrameCompletedDelegate      ( CPF_Parm | CPF_NeedCtorLink )

int UUIScreenObject::Find_UIAnimKeyFrameCompletedHandler ( struct FScriptDelegate KeyFrameCompletedDelegate )
{
	static UFunction* pFnFind_UIAnimKeyFrameCompletedHandler = NULL;

	if ( ! pFnFind_UIAnimKeyFrameCompletedHandler )
		pFnFind_UIAnimKeyFrameCompletedHandler = (UFunction*) UObject::GObjObjects()->Data[ 32822 ];

	UUIScreenObject_execFind_UIAnimKeyFrameCompletedHandler_Parms Find_UIAnimKeyFrameCompletedHandler_Parms;
	memcpy ( &Find_UIAnimKeyFrameCompletedHandler_Parms.KeyFrameCompletedDelegate, &KeyFrameCompletedDelegate, 0x10 );

	this->ProcessEvent ( pFnFind_UIAnimKeyFrameCompletedHandler, &Find_UIAnimKeyFrameCompletedHandler_Parms, NULL );

	return Find_UIAnimKeyFrameCompletedHandler_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.Remove_UIAnimTrackCompletedHandler
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FScriptDelegate         TrackCompletedDelegate         ( CPF_Parm | CPF_NeedCtorLink )

void UUIScreenObject::Remove_UIAnimTrackCompletedHandler ( struct FScriptDelegate TrackCompletedDelegate )
{
	static UFunction* pFnRemove_UIAnimTrackCompletedHandler = NULL;

	if ( ! pFnRemove_UIAnimTrackCompletedHandler )
		pFnRemove_UIAnimTrackCompletedHandler = (UFunction*) UObject::GObjObjects()->Data[ 32819 ];

	UUIScreenObject_execRemove_UIAnimTrackCompletedHandler_Parms Remove_UIAnimTrackCompletedHandler_Parms;
	memcpy ( &Remove_UIAnimTrackCompletedHandler_Parms.TrackCompletedDelegate, &TrackCompletedDelegate, 0x10 );

	this->ProcessEvent ( pFnRemove_UIAnimTrackCompletedHandler, &Remove_UIAnimTrackCompletedHandler_Parms, NULL );
};

// Function Engine.UIScreenObject.Remove_UIAnimKeyFrameCompletedHandler
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FScriptDelegate         KeyFrameCompletedDelegate      ( CPF_Parm | CPF_NeedCtorLink )

void UUIScreenObject::Remove_UIAnimKeyFrameCompletedHandler ( struct FScriptDelegate KeyFrameCompletedDelegate )
{
	static UFunction* pFnRemove_UIAnimKeyFrameCompletedHandler = NULL;

	if ( ! pFnRemove_UIAnimKeyFrameCompletedHandler )
		pFnRemove_UIAnimKeyFrameCompletedHandler = (UFunction*) UObject::GObjObjects()->Data[ 32816 ];

	UUIScreenObject_execRemove_UIAnimKeyFrameCompletedHandler_Parms Remove_UIAnimKeyFrameCompletedHandler_Parms;
	memcpy ( &Remove_UIAnimKeyFrameCompletedHandler_Parms.KeyFrameCompletedDelegate, &KeyFrameCompletedDelegate, 0x10 );

	this->ProcessEvent ( pFnRemove_UIAnimKeyFrameCompletedHandler, &Remove_UIAnimKeyFrameCompletedHandler_Parms, NULL );
};

// Function Engine.UIScreenObject.Add_UIAnimTrackCompletedHandler
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FScriptDelegate         TrackCompletedDelegate         ( CPF_Parm | CPF_NeedCtorLink )

void UUIScreenObject::Add_UIAnimTrackCompletedHandler ( struct FScriptDelegate TrackCompletedDelegate )
{
	static UFunction* pFnAdd_UIAnimTrackCompletedHandler = NULL;

	if ( ! pFnAdd_UIAnimTrackCompletedHandler )
		pFnAdd_UIAnimTrackCompletedHandler = (UFunction*) UObject::GObjObjects()->Data[ 32814 ];

	UUIScreenObject_execAdd_UIAnimTrackCompletedHandler_Parms Add_UIAnimTrackCompletedHandler_Parms;
	memcpy ( &Add_UIAnimTrackCompletedHandler_Parms.TrackCompletedDelegate, &TrackCompletedDelegate, 0x10 );

	this->ProcessEvent ( pFnAdd_UIAnimTrackCompletedHandler, &Add_UIAnimTrackCompletedHandler_Parms, NULL );
};

// Function Engine.UIScreenObject.Add_UIAnimKeyFrameCompletedHandler
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FScriptDelegate         KeyFrameCompletedDelegate      ( CPF_Parm | CPF_NeedCtorLink )

void UUIScreenObject::Add_UIAnimKeyFrameCompletedHandler ( struct FScriptDelegate KeyFrameCompletedDelegate )
{
	static UFunction* pFnAdd_UIAnimKeyFrameCompletedHandler = NULL;

	if ( ! pFnAdd_UIAnimKeyFrameCompletedHandler )
		pFnAdd_UIAnimKeyFrameCompletedHandler = (UFunction*) UObject::GObjObjects()->Data[ 32812 ];

	UUIScreenObject_execAdd_UIAnimKeyFrameCompletedHandler_Parms Add_UIAnimKeyFrameCompletedHandler_Parms;
	memcpy ( &Add_UIAnimKeyFrameCompletedHandler_Parms.KeyFrameCompletedDelegate, &KeyFrameCompletedDelegate, 0x10 );

	this->ProcessEvent ( pFnAdd_UIAnimKeyFrameCompletedHandler, &Add_UIAnimKeyFrameCompletedHandler_Parms, NULL );
};

// Function Engine.UIScreenObject.ActivateTrackCompletedDelegates
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// struct FName                   AnimName                       ( CPF_Parm )
// int                            TrackTypeMask                  ( CPF_Parm )

void UUIScreenObject::eventActivateTrackCompletedDelegates ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask )
{
	static UFunction* pFnActivateTrackCompletedDelegates = NULL;

	if ( ! pFnActivateTrackCompletedDelegates )
		pFnActivateTrackCompletedDelegates = (UFunction*) UObject::GObjObjects()->Data[ 32804 ];

	UUIScreenObject_eventActivateTrackCompletedDelegates_Parms ActivateTrackCompletedDelegates_Parms;
	ActivateTrackCompletedDelegates_Parms.Sender = Sender;
	memcpy ( &ActivateTrackCompletedDelegates_Parms.AnimName, &AnimName, 0x8 );
	ActivateTrackCompletedDelegates_Parms.TrackTypeMask = TrackTypeMask;

	this->ProcessEvent ( pFnActivateTrackCompletedDelegates, &ActivateTrackCompletedDelegates_Parms, NULL );
};

// Function Engine.UIScreenObject.ActivateKeyFrameCompletedDelegates
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// struct FName                   AnimName                       ( CPF_Parm )
// unsigned char                  TrackType                      ( CPF_Parm )

void UUIScreenObject::eventActivateKeyFrameCompletedDelegates ( class UUIScreenObject* Sender, struct FName AnimName, unsigned char TrackType )
{
	static UFunction* pFnActivateKeyFrameCompletedDelegates = NULL;

	if ( ! pFnActivateKeyFrameCompletedDelegates )
		pFnActivateKeyFrameCompletedDelegates = (UFunction*) UObject::GObjObjects()->Data[ 32796 ];

	UUIScreenObject_eventActivateKeyFrameCompletedDelegates_Parms ActivateKeyFrameCompletedDelegates_Parms;
	ActivateKeyFrameCompletedDelegates_Parms.Sender = Sender;
	memcpy ( &ActivateKeyFrameCompletedDelegates_Parms.AnimName, &AnimName, 0x8 );
	ActivateKeyFrameCompletedDelegates_Parms.TrackType = TrackType;

	this->ProcessEvent ( pFnActivateKeyFrameCompletedDelegates, &ActivateKeyFrameCompletedDelegates_Parms, NULL );
};

// Function Engine.UIScreenObject.UIAnimationEnded
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// struct FName                   AnimName                       ( CPF_Parm )
// int                            TrackTypeMask                  ( CPF_Parm )

void UUIScreenObject::eventUIAnimationEnded ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask )
{
	static UFunction* pFnUIAnimationEnded = NULL;

	if ( ! pFnUIAnimationEnded )
		pFnUIAnimationEnded = (UFunction*) UObject::GObjObjects()->Data[ 32791 ];

	UUIScreenObject_eventUIAnimationEnded_Parms UIAnimationEnded_Parms;
	UIAnimationEnded_Parms.Sender = Sender;
	memcpy ( &UIAnimationEnded_Parms.AnimName, &AnimName, 0x8 );
	UIAnimationEnded_Parms.TrackTypeMask = TrackTypeMask;

	this->ProcessEvent ( pFnUIAnimationEnded, &UIAnimationEnded_Parms, NULL );
};

// Function Engine.UIScreenObject.UIAnimationStarted
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// struct FName                   AnimName                       ( CPF_Parm )
// int                            TrackTypeMask                  ( CPF_Parm )
// unsigned long                  bSetAnimatingFlag              ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::eventUIAnimationStarted ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask, unsigned long bSetAnimatingFlag )
{
	static UFunction* pFnUIAnimationStarted = NULL;

	if ( ! pFnUIAnimationStarted )
		pFnUIAnimationStarted = (UFunction*) UObject::GObjObjects()->Data[ 32783 ];

	UUIScreenObject_eventUIAnimationStarted_Parms UIAnimationStarted_Parms;
	UIAnimationStarted_Parms.Sender = Sender;
	memcpy ( &UIAnimationStarted_Parms.AnimName, &AnimName, 0x8 );
	UIAnimationStarted_Parms.TrackTypeMask = TrackTypeMask;
	UIAnimationStarted_Parms.bSetAnimatingFlag = bSetAnimatingFlag;

	this->ProcessEvent ( pFnUIAnimationStarted, &UIAnimationStarted_Parms, NULL );
};

// Function Engine.UIScreenObject.IsAnimationPaused
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIScreenObject::IsAnimationPaused ( )
{
	static UFunction* pFnIsAnimationPaused = NULL;

	if ( ! pFnIsAnimationPaused )
		pFnIsAnimationPaused = (UFunction*) UObject::GObjObjects()->Data[ 32781 ];

	UUIScreenObject_execIsAnimationPaused_Parms IsAnimationPaused_Parms;

	pFnIsAnimationPaused->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAnimationPaused, &IsAnimationPaused_Parms, NULL );

	pFnIsAnimationPaused->FunctionFlags |= 0x400;

	return IsAnimationPaused_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.PauseAnimations
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bPauseAnimation                ( CPF_Parm )

void UUIScreenObject::PauseAnimations ( unsigned long bPauseAnimation )
{
	static UFunction* pFnPauseAnimations = NULL;

	if ( ! pFnPauseAnimations )
		pFnPauseAnimations = (UFunction*) UObject::GObjObjects()->Data[ 32779 ];

	UUIScreenObject_execPauseAnimations_Parms PauseAnimations_Parms;
	PauseAnimations_Parms.bPauseAnimation = bPauseAnimation;

	pFnPauseAnimations->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPauseAnimations, &PauseAnimations_Parms, NULL );

	pFnPauseAnimations->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.IsAnimating
// [0x00024C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimationSequenceName          ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::eventIsAnimating ( struct FName AnimationSequenceName )
{
	static UFunction* pFnIsAnimating = NULL;

	if ( ! pFnIsAnimating )
		pFnIsAnimating = (UFunction*) UObject::GObjObjects()->Data[ 32776 ];

	UUIScreenObject_eventIsAnimating_Parms IsAnimating_Parms;
	memcpy ( &IsAnimating_Parms.AnimationSequenceName, &AnimationSequenceName, 0x8 );

	pFnIsAnimating->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAnimating, &IsAnimating_Parms, NULL );

	pFnIsAnimating->FunctionFlags |= 0x400;

	return IsAnimating_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ClearUIAnimationLoop
// [0x00024C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// int                            SequenceIndex                  ( CPF_Parm )
// int                            TrackTypeMask                  ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::eventClearUIAnimationLoop ( int SequenceIndex, int TrackTypeMask )
{
	static UFunction* pFnClearUIAnimationLoop = NULL;

	if ( ! pFnClearUIAnimationLoop )
		pFnClearUIAnimationLoop = (UFunction*) UObject::GObjObjects()->Data[ 32773 ];

	UUIScreenObject_eventClearUIAnimationLoop_Parms ClearUIAnimationLoop_Parms;
	ClearUIAnimationLoop_Parms.SequenceIndex = SequenceIndex;
	ClearUIAnimationLoop_Parms.TrackTypeMask = TrackTypeMask;

	pFnClearUIAnimationLoop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearUIAnimationLoop, &ClearUIAnimationLoop_Parms, NULL );

	pFnClearUIAnimationLoop->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.StopUIAnimation
// [0x00024C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )
// class UUIAnimationSeq*         AnimSeq                        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bFinalize                      ( CPF_OptionalParm | CPF_Parm )
// int                            TrackTypeMask                  ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::eventStopUIAnimation ( struct FName AnimName, class UUIAnimationSeq* AnimSeq, unsigned long bFinalize, int TrackTypeMask )
{
	static UFunction* pFnStopUIAnimation = NULL;

	if ( ! pFnStopUIAnimation )
		pFnStopUIAnimation = (UFunction*) UObject::GObjObjects()->Data[ 32768 ];

	UUIScreenObject_eventStopUIAnimation_Parms StopUIAnimation_Parms;
	memcpy ( &StopUIAnimation_Parms.AnimName, &AnimName, 0x8 );
	StopUIAnimation_Parms.AnimSeq = AnimSeq;
	StopUIAnimation_Parms.bFinalize = bFinalize;
	StopUIAnimation_Parms.TrackTypeMask = TrackTypeMask;

	pFnStopUIAnimation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopUIAnimation, &StopUIAnimation_Parms, NULL );

	pFnStopUIAnimation->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.PlayUIAnimation
// [0x00024C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )
// class UUIAnimationSeq*         AnimSeqTemplate                ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  OverrideLoopMode               ( CPF_OptionalParm | CPF_Parm )
// float                          PlaybackRate                   ( CPF_OptionalParm | CPF_Parm )
// float                          InitialPosition                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSetAnimatingFlag              ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::eventPlayUIAnimation ( struct FName AnimName, class UUIAnimationSeq* AnimSeqTemplate, unsigned char OverrideLoopMode, float PlaybackRate, float InitialPosition, unsigned long bSetAnimatingFlag )
{
	static UFunction* pFnPlayUIAnimation = NULL;

	if ( ! pFnPlayUIAnimation )
		pFnPlayUIAnimation = (UFunction*) UObject::GObjObjects()->Data[ 32761 ];

	UUIScreenObject_eventPlayUIAnimation_Parms PlayUIAnimation_Parms;
	memcpy ( &PlayUIAnimation_Parms.AnimName, &AnimName, 0x8 );
	PlayUIAnimation_Parms.AnimSeqTemplate = AnimSeqTemplate;
	PlayUIAnimation_Parms.OverrideLoopMode = OverrideLoopMode;
	PlayUIAnimation_Parms.PlaybackRate = PlaybackRate;
	PlayUIAnimation_Parms.InitialPosition = InitialPosition;
	PlayUIAnimation_Parms.bSetAnimatingFlag = bSetAnimatingFlag;

	pFnPlayUIAnimation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayUIAnimation, &PlayUIAnimation_Parms, NULL );

	pFnPlayUIAnimation->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.FindAnimationSequenceIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SequenceName                   ( CPF_Parm )

int UUIScreenObject::FindAnimationSequenceIndex ( struct FName SequenceName )
{
	static UFunction* pFnFindAnimationSequenceIndex = NULL;

	if ( ! pFnFindAnimationSequenceIndex )
		pFnFindAnimationSequenceIndex = (UFunction*) UObject::GObjObjects()->Data[ 32758 ];

	UUIScreenObject_execFindAnimationSequenceIndex_Parms FindAnimationSequenceIndex_Parms;
	memcpy ( &FindAnimationSequenceIndex_Parms.SequenceName, &SequenceName, 0x8 );

	pFnFindAnimationSequenceIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindAnimationSequenceIndex, &FindAnimationSequenceIndex_Parms, NULL );

	pFnFindAnimationSequenceIndex->FunctionFlags |= 0x400;

	return FindAnimationSequenceIndex_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.TickAnimations
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UUIScreenObject::TickAnimations ( float DeltaTime )
{
	static UFunction* pFnTickAnimations = NULL;

	if ( ! pFnTickAnimations )
		pFnTickAnimations = (UFunction*) UObject::GObjObjects()->Data[ 32756 ];

	UUIScreenObject_execTickAnimations_Parms TickAnimations_Parms;
	TickAnimations_Parms.DeltaTime = DeltaTime;

	pFnTickAnimations->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTickAnimations, &TickAnimations_Parms, NULL );

	pFnTickAnimations->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.AnimGetCurrentPPSettings
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FPostProcessSettings    CurrentSettings                ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIScreenObject::AnimGetCurrentPPSettings ( struct FPostProcessSettings* CurrentSettings )
{
	static UFunction* pFnAnimGetCurrentPPSettings = NULL;

	if ( ! pFnAnimGetCurrentPPSettings )
		pFnAnimGetCurrentPPSettings = (UFunction*) UObject::GObjObjects()->Data[ 32753 ];

	UUIScreenObject_execAnimGetCurrentPPSettings_Parms AnimGetCurrentPPSettings_Parms;

	pFnAnimGetCurrentPPSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAnimGetCurrentPPSettings, &AnimGetCurrentPPSettings_Parms, NULL );

	pFnAnimGetCurrentPPSettings->FunctionFlags |= 0x400;

	if ( CurrentSettings )
		memcpy ( CurrentSettings, &AnimGetCurrentPPSettings_Parms.CurrentSettings, 0xE0 );

	return AnimGetCurrentPPSettings_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.Anim_SetValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  AnimationType                  ( CPF_Parm )
// struct FUIAnimationRawData     NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUIScreenObject::Anim_SetValue ( unsigned char AnimationType, struct FUIAnimationRawData* NewValue )
{
	static UFunction* pFnAnim_SetValue = NULL;

	if ( ! pFnAnim_SetValue )
		pFnAnim_SetValue = (UFunction*) UObject::GObjObjects()->Data[ 32749 ];

	UUIScreenObject_execAnim_SetValue_Parms Anim_SetValue_Parms;
	Anim_SetValue_Parms.AnimationType = AnimationType;

	pFnAnim_SetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAnim_SetValue, &Anim_SetValue_Parms, NULL );

	pFnAnim_SetValue->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &Anim_SetValue_Parms.NewValue, 0x38 );

	return Anim_SetValue_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.Anim_GetValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  AnimationType                  ( CPF_Parm )
// struct FUIAnimationRawData     out_CurrentValue               ( CPF_Parm | CPF_OutParm )

bool UUIScreenObject::Anim_GetValue ( unsigned char AnimationType, struct FUIAnimationRawData* out_CurrentValue )
{
	static UFunction* pFnAnim_GetValue = NULL;

	if ( ! pFnAnim_GetValue )
		pFnAnim_GetValue = (UFunction*) UObject::GObjObjects()->Data[ 32745 ];

	UUIScreenObject_execAnim_GetValue_Parms Anim_GetValue_Parms;
	Anim_GetValue_Parms.AnimationType = AnimationType;

	pFnAnim_GetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAnim_GetValue, &Anim_GetValue_Parms, NULL );

	pFnAnim_GetValue->FunctionFlags |= 0x400;

	if ( out_CurrentValue )
		memcpy ( out_CurrentValue, &Anim_GetValue_Parms.out_CurrentValue, 0x38 );

	return Anim_GetValue_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.OnUIAnim_TrackCompleted
// [0x00120000] 
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// struct FName                   AnimName                       ( CPF_Parm )
// int                            TrackTypeMask                  ( CPF_Parm )

void UUIScreenObject::OnUIAnim_TrackCompleted ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask )
{
	static UFunction* pFnOnUIAnim_TrackCompleted = NULL;

	if ( ! pFnOnUIAnim_TrackCompleted )
		pFnOnUIAnim_TrackCompleted = (UFunction*) UObject::GObjObjects()->Data[ 32267 ];

	UUIScreenObject_execOnUIAnim_TrackCompleted_Parms OnUIAnim_TrackCompleted_Parms;
	OnUIAnim_TrackCompleted_Parms.Sender = Sender;
	memcpy ( &OnUIAnim_TrackCompleted_Parms.AnimName, &AnimName, 0x8 );
	OnUIAnim_TrackCompleted_Parms.TrackTypeMask = TrackTypeMask;

	this->ProcessEvent ( pFnOnUIAnim_TrackCompleted, &OnUIAnim_TrackCompleted_Parms, NULL );
};

// Function Engine.UIScreenObject.OnUIAnim_KeyFrameCompleted
// [0x00120000] 
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// struct FName                   AnimName                       ( CPF_Parm )
// unsigned char                  TrackType                      ( CPF_Parm )

void UUIScreenObject::OnUIAnim_KeyFrameCompleted ( class UUIScreenObject* Sender, struct FName AnimName, unsigned char TrackType )
{
	static UFunction* pFnOnUIAnim_KeyFrameCompleted = NULL;

	if ( ! pFnOnUIAnim_KeyFrameCompleted )
		pFnOnUIAnim_KeyFrameCompleted = (UFunction*) UObject::GObjObjects()->Data[ 32264 ];

	UUIScreenObject_execOnUIAnim_KeyFrameCompleted_Parms OnUIAnim_KeyFrameCompleted_Parms;
	OnUIAnim_KeyFrameCompleted_Parms.Sender = Sender;
	memcpy ( &OnUIAnim_KeyFrameCompleted_Parms.AnimName, &AnimName, 0x8 );
	OnUIAnim_KeyFrameCompleted_Parms.TrackType = TrackType;

	this->ProcessEvent ( pFnOnUIAnim_KeyFrameCompleted, &OnUIAnim_KeyFrameCompleted_Parms, NULL );
};

// Function Engine.UIScreenObject.BecomePrimaryPlayer
// [0x00020002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )

void UUIScreenObject::BecomePrimaryPlayer ( int PlayerIndex )
{
	static UFunction* pFnBecomePrimaryPlayer = NULL;

	if ( ! pFnBecomePrimaryPlayer )
		pFnBecomePrimaryPlayer = (UFunction*) UObject::GObjObjects()->Data[ 32724 ];

	UUIScreenObject_execBecomePrimaryPlayer_Parms BecomePrimaryPlayer_Parms;
	BecomePrimaryPlayer_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnBecomePrimaryPlayer, &BecomePrimaryPlayer_Parms, NULL );
};

// Function Engine.UIScreenObject.GetNATType
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UUIScreenObject::GetNATType ( )
{
	static UFunction* pFnGetNATType = NULL;

	if ( ! pFnGetNATType )
		pFnGetNATType = (UFunction*) UObject::GObjObjects()->Data[ 32720 ];

	UUIScreenObject_execGetNATType_Parms GetNATType_Parms;

	this->ProcessEvent ( pFnGetNATType, &GetNATType_Parms, NULL );

	return GetNATType_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetLoggedInControllerIds
// [0x00426003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bRequireOnlineLogin            ( CPF_OptionalParm | CPF_Parm )
// int                            MaxPlayersToCheck              ( CPF_OptionalParm | CPF_Parm )
// struct TArray<int>             ControllerIds                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIScreenObject::GetLoggedInControllerIds ( unsigned long bRequireOnlineLogin, int MaxPlayersToCheck, struct TArray<int>* ControllerIds )
{
	static UFunction* pFnGetLoggedInControllerIds = NULL;

	if ( ! pFnGetLoggedInControllerIds )
		pFnGetLoggedInControllerIds = (UFunction*) UObject::GObjObjects()->Data[ 32714 ];

	UUIScreenObject_execGetLoggedInControllerIds_Parms GetLoggedInControllerIds_Parms;
	GetLoggedInControllerIds_Parms.bRequireOnlineLogin = bRequireOnlineLogin;
	GetLoggedInControllerIds_Parms.MaxPlayersToCheck = MaxPlayersToCheck;

	this->ProcessEvent ( pFnGetLoggedInControllerIds, &GetLoggedInControllerIds_Parms, NULL );

	if ( ControllerIds )
		memcpy ( ControllerIds, &GetLoggedInControllerIds_Parms.ControllerIds, 0x10 );
};

// Function Engine.UIScreenObject.GetLoggedInPlayerCount
// [0x00026003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bRequireOnlineLogin            ( CPF_OptionalParm | CPF_Parm )
// int                            MaxPlayersToCheck              ( CPF_OptionalParm | CPF_Parm )

int UUIScreenObject::GetLoggedInPlayerCount ( unsigned long bRequireOnlineLogin, int MaxPlayersToCheck )
{
	static UFunction* pFnGetLoggedInPlayerCount = NULL;

	if ( ! pFnGetLoggedInPlayerCount )
		pFnGetLoggedInPlayerCount = (UFunction*) UObject::GObjObjects()->Data[ 32708 ];

	UUIScreenObject_execGetLoggedInPlayerCount_Parms GetLoggedInPlayerCount_Parms;
	GetLoggedInPlayerCount_Parms.bRequireOnlineLogin = bRequireOnlineLogin;
	GetLoggedInPlayerCount_Parms.MaxPlayersToCheck = MaxPlayersToCheck;

	this->ProcessEvent ( pFnGetLoggedInPlayerCount, &GetLoggedInPlayerCount_Parms, NULL );

	return GetLoggedInPlayerCount_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.CanPlayOnline
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::CanPlayOnline ( int ControllerId )
{
	static UFunction* pFnCanPlayOnline = NULL;

	if ( ! pFnCanPlayOnline )
		pFnCanPlayOnline = (UFunction*) UObject::GObjObjects()->Data[ 32703 ];

	UUIScreenObject_execCanPlayOnline_Parms CanPlayOnline_Parms;
	CanPlayOnline_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnCanPlayOnline, &CanPlayOnline_Parms, NULL );

	return CanPlayOnline_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.HasLinkConnection
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIScreenObject::HasLinkConnection ( )
{
	static UFunction* pFnHasLinkConnection = NULL;

	if ( ! pFnHasLinkConnection )
		pFnHasLinkConnection = (UFunction*) UObject::GObjObjects()->Data[ 32701 ];

	UUIScreenObject_execHasLinkConnection_Parms HasLinkConnection_Parms;

	this->ProcessEvent ( pFnHasLinkConnection, &HasLinkConnection_Parms, NULL );

	return HasLinkConnection_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetLoginStatus
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_OptionalParm | CPF_Parm )

unsigned char UUIScreenObject::GetLoginStatus ( int ControllerId )
{
	static UFunction* pFnGetLoginStatus = NULL;

	if ( ! pFnGetLoginStatus )
		pFnGetLoginStatus = (UFunction*) UObject::GObjObjects()->Data[ 32698 ];

	UUIScreenObject_execGetLoginStatus_Parms GetLoginStatus_Parms;
	GetLoginStatus_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnGetLoginStatus, &GetLoginStatus_Parms, NULL );

	return GetLoginStatus_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.OnConsoleCommand
// [0x00020002] 
// Parameters infos:
// class UUIAction_ConsoleCommand* Action                         ( CPF_Parm )

void UUIScreenObject::OnConsoleCommand ( class UUIAction_ConsoleCommand* Action )
{
	static UFunction* pFnOnConsoleCommand = NULL;

	if ( ! pFnOnConsoleCommand )
		pFnOnConsoleCommand = (UFunction*) UObject::GObjObjects()->Data[ 32695 ];

	UUIScreenObject_execOnConsoleCommand_Parms OnConsoleCommand_Parms;
	OnConsoleCommand_Parms.Action = Action;

	this->ProcessEvent ( pFnOnConsoleCommand, &OnConsoleCommand_Parms, NULL );
};

// Function Engine.UIScreenObject.DisableWidget
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIScreenObject::DisableWidget ( int PlayerIndex )
{
	static UFunction* pFnDisableWidget = NULL;

	if ( ! pFnDisableWidget )
		pFnDisableWidget = (UFunction*) UObject::GObjObjects()->Data[ 32692 ];

	UUIScreenObject_execDisableWidget_Parms DisableWidget_Parms;
	DisableWidget_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnDisableWidget, &DisableWidget_Parms, NULL );

	return DisableWidget_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.EnableWidget
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIScreenObject::EnableWidget ( int PlayerIndex )
{
	static UFunction* pFnEnableWidget = NULL;

	if ( ! pFnEnableWidget )
		pFnEnableWidget = (UFunction*) UObject::GObjObjects()->Data[ 32689 ];

	UUIScreenObject_execEnableWidget_Parms EnableWidget_Parms;
	EnableWidget_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnEnableWidget, &EnableWidget_Parms, NULL );

	return EnableWidget_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetParent
// [0x00020000] 
// Parameters infos:
// class UUIScreenObject*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScreenObject* UUIScreenObject::GetParent ( )
{
	static UFunction* pFnGetParent = NULL;

	if ( ! pFnGetParent )
		pFnGetParent = (UFunction*) UObject::GObjObjects()->Data[ 32687 ];

	UUIScreenObject_execGetParent_Parms GetParent_Parms;

	this->ProcessEvent ( pFnGetParent, &GetParent_Parms, NULL );

	return GetParent_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ActivateFocusHint
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               FocusHintObject                ( CPF_Parm )

bool UUIScreenObject::eventActivateFocusHint ( class UUIObject* FocusHintObject )
{
	static UFunction* pFnActivateFocusHint = NULL;

	if ( ! pFnActivateFocusHint )
		pFnActivateFocusHint = (UFunction*) UObject::GObjObjects()->Data[ 32684 ];

	UUIScreenObject_eventActivateFocusHint_Parms ActivateFocusHint_Parms;
	ActivateFocusHint_Parms.FocusHintObject = FocusHintObject;

	this->ProcessEvent ( pFnActivateFocusHint, &ActivateFocusHint_Parms, NULL );

	return ActivateFocusHint_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetSupportedUIActionKeyNames
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// struct TArray<struct FName>    out_KeyNames                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIScreenObject::eventGetSupportedUIActionKeyNames ( struct TArray<struct FName>* out_KeyNames )
{
	static UFunction* pFnGetSupportedUIActionKeyNames = NULL;

	if ( ! pFnGetSupportedUIActionKeyNames )
		pFnGetSupportedUIActionKeyNames = (UFunction*) UObject::GObjObjects()->Data[ 32681 ];

	UUIScreenObject_eventGetSupportedUIActionKeyNames_Parms GetSupportedUIActionKeyNames_Parms;

	this->ProcessEvent ( pFnGetSupportedUIActionKeyNames, &GetSupportedUIActionKeyNames_Parms, NULL );

	if ( out_KeyNames )
		memcpy ( out_KeyNames, &GetSupportedUIActionKeyNames_Parms.out_KeyNames, 0x10 );
};

// Function Engine.UIScreenObject.DisablePlayerInput
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  PlayerIndex                    ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::eventDisablePlayerInput ( unsigned char PlayerIndex, unsigned long bRecurse )
{
	static UFunction* pFnDisablePlayerInput = NULL;

	if ( ! pFnDisablePlayerInput )
		pFnDisablePlayerInput = (UFunction*) UObject::GObjObjects()->Data[ 32677 ];

	UUIScreenObject_eventDisablePlayerInput_Parms DisablePlayerInput_Parms;
	DisablePlayerInput_Parms.PlayerIndex = PlayerIndex;
	DisablePlayerInput_Parms.bRecurse = bRecurse;

	this->ProcessEvent ( pFnDisablePlayerInput, &DisablePlayerInput_Parms, NULL );
};

// Function Engine.UIScreenObject.EnablePlayerInput
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  PlayerIndex                    ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::eventEnablePlayerInput ( unsigned char PlayerIndex, unsigned long bRecurse )
{
	static UFunction* pFnEnablePlayerInput = NULL;

	if ( ! pFnEnablePlayerInput )
		pFnEnablePlayerInput = (UFunction*) UObject::GObjObjects()->Data[ 32672 ];

	UUIScreenObject_eventEnablePlayerInput_Parms EnablePlayerInput_Parms;
	EnablePlayerInput_Parms.PlayerIndex = PlayerIndex;
	EnablePlayerInput_Parms.bRecurse = bRecurse;

	this->ProcessEvent ( pFnEnablePlayerInput, &EnablePlayerInput_Parms, NULL );
};

// Function Engine.UIScreenObject.SetVisibility
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bIsVisible                     ( CPF_Parm )

void UUIScreenObject::eventSetVisibility ( unsigned long bIsVisible )
{
	static UFunction* pFnSetVisibility = NULL;

	if ( ! pFnSetVisibility )
		pFnSetVisibility = (UFunction*) UObject::GObjObjects()->Data[ 32670 ];

	UUIScreenObject_eventSetVisibility_Parms SetVisibility_Parms;
	SetVisibility_Parms.bIsVisible = bIsVisible;

	this->ProcessEvent ( pFnSetVisibility, &SetVisibility_Parms, NULL );
};

// Function Engine.UIScreenObject.PrivateSetVisibility
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void UUIScreenObject::PrivateSetVisibility ( unsigned long bVisible )
{
	static UFunction* pFnPrivateSetVisibility = NULL;

	if ( ! pFnPrivateSetVisibility )
		pFnPrivateSetVisibility = (UFunction*) UObject::GObjObjects()->Data[ 32665 ];

	UUIScreenObject_execPrivateSetVisibility_Parms PrivateSetVisibility_Parms;
	PrivateSetVisibility_Parms.bVisible = bVisible;

	this->ProcessEvent ( pFnPrivateSetVisibility, &PrivateSetVisibility_Parms, NULL );
};

// Function Engine.UIScreenObject.IsGamepadConnected
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::eventIsGamepadConnected ( int ControllerId )
{
	static UFunction* pFnIsGamepadConnected = NULL;

	if ( ! pFnIsGamepadConnected )
		pFnIsGamepadConnected = (UFunction*) UObject::GObjObjects()->Data[ 32662 ];

	UUIScreenObject_eventIsGamepadConnected_Parms IsGamepadConnected_Parms;
	IsGamepadConnected_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnIsGamepadConnected, &IsGamepadConnected_Parms, NULL );

	return IsGamepadConnected_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsLoggedIn
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRequireOnlineLogin            ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::eventIsLoggedIn ( int ControllerId, unsigned long bRequireOnlineLogin )
{
	static UFunction* pFnIsLoggedIn = NULL;

	if ( ! pFnIsLoggedIn )
		pFnIsLoggedIn = (UFunction*) UObject::GObjObjects()->Data[ 32658 ];

	UUIScreenObject_eventIsLoggedIn_Parms IsLoggedIn_Parms;
	IsLoggedIn_Parms.ControllerId = ControllerId;
	IsLoggedIn_Parms.bRequireOnlineLogin = bRequireOnlineLogin;

	this->ProcessEvent ( pFnIsLoggedIn, &IsLoggedIn_Parms, NULL );

	return IsLoggedIn_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.RemovedFromParent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )

void UUIScreenObject::eventRemovedFromParent ( class UUIScreenObject* WidgetOwner )
{
	static UFunction* pFnRemovedFromParent = NULL;

	if ( ! pFnRemovedFromParent )
		pFnRemovedFromParent = (UFunction*) UObject::GObjObjects()->Data[ 32655 ];

	UUIScreenObject_eventRemovedFromParent_Parms RemovedFromParent_Parms;
	RemovedFromParent_Parms.WidgetOwner = WidgetOwner;

	this->ProcessEvent ( pFnRemovedFromParent, &RemovedFromParent_Parms, NULL );
};

// Function Engine.UIScreenObject.RemovedChild
// [0x00024800] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               OldChild                       ( CPF_Parm )
// struct TArray<class UUIObject*> ExclusionSet                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UUIScreenObject::eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, struct TArray<class UUIObject*> ExclusionSet )
{
	static UFunction* pFnRemovedChild = NULL;

	if ( ! pFnRemovedChild )
		pFnRemovedChild = (UFunction*) UObject::GObjObjects()->Data[ 32650 ];

	UUIScreenObject_eventRemovedChild_Parms RemovedChild_Parms;
	RemovedChild_Parms.WidgetOwner = WidgetOwner;
	RemovedChild_Parms.OldChild = OldChild;
	memcpy ( &RemovedChild_Parms.ExclusionSet, &ExclusionSet, 0x10 );

	this->ProcessEvent ( pFnRemovedChild, &RemovedChild_Parms, NULL );
};

// Function Engine.UIScreenObject.AddedChild
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               NewChild                       ( CPF_Parm )

void UUIScreenObject::eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild )
{
	static UFunction* pFnAddedChild = NULL;

	if ( ! pFnAddedChild )
		pFnAddedChild = (UFunction*) UObject::GObjObjects()->Data[ 32647 ];

	UUIScreenObject_eventAddedChild_Parms AddedChild_Parms;
	AddedChild_Parms.WidgetOwner = WidgetOwner;
	AddedChild_Parms.NewChild = NewChild;

	this->ProcessEvent ( pFnAddedChild, &AddedChild_Parms, NULL );
};

// Function Engine.UIScreenObject.PostInitialize
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UUIScreenObject::eventPostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = (UFunction*) UObject::GObjObjects()->Data[ 32646 ];

	UUIScreenObject_eventPostInitialize_Parms PostInitialize_Parms;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );
};

// Function Engine.UIScreenObject.Initialized
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UUIScreenObject::eventInitialized ( )
{
	static UFunction* pFnInitialized = NULL;

	if ( ! pFnInitialized )
		pFnInitialized = (UFunction*) UObject::GObjObjects()->Data[ 32645 ];

	UUIScreenObject_eventInitialized_Parms Initialized_Parms;

	this->ProcessEvent ( pFnInitialized, &Initialized_Parms, NULL );
};

// Function Engine.UIScreenObject.GetWidgetPathName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UUIScreenObject::GetWidgetPathName ( )
{
	static UFunction* pFnGetWidgetPathName = NULL;

	if ( ! pFnGetWidgetPathName )
		pFnGetWidgetPathName = (UFunction*) UObject::GObjObjects()->Data[ 22068 ];

	UUIScreenObject_execGetWidgetPathName_Parms GetWidgetPathName_Parms;

	pFnGetWidgetPathName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWidgetPathName, &GetWidgetPathName_Parms, NULL );

	pFnGetWidgetPathName->FunctionFlags |= 0x400;

	return GetWidgetPathName_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetAspectRatioAutoScaleFactor
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UFont*                   BaseFont                       ( CPF_OptionalParm | CPF_Parm )

float UUIScreenObject::GetAspectRatioAutoScaleFactor ( class UFont* BaseFont )
{
	static UFunction* pFnGetAspectRatioAutoScaleFactor = NULL;

	if ( ! pFnGetAspectRatioAutoScaleFactor )
		pFnGetAspectRatioAutoScaleFactor = (UFunction*) UObject::GObjObjects()->Data[ 32642 ];

	UUIScreenObject_execGetAspectRatioAutoScaleFactor_Parms GetAspectRatioAutoScaleFactor_Parms;
	GetAspectRatioAutoScaleFactor_Parms.BaseFont = BaseFont;

	pFnGetAspectRatioAutoScaleFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAspectRatioAutoScaleFactor, &GetAspectRatioAutoScaleFactor_Parms, NULL );

	pFnGetAspectRatioAutoScaleFactor->FunctionFlags |= 0x400;

	return GetAspectRatioAutoScaleFactor_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetInverseCanvasToScreen
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FMatrix UUIScreenObject::GetInverseCanvasToScreen ( )
{
	static UFunction* pFnGetInverseCanvasToScreen = NULL;

	if ( ! pFnGetInverseCanvasToScreen )
		pFnGetInverseCanvasToScreen = (UFunction*) UObject::GObjObjects()->Data[ 32640 ];

	UUIScreenObject_execGetInverseCanvasToScreen_Parms GetInverseCanvasToScreen_Parms;

	pFnGetInverseCanvasToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInverseCanvasToScreen, &GetInverseCanvasToScreen_Parms, NULL );

	pFnGetInverseCanvasToScreen->FunctionFlags |= 0x400;

	return GetInverseCanvasToScreen_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetCanvasToScreen
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FMatrix UUIScreenObject::GetCanvasToScreen ( )
{
	static UFunction* pFnGetCanvasToScreen = NULL;

	if ( ! pFnGetCanvasToScreen )
		pFnGetCanvasToScreen = (UFunction*) UObject::GObjObjects()->Data[ 32638 ];

	UUIScreenObject_execGetCanvasToScreen_Parms GetCanvasToScreen_Parms;

	pFnGetCanvasToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCanvasToScreen, &GetCanvasToScreen_Parms, NULL );

	pFnGetCanvasToScreen->FunctionFlags |= 0x400;

	return GetCanvasToScreen_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.PixelToCanvas
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector2D               PixelPosition                  ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector UUIScreenObject::PixelToCanvas ( struct FVector2D* PixelPosition )
{
	static UFunction* pFnPixelToCanvas = NULL;

	if ( ! pFnPixelToCanvas )
		pFnPixelToCanvas = (UFunction*) UObject::GObjObjects()->Data[ 32635 ];

	UUIScreenObject_execPixelToCanvas_Parms PixelToCanvas_Parms;

	pFnPixelToCanvas->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPixelToCanvas, &PixelToCanvas_Parms, NULL );

	pFnPixelToCanvas->FunctionFlags |= 0x400;

	if ( PixelPosition )
		memcpy ( PixelPosition, &PixelToCanvas_Parms.PixelPosition, 0x8 );

	return PixelToCanvas_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ScreenToCanvas
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector4                ScreenPosition                 ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector UUIScreenObject::ScreenToCanvas ( struct FVector4* ScreenPosition )
{
	static UFunction* pFnScreenToCanvas = NULL;

	if ( ! pFnScreenToCanvas )
		pFnScreenToCanvas = (UFunction*) UObject::GObjObjects()->Data[ 32632 ];

	UUIScreenObject_execScreenToCanvas_Parms ScreenToCanvas_Parms;

	pFnScreenToCanvas->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScreenToCanvas, &ScreenToCanvas_Parms, NULL );

	pFnScreenToCanvas->FunctionFlags |= 0x400;

	if ( ScreenPosition )
		memcpy ( ScreenPosition, &ScreenToCanvas_Parms.ScreenPosition, 0x10 );

	return ScreenToCanvas_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.PixelToScreen
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector4                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector2D               PixelPosition                  ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector4 UUIScreenObject::PixelToScreen ( struct FVector2D* PixelPosition )
{
	static UFunction* pFnPixelToScreen = NULL;

	if ( ! pFnPixelToScreen )
		pFnPixelToScreen = (UFunction*) UObject::GObjObjects()->Data[ 32629 ];

	UUIScreenObject_execPixelToScreen_Parms PixelToScreen_Parms;

	pFnPixelToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPixelToScreen, &PixelToScreen_Parms, NULL );

	pFnPixelToScreen->FunctionFlags |= 0x400;

	if ( PixelPosition )
		memcpy ( PixelPosition, &PixelToScreen_Parms.PixelPosition, 0x8 );

	return PixelToScreen_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ScreenToPixel
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector2D               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector4                ScreenPosition                 ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector2D UUIScreenObject::ScreenToPixel ( struct FVector4* ScreenPosition )
{
	static UFunction* pFnScreenToPixel = NULL;

	if ( ! pFnScreenToPixel )
		pFnScreenToPixel = (UFunction*) UObject::GObjObjects()->Data[ 32626 ];

	UUIScreenObject_execScreenToPixel_Parms ScreenToPixel_Parms;

	pFnScreenToPixel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScreenToPixel, &ScreenToPixel_Parms, NULL );

	pFnScreenToPixel->FunctionFlags |= 0x400;

	if ( ScreenPosition )
		memcpy ( ScreenPosition, &ScreenToPixel_Parms.ScreenPosition, 0x10 );

	return ScreenToPixel_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.CanvasToScreen
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector4                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 CanvasPosition                 ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector4 UUIScreenObject::CanvasToScreen ( struct FVector* CanvasPosition )
{
	static UFunction* pFnCanvasToScreen = NULL;

	if ( ! pFnCanvasToScreen )
		pFnCanvasToScreen = (UFunction*) UObject::GObjObjects()->Data[ 32623 ];

	UUIScreenObject_execCanvasToScreen_Parms CanvasToScreen_Parms;

	pFnCanvasToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanvasToScreen, &CanvasToScreen_Parms, NULL );

	pFnCanvasToScreen->FunctionFlags |= 0x400;

	if ( CanvasPosition )
		memcpy ( CanvasPosition, &CanvasToScreen_Parms.CanvasPosition, 0xC );

	return CanvasToScreen_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.DeProject
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 PixelPosition                  ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector UUIScreenObject::DeProject ( struct FVector* PixelPosition )
{
	static UFunction* pFnDeProject = NULL;

	if ( ! pFnDeProject )
		pFnDeProject = (UFunction*) UObject::GObjObjects()->Data[ 32620 ];

	UUIScreenObject_execDeProject_Parms DeProject_Parms;

	pFnDeProject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeProject, &DeProject_Parms, NULL );

	pFnDeProject->FunctionFlags |= 0x400;

	if ( PixelPosition )
		memcpy ( PixelPosition, &DeProject_Parms.PixelPosition, 0xC );

	return DeProject_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.Project
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 CanvasPosition                 ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector UUIScreenObject::Project ( struct FVector* CanvasPosition )
{
	static UFunction* pFnProject = NULL;

	if ( ! pFnProject )
		pFnProject = (UFunction*) UObject::GObjObjects()->Data[ 32617 ];

	UUIScreenObject_execProject_Parms Project_Parms;

	pFnProject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProject, &Project_Parms, NULL );

	pFnProject->FunctionFlags |= 0x400;

	if ( CanvasPosition )
		memcpy ( CanvasPosition, &Project_Parms.CanvasPosition, 0xC );

	return Project_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetDockedWidgets
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  SourceFace                     ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  TargetFace                     ( CPF_OptionalParm | CPF_Parm )
// struct TArray<class UUIObject*> out_DockedWidgets              ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIScreenObject::GetDockedWidgets ( unsigned char SourceFace, unsigned char TargetFace, struct TArray<class UUIObject*>* out_DockedWidgets )
{
	static UFunction* pFnGetDockedWidgets = NULL;

	if ( ! pFnGetDockedWidgets )
		pFnGetDockedWidgets = (UFunction*) UObject::GObjObjects()->Data[ 32612 ];

	UUIScreenObject_execGetDockedWidgets_Parms GetDockedWidgets_Parms;
	GetDockedWidgets_Parms.SourceFace = SourceFace;
	GetDockedWidgets_Parms.TargetFace = TargetFace;

	pFnGetDockedWidgets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDockedWidgets, &GetDockedWidgets_Parms, NULL );

	pFnGetDockedWidgets->FunctionFlags |= 0x400;

	if ( out_DockedWidgets )
		memcpy ( out_DockedWidgets, &GetDockedWidgets_Parms.out_DockedWidgets, 0x10 );
};

// Function Engine.UIScreenObject.ResolveUIExtent
// [0x00426401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         OwnerWidget                    ( CPF_Parm )
// unsigned char                  OutputType                     ( CPF_OptionalParm | CPF_Parm )
// struct FUIScreenValue_Extent   ExtentToResolve                ( CPF_Const | CPF_Parm | CPF_OutParm )

float UUIScreenObject::ResolveUIExtent ( class UUIScreenObject* OwnerWidget, unsigned char OutputType, struct FUIScreenValue_Extent* ExtentToResolve )
{
	static UFunction* pFnResolveUIExtent = NULL;

	if ( ! pFnResolveUIExtent )
		pFnResolveUIExtent = (UFunction*) UObject::GObjObjects()->Data[ 32607 ];

	UUIScreenObject_execResolveUIExtent_Parms ResolveUIExtent_Parms;
	ResolveUIExtent_Parms.OwnerWidget = OwnerWidget;
	ResolveUIExtent_Parms.OutputType = OutputType;

	pFnResolveUIExtent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveUIExtent, &ResolveUIExtent_Parms, NULL );

	pFnResolveUIExtent->FunctionFlags |= 0x400;

	if ( ExtentToResolve )
		memcpy ( ExtentToResolve, &ResolveUIExtent_Parms.ExtentToResolve, 0x8 );

	return ResolveUIExtent_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetPositionVector
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIncludeParentPosition         ( CPF_OptionalParm | CPF_Parm )

struct FVector UUIScreenObject::GetPositionVector ( unsigned long bIncludeParentPosition )
{
	static UFunction* pFnGetPositionVector = NULL;

	if ( ! pFnGetPositionVector )
		pFnGetPositionVector = (UFunction*) UObject::GObjObjects()->Data[ 32604 ];

	UUIScreenObject_execGetPositionVector_Parms GetPositionVector_Parms;
	GetPositionVector_Parms.bIncludeParentPosition = bIncludeParentPosition;

	pFnGetPositionVector->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPositionVector, &GetPositionVector_Parms, NULL );

	pFnGetPositionVector->FunctionFlags |= 0x400;

	return GetPositionVector_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetBounds
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Dimension                      ( CPF_Parm )
// unsigned char                  OutputType                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreDockPadding             ( CPF_OptionalParm | CPF_Parm )

float UUIScreenObject::GetBounds ( unsigned char Dimension, unsigned char OutputType, unsigned long bIgnoreDockPadding )
{
	static UFunction* pFnGetBounds = NULL;

	if ( ! pFnGetBounds )
		pFnGetBounds = (UFunction*) UObject::GObjObjects()->Data[ 32599 ];

	UUIScreenObject_execGetBounds_Parms GetBounds_Parms;
	GetBounds_Parms.Dimension = Dimension;
	GetBounds_Parms.OutputType = OutputType;
	GetBounds_Parms.bIgnoreDockPadding = bIgnoreDockPadding;

	pFnGetBounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBounds, &GetBounds_Parms, NULL );

	pFnGetBounds->FunctionFlags |= 0x400;

	return GetBounds_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetPosition
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Face                           ( CPF_Parm )
// unsigned char                  OutputType                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncludeOrigin                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreDockPadding             ( CPF_OptionalParm | CPF_Parm )

float UUIScreenObject::GetPosition ( unsigned char Face, unsigned char OutputType, unsigned long bIncludeOrigin, unsigned long bIgnoreDockPadding )
{
	static UFunction* pFnGetPosition = NULL;

	if ( ! pFnGetPosition )
		pFnGetPosition = (UFunction*) UObject::GObjObjects()->Data[ 32593 ];

	UUIScreenObject_execGetPosition_Parms GetPosition_Parms;
	GetPosition_Parms.Face = Face;
	GetPosition_Parms.OutputType = OutputType;
	GetPosition_Parms.bIncludeOrigin = bIncludeOrigin;
	GetPosition_Parms.bIgnoreDockPadding = bIgnoreDockPadding;

	pFnGetPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPosition, &GetPosition_Parms, NULL );

	pFnGetPosition->FunctionFlags |= 0x400;

	return GetPosition_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.SetPosition
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewValue                       ( CPF_Parm )
// unsigned char                  Face                           ( CPF_Parm )
// unsigned char                  InputType                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncludesViewportOrigin        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bResolveChange                 ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::SetPosition ( float NewValue, unsigned char Face, unsigned char InputType, unsigned long bIncludesViewportOrigin, unsigned long bResolveChange )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = (UFunction*) UObject::GObjObjects()->Data[ 32587 ];

	UUIScreenObject_execSetPosition_Parms SetPosition_Parms;
	SetPosition_Parms.NewValue = NewValue;
	SetPosition_Parms.Face = Face;
	SetPosition_Parms.InputType = InputType;
	SetPosition_Parms.bIncludesViewportOrigin = bIncludesViewportOrigin;
	SetPosition_Parms.bResolveChange = bResolveChange;

	pFnSetPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );

	pFnSetPosition->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.InvalidateAllPositions
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bIgnoreDockedFaces             ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::InvalidateAllPositions ( unsigned long bIgnoreDockedFaces )
{
	static UFunction* pFnInvalidateAllPositions = NULL;

	if ( ! pFnInvalidateAllPositions )
		pFnInvalidateAllPositions = (UFunction*) UObject::GObjObjects()->Data[ 32585 ];

	UUIScreenObject_execInvalidateAllPositions_Parms InvalidateAllPositions_Parms;
	InvalidateAllPositions_Parms.bIgnoreDockedFaces = bIgnoreDockedFaces;

	pFnInvalidateAllPositions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInvalidateAllPositions, &InvalidateAllPositions_Parms, NULL );

	pFnInvalidateAllPositions->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.InvalidatePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Face                           ( CPF_Parm )

void UUIScreenObject::InvalidatePosition ( unsigned char Face )
{
	static UFunction* pFnInvalidatePosition = NULL;

	if ( ! pFnInvalidatePosition )
		pFnInvalidatePosition = (UFunction*) UObject::GObjObjects()->Data[ 32583 ];

	UUIScreenObject_execInvalidatePosition_Parms InvalidatePosition_Parms;
	InvalidatePosition_Parms.Face = Face;

	pFnInvalidatePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInvalidatePosition, &InvalidatePosition_Parms, NULL );

	pFnInvalidatePosition->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.GetPlayerOwnerIndex
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bRequireValidIndex             ( CPF_OptionalParm | CPF_Parm )

int UUIScreenObject::GetPlayerOwnerIndex ( unsigned long bRequireValidIndex )
{
	static UFunction* pFnGetPlayerOwnerIndex = NULL;

	if ( ! pFnGetPlayerOwnerIndex )
		pFnGetPlayerOwnerIndex = (UFunction*) UObject::GObjObjects()->Data[ 32580 ];

	UUIScreenObject_execGetPlayerOwnerIndex_Parms GetPlayerOwnerIndex_Parms;
	GetPlayerOwnerIndex_Parms.bRequireValidIndex = bRequireValidIndex;

	pFnGetPlayerOwnerIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerOwnerIndex, &GetPlayerOwnerIndex_Parms, NULL );

	pFnGetPlayerOwnerIndex->FunctionFlags |= 0x400;

	return GetPlayerOwnerIndex_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetBestControllerId
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIScreenObject::GetBestControllerId ( )
{
	static UFunction* pFnGetBestControllerId = NULL;

	if ( ! pFnGetBestControllerId )
		pFnGetBestControllerId = (UFunction*) UObject::GObjObjects()->Data[ 32578 ];

	UUIScreenObject_execGetBestControllerId_Parms GetBestControllerId_Parms;

	pFnGetBestControllerId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBestControllerId, &GetBestControllerId_Parms, NULL );

	pFnGetBestControllerId->FunctionFlags |= 0x400;

	return GetBestControllerId_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetBestPlayerIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIScreenObject::GetBestPlayerIndex ( )
{
	static UFunction* pFnGetBestPlayerIndex = NULL;

	if ( ! pFnGetBestPlayerIndex )
		pFnGetBestPlayerIndex = (UFunction*) UObject::GObjObjects()->Data[ 32449 ];

	UUIScreenObject_execGetBestPlayerIndex_Parms GetBestPlayerIndex_Parms;

	pFnGetBestPlayerIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBestPlayerIndex, &GetBestPlayerIndex_Parms, NULL );

	pFnGetBestPlayerIndex->FunctionFlags |= 0x400;

	return GetBestPlayerIndex_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetSupportedPlayerCount
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIScreenObject::GetSupportedPlayerCount ( )
{
	static UFunction* pFnGetSupportedPlayerCount = NULL;

	if ( ! pFnGetSupportedPlayerCount )
		pFnGetSupportedPlayerCount = (UFunction*) UObject::GObjObjects()->Data[ 32575 ];

	UUIScreenObject_execGetSupportedPlayerCount_Parms GetSupportedPlayerCount_Parms;

	pFnGetSupportedPlayerCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSupportedPlayerCount, &GetSupportedPlayerCount_Parms, NULL );

	pFnGetSupportedPlayerCount->FunctionFlags |= 0x400;

	return GetSupportedPlayerCount_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetActivePlayerCount
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIScreenObject::GetActivePlayerCount ( )
{
	static UFunction* pFnGetActivePlayerCount = NULL;

	if ( ! pFnGetActivePlayerCount )
		pFnGetActivePlayerCount = (UFunction*) UObject::GObjObjects()->Data[ 32573 ];

	UUIScreenObject_execGetActivePlayerCount_Parms GetActivePlayerCount_Parms;

	pFnGetActivePlayerCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActivePlayerCount, &GetActivePlayerCount_Parms, NULL );

	pFnGetActivePlayerCount->FunctionFlags |= 0x400;

	return GetActivePlayerCount_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.SetInputMask
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewInputMask                   ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bForcedOverride                ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::SetInputMask ( unsigned char NewInputMask, unsigned long bRecurse, unsigned long bForcedOverride )
{
	static UFunction* pFnSetInputMask = NULL;

	if ( ! pFnSetInputMask )
		pFnSetInputMask = (UFunction*) UObject::GObjObjects()->Data[ 32569 ];

	UUIScreenObject_execSetInputMask_Parms SetInputMask_Parms;
	SetInputMask_Parms.NewInputMask = NewInputMask;
	SetInputMask_Parms.bRecurse = bRecurse;
	SetInputMask_Parms.bForcedOverride = bForcedOverride;

	pFnSetInputMask->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetInputMask, &SetInputMask_Parms, NULL );

	pFnSetInputMask->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.GetInputMask
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bInheritedMaskOnly             ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOverrideMaskOnly              ( CPF_OptionalParm | CPF_Parm )

unsigned char UUIScreenObject::GetInputMask ( unsigned long bInheritedMaskOnly, unsigned long bOverrideMaskOnly )
{
	static UFunction* pFnGetInputMask = NULL;

	if ( ! pFnGetInputMask )
		pFnGetInputMask = (UFunction*) UObject::GObjObjects()->Data[ 32565 ];

	UUIScreenObject_execGetInputMask_Parms GetInputMask_Parms;
	GetInputMask_Parms.bInheritedMaskOnly = bInheritedMaskOnly;
	GetInputMask_Parms.bOverrideMaskOnly = bOverrideMaskOnly;

	pFnGetInputMask->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInputMask, &GetInputMask_Parms, NULL );

	pFnGetInputMask->FunctionFlags |= 0x400;

	return GetInputMask_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.AcceptsPlayerInput
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIScreenObject::AcceptsPlayerInput ( int PlayerIndex )
{
	static UFunction* pFnAcceptsPlayerInput = NULL;

	if ( ! pFnAcceptsPlayerInput )
		pFnAcceptsPlayerInput = (UFunction*) UObject::GObjObjects()->Data[ 32562 ];

	UUIScreenObject_execAcceptsPlayerInput_Parms AcceptsPlayerInput_Parms;
	AcceptsPlayerInput_Parms.PlayerIndex = PlayerIndex;

	pFnAcceptsPlayerInput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAcceptsPlayerInput, &AcceptsPlayerInput_Parms, NULL );

	pFnAcceptsPlayerInput->FunctionFlags |= 0x400;

	return AcceptsPlayerInput_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsRuntimeInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIScreenObject::IsRuntimeInstance ( )
{
	static UFunction* pFnIsRuntimeInstance = NULL;

	if ( ! pFnIsRuntimeInstance )
		pFnIsRuntimeInstance = (UFunction*) UObject::GObjObjects()->Data[ 32560 ];

	UUIScreenObject_execIsRuntimeInstance_Parms IsRuntimeInstance_Parms;

	pFnIsRuntimeInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsRuntimeInstance, &IsRuntimeInstance_Parms, NULL );

	pFnIsRuntimeInstance->FunctionFlags |= 0x400;

	return IsRuntimeInstance_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsPressed
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::IsPressed ( int PlayerIndex )
{
	static UFunction* pFnIsPressed = NULL;

	if ( ! pFnIsPressed )
		pFnIsPressed = (UFunction*) UObject::GObjObjects()->Data[ 32557 ];

	UUIScreenObject_execIsPressed_Parms IsPressed_Parms;
	IsPressed_Parms.PlayerIndex = PlayerIndex;

	pFnIsPressed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPressed, &IsPressed_Parms, NULL );

	pFnIsPressed->FunctionFlags |= 0x400;

	return IsPressed_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsActive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::IsActive ( int PlayerIndex )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = (UFunction*) UObject::GObjObjects()->Data[ 32554 ];

	UUIScreenObject_execIsActive_Parms IsActive_Parms;
	IsActive_Parms.PlayerIndex = PlayerIndex;

	pFnIsActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );

	pFnIsActive->FunctionFlags |= 0x400;

	return IsActive_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsFocused
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::IsFocused ( int PlayerIndex )
{
	static UFunction* pFnIsFocused = NULL;

	if ( ! pFnIsFocused )
		pFnIsFocused = (UFunction*) UObject::GObjObjects()->Data[ 32551 ];

	UUIScreenObject_execIsFocused_Parms IsFocused_Parms;
	IsFocused_Parms.PlayerIndex = PlayerIndex;

	pFnIsFocused->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFocused, &IsFocused_Parms, NULL );

	pFnIsFocused->FunctionFlags |= 0x400;

	return IsFocused_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsDisabled
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bCheckOwnerChain               ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::IsDisabled ( int PlayerIndex, unsigned long bCheckOwnerChain )
{
	static UFunction* pFnIsDisabled = NULL;

	if ( ! pFnIsDisabled )
		pFnIsDisabled = (UFunction*) UObject::GObjObjects()->Data[ 32547 ];

	UUIScreenObject_execIsDisabled_Parms IsDisabled_Parms;
	IsDisabled_Parms.PlayerIndex = PlayerIndex;
	IsDisabled_Parms.bCheckOwnerChain = bCheckOwnerChain;

	pFnIsDisabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDisabled, &IsDisabled_Parms, NULL );

	pFnIsDisabled->FunctionFlags |= 0x400;

	return IsDisabled_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsEnabled
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bCheckOwnerChain               ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::IsEnabled ( int PlayerIndex, unsigned long bCheckOwnerChain )
{
	static UFunction* pFnIsEnabled = NULL;

	if ( ! pFnIsEnabled )
		pFnIsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 32543 ];

	UUIScreenObject_execIsEnabled_Parms IsEnabled_Parms;
	IsEnabled_Parms.PlayerIndex = PlayerIndex;
	IsEnabled_Parms.bCheckOwnerChain = bCheckOwnerChain;

	pFnIsEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEnabled, &IsEnabled_Parms, NULL );

	pFnIsEnabled->FunctionFlags |= 0x400;

	return IsEnabled_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.OverrideLastFocusedControl
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class UUIObject*               ChildToFocus                   ( CPF_Parm )

void UUIScreenObject::OverrideLastFocusedControl ( int PlayerIndex, class UUIObject* ChildToFocus )
{
	static UFunction* pFnOverrideLastFocusedControl = NULL;

	if ( ! pFnOverrideLastFocusedControl )
		pFnOverrideLastFocusedControl = (UFunction*) UObject::GObjObjects()->Data[ 32540 ];

	UUIScreenObject_execOverrideLastFocusedControl_Parms OverrideLastFocusedControl_Parms;
	OverrideLastFocusedControl_Parms.PlayerIndex = PlayerIndex;
	OverrideLastFocusedControl_Parms.ChildToFocus = ChildToFocus;

	pFnOverrideLastFocusedControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOverrideLastFocusedControl, &OverrideLastFocusedControl_Parms, NULL );

	pFnOverrideLastFocusedControl->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.GetLastFocusedControl
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

class UUIObject* UUIScreenObject::GetLastFocusedControl ( unsigned long bRecurse, int PlayerIndex )
{
	static UFunction* pFnGetLastFocusedControl = NULL;

	if ( ! pFnGetLastFocusedControl )
		pFnGetLastFocusedControl = (UFunction*) UObject::GObjObjects()->Data[ 32536 ];

	UUIScreenObject_execGetLastFocusedControl_Parms GetLastFocusedControl_Parms;
	GetLastFocusedControl_Parms.bRecurse = bRecurse;
	GetLastFocusedControl_Parms.PlayerIndex = PlayerIndex;

	pFnGetLastFocusedControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLastFocusedControl, &GetLastFocusedControl_Parms, NULL );

	pFnGetLastFocusedControl->FunctionFlags |= 0x400;

	return GetLastFocusedControl_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetFocusedControl
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

class UUIObject* UUIScreenObject::GetFocusedControl ( unsigned long bRecurse, int PlayerIndex )
{
	static UFunction* pFnGetFocusedControl = NULL;

	if ( ! pFnGetFocusedControl )
		pFnGetFocusedControl = (UFunction*) UObject::GObjObjects()->Data[ 32532 ];

	UUIScreenObject_execGetFocusedControl_Parms GetFocusedControl_Parms;
	GetFocusedControl_Parms.bRecurse = bRecurse;
	GetFocusedControl_Parms.PlayerIndex = PlayerIndex;

	pFnGetFocusedControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFocusedControl, &GetFocusedControl_Parms, NULL );

	pFnGetFocusedControl->FunctionFlags |= 0x400;

	return GetFocusedControl_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.KillFocus
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::KillFocus ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnKillFocus = NULL;

	if ( ! pFnKillFocus )
		pFnKillFocus = (UFunction*) UObject::GObjObjects()->Data[ 32528 ];

	UUIScreenObject_execKillFocus_Parms KillFocus_Parms;
	KillFocus_Parms.Sender = Sender;
	KillFocus_Parms.PlayerIndex = PlayerIndex;

	pFnKillFocus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnKillFocus, &KillFocus_Parms, NULL );

	pFnKillFocus->FunctionFlags |= 0x400;

	return KillFocus_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.SetFocusToChild
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               ChildToFocus                   ( CPF_OptionalParm | CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::SetFocusToChild ( class UUIObject* ChildToFocus, int PlayerIndex )
{
	static UFunction* pFnSetFocusToChild = NULL;

	if ( ! pFnSetFocusToChild )
		pFnSetFocusToChild = (UFunction*) UObject::GObjObjects()->Data[ 32524 ];

	UUIScreenObject_execSetFocusToChild_Parms SetFocusToChild_Parms;
	SetFocusToChild_Parms.ChildToFocus = ChildToFocus;
	SetFocusToChild_Parms.PlayerIndex = PlayerIndex;

	pFnSetFocusToChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFocusToChild, &SetFocusToChild_Parms, NULL );

	pFnSetFocusToChild->FunctionFlags |= 0x400;

	return SetFocusToChild_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.SetFocus
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::SetFocus ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnSetFocus = NULL;

	if ( ! pFnSetFocus )
		pFnSetFocus = (UFunction*) UObject::GObjObjects()->Data[ 32520 ];

	UUIScreenObject_execSetFocus_Parms SetFocus_Parms;
	SetFocus_Parms.Sender = Sender;
	SetFocus_Parms.PlayerIndex = PlayerIndex;

	pFnSetFocus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFocus, &SetFocus_Parms, NULL );

	pFnSetFocus->FunctionFlags |= 0x400;

	return SetFocus_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.CanPropagateFocusFor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               TestChild                      ( CPF_Parm )

bool UUIScreenObject::CanPropagateFocusFor ( class UUIObject* TestChild )
{
	static UFunction* pFnCanPropagateFocusFor = NULL;

	if ( ! pFnCanPropagateFocusFor )
		pFnCanPropagateFocusFor = (UFunction*) UObject::GObjObjects()->Data[ 32517 ];

	UUIScreenObject_execCanPropagateFocusFor_Parms CanPropagateFocusFor_Parms;
	CanPropagateFocusFor_Parms.TestChild = TestChild;

	pFnCanPropagateFocusFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanPropagateFocusFor, &CanPropagateFocusFor_Parms, NULL );

	pFnCanPropagateFocusFor->FunctionFlags |= 0x400;

	return CanPropagateFocusFor_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.CanAcceptFocus
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncludeParentVisibility       ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::CanAcceptFocus ( int PlayerIndex, unsigned long bIncludeParentVisibility )
{
	static UFunction* pFnCanAcceptFocus = NULL;

	if ( ! pFnCanAcceptFocus )
		pFnCanAcceptFocus = (UFunction*) UObject::GObjObjects()->Data[ 32513 ];

	UUIScreenObject_execCanAcceptFocus_Parms CanAcceptFocus_Parms;
	CanAcceptFocus_Parms.PlayerIndex = PlayerIndex;
	CanAcceptFocus_Parms.bIncludeParentVisibility = bIncludeParentVisibility;

	pFnCanAcceptFocus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanAcceptFocus, &CanAcceptFocus_Parms, NULL );

	pFnCanAcceptFocus->FunctionFlags |= 0x400;

	return CanAcceptFocus_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsNeverFocused
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIScreenObject::IsNeverFocused ( )
{
	static UFunction* pFnIsNeverFocused = NULL;

	if ( ! pFnIsNeverFocused )
		pFnIsNeverFocused = (UFunction*) UObject::GObjObjects()->Data[ 32511 ];

	UUIScreenObject_execIsNeverFocused_Parms IsNeverFocused_Parms;

	pFnIsNeverFocused->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsNeverFocused, &IsNeverFocused_Parms, NULL );

	pFnIsNeverFocused->FunctionFlags |= 0x400;

	return IsNeverFocused_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.NavigateFocus
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// unsigned char                  Direction                      ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  bFocusChanged                  ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUIScreenObject::NavigateFocus ( class UUIScreenObject* Sender, unsigned char Direction, int PlayerIndex, unsigned char* bFocusChanged )
{
	static UFunction* pFnNavigateFocus = NULL;

	if ( ! pFnNavigateFocus )
		pFnNavigateFocus = (UFunction*) UObject::GObjObjects()->Data[ 32505 ];

	UUIScreenObject_execNavigateFocus_Parms NavigateFocus_Parms;
	NavigateFocus_Parms.Sender = Sender;
	NavigateFocus_Parms.Direction = Direction;
	NavigateFocus_Parms.PlayerIndex = PlayerIndex;

	pFnNavigateFocus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNavigateFocus, &NavigateFocus_Parms, NULL );

	pFnNavigateFocus->FunctionFlags |= 0x400;

	if ( bFocusChanged )
		*bFocusChanged = NavigateFocus_Parms.bFocusChanged;

	return NavigateFocus_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.PrevControl
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::PrevControl ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnPrevControl = NULL;

	if ( ! pFnPrevControl )
		pFnPrevControl = (UFunction*) UObject::GObjObjects()->Data[ 32501 ];

	UUIScreenObject_execPrevControl_Parms PrevControl_Parms;
	PrevControl_Parms.Sender = Sender;
	PrevControl_Parms.PlayerIndex = PlayerIndex;

	pFnPrevControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrevControl, &PrevControl_Parms, NULL );

	pFnPrevControl->FunctionFlags |= 0x400;

	return PrevControl_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.NextControl
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::NextControl ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnNextControl = NULL;

	if ( ! pFnNextControl )
		pFnNextControl = (UFunction*) UObject::GObjObjects()->Data[ 32497 ];

	UUIScreenObject_execNextControl_Parms NextControl_Parms;
	NextControl_Parms.Sender = Sender;
	NextControl_Parms.PlayerIndex = PlayerIndex;

	pFnNextControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNextControl, &NextControl_Parms, NULL );

	pFnNextControl->FunctionFlags |= 0x400;

	return NextControl_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.FocusLastControl
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::FocusLastControl ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnFocusLastControl = NULL;

	if ( ! pFnFocusLastControl )
		pFnFocusLastControl = (UFunction*) UObject::GObjObjects()->Data[ 32493 ];

	UUIScreenObject_execFocusLastControl_Parms FocusLastControl_Parms;
	FocusLastControl_Parms.Sender = Sender;
	FocusLastControl_Parms.PlayerIndex = PlayerIndex;

	pFnFocusLastControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFocusLastControl, &FocusLastControl_Parms, NULL );

	pFnFocusLastControl->FunctionFlags |= 0x400;

	return FocusLastControl_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.FocusFirstControl
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::FocusFirstControl ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnFocusFirstControl = NULL;

	if ( ! pFnFocusFirstControl )
		pFnFocusFirstControl = (UFunction*) UObject::GObjObjects()->Data[ 32489 ];

	UUIScreenObject_execFocusFirstControl_Parms FocusFirstControl_Parms;
	FocusFirstControl_Parms.Sender = Sender;
	FocusFirstControl_Parms.PlayerIndex = PlayerIndex;

	pFnFocusFirstControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFocusFirstControl, &FocusFirstControl_Parms, NULL );

	pFnFocusFirstControl->FunctionFlags |= 0x400;

	return FocusFirstControl_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsHoldingShift
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

bool UUIScreenObject::IsHoldingShift ( int ControllerId )
{
	static UFunction* pFnIsHoldingShift = NULL;

	if ( ! pFnIsHoldingShift )
		pFnIsHoldingShift = (UFunction*) UObject::GObjObjects()->Data[ 32486 ];

	UUIScreenObject_execIsHoldingShift_Parms IsHoldingShift_Parms;
	IsHoldingShift_Parms.ControllerId = ControllerId;

	pFnIsHoldingShift->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHoldingShift, &IsHoldingShift_Parms, NULL );

	pFnIsHoldingShift->FunctionFlags |= 0x400;

	return IsHoldingShift_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsHoldingAlt
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

bool UUIScreenObject::IsHoldingAlt ( int ControllerId )
{
	static UFunction* pFnIsHoldingAlt = NULL;

	if ( ! pFnIsHoldingAlt )
		pFnIsHoldingAlt = (UFunction*) UObject::GObjObjects()->Data[ 32483 ];

	UUIScreenObject_execIsHoldingAlt_Parms IsHoldingAlt_Parms;
	IsHoldingAlt_Parms.ControllerId = ControllerId;

	pFnIsHoldingAlt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHoldingAlt, &IsHoldingAlt_Parms, NULL );

	pFnIsHoldingAlt->FunctionFlags |= 0x400;

	return IsHoldingAlt_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsHoldingCtrl
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

bool UUIScreenObject::IsHoldingCtrl ( int ControllerId )
{
	static UFunction* pFnIsHoldingCtrl = NULL;

	if ( ! pFnIsHoldingCtrl )
		pFnIsHoldingCtrl = (UFunction*) UObject::GObjObjects()->Data[ 32480 ];

	UUIScreenObject_execIsHoldingCtrl_Parms IsHoldingCtrl_Parms;
	IsHoldingCtrl_Parms.ControllerId = ControllerId;

	pFnIsHoldingCtrl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHoldingCtrl, &IsHoldingCtrl_Parms, NULL );

	pFnIsHoldingCtrl->FunctionFlags |= 0x400;

	return IsHoldingCtrl_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ConditionalPropagateEnabledState
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )
// unsigned long                  bForce                         ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::ConditionalPropagateEnabledState ( int PlayerIndex, unsigned long bForce )
{
	static UFunction* pFnConditionalPropagateEnabledState = NULL;

	if ( ! pFnConditionalPropagateEnabledState )
		pFnConditionalPropagateEnabledState = (UFunction*) UObject::GObjObjects()->Data[ 32476 ];

	UUIScreenObject_execConditionalPropagateEnabledState_Parms ConditionalPropagateEnabledState_Parms;
	ConditionalPropagateEnabledState_Parms.PlayerIndex = PlayerIndex;
	ConditionalPropagateEnabledState_Parms.bForce = bForce;

	pFnConditionalPropagateEnabledState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConditionalPropagateEnabledState, &ConditionalPropagateEnabledState_Parms, NULL );

	pFnConditionalPropagateEnabledState->FunctionFlags |= 0x400;

	return ConditionalPropagateEnabledState_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.DeactivateStateByClass
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  StateToRemove                  ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// class UUIState*                StateThatWasRemoved            ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUIScreenObject::DeactivateStateByClass ( class UClass* StateToRemove, int PlayerIndex, class UUIState** StateThatWasRemoved )
{
	static UFunction* pFnDeactivateStateByClass = NULL;

	if ( ! pFnDeactivateStateByClass )
		pFnDeactivateStateByClass = (UFunction*) UObject::GObjObjects()->Data[ 32471 ];

	UUIScreenObject_execDeactivateStateByClass_Parms DeactivateStateByClass_Parms;
	DeactivateStateByClass_Parms.StateToRemove = StateToRemove;
	DeactivateStateByClass_Parms.PlayerIndex = PlayerIndex;

	pFnDeactivateStateByClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeactivateStateByClass, &DeactivateStateByClass_Parms, NULL );

	pFnDeactivateStateByClass->FunctionFlags |= 0x400;

	if ( StateThatWasRemoved )
		*StateThatWasRemoved = DeactivateStateByClass_Parms.StateThatWasRemoved;

	return DeactivateStateByClass_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.DeactivateState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIState*                StateToRemove                  ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIScreenObject::DeactivateState ( class UUIState* StateToRemove, int PlayerIndex )
{
	static UFunction* pFnDeactivateState = NULL;

	if ( ! pFnDeactivateState )
		pFnDeactivateState = (UFunction*) UObject::GObjObjects()->Data[ 32467 ];

	UUIScreenObject_execDeactivateState_Parms DeactivateState_Parms;
	DeactivateState_Parms.StateToRemove = StateToRemove;
	DeactivateState_Parms.PlayerIndex = PlayerIndex;

	pFnDeactivateState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeactivateState, &DeactivateState_Parms, NULL );

	pFnDeactivateState->FunctionFlags |= 0x400;

	return DeactivateState_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ActivateStateByClass
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  StateToActivate                ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// class UUIState*                StateThatWasAdded              ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUIScreenObject::ActivateStateByClass ( class UClass* StateToActivate, int PlayerIndex, class UUIState** StateThatWasAdded )
{
	static UFunction* pFnActivateStateByClass = NULL;

	if ( ! pFnActivateStateByClass )
		pFnActivateStateByClass = (UFunction*) UObject::GObjObjects()->Data[ 32462 ];

	UUIScreenObject_execActivateStateByClass_Parms ActivateStateByClass_Parms;
	ActivateStateByClass_Parms.StateToActivate = StateToActivate;
	ActivateStateByClass_Parms.PlayerIndex = PlayerIndex;

	pFnActivateStateByClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateStateByClass, &ActivateStateByClass_Parms, NULL );

	pFnActivateStateByClass->FunctionFlags |= 0x400;

	if ( StateThatWasAdded )
		*StateThatWasAdded = ActivateStateByClass_Parms.StateThatWasAdded;

	return ActivateStateByClass_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ActivateState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIState*                StateToActivate                ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIScreenObject::ActivateState ( class UUIState* StateToActivate, int PlayerIndex )
{
	static UFunction* pFnActivateState = NULL;

	if ( ! pFnActivateState )
		pFnActivateState = (UFunction*) UObject::GObjObjects()->Data[ 32458 ];

	UUIScreenObject_execActivateState_Parms ActivateState_Parms;
	ActivateState_Parms.StateToActivate = StateToActivate;
	ActivateState_Parms.PlayerIndex = PlayerIndex;

	pFnActivateState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateState, &ActivateState_Parms, NULL );

	pFnActivateState->FunctionFlags |= 0x400;

	return ActivateState_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.HasActiveStateOfClass
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  StateClass                     ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// int                            StateIndex                     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUIScreenObject::HasActiveStateOfClass ( class UClass* StateClass, int PlayerIndex, int* StateIndex )
{
	static UFunction* pFnHasActiveStateOfClass = NULL;

	if ( ! pFnHasActiveStateOfClass )
		pFnHasActiveStateOfClass = (UFunction*) UObject::GObjObjects()->Data[ 32453 ];

	UUIScreenObject_execHasActiveStateOfClass_Parms HasActiveStateOfClass_Parms;
	HasActiveStateOfClass_Parms.StateClass = StateClass;
	HasActiveStateOfClass_Parms.PlayerIndex = PlayerIndex;

	pFnHasActiveStateOfClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasActiveStateOfClass, &HasActiveStateOfClass_Parms, NULL );

	pFnHasActiveStateOfClass->FunctionFlags |= 0x400;

	if ( StateIndex )
		*StateIndex = HasActiveStateOfClass_Parms.StateIndex;

	return HasActiveStateOfClass_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetCurrentState
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIState*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

class UUIState* UUIScreenObject::GetCurrentState ( int PlayerIndex )
{
	static UFunction* pFnGetCurrentState = NULL;

	if ( ! pFnGetCurrentState )
		pFnGetCurrentState = (UFunction*) UObject::GObjObjects()->Data[ 32450 ];

	UUIScreenObject_execGetCurrentState_Parms GetCurrentState_Parms;
	GetCurrentState_Parms.PlayerIndex = PlayerIndex;

	pFnGetCurrentState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentState, &GetCurrentState_Parms, NULL );

	pFnGetCurrentState->FunctionFlags |= 0x400;

	return GetCurrentState_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.SetEnabled
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bEnabled                       ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::SetEnabled ( unsigned long bEnabled, int PlayerIndex )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 32445 ];

	UUIScreenObject_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bEnabled = bEnabled;
	SetEnabled_Parms.PlayerIndex = PlayerIndex;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;

	return SetEnabled_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.FindEventsOfClass
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  EventClassToFind               ( CPF_Parm )
// class UUIState*                LimitScope                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bExactClass                    ( CPF_OptionalParm | CPF_Parm )
// struct TArray<class UUIEvent*> out_EventInstances             ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIScreenObject::FindEventsOfClass ( class UClass* EventClassToFind, class UUIState* LimitScope, unsigned long bExactClass, struct TArray<class UUIEvent*>* out_EventInstances )
{
	static UFunction* pFnFindEventsOfClass = NULL;

	if ( ! pFnFindEventsOfClass )
		pFnFindEventsOfClass = (UFunction*) UObject::GObjObjects()->Data[ 32439 ];

	UUIScreenObject_execFindEventsOfClass_Parms FindEventsOfClass_Parms;
	FindEventsOfClass_Parms.EventClassToFind = EventClassToFind;
	FindEventsOfClass_Parms.LimitScope = LimitScope;
	FindEventsOfClass_Parms.bExactClass = bExactClass;

	pFnFindEventsOfClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindEventsOfClass, &FindEventsOfClass_Parms, NULL );

	pFnFindEventsOfClass->FunctionFlags |= 0x400;

	if ( out_EventInstances )
		memcpy ( out_EventInstances, &FindEventsOfClass_Parms.out_EventInstances, 0x10 );
};

// Function Engine.UIScreenObject.ActivateEventByClass
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class UClass*                  EventClassToActivate           ( CPF_Parm )
// class UObject*                 InEventActivator               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bActivateImmediately           ( CPF_OptionalParm | CPF_Parm )
// struct TArray<int>             IndicesToActivate              ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct TArray<class UUIEvent*> out_ActivatedEvents            ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIScreenObject::ActivateEventByClass ( int PlayerIndex, class UClass* EventClassToActivate, class UObject* InEventActivator, unsigned long bActivateImmediately, struct TArray<int> IndicesToActivate, struct TArray<class UUIEvent*>* out_ActivatedEvents )
{
	static UFunction* pFnActivateEventByClass = NULL;

	if ( ! pFnActivateEventByClass )
		pFnActivateEventByClass = (UFunction*) UObject::GObjObjects()->Data[ 32430 ];

	UUIScreenObject_execActivateEventByClass_Parms ActivateEventByClass_Parms;
	ActivateEventByClass_Parms.PlayerIndex = PlayerIndex;
	ActivateEventByClass_Parms.EventClassToActivate = EventClassToActivate;
	ActivateEventByClass_Parms.InEventActivator = InEventActivator;
	ActivateEventByClass_Parms.bActivateImmediately = bActivateImmediately;
	memcpy ( &ActivateEventByClass_Parms.IndicesToActivate, &IndicesToActivate, 0x10 );

	pFnActivateEventByClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateEventByClass, &ActivateEventByClass_Parms, NULL );

	pFnActivateEventByClass->FunctionFlags |= 0x400;

	if ( out_ActivatedEvents )
		memcpy ( out_ActivatedEvents, &ActivateEventByClass_Parms.out_ActivatedEvents, 0x10 );
};

// Function Engine.UIScreenObject.GetAspectRatio
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScreenObject::GetAspectRatio ( )
{
	static UFunction* pFnGetAspectRatio = NULL;

	if ( ! pFnGetAspectRatio )
		pFnGetAspectRatio = (UFunction*) UObject::GObjObjects()->Data[ 32428 ];

	UUIScreenObject_execGetAspectRatio_Parms GetAspectRatio_Parms;

	pFnGetAspectRatio->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAspectRatio, &GetAspectRatio_Parms, NULL );

	pFnGetAspectRatio->FunctionFlags |= 0x400;

	return GetAspectRatio_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetViewportHeight
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScreenObject::GetViewportHeight ( )
{
	static UFunction* pFnGetViewportHeight = NULL;

	if ( ! pFnGetViewportHeight )
		pFnGetViewportHeight = (UFunction*) UObject::GObjObjects()->Data[ 32426 ];

	UUIScreenObject_execGetViewportHeight_Parms GetViewportHeight_Parms;

	pFnGetViewportHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportHeight, &GetViewportHeight_Parms, NULL );

	pFnGetViewportHeight->FunctionFlags |= 0x400;

	return GetViewportHeight_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetViewportWidth
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScreenObject::GetViewportWidth ( )
{
	static UFunction* pFnGetViewportWidth = NULL;

	if ( ! pFnGetViewportWidth )
		pFnGetViewportWidth = (UFunction*) UObject::GObjObjects()->Data[ 32424 ];

	UUIScreenObject_execGetViewportWidth_Parms GetViewportWidth_Parms;

	pFnGetViewportWidth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportWidth, &GetViewportWidth_Parms, NULL );

	pFnGetViewportWidth->FunctionFlags |= 0x400;

	return GetViewportWidth_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetViewportSize
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector2D               out_ViewportSize               ( CPF_Parm | CPF_OutParm )

bool UUIScreenObject::GetViewportSize ( struct FVector2D* out_ViewportSize )
{
	static UFunction* pFnGetViewportSize = NULL;

	if ( ! pFnGetViewportSize )
		pFnGetViewportSize = (UFunction*) UObject::GObjObjects()->Data[ 32421 ];

	UUIScreenObject_execGetViewportSize_Parms GetViewportSize_Parms;

	pFnGetViewportSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportSize, &GetViewportSize_Parms, NULL );

	pFnGetViewportSize->FunctionFlags |= 0x400;

	if ( out_ViewportSize )
		memcpy ( out_ViewportSize, &GetViewportSize_Parms.out_ViewportSize, 0x8 );

	return GetViewportSize_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetViewportOrigin
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector2D               out_ViewportOrigin             ( CPF_Parm | CPF_OutParm )

bool UUIScreenObject::GetViewportOrigin ( struct FVector2D* out_ViewportOrigin )
{
	static UFunction* pFnGetViewportOrigin = NULL;

	if ( ! pFnGetViewportOrigin )
		pFnGetViewportOrigin = (UFunction*) UObject::GObjObjects()->Data[ 32418 ];

	UUIScreenObject_execGetViewportOrigin_Parms GetViewportOrigin_Parms;

	pFnGetViewportOrigin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportOrigin, &GetViewportOrigin_Parms, NULL );

	pFnGetViewportOrigin->FunctionFlags |= 0x400;

	if ( out_ViewportOrigin )
		memcpy ( out_ViewportOrigin, &GetViewportOrigin_Parms.out_ViewportOrigin, 0x8 );

	return GetViewportOrigin_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetViewportScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScreenObject::GetViewportScale ( )
{
	static UFunction* pFnGetViewportScale = NULL;

	if ( ! pFnGetViewportScale )
		pFnGetViewportScale = (UFunction*) UObject::GObjObjects()->Data[ 32416 ];

	UUIScreenObject_execGetViewportScale_Parms GetViewportScale_Parms;

	pFnGetViewportScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportScale, &GetViewportScale_Parms, NULL );

	pFnGetViewportScale->FunctionFlags |= 0x400;

	return GetViewportScale_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetViewportOffset
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector2D               out_ViewportOffset             ( CPF_Parm | CPF_OutParm )

bool UUIScreenObject::GetViewportOffset ( struct FVector2D* out_ViewportOffset )
{
	static UFunction* pFnGetViewportOffset = NULL;

	if ( ! pFnGetViewportOffset )
		pFnGetViewportOffset = (UFunction*) UObject::GObjObjects()->Data[ 32413 ];

	UUIScreenObject_execGetViewportOffset_Parms GetViewportOffset_Parms;

	pFnGetViewportOffset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportOffset, &GetViewportOffset_Parms, NULL );

	pFnGetViewportOffset->FunctionFlags |= 0x400;

	if ( out_ViewportOffset )
		memcpy ( out_ViewportOffset, &GetViewportOffset_Parms.out_ViewportOffset, 0x8 );

	return GetViewportOffset_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.RebuildNavigationLinks
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIScreenObject::RebuildNavigationLinks ( )
{
	static UFunction* pFnRebuildNavigationLinks = NULL;

	if ( ! pFnRebuildNavigationLinks )
		pFnRebuildNavigationLinks = (UFunction*) UObject::GObjObjects()->Data[ 32411 ];

	UUIScreenObject_execRebuildNavigationLinks_Parms RebuildNavigationLinks_Parms;

	pFnRebuildNavigationLinks->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRebuildNavigationLinks, &RebuildNavigationLinks_Parms, NULL );

	pFnRebuildNavigationLinks->FunctionFlags |= 0x400;

	return RebuildNavigationLinks_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.RequestPrimitiveReview
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bReinitializePrimitives        ( CPF_Parm )
// unsigned long                  bReviewPrimitiveUsage          ( CPF_Parm )

void UUIScreenObject::RequestPrimitiveReview ( unsigned long bReinitializePrimitives, unsigned long bReviewPrimitiveUsage )
{
	static UFunction* pFnRequestPrimitiveReview = NULL;

	if ( ! pFnRequestPrimitiveReview )
		pFnRequestPrimitiveReview = (UFunction*) UObject::GObjObjects()->Data[ 32408 ];

	UUIScreenObject_execRequestPrimitiveReview_Parms RequestPrimitiveReview_Parms;
	RequestPrimitiveReview_Parms.bReinitializePrimitives = bReinitializePrimitives;
	RequestPrimitiveReview_Parms.bReviewPrimitiveUsage = bReviewPrimitiveUsage;

	pFnRequestPrimitiveReview->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestPrimitiveReview, &RequestPrimitiveReview_Parms, NULL );

	pFnRequestPrimitiveReview->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.RequestSceneInputMaskUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScreenObject::RequestSceneInputMaskUpdate ( )
{
	static UFunction* pFnRequestSceneInputMaskUpdate = NULL;

	if ( ! pFnRequestSceneInputMaskUpdate )
		pFnRequestSceneInputMaskUpdate = (UFunction*) UObject::GObjObjects()->Data[ 32407 ];

	UUIScreenObject_execRequestSceneInputMaskUpdate_Parms RequestSceneInputMaskUpdate_Parms;

	pFnRequestSceneInputMaskUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestSceneInputMaskUpdate, &RequestSceneInputMaskUpdate_Parms, NULL );

	pFnRequestSceneInputMaskUpdate->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.RequestFormattingUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScreenObject::RequestFormattingUpdate ( )
{
	static UFunction* pFnRequestFormattingUpdate = NULL;

	if ( ! pFnRequestFormattingUpdate )
		pFnRequestFormattingUpdate = (UFunction*) UObject::GObjObjects()->Data[ 22075 ];

	UUIScreenObject_execRequestFormattingUpdate_Parms RequestFormattingUpdate_Parms;

	pFnRequestFormattingUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestFormattingUpdate, &RequestFormattingUpdate_Parms, NULL );

	pFnRequestFormattingUpdate->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.RequestSceneUpdate
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bDockingStackChanged           ( CPF_Parm )
// unsigned long                  bPositionsChanged              ( CPF_Parm )
// unsigned long                  bNavLinksOutdated              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bWidgetStylesChanged           ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::RequestSceneUpdate ( unsigned long bDockingStackChanged, unsigned long bPositionsChanged, unsigned long bNavLinksOutdated, unsigned long bWidgetStylesChanged )
{
	static UFunction* pFnRequestSceneUpdate = NULL;

	if ( ! pFnRequestSceneUpdate )
		pFnRequestSceneUpdate = (UFunction*) UObject::GObjObjects()->Data[ 32402 ];

	UUIScreenObject_execRequestSceneUpdate_Parms RequestSceneUpdate_Parms;
	RequestSceneUpdate_Parms.bDockingStackChanged = bDockingStackChanged;
	RequestSceneUpdate_Parms.bPositionsChanged = bPositionsChanged;
	RequestSceneUpdate_Parms.bNavLinksOutdated = bNavLinksOutdated;
	RequestSceneUpdate_Parms.bWidgetStylesChanged = bWidgetStylesChanged;

	pFnRequestSceneUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestSceneUpdate, &RequestSceneUpdate_Parms, NULL );

	pFnRequestSceneUpdate->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.GetDockClients
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bDirectDockClientsOnly         ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  TargetFace                     ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  SourceFace                     ( CPF_OptionalParm | CPF_Parm )
// struct TArray<class UUIObject*> DockClients                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int UUIScreenObject::GetDockClients ( unsigned long bDirectDockClientsOnly, unsigned char TargetFace, unsigned char SourceFace, struct TArray<class UUIObject*>* DockClients )
{
	static UFunction* pFnGetDockClients = NULL;

	if ( ! pFnGetDockClients )
		pFnGetDockClients = (UFunction*) UObject::GObjObjects()->Data[ 32395 ];

	UUIScreenObject_execGetDockClients_Parms GetDockClients_Parms;
	GetDockClients_Parms.bDirectDockClientsOnly = bDirectDockClientsOnly;
	GetDockClients_Parms.TargetFace = TargetFace;
	GetDockClients_Parms.SourceFace = SourceFace;

	pFnGetDockClients->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDockClients, &GetDockClients_Parms, NULL );

	pFnGetDockClients->FunctionFlags |= 0x400;

	if ( DockClients )
		memcpy ( DockClients, &GetDockClients_Parms.DockClients, 0x10 );

	return GetDockClients_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetObjectCount
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIScreenObject::GetObjectCount ( )
{
	static UFunction* pFnGetObjectCount = NULL;

	if ( ! pFnGetObjectCount )
		pFnGetObjectCount = (UFunction*) UObject::GObjObjects()->Data[ 32393 ];

	UUIScreenObject_execGetObjectCount_Parms GetObjectCount_Parms;

	pFnGetObjectCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetObjectCount, &GetObjectCount_Parms, NULL );

	pFnGetObjectCount->FunctionFlags |= 0x400;

	return GetObjectCount_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetChildren
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct TArray<class UUIObject*> ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )
// struct TArray<class UUIObject*> ExclusionSet                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

struct TArray<class UUIObject*> UUIScreenObject::GetChildren ( unsigned long bRecurse, struct TArray<class UUIObject*> ExclusionSet )
{
	static UFunction* pFnGetChildren = NULL;

	if ( ! pFnGetChildren )
		pFnGetChildren = (UFunction*) UObject::GObjObjects()->Data[ 32387 ];

	UUIScreenObject_execGetChildren_Parms GetChildren_Parms;
	GetChildren_Parms.bRecurse = bRecurse;
	memcpy ( &GetChildren_Parms.ExclusionSet, &ExclusionSet, 0x10 );

	pFnGetChildren->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetChildren, &GetChildren_Parms, NULL );

	pFnGetChildren->FunctionFlags |= 0x400;

	return GetChildren_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ContainsChildOfClass
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  SearchClass                    ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::ContainsChildOfClass ( class UClass* SearchClass, unsigned long bRecurse )
{
	static UFunction* pFnContainsChildOfClass = NULL;

	if ( ! pFnContainsChildOfClass )
		pFnContainsChildOfClass = (UFunction*) UObject::GObjObjects()->Data[ 32383 ];

	UUIScreenObject_execContainsChildOfClass_Parms ContainsChildOfClass_Parms;
	ContainsChildOfClass_Parms.SearchClass = SearchClass;
	ContainsChildOfClass_Parms.bRecurse = bRecurse;

	pFnContainsChildOfClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnContainsChildOfClass, &ContainsChildOfClass_Parms, NULL );

	pFnContainsChildOfClass->FunctionFlags |= 0x400;

	return ContainsChildOfClass_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ContainsChild
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Child                          ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::ContainsChild ( class UUIObject* Child, unsigned long bRecurse )
{
	static UFunction* pFnContainsChild = NULL;

	if ( ! pFnContainsChild )
		pFnContainsChild = (UFunction*) UObject::GObjObjects()->Data[ 32379 ];

	UUIScreenObject_execContainsChild_Parms ContainsChild_Parms;
	ContainsChild_Parms.Child = Child;
	ContainsChild_Parms.bRecurse = bRecurse;

	pFnContainsChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnContainsChild, &ContainsChild_Parms, NULL );

	pFnContainsChild->FunctionFlags |= 0x400;

	return ContainsChild_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.FindChildIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )

int UUIScreenObject::FindChildIndex ( struct FName WidgetName )
{
	static UFunction* pFnFindChildIndex = NULL;

	if ( ! pFnFindChildIndex )
		pFnFindChildIndex = (UFunction*) UObject::GObjObjects()->Data[ 32376 ];

	UUIScreenObject_execFindChildIndex_Parms FindChildIndex_Parms;
	memcpy ( &FindChildIndex_Parms.WidgetName, &WidgetName, 0x8 );

	pFnFindChildIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindChildIndex, &FindChildIndex_Parms, NULL );

	pFnFindChildIndex->FunctionFlags |= 0x400;

	return FindChildIndex_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.FindChildUsingID
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FWIDGET_ID              WidgetID                       ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

class UUIObject* UUIScreenObject::FindChildUsingID ( struct FWIDGET_ID WidgetID, unsigned long bRecurse )
{
	static UFunction* pFnFindChildUsingID = NULL;

	if ( ! pFnFindChildUsingID )
		pFnFindChildUsingID = (UFunction*) UObject::GObjObjects()->Data[ 32372 ];

	UUIScreenObject_execFindChildUsingID_Parms FindChildUsingID_Parms;
	memcpy ( &FindChildUsingID_Parms.WidgetID, &WidgetID, 0x10 );
	FindChildUsingID_Parms.bRecurse = bRecurse;

	pFnFindChildUsingID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindChildUsingID, &FindChildUsingID_Parms, NULL );

	pFnFindChildUsingID->FunctionFlags |= 0x400;

	return FindChildUsingID_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.FindChild
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   WidgetName                     ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

class UUIObject* UUIScreenObject::FindChild ( struct FName WidgetName, unsigned long bRecurse )
{
	static UFunction* pFnFindChild = NULL;

	if ( ! pFnFindChild )
		pFnFindChild = (UFunction*) UObject::GObjObjects()->Data[ 32368 ];

	UUIScreenObject_execFindChild_Parms FindChild_Parms;
	memcpy ( &FindChild_Parms.WidgetName, &WidgetName, 0x8 );
	FindChild_Parms.bRecurse = bRecurse;

	pFnFindChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindChild, &FindChild_Parms, NULL );

	pFnFindChild->FunctionFlags |= 0x400;

	return FindChild_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ReplaceChild
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               ExistingChild                  ( CPF_Parm )
// class UUIObject*               NewChild                       ( CPF_Parm )

bool UUIScreenObject::ReplaceChild ( class UUIObject* ExistingChild, class UUIObject* NewChild )
{
	static UFunction* pFnReplaceChild = NULL;

	if ( ! pFnReplaceChild )
		pFnReplaceChild = (UFunction*) UObject::GObjObjects()->Data[ 32364 ];

	UUIScreenObject_execReplaceChild_Parms ReplaceChild_Parms;
	ReplaceChild_Parms.ExistingChild = ExistingChild;
	ReplaceChild_Parms.NewChild = NewChild;

	pFnReplaceChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReplaceChild, &ReplaceChild_Parms, NULL );

	pFnReplaceChild->FunctionFlags |= 0x400;

	return ReplaceChild_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ReparentChildren
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct TArray<class UUIObject*> ChildrenToReparent             ( CPF_Parm | CPF_NeedCtorLink )
// class UUIScreenObject*         NewParent                      ( CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::ReparentChildren ( struct TArray<class UUIObject*> ChildrenToReparent, class UUIScreenObject* NewParent, int InsertIndex )
{
	static UFunction* pFnReparentChildren = NULL;

	if ( ! pFnReparentChildren )
		pFnReparentChildren = (UFunction*) UObject::GObjObjects()->Data[ 32358 ];

	UUIScreenObject_execReparentChildren_Parms ReparentChildren_Parms;
	memcpy ( &ReparentChildren_Parms.ChildrenToReparent, &ChildrenToReparent, 0x10 );
	ReparentChildren_Parms.NewParent = NewParent;
	ReparentChildren_Parms.InsertIndex = InsertIndex;

	pFnReparentChildren->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReparentChildren, &ReparentChildren_Parms, NULL );

	pFnReparentChildren->FunctionFlags |= 0x400;

	return ReparentChildren_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.ReparentChild
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               CurrentChild                   ( CPF_Parm )
// class UUIScreenObject*         NewParent                      ( CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::ReparentChild ( class UUIObject* CurrentChild, class UUIScreenObject* NewParent, int InsertIndex )
{
	static UFunction* pFnReparentChild = NULL;

	if ( ! pFnReparentChild )
		pFnReparentChild = (UFunction*) UObject::GObjObjects()->Data[ 32353 ];

	UUIScreenObject_execReparentChild_Parms ReparentChild_Parms;
	ReparentChild_Parms.CurrentChild = CurrentChild;
	ReparentChild_Parms.NewParent = NewParent;
	ReparentChild_Parms.InsertIndex = InsertIndex;

	pFnReparentChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReparentChild, &ReparentChild_Parms, NULL );

	pFnReparentChild->FunctionFlags |= 0x400;

	return ReparentChild_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.RemoveChildren
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct TArray<class UUIObject*> ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct TArray<class UUIObject*> ChildrenToRemove               ( CPF_Parm | CPF_NeedCtorLink )

struct TArray<class UUIObject*> UUIScreenObject::RemoveChildren ( struct TArray<class UUIObject*> ChildrenToRemove )
{
	static UFunction* pFnRemoveChildren = NULL;

	if ( ! pFnRemoveChildren )
		pFnRemoveChildren = (UFunction*) UObject::GObjObjects()->Data[ 32348 ];

	UUIScreenObject_execRemoveChildren_Parms RemoveChildren_Parms;
	memcpy ( &RemoveChildren_Parms.ChildrenToRemove, &ChildrenToRemove, 0x10 );

	pFnRemoveChildren->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveChildren, &RemoveChildren_Parms, NULL );

	pFnRemoveChildren->FunctionFlags |= 0x400;

	return RemoveChildren_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.RemoveChild
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               ExistingChild                  ( CPF_Parm )
// struct TArray<class UUIObject*> ExclusionSet                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UUIScreenObject::RemoveChild ( class UUIObject* ExistingChild, struct TArray<class UUIObject*> ExclusionSet )
{
	static UFunction* pFnRemoveChild = NULL;

	if ( ! pFnRemoveChild )
		pFnRemoveChild = (UFunction*) UObject::GObjObjects()->Data[ 32343 ];

	UUIScreenObject_execRemoveChild_Parms RemoveChild_Parms;
	RemoveChild_Parms.ExistingChild = ExistingChild;
	memcpy ( &RemoveChild_Parms.ExclusionSet, &ExclusionSet, 0x10 );

	pFnRemoveChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveChild, &RemoveChild_Parms, NULL );

	pFnRemoveChild->FunctionFlags |= 0x400;

	return RemoveChild_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.InsertChild
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               NewChild                       ( CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRenameExisting                ( CPF_OptionalParm | CPF_Parm )

int UUIScreenObject::InsertChild ( class UUIObject* NewChild, int InsertIndex, unsigned long bRenameExisting )
{
	static UFunction* pFnInsertChild = NULL;

	if ( ! pFnInsertChild )
		pFnInsertChild = (UFunction*) UObject::GObjObjects()->Data[ 32338 ];

	UUIScreenObject_execInsertChild_Parms InsertChild_Parms;
	InsertChild_Parms.NewChild = NewChild;
	InsertChild_Parms.InsertIndex = InsertIndex;
	InsertChild_Parms.bRenameExisting = bRenameExisting;

	pFnInsertChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInsertChild, &InsertChild_Parms, NULL );

	pFnInsertChild->FunctionFlags |= 0x400;

	return InsertChild_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.Initialize
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                inOwnerScene                   ( CPF_Parm )
// class UUIObject*               InOwner                        ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::Initialize ( class UUIScene* inOwnerScene, class UUIObject* InOwner )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 32335 ];

	UUIScreenObject_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.inOwnerScene = inOwnerScene;
	Initialize_Parms.InOwner = InOwner;

	pFnInitialize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );

	pFnInitialize->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.InstanceUIPrefab
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIPrefabInstance*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIPrefab*               SourcePrefab                   ( CPF_Parm )
// struct FName                   PrefabInstanceName             ( CPF_OptionalParm | CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRenameExisting                ( CPF_OptionalParm | CPF_Parm )
// struct FVector2D               PlacementLocation              ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm )

class UUIPrefabInstance* UUIScreenObject::InstanceUIPrefab ( class UUIPrefab* SourcePrefab, struct FName PrefabInstanceName, int InsertIndex, unsigned long bRenameExisting, struct FVector2D* PlacementLocation )
{
	static UFunction* pFnInstanceUIPrefab = NULL;

	if ( ! pFnInstanceUIPrefab )
		pFnInstanceUIPrefab = (UFunction*) UObject::GObjObjects()->Data[ 32328 ];

	UUIScreenObject_execInstanceUIPrefab_Parms InstanceUIPrefab_Parms;
	InstanceUIPrefab_Parms.SourcePrefab = SourcePrefab;
	memcpy ( &InstanceUIPrefab_Parms.PrefabInstanceName, &PrefabInstanceName, 0x8 );
	InstanceUIPrefab_Parms.InsertIndex = InsertIndex;
	InstanceUIPrefab_Parms.bRenameExisting = bRenameExisting;

	pFnInstanceUIPrefab->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInstanceUIPrefab, &InstanceUIPrefab_Parms, NULL );

	pFnInstanceUIPrefab->FunctionFlags |= 0x400;

	if ( PlacementLocation )
		memcpy ( PlacementLocation, &InstanceUIPrefab_Parms.PlacementLocation, 0x8 );

	return InstanceUIPrefab_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.CreateWidget
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Owner                          ( CPF_Parm )
// class UClass*                  WidgetClass                    ( CPF_Parm )
// class UObject*                 WidgetArchetype                ( CPF_OptionalParm | CPF_Parm )
// struct FName                   WidgetName                     ( CPF_OptionalParm | CPF_Parm )

class UUIObject* UUIScreenObject::CreateWidget ( class UUIScreenObject* Owner, class UClass* WidgetClass, class UObject* WidgetArchetype, struct FName WidgetName )
{
	static UFunction* pFnCreateWidget = NULL;

	if ( ! pFnCreateWidget )
		pFnCreateWidget = (UFunction*) UObject::GObjObjects()->Data[ 32322 ];

	UUIScreenObject_execCreateWidget_Parms CreateWidget_Parms;
	CreateWidget_Parms.Owner = Owner;
	CreateWidget_Parms.WidgetClass = WidgetClass;
	CreateWidget_Parms.WidgetArchetype = WidgetArchetype;
	memcpy ( &CreateWidget_Parms.WidgetName, &WidgetName, 0x8 );

	pFnCreateWidget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateWidget, &CreateWidget_Parms, NULL );

	pFnCreateWidget->FunctionFlags |= 0x400;

	return CreateWidget_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.PlayUISound
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SoundCueName                   ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::PlayUISound ( struct FName SoundCueName, int PlayerIndex )
{
	static UFunction* pFnPlayUISound = NULL;

	if ( ! pFnPlayUISound )
		pFnPlayUISound = (UFunction*) UObject::GObjObjects()->Data[ 32318 ];

	UUIScreenObject_execPlayUISound_Parms PlayUISound_Parms;
	memcpy ( &PlayUISound_Parms.SoundCueName, &SoundCueName, 0x8 );
	PlayUISound_Parms.PlayerIndex = PlayerIndex;

	pFnPlayUISound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayUISound, &PlayUISound_Parms, NULL );

	pFnPlayUISound->FunctionFlags |= 0x400;

	return PlayUISound_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.GetPlayerOwner
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULocalPlayer*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

class ULocalPlayer* UUIScreenObject::GetPlayerOwner ( int PlayerIndex )
{
	static UFunction* pFnGetPlayerOwner = NULL;

	if ( ! pFnGetPlayerOwner )
		pFnGetPlayerOwner = (UFunction*) UObject::GObjObjects()->Data[ 32315 ];

	UUIScreenObject_execGetPlayerOwner_Parms GetPlayerOwner_Parms;
	GetPlayerOwner_Parms.PlayerIndex = PlayerIndex;

	pFnGetPlayerOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerOwner, &GetPlayerOwner_Parms, NULL );

	pFnGetPlayerOwner->FunctionFlags |= 0x400;

	return GetPlayerOwner_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.InitializePlayerTracking
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScreenObject::InitializePlayerTracking ( )
{
	static UFunction* pFnInitializePlayerTracking = NULL;

	if ( ! pFnInitializePlayerTracking )
		pFnInitializePlayerTracking = (UFunction*) UObject::GObjObjects()->Data[ 32314 ];

	UUIScreenObject_execInitializePlayerTracking_Parms InitializePlayerTracking_Parms;

	pFnInitializePlayerTracking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializePlayerTracking, &InitializePlayerTracking_Parms, NULL );

	pFnInitializePlayerTracking->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.RemovePlayerData
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            RemovedPlayer                  ( CPF_Parm )

void UUIScreenObject::RemovePlayerData ( int PlayerIndex, class ULocalPlayer* RemovedPlayer )
{
	static UFunction* pFnRemovePlayerData = NULL;

	if ( ! pFnRemovePlayerData )
		pFnRemovePlayerData = (UFunction*) UObject::GObjObjects()->Data[ 32311 ];

	UUIScreenObject_execRemovePlayerData_Parms RemovePlayerData_Parms;
	RemovePlayerData_Parms.PlayerIndex = PlayerIndex;
	RemovePlayerData_Parms.RemovedPlayer = RemovedPlayer;

	pFnRemovePlayerData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemovePlayerData, &RemovePlayerData_Parms, NULL );

	pFnRemovePlayerData->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.CreatePlayerData
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            AddedPlayer                    ( CPF_Parm )

void UUIScreenObject::CreatePlayerData ( int PlayerIndex, class ULocalPlayer* AddedPlayer )
{
	static UFunction* pFnCreatePlayerData = NULL;

	if ( ! pFnCreatePlayerData )
		pFnCreatePlayerData = (UFunction*) UObject::GObjObjects()->Data[ 32308 ];

	UUIScreenObject_execCreatePlayerData_Parms CreatePlayerData_Parms;
	CreatePlayerData_Parms.PlayerIndex = PlayerIndex;
	CreatePlayerData_Parms.AddedPlayer = AddedPlayer;

	pFnCreatePlayerData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreatePlayerData, &CreatePlayerData_Parms, NULL );

	pFnCreatePlayerData->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.SetZDepth
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewZDepth                      ( CPF_Parm )
// unsigned long                  bPropagateToChildren           ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::SetZDepth ( float NewZDepth, unsigned long bPropagateToChildren )
{
	static UFunction* pFnSetZDepth = NULL;

	if ( ! pFnSetZDepth )
		pFnSetZDepth = (UFunction*) UObject::GObjObjects()->Data[ 32305 ];

	UUIScreenObject_execSetZDepth_Parms SetZDepth_Parms;
	SetZDepth_Parms.NewZDepth = NewZDepth;
	SetZDepth_Parms.bPropagateToChildren = bPropagateToChildren;

	pFnSetZDepth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetZDepth, &SetZDepth_Parms, NULL );

	pFnSetZDepth->FunctionFlags |= 0x400;
};

// Function Engine.UIScreenObject.GetZDepth
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScreenObject::GetZDepth ( )
{
	static UFunction* pFnGetZDepth = NULL;

	if ( ! pFnGetZDepth )
		pFnGetZDepth = (UFunction*) UObject::GObjObjects()->Data[ 32303 ];

	UUIScreenObject_execGetZDepth_Parms GetZDepth_Parms;

	pFnGetZDepth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetZDepth, &GetZDepth_Parms, NULL );

	pFnGetZDepth->FunctionFlags |= 0x400;

	return GetZDepth_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsHidden
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIncludeParents                ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::IsHidden ( unsigned long bIncludeParents )
{
	static UFunction* pFnIsHidden = NULL;

	if ( ! pFnIsHidden )
		pFnIsHidden = (UFunction*) UObject::GObjObjects()->Data[ 32300 ];

	UUIScreenObject_execIsHidden_Parms IsHidden_Parms;
	IsHidden_Parms.bIncludeParents = bIncludeParents;

	pFnIsHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHidden, &IsHidden_Parms, NULL );

	pFnIsHidden->FunctionFlags |= 0x400;

	return IsHidden_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsVisible
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIncludeParents                ( CPF_OptionalParm | CPF_Parm )

bool UUIScreenObject::IsVisible ( unsigned long bIncludeParents )
{
	static UFunction* pFnIsVisible = NULL;

	if ( ! pFnIsVisible )
		pFnIsVisible = (UFunction*) UObject::GObjObjects()->Data[ 32297 ];

	UUIScreenObject_execIsVisible_Parms IsVisible_Parms;
	IsVisible_Parms.bIncludeParents = bIncludeParents;

	pFnIsVisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsVisible, &IsVisible_Parms, NULL );

	pFnIsVisible->FunctionFlags |= 0x400;

	return IsVisible_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.IsInitialized
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIScreenObject::IsInitialized ( )
{
	static UFunction* pFnIsInitialized = NULL;

	if ( ! pFnIsInitialized )
		pFnIsInitialized = (UFunction*) UObject::GObjObjects()->Data[ 32295 ];

	UUIScreenObject_execIsInitialized_Parms IsInitialized_Parms;

	pFnIsInitialized->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInitialized, &IsInitialized_Parms, NULL );

	pFnIsInitialized->FunctionFlags |= 0x400;

	return IsInitialized_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.OnInitialSceneUpdate
// [0x00120000] 
// Parameters infos:

void UUIScreenObject::OnInitialSceneUpdate ( )
{
	static UFunction* pFnOnInitialSceneUpdate = NULL;

	if ( ! pFnOnInitialSceneUpdate )
		pFnOnInitialSceneUpdate = (UFunction*) UObject::GObjObjects()->Data[ 32294 ];

	UUIScreenObject_execOnInitialSceneUpdate_Parms OnInitialSceneUpdate_Parms;

	this->ProcessEvent ( pFnOnInitialSceneUpdate, &OnInitialSceneUpdate_Parms, NULL );
};

// Function Engine.UIScreenObject.NotifyVisibilityChanged
// [0x00120000] 
// Parameters infos:
// class UUIScreenObject*         SourceWidget                   ( CPF_Parm )
// unsigned long                  bIsVisible                     ( CPF_Parm )

void UUIScreenObject::NotifyVisibilityChanged ( class UUIScreenObject* SourceWidget, unsigned long bIsVisible )
{
	static UFunction* pFnNotifyVisibilityChanged = NULL;

	if ( ! pFnNotifyVisibilityChanged )
		pFnNotifyVisibilityChanged = (UFunction*) UObject::GObjObjects()->Data[ 32291 ];

	UUIScreenObject_execNotifyVisibilityChanged_Parms NotifyVisibilityChanged_Parms;
	NotifyVisibilityChanged_Parms.SourceWidget = SourceWidget;
	NotifyVisibilityChanged_Parms.bIsVisible = bIsVisible;

	this->ProcessEvent ( pFnNotifyVisibilityChanged, &NotifyVisibilityChanged_Parms, NULL );
};

// Function Engine.UIScreenObject.NotifyActiveStateChanged
// [0x00124000] 
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// class UUIState*                NewlyActiveState               ( CPF_Parm )
// class UUIState*                PreviouslyActiveState          ( CPF_OptionalParm | CPF_Parm )

void UUIScreenObject::NotifyActiveStateChanged ( class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState )
{
	static UFunction* pFnNotifyActiveStateChanged = NULL;

	if ( ! pFnNotifyActiveStateChanged )
		pFnNotifyActiveStateChanged = (UFunction*) UObject::GObjObjects()->Data[ 32286 ];

	UUIScreenObject_execNotifyActiveStateChanged_Parms NotifyActiveStateChanged_Parms;
	NotifyActiveStateChanged_Parms.Sender = Sender;
	NotifyActiveStateChanged_Parms.PlayerIndex = PlayerIndex;
	NotifyActiveStateChanged_Parms.NewlyActiveState = NewlyActiveState;
	NotifyActiveStateChanged_Parms.PreviouslyActiveState = PreviouslyActiveState;

	this->ProcessEvent ( pFnNotifyActiveStateChanged, &NotifyActiveStateChanged_Parms, NULL );
};

// Function Engine.UIScreenObject.NotifyResolutionChanged
// [0x00520000] 
// Parameters infos:
// struct FVector2D               OldViewportsize                ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FVector2D               NewViewportSize                ( CPF_Const | CPF_Parm | CPF_OutParm )

void UUIScreenObject::NotifyResolutionChanged ( struct FVector2D* OldViewportsize, struct FVector2D* NewViewportSize )
{
	static UFunction* pFnNotifyResolutionChanged = NULL;

	if ( ! pFnNotifyResolutionChanged )
		pFnNotifyResolutionChanged = (UFunction*) UObject::GObjObjects()->Data[ 32283 ];

	UUIScreenObject_execNotifyResolutionChanged_Parms NotifyResolutionChanged_Parms;

	this->ProcessEvent ( pFnNotifyResolutionChanged, &NotifyResolutionChanged_Parms, NULL );

	if ( OldViewportsize )
		memcpy ( OldViewportsize, &NotifyResolutionChanged_Parms.OldViewportsize, 0x8 );

	if ( NewViewportSize )
		memcpy ( NewViewportSize, &NotifyResolutionChanged_Parms.NewViewportSize, 0x8 );
};

// Function Engine.UIScreenObject.NotifyPositionChanged
// [0x00120000] 
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )

void UUIScreenObject::NotifyPositionChanged ( class UUIScreenObject* Sender )
{
	static UFunction* pFnNotifyPositionChanged = NULL;

	if ( ! pFnNotifyPositionChanged )
		pFnNotifyPositionChanged = (UFunction*) UObject::GObjObjects()->Data[ 32281 ];

	UUIScreenObject_execNotifyPositionChanged_Parms NotifyPositionChanged_Parms;
	NotifyPositionChanged_Parms.Sender = Sender;

	this->ProcessEvent ( pFnNotifyPositionChanged, &NotifyPositionChanged_Parms, NULL );
};

// Function Engine.UIScreenObject.OnProcessInputAxis
// [0x00520000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FSubscribedInputEventParameters EventParms                     ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUIScreenObject::OnProcessInputAxis ( struct FSubscribedInputEventParameters* EventParms )
{
	static UFunction* pFnOnProcessInputAxis = NULL;

	if ( ! pFnOnProcessInputAxis )
		pFnOnProcessInputAxis = (UFunction*) UObject::GObjObjects()->Data[ 32278 ];

	UUIScreenObject_execOnProcessInputAxis_Parms OnProcessInputAxis_Parms;

	this->ProcessEvent ( pFnOnProcessInputAxis, &OnProcessInputAxis_Parms, NULL );

	if ( EventParms )
		memcpy ( EventParms, &OnProcessInputAxis_Parms.EventParms, 0x28 );

	return OnProcessInputAxis_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.OnProcessInputKey
// [0x00520000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FSubscribedInputEventParameters EventParms                     ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUIScreenObject::OnProcessInputKey ( struct FSubscribedInputEventParameters* EventParms )
{
	static UFunction* pFnOnProcessInputKey = NULL;

	if ( ! pFnOnProcessInputKey )
		pFnOnProcessInputKey = (UFunction*) UObject::GObjObjects()->Data[ 32275 ];

	UUIScreenObject_execOnProcessInputKey_Parms OnProcessInputKey_Parms;

	this->ProcessEvent ( pFnOnProcessInputKey, &OnProcessInputKey_Parms, NULL );

	if ( EventParms )
		memcpy ( EventParms, &OnProcessInputKey_Parms.EventParms, 0x28 );

	return OnProcessInputKey_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.OnRawInputAxis
// [0x00520000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FInputEventParameters   EventParms                     ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUIScreenObject::OnRawInputAxis ( struct FInputEventParameters* EventParms )
{
	static UFunction* pFnOnRawInputAxis = NULL;

	if ( ! pFnOnRawInputAxis )
		pFnOnRawInputAxis = (UFunction*) UObject::GObjObjects()->Data[ 32272 ];

	UUIScreenObject_execOnRawInputAxis_Parms OnRawInputAxis_Parms;

	this->ProcessEvent ( pFnOnRawInputAxis, &OnRawInputAxis_Parms, NULL );

	if ( EventParms )
		memcpy ( EventParms, &OnRawInputAxis_Parms.EventParms, 0x20 );

	return OnRawInputAxis_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.OnRawInputKey
// [0x00520000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FInputEventParameters   EventParms                     ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUIScreenObject::OnRawInputKey ( struct FInputEventParameters* EventParms )
{
	static UFunction* pFnOnRawInputKey = NULL;

	if ( ! pFnOnRawInputKey )
		pFnOnRawInputKey = (UFunction*) UObject::GObjObjects()->Data[ 32269 ];

	UUIScreenObject_execOnRawInputKey_Parms OnRawInputKey_Parms;

	this->ProcessEvent ( pFnOnRawInputKey, &OnRawInputKey_Parms, NULL );

	if ( EventParms )
		memcpy ( EventParms, &OnRawInputKey_Parms.EventParms, 0x20 );

	return OnRawInputKey_Parms.ReturnValue;
};

// Function Engine.UIScreenObject.NotifyActiveSkinChanged
// [0x00120000] 
// Parameters infos:

void UUIScreenObject::NotifyActiveSkinChanged ( )
{
	static UFunction* pFnNotifyActiveSkinChanged = NULL;

	if ( ! pFnNotifyActiveSkinChanged )
		pFnNotifyActiveSkinChanged = (UFunction*) UObject::GObjObjects()->Data[ 32268 ];

	UUIScreenObject_execNotifyActiveSkinChanged_Parms NotifyActiveSkinChanged_Parms;

	this->ProcessEvent ( pFnNotifyActiveSkinChanged, &NotifyActiveSkinChanged_Parms, NULL );
};

// Function Engine.UIComp_Event.UnregisterInputEvents
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIState*                InputEventOwner                ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIComp_Event::UnregisterInputEvents ( class UUIState* InputEventOwner, int PlayerIndex )
{
	static UFunction* pFnUnregisterInputEvents = NULL;

	if ( ! pFnUnregisterInputEvents )
		pFnUnregisterInputEvents = (UFunction*) UObject::GObjObjects()->Data[ 32869 ];

	UUIComp_Event_execUnregisterInputEvents_Parms UnregisterInputEvents_Parms;
	UnregisterInputEvents_Parms.InputEventOwner = InputEventOwner;
	UnregisterInputEvents_Parms.PlayerIndex = PlayerIndex;

	pFnUnregisterInputEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnregisterInputEvents, &UnregisterInputEvents_Parms, NULL );

	pFnUnregisterInputEvents->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_Event.RegisterInputEvents
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIState*                InputEventOwner                ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIComp_Event::RegisterInputEvents ( class UUIState* InputEventOwner, int PlayerIndex )
{
	static UFunction* pFnRegisterInputEvents = NULL;

	if ( ! pFnRegisterInputEvents )
		pFnRegisterInputEvents = (UFunction*) UObject::GObjObjects()->Data[ 32866 ];

	UUIComp_Event_execRegisterInputEvents_Parms RegisterInputEvents_Parms;
	RegisterInputEvents_Parms.InputEventOwner = InputEventOwner;
	RegisterInputEvents_Parms.PlayerIndex = PlayerIndex;

	pFnRegisterInputEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterInputEvents, &RegisterInputEvents_Parms, NULL );

	pFnRegisterInputEvents->FunctionFlags |= 0x400;
};

// Function Engine.UIEventContainer.RemoveSequenceObjects
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct TArray<class USequenceObject*> ObjectsToRemove                ( CPF_Parm | CPF_NeedCtorLink )

void UUIEventContainer::RemoveSequenceObjects ( struct TArray<class USequenceObject*> ObjectsToRemove )
{
	static UFunction* pFnRemoveSequenceObjects = NULL;

	if ( ! pFnRemoveSequenceObjects )
		pFnRemoveSequenceObjects = (UFunction*) UObject::GObjObjects()->Data[ 35067 ];

	UUIEventContainer_execRemoveSequenceObjects_Parms RemoveSequenceObjects_Parms;
	memcpy ( &RemoveSequenceObjects_Parms.ObjectsToRemove, &ObjectsToRemove, 0x10 );

	pFnRemoveSequenceObjects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveSequenceObjects, &RemoveSequenceObjects_Parms, NULL );

	pFnRemoveSequenceObjects->FunctionFlags |= 0x400;
};

// Function Engine.UIEventContainer.RemoveSequenceObject
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USequenceObject*         ObjectToRemove                 ( CPF_Parm )

void UUIEventContainer::RemoveSequenceObject ( class USequenceObject* ObjectToRemove )
{
	static UFunction* pFnRemoveSequenceObject = NULL;

	if ( ! pFnRemoveSequenceObject )
		pFnRemoveSequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 35065 ];

	UUIEventContainer_execRemoveSequenceObject_Parms RemoveSequenceObject_Parms;
	RemoveSequenceObject_Parms.ObjectToRemove = ObjectToRemove;

	pFnRemoveSequenceObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveSequenceObject, &RemoveSequenceObject_Parms, NULL );

	pFnRemoveSequenceObject->FunctionFlags |= 0x400;
};

// Function Engine.UIEventContainer.AddSequenceObject
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USequenceObject*         NewObj                         ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

bool UUIEventContainer::AddSequenceObject ( class USequenceObject* NewObj, unsigned long bRecurse )
{
	static UFunction* pFnAddSequenceObject = NULL;

	if ( ! pFnAddSequenceObject )
		pFnAddSequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 35061 ];

	UUIEventContainer_execAddSequenceObject_Parms AddSequenceObject_Parms;
	AddSequenceObject_Parms.NewObj = NewObj;
	AddSequenceObject_Parms.bRecurse = bRecurse;

	pFnAddSequenceObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSequenceObject, &AddSequenceObject_Parms, NULL );

	pFnAddSequenceObject->FunctionFlags |= 0x400;

	return AddSequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEventContainer.GetUIEvents
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  LimitClass                     ( CPF_OptionalParm | CPF_Parm )
// struct TArray<class UUIEvent*> out_Events                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIEventContainer::GetUIEvents ( class UClass* LimitClass, struct TArray<class UUIEvent*>* out_Events )
{
	static UFunction* pFnGetUIEvents = NULL;

	if ( ! pFnGetUIEvents )
		pFnGetUIEvents = (UFunction*) UObject::GObjObjects()->Data[ 35057 ];

	UUIEventContainer_execGetUIEvents_Parms GetUIEvents_Parms;
	GetUIEvents_Parms.LimitClass = LimitClass;

	pFnGetUIEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUIEvents, &GetUIEvents_Parms, NULL );

	pFnGetUIEvents->FunctionFlags |= 0x400;

	if ( out_Events )
		memcpy ( out_Events, &GetUIEvents_Parms.out_Events, 0x10 );
};

// Function Engine.DataStoreClient.DebugDumpDataStoreInfo
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bVerbose                       ( CPF_Parm )

void UDataStoreClient::DebugDumpDataStoreInfo ( unsigned long bVerbose )
{
	static UFunction* pFnDebugDumpDataStoreInfo = NULL;

	if ( ! pFnDebugDumpDataStoreInfo )
		pFnDebugDumpDataStoreInfo = (UFunction*) UObject::GObjObjects()->Data[ 18182 ];

	UDataStoreClient_execDebugDumpDataStoreInfo_Parms DebugDumpDataStoreInfo_Parms;
	DebugDumpDataStoreInfo_Parms.bVerbose = bVerbose;

	this->ProcessEvent ( pFnDebugDumpDataStoreInfo, &DebugDumpDataStoreInfo_Parms, NULL );
};

// Function Engine.DataStoreClient.NotifyGameSessionEnded
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UDataStoreClient::eventNotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 18177 ];

	UDataStoreClient_eventNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );
};

// Function Engine.DataStoreClient.FindDataStoreClass
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  RequiredMetaClass              ( CPF_Parm )

class UClass* UDataStoreClient::FindDataStoreClass ( class UClass* RequiredMetaClass )
{
	static UFunction* pFnFindDataStoreClass = NULL;

	if ( ! pFnFindDataStoreClass )
		pFnFindDataStoreClass = (UFunction*) UObject::GObjObjects()->Data[ 10174 ];

	UDataStoreClient_execFindDataStoreClass_Parms FindDataStoreClass_Parms;
	FindDataStoreClass_Parms.RequiredMetaClass = RequiredMetaClass;

	this->ProcessEvent ( pFnFindDataStoreClass, &FindDataStoreClass_Parms, NULL );

	return FindDataStoreClass_Parms.ReturnValue;
};

// Function Engine.DataStoreClient.GetPlayerDataStoreClasses
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// struct TArray<class UClass*>   out_DataStoreClasses           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UDataStoreClient::GetPlayerDataStoreClasses ( struct TArray<class UClass*>* out_DataStoreClasses )
{
	static UFunction* pFnGetPlayerDataStoreClasses = NULL;

	if ( ! pFnGetPlayerDataStoreClasses )
		pFnGetPlayerDataStoreClasses = (UFunction*) UObject::GObjObjects()->Data[ 10185 ];

	UDataStoreClient_execGetPlayerDataStoreClasses_Parms GetPlayerDataStoreClasses_Parms;

	this->ProcessEvent ( pFnGetPlayerDataStoreClasses, &GetPlayerDataStoreClasses_Parms, NULL );

	if ( out_DataStoreClasses )
		memcpy ( out_DataStoreClasses, &GetPlayerDataStoreClasses_Parms.out_DataStoreClasses, 0x10 );
};

// Function Engine.DataStoreClient.FindPlayerDataStoreIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

int UDataStoreClient::FindPlayerDataStoreIndex ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnFindPlayerDataStoreIndex = NULL;

	if ( ! pFnFindPlayerDataStoreIndex )
		pFnFindPlayerDataStoreIndex = (UFunction*) UObject::GObjObjects()->Data[ 18169 ];

	UDataStoreClient_execFindPlayerDataStoreIndex_Parms FindPlayerDataStoreIndex_Parms;
	FindPlayerDataStoreIndex_Parms.PlayerOwner = PlayerOwner;

	pFnFindPlayerDataStoreIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPlayerDataStoreIndex, &FindPlayerDataStoreIndex_Parms, NULL );

	pFnFindPlayerDataStoreIndex->FunctionFlags |= 0x400;

	return FindPlayerDataStoreIndex_Parms.ReturnValue;
};

// Function Engine.DataStoreClient.GetAvailableDataStores
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                CurrentScene                   ( CPF_Parm )
// struct TArray<class UUIDataStore*> out_DataStores                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UDataStoreClient::GetAvailableDataStores ( class UUIScene* CurrentScene, struct TArray<class UUIDataStore*>* out_DataStores )
{
	static UFunction* pFnGetAvailableDataStores = NULL;

	if ( ! pFnGetAvailableDataStores )
		pFnGetAvailableDataStores = (UFunction*) UObject::GObjObjects()->Data[ 18165 ];

	UDataStoreClient_execGetAvailableDataStores_Parms GetAvailableDataStores_Parms;
	GetAvailableDataStores_Parms.CurrentScene = CurrentScene;

	pFnGetAvailableDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAvailableDataStores, &GetAvailableDataStores_Parms, NULL );

	pFnGetAvailableDataStores->FunctionFlags |= 0x400;

	if ( out_DataStores )
		memcpy ( out_DataStores, &GetAvailableDataStores_Parms.out_DataStores, 0x10 );
};

// Function Engine.DataStoreClient.UnregisterDataStore
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIDataStore*            DataStore                      ( CPF_Parm )

bool UDataStoreClient::UnregisterDataStore ( class UUIDataStore* DataStore )
{
	static UFunction* pFnUnregisterDataStore = NULL;

	if ( ! pFnUnregisterDataStore )
		pFnUnregisterDataStore = (UFunction*) UObject::GObjObjects()->Data[ 10192 ];

	UDataStoreClient_execUnregisterDataStore_Parms UnregisterDataStore_Parms;
	UnregisterDataStore_Parms.DataStore = DataStore;

	pFnUnregisterDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnregisterDataStore, &UnregisterDataStore_Parms, NULL );

	pFnUnregisterDataStore->FunctionFlags |= 0x400;

	return UnregisterDataStore_Parms.ReturnValue;
};

// Function Engine.DataStoreClient.RegisterDataStore
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIDataStore*            DataStore                      ( CPF_Parm )
// class ULocalPlayer*            PlayerOwner                    ( CPF_OptionalParm | CPF_Parm )

bool UDataStoreClient::RegisterDataStore ( class UUIDataStore* DataStore, class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnRegisterDataStore = NULL;

	if ( ! pFnRegisterDataStore )
		pFnRegisterDataStore = (UFunction*) UObject::GObjObjects()->Data[ 10171 ];

	UDataStoreClient_execRegisterDataStore_Parms RegisterDataStore_Parms;
	RegisterDataStore_Parms.DataStore = DataStore;
	RegisterDataStore_Parms.PlayerOwner = PlayerOwner;

	pFnRegisterDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterDataStore, &RegisterDataStore_Parms, NULL );

	pFnRegisterDataStore->FunctionFlags |= 0x400;

	return RegisterDataStore_Parms.ReturnValue;
};

// Function Engine.DataStoreClient.CreateDataStore
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  DataStoreClass                 ( CPF_Parm )

class UUIDataStore* UDataStoreClient::CreateDataStore ( class UClass* DataStoreClass )
{
	static UFunction* pFnCreateDataStore = NULL;

	if ( ! pFnCreateDataStore )
		pFnCreateDataStore = (UFunction*) UObject::GObjObjects()->Data[ 10168 ];

	UDataStoreClient_execCreateDataStore_Parms CreateDataStore_Parms;
	CreateDataStore_Parms.DataStoreClass = DataStoreClass;

	pFnCreateDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateDataStore, &CreateDataStore_Parms, NULL );

	pFnCreateDataStore->FunctionFlags |= 0x400;

	return CreateDataStore_Parms.ReturnValue;
};

// Function Engine.DataStoreClient.FindDataStore
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DataStoreTag                   ( CPF_Parm )
// class ULocalPlayer*            PlayerOwner                    ( CPF_OptionalParm | CPF_Parm )

class UUIDataStore* UDataStoreClient::FindDataStore ( struct FName DataStoreTag, class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnFindDataStore = NULL;

	if ( ! pFnFindDataStore )
		pFnFindDataStore = (UFunction*) UObject::GObjObjects()->Data[ 10166 ];

	UDataStoreClient_execFindDataStore_Parms FindDataStore_Parms;
	memcpy ( &FindDataStore_Parms.DataStoreTag, &DataStoreTag, 0x8 );
	FindDataStore_Parms.PlayerOwner = PlayerOwner;

	pFnFindDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindDataStore, &FindDataStore_Parms, NULL );

	pFnFindDataStore->FunctionFlags |= 0x400;

	return FindDataStore_Parms.ReturnValue;
};

// Function Engine.Interaction.NotifyPlayerRemoved
// [0x00020000] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            RemovedPlayer                  ( CPF_Parm )

void UInteraction::NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer )
{
	static UFunction* pFnNotifyPlayerRemoved = NULL;

	if ( ! pFnNotifyPlayerRemoved )
		pFnNotifyPlayerRemoved = (UFunction*) UObject::GObjObjects()->Data[ 17320 ];

	UInteraction_execNotifyPlayerRemoved_Parms NotifyPlayerRemoved_Parms;
	NotifyPlayerRemoved_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerRemoved_Parms.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Parms, NULL );
};

// Function Engine.Interaction.NotifyPlayerAdded
// [0x00020000] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            AddedPlayer                    ( CPF_Parm )

void UInteraction::NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer )
{
	static UFunction* pFnNotifyPlayerAdded = NULL;

	if ( ! pFnNotifyPlayerAdded )
		pFnNotifyPlayerAdded = (UFunction*) UObject::GObjObjects()->Data[ 17317 ];

	UInteraction_execNotifyPlayerAdded_Parms NotifyPlayerAdded_Parms;
	NotifyPlayerAdded_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerAdded_Parms.AddedPlayer = AddedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerAdded, &NotifyPlayerAdded_Parms, NULL );
};

// Function Engine.Interaction.NotifyGameSessionEnded
// [0x00020000] 
// Parameters infos:

void UInteraction::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 17316 ];

	UInteraction_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );
};

// Function Engine.Interaction.Initialized
// [0x00020000] 
// Parameters infos:

void UInteraction::Initialized ( )
{
	static UFunction* pFnInitialized = NULL;

	if ( ! pFnInitialized )
		pFnInitialized = (UFunction*) UObject::GObjObjects()->Data[ 17315 ];

	UInteraction_execInitialized_Parms Initialized_Parms;

	this->ProcessEvent ( pFnInitialized, &Initialized_Parms, NULL );
};

// Function Engine.Interaction.OnInitialize
// [0x00120000] 
// Parameters infos:

void UInteraction::OnInitialize ( )
{
	static UFunction* pFnOnInitialize = NULL;

	if ( ! pFnOnInitialize )
		pFnOnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 17314 ];

	UInteraction_execOnInitialize_Parms OnInitialize_Parms;

	this->ProcessEvent ( pFnOnInitialize, &OnInitialize_Parms, NULL );
};

// Function Engine.Interaction.Init
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UInteraction::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 17313 ];

	UInteraction_execInit_Parms Init_Parms;

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;
};

// Function Engine.Interaction.PostRender
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UInteraction::eventPostRender ( class UCanvas* Canvas )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = (UFunction*) UObject::GObjObjects()->Data[ 17311 ];

	UInteraction_eventPostRender_Parms PostRender_Parms;
	PostRender_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );
};

// Function Engine.Interaction.Tick
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UInteraction::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 17309 ];

	UInteraction_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.Interaction.OnReceivedNativeInputChar
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FString                 Unicode                        ( CPF_Parm | CPF_NeedCtorLink )

bool UInteraction::OnReceivedNativeInputChar ( int ControllerId, struct FString Unicode )
{
	static UFunction* pFnOnReceivedNativeInputChar = NULL;

	if ( ! pFnOnReceivedNativeInputChar )
		pFnOnReceivedNativeInputChar = (UFunction*) UObject::GObjObjects()->Data[ 17305 ];

	UInteraction_execOnReceivedNativeInputChar_Parms OnReceivedNativeInputChar_Parms;
	OnReceivedNativeInputChar_Parms.ControllerId = ControllerId;
	memcpy ( &OnReceivedNativeInputChar_Parms.Unicode, &Unicode, 0x10 );

	this->ProcessEvent ( pFnOnReceivedNativeInputChar, &OnReceivedNativeInputChar_Parms, NULL );

	return OnReceivedNativeInputChar_Parms.ReturnValue;
};

// Function Engine.Interaction.OnReceivedNativeInputAxis
// [0x00124000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// float                          Delta                          ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool UInteraction::OnReceivedNativeInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad )
{
	static UFunction* pFnOnReceivedNativeInputAxis = NULL;

	if ( ! pFnOnReceivedNativeInputAxis )
		pFnOnReceivedNativeInputAxis = (UFunction*) UObject::GObjObjects()->Data[ 17298 ];

	UInteraction_execOnReceivedNativeInputAxis_Parms OnReceivedNativeInputAxis_Parms;
	OnReceivedNativeInputAxis_Parms.ControllerId = ControllerId;
	memcpy ( &OnReceivedNativeInputAxis_Parms.Key, &Key, 0x8 );
	OnReceivedNativeInputAxis_Parms.Delta = Delta;
	OnReceivedNativeInputAxis_Parms.DeltaTime = DeltaTime;
	OnReceivedNativeInputAxis_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnOnReceivedNativeInputAxis, &OnReceivedNativeInputAxis_Parms, NULL );

	return OnReceivedNativeInputAxis_Parms.ReturnValue;
};

// Function Engine.Interaction.OnReceivedNativeInputKey
// [0x00124000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  EventType                      ( CPF_Parm )
// float                          AmountDepressed                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool UInteraction::OnReceivedNativeInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad )
{
	static UFunction* pFnOnReceivedNativeInputKey = NULL;

	if ( ! pFnOnReceivedNativeInputKey )
		pFnOnReceivedNativeInputKey = (UFunction*) UObject::GObjObjects()->Data[ 17291 ];

	UInteraction_execOnReceivedNativeInputKey_Parms OnReceivedNativeInputKey_Parms;
	OnReceivedNativeInputKey_Parms.ControllerId = ControllerId;
	memcpy ( &OnReceivedNativeInputKey_Parms.Key, &Key, 0x8 );
	OnReceivedNativeInputKey_Parms.EventType = EventType;
	OnReceivedNativeInputKey_Parms.AmountDepressed = AmountDepressed;
	OnReceivedNativeInputKey_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnOnReceivedNativeInputKey, &OnReceivedNativeInputKey_Parms, NULL );

	return OnReceivedNativeInputKey_Parms.ReturnValue;
};

// Function Engine.Console.UpdateCompleteIndices
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UConsole::UpdateCompleteIndices ( )
{
	static UFunction* pFnUpdateCompleteIndices = NULL;

	if ( ! pFnUpdateCompleteIndices )
		pFnUpdateCompleteIndices = (UFunction*) UObject::GObjObjects()->Data[ 17409 ];

	UConsole_execUpdateCompleteIndices_Parms UpdateCompleteIndices_Parms;

	pFnUpdateCompleteIndices->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCompleteIndices, &UpdateCompleteIndices_Parms, NULL );

	pFnUpdateCompleteIndices->FunctionFlags |= 0x400;
};

// Function Engine.Console.BuildRuntimeAutoCompleteList
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bForce                         ( CPF_OptionalParm | CPF_Parm )

void UConsole::BuildRuntimeAutoCompleteList ( unsigned long bForce )
{
	static UFunction* pFnBuildRuntimeAutoCompleteList = NULL;

	if ( ! pFnBuildRuntimeAutoCompleteList )
		pFnBuildRuntimeAutoCompleteList = (UFunction*) UObject::GObjObjects()->Data[ 17407 ];

	UConsole_execBuildRuntimeAutoCompleteList_Parms BuildRuntimeAutoCompleteList_Parms;
	BuildRuntimeAutoCompleteList_Parms.bForce = bForce;

	pFnBuildRuntimeAutoCompleteList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBuildRuntimeAutoCompleteList, &BuildRuntimeAutoCompleteList_Parms, NULL );

	pFnBuildRuntimeAutoCompleteList->FunctionFlags |= 0x400;
};

// Function Engine.Console.AppendInputText
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

void UConsole::AppendInputText ( struct FString Text )
{
	static UFunction* pFnAppendInputText = NULL;

	if ( ! pFnAppendInputText )
		pFnAppendInputText = (UFunction*) UObject::GObjObjects()->Data[ 17404 ];

	UConsole_execAppendInputText_Parms AppendInputText_Parms;
	memcpy ( &AppendInputText_Parms.Text, &Text, 0x10 );

	this->ProcessEvent ( pFnAppendInputText, &AppendInputText_Parms, NULL );
};

// Function Engine.Console.ProcessControlKey
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  Event                          ( CPF_Parm )

bool UConsole::ProcessControlKey ( struct FName Key, unsigned char Event )
{
	static UFunction* pFnProcessControlKey = NULL;

	if ( ! pFnProcessControlKey )
		pFnProcessControlKey = (UFunction*) UObject::GObjObjects()->Data[ 17399 ];

	UConsole_execProcessControlKey_Parms ProcessControlKey_Parms;
	memcpy ( &ProcessControlKey_Parms.Key, &Key, 0x8 );
	ProcessControlKey_Parms.Event = Event;

	this->ProcessEvent ( pFnProcessControlKey, &ProcessControlKey_Parms, NULL );

	return ProcessControlKey_Parms.ReturnValue;
};

// Function Engine.Console.FlushPlayerInput
// [0x00020002] 
// Parameters infos:

void UConsole::FlushPlayerInput ( )
{
	static UFunction* pFnFlushPlayerInput = NULL;

	if ( ! pFnFlushPlayerInput )
		pFnFlushPlayerInput = (UFunction*) UObject::GObjObjects()->Data[ 17397 ];

	UConsole_execFlushPlayerInput_Parms FlushPlayerInput_Parms;

	this->ProcessEvent ( pFnFlushPlayerInput, &FlushPlayerInput_Parms, NULL );
};

// Function Engine.Console.IsUIMiniConsoleOpen
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UConsole::IsUIMiniConsoleOpen ( )
{
	static UFunction* pFnIsUIMiniConsoleOpen = NULL;

	if ( ! pFnIsUIMiniConsoleOpen )
		pFnIsUIMiniConsoleOpen = (UFunction*) UObject::GObjObjects()->Data[ 17395 ];

	UConsole_execIsUIMiniConsoleOpen_Parms IsUIMiniConsoleOpen_Parms;

	this->ProcessEvent ( pFnIsUIMiniConsoleOpen, &IsUIMiniConsoleOpen_Parms, NULL );

	return IsUIMiniConsoleOpen_Parms.ReturnValue;
};

// Function Engine.Console.IsUIConsoleOpen
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UConsole::IsUIConsoleOpen ( )
{
	static UFunction* pFnIsUIConsoleOpen = NULL;

	if ( ! pFnIsUIConsoleOpen )
		pFnIsUIConsoleOpen = (UFunction*) UObject::GObjObjects()->Data[ 17393 ];

	UConsole_execIsUIConsoleOpen_Parms IsUIConsoleOpen_Parms;

	this->ProcessEvent ( pFnIsUIConsoleOpen, &IsUIConsoleOpen_Parms, NULL );

	return IsUIConsoleOpen_Parms.ReturnValue;
};

// Function Engine.Console.InputChar
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FString                 Unicode                        ( CPF_Parm | CPF_NeedCtorLink )

bool UConsole::InputChar ( int ControllerId, struct FString Unicode )
{
	static UFunction* pFnInputChar = NULL;

	if ( ! pFnInputChar )
		pFnInputChar = (UFunction*) UObject::GObjObjects()->Data[ 17389 ];

	UConsole_execInputChar_Parms InputChar_Parms;
	InputChar_Parms.ControllerId = ControllerId;
	memcpy ( &InputChar_Parms.Unicode, &Unicode, 0x10 );

	this->ProcessEvent ( pFnInputChar, &InputChar_Parms, NULL );

	return InputChar_Parms.ReturnValue;
};

// Function Engine.Console.InputKey
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  Event                          ( CPF_Parm )
// float                          AmountDepressed                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool UConsole::InputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad )
{
	static UFunction* pFnInputKey = NULL;

	if ( ! pFnInputKey )
		pFnInputKey = (UFunction*) UObject::GObjObjects()->Data[ 11687 ];

	UConsole_execInputKey_Parms InputKey_Parms;
	InputKey_Parms.ControllerId = ControllerId;
	memcpy ( &InputKey_Parms.Key, &Key, 0x8 );
	InputKey_Parms.Event = Event;
	InputKey_Parms.AmountDepressed = AmountDepressed;
	InputKey_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnInputKey, &InputKey_Parms, NULL );

	return InputKey_Parms.ReturnValue;
};

// Function Engine.Console.PostRender_Console
// [0x00020000] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UConsole::PostRender_Console ( class UCanvas* Canvas )
{
	static UFunction* pFnPostRender_Console = NULL;

	if ( ! pFnPostRender_Console )
		pFnPostRender_Console = (UFunction*) UObject::GObjObjects()->Data[ 17379 ];

	UConsole_execPostRender_Console_Parms PostRender_Console_Parms;
	PostRender_Console_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnPostRender_Console, &PostRender_Console_Parms, NULL );
};

// Function Engine.Console.StartTyping
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void UConsole::StartTyping ( struct FString Text )
{
	static UFunction* pFnStartTyping = NULL;

	if ( ! pFnStartTyping )
		pFnStartTyping = (UFunction*) UObject::GObjObjects()->Data[ 17377 ];

	UConsole_execStartTyping_Parms StartTyping_Parms;
	memcpy ( &StartTyping_Parms.Text, &Text, 0x10 );

	this->ProcessEvent ( pFnStartTyping, &StartTyping_Parms, NULL );
};

// Function Engine.Console.OutputText
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void UConsole::eventOutputText ( struct FString Text )
{
	static UFunction* pFnOutputText = NULL;

	if ( ! pFnOutputText )
		pFnOutputText = (UFunction*) UObject::GObjObjects()->Data[ 17372 ];

	UConsole_eventOutputText_Parms OutputText_Parms;
	memcpy ( &OutputText_Parms.Text, &Text, 0x10 );

	this->ProcessEvent ( pFnOutputText, &OutputText_Parms, NULL );
};

// Function Engine.Console.OutputTextLine
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void UConsole::OutputTextLine ( struct FString Text )
{
	static UFunction* pFnOutputTextLine = NULL;

	if ( ! pFnOutputTextLine )
		pFnOutputTextLine = (UFunction*) UObject::GObjObjects()->Data[ 17369 ];

	UConsole_execOutputTextLine_Parms OutputTextLine_Parms;
	memcpy ( &OutputTextLine_Parms.Text, &Text, 0x10 );

	this->ProcessEvent ( pFnOutputTextLine, &OutputTextLine_Parms, NULL );
};

// Function Engine.Console.ClearOutput
// [0x00020002] 
// Parameters infos:

void UConsole::ClearOutput ( )
{
	static UFunction* pFnClearOutput = NULL;

	if ( ! pFnClearOutput )
		pFnClearOutput = (UFunction*) UObject::GObjObjects()->Data[ 17367 ];

	UConsole_execClearOutput_Parms ClearOutput_Parms;

	this->ProcessEvent ( pFnClearOutput, &ClearOutput_Parms, NULL );
};

// Function Engine.Console.ConsoleCommand
// [0x00020002] 
// Parameters infos:
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )

void UConsole::ConsoleCommand ( struct FString Command )
{
	static UFunction* pFnConsoleCommand = NULL;

	if ( ! pFnConsoleCommand )
		pFnConsoleCommand = (UFunction*) UObject::GObjObjects()->Data[ 17360 ];

	UConsole_execConsoleCommand_Parms ConsoleCommand_Parms;
	memcpy ( &ConsoleCommand_Parms.Command, &Command, 0x10 );

	this->ProcessEvent ( pFnConsoleCommand, &ConsoleCommand_Parms, NULL );
};

// Function Engine.Console.PurgeCommandFromHistory
// [0x00020002] 
// Parameters infos:
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )

void UConsole::PurgeCommandFromHistory ( struct FString Command )
{
	static UFunction* pFnPurgeCommandFromHistory = NULL;

	if ( ! pFnPurgeCommandFromHistory )
		pFnPurgeCommandFromHistory = (UFunction*) UObject::GObjObjects()->Data[ 17353 ];

	UConsole_execPurgeCommandFromHistory_Parms PurgeCommandFromHistory_Parms;
	memcpy ( &PurgeCommandFromHistory_Parms.Command, &Command, 0x10 );

	this->ProcessEvent ( pFnPurgeCommandFromHistory, &PurgeCommandFromHistory_Parms, NULL );
};

// Function Engine.Console.SetCursorPos
// [0x00020002] 
// Parameters infos:
// int                            Position                       ( CPF_Parm )

void UConsole::SetCursorPos ( int Position )
{
	static UFunction* pFnSetCursorPos = NULL;

	if ( ! pFnSetCursorPos )
		pFnSetCursorPos = (UFunction*) UObject::GObjObjects()->Data[ 17350 ];

	UConsole_execSetCursorPos_Parms SetCursorPos_Parms;
	SetCursorPos_Parms.Position = Position;

	this->ProcessEvent ( pFnSetCursorPos, &SetCursorPos_Parms, NULL );
};

// Function Engine.Console.SetInputText
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

void UConsole::SetInputText ( struct FString Text )
{
	static UFunction* pFnSetInputText = NULL;

	if ( ! pFnSetInputText )
		pFnSetInputText = (UFunction*) UObject::GObjObjects()->Data[ 17347 ];

	UConsole_execSetInputText_Parms SetInputText_Parms;
	memcpy ( &SetInputText_Parms.Text, &Text, 0x10 );

	this->ProcessEvent ( pFnSetInputText, &SetInputText_Parms, NULL );
};

// Function Engine.Console.Initialized
// [0x00020002] 
// Parameters infos:

void UConsole::Initialized ( )
{
	static UFunction* pFnInitialized = NULL;

	if ( ! pFnInitialized )
		pFnInitialized = (UFunction*) UObject::GObjObjects()->Data[ 17345 ];

	UConsole_execInitialized_Parms Initialized_Parms;

	this->ProcessEvent ( pFnInitialized, &Initialized_Parms, NULL );
};

// Function Engine.Input.GetBind
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned long                  Control                        ( CPF_Parm )
// unsigned long                  Shift                          ( CPF_Parm )
// unsigned long                  Alt                            ( CPF_Parm )
// struct FName                   Key                            ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FString UInput::GetBind ( unsigned long Control, unsigned long Shift, unsigned long Alt, struct FName* Key )
{
	static UFunction* pFnGetBind = NULL;

	if ( ! pFnGetBind )
		pFnGetBind = (UFunction*) UObject::GObjObjects()->Data[ 18501 ];

	UInput_execGetBind_Parms GetBind_Parms;
	GetBind_Parms.Control = Control;
	GetBind_Parms.Shift = Shift;
	GetBind_Parms.Alt = Alt;

	pFnGetBind->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBind, &GetBind_Parms, NULL );

	pFnGetBind->FunctionFlags |= 0x400;

	if ( Key )
		memcpy ( Key, &GetBind_Parms.Key, 0x8 );

	return GetBind_Parms.ReturnValue;
};

// Function Engine.Input.ResetInput
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UInput::ResetInput ( )
{
	static UFunction* pFnResetInput = NULL;

	if ( ! pFnResetInput )
		pFnResetInput = (UFunction*) UObject::GObjObjects()->Data[ 18500 ];

	UInput_execResetInput_Parms ResetInput_Parms;

	pFnResetInput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetInput, &ResetInput_Parms, NULL );

	pFnResetInput->FunctionFlags |= 0x400;
};

// Function Engine.PlayerInput.SmoothMouse
// [0x00420002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          aMouse                         ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// int                            Index                          ( CPF_Parm )
// unsigned char                  SampleCount                    ( CPF_Parm | CPF_OutParm )

float UPlayerInput::SmoothMouse ( float aMouse, float DeltaTime, int Index, unsigned char* SampleCount )
{
	static UFunction* pFnSmoothMouse = NULL;

	if ( ! pFnSmoothMouse )
		pFnSmoothMouse = (UFunction*) UObject::GObjObjects()->Data[ 18577 ];

	UPlayerInput_execSmoothMouse_Parms SmoothMouse_Parms;
	SmoothMouse_Parms.aMouse = aMouse;
	SmoothMouse_Parms.DeltaTime = DeltaTime;
	SmoothMouse_Parms.Index = Index;

	this->ProcessEvent ( pFnSmoothMouse, &SmoothMouse_Parms, NULL );

	if ( SampleCount )
		*SampleCount = SmoothMouse_Parms.SampleCount;

	return SmoothMouse_Parms.ReturnValue;
};

// Function Engine.PlayerInput.ClearSmoothing
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UPlayerInput::ClearSmoothing ( )
{
	static UFunction* pFnClearSmoothing = NULL;

	if ( ! pFnClearSmoothing )
		pFnClearSmoothing = (UFunction*) UObject::GObjObjects()->Data[ 18571 ];

	UPlayerInput_execClearSmoothing_Parms ClearSmoothing_Parms;

	this->ProcessEvent ( pFnClearSmoothing, &ClearSmoothing_Parms, NULL );
};

// Function Engine.PlayerInput.SmartJump
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UPlayerInput::SmartJump ( )
{
	static UFunction* pFnSmartJump = NULL;

	if ( ! pFnSmartJump )
		pFnSmartJump = (UFunction*) UObject::GObjObjects()->Data[ 18570 ];

	UPlayerInput_execSmartJump_Parms SmartJump_Parms;

	this->ProcessEvent ( pFnSmartJump, &SmartJump_Parms, NULL );
};

// Function Engine.PlayerInput.Jump
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UPlayerInput::Jump ( )
{
	static UFunction* pFnJump = NULL;

	if ( ! pFnJump )
		pFnJump = (UFunction*) UObject::GObjObjects()->Data[ 18569 ];

	UPlayerInput_execJump_Parms Jump_Parms;

	this->ProcessEvent ( pFnJump, &Jump_Parms, NULL );
};

// Function Engine.PlayerInput.ProcessInputMatching
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UPlayerInput::ProcessInputMatching ( float DeltaTime )
{
	static UFunction* pFnProcessInputMatching = NULL;

	if ( ! pFnProcessInputMatching )
		pFnProcessInputMatching = (UFunction*) UObject::GObjObjects()->Data[ 18542 ];

	UPlayerInput_execProcessInputMatching_Parms ProcessInputMatching_Parms;
	ProcessInputMatching_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessInputMatching, &ProcessInputMatching_Parms, NULL );
};

// Function Engine.PlayerInput.CheckForDoubleClickMove
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

unsigned char UPlayerInput::CheckForDoubleClickMove ( float DeltaTime )
{
	static UFunction* pFnCheckForDoubleClickMove = NULL;

	if ( ! pFnCheckForDoubleClickMove )
		pFnCheckForDoubleClickMove = (UFunction*) UObject::GObjObjects()->Data[ 10952 ];

	UPlayerInput_execCheckForDoubleClickMove_Parms CheckForDoubleClickMove_Parms;
	CheckForDoubleClickMove_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnCheckForDoubleClickMove, &CheckForDoubleClickMove_Parms, NULL );

	return CheckForDoubleClickMove_Parms.ReturnValue;
};

// Function Engine.PlayerInput.CatchDoubleClickInput
// [0x00020002] 
// Parameters infos:

void UPlayerInput::CatchDoubleClickInput ( )
{
	static UFunction* pFnCatchDoubleClickInput = NULL;

	if ( ! pFnCatchDoubleClickInput )
		pFnCatchDoubleClickInput = (UFunction*) UObject::GObjObjects()->Data[ 18551 ];

	UPlayerInput_execCatchDoubleClickInput_Parms CatchDoubleClickInput_Parms;

	this->ProcessEvent ( pFnCatchDoubleClickInput, &CatchDoubleClickInput_Parms, NULL );
};

// Function Engine.PlayerInput.PlayerInput
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UPlayerInput::eventPlayerInput ( float DeltaTime )
{
	static UFunction* pFnPlayerInput = NULL;

	if ( ! pFnPlayerInput )
		pFnPlayerInput = (UFunction*) UObject::GObjObjects()->Data[ 18531 ];

	UPlayerInput_eventPlayerInput_Parms PlayerInput_Parms;
	PlayerInput_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPlayerInput, &PlayerInput_Parms, NULL );
};

// Function Engine.PlayerInput.AdjustMouseSensitivity
// [0x00020002] 
// Parameters infos:
// float                          FOVScale                       ( CPF_Parm )

void UPlayerInput::AdjustMouseSensitivity ( float FOVScale )
{
	static UFunction* pFnAdjustMouseSensitivity = NULL;

	if ( ! pFnAdjustMouseSensitivity )
		pFnAdjustMouseSensitivity = (UFunction*) UObject::GObjObjects()->Data[ 18527 ];

	UPlayerInput_execAdjustMouseSensitivity_Parms AdjustMouseSensitivity_Parms;
	AdjustMouseSensitivity_Parms.FOVScale = FOVScale;

	this->ProcessEvent ( pFnAdjustMouseSensitivity, &AdjustMouseSensitivity_Parms, NULL );
};

// Function Engine.PlayerInput.PostProcessInput
// [0x00020000] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UPlayerInput::PostProcessInput ( float DeltaTime )
{
	static UFunction* pFnPostProcessInput = NULL;

	if ( ! pFnPostProcessInput )
		pFnPostProcessInput = (UFunction*) UObject::GObjObjects()->Data[ 18525 ];

	UPlayerInput_execPostProcessInput_Parms PostProcessInput_Parms;
	PostProcessInput_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPostProcessInput, &PostProcessInput_Parms, NULL );
};

// Function Engine.PlayerInput.PreProcessInput
// [0x00020000] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UPlayerInput::PreProcessInput ( float DeltaTime )
{
	static UFunction* pFnPreProcessInput = NULL;

	if ( ! pFnPreProcessInput )
		pFnPreProcessInput = (UFunction*) UObject::GObjObjects()->Data[ 18523 ];

	UPlayerInput_execPreProcessInput_Parms PreProcessInput_Parms;
	PreProcessInput_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPreProcessInput, &PreProcessInput_Parms, NULL );
};

// Function Engine.PlayerInput.DrawHUD
// [0x00020000] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void UPlayerInput::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 18521 ];

	UPlayerInput_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.PlayerInput.SetSensitivity
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void UPlayerInput::SetSensitivity ( float F )
{
	static UFunction* pFnSetSensitivity = NULL;

	if ( ! pFnSetSensitivity )
		pFnSetSensitivity = (UFunction*) UObject::GObjObjects()->Data[ 18518 ];

	UPlayerInput_execSetSensitivity_Parms SetSensitivity_Parms;
	SetSensitivity_Parms.F = F;

	this->ProcessEvent ( pFnSetSensitivity, &SetSensitivity_Parms, NULL );
};

// Function Engine.PlayerInput.InvertTurn
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UPlayerInput::InvertTurn ( )
{
	static UFunction* pFnInvertTurn = NULL;

	if ( ! pFnInvertTurn )
		pFnInvertTurn = (UFunction*) UObject::GObjObjects()->Data[ 18515 ];

	UPlayerInput_execInvertTurn_Parms InvertTurn_Parms;

	this->ProcessEvent ( pFnInvertTurn, &InvertTurn_Parms, NULL );

	return InvertTurn_Parms.ReturnValue;
};

// Function Engine.PlayerInput.InvertMouse
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UPlayerInput::InvertMouse ( )
{
	static UFunction* pFnInvertMouse = NULL;

	if ( ! pFnInvertMouse )
		pFnInvertMouse = (UFunction*) UObject::GObjObjects()->Data[ 18512 ];

	UPlayerInput_execInvertMouse_Parms InvertMouse_Parms;

	this->ProcessEvent ( pFnInvertMouse, &InvertMouse_Parms, NULL );

	return InvertMouse_Parms.ReturnValue;
};

// Function Engine.UIInteraction.NotifyGameSessionEnded
// [0x00020002] 
// Parameters infos:

void UUIInteraction::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 35246 ];

	UUIInteraction_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );
};

// Function Engine.UIInteraction.GetNATType
// [0x00022803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UUIInteraction::eventGetNATType ( )
{
	static UFunction* pFnGetNATType = NULL;

	if ( ! pFnGetNATType )
		pFnGetNATType = (UFunction*) UObject::GObjObjects()->Data[ 32722 ];

	UUIInteraction_eventGetNATType_Parms GetNATType_Parms;

	this->ProcessEvent ( pFnGetNATType, &GetNATType_Parms, NULL );

	return GetNATType_Parms.ReturnValue;
};

// Function Engine.UIInteraction.CanAllPlayOnline
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIInteraction::CanAllPlayOnline ( )
{
	static UFunction* pFnCanAllPlayOnline = NULL;

	if ( ! pFnCanAllPlayOnline )
		pFnCanAllPlayOnline = (UFunction*) UObject::GObjObjects()->Data[ 35240 ];

	UUIInteraction_execCanAllPlayOnline_Parms CanAllPlayOnline_Parms;

	this->ProcessEvent ( pFnCanAllPlayOnline, &CanAllPlayOnline_Parms, NULL );

	return CanAllPlayOnline_Parms.ReturnValue;
};

// Function Engine.UIInteraction.CanPlayOnline
// [0x00022803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

bool UUIInteraction::eventCanPlayOnline ( int ControllerId )
{
	static UFunction* pFnCanPlayOnline = NULL;

	if ( ! pFnCanPlayOnline )
		pFnCanPlayOnline = (UFunction*) UObject::GObjObjects()->Data[ 32706 ];

	UUIInteraction_eventCanPlayOnline_Parms CanPlayOnline_Parms;
	CanPlayOnline_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnCanPlayOnline, &CanPlayOnline_Parms, NULL );

	return CanPlayOnline_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetConnectedGamepadCount
// [0x00026003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct TArray<unsigned long>   ControllerConnectionStatusOverrides ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

int UUIInteraction::GetConnectedGamepadCount ( struct TArray<unsigned long> ControllerConnectionStatusOverrides )
{
	static UFunction* pFnGetConnectedGamepadCount = NULL;

	if ( ! pFnGetConnectedGamepadCount )
		pFnGetConnectedGamepadCount = (UFunction*) UObject::GObjObjects()->Data[ 35230 ];

	UUIInteraction_execGetConnectedGamepadCount_Parms GetConnectedGamepadCount_Parms;
	memcpy ( &GetConnectedGamepadCount_Parms.ControllerConnectionStatusOverrides, &ControllerConnectionStatusOverrides, 0x10 );

	this->ProcessEvent ( pFnGetConnectedGamepadCount, &GetConnectedGamepadCount_Parms, NULL );

	return GetConnectedGamepadCount_Parms.ReturnValue;
};

// Function Engine.UIInteraction.IsGamepadConnected
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

bool UUIInteraction::IsGamepadConnected ( int ControllerId )
{
	static UFunction* pFnIsGamepadConnected = NULL;

	if ( ! pFnIsGamepadConnected )
		pFnIsGamepadConnected = (UFunction*) UObject::GObjObjects()->Data[ 21905 ];

	UUIInteraction_execIsGamepadConnected_Parms IsGamepadConnected_Parms;
	IsGamepadConnected_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnIsGamepadConnected, &IsGamepadConnected_Parms, NULL );

	return IsGamepadConnected_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetNumGuestsLoggedIn
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIInteraction::GetNumGuestsLoggedIn ( )
{
	static UFunction* pFnGetNumGuestsLoggedIn = NULL;

	if ( ! pFnGetNumGuestsLoggedIn )
		pFnGetNumGuestsLoggedIn = (UFunction*) UObject::GObjObjects()->Data[ 35221 ];

	UUIInteraction_execGetNumGuestsLoggedIn_Parms GetNumGuestsLoggedIn_Parms;

	this->ProcessEvent ( pFnGetNumGuestsLoggedIn, &GetNumGuestsLoggedIn_Parms, NULL );

	return GetNumGuestsLoggedIn_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetLoggedInPlayerCount
// [0x00026003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bRequireOnlineLogin            ( CPF_OptionalParm | CPF_Parm )

int UUIInteraction::GetLoggedInPlayerCount ( unsigned long bRequireOnlineLogin )
{
	static UFunction* pFnGetLoggedInPlayerCount = NULL;

	if ( ! pFnGetLoggedInPlayerCount )
		pFnGetLoggedInPlayerCount = (UFunction*) UObject::GObjObjects()->Data[ 35216 ];

	UUIInteraction_execGetLoggedInPlayerCount_Parms GetLoggedInPlayerCount_Parms;
	GetLoggedInPlayerCount_Parms.bRequireOnlineLogin = bRequireOnlineLogin;

	this->ProcessEvent ( pFnGetLoggedInPlayerCount, &GetLoggedInPlayerCount_Parms, NULL );

	return GetLoggedInPlayerCount_Parms.ReturnValue;
};

// Function Engine.UIInteraction.IsLoggedIn
// [0x00026803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// unsigned long                  bRequireOnlineLogin            ( CPF_OptionalParm | CPF_Parm )

bool UUIInteraction::eventIsLoggedIn ( int ControllerId, unsigned long bRequireOnlineLogin )
{
	static UFunction* pFnIsLoggedIn = NULL;

	if ( ! pFnIsLoggedIn )
		pFnIsLoggedIn = (UFunction*) UObject::GObjObjects()->Data[ 21909 ];

	UUIInteraction_eventIsLoggedIn_Parms IsLoggedIn_Parms;
	IsLoggedIn_Parms.ControllerId = ControllerId;
	IsLoggedIn_Parms.bRequireOnlineLogin = bRequireOnlineLogin;

	this->ProcessEvent ( pFnIsLoggedIn, &IsLoggedIn_Parms, NULL );

	return IsLoggedIn_Parms.ReturnValue;
};

// Function Engine.UIInteraction.HasLinkConnection
// [0x00022803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIInteraction::eventHasLinkConnection ( )
{
	static UFunction* pFnHasLinkConnection = NULL;

	if ( ! pFnHasLinkConnection )
		pFnHasLinkConnection = (UFunction*) UObject::GObjObjects()->Data[ 21999 ];

	UUIInteraction_eventHasLinkConnection_Parms HasLinkConnection_Parms;

	this->ProcessEvent ( pFnHasLinkConnection, &HasLinkConnection_Parms, NULL );

	return HasLinkConnection_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetLowestLoginStatusOfControllers
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UUIInteraction::GetLowestLoginStatusOfControllers ( )
{
	static UFunction* pFnGetLowestLoginStatusOfControllers = NULL;

	if ( ! pFnGetLowestLoginStatusOfControllers )
		pFnGetLowestLoginStatusOfControllers = (UFunction*) UObject::GObjObjects()->Data[ 35204 ];

	UUIInteraction_execGetLowestLoginStatusOfControllers_Parms GetLowestLoginStatusOfControllers_Parms;

	this->ProcessEvent ( pFnGetLowestLoginStatusOfControllers, &GetLowestLoginStatusOfControllers_Parms, NULL );

	return GetLowestLoginStatusOfControllers_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetLoginStatus
// [0x00022803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

unsigned char UUIInteraction::eventGetLoginStatus ( int ControllerId )
{
	static UFunction* pFnGetLoginStatus = NULL;

	if ( ! pFnGetLoginStatus )
		pFnGetLoginStatus = (UFunction*) UObject::GObjObjects()->Data[ 21938 ];

	UUIInteraction_eventGetLoginStatus_Parms GetLoginStatus_Parms;
	GetLoginStatus_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnGetLoginStatus, &GetLoginStatus_Parms, NULL );

	return GetLoginStatus_Parms.ReturnValue;
};

// Function Engine.UIInteraction.SetMousePosition
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            NewMouseX                      ( CPF_Parm )
// int                            NewMouseY                      ( CPF_Parm )

void UUIInteraction::SetMousePosition ( int NewMouseX, int NewMouseY )
{
	static UFunction* pFnSetMousePosition = NULL;

	if ( ! pFnSetMousePosition )
		pFnSetMousePosition = (UFunction*) UObject::GObjObjects()->Data[ 35197 ];

	UUIInteraction_execSetMousePosition_Parms SetMousePosition_Parms;
	SetMousePosition_Parms.NewMouseX = NewMouseX;
	SetMousePosition_Parms.NewMouseY = NewMouseY;

	this->ProcessEvent ( pFnSetMousePosition, &SetMousePosition_Parms, NULL );
};

// Function Engine.UIInteraction.NotifyPlayerRemoved
// [0x00020002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            RemovedPlayer                  ( CPF_Parm )

void UUIInteraction::NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer )
{
	static UFunction* pFnNotifyPlayerRemoved = NULL;

	if ( ! pFnNotifyPlayerRemoved )
		pFnNotifyPlayerRemoved = (UFunction*) UObject::GObjObjects()->Data[ 35190 ];

	UUIInteraction_execNotifyPlayerRemoved_Parms NotifyPlayerRemoved_Parms;
	NotifyPlayerRemoved_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerRemoved_Parms.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Parms, NULL );
};

// Function Engine.UIInteraction.NotifyPlayerAdded
// [0x00020002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            AddedPlayer                    ( CPF_Parm )

void UUIInteraction::NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer )
{
	static UFunction* pFnNotifyPlayerAdded = NULL;

	if ( ! pFnNotifyPlayerAdded )
		pFnNotifyPlayerAdded = (UFunction*) UObject::GObjObjects()->Data[ 35185 ];

	UUIInteraction_execNotifyPlayerAdded_Parms NotifyPlayerAdded_Parms;
	NotifyPlayerAdded_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerAdded_Parms.AddedPlayer = AddedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerAdded, &NotifyPlayerAdded_Parms, NULL );
};

// Function Engine.UIInteraction.GetLocalPlayer
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class ULocalPlayer*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )

class ULocalPlayer* UUIInteraction::GetLocalPlayer ( int PlayerIndex )
{
	static UFunction* pFnGetLocalPlayer = NULL;

	if ( ! pFnGetLocalPlayer )
		pFnGetLocalPlayer = (UFunction*) UObject::GObjObjects()->Data[ 35180 ];

	UUIInteraction_execGetLocalPlayer_Parms GetLocalPlayer_Parms;
	GetLocalPlayer_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnGetLocalPlayer, &GetLocalPlayer_Parms, NULL );

	return GetLocalPlayer_Parms.ReturnValue;
};

// Function Engine.UIInteraction.CreateScene
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  SceneClass                     ( CPF_Parm )
// struct FName                   SceneTag                       ( CPF_OptionalParm | CPF_Parm )
// class UUIScene*                SceneTemplate                  ( CPF_OptionalParm | CPF_Parm )

class UUIScene* UUIInteraction::CreateScene ( class UClass* SceneClass, struct FName SceneTag, class UUIScene* SceneTemplate )
{
	static UFunction* pFnCreateScene = NULL;

	if ( ! pFnCreateScene )
		pFnCreateScene = (UFunction*) UObject::GObjObjects()->Data[ 35175 ];

	UUIInteraction_execCreateScene_Parms CreateScene_Parms;
	CreateScene_Parms.SceneClass = SceneClass;
	memcpy ( &CreateScene_Parms.SceneTag, &SceneTag, 0x8 );
	CreateScene_Parms.SceneTemplate = SceneTemplate;

	pFnCreateScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateScene, &CreateScene_Parms, NULL );

	pFnCreateScene->FunctionFlags |= 0x400;

	return CreateScene_Parms.ReturnValue;
};

// Function Engine.UIInteraction.CreateTransientWidget
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  WidgetClass                    ( CPF_Parm )
// struct FName                   WidgetTag                      ( CPF_Parm )
// class UUIObject*               Owner                          ( CPF_OptionalParm | CPF_Parm )

class UUIObject* UUIInteraction::CreateTransientWidget ( class UClass* WidgetClass, struct FName WidgetTag, class UUIObject* Owner )
{
	static UFunction* pFnCreateTransientWidget = NULL;

	if ( ! pFnCreateTransientWidget )
		pFnCreateTransientWidget = (UFunction*) UObject::GObjObjects()->Data[ 35170 ];

	UUIInteraction_execCreateTransientWidget_Parms CreateTransientWidget_Parms;
	CreateTransientWidget_Parms.WidgetClass = WidgetClass;
	memcpy ( &CreateTransientWidget_Parms.WidgetTag, &WidgetTag, 0x8 );
	CreateTransientWidget_Parms.Owner = Owner;

	pFnCreateTransientWidget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateTransientWidget, &CreateTransientWidget_Parms, NULL );

	pFnCreateTransientWidget->FunctionFlags |= 0x400;

	return CreateTransientWidget_Parms.ReturnValue;
};

// Function Engine.UIInteraction.PlayUISound
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SoundCueName                   ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIInteraction::PlayUISound ( struct FName SoundCueName, int PlayerIndex )
{
	static UFunction* pFnPlayUISound = NULL;

	if ( ! pFnPlayUISound )
		pFnPlayUISound = (UFunction*) UObject::GObjObjects()->Data[ 35166 ];

	UUIInteraction_execPlayUISound_Parms PlayUISound_Parms;
	memcpy ( &PlayUISound_Parms.SoundCueName, &SoundCueName, 0x8 );
	PlayUISound_Parms.PlayerIndex = PlayerIndex;

	pFnPlayUISound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayUISound, &PlayUISound_Parms, NULL );

	pFnPlayUISound->FunctionFlags |= 0x400;

	return PlayUISound_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetDataStoreClient
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UDataStoreClient*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UDataStoreClient* UUIInteraction::GetDataStoreClient ( )
{
	static UFunction* pFnGetDataStoreClient = NULL;

	if ( ! pFnGetDataStoreClient )
		pFnGetDataStoreClient = (UFunction*) UObject::GObjObjects()->Data[ 10163 ];

	UUIInteraction_execGetDataStoreClient_Parms GetDataStoreClient_Parms;

	pFnGetDataStoreClient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreClient, &GetDataStoreClient_Parms, NULL );

	pFnGetDataStoreClient->FunctionFlags |= 0x400;

	return GetDataStoreClient_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetPlayerControllerId
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )

int UUIInteraction::GetPlayerControllerId ( int PlayerIndex )
{
	static UFunction* pFnGetPlayerControllerId = NULL;

	if ( ! pFnGetPlayerControllerId )
		pFnGetPlayerControllerId = (UFunction*) UObject::GObjObjects()->Data[ 35163 ];

	UUIInteraction_execGetPlayerControllerId_Parms GetPlayerControllerId_Parms;
	GetPlayerControllerId_Parms.PlayerIndex = PlayerIndex;

	pFnGetPlayerControllerId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerControllerId, &GetPlayerControllerId_Parms, NULL );

	pFnGetPlayerControllerId->FunctionFlags |= 0x400;

	return GetPlayerControllerId_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetPlayerIndex
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

int UUIInteraction::GetPlayerIndex ( int ControllerId )
{
	static UFunction* pFnGetPlayerIndex = NULL;

	if ( ! pFnGetPlayerIndex )
		pFnGetPlayerIndex = (UFunction*) UObject::GObjObjects()->Data[ 10084 ];

	UUIInteraction_execGetPlayerIndex_Parms GetPlayerIndex_Parms;
	GetPlayerIndex_Parms.ControllerId = ControllerId;

	pFnGetPlayerIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerIndex, &GetPlayerIndex_Parms, NULL );

	pFnGetPlayerIndex->FunctionFlags |= 0x400;

	return GetPlayerIndex_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetPlayerCount
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIInteraction::GetPlayerCount ( )
{
	static UFunction* pFnGetPlayerCount = NULL;

	if ( ! pFnGetPlayerCount )
		pFnGetPlayerCount = (UFunction*) UObject::GObjObjects()->Data[ 32734 ];

	UUIInteraction_execGetPlayerCount_Parms GetPlayerCount_Parms;

	pFnGetPlayerCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerCount, &GetPlayerCount_Parms, NULL );

	pFnGetPlayerCount->FunctionFlags |= 0x400;

	return GetPlayerCount_Parms.ReturnValue;
};

// Function Engine.UIInputConfiguration.NotifyGameSessionEnded
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIInputConfiguration::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 35151 ];

	UUIInputConfiguration_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	pFnNotifyGameSessionEnded->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );

	pFnNotifyGameSessionEnded->FunctionFlags |= 0x400;
};

// Function Engine.UIInputConfiguration.LoadInputAliasClasses
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIInputConfiguration::LoadInputAliasClasses ( )
{
	static UFunction* pFnLoadInputAliasClasses = NULL;

	if ( ! pFnLoadInputAliasClasses )
		pFnLoadInputAliasClasses = (UFunction*) UObject::GObjObjects()->Data[ 35150 ];

	UUIInputConfiguration_execLoadInputAliasClasses_Parms LoadInputAliasClasses_Parms;

	pFnLoadInputAliasClasses->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadInputAliasClasses, &LoadInputAliasClasses_Parms, NULL );

	pFnLoadInputAliasClasses->FunctionFlags |= 0x400;
};

// Function Engine.UISceneClient.InitializeSceneClient
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UUISceneClient::eventInitializeSceneClient ( )
{
	static UFunction* pFnInitializeSceneClient = NULL;

	if ( ! pFnInitializeSceneClient )
		pFnInitializeSceneClient = (UFunction*) UObject::GObjObjects()->Data[ 21794 ];

	UUISceneClient_eventInitializeSceneClient_Parms InitializeSceneClient_Parms;

	this->ProcessEvent ( pFnInitializeSceneClient, &InitializeSceneClient_Parms, NULL );
};

// Function Engine.UISceneClient.GetInverseCanvasToScreen
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Const | CPF_OptionalParm | CPF_Parm )

struct FMatrix UUISceneClient::GetInverseCanvasToScreen ( class UUIObject* Widget )
{
	static UFunction* pFnGetInverseCanvasToScreen = NULL;

	if ( ! pFnGetInverseCanvasToScreen )
		pFnGetInverseCanvasToScreen = (UFunction*) UObject::GObjObjects()->Data[ 21791 ];

	UUISceneClient_execGetInverseCanvasToScreen_Parms GetInverseCanvasToScreen_Parms;
	GetInverseCanvasToScreen_Parms.Widget = Widget;

	pFnGetInverseCanvasToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInverseCanvasToScreen, &GetInverseCanvasToScreen_Parms, NULL );

	pFnGetInverseCanvasToScreen->FunctionFlags |= 0x400;

	return GetInverseCanvasToScreen_Parms.ReturnValue;
};

// Function Engine.UISceneClient.GetCanvasToScreen
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Const | CPF_OptionalParm | CPF_Parm )

struct FMatrix UUISceneClient::GetCanvasToScreen ( class UUIObject* Widget )
{
	static UFunction* pFnGetCanvasToScreen = NULL;

	if ( ! pFnGetCanvasToScreen )
		pFnGetCanvasToScreen = (UFunction*) UObject::GObjObjects()->Data[ 21788 ];

	UUISceneClient_execGetCanvasToScreen_Parms GetCanvasToScreen_Parms;
	GetCanvasToScreen_Parms.Widget = Widget;

	pFnGetCanvasToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCanvasToScreen, &GetCanvasToScreen_Parms, NULL );

	pFnGetCanvasToScreen->FunctionFlags |= 0x400;

	return GetCanvasToScreen_Parms.ReturnValue;
};

// Function Engine.UISceneClient.UpdateCanvasToScreen
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUISceneClient::UpdateCanvasToScreen ( )
{
	static UFunction* pFnUpdateCanvasToScreen = NULL;

	if ( ! pFnUpdateCanvasToScreen )
		pFnUpdateCanvasToScreen = (UFunction*) UObject::GObjObjects()->Data[ 21787 ];

	UUISceneClient_execUpdateCanvasToScreen_Parms UpdateCanvasToScreen_Parms;

	pFnUpdateCanvasToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCanvasToScreen, &UpdateCanvasToScreen_Parms, NULL );

	pFnUpdateCanvasToScreen->FunctionFlags |= 0x400;
};

// Function Engine.UISceneClient.ChangeMouseCursor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   CursorName                     ( CPF_Parm )

bool UUISceneClient::ChangeMouseCursor ( struct FName CursorName )
{
	static UFunction* pFnChangeMouseCursor = NULL;

	if ( ! pFnChangeMouseCursor )
		pFnChangeMouseCursor = (UFunction*) UObject::GObjObjects()->Data[ 21784 ];

	UUISceneClient_execChangeMouseCursor_Parms ChangeMouseCursor_Parms;
	memcpy ( &ChangeMouseCursor_Parms.CursorName, &CursorName, 0x8 );

	pFnChangeMouseCursor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChangeMouseCursor, &ChangeMouseCursor_Parms, NULL );

	pFnChangeMouseCursor->FunctionFlags |= 0x400;

	return ChangeMouseCursor_Parms.ReturnValue;
};

// Function Engine.UISceneClient.SetMousePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            NewMouseX                      ( CPF_Parm )
// int                            NewMouseY                      ( CPF_Parm )

void UUISceneClient::SetMousePosition ( int NewMouseX, int NewMouseY )
{
	static UFunction* pFnSetMousePosition = NULL;

	if ( ! pFnSetMousePosition )
		pFnSetMousePosition = (UFunction*) UObject::GObjObjects()->Data[ 21781 ];

	UUISceneClient_execSetMousePosition_Parms SetMousePosition_Parms;
	SetMousePosition_Parms.NewMouseX = NewMouseX;
	SetMousePosition_Parms.NewMouseY = NewMouseY;

	pFnSetMousePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMousePosition, &SetMousePosition_Parms, NULL );

	pFnSetMousePosition->FunctionFlags |= 0x400;
};

// Function Engine.UISceneClient.CloseSceneAtIndex
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SceneStackIndex                ( CPF_Parm )
// unsigned long                  bCloseChildScenes              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bForceCloseImmediately         ( CPF_OptionalParm | CPF_Parm )

bool UUISceneClient::CloseSceneAtIndex ( int SceneStackIndex, unsigned long bCloseChildScenes, unsigned long bForceCloseImmediately )
{
	static UFunction* pFnCloseSceneAtIndex = NULL;

	if ( ! pFnCloseSceneAtIndex )
		pFnCloseSceneAtIndex = (UFunction*) UObject::GObjObjects()->Data[ 21776 ];

	UUISceneClient_execCloseSceneAtIndex_Parms CloseSceneAtIndex_Parms;
	CloseSceneAtIndex_Parms.SceneStackIndex = SceneStackIndex;
	CloseSceneAtIndex_Parms.bCloseChildScenes = bCloseChildScenes;
	CloseSceneAtIndex_Parms.bForceCloseImmediately = bForceCloseImmediately;

	pFnCloseSceneAtIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCloseSceneAtIndex, &CloseSceneAtIndex_Parms, NULL );

	pFnCloseSceneAtIndex->FunctionFlags |= 0x400;

	return CloseSceneAtIndex_Parms.ReturnValue;
};

// Function Engine.UISceneClient.CloseScene
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Parm )
// unsigned long                  bCloseChildScenes              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bForceCloseImmediately         ( CPF_OptionalParm | CPF_Parm )

bool UUISceneClient::CloseScene ( class UUIScene* Scene, unsigned long bCloseChildScenes, unsigned long bForceCloseImmediately )
{
	static UFunction* pFnCloseScene = NULL;

	if ( ! pFnCloseScene )
		pFnCloseScene = (UFunction*) UObject::GObjObjects()->Data[ 21771 ];

	UUISceneClient_execCloseScene_Parms CloseScene_Parms;
	CloseScene_Parms.Scene = Scene;
	CloseScene_Parms.bCloseChildScenes = bCloseChildScenes;
	CloseScene_Parms.bForceCloseImmediately = bForceCloseImmediately;

	pFnCloseScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCloseScene, &CloseScene_Parms, NULL );

	pFnCloseScene->FunctionFlags |= 0x400;

	return CloseScene_Parms.ReturnValue;
};

// Function Engine.UISceneClient.ReplaceSceneAtIndex
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            IndexOfSceneToReplace          ( CPF_Parm )
// class UUIScene*                SceneToOpen                    ( CPF_Parm )
// class ULocalPlayer*            SceneOwner                     ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  ForcedPriority                 ( CPF_OptionalParm | CPF_Parm )
// class UUIScene*                OpenedScene                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUISceneClient::ReplaceSceneAtIndex ( int IndexOfSceneToReplace, class UUIScene* SceneToOpen, class ULocalPlayer* SceneOwner, unsigned char ForcedPriority, class UUIScene** OpenedScene )
{
	static UFunction* pFnReplaceSceneAtIndex = NULL;

	if ( ! pFnReplaceSceneAtIndex )
		pFnReplaceSceneAtIndex = (UFunction*) UObject::GObjObjects()->Data[ 21764 ];

	UUISceneClient_execReplaceSceneAtIndex_Parms ReplaceSceneAtIndex_Parms;
	ReplaceSceneAtIndex_Parms.IndexOfSceneToReplace = IndexOfSceneToReplace;
	ReplaceSceneAtIndex_Parms.SceneToOpen = SceneToOpen;
	ReplaceSceneAtIndex_Parms.SceneOwner = SceneOwner;
	ReplaceSceneAtIndex_Parms.ForcedPriority = ForcedPriority;

	pFnReplaceSceneAtIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReplaceSceneAtIndex, &ReplaceSceneAtIndex_Parms, NULL );

	pFnReplaceSceneAtIndex->FunctionFlags |= 0x400;

	if ( OpenedScene )
		*OpenedScene = ReplaceSceneAtIndex_Parms.OpenedScene;

	return ReplaceSceneAtIndex_Parms.ReturnValue;
};

// Function Engine.UISceneClient.ReplaceScene
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                SceneInstanceToReplace         ( CPF_Parm )
// class UUIScene*                SceneToOpen                    ( CPF_Parm )
// class ULocalPlayer*            SceneOwner                     ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  ForcedPriority                 ( CPF_OptionalParm | CPF_Parm )
// class UUIScene*                OpenedScene                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUISceneClient::ReplaceScene ( class UUIScene* SceneInstanceToReplace, class UUIScene* SceneToOpen, class ULocalPlayer* SceneOwner, unsigned char ForcedPriority, class UUIScene** OpenedScene )
{
	static UFunction* pFnReplaceScene = NULL;

	if ( ! pFnReplaceScene )
		pFnReplaceScene = (UFunction*) UObject::GObjObjects()->Data[ 21757 ];

	UUISceneClient_execReplaceScene_Parms ReplaceScene_Parms;
	ReplaceScene_Parms.SceneInstanceToReplace = SceneInstanceToReplace;
	ReplaceScene_Parms.SceneToOpen = SceneToOpen;
	ReplaceScene_Parms.SceneOwner = SceneOwner;
	ReplaceScene_Parms.ForcedPriority = ForcedPriority;

	pFnReplaceScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReplaceScene, &ReplaceScene_Parms, NULL );

	pFnReplaceScene->FunctionFlags |= 0x400;

	if ( OpenedScene )
		*OpenedScene = ReplaceScene_Parms.OpenedScene;

	return ReplaceScene_Parms.ReturnValue;
};

// Function Engine.UISceneClient.InsertScene
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            DesiredInsertIndex             ( CPF_Parm )
// class UUIScene*                Scene                          ( CPF_Parm )
// class ULocalPlayer*            SceneOwner                     ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  ForcedPriority                 ( CPF_OptionalParm | CPF_Parm )
// class UUIScene*                OpenedScene                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )
// int                            ActualInsertIndex              ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUISceneClient::InsertScene ( int DesiredInsertIndex, class UUIScene* Scene, class ULocalPlayer* SceneOwner, unsigned char ForcedPriority, class UUIScene** OpenedScene, int* ActualInsertIndex )
{
	static UFunction* pFnInsertScene = NULL;

	if ( ! pFnInsertScene )
		pFnInsertScene = (UFunction*) UObject::GObjObjects()->Data[ 21749 ];

	UUISceneClient_execInsertScene_Parms InsertScene_Parms;
	InsertScene_Parms.DesiredInsertIndex = DesiredInsertIndex;
	InsertScene_Parms.Scene = Scene;
	InsertScene_Parms.SceneOwner = SceneOwner;
	InsertScene_Parms.ForcedPriority = ForcedPriority;

	pFnInsertScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInsertScene, &InsertScene_Parms, NULL );

	pFnInsertScene->FunctionFlags |= 0x400;

	if ( OpenedScene )
		*OpenedScene = InsertScene_Parms.OpenedScene;

	if ( ActualInsertIndex )
		*ActualInsertIndex = InsertScene_Parms.ActualInsertIndex;

	return InsertScene_Parms.ReturnValue;
};

// Function Engine.UISceneClient.OpenScene
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Parm )
// class ULocalPlayer*            SceneOwner                     ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  ForcedPriority                 ( CPF_OptionalParm | CPF_Parm )
// class UUIScene*                OpenedScene                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUISceneClient::OpenScene ( class UUIScene* Scene, class ULocalPlayer* SceneOwner, unsigned char ForcedPriority, class UUIScene** OpenedScene )
{
	static UFunction* pFnOpenScene = NULL;

	if ( ! pFnOpenScene )
		pFnOpenScene = (UFunction*) UObject::GObjObjects()->Data[ 21743 ];

	UUISceneClient_execOpenScene_Parms OpenScene_Parms;
	OpenScene_Parms.Scene = Scene;
	OpenScene_Parms.SceneOwner = SceneOwner;
	OpenScene_Parms.ForcedPriority = ForcedPriority;

	pFnOpenScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpenScene, &OpenScene_Parms, NULL );

	pFnOpenScene->FunctionFlags |= 0x400;

	if ( OpenedScene )
		*OpenedScene = OpenScene_Parms.OpenedScene;

	return OpenScene_Parms.ReturnValue;
};

// Function Engine.UISceneClient.InitializeScene
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Parm )
// class ULocalPlayer*            SceneOwner                     ( CPF_OptionalParm | CPF_Parm )
// class UUIScene*                InitializedScene               ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUISceneClient::InitializeScene ( class UUIScene* Scene, class ULocalPlayer* SceneOwner, class UUIScene** InitializedScene )
{
	static UFunction* pFnInitializeScene = NULL;

	if ( ! pFnInitializeScene )
		pFnInitializeScene = (UFunction*) UObject::GObjObjects()->Data[ 21738 ];

	UUISceneClient_execInitializeScene_Parms InitializeScene_Parms;
	InitializeScene_Parms.Scene = Scene;
	InitializeScene_Parms.SceneOwner = SceneOwner;

	pFnInitializeScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeScene, &InitializeScene_Parms, NULL );

	pFnInitializeScene->FunctionFlags |= 0x400;

	if ( InitializedScene )
		*InitializedScene = InitializeScene_Parms.InitializedScene;

	return InitializeScene_Parms.ReturnValue;
};

// Function Engine.UISceneClient.IsSceneInitialized
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Parm )

bool UUISceneClient::IsSceneInitialized ( class UUIScene* Scene )
{
	static UFunction* pFnIsSceneInitialized = NULL;

	if ( ! pFnIsSceneInitialized )
		pFnIsSceneInitialized = (UFunction*) UObject::GObjObjects()->Data[ 21735 ];

	UUISceneClient_execIsSceneInitialized_Parms IsSceneInitialized_Parms;
	IsSceneInitialized_Parms.Scene = Scene;

	pFnIsSceneInitialized->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSceneInitialized, &IsSceneInitialized_Parms, NULL );

	pFnIsSceneInitialized->FunctionFlags |= 0x400;

	return IsSceneInitialized_Parms.ReturnValue;
};

// Function Engine.UISceneClient.IsUIActive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Flags                          ( CPF_OptionalParm | CPF_Parm )

bool UUISceneClient::IsUIActive ( int Flags )
{
	static UFunction* pFnIsUIActive = NULL;

	if ( ! pFnIsUIActive )
		pFnIsUIActive = (UFunction*) UObject::GObjObjects()->Data[ 21732 ];

	UUISceneClient_execIsUIActive_Parms IsUIActive_Parms;
	IsUIActive_Parms.Flags = Flags;

	pFnIsUIActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsUIActive, &IsUIActive_Parms, NULL );

	pFnIsUIActive->FunctionFlags |= 0x400;

	return IsUIActive_Parms.ReturnValue;
};

// Function Engine.UISceneClient.ChangeActiveSkin
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUISkin*                 NewActiveSkin                  ( CPF_Parm )

bool UUISceneClient::ChangeActiveSkin ( class UUISkin* NewActiveSkin )
{
	static UFunction* pFnChangeActiveSkin = NULL;

	if ( ! pFnChangeActiveSkin )
		pFnChangeActiveSkin = (UFunction*) UObject::GObjObjects()->Data[ 21729 ];

	UUISceneClient_execChangeActiveSkin_Parms ChangeActiveSkin_Parms;
	ChangeActiveSkin_Parms.NewActiveSkin = NewActiveSkin;

	pFnChangeActiveSkin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChangeActiveSkin, &ChangeActiveSkin_Parms, NULL );

	pFnChangeActiveSkin->FunctionFlags |= 0x400;

	return ChangeActiveSkin_Parms.ReturnValue;
};

// Function Engine.UIState.RemoveSequenceObjects
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct TArray<class USequenceObject*> ObjectsToRemove                ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIState::RemoveSequenceObjects ( struct TArray<class USequenceObject*>* ObjectsToRemove )
{
	static UFunction* pFnRemoveSequenceObjects = NULL;

	if ( ! pFnRemoveSequenceObjects )
		pFnRemoveSequenceObjects = (UFunction*) UObject::GObjObjects()->Data[ 35838 ];

	UUIState_execRemoveSequenceObjects_Parms RemoveSequenceObjects_Parms;

	pFnRemoveSequenceObjects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveSequenceObjects, &RemoveSequenceObjects_Parms, NULL );

	pFnRemoveSequenceObjects->FunctionFlags |= 0x400;

	if ( ObjectsToRemove )
		memcpy ( ObjectsToRemove, &RemoveSequenceObjects_Parms.ObjectsToRemove, 0x10 );
};

// Function Engine.UIState.RemoveSequenceObject
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USequenceObject*         ObjectToRemove                 ( CPF_Parm )

void UUIState::RemoveSequenceObject ( class USequenceObject* ObjectToRemove )
{
	static UFunction* pFnRemoveSequenceObject = NULL;

	if ( ! pFnRemoveSequenceObject )
		pFnRemoveSequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 35836 ];

	UUIState_execRemoveSequenceObject_Parms RemoveSequenceObject_Parms;
	RemoveSequenceObject_Parms.ObjectToRemove = ObjectToRemove;

	pFnRemoveSequenceObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveSequenceObject, &RemoveSequenceObject_Parms, NULL );

	pFnRemoveSequenceObject->FunctionFlags |= 0x400;
};

// Function Engine.UIState.AddSequenceObject
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USequenceObject*         NewObj                         ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

bool UUIState::AddSequenceObject ( class USequenceObject* NewObj, unsigned long bRecurse )
{
	static UFunction* pFnAddSequenceObject = NULL;

	if ( ! pFnAddSequenceObject )
		pFnAddSequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 35832 ];

	UUIState_execAddSequenceObject_Parms AddSequenceObject_Parms;
	AddSequenceObject_Parms.NewObj = NewObj;
	AddSequenceObject_Parms.bRecurse = bRecurse;

	pFnAddSequenceObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSequenceObject, &AddSequenceObject_Parms, NULL );

	pFnAddSequenceObject->FunctionFlags |= 0x400;

	return AddSequenceObject_Parms.ReturnValue;
};

// Function Engine.UIState.GetUIEvents
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  LimitClass                     ( CPF_OptionalParm | CPF_Parm )
// struct TArray<class UUIEvent*> out_Events                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIState::GetUIEvents ( class UClass* LimitClass, struct TArray<class UUIEvent*>* out_Events )
{
	static UFunction* pFnGetUIEvents = NULL;

	if ( ! pFnGetUIEvents )
		pFnGetUIEvents = (UFunction*) UObject::GObjObjects()->Data[ 35828 ];

	UUIState_execGetUIEvents_Parms GetUIEvents_Parms;
	GetUIEvents_Parms.LimitClass = LimitClass;

	pFnGetUIEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUIEvents, &GetUIEvents_Parms, NULL );

	pFnGetUIEvents->FunctionFlags |= 0x400;

	if ( out_Events )
		memcpy ( out_Events, &GetUIEvents_Parms.out_Events, 0x10 );
};

// Function Engine.UIState.IsStateAllowed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// class UUIState*                NewState                       ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIState::eventIsStateAllowed ( class UUIScreenObject* Target, class UUIState* NewState, int PlayerIndex )
{
	static UFunction* pFnIsStateAllowed = NULL;

	if ( ! pFnIsStateAllowed )
		pFnIsStateAllowed = (UFunction*) UObject::GObjObjects()->Data[ 35823 ];

	UUIState_eventIsStateAllowed_Parms IsStateAllowed_Parms;
	IsStateAllowed_Parms.Target = Target;
	IsStateAllowed_Parms.NewState = NewState;
	IsStateAllowed_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnIsStateAllowed, &IsStateAllowed_Parms, NULL );

	return IsStateAllowed_Parms.ReturnValue;
};

// Function Engine.UIState.OnDeactivate
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         Target                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// unsigned long                  bPoppedState                   ( CPF_Parm )

void UUIState::eventOnDeactivate ( class UUIScreenObject* Target, int PlayerIndex, unsigned long bPoppedState )
{
	static UFunction* pFnOnDeactivate = NULL;

	if ( ! pFnOnDeactivate )
		pFnOnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 35819 ];

	UUIState_eventOnDeactivate_Parms OnDeactivate_Parms;
	OnDeactivate_Parms.Target = Target;
	OnDeactivate_Parms.PlayerIndex = PlayerIndex;
	OnDeactivate_Parms.bPoppedState = bPoppedState;

	this->ProcessEvent ( pFnOnDeactivate, &OnDeactivate_Parms, NULL );
};

// Function Engine.UIState.OnActivate
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         Target                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// unsigned long                  bPushedState                   ( CPF_Parm )

void UUIState::eventOnActivate ( class UUIScreenObject* Target, int PlayerIndex, unsigned long bPushedState )
{
	static UFunction* pFnOnActivate = NULL;

	if ( ! pFnOnActivate )
		pFnOnActivate = (UFunction*) UObject::GObjObjects()->Data[ 35815 ];

	UUIState_eventOnActivate_Parms OnActivate_Parms;
	OnActivate_Parms.Target = Target;
	OnActivate_Parms.PlayerIndex = PlayerIndex;
	OnActivate_Parms.bPushedState = bPushedState;

	this->ProcessEvent ( pFnOnActivate, &OnActivate_Parms, NULL );
};

// Function Engine.UIState.DeactivateState
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIState::eventDeactivateState ( class UUIScreenObject* Target, int PlayerIndex )
{
	static UFunction* pFnDeactivateState = NULL;

	if ( ! pFnDeactivateState )
		pFnDeactivateState = (UFunction*) UObject::GObjObjects()->Data[ 35811 ];

	UUIState_eventDeactivateState_Parms DeactivateState_Parms;
	DeactivateState_Parms.Target = Target;
	DeactivateState_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnDeactivateState, &DeactivateState_Parms, NULL );

	return DeactivateState_Parms.ReturnValue;
};

// Function Engine.UIState.ActivateState
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIState::eventActivateState ( class UUIScreenObject* Target, int PlayerIndex )
{
	static UFunction* pFnActivateState = NULL;

	if ( ! pFnActivateState )
		pFnActivateState = (UFunction*) UObject::GObjObjects()->Data[ 35807 ];

	UUIState_eventActivateState_Parms ActivateState_Parms;
	ActivateState_Parms.Target = Target;
	ActivateState_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnActivateState, &ActivateState_Parms, NULL );

	return ActivateState_Parms.ReturnValue;
};

// Function Engine.UIState.IsActiveForPlayer
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIState::IsActiveForPlayer ( int PlayerIndex )
{
	static UFunction* pFnIsActiveForPlayer = NULL;

	if ( ! pFnIsActiveForPlayer )
		pFnIsActiveForPlayer = (UFunction*) UObject::GObjObjects()->Data[ 35804 ];

	UUIState_execIsActiveForPlayer_Parms IsActiveForPlayer_Parms;
	IsActiveForPlayer_Parms.PlayerIndex = PlayerIndex;

	pFnIsActiveForPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsActiveForPlayer, &IsActiveForPlayer_Parms, NULL );

	pFnIsActiveForPlayer->FunctionFlags |= 0x400;

	return IsActiveForPlayer_Parms.ReturnValue;
};

// Function Engine.UIState.IsWidgetClassSupported
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  WidgetClass                    ( CPF_Parm )

bool UUIState::eventIsWidgetClassSupported ( class UClass* WidgetClass )
{
	static UFunction* pFnIsWidgetClassSupported = NULL;

	if ( ! pFnIsWidgetClassSupported )
		pFnIsWidgetClassSupported = (UFunction*) UObject::GObjObjects()->Data[ 35801 ];

	UUIState_eventIsWidgetClassSupported_Parms IsWidgetClassSupported_Parms;
	IsWidgetClassSupported_Parms.WidgetClass = WidgetClass;

	this->ProcessEvent ( pFnIsWidgetClassSupported, &IsWidgetClassSupported_Parms, NULL );

	return IsWidgetClassSupported_Parms.ReturnValue;
};

// Function Engine.UIState_Disabled.IsStateAllowed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// class UUIState*                NewState                       ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIState_Disabled::eventIsStateAllowed ( class UUIScreenObject* Target, class UUIState* NewState, int PlayerIndex )
{
	static UFunction* pFnIsStateAllowed = NULL;

	if ( ! pFnIsStateAllowed )
		pFnIsStateAllowed = (UFunction*) UObject::GObjObjects()->Data[ 35853 ];

	UUIState_Disabled_eventIsStateAllowed_Parms IsStateAllowed_Parms;
	IsStateAllowed_Parms.Target = Target;
	IsStateAllowed_Parms.NewState = NewState;
	IsStateAllowed_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnIsStateAllowed, &IsStateAllowed_Parms, NULL );

	return IsStateAllowed_Parms.ReturnValue;
};

// Function Engine.UIState_Disabled.ActivateState
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIState_Disabled::eventActivateState ( class UUIScreenObject* Target, int PlayerIndex )
{
	static UFunction* pFnActivateState = NULL;

	if ( ! pFnActivateState )
		pFnActivateState = (UFunction*) UObject::GObjObjects()->Data[ 35846 ];

	UUIState_Disabled_eventActivateState_Parms ActivateState_Parms;
	ActivateState_Parms.Target = Target;
	ActivateState_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnActivateState, &ActivateState_Parms, NULL );

	return ActivateState_Parms.ReturnValue;
};

// Function Engine.UIString.ContainsMarkup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIString::ContainsMarkup ( )
{
	static UFunction* pFnContainsMarkup = NULL;

	if ( ! pFnContainsMarkup )
		pFnContainsMarkup = (UFunction*) UObject::GObjObjects()->Data[ 35284 ];

	UUIString_execContainsMarkup_Parms ContainsMarkup_Parms;

	pFnContainsMarkup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnContainsMarkup, &ContainsMarkup_Parms, NULL );

	pFnContainsMarkup->FunctionFlags |= 0x400;

	return ContainsMarkup_Parms.ReturnValue;
};

// Function Engine.UIString.GetAutoScaleValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector2D               BoundingRegionSize             ( CPF_Parm )
// struct FVector2D               StringSize                     ( CPF_Parm )
// struct FVector2D               out_AutoScalePercent           ( CPF_Parm | CPF_OutParm )

void UUIString::GetAutoScaleValue ( struct FVector2D BoundingRegionSize, struct FVector2D StringSize, struct FVector2D* out_AutoScalePercent )
{
	static UFunction* pFnGetAutoScaleValue = NULL;

	if ( ! pFnGetAutoScaleValue )
		pFnGetAutoScaleValue = (UFunction*) UObject::GObjObjects()->Data[ 35280 ];

	UUIString_execGetAutoScaleValue_Parms GetAutoScaleValue_Parms;
	memcpy ( &GetAutoScaleValue_Parms.BoundingRegionSize, &BoundingRegionSize, 0x8 );
	memcpy ( &GetAutoScaleValue_Parms.StringSize, &StringSize, 0x8 );

	pFnGetAutoScaleValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAutoScaleValue, &GetAutoScaleValue_Parms, NULL );

	pFnGetAutoScaleValue->FunctionFlags |= 0x400;

	if ( out_AutoScalePercent )
		memcpy ( out_AutoScalePercent, &GetAutoScaleValue_Parms.out_AutoScalePercent, 0x8 );
};

// Function Engine.UIString.GetValue
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned long                  bReturnProcessedText           ( CPF_OptionalParm | CPF_Parm )

struct FString UUIString::GetValue ( unsigned long bReturnProcessedText )
{
	static UFunction* pFnGetValue = NULL;

	if ( ! pFnGetValue )
		pFnGetValue = (UFunction*) UObject::GObjObjects()->Data[ 35277 ];

	UUIString_execGetValue_Parms GetValue_Parms;
	GetValue_Parms.bReturnProcessedText = bReturnProcessedText;

	pFnGetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetValue, &GetValue_Parms, NULL );

	pFnGetValue->FunctionFlags |= 0x400;

	return GetValue_Parms.ReturnValue;
};

// Function Engine.UIString.SetValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InputString                    ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bIgnoreMarkup                  ( CPF_Parm )

bool UUIString::SetValue ( struct FString InputString, unsigned long bIgnoreMarkup )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = (UFunction*) UObject::GObjObjects()->Data[ 35273 ];

	UUIString_execSetValue_Parms SetValue_Parms;
	memcpy ( &SetValue_Parms.InputString, &InputString, 0x10 );
	SetValue_Parms.bIgnoreMarkup = bIgnoreMarkup;

	pFnSetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );

	pFnSetValue->FunctionFlags |= 0x400;

	return SetValue_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.ParseTagArrayDelimiter
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm | CPF_OutParm )

int UUIDataProvider::ParseTagArrayDelimiter ( struct FName* FieldName )
{
	static UFunction* pFnParseTagArrayDelimiter = NULL;

	if ( ! pFnParseTagArrayDelimiter )
		pFnParseTagArrayDelimiter = (UFunction*) UObject::GObjObjects()->Data[ 17949 ];

	UUIDataProvider_execParseTagArrayDelimiter_Parms ParseTagArrayDelimiter_Parms;

	this->ProcessEvent ( pFnParseTagArrayDelimiter, &ParseTagArrayDelimiter_Parms, NULL );

	if ( FieldName )
		memcpy ( FieldName, &ParseTagArrayDelimiter_Parms.FieldName, 0x8 );

	return ParseTagArrayDelimiter_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.RemovePropertyNotificationChangeRequest
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )

bool UUIDataProvider::RemovePropertyNotificationChangeRequest ( struct FScriptDelegate InDelegate )
{
	static UFunction* pFnRemovePropertyNotificationChangeRequest = NULL;

	if ( ! pFnRemovePropertyNotificationChangeRequest )
		pFnRemovePropertyNotificationChangeRequest = (UFunction*) UObject::GObjObjects()->Data[ 17944 ];

	UUIDataProvider_execRemovePropertyNotificationChangeRequest_Parms RemovePropertyNotificationChangeRequest_Parms;
	memcpy ( &RemovePropertyNotificationChangeRequest_Parms.InDelegate, &InDelegate, 0x10 );

	this->ProcessEvent ( pFnRemovePropertyNotificationChangeRequest, &RemovePropertyNotificationChangeRequest_Parms, NULL );

	return RemovePropertyNotificationChangeRequest_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.AddPropertyNotificationChangeRequest
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bAllowDuplicates               ( CPF_OptionalParm | CPF_Parm )

bool UUIDataProvider::AddPropertyNotificationChangeRequest ( struct FScriptDelegate InDelegate, unsigned long bAllowDuplicates )
{
	static UFunction* pFnAddPropertyNotificationChangeRequest = NULL;

	if ( ! pFnAddPropertyNotificationChangeRequest )
		pFnAddPropertyNotificationChangeRequest = (UFunction*) UObject::GObjObjects()->Data[ 17938 ];

	UUIDataProvider_execAddPropertyNotificationChangeRequest_Parms AddPropertyNotificationChangeRequest_Parms;
	memcpy ( &AddPropertyNotificationChangeRequest_Parms.InDelegate, &InDelegate, 0x10 );
	AddPropertyNotificationChangeRequest_Parms.bAllowDuplicates = bAllowDuplicates;

	this->ProcessEvent ( pFnAddPropertyNotificationChangeRequest, &AddPropertyNotificationChangeRequest_Parms, NULL );

	return AddPropertyNotificationChangeRequest_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.NotifyPropertyChanged
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// struct FName                   PropTag                        ( CPF_OptionalParm | CPF_Parm )

void UUIDataProvider::eventNotifyPropertyChanged ( struct FName PropTag )
{
	static UFunction* pFnNotifyPropertyChanged = NULL;

	if ( ! pFnNotifyPropertyChanged )
		pFnNotifyPropertyChanged = (UFunction*) UObject::GObjObjects()->Data[ 17932 ];

	UUIDataProvider_eventNotifyPropertyChanged_Parms NotifyPropertyChanged_Parms;
	memcpy ( &NotifyPropertyChanged_Parms.PropTag, &PropTag, 0x8 );

	this->ProcessEvent ( pFnNotifyPropertyChanged, &NotifyPropertyChanged_Parms, NULL );
};

// Function Engine.UIDataProvider.IsCollectionDataType
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FieldType                      ( CPF_Parm )

bool UUIDataProvider::eventIsCollectionDataType ( unsigned char FieldType )
{
	static UFunction* pFnIsCollectionDataType = NULL;

	if ( ! pFnIsCollectionDataType )
		pFnIsCollectionDataType = (UFunction*) UObject::GObjObjects()->Data[ 17929 ];

	UUIDataProvider_eventIsCollectionDataType_Parms IsCollectionDataType_Parms;
	IsCollectionDataType_Parms.FieldType = FieldType;

	this->ProcessEvent ( pFnIsCollectionDataType, &IsCollectionDataType_Parms, NULL );

	return IsCollectionDataType_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.IsProviderDisabled
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDataProvider::eventIsProviderDisabled ( )
{
	static UFunction* pFnIsProviderDisabled = NULL;

	if ( ! pFnIsProviderDisabled )
		pFnIsProviderDisabled = (UFunction*) UObject::GObjObjects()->Data[ 17927 ];

	UUIDataProvider_eventIsProviderDisabled_Parms IsProviderDisabled_Parms;

	this->ProcessEvent ( pFnIsProviderDisabled, &IsProviderDisabled_Parms, NULL );

	return IsProviderDisabled_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.GenerateFillerData
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 DataTag                        ( CPF_Parm | CPF_NeedCtorLink )

struct FString UUIDataProvider::eventGenerateFillerData ( struct FString DataTag )
{
	static UFunction* pFnGenerateFillerData = NULL;

	if ( ! pFnGenerateFillerData )
		pFnGenerateFillerData = (UFunction*) UObject::GObjObjects()->Data[ 17924 ];

	UUIDataProvider_eventGenerateFillerData_Parms GenerateFillerData_Parms;
	memcpy ( &GenerateFillerData_Parms.DataTag, &DataTag, 0x10 );

	this->ProcessEvent ( pFnGenerateFillerData, &GenerateFillerData_Parms, NULL );

	return GenerateFillerData_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.GenerateScriptMarkupString
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   DataTag                        ( CPF_Parm )

struct FString UUIDataProvider::eventGenerateScriptMarkupString ( struct FName DataTag )
{
	static UFunction* pFnGenerateScriptMarkupString = NULL;

	if ( ! pFnGenerateScriptMarkupString )
		pFnGenerateScriptMarkupString = (UFunction*) UObject::GObjObjects()->Data[ 17921 ];

	UUIDataProvider_eventGenerateScriptMarkupString_Parms GenerateScriptMarkupString_Parms;
	memcpy ( &GenerateScriptMarkupString_Parms.DataTag, &DataTag, 0x8 );

	this->ProcessEvent ( pFnGenerateScriptMarkupString, &GenerateScriptMarkupString_Parms, NULL );

	return GenerateScriptMarkupString_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.SetFieldValue
// [0x00424800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FieldName                      ( CPF_Parm | CPF_NeedCtorLink )
// int                            ArrayIndex                     ( CPF_OptionalParm | CPF_Parm )
// struct FUIProviderScriptFieldValue FieldValue                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDataProvider::eventSetFieldValue ( struct FString FieldName, int ArrayIndex, struct FUIProviderScriptFieldValue* FieldValue )
{
	static UFunction* pFnSetFieldValue = NULL;

	if ( ! pFnSetFieldValue )
		pFnSetFieldValue = (UFunction*) UObject::GObjObjects()->Data[ 17916 ];

	UUIDataProvider_eventSetFieldValue_Parms SetFieldValue_Parms;
	memcpy ( &SetFieldValue_Parms.FieldName, &FieldName, 0x10 );
	SetFieldValue_Parms.ArrayIndex = ArrayIndex;

	this->ProcessEvent ( pFnSetFieldValue, &SetFieldValue_Parms, NULL );

	if ( FieldValue )
		memcpy ( FieldValue, &SetFieldValue_Parms.FieldValue, 0x60 );

	return SetFieldValue_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.GetFieldValue
// [0x00424800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FieldName                      ( CPF_Parm | CPF_NeedCtorLink )
// int                            ArrayIndex                     ( CPF_OptionalParm | CPF_Parm )
// struct FUIProviderScriptFieldValue FieldValue                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDataProvider::eventGetFieldValue ( struct FString FieldName, int ArrayIndex, struct FUIProviderScriptFieldValue* FieldValue )
{
	static UFunction* pFnGetFieldValue = NULL;

	if ( ! pFnGetFieldValue )
		pFnGetFieldValue = (UFunction*) UObject::GObjObjects()->Data[ 17911 ];

	UUIDataProvider_eventGetFieldValue_Parms GetFieldValue_Parms;
	memcpy ( &GetFieldValue_Parms.FieldName, &FieldName, 0x10 );
	GetFieldValue_Parms.ArrayIndex = ArrayIndex;

	this->ProcessEvent ( pFnGetFieldValue, &GetFieldValue_Parms, NULL );

	if ( FieldValue )
		memcpy ( FieldValue, &GetFieldValue_Parms.FieldValue, 0x60 );

	return GetFieldValue_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.AllowPublishingToField
// [0x00024800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FieldName                      ( CPF_Parm | CPF_NeedCtorLink )
// int                            ArrayIndex                     ( CPF_OptionalParm | CPF_Parm )

bool UUIDataProvider::eventAllowPublishingToField ( struct FString FieldName, int ArrayIndex )
{
	static UFunction* pFnAllowPublishingToField = NULL;

	if ( ! pFnAllowPublishingToField )
		pFnAllowPublishingToField = (UFunction*) UObject::GObjObjects()->Data[ 17907 ];

	UUIDataProvider_eventAllowPublishingToField_Parms AllowPublishingToField_Parms;
	memcpy ( &AllowPublishingToField_Parms.FieldName, &FieldName, 0x10 );
	AllowPublishingToField_Parms.ArrayIndex = ArrayIndex;

	this->ProcessEvent ( pFnAllowPublishingToField, &AllowPublishingToField_Parms, NULL );

	return AllowPublishingToField_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.GetSupportedScriptFields
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// struct TArray<struct FUIDataProviderField> out_Fields                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIDataProvider::eventGetSupportedScriptFields ( struct TArray<struct FUIDataProviderField>* out_Fields )
{
	static UFunction* pFnGetSupportedScriptFields = NULL;

	if ( ! pFnGetSupportedScriptFields )
		pFnGetSupportedScriptFields = (UFunction*) UObject::GObjObjects()->Data[ 17904 ];

	UUIDataProvider_eventGetSupportedScriptFields_Parms GetSupportedScriptFields_Parms;

	this->ProcessEvent ( pFnGetSupportedScriptFields, &GetSupportedScriptFields_Parms, NULL );

	if ( out_Fields )
		memcpy ( out_Fields, &GetSupportedScriptFields_Parms.out_Fields, 0x10 );
};

// Function Engine.UIDataProvider.ParseArrayDelimiter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 DataTag                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int UUIDataProvider::ParseArrayDelimiter ( struct FString* DataTag )
{
	static UFunction* pFnParseArrayDelimiter = NULL;

	if ( ! pFnParseArrayDelimiter )
		pFnParseArrayDelimiter = (UFunction*) UObject::GObjObjects()->Data[ 17901 ];

	UUIDataProvider_execParseArrayDelimiter_Parms ParseArrayDelimiter_Parms;

	pFnParseArrayDelimiter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnParseArrayDelimiter, &ParseArrayDelimiter_Parms, NULL );

	pFnParseArrayDelimiter->FunctionFlags |= 0x400;

	if ( DataTag )
		memcpy ( DataTag, &ParseArrayDelimiter_Parms.DataTag, 0x10 );

	return ParseArrayDelimiter_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.GetProviderFieldType
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 DataTag                        ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// unsigned char                  out_ProviderFieldType          ( CPF_Parm | CPF_OutParm )

bool UUIDataProvider::GetProviderFieldType ( struct FString DataTag, unsigned char* out_ProviderFieldType )
{
	static UFunction* pFnGetProviderFieldType = NULL;

	if ( ! pFnGetProviderFieldType )
		pFnGetProviderFieldType = (UFunction*) UObject::GObjObjects()->Data[ 17897 ];

	UUIDataProvider_execGetProviderFieldType_Parms GetProviderFieldType_Parms;
	memcpy ( &GetProviderFieldType_Parms.DataTag, &DataTag, 0x10 );

	pFnGetProviderFieldType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProviderFieldType, &GetProviderFieldType_Parms, NULL );

	pFnGetProviderFieldType->FunctionFlags |= 0x400;

	if ( out_ProviderFieldType )
		*out_ProviderFieldType = GetProviderFieldType_Parms.out_ProviderFieldType;

	return GetProviderFieldType_Parms.ReturnValue;
};

// Function Engine.UIDataProvider.OnDataProviderPropertyChange
// [0x00124000] 
// Parameters infos:
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// struct FName                   PropTag                        ( CPF_OptionalParm | CPF_Parm )

void UUIDataProvider::OnDataProviderPropertyChange ( class UUIDataProvider* SourceProvider, struct FName PropTag )
{
	static UFunction* pFnOnDataProviderPropertyChange = NULL;

	if ( ! pFnOnDataProviderPropertyChange )
		pFnOnDataProviderPropertyChange = (UFunction*) UObject::GObjObjects()->Data[ 17894 ];

	UUIDataProvider_execOnDataProviderPropertyChange_Parms OnDataProviderPropertyChange_Parms;
	OnDataProviderPropertyChange_Parms.SourceProvider = SourceProvider;
	memcpy ( &OnDataProviderPropertyChange_Parms.PropTag, &PropTag, 0x8 );

	this->ProcessEvent ( pFnOnDataProviderPropertyChange, &OnDataProviderPropertyChange_Parms, NULL );
};

// Function Engine.UIDataStore.GetDataStoreClient
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UDataStoreClient*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UDataStoreClient* UUIDataStore::GetDataStoreClient ( )
{
	static UFunction* pFnGetDataStoreClient = NULL;

	if ( ! pFnGetDataStoreClient )
		pFnGetDataStoreClient = (UFunction*) UObject::GObjObjects()->Data[ 17986 ];

	UUIDataStore_execGetDataStoreClient_Parms GetDataStoreClient_Parms;

	this->ProcessEvent ( pFnGetDataStoreClient, &GetDataStoreClient_Parms, NULL );

	return GetDataStoreClient_Parms.ReturnValue;
};

// Function Engine.UIDataStore.OnCommit
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIDataStore::OnCommit ( )
{
	static UFunction* pFnOnCommit = NULL;

	if ( ! pFnOnCommit )
		pFnOnCommit = (UFunction*) UObject::GObjObjects()->Data[ 17985 ];

	UUIDataStore_execOnCommit_Parms OnCommit_Parms;

	pFnOnCommit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnCommit, &OnCommit_Parms, NULL );

	pFnOnCommit->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStore.RefreshSubscribers
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FName                   PropertyTag                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bInvalidateValues              ( CPF_OptionalParm | CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_OptionalParm | CPF_Parm )
// int                            ArrayIndex                     ( CPF_OptionalParm | CPF_Parm )

void UUIDataStore::eventRefreshSubscribers ( struct FName PropertyTag, unsigned long bInvalidateValues, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnRefreshSubscribers = NULL;

	if ( ! pFnRefreshSubscribers )
		pFnRefreshSubscribers = (UFunction*) UObject::GObjObjects()->Data[ 17976 ];

	UUIDataStore_eventRefreshSubscribers_Parms RefreshSubscribers_Parms;
	memcpy ( &RefreshSubscribers_Parms.PropertyTag, &PropertyTag, 0x8 );
	RefreshSubscribers_Parms.bInvalidateValues = bInvalidateValues;
	RefreshSubscribers_Parms.SourceProvider = SourceProvider;
	RefreshSubscribers_Parms.ArrayIndex = ArrayIndex;

	this->ProcessEvent ( pFnRefreshSubscribers, &RefreshSubscribers_Parms, NULL );
};

// Function Engine.UIDataStore.NotifyGameSessionEnded
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDataStore::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 17974 ];

	UUIDataStore_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );

	return NotifyGameSessionEnded_Parms.ReturnValue;
};

// Function Engine.UIDataStore.SubscriberDetached
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIDataStoreSubscriber*  Subscriber                     ( CPF_Parm )

void UUIDataStore::eventSubscriberDetached ( class UUIDataStoreSubscriber* Subscriber )
{
	static UFunction* pFnSubscriberDetached = NULL;

	if ( ! pFnSubscriberDetached )
		pFnSubscriberDetached = (UFunction*) UObject::GObjObjects()->Data[ 17971 ];

	UUIDataStore_eventSubscriberDetached_Parms SubscriberDetached_Parms;
	SubscriberDetached_Parms.Subscriber = Subscriber;

	this->ProcessEvent ( pFnSubscriberDetached, &SubscriberDetached_Parms, NULL );
};

// Function Engine.UIDataStore.SubscriberAttached
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIDataStoreSubscriber*  Subscriber                     ( CPF_Parm )

void UUIDataStore::eventSubscriberAttached ( class UUIDataStoreSubscriber* Subscriber )
{
	static UFunction* pFnSubscriberAttached = NULL;

	if ( ! pFnSubscriberAttached )
		pFnSubscriberAttached = (UFunction*) UObject::GObjObjects()->Data[ 17968 ];

	UUIDataStore_eventSubscriberAttached_Parms SubscriberAttached_Parms;
	SubscriberAttached_Parms.Subscriber = Subscriber;

	this->ProcessEvent ( pFnSubscriberAttached, &SubscriberAttached_Parms, NULL );
};

// Function Engine.UIDataStore.Unregistered
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

void UUIDataStore::eventUnregistered ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnUnregistered = NULL;

	if ( ! pFnUnregistered )
		pFnUnregistered = (UFunction*) UObject::GObjObjects()->Data[ 17966 ];

	UUIDataStore_eventUnregistered_Parms Unregistered_Parms;
	Unregistered_Parms.PlayerOwner = PlayerOwner;

	this->ProcessEvent ( pFnUnregistered, &Unregistered_Parms, NULL );
};

// Function Engine.UIDataStore.Registered
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

void UUIDataStore::eventRegistered ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnRegistered = NULL;

	if ( ! pFnRegistered )
		pFnRegistered = (UFunction*) UObject::GObjObjects()->Data[ 17964 ];

	UUIDataStore_eventRegistered_Parms Registered_Parms;
	Registered_Parms.PlayerOwner = PlayerOwner;

	this->ProcessEvent ( pFnRegistered, &Registered_Parms, NULL );
};

// Function Engine.UIDataStore.OnDataStoreValueUpdated
// [0x00120000] 
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUIDataStore::OnDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnOnDataStoreValueUpdated = NULL;

	if ( ! pFnOnDataStoreValueUpdated )
		pFnOnDataStoreValueUpdated = (UFunction*) UObject::GObjObjects()->Data[ 17958 ];

	UUIDataStore_execOnDataStoreValueUpdated_Parms OnDataStoreValueUpdated_Parms;
	OnDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	OnDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &OnDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	OnDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	OnDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	this->ProcessEvent ( pFnOnDataStoreValueUpdated, &OnDataStoreValueUpdated_Parms, NULL );
};

// Function Engine.UISkin.SubscriberDetached
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UUIDataStoreSubscriber*  Subscriber                     ( CPF_Parm )

void UUISkin::eventSubscriberDetached ( class UUIDataStoreSubscriber* Subscriber )
{
	static UFunction* pFnSubscriberDetached = NULL;

	if ( ! pFnSubscriberDetached )
		pFnSubscriberDetached = (UFunction*) UObject::GObjObjects()->Data[ 34184 ];

	UUISkin_eventSubscriberDetached_Parms SubscriberDetached_Parms;
	SubscriberDetached_Parms.Subscriber = Subscriber;

	this->ProcessEvent ( pFnSubscriberDetached, &SubscriberDetached_Parms, NULL );
};

// Function Engine.UISkin.SubscriberAttached
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UUIDataStoreSubscriber*  Subscriber                     ( CPF_Parm )

void UUISkin::eventSubscriberAttached ( class UUIDataStoreSubscriber* Subscriber )
{
	static UFunction* pFnSubscriberAttached = NULL;

	if ( ! pFnSubscriberAttached )
		pFnSubscriberAttached = (UFunction*) UObject::GObjObjects()->Data[ 34182 ];

	UUISkin_eventSubscriberAttached_Parms SubscriberAttached_Parms;
	SubscriberAttached_Parms.Subscriber = Subscriber;

	this->ProcessEvent ( pFnSubscriberAttached, &SubscriberAttached_Parms, NULL );
};

// Function Engine.UISkin.GetStyleGroups
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bIncludeInheritedGroups        ( CPF_OptionalParm | CPF_Parm )
// struct TArray<struct FString>  StyleGroupArray                ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUISkin::GetStyleGroups ( unsigned long bIncludeInheritedGroups, struct TArray<struct FString>* StyleGroupArray )
{
	static UFunction* pFnGetStyleGroups = NULL;

	if ( ! pFnGetStyleGroups )
		pFnGetStyleGroups = (UFunction*) UObject::GObjObjects()->Data[ 34178 ];

	UUISkin_execGetStyleGroups_Parms GetStyleGroups_Parms;
	GetStyleGroups_Parms.bIncludeInheritedGroups = bIncludeInheritedGroups;

	pFnGetStyleGroups->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStyleGroups, &GetStyleGroups_Parms, NULL );

	pFnGetStyleGroups->FunctionFlags |= 0x400;

	if ( StyleGroupArray )
		memcpy ( StyleGroupArray, &GetStyleGroups_Parms.StyleGroupArray, 0x10 );
};

// Function Engine.UISkin.FindStyleGroupIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 StyleGroupName                 ( CPF_Parm | CPF_NeedCtorLink )

int UUISkin::FindStyleGroupIndex ( struct FString StyleGroupName )
{
	static UFunction* pFnFindStyleGroupIndex = NULL;

	if ( ! pFnFindStyleGroupIndex )
		pFnFindStyleGroupIndex = (UFunction*) UObject::GObjObjects()->Data[ 34175 ];

	UUISkin_execFindStyleGroupIndex_Parms FindStyleGroupIndex_Parms;
	memcpy ( &FindStyleGroupIndex_Parms.StyleGroupName, &StyleGroupName, 0x10 );

	pFnFindStyleGroupIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindStyleGroupIndex, &FindStyleGroupIndex_Parms, NULL );

	pFnFindStyleGroupIndex->FunctionFlags |= 0x400;

	return FindStyleGroupIndex_Parms.ReturnValue;
};

// Function Engine.UISkin.RenameStyleGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 OldStyleGroupName              ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 NewStyleGroupName              ( CPF_Parm | CPF_NeedCtorLink )

bool UUISkin::RenameStyleGroup ( struct FString OldStyleGroupName, struct FString NewStyleGroupName )
{
	static UFunction* pFnRenameStyleGroup = NULL;

	if ( ! pFnRenameStyleGroup )
		pFnRenameStyleGroup = (UFunction*) UObject::GObjObjects()->Data[ 34171 ];

	UUISkin_execRenameStyleGroup_Parms RenameStyleGroup_Parms;
	memcpy ( &RenameStyleGroup_Parms.OldStyleGroupName, &OldStyleGroupName, 0x10 );
	memcpy ( &RenameStyleGroup_Parms.NewStyleGroupName, &NewStyleGroupName, 0x10 );

	pFnRenameStyleGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRenameStyleGroup, &RenameStyleGroup_Parms, NULL );

	pFnRenameStyleGroup->FunctionFlags |= 0x400;

	return RenameStyleGroup_Parms.ReturnValue;
};

// Function Engine.UISkin.RemoveStyleGroupName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 StyleGroupName                 ( CPF_Parm | CPF_NeedCtorLink )

bool UUISkin::RemoveStyleGroupName ( struct FString StyleGroupName )
{
	static UFunction* pFnRemoveStyleGroupName = NULL;

	if ( ! pFnRemoveStyleGroupName )
		pFnRemoveStyleGroupName = (UFunction*) UObject::GObjObjects()->Data[ 34168 ];

	UUISkin_execRemoveStyleGroupName_Parms RemoveStyleGroupName_Parms;
	memcpy ( &RemoveStyleGroupName_Parms.StyleGroupName, &StyleGroupName, 0x10 );

	pFnRemoveStyleGroupName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveStyleGroupName, &RemoveStyleGroupName_Parms, NULL );

	pFnRemoveStyleGroupName->FunctionFlags |= 0x400;

	return RemoveStyleGroupName_Parms.ReturnValue;
};

// Function Engine.UISkin.AddStyleGroupName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 StyleGroupName                 ( CPF_Parm | CPF_NeedCtorLink )

bool UUISkin::AddStyleGroupName ( struct FString StyleGroupName )
{
	static UFunction* pFnAddStyleGroupName = NULL;

	if ( ! pFnAddStyleGroupName )
		pFnAddStyleGroupName = (UFunction*) UObject::GObjObjects()->Data[ 34165 ];

	UUISkin_execAddStyleGroupName_Parms AddStyleGroupName_Parms;
	memcpy ( &AddStyleGroupName_Parms.StyleGroupName, &StyleGroupName, 0x10 );

	pFnAddStyleGroupName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddStyleGroupName, &AddStyleGroupName_Parms, NULL );

	pFnAddStyleGroupName->FunctionFlags |= 0x400;

	return AddStyleGroupName_Parms.ReturnValue;
};

// Function Engine.UISkin.IsInheritedGroupName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 StyleGroupName                 ( CPF_Parm | CPF_NeedCtorLink )

bool UUISkin::IsInheritedGroupName ( struct FString StyleGroupName )
{
	static UFunction* pFnIsInheritedGroupName = NULL;

	if ( ! pFnIsInheritedGroupName )
		pFnIsInheritedGroupName = (UFunction*) UObject::GObjObjects()->Data[ 34162 ];

	UUISkin_execIsInheritedGroupName_Parms IsInheritedGroupName_Parms;
	memcpy ( &IsInheritedGroupName_Parms.StyleGroupName, &StyleGroupName, 0x10 );

	pFnIsInheritedGroupName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInheritedGroupName, &IsInheritedGroupName_Parms, NULL );

	pFnIsInheritedGroupName->FunctionFlags |= 0x400;

	return IsInheritedGroupName_Parms.ReturnValue;
};

// Function Engine.UISkin.GetSkinSoundCues
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct TArray<struct FUISoundCue> out_SoundCues                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUISkin::GetSkinSoundCues ( struct TArray<struct FUISoundCue>* out_SoundCues )
{
	static UFunction* pFnGetSkinSoundCues = NULL;

	if ( ! pFnGetSkinSoundCues )
		pFnGetSkinSoundCues = (UFunction*) UObject::GObjObjects()->Data[ 34159 ];

	UUISkin_execGetSkinSoundCues_Parms GetSkinSoundCues_Parms;

	pFnGetSkinSoundCues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSkinSoundCues, &GetSkinSoundCues_Parms, NULL );

	pFnGetSkinSoundCues->FunctionFlags |= 0x400;

	if ( out_SoundCues )
		memcpy ( out_SoundCues, &GetSkinSoundCues_Parms.out_SoundCues, 0x10 );
};

// Function Engine.UISkin.GetUISoundCue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SoundCueName                   ( CPF_Parm )
// class USoundCue*               out_UISoundCue                 ( CPF_Parm | CPF_OutParm )

bool UUISkin::GetUISoundCue ( struct FName SoundCueName, class USoundCue** out_UISoundCue )
{
	static UFunction* pFnGetUISoundCue = NULL;

	if ( ! pFnGetUISoundCue )
		pFnGetUISoundCue = (UFunction*) UObject::GObjObjects()->Data[ 34155 ];

	UUISkin_execGetUISoundCue_Parms GetUISoundCue_Parms;
	memcpy ( &GetUISoundCue_Parms.SoundCueName, &SoundCueName, 0x8 );

	pFnGetUISoundCue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUISoundCue, &GetUISoundCue_Parms, NULL );

	pFnGetUISoundCue->FunctionFlags |= 0x400;

	if ( out_UISoundCue )
		*out_UISoundCue = GetUISoundCue_Parms.out_UISoundCue;

	return GetUISoundCue_Parms.ReturnValue;
};

// Function Engine.UISkin.RemoveUISoundCue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SoundCueName                   ( CPF_Parm )

bool UUISkin::RemoveUISoundCue ( struct FName SoundCueName )
{
	static UFunction* pFnRemoveUISoundCue = NULL;

	if ( ! pFnRemoveUISoundCue )
		pFnRemoveUISoundCue = (UFunction*) UObject::GObjObjects()->Data[ 34152 ];

	UUISkin_execRemoveUISoundCue_Parms RemoveUISoundCue_Parms;
	memcpy ( &RemoveUISoundCue_Parms.SoundCueName, &SoundCueName, 0x8 );

	pFnRemoveUISoundCue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveUISoundCue, &RemoveUISoundCue_Parms, NULL );

	pFnRemoveUISoundCue->FunctionFlags |= 0x400;

	return RemoveUISoundCue_Parms.ReturnValue;
};

// Function Engine.UISkin.AddUISoundCue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SoundCueName                   ( CPF_Parm )
// class USoundCue*               SoundToPlay                    ( CPF_Parm )

bool UUISkin::AddUISoundCue ( struct FName SoundCueName, class USoundCue* SoundToPlay )
{
	static UFunction* pFnAddUISoundCue = NULL;

	if ( ! pFnAddUISoundCue )
		pFnAddUISoundCue = (UFunction*) UObject::GObjObjects()->Data[ 34148 ];

	UUISkin_execAddUISoundCue_Parms AddUISoundCue_Parms;
	memcpy ( &AddUISoundCue_Parms.SoundCueName, &SoundCueName, 0x8 );
	AddUISoundCue_Parms.SoundToPlay = SoundToPlay;

	pFnAddUISoundCue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddUISoundCue, &AddUISoundCue_Parms, NULL );

	pFnAddUISoundCue->FunctionFlags |= 0x400;

	return AddUISoundCue_Parms.ReturnValue;
};

// Function Engine.UISkin.GetCursorResource
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUITexture*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   CursorName                     ( CPF_Parm )

class UUITexture* UUISkin::GetCursorResource ( struct FName CursorName )
{
	static UFunction* pFnGetCursorResource = NULL;

	if ( ! pFnGetCursorResource )
		pFnGetCursorResource = (UFunction*) UObject::GObjObjects()->Data[ 34145 ];

	UUISkin_execGetCursorResource_Parms GetCursorResource_Parms;
	memcpy ( &GetCursorResource_Parms.CursorName, &CursorName, 0x8 );

	pFnGetCursorResource->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCursorResource, &GetCursorResource_Parms, NULL );

	pFnGetCursorResource->FunctionFlags |= 0x400;

	return GetCursorResource_Parms.ReturnValue;
};

// Function Engine.UISkin.GetAvailableStyles
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bIncludeInheritedStyles        ( CPF_OptionalParm | CPF_Parm )
// struct TArray<class UUIStyle*> out_Styles                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUISkin::GetAvailableStyles ( unsigned long bIncludeInheritedStyles, struct TArray<class UUIStyle*>* out_Styles )
{
	static UFunction* pFnGetAvailableStyles = NULL;

	if ( ! pFnGetAvailableStyles )
		pFnGetAvailableStyles = (UFunction*) UObject::GObjObjects()->Data[ 34141 ];

	UUISkin_execGetAvailableStyles_Parms GetAvailableStyles_Parms;
	GetAvailableStyles_Parms.bIncludeInheritedStyles = bIncludeInheritedStyles;

	pFnGetAvailableStyles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAvailableStyles, &GetAvailableStyles_Parms, NULL );

	pFnGetAvailableStyles->FunctionFlags |= 0x400;

	if ( out_Styles )
		memcpy ( out_Styles, &GetAvailableStyles_Parms.out_Styles, 0x10 );
};

// Function Engine.UIStyle.GetDefaultStyle
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class UUIStyle_Data*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIStyle_Data* UUIStyle::eventGetDefaultStyle ( )
{
	static UFunction* pFnGetDefaultStyle = NULL;

	if ( ! pFnGetDefaultStyle )
		pFnGetDefaultStyle = (UFunction*) UObject::GObjObjects()->Data[ 35874 ];

	UUIStyle_eventGetDefaultStyle_Parms GetDefaultStyle_Parms;

	this->ProcessEvent ( pFnGetDefaultStyle, &GetDefaultStyle_Parms, NULL );

	return GetDefaultStyle_Parms.ReturnValue;
};

// Function Engine.UIStyle.GetStyleForStateByClass
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyle_Data*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  StateClass                     ( CPF_Parm )

class UUIStyle_Data* UUIStyle::GetStyleForStateByClass ( class UClass* StateClass )
{
	static UFunction* pFnGetStyleForStateByClass = NULL;

	if ( ! pFnGetStyleForStateByClass )
		pFnGetStyleForStateByClass = (UFunction*) UObject::GObjObjects()->Data[ 35871 ];

	UUIStyle_execGetStyleForStateByClass_Parms GetStyleForStateByClass_Parms;
	GetStyleForStateByClass_Parms.StateClass = StateClass;

	pFnGetStyleForStateByClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStyleForStateByClass, &GetStyleForStateByClass_Parms, NULL );

	pFnGetStyleForStateByClass->FunctionFlags |= 0x400;

	return GetStyleForStateByClass_Parms.ReturnValue;
};

// Function Engine.UIStyle.GetStyleForState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyle_Data*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIState*                StateObject                    ( CPF_Parm )

class UUIStyle_Data* UUIStyle::GetStyleForState ( class UUIState* StateObject )
{
	static UFunction* pFnGetStyleForState = NULL;

	if ( ! pFnGetStyleForState )
		pFnGetStyleForState = (UFunction*) UObject::GObjObjects()->Data[ 35868 ];

	UUIStyle_execGetStyleForState_Parms GetStyleForState_Parms;
	GetStyleForState_Parms.StateObject = StateObject;

	pFnGetStyleForState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStyleForState, &GetStyleForState_Parms, NULL );

	pFnGetStyleForState->FunctionFlags |= 0x400;

	return GetStyleForState_Parms.ReturnValue;
};

// Function Engine.UIObject.LogRenderBounds
// [0x00020002] 
// Parameters infos:
// int                            Indent                         ( CPF_Parm )

void UUIObject::LogRenderBounds ( int Indent )
{
	static UFunction* pFnLogRenderBounds = NULL;

	if ( ! pFnLogRenderBounds )
		pFnLogRenderBounds = (UFunction*) UObject::GObjObjects()->Data[ 33056 ];

	UUIObject_execLogRenderBounds_Parms LogRenderBounds_Parms;
	LogRenderBounds_Parms.Indent = Indent;

	this->ProcessEvent ( pFnLogRenderBounds, &LogRenderBounds_Parms, NULL );
};

// Function Engine.UIObject.ClearDockTargets
// [0x00020002] 
// Parameters infos:

void UUIObject::ClearDockTargets ( )
{
	static UFunction* pFnClearDockTargets = NULL;

	if ( ! pFnClearDockTargets )
		pFnClearDockTargets = (UFunction*) UObject::GObjObjects()->Data[ 33054 ];

	UUIObject_execClearDockTargets_Parms ClearDockTargets_Parms;

	this->ProcessEvent ( pFnClearDockTargets, &ClearDockTargets_Parms, NULL );
};

// Function Engine.UIObject.GetParent
// [0x00020002] 
// Parameters infos:
// class UUIScreenObject*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScreenObject* UUIObject::GetParent ( )
{
	static UFunction* pFnGetParent = NULL;

	if ( ! pFnGetParent )
		pFnGetParent = (UFunction*) UObject::GObjObjects()->Data[ 33051 ];

	UUIObject_execGetParent_Parms GetParent_Parms;

	this->ProcessEvent ( pFnGetParent, &GetParent_Parms, NULL );

	return GetParent_Parms.ReturnValue;
};

// Function Engine.UIObject.GetOwner
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIObject* UUIObject::GetOwner ( )
{
	static UFunction* pFnGetOwner = NULL;

	if ( ! pFnGetOwner )
		pFnGetOwner = (UFunction*) UObject::GObjObjects()->Data[ 33048 ];

	UUIObject_execGetOwner_Parms GetOwner_Parms;

	this->ProcessEvent ( pFnGetOwner, &GetOwner_Parms, NULL );

	return GetOwner_Parms.ReturnValue;
};

// Function Engine.UIObject.GetScene
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScene* UUIObject::GetScene ( )
{
	static UFunction* pFnGetScene = NULL;

	if ( ! pFnGetScene )
		pFnGetScene = (UFunction*) UObject::GObjObjects()->Data[ 32736 ];

	UUIObject_execGetScene_Parms GetScene_Parms;

	this->ProcessEvent ( pFnGetScene, &GetScene_Parms, NULL );

	return GetScene_Parms.ReturnValue;
};

// Function Engine.UIObject.SetWidgetStyleByName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StyleResolverTagToSet          ( CPF_Parm )
// struct FName                   StyleFriendlyName              ( CPF_Parm )

bool UUIObject::SetWidgetStyleByName ( struct FName StyleResolverTagToSet, struct FName StyleFriendlyName )
{
	static UFunction* pFnSetWidgetStyleByName = NULL;

	if ( ! pFnSetWidgetStyleByName )
		pFnSetWidgetStyleByName = (UFunction*) UObject::GObjObjects()->Data[ 33043 ];

	UUIObject_execSetWidgetStyleByName_Parms SetWidgetStyleByName_Parms;
	memcpy ( &SetWidgetStyleByName_Parms.StyleResolverTagToSet, &StyleResolverTagToSet, 0x8 );
	memcpy ( &SetWidgetStyleByName_Parms.StyleFriendlyName, &StyleFriendlyName, 0x8 );

	pFnSetWidgetStyleByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWidgetStyleByName, &SetWidgetStyleByName_Parms, NULL );

	pFnSetWidgetStyleByName->FunctionFlags |= 0x400;

	return SetWidgetStyleByName_Parms.ReturnValue;
};

// Function Engine.UIObject.FindStyleSubscriberIndexById
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StyleSubscriberId              ( CPF_Parm )

int UUIObject::FindStyleSubscriberIndexById ( struct FName StyleSubscriberId )
{
	static UFunction* pFnFindStyleSubscriberIndexById = NULL;

	if ( ! pFnFindStyleSubscriberIndexById )
		pFnFindStyleSubscriberIndexById = (UFunction*) UObject::GObjObjects()->Data[ 33040 ];

	UUIObject_execFindStyleSubscriberIndexById_Parms FindStyleSubscriberIndexById_Parms;
	memcpy ( &FindStyleSubscriberIndexById_Parms.StyleSubscriberId, &StyleSubscriberId, 0x8 );

	pFnFindStyleSubscriberIndexById->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindStyleSubscriberIndexById, &FindStyleSubscriberIndexById_Parms, NULL );

	pFnFindStyleSubscriberIndexById->FunctionFlags |= 0x400;

	return FindStyleSubscriberIndexById_Parms.ReturnValue;
};

// Function Engine.UIObject.FindStyleSubscriberIndex
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIStyleResolver*        Subscriber                     ( CPF_Const | CPF_Parm | CPF_OutParm )

int UUIObject::FindStyleSubscriberIndex ( class UUIStyleResolver** Subscriber )
{
	static UFunction* pFnFindStyleSubscriberIndex = NULL;

	if ( ! pFnFindStyleSubscriberIndex )
		pFnFindStyleSubscriberIndex = (UFunction*) UObject::GObjObjects()->Data[ 33037 ];

	UUIObject_execFindStyleSubscriberIndex_Parms FindStyleSubscriberIndex_Parms;

	pFnFindStyleSubscriberIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindStyleSubscriberIndex, &FindStyleSubscriberIndex_Parms, NULL );

	pFnFindStyleSubscriberIndex->FunctionFlags |= 0x400;

	if ( Subscriber )
		*Subscriber = FindStyleSubscriberIndex_Parms.Subscriber;

	return FindStyleSubscriberIndex_Parms.ReturnValue;
};

// Function Engine.UIObject.RemoveStyleSubscriber
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyleResolver*        Subscriber                     ( CPF_Parm )

void UUIObject::RemoveStyleSubscriber ( class UUIStyleResolver* Subscriber )
{
	static UFunction* pFnRemoveStyleSubscriber = NULL;

	if ( ! pFnRemoveStyleSubscriber )
		pFnRemoveStyleSubscriber = (UFunction*) UObject::GObjObjects()->Data[ 33035 ];

	UUIObject_execRemoveStyleSubscriber_Parms RemoveStyleSubscriber_Parms;
	RemoveStyleSubscriber_Parms.Subscriber = Subscriber;

	pFnRemoveStyleSubscriber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveStyleSubscriber, &RemoveStyleSubscriber_Parms, NULL );

	pFnRemoveStyleSubscriber->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.AddStyleSubscriber
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyleResolver*        Subscriber                     ( CPF_Parm )

void UUIObject::AddStyleSubscriber ( class UUIStyleResolver* Subscriber )
{
	static UFunction* pFnAddStyleSubscriber = NULL;

	if ( ! pFnAddStyleSubscriber )
		pFnAddStyleSubscriber = (UFunction*) UObject::GObjObjects()->Data[ 33033 ];

	UUIObject_execAddStyleSubscriber_Parms AddStyleSubscriber_Parms;
	AddStyleSubscriber_Parms.Subscriber = Subscriber;

	pFnAddStyleSubscriber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddStyleSubscriber, &AddStyleSubscriber_Parms, NULL );

	pFnAddStyleSubscriber->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.GetPositionExtent
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Face                           ( CPF_Parm )
// unsigned long                  bIncludeRotation               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncludeOrigin                 ( CPF_OptionalParm | CPF_Parm )

float UUIObject::GetPositionExtent ( unsigned char Face, unsigned long bIncludeRotation, unsigned long bIncludeOrigin )
{
	static UFunction* pFnGetPositionExtent = NULL;

	if ( ! pFnGetPositionExtent )
		pFnGetPositionExtent = (UFunction*) UObject::GObjObjects()->Data[ 33028 ];

	UUIObject_execGetPositionExtent_Parms GetPositionExtent_Parms;
	GetPositionExtent_Parms.Face = Face;
	GetPositionExtent_Parms.bIncludeRotation = bIncludeRotation;
	GetPositionExtent_Parms.bIncludeOrigin = bIncludeOrigin;

	pFnGetPositionExtent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPositionExtent, &GetPositionExtent_Parms, NULL );

	pFnGetPositionExtent->FunctionFlags |= 0x400;

	return GetPositionExtent_Parms.ReturnValue;
};

// Function Engine.UIObject.GetPositionExtents
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bIncludeRotation               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncludeOrigin                 ( CPF_OptionalParm | CPF_Parm )
// float                          MinX                           ( CPF_Parm | CPF_OutParm )
// float                          MaxX                           ( CPF_Parm | CPF_OutParm )
// float                          MinY                           ( CPF_Parm | CPF_OutParm )
// float                          MaxY                           ( CPF_Parm | CPF_OutParm )

void UUIObject::GetPositionExtents ( unsigned long bIncludeRotation, unsigned long bIncludeOrigin, float* MinX, float* MaxX, float* MinY, float* MaxY )
{
	static UFunction* pFnGetPositionExtents = NULL;

	if ( ! pFnGetPositionExtents )
		pFnGetPositionExtents = (UFunction*) UObject::GObjObjects()->Data[ 33021 ];

	UUIObject_execGetPositionExtents_Parms GetPositionExtents_Parms;
	GetPositionExtents_Parms.bIncludeRotation = bIncludeRotation;
	GetPositionExtents_Parms.bIncludeOrigin = bIncludeOrigin;

	pFnGetPositionExtents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPositionExtents, &GetPositionExtents_Parms, NULL );

	pFnGetPositionExtents->FunctionFlags |= 0x400;

	if ( MinX )
		*MinX = GetPositionExtents_Parms.MinX;

	if ( MaxX )
		*MaxX = GetPositionExtents_Parms.MaxX;

	if ( MinY )
		*MinY = GetPositionExtents_Parms.MinY;

	if ( MaxY )
		*MaxY = GetPositionExtents_Parms.MaxY;
};

// Function Engine.UIObject.NeedsActiveCursorUpdates
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIObject::NeedsActiveCursorUpdates ( )
{
	static UFunction* pFnNeedsActiveCursorUpdates = NULL;

	if ( ! pFnNeedsActiveCursorUpdates )
		pFnNeedsActiveCursorUpdates = (UFunction*) UObject::GObjObjects()->Data[ 33019 ];

	UUIObject_execNeedsActiveCursorUpdates_Parms NeedsActiveCursorUpdates_Parms;

	pFnNeedsActiveCursorUpdates->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNeedsActiveCursorUpdates, &NeedsActiveCursorUpdates_Parms, NULL );

	pFnNeedsActiveCursorUpdates->FunctionFlags |= 0x400;

	return NeedsActiveCursorUpdates_Parms.ReturnValue;
};

// Function Engine.UIObject.SetActiveCursorUpdate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldReceiveCursorUpdates    ( CPF_Parm )

void UUIObject::SetActiveCursorUpdate ( unsigned long bShouldReceiveCursorUpdates )
{
	static UFunction* pFnSetActiveCursorUpdate = NULL;

	if ( ! pFnSetActiveCursorUpdate )
		pFnSetActiveCursorUpdate = (UFunction*) UObject::GObjObjects()->Data[ 33017 ];

	UUIObject_execSetActiveCursorUpdate_Parms SetActiveCursorUpdate_Parms;
	SetActiveCursorUpdate_Parms.bShouldReceiveCursorUpdates = bShouldReceiveCursorUpdates;

	pFnSetActiveCursorUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveCursorUpdate, &SetActiveCursorUpdate_Parms, NULL );

	pFnSetActiveCursorUpdate->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.SetPrivateBehavior
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            Behavior                       ( CPF_Parm )
// unsigned long                  Value                          ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

void UUIObject::SetPrivateBehavior ( int Behavior, unsigned long Value, unsigned long bRecurse )
{
	static UFunction* pFnSetPrivateBehavior = NULL;

	if ( ! pFnSetPrivateBehavior )
		pFnSetPrivateBehavior = (UFunction*) UObject::GObjObjects()->Data[ 33013 ];

	UUIObject_execSetPrivateBehavior_Parms SetPrivateBehavior_Parms;
	SetPrivateBehavior_Parms.Behavior = Behavior;
	SetPrivateBehavior_Parms.Value = Value;
	SetPrivateBehavior_Parms.bRecurse = bRecurse;

	pFnSetPrivateBehavior->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPrivateBehavior, &SetPrivateBehavior_Parms, NULL );

	pFnSetPrivateBehavior->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.IsPrivateBehaviorSet
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Behavior                       ( CPF_Parm )

bool UUIObject::IsPrivateBehaviorSet ( int Behavior )
{
	static UFunction* pFnIsPrivateBehaviorSet = NULL;

	if ( ! pFnIsPrivateBehaviorSet )
		pFnIsPrivateBehaviorSet = (UFunction*) UObject::GObjObjects()->Data[ 33010 ];

	UUIObject_execIsPrivateBehaviorSet_Parms IsPrivateBehaviorSet_Parms;
	IsPrivateBehaviorSet_Parms.Behavior = Behavior;

	pFnIsPrivateBehaviorSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPrivateBehaviorSet, &IsPrivateBehaviorSet_Parms, NULL );

	pFnIsPrivateBehaviorSet->FunctionFlags |= 0x400;

	return IsPrivateBehaviorSet_Parms.ReturnValue;
};

// Function Engine.UIObject.CanAcceptFocus
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncludeParentVisibility       ( CPF_OptionalParm | CPF_Parm )

bool UUIObject::CanAcceptFocus ( int PlayerIndex, unsigned long bIncludeParentVisibility )
{
	static UFunction* pFnCanAcceptFocus = NULL;

	if ( ! pFnCanAcceptFocus )
		pFnCanAcceptFocus = (UFunction*) UObject::GObjObjects()->Data[ 33006 ];

	UUIObject_execCanAcceptFocus_Parms CanAcceptFocus_Parms;
	CanAcceptFocus_Parms.PlayerIndex = PlayerIndex;
	CanAcceptFocus_Parms.bIncludeParentVisibility = bIncludeParentVisibility;

	pFnCanAcceptFocus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanAcceptFocus, &CanAcceptFocus_Parms, NULL );

	pFnCanAcceptFocus->FunctionFlags |= 0x400;

	return CanAcceptFocus_Parms.ReturnValue;
};

// Function Engine.UIObject.SetForcedNavigationTarget
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Face                           ( CPF_Parm )
// class UUIObject*               NavTarget                      ( CPF_Parm )
// unsigned long                  bIsNullOverride                ( CPF_OptionalParm | CPF_Parm )

bool UUIObject::SetForcedNavigationTarget ( unsigned char Face, class UUIObject* NavTarget, unsigned long bIsNullOverride )
{
	static UFunction* pFnSetForcedNavigationTarget = NULL;

	if ( ! pFnSetForcedNavigationTarget )
		pFnSetForcedNavigationTarget = (UFunction*) UObject::GObjObjects()->Data[ 33001 ];

	UUIObject_execSetForcedNavigationTarget_Parms SetForcedNavigationTarget_Parms;
	SetForcedNavigationTarget_Parms.Face = Face;
	SetForcedNavigationTarget_Parms.NavTarget = NavTarget;
	SetForcedNavigationTarget_Parms.bIsNullOverride = bIsNullOverride;

	pFnSetForcedNavigationTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetForcedNavigationTarget, &SetForcedNavigationTarget_Parms, NULL );

	pFnSetForcedNavigationTarget->FunctionFlags |= 0x400;

	return SetForcedNavigationTarget_Parms.ReturnValue;
};

// Function Engine.UIObject.SetNavigationTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Face                           ( CPF_Parm )
// class UUIObject*               NewNavTarget                   ( CPF_Parm )

bool UUIObject::SetNavigationTarget ( unsigned char Face, class UUIObject* NewNavTarget )
{
	static UFunction* pFnSetNavigationTarget = NULL;

	if ( ! pFnSetNavigationTarget )
		pFnSetNavigationTarget = (UFunction*) UObject::GObjObjects()->Data[ 32997 ];

	UUIObject_execSetNavigationTarget_Parms SetNavigationTarget_Parms;
	SetNavigationTarget_Parms.Face = Face;
	SetNavigationTarget_Parms.NewNavTarget = NewNavTarget;

	pFnSetNavigationTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNavigationTarget, &SetNavigationTarget_Parms, NULL );

	pFnSetNavigationTarget->FunctionFlags |= 0x400;

	return SetNavigationTarget_Parms.ReturnValue;
};

// Function Engine.UIObject.IsDockedTo
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetWidget                   ( CPF_Const | CPF_Parm )
// unsigned char                  SourceFace                     ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  TargetFace                     ( CPF_OptionalParm | CPF_Parm )

bool UUIObject::IsDockedTo ( class UUIScreenObject* TargetWidget, unsigned char SourceFace, unsigned char TargetFace )
{
	static UFunction* pFnIsDockedTo = NULL;

	if ( ! pFnIsDockedTo )
		pFnIsDockedTo = (UFunction*) UObject::GObjObjects()->Data[ 32992 ];

	UUIObject_execIsDockedTo_Parms IsDockedTo_Parms;
	IsDockedTo_Parms.TargetWidget = TargetWidget;
	IsDockedTo_Parms.SourceFace = SourceFace;
	IsDockedTo_Parms.TargetFace = TargetFace;

	pFnIsDockedTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDockedTo, &IsDockedTo_Parms, NULL );

	pFnIsDockedTo->FunctionFlags |= 0x400;

	return IsDockedTo_Parms.ReturnValue;
};

// Function Engine.UIObject.GetDockParameters
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  SourceFace                     ( CPF_Parm )
// class UUIScreenObject*         TargetWidget                   ( CPF_Parm | CPF_OutParm )
// unsigned char                  TargetFace                     ( CPF_Parm | CPF_OutParm )
// float                          TargetPadding                  ( CPF_Parm | CPF_OutParm )

bool UUIObject::GetDockParameters ( unsigned char SourceFace, class UUIScreenObject** TargetWidget, unsigned char* TargetFace, float* TargetPadding )
{
	static UFunction* pFnGetDockParameters = NULL;

	if ( ! pFnGetDockParameters )
		pFnGetDockParameters = (UFunction*) UObject::GObjObjects()->Data[ 32986 ];

	UUIObject_execGetDockParameters_Parms GetDockParameters_Parms;
	GetDockParameters_Parms.SourceFace = SourceFace;

	pFnGetDockParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDockParameters, &GetDockParameters_Parms, NULL );

	pFnGetDockParameters->FunctionFlags |= 0x400;

	if ( TargetWidget )
		*TargetWidget = GetDockParameters_Parms.TargetWidget;

	if ( TargetFace )
		*TargetFace = GetDockParameters_Parms.TargetFace;

	if ( TargetPadding )
		*TargetPadding = GetDockParameters_Parms.TargetPadding;

	return GetDockParameters_Parms.ReturnValue;
};

// Function Engine.UIObject.SetDockParameters
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  SourceFace                     ( CPF_Parm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// unsigned char                  TargetFace                     ( CPF_Parm )
// float                          PaddingValue                   ( CPF_Parm )
// unsigned char                  PaddingInputType               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bModifyPaddingScaleType        ( CPF_OptionalParm | CPF_Parm )

bool UUIObject::SetDockParameters ( unsigned char SourceFace, class UUIScreenObject* Target, unsigned char TargetFace, float PaddingValue, unsigned char PaddingInputType, unsigned long bModifyPaddingScaleType )
{
	static UFunction* pFnSetDockParameters = NULL;

	if ( ! pFnSetDockParameters )
		pFnSetDockParameters = (UFunction*) UObject::GObjObjects()->Data[ 32978 ];

	UUIObject_execSetDockParameters_Parms SetDockParameters_Parms;
	SetDockParameters_Parms.SourceFace = SourceFace;
	SetDockParameters_Parms.Target = Target;
	SetDockParameters_Parms.TargetFace = TargetFace;
	SetDockParameters_Parms.PaddingValue = PaddingValue;
	SetDockParameters_Parms.PaddingInputType = PaddingInputType;
	SetDockParameters_Parms.bModifyPaddingScaleType = bModifyPaddingScaleType;

	pFnSetDockParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDockParameters, &SetDockParameters_Parms, NULL );

	pFnSetDockParameters->FunctionFlags |= 0x400;

	return SetDockParameters_Parms.ReturnValue;
};

// Function Engine.UIObject.SetDockPadding
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  SourceFace                     ( CPF_Parm )
// float                          PaddingValue                   ( CPF_Parm )
// unsigned char                  PaddingInputType               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bModifyPaddingScaleType        ( CPF_OptionalParm | CPF_Parm )

bool UUIObject::SetDockPadding ( unsigned char SourceFace, float PaddingValue, unsigned char PaddingInputType, unsigned long bModifyPaddingScaleType )
{
	static UFunction* pFnSetDockPadding = NULL;

	if ( ! pFnSetDockPadding )
		pFnSetDockPadding = (UFunction*) UObject::GObjObjects()->Data[ 32972 ];

	UUIObject_execSetDockPadding_Parms SetDockPadding_Parms;
	SetDockPadding_Parms.SourceFace = SourceFace;
	SetDockPadding_Parms.PaddingValue = PaddingValue;
	SetDockPadding_Parms.PaddingInputType = PaddingInputType;
	SetDockPadding_Parms.bModifyPaddingScaleType = bModifyPaddingScaleType;

	pFnSetDockPadding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDockPadding, &SetDockPadding_Parms, NULL );

	pFnSetDockPadding->FunctionFlags |= 0x400;

	return SetDockPadding_Parms.ReturnValue;
};

// Function Engine.UIObject.SetDockTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  SourceFace                     ( CPF_Parm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// unsigned char                  TargetFace                     ( CPF_Parm )

bool UUIObject::SetDockTarget ( unsigned char SourceFace, class UUIScreenObject* Target, unsigned char TargetFace )
{
	static UFunction* pFnSetDockTarget = NULL;

	if ( ! pFnSetDockTarget )
		pFnSetDockTarget = (UFunction*) UObject::GObjObjects()->Data[ 32967 ];

	UUIObject_execSetDockTarget_Parms SetDockTarget_Parms;
	SetDockTarget_Parms.SourceFace = SourceFace;
	SetDockTarget_Parms.Target = Target;
	SetDockTarget_Parms.TargetFace = TargetFace;

	pFnSetDockTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDockTarget, &SetDockTarget_Parms, NULL );

	pFnSetDockTarget->FunctionFlags |= 0x400;

	return SetDockTarget_Parms.ReturnValue;
};

// Function Engine.UIObject.IsContainedBy
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               TestWidget                     ( CPF_Parm )

bool UUIObject::IsContainedBy ( class UUIObject* TestWidget )
{
	static UFunction* pFnIsContainedBy = NULL;

	if ( ! pFnIsContainedBy )
		pFnIsContainedBy = (UFunction*) UObject::GObjObjects()->Data[ 32964 ];

	UUIObject_execIsContainedBy_Parms IsContainedBy_Parms;
	IsContainedBy_Parms.TestWidget = TestWidget;

	pFnIsContainedBy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsContainedBy, &IsContainedBy_Parms, NULL );

	pFnIsContainedBy->FunctionFlags |= 0x400;

	return IsContainedBy_Parms.ReturnValue;
};

// Function Engine.UIObject.NotifyValueChanged
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )
// int                            NotifyFlags                    ( CPF_OptionalParm | CPF_Parm )

void UUIObject::NotifyValueChanged ( int PlayerIndex, int NotifyFlags )
{
	static UFunction* pFnNotifyValueChanged = NULL;

	if ( ! pFnNotifyValueChanged )
		pFnNotifyValueChanged = (UFunction*) UObject::GObjObjects()->Data[ 32961 ];

	UUIObject_execNotifyValueChanged_Parms NotifyValueChanged_Parms;
	NotifyValueChanged_Parms.PlayerIndex = PlayerIndex;
	NotifyValueChanged_Parms.NotifyFlags = NotifyFlags;

	pFnNotifyValueChanged->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyValueChanged, &NotifyValueChanged_Parms, NULL );

	pFnNotifyValueChanged->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.GetRotationMatrix
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIncludeParentRotations        ( CPF_OptionalParm | CPF_Parm )

struct FMatrix UUIObject::GetRotationMatrix ( unsigned long bIncludeParentRotations )
{
	static UFunction* pFnGetRotationMatrix = NULL;

	if ( ! pFnGetRotationMatrix )
		pFnGetRotationMatrix = (UFunction*) UObject::GObjObjects()->Data[ 32958 ];

	UUIObject_execGetRotationMatrix_Parms GetRotationMatrix_Parms;
	GetRotationMatrix_Parms.bIncludeParentRotations = bIncludeParentRotations;

	pFnGetRotationMatrix->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRotationMatrix, &GetRotationMatrix_Parms, NULL );

	pFnGetRotationMatrix->FunctionFlags |= 0x400;

	return GetRotationMatrix_Parms.ReturnValue;
};

// Function Engine.UIObject.GenerateTransformMatrix
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIncludeParentTransforms       ( CPF_OptionalParm | CPF_Parm )

struct FMatrix UUIObject::GenerateTransformMatrix ( unsigned long bIncludeParentTransforms )
{
	static UFunction* pFnGenerateTransformMatrix = NULL;

	if ( ! pFnGenerateTransformMatrix )
		pFnGenerateTransformMatrix = (UFunction*) UObject::GObjObjects()->Data[ 32955 ];

	UUIObject_execGenerateTransformMatrix_Parms GenerateTransformMatrix_Parms;
	GenerateTransformMatrix_Parms.bIncludeParentTransforms = bIncludeParentTransforms;

	pFnGenerateTransformMatrix->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGenerateTransformMatrix, &GenerateTransformMatrix_Parms, NULL );

	pFnGenerateTransformMatrix->FunctionFlags |= 0x400;

	return GenerateTransformMatrix_Parms.ReturnValue;
};

// Function Engine.UIObject.GetAnchorPosition
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bRelativeToWidget              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPixelSpace                    ( CPF_OptionalParm | CPF_Parm )

struct FVector UUIObject::GetAnchorPosition ( unsigned long bRelativeToWidget, unsigned long bPixelSpace )
{
	static UFunction* pFnGetAnchorPosition = NULL;

	if ( ! pFnGetAnchorPosition )
		pFnGetAnchorPosition = (UFunction*) UObject::GObjObjects()->Data[ 32951 ];

	UUIObject_execGetAnchorPosition_Parms GetAnchorPosition_Parms;
	GetAnchorPosition_Parms.bRelativeToWidget = bRelativeToWidget;
	GetAnchorPosition_Parms.bPixelSpace = bPixelSpace;

	pFnGetAnchorPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAnchorPosition, &GetAnchorPosition_Parms, NULL );

	pFnGetAnchorPosition->FunctionFlags |= 0x400;

	return GetAnchorPosition_Parms.ReturnValue;
};

// Function Engine.UIObject.UpdateRotationMatrix
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIObject::UpdateRotationMatrix ( )
{
	static UFunction* pFnUpdateRotationMatrix = NULL;

	if ( ! pFnUpdateRotationMatrix )
		pFnUpdateRotationMatrix = (UFunction*) UObject::GObjObjects()->Data[ 32950 ];

	UUIObject_execUpdateRotationMatrix_Parms UpdateRotationMatrix_Parms;

	pFnUpdateRotationMatrix->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateRotationMatrix, &UpdateRotationMatrix_Parms, NULL );

	pFnUpdateRotationMatrix->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.RotateWidget
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FRotator                NewRotationAmount              ( CPF_Parm )
// unsigned long                  bAccumulateRotation            ( CPF_OptionalParm | CPF_Parm )

void UUIObject::RotateWidget ( struct FRotator NewRotationAmount, unsigned long bAccumulateRotation )
{
	static UFunction* pFnRotateWidget = NULL;

	if ( ! pFnRotateWidget )
		pFnRotateWidget = (UFunction*) UObject::GObjObjects()->Data[ 32947 ];

	UUIObject_execRotateWidget_Parms RotateWidget_Parms;
	memcpy ( &RotateWidget_Parms.NewRotationAmount, &NewRotationAmount, 0xC );
	RotateWidget_Parms.bAccumulateRotation = bAccumulateRotation;

	pFnRotateWidget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRotateWidget, &RotateWidget_Parms, NULL );

	pFnRotateWidget->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.SetAnchorPosition
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewAnchorPosition              ( CPF_Parm )
// unsigned char                  InputType                      ( CPF_OptionalParm | CPF_Parm )

void UUIObject::SetAnchorPosition ( struct FVector NewAnchorPosition, unsigned char InputType )
{
	static UFunction* pFnSetAnchorPosition = NULL;

	if ( ! pFnSetAnchorPosition )
		pFnSetAnchorPosition = (UFunction*) UObject::GObjObjects()->Data[ 32944 ];

	UUIObject_execSetAnchorPosition_Parms SetAnchorPosition_Parms;
	memcpy ( &SetAnchorPosition_Parms.NewAnchorPosition, &NewAnchorPosition, 0xC );
	SetAnchorPosition_Parms.InputType = InputType;

	pFnSetAnchorPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAnchorPosition, &SetAnchorPosition_Parms, NULL );

	pFnSetAnchorPosition->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.HasTransform
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIncludeParentTransforms       ( CPF_OptionalParm | CPF_Parm )

bool UUIObject::HasTransform ( unsigned long bIncludeParentTransforms )
{
	static UFunction* pFnHasTransform = NULL;

	if ( ! pFnHasTransform )
		pFnHasTransform = (UFunction*) UObject::GObjObjects()->Data[ 32941 ];

	UUIObject_execHasTransform_Parms HasTransform_Parms;
	HasTransform_Parms.bIncludeParentTransforms = bIncludeParentTransforms;

	pFnHasTransform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasTransform, &HasTransform_Parms, NULL );

	pFnHasTransform->FunctionFlags |= 0x400;

	return HasTransform_Parms.ReturnValue;
};

// Function Engine.UIObject.GetToolTipValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UUIObject::GetToolTipValue ( )
{
	static UFunction* pFnGetToolTipValue = NULL;

	if ( ! pFnGetToolTipValue )
		pFnGetToolTipValue = (UFunction*) UObject::GObjObjects()->Data[ 32939 ];

	UUIObject_execGetToolTipValue_Parms GetToolTipValue_Parms;

	pFnGetToolTipValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetToolTipValue, &GetToolTipValue_Parms, NULL );

	pFnGetToolTipValue->FunctionFlags |= 0x400;

	return GetToolTipValue_Parms.ReturnValue;
};

// Function Engine.UIObject.GenerateSceneDataStoreMarkup
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Group                          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

struct FString UUIObject::GenerateSceneDataStoreMarkup ( struct FString Group )
{
	static UFunction* pFnGenerateSceneDataStoreMarkup = NULL;

	if ( ! pFnGenerateSceneDataStoreMarkup )
		pFnGenerateSceneDataStoreMarkup = (UFunction*) UObject::GObjObjects()->Data[ 32936 ];

	UUIObject_execGenerateSceneDataStoreMarkup_Parms GenerateSceneDataStoreMarkup_Parms;
	memcpy ( &GenerateSceneDataStoreMarkup_Parms.Group, &Group, 0x10 );

	pFnGenerateSceneDataStoreMarkup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGenerateSceneDataStoreMarkup, &GenerateSceneDataStoreMarkup_Parms, NULL );

	pFnGenerateSceneDataStoreMarkup->FunctionFlags |= 0x400;

	return GenerateSceneDataStoreMarkup_Parms.ReturnValue;
};

// Function Engine.UIObject.ClearDefaultDataBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            BindingIndex                   ( CPF_Parm )

void UUIObject::ClearDefaultDataBinding ( int BindingIndex )
{
	static UFunction* pFnClearDefaultDataBinding = NULL;

	if ( ! pFnClearDefaultDataBinding )
		pFnClearDefaultDataBinding = (UFunction*) UObject::GObjObjects()->Data[ 32934 ];

	UUIObject_execClearDefaultDataBinding_Parms ClearDefaultDataBinding_Parms;
	ClearDefaultDataBinding_Parms.BindingIndex = BindingIndex;

	pFnClearDefaultDataBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearDefaultDataBinding, &ClearDefaultDataBinding_Parms, NULL );

	pFnClearDefaultDataBinding->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.GetDefaultDataStores
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct TArray<class UUIDataStore*> out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIObject::GetDefaultDataStores ( struct TArray<class UUIDataStore*>* out_BoundDataStores )
{
	static UFunction* pFnGetDefaultDataStores = NULL;

	if ( ! pFnGetDefaultDataStores )
		pFnGetDefaultDataStores = (UFunction*) UObject::GObjObjects()->Data[ 32931 ];

	UUIObject_execGetDefaultDataStores_Parms GetDefaultDataStores_Parms;

	pFnGetDefaultDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultDataStores, &GetDefaultDataStores_Parms, NULL );

	pFnGetDefaultDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetDefaultDataStores_Parms.out_BoundDataStores, 0x10 );
};

// Function Engine.UIObject.ResolveDefaultDataBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_Parm )

bool UUIObject::ResolveDefaultDataBinding ( int BindingIndex )
{
	static UFunction* pFnResolveDefaultDataBinding = NULL;

	if ( ! pFnResolveDefaultDataBinding )
		pFnResolveDefaultDataBinding = (UFunction*) UObject::GObjObjects()->Data[ 32928 ];

	UUIObject_execResolveDefaultDataBinding_Parms ResolveDefaultDataBinding_Parms;
	ResolveDefaultDataBinding_Parms.BindingIndex = BindingIndex;

	pFnResolveDefaultDataBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveDefaultDataBinding, &ResolveDefaultDataBinding_Parms, NULL );

	pFnResolveDefaultDataBinding->FunctionFlags |= 0x400;

	return ResolveDefaultDataBinding_Parms.ReturnValue;
};

// Function Engine.UIObject.GetDefaultDataBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_Parm )

struct FString UUIObject::GetDefaultDataBinding ( int BindingIndex )
{
	static UFunction* pFnGetDefaultDataBinding = NULL;

	if ( ! pFnGetDefaultDataBinding )
		pFnGetDefaultDataBinding = (UFunction*) UObject::GObjObjects()->Data[ 32925 ];

	UUIObject_execGetDefaultDataBinding_Parms GetDefaultDataBinding_Parms;
	GetDefaultDataBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDefaultDataBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultDataBinding, &GetDefaultDataBinding_Parms, NULL );

	pFnGetDefaultDataBinding->FunctionFlags |= 0x400;

	return GetDefaultDataBinding_Parms.ReturnValue;
};

// Function Engine.UIObject.SetDefaultDataBinding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_Parm )

void UUIObject::SetDefaultDataBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDefaultDataBinding = NULL;

	if ( ! pFnSetDefaultDataBinding )
		pFnSetDefaultDataBinding = (UFunction*) UObject::GObjObjects()->Data[ 32922 ];

	UUIObject_execSetDefaultDataBinding_Parms SetDefaultDataBinding_Parms;
	memcpy ( &SetDefaultDataBinding_Parms.MarkupText, &MarkupText, 0x10 );
	SetDefaultDataBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDefaultDataBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDefaultDataBinding, &SetDefaultDataBinding_Parms, NULL );

	pFnSetDefaultDataBinding->FunctionFlags |= 0x400;
};

// Function Engine.UIObject.OnContextMenuItemSelected
// [0x00120000] 
// Parameters infos:
// class UUIContextMenu*          ContextMenu                    ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// int                            ItemIndex                      ( CPF_Parm )

void UUIObject::OnContextMenuItemSelected ( class UUIContextMenu* ContextMenu, int PlayerIndex, int ItemIndex )
{
	static UFunction* pFnOnContextMenuItemSelected = NULL;

	if ( ! pFnOnContextMenuItemSelected )
		pFnOnContextMenuItemSelected = (UFunction*) UObject::GObjObjects()->Data[ 32918 ];

	UUIObject_execOnContextMenuItemSelected_Parms OnContextMenuItemSelected_Parms;
	OnContextMenuItemSelected_Parms.ContextMenu = ContextMenu;
	OnContextMenuItemSelected_Parms.PlayerIndex = PlayerIndex;
	OnContextMenuItemSelected_Parms.ItemIndex = ItemIndex;

	this->ProcessEvent ( pFnOnContextMenuItemSelected, &OnContextMenuItemSelected_Parms, NULL );
};

// Function Engine.UIObject.OnCloseContextMenu
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIContextMenu*          ContextMenu                    ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIObject::OnCloseContextMenu ( class UUIContextMenu* ContextMenu, int PlayerIndex )
{
	static UFunction* pFnOnCloseContextMenu = NULL;

	if ( ! pFnOnCloseContextMenu )
		pFnOnCloseContextMenu = (UFunction*) UObject::GObjObjects()->Data[ 32914 ];

	UUIObject_execOnCloseContextMenu_Parms OnCloseContextMenu_Parms;
	OnCloseContextMenu_Parms.ContextMenu = ContextMenu;
	OnCloseContextMenu_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnCloseContextMenu, &OnCloseContextMenu_Parms, NULL );

	return OnCloseContextMenu_Parms.ReturnValue;
};

// Function Engine.UIObject.OnOpenContextMenu
// [0x00520000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// class UUIContextMenu*          CustomContextMenu              ( CPF_Parm | CPF_OutParm )

bool UUIObject::OnOpenContextMenu ( class UUIObject* Sender, int PlayerIndex, class UUIContextMenu** CustomContextMenu )
{
	static UFunction* pFnOnOpenContextMenu = NULL;

	if ( ! pFnOnOpenContextMenu )
		pFnOnOpenContextMenu = (UFunction*) UObject::GObjObjects()->Data[ 32909 ];

	UUIObject_execOnOpenContextMenu_Parms OnOpenContextMenu_Parms;
	OnOpenContextMenu_Parms.Sender = Sender;
	OnOpenContextMenu_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnOpenContextMenu, &OnOpenContextMenu_Parms, NULL );

	if ( CustomContextMenu )
		*CustomContextMenu = OnOpenContextMenu_Parms.CustomContextMenu;

	return OnOpenContextMenu_Parms.ReturnValue;
};

// Function Engine.UIObject.OnDoubleClick
// [0x00120000] 
// Parameters infos:
// class UUIScreenObject*         EventObject                    ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIObject::OnDoubleClick ( class UUIScreenObject* EventObject, int PlayerIndex )
{
	static UFunction* pFnOnDoubleClick = NULL;

	if ( ! pFnOnDoubleClick )
		pFnOnDoubleClick = (UFunction*) UObject::GObjObjects()->Data[ 32906 ];

	UUIObject_execOnDoubleClick_Parms OnDoubleClick_Parms;
	OnDoubleClick_Parms.EventObject = EventObject;
	OnDoubleClick_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnDoubleClick, &OnDoubleClick_Parms, NULL );
};

// Function Engine.UIObject.OnClicked
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         EventObject                    ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIObject::OnClicked ( class UUIScreenObject* EventObject, int PlayerIndex )
{
	static UFunction* pFnOnClicked = NULL;

	if ( ! pFnOnClicked )
		pFnOnClicked = (UFunction*) UObject::GObjObjects()->Data[ 32902 ];

	UUIObject_execOnClicked_Parms OnClicked_Parms;
	OnClicked_Parms.EventObject = EventObject;
	OnClicked_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnClicked, &OnClicked_Parms, NULL );

	return OnClicked_Parms.ReturnValue;
};

// Function Engine.UIObject.OnPressRelease
// [0x00120000] 
// Parameters infos:
// class UUIScreenObject*         EventObject                    ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIObject::OnPressRelease ( class UUIScreenObject* EventObject, int PlayerIndex )
{
	static UFunction* pFnOnPressRelease = NULL;

	if ( ! pFnOnPressRelease )
		pFnOnPressRelease = (UFunction*) UObject::GObjObjects()->Data[ 32899 ];

	UUIObject_execOnPressRelease_Parms OnPressRelease_Parms;
	OnPressRelease_Parms.EventObject = EventObject;
	OnPressRelease_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnPressRelease, &OnPressRelease_Parms, NULL );
};

// Function Engine.UIObject.OnPressRepeat
// [0x00120000] 
// Parameters infos:
// class UUIScreenObject*         EventObject                    ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIObject::OnPressRepeat ( class UUIScreenObject* EventObject, int PlayerIndex )
{
	static UFunction* pFnOnPressRepeat = NULL;

	if ( ! pFnOnPressRepeat )
		pFnOnPressRepeat = (UFunction*) UObject::GObjObjects()->Data[ 32896 ];

	UUIObject_execOnPressRepeat_Parms OnPressRepeat_Parms;
	OnPressRepeat_Parms.EventObject = EventObject;
	OnPressRepeat_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnPressRepeat, &OnPressRepeat_Parms, NULL );
};

// Function Engine.UIObject.OnPressed
// [0x00120000] 
// Parameters infos:
// class UUIScreenObject*         EventObject                    ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIObject::OnPressed ( class UUIScreenObject* EventObject, int PlayerIndex )
{
	static UFunction* pFnOnPressed = NULL;

	if ( ! pFnOnPressed )
		pFnOnPressed = (UFunction*) UObject::GObjObjects()->Data[ 32893 ];

	UUIObject_execOnPressed_Parms OnPressed_Parms;
	OnPressed_Parms.EventObject = EventObject;
	OnPressed_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnPressed, &OnPressed_Parms, NULL );
};

// Function Engine.UIObject.OnRefreshSubscriberValue
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Sender                         ( CPF_Parm )
// int                            BindingIndex                   ( CPF_Parm )

bool UUIObject::OnRefreshSubscriberValue ( class UUIObject* Sender, int BindingIndex )
{
	static UFunction* pFnOnRefreshSubscriberValue = NULL;

	if ( ! pFnOnRefreshSubscriberValue )
		pFnOnRefreshSubscriberValue = (UFunction*) UObject::GObjObjects()->Data[ 32889 ];

	UUIObject_execOnRefreshSubscriberValue_Parms OnRefreshSubscriberValue_Parms;
	OnRefreshSubscriberValue_Parms.Sender = Sender;
	OnRefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	this->ProcessEvent ( pFnOnRefreshSubscriberValue, &OnRefreshSubscriberValue_Parms, NULL );

	return OnRefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIObject.OnValueChanged
// [0x00120000] 
// Parameters infos:
// class UUIObject*               Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIObject::OnValueChanged ( class UUIObject* Sender, int PlayerIndex )
{
	static UFunction* pFnOnValueChanged = NULL;

	if ( ! pFnOnValueChanged )
		pFnOnValueChanged = (UFunction*) UObject::GObjObjects()->Data[ 32886 ];

	UUIObject_execOnValueChanged_Parms OnValueChanged_Parms;
	OnValueChanged_Parms.Sender = Sender;
	OnValueChanged_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnValueChanged, &OnValueChanged_Parms, NULL );
};

// Function Engine.UIObject.OnPostSceneUpdate
// [0x00120000] 
// Parameters infos:
// class UUIObject*               Sender                         ( CPF_Parm )

void UUIObject::OnPostSceneUpdate ( class UUIObject* Sender )
{
	static UFunction* pFnOnPostSceneUpdate = NULL;

	if ( ! pFnOnPostSceneUpdate )
		pFnOnPostSceneUpdate = (UFunction*) UObject::GObjObjects()->Data[ 32884 ];

	UUIObject_execOnPostSceneUpdate_Parms OnPostSceneUpdate_Parms;
	OnPostSceneUpdate_Parms.Sender = Sender;

	this->ProcessEvent ( pFnOnPostSceneUpdate, &OnPostSceneUpdate_Parms, NULL );
};

// Function Engine.UIObject.OnPreSceneUpdate
// [0x00120000] 
// Parameters infos:
// class UUIObject*               Sender                         ( CPF_Parm )

void UUIObject::OnPreSceneUpdate ( class UUIObject* Sender )
{
	static UFunction* pFnOnPreSceneUpdate = NULL;

	if ( ! pFnOnPreSceneUpdate )
		pFnOnPreSceneUpdate = (UFunction*) UObject::GObjObjects()->Data[ 32882 ];

	UUIObject_execOnPreSceneUpdate_Parms OnPreSceneUpdate_Parms;
	OnPreSceneUpdate_Parms.Sender = Sender;

	this->ProcessEvent ( pFnOnPreSceneUpdate, &OnPreSceneUpdate_Parms, NULL );
};

// Function Engine.UIObject.OnCreate
// [0x00120000] 
// Parameters infos:
// class UUIObject*               CreatedWidget                  ( CPF_Parm )
// class UUIScreenObject*         CreatorContainer               ( CPF_Parm )

void UUIObject::OnCreate ( class UUIObject* CreatedWidget, class UUIScreenObject* CreatorContainer )
{
	static UFunction* pFnOnCreate = NULL;

	if ( ! pFnOnCreate )
		pFnOnCreate = (UFunction*) UObject::GObjObjects()->Data[ 32879 ];

	UUIObject_execOnCreate_Parms OnCreate_Parms;
	OnCreate_Parms.CreatedWidget = CreatedWidget;
	OnCreate_Parms.CreatorContainer = CreatorContainer;

	this->ProcessEvent ( pFnOnCreate, &OnCreate_Parms, NULL );
};

// Function Engine.UIComp_DrawComponents.OnFadeComplete
// [0x00120000] 
// Parameters infos:
// class UUIComp_DrawComponents*  Sender                         ( CPF_Parm | CPF_EditInline )

void UUIComp_DrawComponents::OnFadeComplete ( class UUIComp_DrawComponents* Sender )
{
	static UFunction* pFnOnFadeComplete = NULL;

	if ( ! pFnOnFadeComplete )
		pFnOnFadeComplete = (UFunction*) UObject::GObjObjects()->Data[ 33159 ];

	UUIComp_DrawComponents_execOnFadeComplete_Parms OnFadeComplete_Parms;
	OnFadeComplete_Parms.Sender = Sender;

	this->ProcessEvent ( pFnOnFadeComplete, &OnFadeComplete_Parms, NULL );
};

// Function Engine.UIComp_DrawComponents.ResetFade
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawComponents::ResetFade ( )
{
	static UFunction* pFnResetFade = NULL;

	if ( ! pFnResetFade )
		pFnResetFade = (UFunction*) UObject::GObjObjects()->Data[ 33158 ];

	UUIComp_DrawComponents_execResetFade_Parms ResetFade_Parms;

	pFnResetFade->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetFade, &ResetFade_Parms, NULL );

	pFnResetFade->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawComponents.Pulse
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          MaxAlpha                       ( CPF_OptionalParm | CPF_Parm )
// float                          MinAlpha                       ( CPF_OptionalParm | CPF_Parm )
// float                          PulseRate                      ( CPF_OptionalParm | CPF_Parm )

void UUIComp_DrawComponents::Pulse ( float MaxAlpha, float MinAlpha, float PulseRate )
{
	static UFunction* pFnPulse = NULL;

	if ( ! pFnPulse )
		pFnPulse = (UFunction*) UObject::GObjObjects()->Data[ 33154 ];

	UUIComp_DrawComponents_execPulse_Parms Pulse_Parms;
	Pulse_Parms.MaxAlpha = MaxAlpha;
	Pulse_Parms.MinAlpha = MinAlpha;
	Pulse_Parms.PulseRate = PulseRate;

	pFnPulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPulse, &Pulse_Parms, NULL );

	pFnPulse->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawComponents.Fade
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          FromAlpha                      ( CPF_Parm )
// float                          ToAlpha                        ( CPF_Parm )
// float                          TargetFadeTime                 ( CPF_Parm )

void UUIComp_DrawComponents::Fade ( float FromAlpha, float ToAlpha, float TargetFadeTime )
{
	static UFunction* pFnFade = NULL;

	if ( ! pFnFade )
		pFnFade = (UFunction*) UObject::GObjObjects()->Data[ 33150 ];

	UUIComp_DrawComponents_execFade_Parms Fade_Parms;
	Fade_Parms.FromAlpha = FromAlpha;
	Fade_Parms.ToAlpha = ToAlpha;
	Fade_Parms.TargetFadeTime = TargetFadeTime;

	pFnFade->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFade, &Fade_Parms, NULL );

	pFnFade->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.NotifyResolveStyle
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUISkin*                 ActiveSkin                     ( CPF_Parm )
// unsigned long                  bClearExistingValue            ( CPF_Parm )
// class UUIState*                CurrentMenuState               ( CPF_OptionalParm | CPF_Parm )
// struct FName                   StylePropertyName              ( CPF_Const | CPF_OptionalParm | CPF_Parm )

bool UUIComp_DrawImage::NotifyResolveStyle ( class UUISkin* ActiveSkin, unsigned long bClearExistingValue, class UUIState* CurrentMenuState, struct FName StylePropertyName )
{
	static UFunction* pFnNotifyResolveStyle = NULL;

	if ( ! pFnNotifyResolveStyle )
		pFnNotifyResolveStyle = (UFunction*) UObject::GObjObjects()->Data[ 33197 ];

	UUIComp_DrawImage_execNotifyResolveStyle_Parms NotifyResolveStyle_Parms;
	NotifyResolveStyle_Parms.ActiveSkin = ActiveSkin;
	NotifyResolveStyle_Parms.bClearExistingValue = bClearExistingValue;
	NotifyResolveStyle_Parms.CurrentMenuState = CurrentMenuState;
	memcpy ( &NotifyResolveStyle_Parms.StylePropertyName, &StylePropertyName, 0x8 );

	pFnNotifyResolveStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyResolveStyle, &NotifyResolveStyle_Parms, NULL );

	pFnNotifyResolveStyle->FunctionFlags |= 0x400;

	return NotifyResolveStyle_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawImage.SetStyleResolverTag
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NewResolverTag                 ( CPF_Parm )

bool UUIComp_DrawImage::SetStyleResolverTag ( struct FName NewResolverTag )
{
	static UFunction* pFnSetStyleResolverTag = NULL;

	if ( ! pFnSetStyleResolverTag )
		pFnSetStyleResolverTag = (UFunction*) UObject::GObjObjects()->Data[ 33194 ];

	UUIComp_DrawImage_execSetStyleResolverTag_Parms SetStyleResolverTag_Parms;
	memcpy ( &SetStyleResolverTag_Parms.NewResolverTag, &NewResolverTag, 0x8 );

	pFnSetStyleResolverTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStyleResolverTag, &SetStyleResolverTag_Parms, NULL );

	pFnSetStyleResolverTag->FunctionFlags |= 0x400;

	return SetStyleResolverTag_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawImage.GetStyleResolverTag
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UUIComp_DrawImage::GetStyleResolverTag ( )
{
	static UFunction* pFnGetStyleResolverTag = NULL;

	if ( ! pFnGetStyleResolverTag )
		pFnGetStyleResolverTag = (UFunction*) UObject::GObjObjects()->Data[ 33192 ];

	UUIComp_DrawImage_execGetStyleResolverTag_Parms GetStyleResolverTag_Parms;

	pFnGetStyleResolverTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStyleResolverTag, &GetStyleResolverTag_Parms, NULL );

	pFnGetStyleResolverTag->FunctionFlags |= 0x400;

	return GetStyleResolverTag_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawImage.GetImage
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USurface*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USurface* UUIComp_DrawImage::GetImage ( )
{
	static UFunction* pFnGetImage = NULL;

	if ( ! pFnGetImage )
		pFnGetImage = (UFunction*) UObject::GObjObjects()->Data[ 33190 ];

	UUIComp_DrawImage_execGetImage_Parms GetImage_Parms;

	pFnGetImage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetImage, &GetImage_Parms, NULL );

	pFnGetImage->FunctionFlags |= 0x400;

	return GetImage_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawImage.DisableCustomFormatting
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawImage::DisableCustomFormatting ( )
{
	static UFunction* pFnDisableCustomFormatting = NULL;

	if ( ! pFnDisableCustomFormatting )
		pFnDisableCustomFormatting = (UFunction*) UObject::GObjObjects()->Data[ 33189 ];

	UUIComp_DrawImage_execDisableCustomFormatting_Parms DisableCustomFormatting_Parms;

	pFnDisableCustomFormatting->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomFormatting, &DisableCustomFormatting_Parms, NULL );

	pFnDisableCustomFormatting->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.DisableCustomPadding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawImage::DisableCustomPadding ( )
{
	static UFunction* pFnDisableCustomPadding = NULL;

	if ( ! pFnDisableCustomPadding )
		pFnDisableCustomPadding = (UFunction*) UObject::GObjObjects()->Data[ 33188 ];

	UUIComp_DrawImage_execDisableCustomPadding_Parms DisableCustomPadding_Parms;

	pFnDisableCustomPadding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomPadding, &DisableCustomPadding_Parms, NULL );

	pFnDisableCustomPadding->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.DisableCustomOpacity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawImage::DisableCustomOpacity ( )
{
	static UFunction* pFnDisableCustomOpacity = NULL;

	if ( ! pFnDisableCustomOpacity )
		pFnDisableCustomOpacity = (UFunction*) UObject::GObjObjects()->Data[ 33187 ];

	UUIComp_DrawImage_execDisableCustomOpacity_Parms DisableCustomOpacity_Parms;

	pFnDisableCustomOpacity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomOpacity, &DisableCustomOpacity_Parms, NULL );

	pFnDisableCustomOpacity->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.DisableCustomColor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawImage::DisableCustomColor ( )
{
	static UFunction* pFnDisableCustomColor = NULL;

	if ( ! pFnDisableCustomColor )
		pFnDisableCustomColor = (UFunction*) UObject::GObjObjects()->Data[ 33186 ];

	UUIComp_DrawImage_execDisableCustomColor_Parms DisableCustomColor_Parms;

	pFnDisableCustomColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomColor, &DisableCustomColor_Parms, NULL );

	pFnDisableCustomColor->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.DisableCustomCoordinates
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawImage::DisableCustomCoordinates ( )
{
	static UFunction* pFnDisableCustomCoordinates = NULL;

	if ( ! pFnDisableCustomCoordinates )
		pFnDisableCustomCoordinates = (UFunction*) UObject::GObjObjects()->Data[ 33185 ];

	UUIComp_DrawImage_execDisableCustomCoordinates_Parms DisableCustomCoordinates_Parms;

	pFnDisableCustomCoordinates->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomCoordinates, &DisableCustomCoordinates_Parms, NULL );

	pFnDisableCustomCoordinates->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.SetFormatting
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// struct FUIImageAdjustmentData  NewFormattingData              ( CPF_Parm )

void UUIComp_DrawImage::SetFormatting ( unsigned char Orientation, struct FUIImageAdjustmentData NewFormattingData )
{
	static UFunction* pFnSetFormatting = NULL;

	if ( ! pFnSetFormatting )
		pFnSetFormatting = (UFunction*) UObject::GObjObjects()->Data[ 33182 ];

	UUIComp_DrawImage_execSetFormatting_Parms SetFormatting_Parms;
	SetFormatting_Parms.Orientation = Orientation;
	memcpy ( &SetFormatting_Parms.NewFormattingData, &NewFormattingData, 0x14 );

	pFnSetFormatting->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFormatting, &SetFormatting_Parms, NULL );

	pFnSetFormatting->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.SetPadding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          HorizontalPadding              ( CPF_Parm )
// float                          VerticalPadding                ( CPF_Parm )

void UUIComp_DrawImage::SetPadding ( float HorizontalPadding, float VerticalPadding )
{
	static UFunction* pFnSetPadding = NULL;

	if ( ! pFnSetPadding )
		pFnSetPadding = (UFunction*) UObject::GObjObjects()->Data[ 33179 ];

	UUIComp_DrawImage_execSetPadding_Parms SetPadding_Parms;
	SetPadding_Parms.HorizontalPadding = HorizontalPadding;
	SetPadding_Parms.VerticalPadding = VerticalPadding;

	pFnSetPadding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPadding, &SetPadding_Parms, NULL );

	pFnSetPadding->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.SetOpacity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewOpacity                     ( CPF_Parm )

void UUIComp_DrawImage::SetOpacity ( float NewOpacity )
{
	static UFunction* pFnSetOpacity = NULL;

	if ( ! pFnSetOpacity )
		pFnSetOpacity = (UFunction*) UObject::GObjObjects()->Data[ 33177 ];

	UUIComp_DrawImage_execSetOpacity_Parms SetOpacity_Parms;
	SetOpacity_Parms.NewOpacity = NewOpacity;

	pFnSetOpacity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOpacity, &SetOpacity_Parms, NULL );

	pFnSetOpacity->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.SetColor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FLinearColor            NewColor                       ( CPF_Parm )

void UUIComp_DrawImage::SetColor ( struct FLinearColor NewColor )
{
	static UFunction* pFnSetColor = NULL;

	if ( ! pFnSetColor )
		pFnSetColor = (UFunction*) UObject::GObjObjects()->Data[ 33175 ];

	UUIComp_DrawImage_execSetColor_Parms SetColor_Parms;
	memcpy ( &SetColor_Parms.NewColor, &NewColor, 0x10 );

	pFnSetColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetColor, &SetColor_Parms, NULL );

	pFnSetColor->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.SetCoordinates
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FTextureCoordinates     NewCoordinates                 ( CPF_Parm )

void UUIComp_DrawImage::SetCoordinates ( struct FTextureCoordinates NewCoordinates )
{
	static UFunction* pFnSetCoordinates = NULL;

	if ( ! pFnSetCoordinates )
		pFnSetCoordinates = (UFunction*) UObject::GObjObjects()->Data[ 33173 ];

	UUIComp_DrawImage_execSetCoordinates_Parms SetCoordinates_Parms;
	memcpy ( &SetCoordinates_Parms.NewCoordinates, &NewCoordinates, 0x10 );

	pFnSetCoordinates->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCoordinates, &SetCoordinates_Parms, NULL );

	pFnSetCoordinates->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.SetImage
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USurface*                NewImage                       ( CPF_Parm )

void UUIComp_DrawImage::SetImage ( class USurface* NewImage )
{
	static UFunction* pFnSetImage = NULL;

	if ( ! pFnSetImage )
		pFnSetImage = (UFunction*) UObject::GObjObjects()->Data[ 33171 ];

	UUIComp_DrawImage_execSetImage_Parms SetImage_Parms;
	SetImage_Parms.NewImage = NewImage;

	pFnSetImage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetImage, &SetImage_Parms, NULL );

	pFnSetImage->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawImage.GetAppliedImageStyle
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyle_Image*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIState*                DesiredMenuState               ( CPF_OptionalParm | CPF_Parm )

class UUIStyle_Image* UUIComp_DrawImage::GetAppliedImageStyle ( class UUIState* DesiredMenuState )
{
	static UFunction* pFnGetAppliedImageStyle = NULL;

	if ( ! pFnGetAppliedImageStyle )
		pFnGetAppliedImageStyle = (UFunction*) UObject::GObjObjects()->Data[ 33168 ];

	UUIComp_DrawImage_execGetAppliedImageStyle_Parms GetAppliedImageStyle_Parms;
	GetAppliedImageStyle_Parms.DesiredMenuState = DesiredMenuState;

	pFnGetAppliedImageStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAppliedImageStyle, &GetAppliedImageStyle_Parms, NULL );

	pFnGetAppliedImageStyle->FunctionFlags |= 0x400;

	return GetAppliedImageStyle_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.SetAutoSizePadding
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// float                          NearValue                      ( CPF_Parm )
// float                          FarValue                       ( CPF_Parm )
// unsigned char                  NearScaleType                  ( CPF_Parm )
// unsigned char                  FarScaleType                   ( CPF_Parm )

void UUIComp_DrawString::eventSetAutoSizePadding ( unsigned char Orientation, float NearValue, float FarValue, unsigned char NearScaleType, unsigned char FarScaleType )
{
	static UFunction* pFnSetAutoSizePadding = NULL;

	if ( ! pFnSetAutoSizePadding )
		pFnSetAutoSizePadding = (UFunction*) UObject::GObjObjects()->Data[ 33321 ];

	UUIComp_DrawString_eventSetAutoSizePadding_Parms SetAutoSizePadding_Parms;
	SetAutoSizePadding_Parms.Orientation = Orientation;
	SetAutoSizePadding_Parms.NearValue = NearValue;
	SetAutoSizePadding_Parms.FarValue = FarValue;
	SetAutoSizePadding_Parms.NearScaleType = NearScaleType;
	SetAutoSizePadding_Parms.FarScaleType = FarScaleType;

	this->ProcessEvent ( pFnSetAutoSizePadding, &SetAutoSizePadding_Parms, NULL );
};

// Function Engine.UIComp_DrawString.EnableAutoSizing
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// unsigned long                  bShouldEnable                  ( CPF_OptionalParm | CPF_Parm )

void UUIComp_DrawString::eventEnableAutoSizing ( unsigned char Orientation, unsigned long bShouldEnable )
{
	static UFunction* pFnEnableAutoSizing = NULL;

	if ( ! pFnEnableAutoSizing )
		pFnEnableAutoSizing = (UFunction*) UObject::GObjObjects()->Data[ 33316 ];

	UUIComp_DrawString_eventEnableAutoSizing_Parms EnableAutoSizing_Parms;
	EnableAutoSizing_Parms.Orientation = Orientation;
	EnableAutoSizing_Parms.bShouldEnable = bShouldEnable;

	this->ProcessEvent ( pFnEnableAutoSizing, &EnableAutoSizing_Parms, NULL );
};

// Function Engine.UIComp_DrawString.IsAutoSizeEnabled
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Orientation                    ( CPF_Parm )

bool UUIComp_DrawString::IsAutoSizeEnabled ( unsigned char Orientation )
{
	static UFunction* pFnIsAutoSizeEnabled = NULL;

	if ( ! pFnIsAutoSizeEnabled )
		pFnIsAutoSizeEnabled = (UFunction*) UObject::GObjObjects()->Data[ 33312 ];

	UUIComp_DrawString_execIsAutoSizeEnabled_Parms IsAutoSizeEnabled_Parms;
	IsAutoSizeEnabled_Parms.Orientation = Orientation;

	this->ProcessEvent ( pFnIsAutoSizeEnabled, &IsAutoSizeEnabled_Parms, NULL );

	return IsAutoSizeEnabled_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.SetAutoSizeExtent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// float                          MinValue                       ( CPF_Parm )
// float                          MaxValue                       ( CPF_Parm )
// unsigned char                  MinScaleType                   ( CPF_Parm )
// unsigned char                  MaxScaleType                   ( CPF_Parm )

void UUIComp_DrawString::SetAutoSizeExtent ( unsigned char Orientation, float MinValue, float MaxValue, unsigned char MinScaleType, unsigned char MaxScaleType )
{
	static UFunction* pFnSetAutoSizeExtent = NULL;

	if ( ! pFnSetAutoSizeExtent )
		pFnSetAutoSizeExtent = (UFunction*) UObject::GObjObjects()->Data[ 33306 ];

	UUIComp_DrawString_execSetAutoSizeExtent_Parms SetAutoSizeExtent_Parms;
	SetAutoSizeExtent_Parms.Orientation = Orientation;
	SetAutoSizeExtent_Parms.MinValue = MinValue;
	SetAutoSizeExtent_Parms.MaxValue = MaxValue;
	SetAutoSizeExtent_Parms.MinScaleType = MinScaleType;
	SetAutoSizeExtent_Parms.MaxScaleType = MaxScaleType;

	pFnSetAutoSizeExtent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAutoSizeExtent, &SetAutoSizeExtent_Parms, NULL );

	pFnSetAutoSizeExtent->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.NotifyResolveStyle
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUISkin*                 ActiveSkin                     ( CPF_Parm )
// unsigned long                  bClearExistingValue            ( CPF_Parm )
// class UUIState*                CurrentMenuState               ( CPF_OptionalParm | CPF_Parm )
// struct FName                   StylePropertyName              ( CPF_Const | CPF_OptionalParm | CPF_Parm )

bool UUIComp_DrawString::NotifyResolveStyle ( class UUISkin* ActiveSkin, unsigned long bClearExistingValue, class UUIState* CurrentMenuState, struct FName StylePropertyName )
{
	static UFunction* pFnNotifyResolveStyle = NULL;

	if ( ! pFnNotifyResolveStyle )
		pFnNotifyResolveStyle = (UFunction*) UObject::GObjObjects()->Data[ 33300 ];

	UUIComp_DrawString_execNotifyResolveStyle_Parms NotifyResolveStyle_Parms;
	NotifyResolveStyle_Parms.ActiveSkin = ActiveSkin;
	NotifyResolveStyle_Parms.bClearExistingValue = bClearExistingValue;
	NotifyResolveStyle_Parms.CurrentMenuState = CurrentMenuState;
	memcpy ( &NotifyResolveStyle_Parms.StylePropertyName, &StylePropertyName, 0x8 );

	pFnNotifyResolveStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyResolveStyle, &NotifyResolveStyle_Parms, NULL );

	pFnNotifyResolveStyle->FunctionFlags |= 0x400;

	return NotifyResolveStyle_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.SetStyleResolverTag
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NewResolverTag                 ( CPF_Parm )

bool UUIComp_DrawString::SetStyleResolverTag ( struct FName NewResolverTag )
{
	static UFunction* pFnSetStyleResolverTag = NULL;

	if ( ! pFnSetStyleResolverTag )
		pFnSetStyleResolverTag = (UFunction*) UObject::GObjObjects()->Data[ 33297 ];

	UUIComp_DrawString_execSetStyleResolverTag_Parms SetStyleResolverTag_Parms;
	memcpy ( &SetStyleResolverTag_Parms.NewResolverTag, &NewResolverTag, 0x8 );

	pFnSetStyleResolverTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStyleResolverTag, &SetStyleResolverTag_Parms, NULL );

	pFnSetStyleResolverTag->FunctionFlags |= 0x400;

	return SetStyleResolverTag_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.GetStyleResolverTag
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UUIComp_DrawString::GetStyleResolverTag ( )
{
	static UFunction* pFnGetStyleResolverTag = NULL;

	if ( ! pFnGetStyleResolverTag )
		pFnGetStyleResolverTag = (UFunction*) UObject::GObjObjects()->Data[ 33295 ];

	UUIComp_DrawString_execGetStyleResolverTag_Parms GetStyleResolverTag_Parms;

	pFnGetStyleResolverTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStyleResolverTag, &GetStyleResolverTag_Parms, NULL );

	pFnGetStyleResolverTag->FunctionFlags |= 0x400;

	return GetStyleResolverTag_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.GetFinalStringStyle
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUICombinedStyleData    FinalStyleData                 ( CPF_Parm | CPF_OutParm )

bool UUIComp_DrawString::GetFinalStringStyle ( struct FUICombinedStyleData* FinalStyleData )
{
	static UFunction* pFnGetFinalStringStyle = NULL;

	if ( ! pFnGetFinalStringStyle )
		pFnGetFinalStringStyle = (UFunction*) UObject::GObjObjects()->Data[ 33292 ];

	UUIComp_DrawString_execGetFinalStringStyle_Parms GetFinalStringStyle_Parms;

	pFnGetFinalStringStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFinalStringStyle, &GetFinalStringStyle_Parms, NULL );

	pFnGetFinalStringStyle->FunctionFlags |= 0x400;

	if ( FinalStyleData )
		memcpy ( FinalStyleData, &GetFinalStringStyle_Parms.FinalStyleData, 0x9C );

	return GetFinalStringStyle_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.GetAppliedStringStyle
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyle_Combo*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIState*                DesiredMenuState               ( CPF_OptionalParm | CPF_Parm )

class UUIStyle_Combo* UUIComp_DrawString::GetAppliedStringStyle ( class UUIState* DesiredMenuState )
{
	static UFunction* pFnGetAppliedStringStyle = NULL;

	if ( ! pFnGetAppliedStringStyle )
		pFnGetAppliedStringStyle = (UFunction*) UObject::GObjObjects()->Data[ 33289 ];

	UUIComp_DrawString_execGetAppliedStringStyle_Parms GetAppliedStringStyle_Parms;
	GetAppliedStringStyle_Parms.DesiredMenuState = DesiredMenuState;

	pFnGetAppliedStringStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAppliedStringStyle, &GetAppliedStringStyle_Parms, NULL );

	pFnGetAppliedStringStyle->FunctionFlags |= 0x400;

	return GetAppliedStringStyle_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.GetWrapMode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UUIComp_DrawString::GetWrapMode ( )
{
	static UFunction* pFnGetWrapMode = NULL;

	if ( ! pFnGetWrapMode )
		pFnGetWrapMode = (UFunction*) UObject::GObjObjects()->Data[ 33287 ];

	UUIComp_DrawString_execGetWrapMode_Parms GetWrapMode_Parms;

	pFnGetWrapMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWrapMode, &GetWrapMode_Parms, NULL );

	pFnGetWrapMode->FunctionFlags |= 0x400;

	return GetWrapMode_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.DisableCustomSpacingAdjust
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomSpacingAdjust ( )
{
	static UFunction* pFnDisableCustomSpacingAdjust = NULL;

	if ( ! pFnDisableCustomSpacingAdjust )
		pFnDisableCustomSpacingAdjust = (UFunction*) UObject::GObjObjects()->Data[ 33286 ];

	UUIComp_DrawString_execDisableCustomSpacingAdjust_Parms DisableCustomSpacingAdjust_Parms;

	pFnDisableCustomSpacingAdjust->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomSpacingAdjust, &DisableCustomSpacingAdjust_Parms, NULL );

	pFnDisableCustomSpacingAdjust->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomScale ( )
{
	static UFunction* pFnDisableCustomScale = NULL;

	if ( ! pFnDisableCustomScale )
		pFnDisableCustomScale = (UFunction*) UObject::GObjObjects()->Data[ 33285 ];

	UUIComp_DrawString_execDisableCustomScale_Parms DisableCustomScale_Parms;

	pFnDisableCustomScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomScale, &DisableCustomScale_Parms, NULL );

	pFnDisableCustomScale->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomAutoScaling
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomAutoScaling ( )
{
	static UFunction* pFnDisableCustomAutoScaling = NULL;

	if ( ! pFnDisableCustomAutoScaling )
		pFnDisableCustomAutoScaling = (UFunction*) UObject::GObjObjects()->Data[ 33284 ];

	UUIComp_DrawString_execDisableCustomAutoScaling_Parms DisableCustomAutoScaling_Parms;

	pFnDisableCustomAutoScaling->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomAutoScaling, &DisableCustomAutoScaling_Parms, NULL );

	pFnDisableCustomAutoScaling->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomClipAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomClipAlignment ( )
{
	static UFunction* pFnDisableCustomClipAlignment = NULL;

	if ( ! pFnDisableCustomClipAlignment )
		pFnDisableCustomClipAlignment = (UFunction*) UObject::GObjObjects()->Data[ 33283 ];

	UUIComp_DrawString_execDisableCustomClipAlignment_Parms DisableCustomClipAlignment_Parms;

	pFnDisableCustomClipAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomClipAlignment, &DisableCustomClipAlignment_Parms, NULL );

	pFnDisableCustomClipAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomClipMode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomClipMode ( )
{
	static UFunction* pFnDisableCustomClipMode = NULL;

	if ( ! pFnDisableCustomClipMode )
		pFnDisableCustomClipMode = (UFunction*) UObject::GObjObjects()->Data[ 33282 ];

	UUIComp_DrawString_execDisableCustomClipMode_Parms DisableCustomClipMode_Parms;

	pFnDisableCustomClipMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomClipMode, &DisableCustomClipMode_Parms, NULL );

	pFnDisableCustomClipMode->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomAlignment ( )
{
	static UFunction* pFnDisableCustomAlignment = NULL;

	if ( ! pFnDisableCustomAlignment )
		pFnDisableCustomAlignment = (UFunction*) UObject::GObjObjects()->Data[ 33281 ];

	UUIComp_DrawString_execDisableCustomAlignment_Parms DisableCustomAlignment_Parms;

	pFnDisableCustomAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomAlignment, &DisableCustomAlignment_Parms, NULL );

	pFnDisableCustomAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomAttributes
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomAttributes ( )
{
	static UFunction* pFnDisableCustomAttributes = NULL;

	if ( ! pFnDisableCustomAttributes )
		pFnDisableCustomAttributes = (UFunction*) UObject::GObjObjects()->Data[ 33280 ];

	UUIComp_DrawString_execDisableCustomAttributes_Parms DisableCustomAttributes_Parms;

	pFnDisableCustomAttributes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomAttributes, &DisableCustomAttributes_Parms, NULL );

	pFnDisableCustomAttributes->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomFont
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomFont ( )
{
	static UFunction* pFnDisableCustomFont = NULL;

	if ( ! pFnDisableCustomFont )
		pFnDisableCustomFont = (UFunction*) UObject::GObjObjects()->Data[ 33279 ];

	UUIComp_DrawString_execDisableCustomFont_Parms DisableCustomFont_Parms;

	pFnDisableCustomFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomFont, &DisableCustomFont_Parms, NULL );

	pFnDisableCustomFont->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomPadding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomPadding ( )
{
	static UFunction* pFnDisableCustomPadding = NULL;

	if ( ! pFnDisableCustomPadding )
		pFnDisableCustomPadding = (UFunction*) UObject::GObjObjects()->Data[ 33278 ];

	UUIComp_DrawString_execDisableCustomPadding_Parms DisableCustomPadding_Parms;

	pFnDisableCustomPadding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomPadding, &DisableCustomPadding_Parms, NULL );

	pFnDisableCustomPadding->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomOpacity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomOpacity ( )
{
	static UFunction* pFnDisableCustomOpacity = NULL;

	if ( ! pFnDisableCustomOpacity )
		pFnDisableCustomOpacity = (UFunction*) UObject::GObjObjects()->Data[ 33277 ];

	UUIComp_DrawString_execDisableCustomOpacity_Parms DisableCustomOpacity_Parms;

	pFnDisableCustomOpacity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomOpacity, &DisableCustomOpacity_Parms, NULL );

	pFnDisableCustomOpacity->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.DisableCustomColor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::DisableCustomColor ( )
{
	static UFunction* pFnDisableCustomColor = NULL;

	if ( ! pFnDisableCustomColor )
		pFnDisableCustomColor = (UFunction*) UObject::GObjObjects()->Data[ 33276 ];

	UUIComp_DrawString_execDisableCustomColor_Parms DisableCustomColor_Parms;

	pFnDisableCustomColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableCustomColor, &DisableCustomColor_Parms, NULL );

	pFnDisableCustomColor->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetSpacingAdjust
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// float                          NewSpacingAdjust               ( CPF_Parm )

void UUIComp_DrawString::SetSpacingAdjust ( unsigned char Orientation, float NewSpacingAdjust )
{
	static UFunction* pFnSetSpacingAdjust = NULL;

	if ( ! pFnSetSpacingAdjust )
		pFnSetSpacingAdjust = (UFunction*) UObject::GObjObjects()->Data[ 33273 ];

	UUIComp_DrawString_execSetSpacingAdjust_Parms SetSpacingAdjust_Parms;
	SetSpacingAdjust_Parms.Orientation = Orientation;
	SetSpacingAdjust_Parms.NewSpacingAdjust = NewSpacingAdjust;

	pFnSetSpacingAdjust->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSpacingAdjust, &SetSpacingAdjust_Parms, NULL );

	pFnSetSpacingAdjust->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// float                          NewScale                       ( CPF_Parm )

void UUIComp_DrawString::SetScale ( unsigned char Orientation, float NewScale )
{
	static UFunction* pFnSetScale = NULL;

	if ( ! pFnSetScale )
		pFnSetScale = (UFunction*) UObject::GObjObjects()->Data[ 33270 ];

	UUIComp_DrawString_execSetScale_Parms SetScale_Parms;
	SetScale_Parms.Orientation = Orientation;
	SetScale_Parms.NewScale = NewScale;

	pFnSetScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScale, &SetScale_Parms, NULL );

	pFnSetScale->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetAutoScaling
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewAutoScaleMode               ( CPF_Parm )
// float                          NewMinScaleValue               ( CPF_OptionalParm | CPF_Parm )

void UUIComp_DrawString::SetAutoScaling ( unsigned char NewAutoScaleMode, float NewMinScaleValue )
{
	static UFunction* pFnSetAutoScaling = NULL;

	if ( ! pFnSetAutoScaling )
		pFnSetAutoScaling = (UFunction*) UObject::GObjObjects()->Data[ 33267 ];

	UUIComp_DrawString_execSetAutoScaling_Parms SetAutoScaling_Parms;
	SetAutoScaling_Parms.NewAutoScaleMode = NewAutoScaleMode;
	SetAutoScaling_Parms.NewMinScaleValue = NewMinScaleValue;

	pFnSetAutoScaling->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAutoScaling, &SetAutoScaling_Parms, NULL );

	pFnSetAutoScaling->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetClipAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewClipAlignment               ( CPF_Parm )

void UUIComp_DrawString::SetClipAlignment ( unsigned char NewClipAlignment )
{
	static UFunction* pFnSetClipAlignment = NULL;

	if ( ! pFnSetClipAlignment )
		pFnSetClipAlignment = (UFunction*) UObject::GObjObjects()->Data[ 33265 ];

	UUIComp_DrawString_execSetClipAlignment_Parms SetClipAlignment_Parms;
	SetClipAlignment_Parms.NewClipAlignment = NewClipAlignment;

	pFnSetClipAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClipAlignment, &SetClipAlignment_Parms, NULL );

	pFnSetClipAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetWrapMode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewClipMode                    ( CPF_Parm )

void UUIComp_DrawString::SetWrapMode ( unsigned char NewClipMode )
{
	static UFunction* pFnSetWrapMode = NULL;

	if ( ! pFnSetWrapMode )
		pFnSetWrapMode = (UFunction*) UObject::GObjObjects()->Data[ 33263 ];

	UUIComp_DrawString_execSetWrapMode_Parms SetWrapMode_Parms;
	SetWrapMode_Parms.NewClipMode = NewClipMode;

	pFnSetWrapMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWrapMode, &SetWrapMode_Parms, NULL );

	pFnSetWrapMode->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// unsigned char                  NewAlignment                   ( CPF_Parm )

void UUIComp_DrawString::SetAlignment ( unsigned char Orientation, unsigned char NewAlignment )
{
	static UFunction* pFnSetAlignment = NULL;

	if ( ! pFnSetAlignment )
		pFnSetAlignment = (UFunction*) UObject::GObjObjects()->Data[ 33260 ];

	UUIComp_DrawString_execSetAlignment_Parms SetAlignment_Parms;
	SetAlignment_Parms.Orientation = Orientation;
	SetAlignment_Parms.NewAlignment = NewAlignment;

	pFnSetAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAlignment, &SetAlignment_Parms, NULL );

	pFnSetAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetAttributes
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FUITextAttributes       NewAttributes                  ( CPF_Parm )

void UUIComp_DrawString::SetAttributes ( struct FUITextAttributes NewAttributes )
{
	static UFunction* pFnSetAttributes = NULL;

	if ( ! pFnSetAttributes )
		pFnSetAttributes = (UFunction*) UObject::GObjObjects()->Data[ 33258 ];

	UUIComp_DrawString_execSetAttributes_Parms SetAttributes_Parms;
	memcpy ( &SetAttributes_Parms.NewAttributes, &NewAttributes, 0x4 );

	pFnSetAttributes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAttributes, &SetAttributes_Parms, NULL );

	pFnSetAttributes->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetFont
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   NewFont                        ( CPF_Parm )

void UUIComp_DrawString::SetFont ( class UFont* NewFont )
{
	static UFunction* pFnSetFont = NULL;

	if ( ! pFnSetFont )
		pFnSetFont = (UFunction*) UObject::GObjObjects()->Data[ 33256 ];

	UUIComp_DrawString_execSetFont_Parms SetFont_Parms;
	SetFont_Parms.NewFont = NewFont;

	pFnSetFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFont, &SetFont_Parms, NULL );

	pFnSetFont->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetPadding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          HorizontalPadding              ( CPF_Parm )
// float                          VerticalPadding                ( CPF_Parm )

void UUIComp_DrawString::SetPadding ( float HorizontalPadding, float VerticalPadding )
{
	static UFunction* pFnSetPadding = NULL;

	if ( ! pFnSetPadding )
		pFnSetPadding = (UFunction*) UObject::GObjObjects()->Data[ 33253 ];

	UUIComp_DrawString_execSetPadding_Parms SetPadding_Parms;
	SetPadding_Parms.HorizontalPadding = HorizontalPadding;
	SetPadding_Parms.VerticalPadding = VerticalPadding;

	pFnSetPadding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPadding, &SetPadding_Parms, NULL );

	pFnSetPadding->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetOpacity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewOpacity                     ( CPF_Parm )

void UUIComp_DrawString::SetOpacity ( float NewOpacity )
{
	static UFunction* pFnSetOpacity = NULL;

	if ( ! pFnSetOpacity )
		pFnSetOpacity = (UFunction*) UObject::GObjObjects()->Data[ 33251 ];

	UUIComp_DrawString_execSetOpacity_Parms SetOpacity_Parms;
	SetOpacity_Parms.NewOpacity = NewOpacity;

	pFnSetOpacity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOpacity, &SetOpacity_Parms, NULL );

	pFnSetOpacity->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetColor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FLinearColor            NewColor                       ( CPF_Parm )

void UUIComp_DrawString::SetColor ( struct FLinearColor NewColor )
{
	static UFunction* pFnSetColor = NULL;

	if ( ! pFnSetColor )
		pFnSetColor = (UFunction*) UObject::GObjObjects()->Data[ 33249 ];

	UUIComp_DrawString_execSetColor_Parms SetColor_Parms;
	memcpy ( &SetColor_Parms.NewColor, &NewColor, 0x10 );

	pFnSetColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetColor, &SetColor_Parms, NULL );

	pFnSetColor->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetSubregionAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// unsigned char                  NewValue                       ( CPF_Parm )

void UUIComp_DrawString::SetSubregionAlignment ( unsigned char Orientation, unsigned char NewValue )
{
	static UFunction* pFnSetSubregionAlignment = NULL;

	if ( ! pFnSetSubregionAlignment )
		pFnSetSubregionAlignment = (UFunction*) UObject::GObjObjects()->Data[ 33246 ];

	UUIComp_DrawString_execSetSubregionAlignment_Parms SetSubregionAlignment_Parms;
	SetSubregionAlignment_Parms.Orientation = Orientation;
	SetSubregionAlignment_Parms.NewValue = NewValue;

	pFnSetSubregionAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSubregionAlignment, &SetSubregionAlignment_Parms, NULL );

	pFnSetSubregionAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetSubregionOffset
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// float                          NewValue                       ( CPF_Parm )
// unsigned char                  EvalType                       ( CPF_Parm )

void UUIComp_DrawString::SetSubregionOffset ( unsigned char Orientation, float NewValue, unsigned char EvalType )
{
	static UFunction* pFnSetSubregionOffset = NULL;

	if ( ! pFnSetSubregionOffset )
		pFnSetSubregionOffset = (UFunction*) UObject::GObjObjects()->Data[ 33242 ];

	UUIComp_DrawString_execSetSubregionOffset_Parms SetSubregionOffset_Parms;
	SetSubregionOffset_Parms.Orientation = Orientation;
	SetSubregionOffset_Parms.NewValue = NewValue;
	SetSubregionOffset_Parms.EvalType = EvalType;

	pFnSetSubregionOffset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSubregionOffset, &SetSubregionOffset_Parms, NULL );

	pFnSetSubregionOffset->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.SetSubregionSize
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// float                          NewValue                       ( CPF_Parm )
// unsigned char                  EvalType                       ( CPF_Parm )

void UUIComp_DrawString::SetSubregionSize ( unsigned char Orientation, float NewValue, unsigned char EvalType )
{
	static UFunction* pFnSetSubregionSize = NULL;

	if ( ! pFnSetSubregionSize )
		pFnSetSubregionSize = (UFunction*) UObject::GObjObjects()->Data[ 33238 ];

	UUIComp_DrawString_execSetSubregionSize_Parms SetSubregionSize_Parms;
	SetSubregionSize_Parms.Orientation = Orientation;
	SetSubregionSize_Parms.NewValue = NewValue;
	SetSubregionSize_Parms.EvalType = EvalType;

	pFnSetSubregionSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSubregionSize, &SetSubregionSize_Parms, NULL );

	pFnSetSubregionSize->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.EnableSubregion
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Orientation                    ( CPF_Parm )
// unsigned long                  bShouldEnable                  ( CPF_OptionalParm | CPF_Parm )

void UUIComp_DrawString::EnableSubregion ( unsigned char Orientation, unsigned long bShouldEnable )
{
	static UFunction* pFnEnableSubregion = NULL;

	if ( ! pFnEnableSubregion )
		pFnEnableSubregion = (UFunction*) UObject::GObjObjects()->Data[ 33235 ];

	UUIComp_DrawString_execEnableSubregion_Parms EnableSubregion_Parms;
	EnableSubregion_Parms.Orientation = Orientation;
	EnableSubregion_Parms.bShouldEnable = bShouldEnable;

	pFnEnableSubregion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableSubregion, &EnableSubregion_Parms, NULL );

	pFnEnableSubregion->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.GetSubregionAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Orientation                    ( CPF_Parm )

unsigned char UUIComp_DrawString::GetSubregionAlignment ( unsigned char Orientation )
{
	static UFunction* pFnGetSubregionAlignment = NULL;

	if ( ! pFnGetSubregionAlignment )
		pFnGetSubregionAlignment = (UFunction*) UObject::GObjObjects()->Data[ 33232 ];

	UUIComp_DrawString_execGetSubregionAlignment_Parms GetSubregionAlignment_Parms;
	GetSubregionAlignment_Parms.Orientation = Orientation;

	pFnGetSubregionAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSubregionAlignment, &GetSubregionAlignment_Parms, NULL );

	pFnGetSubregionAlignment->FunctionFlags |= 0x400;

	return GetSubregionAlignment_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.GetSubregionOffset
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Orientation                    ( CPF_Parm )
// unsigned char                  OutputType                     ( CPF_OptionalParm | CPF_Parm )

float UUIComp_DrawString::GetSubregionOffset ( unsigned char Orientation, unsigned char OutputType )
{
	static UFunction* pFnGetSubregionOffset = NULL;

	if ( ! pFnGetSubregionOffset )
		pFnGetSubregionOffset = (UFunction*) UObject::GObjObjects()->Data[ 33228 ];

	UUIComp_DrawString_execGetSubregionOffset_Parms GetSubregionOffset_Parms;
	GetSubregionOffset_Parms.Orientation = Orientation;
	GetSubregionOffset_Parms.OutputType = OutputType;

	pFnGetSubregionOffset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSubregionOffset, &GetSubregionOffset_Parms, NULL );

	pFnGetSubregionOffset->FunctionFlags |= 0x400;

	return GetSubregionOffset_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.GetSubregionSize
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Orientation                    ( CPF_Parm )
// unsigned char                  OutputType                     ( CPF_OptionalParm | CPF_Parm )

float UUIComp_DrawString::GetSubregionSize ( unsigned char Orientation, unsigned char OutputType )
{
	static UFunction* pFnGetSubregionSize = NULL;

	if ( ! pFnGetSubregionSize )
		pFnGetSubregionSize = (UFunction*) UObject::GObjObjects()->Data[ 33224 ];

	UUIComp_DrawString_execGetSubregionSize_Parms GetSubregionSize_Parms;
	GetSubregionSize_Parms.Orientation = Orientation;
	GetSubregionSize_Parms.OutputType = OutputType;

	pFnGetSubregionSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSubregionSize, &GetSubregionSize_Parms, NULL );

	pFnGetSubregionSize->FunctionFlags |= 0x400;

	return GetSubregionSize_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.IsSubregionEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Orientation                    ( CPF_Parm )

bool UUIComp_DrawString::IsSubregionEnabled ( unsigned char Orientation )
{
	static UFunction* pFnIsSubregionEnabled = NULL;

	if ( ! pFnIsSubregionEnabled )
		pFnIsSubregionEnabled = (UFunction*) UObject::GObjObjects()->Data[ 33221 ];

	UUIComp_DrawString_execIsSubregionEnabled_Parms IsSubregionEnabled_Parms;
	IsSubregionEnabled_Parms.Orientation = Orientation;

	pFnIsSubregionEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSubregionEnabled, &IsSubregionEnabled_Parms, NULL );

	pFnIsSubregionEnabled->FunctionFlags |= 0x400;

	return IsSubregionEnabled_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.RefreshValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIComp_DrawString::RefreshValue ( )
{
	static UFunction* pFnRefreshValue = NULL;

	if ( ! pFnRefreshValue )
		pFnRefreshValue = (UFunction*) UObject::GObjObjects()->Data[ 33220 ];

	UUIComp_DrawString_execRefreshValue_Parms RefreshValue_Parms;

	pFnRefreshValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshValue, &RefreshValue_Parms, NULL );

	pFnRefreshValue->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_DrawString.GetValue
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned long                  bReturnProcessedText           ( CPF_OptionalParm | CPF_Parm )

struct FString UUIComp_DrawString::GetValue ( unsigned long bReturnProcessedText )
{
	static UFunction* pFnGetValue = NULL;

	if ( ! pFnGetValue )
		pFnGetValue = (UFunction*) UObject::GObjObjects()->Data[ 33217 ];

	UUIComp_DrawString_execGetValue_Parms GetValue_Parms;
	GetValue_Parms.bReturnProcessedText = bReturnProcessedText;

	pFnGetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetValue, &GetValue_Parms, NULL );

	pFnGetValue->FunctionFlags |= 0x400;

	return GetValue_Parms.ReturnValue;
};

// Function Engine.UIComp_DrawString.SetValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 NewText                        ( CPF_Parm | CPF_NeedCtorLink )

void UUIComp_DrawString::SetValue ( struct FString NewText )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = (UFunction*) UObject::GObjObjects()->Data[ 33215 ];

	UUIComp_DrawString_execSetValue_Parms SetValue_Parms;
	memcpy ( &SetValue_Parms.NewText, &NewText, 0x10 );

	pFnSetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );

	pFnSetValue->FunctionFlags |= 0x400;
};

// Function Engine.UIList.OnStateChanged
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )
// class UUIState*                NewlyActiveState               ( CPF_Parm )
// class UUIState*                PreviouslyActiveState          ( CPF_OptionalParm | CPF_Parm )

void UUIList::OnStateChanged ( class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState )
{
	static UFunction* pFnOnStateChanged = NULL;

	if ( ! pFnOnStateChanged )
		pFnOnStateChanged = (UFunction*) UObject::GObjObjects()->Data[ 33979 ];

	UUIList_execOnStateChanged_Parms OnStateChanged_Parms;
	OnStateChanged_Parms.Sender = Sender;
	OnStateChanged_Parms.PlayerIndex = PlayerIndex;
	OnStateChanged_Parms.NewlyActiveState = NewlyActiveState;
	OnStateChanged_Parms.PreviouslyActiveState = PreviouslyActiveState;

	this->ProcessEvent ( pFnOnStateChanged, &OnStateChanged_Parms, NULL );
};

// Function Engine.UIList.ClickedScrollZone
// [0x00020002] 
// Parameters infos:
// class UUIScrollbar*            Sender                         ( CPF_Parm )
// float                          PositionPerc                   ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIList::ClickedScrollZone ( class UUIScrollbar* Sender, float PositionPerc, int PlayerIndex )
{
	static UFunction* pFnClickedScrollZone = NULL;

	if ( ! pFnClickedScrollZone )
		pFnClickedScrollZone = (UFunction*) UObject::GObjObjects()->Data[ 33968 ];

	UUIList_execClickedScrollZone_Parms ClickedScrollZone_Parms;
	ClickedScrollZone_Parms.Sender = Sender;
	ClickedScrollZone_Parms.PositionPerc = PositionPerc;
	ClickedScrollZone_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnClickedScrollZone, &ClickedScrollZone_Parms, NULL );
};

// Function Engine.UIList.ShouldRenderColumnHeaders
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIList::ShouldRenderColumnHeaders ( )
{
	static UFunction* pFnShouldRenderColumnHeaders = NULL;

	if ( ! pFnShouldRenderColumnHeaders )
		pFnShouldRenderColumnHeaders = (UFunction*) UObject::GObjObjects()->Data[ 33966 ];

	UUIList_execShouldRenderColumnHeaders_Parms ShouldRenderColumnHeaders_Parms;

	this->ProcessEvent ( pFnShouldRenderColumnHeaders, &ShouldRenderColumnHeaders_Parms, NULL );

	return ShouldRenderColumnHeaders_Parms.ReturnValue;
};

// Function Engine.UIList.EnableColumnHeaderRendering
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bShouldRenderColHeaders        ( CPF_OptionalParm | CPF_Parm )

void UUIList::EnableColumnHeaderRendering ( unsigned long bShouldRenderColHeaders )
{
	static UFunction* pFnEnableColumnHeaderRendering = NULL;

	if ( ! pFnEnableColumnHeaderRendering )
		pFnEnableColumnHeaderRendering = (UFunction*) UObject::GObjObjects()->Data[ 33963 ];

	UUIList_execEnableColumnHeaderRendering_Parms EnableColumnHeaderRendering_Parms;
	EnableColumnHeaderRendering_Parms.bShouldRenderColHeaders = bShouldRenderColHeaders;

	this->ProcessEvent ( pFnEnableColumnHeaderRendering, &EnableColumnHeaderRendering_Parms, NULL );
};

// Function Engine.UIList.IsValueChangeNotificationEnabled
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIList::eventIsValueChangeNotificationEnabled ( )
{
	static UFunction* pFnIsValueChangeNotificationEnabled = NULL;

	if ( ! pFnIsValueChangeNotificationEnabled )
		pFnIsValueChangeNotificationEnabled = (UFunction*) UObject::GObjObjects()->Data[ 33950 ];

	UUIList_eventIsValueChangeNotificationEnabled_Parms IsValueChangeNotificationEnabled_Parms;

	this->ProcessEvent ( pFnIsValueChangeNotificationEnabled, &IsValueChangeNotificationEnabled_Parms, NULL );

	return IsValueChangeNotificationEnabled_Parms.ReturnValue;
};

// Function Engine.UIList.DisableValueChangeNotification
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UUIList::eventDisableValueChangeNotification ( )
{
	static UFunction* pFnDisableValueChangeNotification = NULL;

	if ( ! pFnDisableValueChangeNotification )
		pFnDisableValueChangeNotification = (UFunction*) UObject::GObjObjects()->Data[ 33952 ];

	UUIList_eventDisableValueChangeNotification_Parms DisableValueChangeNotification_Parms;

	this->ProcessEvent ( pFnDisableValueChangeNotification, &DisableValueChangeNotification_Parms, NULL );
};

// Function Engine.UIList.EnableValueChangeNotification
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UUIList::eventEnableValueChangeNotification ( )
{
	static UFunction* pFnEnableValueChangeNotification = NULL;

	if ( ! pFnEnableValueChangeNotification )
		pFnEnableValueChangeNotification = (UFunction*) UObject::GObjObjects()->Data[ 33956 ];

	UUIList_eventEnableValueChangeNotification_Parms EnableValueChangeNotification_Parms;

	this->ProcessEvent ( pFnEnableValueChangeNotification, &EnableValueChangeNotification_Parms, NULL );
};

// Function Engine.UIList.IsSetIndexEnabled
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIList::eventIsSetIndexEnabled ( )
{
	static UFunction* pFnIsSetIndexEnabled = NULL;

	if ( ! pFnIsSetIndexEnabled )
		pFnIsSetIndexEnabled = (UFunction*) UObject::GObjObjects()->Data[ 33949 ];

	UUIList_eventIsSetIndexEnabled_Parms IsSetIndexEnabled_Parms;

	this->ProcessEvent ( pFnIsSetIndexEnabled, &IsSetIndexEnabled_Parms, NULL );

	return IsSetIndexEnabled_Parms.ReturnValue;
};

// Function Engine.UIList.DisableSetIndex
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UUIList::eventDisableSetIndex ( )
{
	static UFunction* pFnDisableSetIndex = NULL;

	if ( ! pFnDisableSetIndex )
		pFnDisableSetIndex = (UFunction*) UObject::GObjObjects()->Data[ 33953 ];

	UUIList_eventDisableSetIndex_Parms DisableSetIndex_Parms;

	this->ProcessEvent ( pFnDisableSetIndex, &DisableSetIndex_Parms, NULL );
};

// Function Engine.UIList.EnableSetIndex
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UUIList::eventEnableSetIndex ( )
{
	static UFunction* pFnEnableSetIndex = NULL;

	if ( ! pFnEnableSetIndex )
		pFnEnableSetIndex = (UFunction*) UObject::GObjObjects()->Data[ 33957 ];

	UUIList_eventEnableSetIndex_Parms EnableSetIndex_Parms;

	this->ProcessEvent ( pFnEnableSetIndex, &EnableSetIndex_Parms, NULL );
};

// Function Engine.UIList.DecrementAllMutexes
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned long                  bDispatchUpdates               ( CPF_OptionalParm | CPF_Parm )

void UUIList::eventDecrementAllMutexes ( unsigned long bDispatchUpdates )
{
	static UFunction* pFnDecrementAllMutexes = NULL;

	if ( ! pFnDecrementAllMutexes )
		pFnDecrementAllMutexes = (UFunction*) UObject::GObjObjects()->Data[ 33954 ];

	UUIList_eventDecrementAllMutexes_Parms DecrementAllMutexes_Parms;
	DecrementAllMutexes_Parms.bDispatchUpdates = bDispatchUpdates;

	this->ProcessEvent ( pFnDecrementAllMutexes, &DecrementAllMutexes_Parms, NULL );
};

// Function Engine.UIList.IncrementAllMutexes
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UUIList::eventIncrementAllMutexes ( )
{
	static UFunction* pFnIncrementAllMutexes = NULL;

	if ( ! pFnIncrementAllMutexes )
		pFnIncrementAllMutexes = (UFunction*) UObject::GObjObjects()->Data[ 33951 ];

	UUIList_eventIncrementAllMutexes_Parms IncrementAllMutexes_Parms;

	this->ProcessEvent ( pFnIncrementAllMutexes, &IncrementAllMutexes_Parms, NULL );
};

// Function Engine.UIList.AllMutexesDisabled
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIList::eventAllMutexesDisabled ( )
{
	static UFunction* pFnAllMutexesDisabled = NULL;

	if ( ! pFnAllMutexesDisabled )
		pFnAllMutexesDisabled = (UFunction*) UObject::GObjObjects()->Data[ 33947 ];

	UUIList_eventAllMutexesDisabled_Parms AllMutexesDisabled_Parms;

	this->ProcessEvent ( pFnAllMutexesDisabled, &AllMutexesDisabled_Parms, NULL );

	return AllMutexesDisabled_Parms.ReturnValue;
};

// Function Engine.UIList.PostInitialize
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIList::eventPostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = (UFunction*) UObject::GObjObjects()->Data[ 33946 ];

	UUIList_eventPostInitialize_Parms PostInitialize_Parms;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );
};

// Function Engine.UIList.Initialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIList::eventInitialized ( )
{
	static UFunction* pFnInitialized = NULL;

	if ( ! pFnInitialized )
		pFnInitialized = (UFunction*) UObject::GObjObjects()->Data[ 33943 ];

	UUIList_eventInitialized_Parms Initialized_Parms;

	this->ProcessEvent ( pFnInitialized, &Initialized_Parms, NULL );
};

// Function Engine.UIList.SaveSubscriberValue
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )
// struct TArray<class UUIDataStore*> out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIList::SaveSubscriberValue ( int BindingIndex, struct TArray<class UUIDataStore*>* out_BoundDataStores )
{
	static UFunction* pFnSaveSubscriberValue = NULL;

	if ( ! pFnSaveSubscriberValue )
		pFnSaveSubscriberValue = (UFunction*) UObject::GObjObjects()->Data[ 33938 ];

	UUIList_execSaveSubscriberValue_Parms SaveSubscriberValue_Parms;
	SaveSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnSaveSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSubscriberValue, &SaveSubscriberValue_Parms, NULL );

	pFnSaveSubscriberValue->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &SaveSubscriberValue_Parms.out_BoundDataStores, 0x10 );

	return SaveSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIList.IsElementAutoSizingEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIList::IsElementAutoSizingEnabled ( )
{
	static UFunction* pFnIsElementAutoSizingEnabled = NULL;

	if ( ! pFnIsElementAutoSizingEnabled )
		pFnIsElementAutoSizingEnabled = (UFunction*) UObject::GObjObjects()->Data[ 33936 ];

	UUIList_execIsElementAutoSizingEnabled_Parms IsElementAutoSizingEnabled_Parms;

	pFnIsElementAutoSizingEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsElementAutoSizingEnabled, &IsElementAutoSizingEnabled_Parms, NULL );

	pFnIsElementAutoSizingEnabled->FunctionFlags |= 0x400;

	return IsElementAutoSizingEnabled_Parms.ReturnValue;
};

// Function Engine.UIList.ClearBoundDataStores
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIList::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = (UFunction*) UObject::GObjObjects()->Data[ 33935 ];

	UUIList_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UIList.GetBoundDataStores
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct TArray<class UUIDataStore*> out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIList::GetBoundDataStores ( struct TArray<class UUIDataStore*>* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = (UFunction*) UObject::GObjObjects()->Data[ 33932 ];

	UUIList_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0x10 );
};

// Function Engine.UIList.NotifyDataStoreValueUpdated
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUIList::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = (UFunction*) UObject::GObjObjects()->Data[ 33926 ];

	UUIList_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UIList.RefreshSubscriberValue
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUIList::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = (UFunction*) UObject::GObjObjects()->Data[ 33923 ];

	UUIList_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIList.GetDataStoreBinding
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUIList::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = (UFunction*) UObject::GObjObjects()->Data[ 33920 ];

	UUIList_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UIList.SetDataStoreBinding
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUIList::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = (UFunction*) UObject::GObjObjects()->Data[ 33917 ];

	UUIList_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0x10 );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UIList.IsHotTrackingEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIList::IsHotTrackingEnabled ( )
{
	static UFunction* pFnIsHotTrackingEnabled = NULL;

	if ( ! pFnIsHotTrackingEnabled )
		pFnIsHotTrackingEnabled = (UFunction*) UObject::GObjObjects()->Data[ 33915 ];

	UUIList_execIsHotTrackingEnabled_Parms IsHotTrackingEnabled_Parms;

	pFnIsHotTrackingEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHotTrackingEnabled, &IsHotTrackingEnabled_Parms, NULL );

	pFnIsHotTrackingEnabled->FunctionFlags |= 0x400;

	return IsHotTrackingEnabled_Parms.ReturnValue;
};

// Function Engine.UIList.SetHotTracking
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldUpdateItemUnderCursor   ( CPF_Parm )

void UUIList::SetHotTracking ( unsigned long bShouldUpdateItemUnderCursor )
{
	static UFunction* pFnSetHotTracking = NULL;

	if ( ! pFnSetHotTracking )
		pFnSetHotTracking = (UFunction*) UObject::GObjObjects()->Data[ 33913 ];

	UUIList_execSetHotTracking_Parms SetHotTracking_Parms;
	SetHotTracking_Parms.bShouldUpdateItemUnderCursor = bShouldUpdateItemUnderCursor;

	pFnSetHotTracking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHotTracking, &SetHotTracking_Parms, NULL );

	pFnSetHotTracking->FunctionFlags |= 0x400;
};

// Function Engine.UIList.CanSelectElement
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

bool UUIList::CanSelectElement ( int ElementIndex )
{
	static UFunction* pFnCanSelectElement = NULL;

	if ( ! pFnCanSelectElement )
		pFnCanSelectElement = (UFunction*) UObject::GObjObjects()->Data[ 33910 ];

	UUIList_execCanSelectElement_Parms CanSelectElement_Parms;
	CanSelectElement_Parms.ElementIndex = ElementIndex;

	pFnCanSelectElement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanSelectElement, &CanSelectElement_Parms, NULL );

	pFnCanSelectElement->FunctionFlags |= 0x400;

	return CanSelectElement_Parms.ReturnValue;
};

// Function Engine.UIList.IsElementSelected
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

bool UUIList::IsElementSelected ( int ElementIndex )
{
	static UFunction* pFnIsElementSelected = NULL;

	if ( ! pFnIsElementSelected )
		pFnIsElementSelected = (UFunction*) UObject::GObjObjects()->Data[ 33907 ];

	UUIList_execIsElementSelected_Parms IsElementSelected_Parms;
	IsElementSelected_Parms.ElementIndex = ElementIndex;

	pFnIsElementSelected->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsElementSelected, &IsElementSelected_Parms, NULL );

	pFnIsElementSelected->FunctionFlags |= 0x400;

	return IsElementSelected_Parms.ReturnValue;
};

// Function Engine.UIList.IsElementEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

bool UUIList::IsElementEnabled ( int ElementIndex )
{
	static UFunction* pFnIsElementEnabled = NULL;

	if ( ! pFnIsElementEnabled )
		pFnIsElementEnabled = (UFunction*) UObject::GObjObjects()->Data[ 33904 ];

	UUIList_execIsElementEnabled_Parms IsElementEnabled_Parms;
	IsElementEnabled_Parms.ElementIndex = ElementIndex;

	pFnIsElementEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsElementEnabled, &IsElementEnabled_Parms, NULL );

	pFnIsElementEnabled->FunctionFlags |= 0x400;

	return IsElementEnabled_Parms.ReturnValue;
};

// Function Engine.UIList.SetTopIndex
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            NewTopIndex                    ( CPF_Parm )
// unsigned long                  bClampValue                    ( CPF_OptionalParm | CPF_Parm )

bool UUIList::SetTopIndex ( int NewTopIndex, unsigned long bClampValue )
{
	static UFunction* pFnSetTopIndex = NULL;

	if ( ! pFnSetTopIndex )
		pFnSetTopIndex = (UFunction*) UObject::GObjObjects()->Data[ 33900 ];

	UUIList_execSetTopIndex_Parms SetTopIndex_Parms;
	SetTopIndex_Parms.NewTopIndex = NewTopIndex;
	SetTopIndex_Parms.bClampValue = bClampValue;

	pFnSetTopIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTopIndex, &SetTopIndex_Parms, NULL );

	pFnSetTopIndex->FunctionFlags |= 0x400;

	return SetTopIndex_Parms.ReturnValue;
};

// Function Engine.UIList.NavigateIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIncrementIndex                ( CPF_Parm )
// unsigned long                  bFullPage                      ( CPF_Parm )
// unsigned long                  bHorizontalNavigation          ( CPF_Parm )

bool UUIList::NavigateIndex ( unsigned long bIncrementIndex, unsigned long bFullPage, unsigned long bHorizontalNavigation )
{
	static UFunction* pFnNavigateIndex = NULL;

	if ( ! pFnNavigateIndex )
		pFnNavigateIndex = (UFunction*) UObject::GObjObjects()->Data[ 33895 ];

	UUIList_execNavigateIndex_Parms NavigateIndex_Parms;
	NavigateIndex_Parms.bIncrementIndex = bIncrementIndex;
	NavigateIndex_Parms.bFullPage = bFullPage;
	NavigateIndex_Parms.bHorizontalNavigation = bHorizontalNavigation;

	pFnNavigateIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNavigateIndex, &NavigateIndex_Parms, NULL );

	pFnNavigateIndex->FunctionFlags |= 0x400;

	return NavigateIndex_Parms.ReturnValue;
};

// Function Engine.UIList.SetIndex
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            NewIndex                       ( CPF_Parm )
// unsigned long                  bClampValue                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipNotification              ( CPF_OptionalParm | CPF_Parm )

bool UUIList::SetIndex ( int NewIndex, unsigned long bClampValue, unsigned long bSkipNotification )
{
	static UFunction* pFnSetIndex = NULL;

	if ( ! pFnSetIndex )
		pFnSetIndex = (UFunction*) UObject::GObjObjects()->Data[ 33890 ];

	UUIList_execSetIndex_Parms SetIndex_Parms;
	SetIndex_Parms.NewIndex = NewIndex;
	SetIndex_Parms.bClampValue = bClampValue;
	SetIndex_Parms.bSkipNotification = bSkipNotification;

	pFnSetIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIndex, &SetIndex_Parms, NULL );

	pFnSetIndex->FunctionFlags |= 0x400;

	return SetIndex_Parms.ReturnValue;
};

// Function Engine.UIList.FindItemIndex
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 ItemValue                      ( CPF_Parm | CPF_NeedCtorLink )
// int                            CellIndex                      ( CPF_OptionalParm | CPF_Parm )

int UUIList::FindItemIndex ( struct FString ItemValue, int CellIndex )
{
	static UFunction* pFnFindItemIndex = NULL;

	if ( ! pFnFindItemIndex )
		pFnFindItemIndex = (UFunction*) UObject::GObjObjects()->Data[ 33886 ];

	UUIList_execFindItemIndex_Parms FindItemIndex_Parms;
	memcpy ( &FindItemIndex_Parms.ItemValue, &ItemValue, 0x10 );
	FindItemIndex_Parms.CellIndex = CellIndex;

	pFnFindItemIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindItemIndex, &FindItemIndex_Parms, NULL );

	pFnFindItemIndex->FunctionFlags |= 0x400;

	return FindItemIndex_Parms.ReturnValue;
};

// Function Engine.UIList.GetElementCellState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

unsigned char UUIList::GetElementCellState ( int ElementIndex )
{
	static UFunction* pFnGetElementCellState = NULL;

	if ( ! pFnGetElementCellState )
		pFnGetElementCellState = (UFunction*) UObject::GObjObjects()->Data[ 33883 ];

	UUIList_execGetElementCellState_Parms GetElementCellState_Parms;
	GetElementCellState_Parms.ElementIndex = ElementIndex;

	pFnGetElementCellState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetElementCellState, &GetElementCellState_Parms, NULL );

	pFnGetElementCellState->FunctionFlags |= 0x400;

	return GetElementCellState_Parms.ReturnValue;
};

// Function Engine.UIList.SetElementCellState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )
// unsigned char                  NewElementState                ( CPF_Parm )

bool UUIList::SetElementCellState ( int ElementIndex, unsigned char NewElementState )
{
	static UFunction* pFnSetElementCellState = NULL;

	if ( ! pFnSetElementCellState )
		pFnSetElementCellState = (UFunction*) UObject::GObjObjects()->Data[ 33879 ];

	UUIList_execSetElementCellState_Parms SetElementCellState_Parms;
	SetElementCellState_Parms.ElementIndex = ElementIndex;
	SetElementCellState_Parms.NewElementState = NewElementState;

	pFnSetElementCellState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetElementCellState, &SetElementCellState_Parms, NULL );

	pFnSetElementCellState->FunctionFlags |= 0x400;

	return SetElementCellState_Parms.ReturnValue;
};

// Function Engine.UIList.GetElementValue
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            ElementIndex                   ( CPF_Parm )
// int                            CellIndex                      ( CPF_OptionalParm | CPF_Parm )

struct FString UUIList::GetElementValue ( int ElementIndex, int CellIndex )
{
	static UFunction* pFnGetElementValue = NULL;

	if ( ! pFnGetElementValue )
		pFnGetElementValue = (UFunction*) UObject::GObjObjects()->Data[ 33875 ];

	UUIList_execGetElementValue_Parms GetElementValue_Parms;
	GetElementValue_Parms.ElementIndex = ElementIndex;
	GetElementValue_Parms.CellIndex = CellIndex;

	pFnGetElementValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetElementValue, &GetElementValue_Parms, NULL );

	pFnGetElementValue->FunctionFlags |= 0x400;

	return GetElementValue_Parms.ReturnValue;
};

// Function Engine.UIList.GetCurrentItem
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIList::GetCurrentItem ( )
{
	static UFunction* pFnGetCurrentItem = NULL;

	if ( ! pFnGetCurrentItem )
		pFnGetCurrentItem = (UFunction*) UObject::GObjObjects()->Data[ 33873 ];

	UUIList_execGetCurrentItem_Parms GetCurrentItem_Parms;

	pFnGetCurrentItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentItem, &GetCurrentItem_Parms, NULL );

	pFnGetCurrentItem->FunctionFlags |= 0x400;

	return GetCurrentItem_Parms.ReturnValue;
};

// Function Engine.UIList.GetSelectedItems
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct TArray<int>             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct TArray<int> UUIList::GetSelectedItems ( )
{
	static UFunction* pFnGetSelectedItems = NULL;

	if ( ! pFnGetSelectedItems )
		pFnGetSelectedItems = (UFunction*) UObject::GObjObjects()->Data[ 33870 ];

	UUIList_execGetSelectedItems_Parms GetSelectedItems_Parms;

	pFnGetSelectedItems->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSelectedItems, &GetSelectedItems_Parms, NULL );

	pFnGetSelectedItems->FunctionFlags |= 0x400;

	return GetSelectedItems_Parms.ReturnValue;
};

// Function Engine.UIList.GetResizeColumn
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCellHitDetectionInfo   ClickedCell                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

int UUIList::GetResizeColumn ( struct FCellHitDetectionInfo* ClickedCell )
{
	static UFunction* pFnGetResizeColumn = NULL;

	if ( ! pFnGetResizeColumn )
		pFnGetResizeColumn = (UFunction*) UObject::GObjObjects()->Data[ 33867 ];

	UUIList_execGetResizeColumn_Parms GetResizeColumn_Parms;

	pFnGetResizeColumn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResizeColumn, &GetResizeColumn_Parms, NULL );

	pFnGetResizeColumn->FunctionFlags |= 0x400;

	if ( ClickedCell )
		memcpy ( ClickedCell, &GetResizeColumn_Parms.ClickedCell, 0x10 );

	return GetResizeColumn_Parms.ReturnValue;
};

// Function Engine.UIList.CalculateIndexFromCursorLocation
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bRequireValidIndex             ( CPF_OptionalParm | CPF_Parm )

int UUIList::CalculateIndexFromCursorLocation ( unsigned long bRequireValidIndex )
{
	static UFunction* pFnCalculateIndexFromCursorLocation = NULL;

	if ( ! pFnCalculateIndexFromCursorLocation )
		pFnCalculateIndexFromCursorLocation = (UFunction*) UObject::GObjObjects()->Data[ 33864 ];

	UUIList_execCalculateIndexFromCursorLocation_Parms CalculateIndexFromCursorLocation_Parms;
	CalculateIndexFromCursorLocation_Parms.bRequireValidIndex = bRequireValidIndex;

	pFnCalculateIndexFromCursorLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalculateIndexFromCursorLocation, &CalculateIndexFromCursorLocation_Parms, NULL );

	pFnCalculateIndexFromCursorLocation->FunctionFlags |= 0x400;

	return CalculateIndexFromCursorLocation_Parms.ReturnValue;
};

// Function Engine.UIList.GetClientRegion
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector2D               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector2D UUIList::GetClientRegion ( )
{
	static UFunction* pFnGetClientRegion = NULL;

	if ( ! pFnGetClientRegion )
		pFnGetClientRegion = (UFunction*) UObject::GObjObjects()->Data[ 33862 ];

	UUIList_execGetClientRegion_Parms GetClientRegion_Parms;

	pFnGetClientRegion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClientRegion, &GetClientRegion_Parms, NULL );

	pFnGetClientRegion->FunctionFlags |= 0x400;

	return GetClientRegion_Parms.ReturnValue;
};

// Function Engine.UIList.GetRowHeight
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            RowIndex                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bColHeader                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnUnformattedValue        ( CPF_OptionalParm | CPF_Parm )

float UUIList::GetRowHeight ( int RowIndex, unsigned long bColHeader, unsigned long bReturnUnformattedValue )
{
	static UFunction* pFnGetRowHeight = NULL;

	if ( ! pFnGetRowHeight )
		pFnGetRowHeight = (UFunction*) UObject::GObjObjects()->Data[ 33857 ];

	UUIList_execGetRowHeight_Parms GetRowHeight_Parms;
	GetRowHeight_Parms.RowIndex = RowIndex;
	GetRowHeight_Parms.bColHeader = bColHeader;
	GetRowHeight_Parms.bReturnUnformattedValue = bReturnUnformattedValue;

	pFnGetRowHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRowHeight, &GetRowHeight_Parms, NULL );

	pFnGetRowHeight->FunctionFlags |= 0x400;

	return GetRowHeight_Parms.ReturnValue;
};

// Function Engine.UIList.GetColumnWidth
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ColumnIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bColHeader                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnUnformattedValue        ( CPF_OptionalParm | CPF_Parm )

float UUIList::GetColumnWidth ( int ColumnIndex, unsigned long bColHeader, unsigned long bReturnUnformattedValue )
{
	static UFunction* pFnGetColumnWidth = NULL;

	if ( ! pFnGetColumnWidth )
		pFnGetColumnWidth = (UFunction*) UObject::GObjObjects()->Data[ 33852 ];

	UUIList_execGetColumnWidth_Parms GetColumnWidth_Parms;
	GetColumnWidth_Parms.ColumnIndex = ColumnIndex;
	GetColumnWidth_Parms.bColHeader = bColHeader;
	GetColumnWidth_Parms.bReturnUnformattedValue = bReturnUnformattedValue;

	pFnGetColumnWidth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetColumnWidth, &GetColumnWidth_Parms, NULL );

	pFnGetColumnWidth->FunctionFlags |= 0x400;

	return GetColumnWidth_Parms.ReturnValue;
};

// Function Engine.UIList.SetRowCount
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            NewRowCount                    ( CPF_Parm )

void UUIList::SetRowCount ( int NewRowCount )
{
	static UFunction* pFnSetRowCount = NULL;

	if ( ! pFnSetRowCount )
		pFnSetRowCount = (UFunction*) UObject::GObjObjects()->Data[ 33850 ];

	UUIList_execSetRowCount_Parms SetRowCount_Parms;
	SetRowCount_Parms.NewRowCount = NewRowCount;

	pFnSetRowCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRowCount, &SetRowCount_Parms, NULL );

	pFnSetRowCount->FunctionFlags |= 0x400;
};

// Function Engine.UIList.SetColumnCount
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            NewColumnCount                 ( CPF_Parm )

void UUIList::SetColumnCount ( int NewColumnCount )
{
	static UFunction* pFnSetColumnCount = NULL;

	if ( ! pFnSetColumnCount )
		pFnSetColumnCount = (UFunction*) UObject::GObjObjects()->Data[ 33848 ];

	UUIList_execSetColumnCount_Parms SetColumnCount_Parms;
	SetColumnCount_Parms.NewColumnCount = NewColumnCount;

	pFnSetColumnCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetColumnCount, &SetColumnCount_Parms, NULL );

	pFnSetColumnCount->FunctionFlags |= 0x400;
};

// Function Engine.UIList.GetTotalColumnCount
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIList::GetTotalColumnCount ( )
{
	static UFunction* pFnGetTotalColumnCount = NULL;

	if ( ! pFnGetTotalColumnCount )
		pFnGetTotalColumnCount = (UFunction*) UObject::GObjObjects()->Data[ 33846 ];

	UUIList_execGetTotalColumnCount_Parms GetTotalColumnCount_Parms;

	pFnGetTotalColumnCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTotalColumnCount, &GetTotalColumnCount_Parms, NULL );

	pFnGetTotalColumnCount->FunctionFlags |= 0x400;

	return GetTotalColumnCount_Parms.ReturnValue;
};

// Function Engine.UIList.GetTotalRowCount
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIList::GetTotalRowCount ( )
{
	static UFunction* pFnGetTotalRowCount = NULL;

	if ( ! pFnGetTotalRowCount )
		pFnGetTotalRowCount = (UFunction*) UObject::GObjObjects()->Data[ 33844 ];

	UUIList_execGetTotalRowCount_Parms GetTotalRowCount_Parms;

	pFnGetTotalRowCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTotalRowCount, &GetTotalRowCount_Parms, NULL );

	pFnGetTotalRowCount->FunctionFlags |= 0x400;

	return GetTotalRowCount_Parms.ReturnValue;
};

// Function Engine.UIList.GetMaxNumVisibleColumns
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIList::GetMaxNumVisibleColumns ( )
{
	static UFunction* pFnGetMaxNumVisibleColumns = NULL;

	if ( ! pFnGetMaxNumVisibleColumns )
		pFnGetMaxNumVisibleColumns = (UFunction*) UObject::GObjObjects()->Data[ 33842 ];

	UUIList_execGetMaxNumVisibleColumns_Parms GetMaxNumVisibleColumns_Parms;

	pFnGetMaxNumVisibleColumns->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxNumVisibleColumns, &GetMaxNumVisibleColumns_Parms, NULL );

	pFnGetMaxNumVisibleColumns->FunctionFlags |= 0x400;

	return GetMaxNumVisibleColumns_Parms.ReturnValue;
};

// Function Engine.UIList.GetMaxNumVisibleRows
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIList::GetMaxNumVisibleRows ( )
{
	static UFunction* pFnGetMaxNumVisibleRows = NULL;

	if ( ! pFnGetMaxNumVisibleRows )
		pFnGetMaxNumVisibleRows = (UFunction*) UObject::GObjObjects()->Data[ 33840 ];

	UUIList_execGetMaxNumVisibleRows_Parms GetMaxNumVisibleRows_Parms;

	pFnGetMaxNumVisibleRows->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxNumVisibleRows, &GetMaxNumVisibleRows_Parms, NULL );

	pFnGetMaxNumVisibleRows->FunctionFlags |= 0x400;

	return GetMaxNumVisibleRows_Parms.ReturnValue;
};

// Function Engine.UIList.GetMaxVisibleElementCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIList::GetMaxVisibleElementCount ( )
{
	static UFunction* pFnGetMaxVisibleElementCount = NULL;

	if ( ! pFnGetMaxVisibleElementCount )
		pFnGetMaxVisibleElementCount = (UFunction*) UObject::GObjObjects()->Data[ 33838 ];

	UUIList_execGetMaxVisibleElementCount_Parms GetMaxVisibleElementCount_Parms;

	pFnGetMaxVisibleElementCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxVisibleElementCount, &GetMaxVisibleElementCount_Parms, NULL );

	pFnGetMaxVisibleElementCount->FunctionFlags |= 0x400;

	return GetMaxVisibleElementCount_Parms.ReturnValue;
};

// Function Engine.UIList.GetItemCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIList::GetItemCount ( )
{
	static UFunction* pFnGetItemCount = NULL;

	if ( ! pFnGetItemCount )
		pFnGetItemCount = (UFunction*) UObject::GObjObjects()->Data[ 33836 ];

	UUIList_execGetItemCount_Parms GetItemCount_Parms;

	pFnGetItemCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetItemCount, &GetItemCount_Parms, NULL );

	pFnGetItemCount->FunctionFlags |= 0x400;

	return GetItemCount_Parms.ReturnValue;
};

// Function Engine.UIList.RemoveElement
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementToRemove                ( CPF_Parm )

int UUIList::RemoveElement ( int ElementToRemove )
{
	static UFunction* pFnRemoveElement = NULL;

	if ( ! pFnRemoveElement )
		pFnRemoveElement = (UFunction*) UObject::GObjObjects()->Data[ 33833 ];

	UUIList_execRemoveElement_Parms RemoveElement_Parms;
	RemoveElement_Parms.ElementToRemove = ElementToRemove;

	pFnRemoveElement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveElement, &RemoveElement_Parms, NULL );

	pFnRemoveElement->FunctionFlags |= 0x400;

	return RemoveElement_Parms.ReturnValue;
};

// Function Engine.UIList.ScrollVertical
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScrollbar*            Sender                         ( CPF_Parm )
// float                          PositionChange                 ( CPF_Parm )
// unsigned long                  bPositionMaxed                 ( CPF_OptionalParm | CPF_Parm )

bool UUIList::ScrollVertical ( class UUIScrollbar* Sender, float PositionChange, unsigned long bPositionMaxed )
{
	static UFunction* pFnScrollVertical = NULL;

	if ( ! pFnScrollVertical )
		pFnScrollVertical = (UFunction*) UObject::GObjObjects()->Data[ 33828 ];

	UUIList_execScrollVertical_Parms ScrollVertical_Parms;
	ScrollVertical_Parms.Sender = Sender;
	ScrollVertical_Parms.PositionChange = PositionChange;
	ScrollVertical_Parms.bPositionMaxed = bPositionMaxed;

	pFnScrollVertical->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScrollVertical, &ScrollVertical_Parms, NULL );

	pFnScrollVertical->FunctionFlags |= 0x400;

	return ScrollVertical_Parms.ReturnValue;
};

// Function Engine.UIList.OnOverrideListElementState
// [0x00120000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIList*                 Sender                         ( CPF_Parm )
// int                            ElementIndex                   ( CPF_Parm )
// unsigned char                  CurrentState                   ( CPF_Parm )
// unsigned char                  NewElementState                ( CPF_Parm )

unsigned char UUIList::OnOverrideListElementState ( class UUIList* Sender, int ElementIndex, unsigned char CurrentState, unsigned char NewElementState )
{
	static UFunction* pFnOnOverrideListElementState = NULL;

	if ( ! pFnOnOverrideListElementState )
		pFnOnOverrideListElementState = (UFunction*) UObject::GObjObjects()->Data[ 33822 ];

	UUIList_execOnOverrideListElementState_Parms OnOverrideListElementState_Parms;
	OnOverrideListElementState_Parms.Sender = Sender;
	OnOverrideListElementState_Parms.ElementIndex = ElementIndex;
	OnOverrideListElementState_Parms.CurrentState = CurrentState;
	OnOverrideListElementState_Parms.NewElementState = NewElementState;

	this->ProcessEvent ( pFnOnOverrideListElementState, &OnOverrideListElementState_Parms, NULL );

	return OnOverrideListElementState_Parms.ReturnValue;
};

// Function Engine.UIList.ShouldDisableElement
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIList*                 Sender                         ( CPF_Parm )
// int                            ElementIndex                   ( CPF_Parm )

bool UUIList::ShouldDisableElement ( class UUIList* Sender, int ElementIndex )
{
	static UFunction* pFnShouldDisableElement = NULL;

	if ( ! pFnShouldDisableElement )
		pFnShouldDisableElement = (UFunction*) UObject::GObjObjects()->Data[ 33818 ];

	UUIList_execShouldDisableElement_Parms ShouldDisableElement_Parms;
	ShouldDisableElement_Parms.Sender = Sender;
	ShouldDisableElement_Parms.ElementIndex = ElementIndex;

	this->ProcessEvent ( pFnShouldDisableElement, &ShouldDisableElement_Parms, NULL );

	return ShouldDisableElement_Parms.ReturnValue;
};

// Function Engine.UIList.OnListElementsSorted
// [0x00120000] 
// Parameters infos:
// class UUIList*                 Sender                         ( CPF_Parm )

void UUIList::OnListElementsSorted ( class UUIList* Sender )
{
	static UFunction* pFnOnListElementsSorted = NULL;

	if ( ! pFnOnListElementsSorted )
		pFnOnListElementsSorted = (UFunction*) UObject::GObjObjects()->Data[ 33816 ];

	UUIList_execOnListElementsSorted_Parms OnListElementsSorted_Parms;
	OnListElementsSorted_Parms.Sender = Sender;

	this->ProcessEvent ( pFnOnListElementsSorted, &OnListElementsSorted_Parms, NULL );
};

// Function Engine.UIList.OnSubmitSelection
// [0x00124000] 
// Parameters infos:
// class UUIList*                 Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

void UUIList::OnSubmitSelection ( class UUIList* Sender, int PlayerIndex )
{
	static UFunction* pFnOnSubmitSelection = NULL;

	if ( ! pFnOnSubmitSelection )
		pFnOnSubmitSelection = (UFunction*) UObject::GObjObjects()->Data[ 33813 ];

	UUIList_execOnSubmitSelection_Parms OnSubmitSelection_Parms;
	OnSubmitSelection_Parms.Sender = Sender;
	OnSubmitSelection_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnSubmitSelection, &OnSubmitSelection_Parms, NULL );
};

// Function Engine.UIComp_ListElementSorter.ResortItems
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bCaseSensitive                 ( CPF_OptionalParm | CPF_Parm )

bool UUIComp_ListElementSorter::ResortItems ( unsigned long bCaseSensitive )
{
	static UFunction* pFnResortItems = NULL;

	if ( ! pFnResortItems )
		pFnResortItems = (UFunction*) UObject::GObjObjects()->Data[ 33615 ];

	UUIComp_ListElementSorter_execResortItems_Parms ResortItems_Parms;
	ResortItems_Parms.bCaseSensitive = bCaseSensitive;

	pFnResortItems->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResortItems, &ResortItems_Parms, NULL );

	pFnResortItems->FunctionFlags |= 0x400;

	return ResortItems_Parms.ReturnValue;
};

// Function Engine.UIComp_ListElementSorter.SortItems
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ColumnIndex                    ( CPF_Parm )
// unsigned long                  bSecondarySort                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bCaseSensitive                 ( CPF_OptionalParm | CPF_Parm )

bool UUIComp_ListElementSorter::SortItems ( int ColumnIndex, unsigned long bSecondarySort, unsigned long bCaseSensitive )
{
	static UFunction* pFnSortItems = NULL;

	if ( ! pFnSortItems )
		pFnSortItems = (UFunction*) UObject::GObjObjects()->Data[ 33610 ];

	UUIComp_ListElementSorter_execSortItems_Parms SortItems_Parms;
	SortItems_Parms.ColumnIndex = ColumnIndex;
	SortItems_Parms.bSecondarySort = bSecondarySort;
	SortItems_Parms.bCaseSensitive = bCaseSensitive;

	pFnSortItems->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSortItems, &SortItems_Parms, NULL );

	pFnSortItems->FunctionFlags |= 0x400;

	return SortItems_Parms.ReturnValue;
};

// Function Engine.UIComp_ListElementSorter.ResetSortColumns
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bResort                        ( CPF_OptionalParm | CPF_Parm )

void UUIComp_ListElementSorter::ResetSortColumns ( unsigned long bResort )
{
	static UFunction* pFnResetSortColumns = NULL;

	if ( ! pFnResetSortColumns )
		pFnResetSortColumns = (UFunction*) UObject::GObjObjects()->Data[ 33608 ];

	UUIComp_ListElementSorter_execResetSortColumns_Parms ResetSortColumns_Parms;
	ResetSortColumns_Parms.bResort = bResort;

	pFnResetSortColumns->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetSortColumns, &ResetSortColumns_Parms, NULL );

	pFnResetSortColumns->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_ListElementSorter.OverrideListSort
// [0x00520000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIList*                 Sender                         ( CPF_Parm )
// struct FName                   CollectionFieldName            ( CPF_Parm )
// struct FUIListSortingParameters SortParameters                 ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct TArray<int>             OrderedIndices                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIComp_ListElementSorter::OverrideListSort ( class UUIList* Sender, struct FName CollectionFieldName, struct FUIListSortingParameters* SortParameters, struct TArray<int>* OrderedIndices )
{
	static UFunction* pFnOverrideListSort = NULL;

	if ( ! pFnOverrideListSort )
		pFnOverrideListSort = (UFunction*) UObject::GObjObjects()->Data[ 33601 ];

	UUIComp_ListElementSorter_execOverrideListSort_Parms OverrideListSort_Parms;
	OverrideListSort_Parms.Sender = Sender;
	memcpy ( &OverrideListSort_Parms.CollectionFieldName, &CollectionFieldName, 0x8 );

	this->ProcessEvent ( pFnOverrideListSort, &OverrideListSort_Parms, NULL );

	if ( SortParameters )
		memcpy ( SortParameters, &OverrideListSort_Parms.SortParameters, 0xC );

	if ( OrderedIndices )
		memcpy ( OrderedIndices, &OverrideListSort_Parms.OrderedIndices, 0x10 );

	return OverrideListSort_Parms.ReturnValue;
};

// Function Engine.UIComp_ListPresenterBase.GetMaxElementsPerPage
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIComp_ListPresenterBase::GetMaxElementsPerPage ( )
{
	static UFunction* pFnGetMaxElementsPerPage = NULL;

	if ( ! pFnGetMaxElementsPerPage )
		pFnGetMaxElementsPerPage = (UFunction*) UObject::GObjObjects()->Data[ 33669 ];

	UUIComp_ListPresenterBase_execGetMaxElementsPerPage_Parms GetMaxElementsPerPage_Parms;

	pFnGetMaxElementsPerPage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxElementsPerPage, &GetMaxElementsPerPage_Parms, NULL );

	pFnGetMaxElementsPerPage->FunctionFlags |= 0x400;

	return GetMaxElementsPerPage_Parms.ReturnValue;
};

// Function Engine.UIComp_ListPresenterBase.SetMaxElementsPerPage
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            NewMaxVisibleElements          ( CPF_Parm )

void UUIComp_ListPresenterBase::SetMaxElementsPerPage ( int NewMaxVisibleElements )
{
	static UFunction* pFnSetMaxElementsPerPage = NULL;

	if ( ! pFnSetMaxElementsPerPage )
		pFnSetMaxElementsPerPage = (UFunction*) UObject::GObjObjects()->Data[ 33667 ];

	UUIComp_ListPresenterBase_execSetMaxElementsPerPage_Parms SetMaxElementsPerPage_Parms;
	SetMaxElementsPerPage_Parms.NewMaxVisibleElements = NewMaxVisibleElements;

	pFnSetMaxElementsPerPage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaxElementsPerPage, &SetMaxElementsPerPage_Parms, NULL );

	pFnSetMaxElementsPerPage->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_ListPresenterBase.GetElementValue
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            ElementIndex                   ( CPF_Parm )
// int                            CellIndex                      ( CPF_OptionalParm | CPF_Parm )

struct FString UUIComp_ListPresenterBase::GetElementValue ( int ElementIndex, int CellIndex )
{
	static UFunction* pFnGetElementValue = NULL;

	if ( ! pFnGetElementValue )
		pFnGetElementValue = (UFunction*) UObject::GObjObjects()->Data[ 33663 ];

	UUIComp_ListPresenterBase_execGetElementValue_Parms GetElementValue_Parms;
	GetElementValue_Parms.ElementIndex = ElementIndex;
	GetElementValue_Parms.CellIndex = CellIndex;

	pFnGetElementValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetElementValue, &GetElementValue_Parms, NULL );

	pFnGetElementValue->FunctionFlags |= 0x400;

	return GetElementValue_Parms.ReturnValue;
};

// Function Engine.UIComp_ListPresenterBase.EnableColumnHeaderRendering
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldRenderColHeaders        ( CPF_OptionalParm | CPF_Parm )

void UUIComp_ListPresenterBase::EnableColumnHeaderRendering ( unsigned long bShouldRenderColHeaders )
{
	static UFunction* pFnEnableColumnHeaderRendering = NULL;

	if ( ! pFnEnableColumnHeaderRendering )
		pFnEnableColumnHeaderRendering = (UFunction*) UObject::GObjObjects()->Data[ 33661 ];

	UUIComp_ListPresenterBase_execEnableColumnHeaderRendering_Parms EnableColumnHeaderRendering_Parms;
	EnableColumnHeaderRendering_Parms.bShouldRenderColHeaders = bShouldRenderColHeaders;

	pFnEnableColumnHeaderRendering->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableColumnHeaderRendering, &EnableColumnHeaderRendering_Parms, NULL );

	pFnEnableColumnHeaderRendering->FunctionFlags |= 0x400;
};

// Function Engine.UIComp_ListPresenterBase.ShouldRenderColumnHeaders
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIComp_ListPresenterBase::ShouldRenderColumnHeaders ( )
{
	static UFunction* pFnShouldRenderColumnHeaders = NULL;

	if ( ! pFnShouldRenderColumnHeaders )
		pFnShouldRenderColumnHeaders = (UFunction*) UObject::GObjObjects()->Data[ 33659 ];

	UUIComp_ListPresenterBase_execShouldRenderColumnHeaders_Parms ShouldRenderColumnHeaders_Parms;

	pFnShouldRenderColumnHeaders->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldRenderColumnHeaders, &ShouldRenderColumnHeaders_Parms, NULL );

	pFnShouldRenderColumnHeaders->FunctionFlags |= 0x400;

	return ShouldRenderColumnHeaders_Parms.ReturnValue;
};

// Function Engine.UIComp_ListPresenterBase.ShouldAdjustListBounds
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Orientation                    ( CPF_Parm )

bool UUIComp_ListPresenterBase::ShouldAdjustListBounds ( unsigned char Orientation )
{
	static UFunction* pFnShouldAdjustListBounds = NULL;

	if ( ! pFnShouldAdjustListBounds )
		pFnShouldAdjustListBounds = (UFunction*) UObject::GObjObjects()->Data[ 33656 ];

	UUIComp_ListPresenterBase_execShouldAdjustListBounds_Parms ShouldAdjustListBounds_Parms;
	ShouldAdjustListBounds_Parms.Orientation = Orientation;

	pFnShouldAdjustListBounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldAdjustListBounds, &ShouldAdjustListBounds_Parms, NULL );

	pFnShouldAdjustListBounds->FunctionFlags |= 0x400;

	return ShouldAdjustListBounds_Parms.ReturnValue;
};

// Function Engine.UIComp_ListPresenterBase.CalculateAutoSizeColumnWidth
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ColIndex                       ( CPF_Parm )
// unsigned long                  bReturnUnformattedValue        ( CPF_OptionalParm | CPF_Parm )
// float                          out_ColWidth                   ( CPF_Parm | CPF_OutParm )
// float                          out_StylePadding               ( CPF_Parm | CPF_OutParm )

void UUIComp_ListPresenterBase::CalculateAutoSizeColumnWidth ( int ColIndex, unsigned long bReturnUnformattedValue, float* out_ColWidth, float* out_StylePadding )
{
	static UFunction* pFnCalculateAutoSizeColumnWidth = NULL;

	if ( ! pFnCalculateAutoSizeColumnWidth )
		pFnCalculateAutoSizeColumnWidth = (UFunction*) UObject::GObjObjects()->Data[ 33651 ];

	UUIComp_ListPresenterBase_execCalculateAutoSizeColumnWidth_Parms CalculateAutoSizeColumnWidth_Parms;
	CalculateAutoSizeColumnWidth_Parms.ColIndex = ColIndex;
	CalculateAutoSizeColumnWidth_Parms.bReturnUnformattedValue = bReturnUnformattedValue;

	pFnCalculateAutoSizeColumnWidth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalculateAutoSizeColumnWidth, &CalculateAutoSizeColumnWidth_Parms, NULL );

	pFnCalculateAutoSizeColumnWidth->FunctionFlags |= 0x400;

	if ( out_ColWidth )
		*out_ColWidth = CalculateAutoSizeColumnWidth_Parms.out_ColWidth;

	if ( out_StylePadding )
		*out_StylePadding = CalculateAutoSizeColumnWidth_Parms.out_StylePadding;
};

// Function Engine.UIComp_ListPresenterBase.CalculateAutoSizeRowHeight
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            RowIndex                       ( CPF_Parm )
// unsigned long                  bReturnUnformattedValue        ( CPF_OptionalParm | CPF_Parm )
// float                          out_RowHeight                  ( CPF_Parm | CPF_OutParm )
// float                          out_StylePadding               ( CPF_Parm | CPF_OutParm )

void UUIComp_ListPresenterBase::CalculateAutoSizeRowHeight ( int RowIndex, unsigned long bReturnUnformattedValue, float* out_RowHeight, float* out_StylePadding )
{
	static UFunction* pFnCalculateAutoSizeRowHeight = NULL;

	if ( ! pFnCalculateAutoSizeRowHeight )
		pFnCalculateAutoSizeRowHeight = (UFunction*) UObject::GObjObjects()->Data[ 33646 ];

	UUIComp_ListPresenterBase_execCalculateAutoSizeRowHeight_Parms CalculateAutoSizeRowHeight_Parms;
	CalculateAutoSizeRowHeight_Parms.RowIndex = RowIndex;
	CalculateAutoSizeRowHeight_Parms.bReturnUnformattedValue = bReturnUnformattedValue;

	pFnCalculateAutoSizeRowHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalculateAutoSizeRowHeight, &CalculateAutoSizeRowHeight_Parms, NULL );

	pFnCalculateAutoSizeRowHeight->FunctionFlags |= 0x400;

	if ( out_RowHeight )
		*out_RowHeight = CalculateAutoSizeRowHeight_Parms.out_RowHeight;

	if ( out_StylePadding )
		*out_StylePadding = CalculateAutoSizeRowHeight_Parms.out_StylePadding;
};

// Function Engine.UIComp_ListPresenterBase.GetSchemaCellPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SchemaCellIndex                ( CPF_Parm )

float UUIComp_ListPresenterBase::GetSchemaCellPosition ( int SchemaCellIndex )
{
	static UFunction* pFnGetSchemaCellPosition = NULL;

	if ( ! pFnGetSchemaCellPosition )
		pFnGetSchemaCellPosition = (UFunction*) UObject::GObjObjects()->Data[ 33643 ];

	UUIComp_ListPresenterBase_execGetSchemaCellPosition_Parms GetSchemaCellPosition_Parms;
	GetSchemaCellPosition_Parms.SchemaCellIndex = SchemaCellIndex;

	pFnGetSchemaCellPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSchemaCellPosition, &GetSchemaCellPosition_Parms, NULL );

	pFnGetSchemaCellPosition->FunctionFlags |= 0x400;

	return GetSchemaCellPosition_Parms.ReturnValue;
};

// Function Engine.UIComp_ListPresenterBase.SetSchemaCellSize
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SchemaCellIndex                ( CPF_Parm )
// float                          NewCellSize                    ( CPF_Parm )
// unsigned char                  EvalType                       ( CPF_OptionalParm | CPF_Parm )

bool UUIComp_ListPresenterBase::SetSchemaCellSize ( int SchemaCellIndex, float NewCellSize, unsigned char EvalType )
{
	static UFunction* pFnSetSchemaCellSize = NULL;

	if ( ! pFnSetSchemaCellSize )
		pFnSetSchemaCellSize = (UFunction*) UObject::GObjObjects()->Data[ 33638 ];

	UUIComp_ListPresenterBase_execSetSchemaCellSize_Parms SetSchemaCellSize_Parms;
	SetSchemaCellSize_Parms.SchemaCellIndex = SchemaCellIndex;
	SetSchemaCellSize_Parms.NewCellSize = NewCellSize;
	SetSchemaCellSize_Parms.EvalType = EvalType;

	pFnSetSchemaCellSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSchemaCellSize, &SetSchemaCellSize_Parms, NULL );

	pFnSetSchemaCellSize->FunctionFlags |= 0x400;

	return SetSchemaCellSize_Parms.ReturnValue;
};

// Function Engine.UIComp_ListPresenterBase.GetSchemaCellSize
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SchemaCellIndex                ( CPF_Parm )
// unsigned char                  EvalType                       ( CPF_OptionalParm | CPF_Parm )

float UUIComp_ListPresenterBase::GetSchemaCellSize ( int SchemaCellIndex, unsigned char EvalType )
{
	static UFunction* pFnGetSchemaCellSize = NULL;

	if ( ! pFnGetSchemaCellSize )
		pFnGetSchemaCellSize = (UFunction*) UObject::GObjObjects()->Data[ 33634 ];

	UUIComp_ListPresenterBase_execGetSchemaCellSize_Parms GetSchemaCellSize_Parms;
	GetSchemaCellSize_Parms.SchemaCellIndex = SchemaCellIndex;
	GetSchemaCellSize_Parms.EvalType = EvalType;

	pFnGetSchemaCellSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSchemaCellSize, &GetSchemaCellSize_Parms, NULL );

	pFnGetSchemaCellSize->FunctionFlags |= 0x400;

	return GetSchemaCellSize_Parms.ReturnValue;
};

// Function Engine.UIComp_ListPresenterBase.GetSchemaCellCount
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIComp_ListPresenterBase::GetSchemaCellCount ( )
{
	static UFunction* pFnGetSchemaCellCount = NULL;

	if ( ! pFnGetSchemaCellCount )
		pFnGetSchemaCellCount = (UFunction*) UObject::GObjObjects()->Data[ 33632 ];

	UUIComp_ListPresenterBase_execGetSchemaCellCount_Parms GetSchemaCellCount_Parms;

	pFnGetSchemaCellCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSchemaCellCount, &GetSchemaCellCount_Parms, NULL );

	pFnGetSchemaCellCount->FunctionFlags |= 0x400;

	return GetSchemaCellCount_Parms.ReturnValue;
};

// Function Engine.UIComp_ListPresenterBase.GetCellSchemaProvider
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIListElementCellProvider* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIListElementCellProvider* UUIComp_ListPresenterBase::GetCellSchemaProvider ( )
{
	static UFunction* pFnGetCellSchemaProvider = NULL;

	if ( ! pFnGetCellSchemaProvider )
		pFnGetCellSchemaProvider = (UFunction*) UObject::GObjObjects()->Data[ 33630 ];

	UUIComp_ListPresenterBase_execGetCellSchemaProvider_Parms GetCellSchemaProvider_Parms;

	pFnGetCellSchemaProvider->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCellSchemaProvider, &GetCellSchemaProvider_Parms, NULL );

	pFnGetCellSchemaProvider->FunctionFlags |= 0x400;

	return GetCellSchemaProvider_Parms.ReturnValue;
};

// Function Engine.UIComp_ListPresenter.FindElementIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            DataSourceIndex                ( CPF_Parm )

int UUIComp_ListPresenter::FindElementIndex ( int DataSourceIndex )
{
	static UFunction* pFnFindElementIndex = NULL;

	if ( ! pFnFindElementIndex )
		pFnFindElementIndex = (UFunction*) UObject::GObjObjects()->Data[ 33704 ];

	UUIComp_ListPresenter_execFindElementIndex_Parms FindElementIndex_Parms;
	FindElementIndex_Parms.DataSourceIndex = DataSourceIndex;

	pFnFindElementIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindElementIndex, &FindElementIndex_Parms, NULL );

	pFnFindElementIndex->FunctionFlags |= 0x400;

	return FindElementIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStoreSubscriber.ClearBoundDataStores
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIDataStoreSubscriber::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = (UFunction*) UObject::GObjObjects()->Data[ 34943 ];

	UUIDataStoreSubscriber_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStoreSubscriber.GetBoundDataStores
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct TArray<class UUIDataStore*> out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIDataStoreSubscriber::GetBoundDataStores ( struct TArray<class UUIDataStore*>* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = (UFunction*) UObject::GObjObjects()->Data[ 34940 ];

	UUIDataStoreSubscriber_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0x10 );
};

// Function Engine.UIDataStoreSubscriber.NotifyDataStoreValueUpdated
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUIDataStoreSubscriber::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = (UFunction*) UObject::GObjObjects()->Data[ 34934 ];

	UUIDataStoreSubscriber_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStoreSubscriber.RefreshSubscriberValue
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUIDataStoreSubscriber::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = (UFunction*) UObject::GObjObjects()->Data[ 34931 ];

	UUIDataStoreSubscriber_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIDataStoreSubscriber.GetDataStoreBinding
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUIDataStoreSubscriber::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = (UFunction*) UObject::GObjObjects()->Data[ 34928 ];

	UUIDataStoreSubscriber_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UIDataStoreSubscriber.SetDataStoreBinding
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUIDataStoreSubscriber::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = (UFunction*) UObject::GObjObjects()->Data[ 34925 ];

	UUIDataStoreSubscriber_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0x10 );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStorePublisher.SaveSubscriberValue
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )
// struct TArray<class UUIDataStore*> out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDataStorePublisher::SaveSubscriberValue ( int BindingIndex, struct TArray<class UUIDataStore*>* out_BoundDataStores )
{
	static UFunction* pFnSaveSubscriberValue = NULL;

	if ( ! pFnSaveSubscriberValue )
		pFnSaveSubscriberValue = (UFunction*) UObject::GObjObjects()->Data[ 34944 ];

	UUIDataStorePublisher_execSaveSubscriberValue_Parms SaveSubscriberValue_Parms;
	SaveSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnSaveSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSubscriberValue, &SaveSubscriberValue_Parms, NULL );

	pFnSaveSubscriberValue->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &SaveSubscriberValue_Parms.out_BoundDataStores, 0x10 );

	return SaveSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIAnimationSeq.GetSequenceLength
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIAnimationSeq::GetSequenceLength ( )
{
	static UFunction* pFnGetSequenceLength = NULL;

	if ( ! pFnGetSequenceLength )
		pFnGetSequenceLength = (UFunction*) UObject::GObjObjects()->Data[ 32244 ];

	UUIAnimationSeq_execGetSequenceLength_Parms GetSequenceLength_Parms;

	pFnGetSequenceLength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSequenceLength, &GetSequenceLength_Parms, NULL );

	pFnGetSequenceLength->FunctionFlags |= 0x400;

	return GetSequenceLength_Parms.ReturnValue;
};

// Function Engine.UIAnimationSeq.GetTrackLength
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            TrackIndex                     ( CPF_Parm )
// float                          out_TrackLength                ( CPF_Parm | CPF_OutParm )

bool UUIAnimationSeq::GetTrackLength ( int TrackIndex, float* out_TrackLength )
{
	static UFunction* pFnGetTrackLength = NULL;

	if ( ! pFnGetTrackLength )
		pFnGetTrackLength = (UFunction*) UObject::GObjObjects()->Data[ 32240 ];

	UUIAnimationSeq_execGetTrackLength_Parms GetTrackLength_Parms;
	GetTrackLength_Parms.TrackIndex = TrackIndex;

	pFnGetTrackLength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTrackLength, &GetTrackLength_Parms, NULL );

	pFnGetTrackLength->FunctionFlags |= 0x400;

	if ( out_TrackLength )
		*out_TrackLength = GetTrackLength_Parms.out_TrackLength;

	return GetTrackLength_Parms.ReturnValue;
};

// Function Engine.UIAnimationSeq.GetFrameLength
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            TrackIndex                     ( CPF_Parm )
// int                            FrameIndex                     ( CPF_Parm )
// float                          out_FrameLength                ( CPF_Parm | CPF_OutParm )

bool UUIAnimationSeq::GetFrameLength ( int TrackIndex, int FrameIndex, float* out_FrameLength )
{
	static UFunction* pFnGetFrameLength = NULL;

	if ( ! pFnGetFrameLength )
		pFnGetFrameLength = (UFunction*) UObject::GObjObjects()->Data[ 32235 ];

	UUIAnimationSeq_execGetFrameLength_Parms GetFrameLength_Parms;
	GetFrameLength_Parms.TrackIndex = TrackIndex;
	GetFrameLength_Parms.FrameIndex = FrameIndex;

	pFnGetFrameLength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFrameLength, &GetFrameLength_Parms, NULL );

	pFnGetFrameLength->FunctionFlags |= 0x400;

	if ( out_FrameLength )
		*out_FrameLength = GetFrameLength_Parms.out_FrameLength;

	return GetFrameLength_Parms.ReturnValue;
};

// Function Engine.UIAnimationSeq.IsValidFrameIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            TrackIndex                     ( CPF_Parm )
// int                            FrameIndex                     ( CPF_Parm )

bool UUIAnimationSeq::IsValidFrameIndex ( int TrackIndex, int FrameIndex )
{
	static UFunction* pFnIsValidFrameIndex = NULL;

	if ( ! pFnIsValidFrameIndex )
		pFnIsValidFrameIndex = (UFunction*) UObject::GObjObjects()->Data[ 32231 ];

	UUIAnimationSeq_execIsValidFrameIndex_Parms IsValidFrameIndex_Parms;
	IsValidFrameIndex_Parms.TrackIndex = TrackIndex;
	IsValidFrameIndex_Parms.FrameIndex = FrameIndex;

	pFnIsValidFrameIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidFrameIndex, &IsValidFrameIndex_Parms, NULL );

	pFnIsValidFrameIndex->FunctionFlags |= 0x400;

	return IsValidFrameIndex_Parms.ReturnValue;
};

// Function Engine.UIDataProvider_OnlinePlayerDataBase.OnUnregister
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataProvider_OnlinePlayerDataBase::eventOnUnregister ( )
{
	static UFunction* pFnOnUnregister = NULL;

	if ( ! pFnOnUnregister )
		pFnOnUnregister = (UFunction*) UObject::GObjObjects()->Data[ 34221 ];

	UUIDataProvider_OnlinePlayerDataBase_eventOnUnregister_Parms OnUnregister_Parms;

	this->ProcessEvent ( pFnOnUnregister, &OnUnregister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerDataBase.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataProvider_OnlinePlayerDataBase::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = (UFunction*) UObject::GObjObjects()->Data[ 34218 ];

	UUIDataProvider_OnlinePlayerDataBase_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineClanMates.OnClanMatesReadComplete
// [0x00020002] 
// Parameters infos:

void UUIDataProvider_OnlineClanMates::OnClanMatesReadComplete ( )
{
	static UFunction* pFnOnClanMatesReadComplete = NULL;

	if ( ! pFnOnClanMatesReadComplete )
		pFnOnClanMatesReadComplete = (UFunction*) UObject::GObjObjects()->Data[ 34226 ];

	UUIDataProvider_OnlineClanMates_execOnClanMatesReadComplete_Parms OnClanMatesReadComplete_Parms;

	this->ProcessEvent ( pFnOnClanMatesReadComplete, &OnClanMatesReadComplete_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineClanMates.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataProvider_OnlineClanMates::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = (UFunction*) UObject::GObjObjects()->Data[ 34222 ];

	UUIDataProvider_OnlineClanMates_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriendMessages.OnGameInviteReceived
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 InviterName                    ( CPF_Parm | CPF_NeedCtorLink )

void UUIDataProvider_OnlineFriendMessages::OnGameInviteReceived ( unsigned char LocalUserNum, struct FString InviterName )
{
	static UFunction* pFnOnGameInviteReceived = NULL;

	if ( ! pFnOnGameInviteReceived )
		pFnOnGameInviteReceived = (UFunction*) UObject::GObjObjects()->Data[ 34254 ];

	UUIDataProvider_OnlineFriendMessages_execOnGameInviteReceived_Parms OnGameInviteReceived_Parms;
	OnGameInviteReceived_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnGameInviteReceived_Parms.InviterName, &InviterName, 0x10 );

	this->ProcessEvent ( pFnOnGameInviteReceived, &OnGameInviteReceived_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriendMessages.OnLoginChange
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UUIDataProvider_OnlineFriendMessages::OnLoginChange ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 34252 ];

	UUIDataProvider_OnlineFriendMessages_execOnLoginChange_Parms OnLoginChange_Parms;
	OnLoginChange_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendMessageReceived
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            SendingPlayer                  ( CPF_Parm )
// struct FString                 SendingNick                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void UUIDataProvider_OnlineFriendMessages::OnFriendMessageReceived ( unsigned char LocalUserNum, struct FUniqueNetId SendingPlayer, struct FString SendingNick, struct FString Message )
{
	static UFunction* pFnOnFriendMessageReceived = NULL;

	if ( ! pFnOnFriendMessageReceived )
		pFnOnFriendMessageReceived = (UFunction*) UObject::GObjObjects()->Data[ 34247 ];

	UUIDataProvider_OnlineFriendMessages_execOnFriendMessageReceived_Parms OnFriendMessageReceived_Parms;
	OnFriendMessageReceived_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnFriendMessageReceived_Parms.SendingPlayer, &SendingPlayer, 0x8 );
	memcpy ( &OnFriendMessageReceived_Parms.SendingNick, &SendingNick, 0x10 );
	memcpy ( &OnFriendMessageReceived_Parms.Message, &Message, 0x10 );

	this->ProcessEvent ( pFnOnFriendMessageReceived, &OnFriendMessageReceived_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendInviteReceived
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            RequestingPlayer               ( CPF_Parm )
// struct FString                 RequestingNick                 ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void UUIDataProvider_OnlineFriendMessages::OnFriendInviteReceived ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer, struct FString RequestingNick, struct FString Message )
{
	static UFunction* pFnOnFriendInviteReceived = NULL;

	if ( ! pFnOnFriendInviteReceived )
		pFnOnFriendInviteReceived = (UFunction*) UObject::GObjObjects()->Data[ 34242 ];

	UUIDataProvider_OnlineFriendMessages_execOnFriendInviteReceived_Parms OnFriendInviteReceived_Parms;
	OnFriendInviteReceived_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnFriendInviteReceived_Parms.RequestingPlayer, &RequestingPlayer, 0x8 );
	memcpy ( &OnFriendInviteReceived_Parms.RequestingNick, &RequestingNick, 0x10 );
	memcpy ( &OnFriendInviteReceived_Parms.Message, &Message, 0x10 );

	this->ProcessEvent ( pFnOnFriendInviteReceived, &OnFriendInviteReceived_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriendMessages.ReadMessages
// [0x00020002] 
// Parameters infos:

void UUIDataProvider_OnlineFriendMessages::ReadMessages ( )
{
	static UFunction* pFnReadMessages = NULL;

	if ( ! pFnReadMessages )
		pFnReadMessages = (UFunction*) UObject::GObjObjects()->Data[ 34239 ];

	UUIDataProvider_OnlineFriendMessages_execReadMessages_Parms ReadMessages_Parms;

	this->ProcessEvent ( pFnReadMessages, &ReadMessages_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriendMessages.OnUnregister
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataProvider_OnlineFriendMessages::eventOnUnregister ( )
{
	static UFunction* pFnOnUnregister = NULL;

	if ( ! pFnOnUnregister )
		pFnOnUnregister = (UFunction*) UObject::GObjObjects()->Data[ 34236 ];

	UUIDataProvider_OnlineFriendMessages_eventOnUnregister_Parms OnUnregister_Parms;

	this->ProcessEvent ( pFnOnUnregister, &OnUnregister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriendMessages.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataProvider_OnlineFriendMessages::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = (UFunction*) UObject::GObjObjects()->Data[ 34232 ];

	UUIDataProvider_OnlineFriendMessages_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriends.RefreshFriendsList
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataProvider_OnlineFriends::eventRefreshFriendsList ( )
{
	static UFunction* pFnRefreshFriendsList = NULL;

	if ( ! pFnRefreshFriendsList )
		pFnRefreshFriendsList = (UFunction*) UObject::GObjObjects()->Data[ 34281 ];

	UUIDataProvider_OnlineFriends_eventRefreshFriendsList_Parms RefreshFriendsList_Parms;

	this->ProcessEvent ( pFnRefreshFriendsList, &RefreshFriendsList_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriends.OnLoginChange
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UUIDataProvider_OnlineFriends::OnLoginChange ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 34277 ];

	UUIDataProvider_OnlineFriends_execOnLoginChange_Parms OnLoginChange_Parms;
	OnLoginChange_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriends.OnFriendsReadComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UUIDataProvider_OnlineFriends::OnFriendsReadComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnFriendsReadComplete = NULL;

	if ( ! pFnOnFriendsReadComplete )
		pFnOnFriendsReadComplete = (UFunction*) UObject::GObjObjects()->Data[ 34273 ];

	UUIDataProvider_OnlineFriends_execOnFriendsReadComplete_Parms OnFriendsReadComplete_Parms;
	OnFriendsReadComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnFriendsReadComplete, &OnFriendsReadComplete_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriends.OnUnregister
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataProvider_OnlineFriends::eventOnUnregister ( )
{
	static UFunction* pFnOnUnregister = NULL;

	if ( ! pFnOnUnregister )
		pFnOnUnregister = (UFunction*) UObject::GObjObjects()->Data[ 34270 ];

	UUIDataProvider_OnlineFriends_eventOnUnregister_Parms OnUnregister_Parms;

	this->ProcessEvent ( pFnOnUnregister, &OnUnregister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriends.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataProvider_OnlineFriends::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = (UFunction*) UObject::GObjObjects()->Data[ 34266 ];

	UUIDataProvider_OnlineFriends_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePartyChatList.RefreshMembersList
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataProvider_OnlinePartyChatList::eventRefreshMembersList ( )
{
	static UFunction* pFnRefreshMembersList = NULL;

	if ( ! pFnRefreshMembersList )
		pFnRefreshMembersList = (UFunction*) UObject::GObjObjects()->Data[ 34314 ];

	UUIDataProvider_OnlinePartyChatList_eventRefreshMembersList_Parms RefreshMembersList_Parms;

	this->ProcessEvent ( pFnRefreshMembersList, &RefreshMembersList_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePartyChatList.OnLoginChange
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UUIDataProvider_OnlinePartyChatList::OnLoginChange ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 34310 ];

	UUIDataProvider_OnlinePartyChatList_execOnLoginChange_Parms OnLoginChange_Parms;
	OnLoginChange_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePartyChatList.OnUnregister
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataProvider_OnlinePartyChatList::eventOnUnregister ( )
{
	static UFunction* pFnOnUnregister = NULL;

	if ( ! pFnOnUnregister )
		pFnOnUnregister = (UFunction*) UObject::GObjObjects()->Data[ 34307 ];

	UUIDataProvider_OnlinePartyChatList_eventOnUnregister_Parms OnUnregister_Parms;

	this->ProcessEvent ( pFnOnUnregister, &OnUnregister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePartyChatList.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataProvider_OnlinePartyChatList::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = (UFunction*) UObject::GObjObjects()->Data[ 34303 ];

	UUIDataProvider_OnlinePartyChatList_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.OnSettingValueUpdated
// [0x00020002] 
// Parameters infos:
// struct FName                   SettingName                    ( CPF_Parm )

void UUIDataProvider_OnlinePlayerStorage::OnSettingValueUpdated ( struct FName SettingName )
{
	static UFunction* pFnOnSettingValueUpdated = NULL;

	if ( ! pFnOnSettingValueUpdated )
		pFnOnSettingValueUpdated = (UFunction*) UObject::GObjObjects()->Data[ 34389 ];

	UUIDataProvider_OnlinePlayerStorage_execOnSettingValueUpdated_Parms OnSettingValueUpdated_Parms;
	memcpy ( &OnSettingValueUpdated_Parms.SettingName, &SettingName, 0x8 );

	this->ProcessEvent ( pFnOnSettingValueUpdated, &OnSettingValueUpdated_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.ArrayProviderPropertyChanged
// [0x00024002] 
// Parameters infos:
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// struct FName                   PropTag                        ( CPF_OptionalParm | CPF_Parm )

void UUIDataProvider_OnlinePlayerStorage::ArrayProviderPropertyChanged ( class UUIDataProvider* SourceProvider, struct FName PropTag )
{
	static UFunction* pFnArrayProviderPropertyChanged = NULL;

	if ( ! pFnArrayProviderPropertyChanged )
		pFnArrayProviderPropertyChanged = (UFunction*) UObject::GObjObjects()->Data[ 34384 ];

	UUIDataProvider_OnlinePlayerStorage_execArrayProviderPropertyChanged_Parms ArrayProviderPropertyChanged_Parms;
	ArrayProviderPropertyChanged_Parms.SourceProvider = SourceProvider;
	memcpy ( &ArrayProviderPropertyChanged_Parms.PropTag, &PropTag, 0x8 );

	this->ProcessEvent ( pFnArrayProviderPropertyChanged, &ArrayProviderPropertyChanged_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.SaveStorageData
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDataProvider_OnlinePlayerStorage::eventSaveStorageData ( )
{
	static UFunction* pFnSaveStorageData = NULL;

	if ( ! pFnSaveStorageData )
		pFnSaveStorageData = (UFunction*) UObject::GObjObjects()->Data[ 34380 ];

	UUIDataProvider_OnlinePlayerStorage_eventSaveStorageData_Parms SaveStorageData_Parms;

	this->ProcessEvent ( pFnSaveStorageData, &SaveStorageData_Parms, NULL );

	return SaveStorageData_Parms.ReturnValue;
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.RefreshStorageData
// [0x00020002] 
// Parameters infos:

void UUIDataProvider_OnlinePlayerStorage::RefreshStorageData ( )
{
	static UFunction* pFnRefreshStorageData = NULL;

	if ( ! pFnRefreshStorageData )
		pFnRefreshStorageData = (UFunction*) UObject::GObjObjects()->Data[ 34377 ];

	UUIDataProvider_OnlinePlayerStorage_execRefreshStorageData_Parms RefreshStorageData_Parms;

	this->ProcessEvent ( pFnRefreshStorageData, &RefreshStorageData_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.OnLoginChange
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UUIDataProvider_OnlinePlayerStorage::OnLoginChange ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 34370 ];

	UUIDataProvider_OnlinePlayerStorage_execOnLoginChange_Parms OnLoginChange_Parms;
	OnLoginChange_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.OnReadStorageComplete
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UUIDataProvider_OnlinePlayerStorage::OnReadStorageComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadStorageComplete = NULL;

	if ( ! pFnOnReadStorageComplete )
		pFnOnReadStorageComplete = (UFunction*) UObject::GObjObjects()->Data[ 34365 ];

	UUIDataProvider_OnlinePlayerStorage_execOnReadStorageComplete_Parms OnReadStorageComplete_Parms;
	OnReadStorageComplete_Parms.LocalUserNum = LocalUserNum;
	OnReadStorageComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadStorageComplete, &OnReadStorageComplete_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.OnUnregister
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataProvider_OnlinePlayerStorage::eventOnUnregister ( )
{
	static UFunction* pFnOnUnregister = NULL;

	if ( ! pFnOnUnregister )
		pFnOnUnregister = (UFunction*) UObject::GObjObjects()->Data[ 34361 ];

	UUIDataProvider_OnlinePlayerStorage_eventOnUnregister_Parms OnUnregister_Parms;

	this->ProcessEvent ( pFnOnUnregister, &OnUnregister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataProvider_OnlinePlayerStorage::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = (UFunction*) UObject::GObjObjects()->Data[ 34355 ];

	UUIDataProvider_OnlinePlayerStorage_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.ClearReadCompleteDelegate
// [0x00020002] 
// Parameters infos:
// class UOnlinePlayerInterface*  PlayerInterface                ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UUIDataProvider_OnlinePlayerStorage::ClearReadCompleteDelegate ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum )
{
	static UFunction* pFnClearReadCompleteDelegate = NULL;

	if ( ! pFnClearReadCompleteDelegate )
		pFnClearReadCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 34352 ];

	UUIDataProvider_OnlinePlayerStorage_execClearReadCompleteDelegate_Parms ClearReadCompleteDelegate_Parms;
	ClearReadCompleteDelegate_Parms.PlayerInterface = PlayerInterface;
	ClearReadCompleteDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnClearReadCompleteDelegate, &ClearReadCompleteDelegate_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.AddReadCompleteDelegate
// [0x00020002] 
// Parameters infos:
// class UOnlinePlayerInterface*  PlayerInterface                ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UUIDataProvider_OnlinePlayerStorage::AddReadCompleteDelegate ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum )
{
	static UFunction* pFnAddReadCompleteDelegate = NULL;

	if ( ! pFnAddReadCompleteDelegate )
		pFnAddReadCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 34349 ];

	UUIDataProvider_OnlinePlayerStorage_execAddReadCompleteDelegate_Parms AddReadCompleteDelegate_Parms;
	AddReadCompleteDelegate_Parms.PlayerInterface = PlayerInterface;
	AddReadCompleteDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnAddReadCompleteDelegate, &AddReadCompleteDelegate_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.WriteData
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlinePlayerInterface*  PlayerInterface                ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlinePlayerStorage*    PlayerStorage                  ( CPF_Parm )

bool UUIDataProvider_OnlinePlayerStorage::WriteData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage )
{
	static UFunction* pFnWriteData = NULL;

	if ( ! pFnWriteData )
		pFnWriteData = (UFunction*) UObject::GObjObjects()->Data[ 34344 ];

	UUIDataProvider_OnlinePlayerStorage_execWriteData_Parms WriteData_Parms;
	WriteData_Parms.PlayerInterface = PlayerInterface;
	WriteData_Parms.LocalUserNum = LocalUserNum;
	WriteData_Parms.PlayerStorage = PlayerStorage;

	this->ProcessEvent ( pFnWriteData, &WriteData_Parms, NULL );

	return WriteData_Parms.ReturnValue;
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.ReadData
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlinePlayerInterface*  PlayerInterface                ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlinePlayerStorage*    PlayerStorage                  ( CPF_Parm )

bool UUIDataProvider_OnlinePlayerStorage::ReadData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage )
{
	static UFunction* pFnReadData = NULL;

	if ( ! pFnReadData )
		pFnReadData = (UFunction*) UObject::GObjObjects()->Data[ 34339 ];

	UUIDataProvider_OnlinePlayerStorage_execReadData_Parms ReadData_Parms;
	ReadData_Parms.PlayerInterface = PlayerInterface;
	ReadData_Parms.LocalUserNum = LocalUserNum;
	ReadData_Parms.PlayerStorage = PlayerStorage;

	this->ProcessEvent ( pFnReadData, &ReadData_Parms, NULL );

	return ReadData_Parms.ReturnValue;
};

// Function Engine.UIDataProvider_OnlineProfileSettings.ClearReadCompleteDelegate
// [0x00020002] 
// Parameters infos:
// class UOnlinePlayerInterface*  PlayerInterface                ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UUIDataProvider_OnlineProfileSettings::ClearReadCompleteDelegate ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum )
{
	static UFunction* pFnClearReadCompleteDelegate = NULL;

	if ( ! pFnClearReadCompleteDelegate )
		pFnClearReadCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 34415 ];

	UUIDataProvider_OnlineProfileSettings_execClearReadCompleteDelegate_Parms ClearReadCompleteDelegate_Parms;
	ClearReadCompleteDelegate_Parms.PlayerInterface = PlayerInterface;
	ClearReadCompleteDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnClearReadCompleteDelegate, &ClearReadCompleteDelegate_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineProfileSettings.AddReadCompleteDelegate
// [0x00020002] 
// Parameters infos:
// class UOnlinePlayerInterface*  PlayerInterface                ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UUIDataProvider_OnlineProfileSettings::AddReadCompleteDelegate ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum )
{
	static UFunction* pFnAddReadCompleteDelegate = NULL;

	if ( ! pFnAddReadCompleteDelegate )
		pFnAddReadCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 34412 ];

	UUIDataProvider_OnlineProfileSettings_execAddReadCompleteDelegate_Parms AddReadCompleteDelegate_Parms;
	AddReadCompleteDelegate_Parms.PlayerInterface = PlayerInterface;
	AddReadCompleteDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnAddReadCompleteDelegate, &AddReadCompleteDelegate_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineProfileSettings.WriteData
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlinePlayerInterface*  PlayerInterface                ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlinePlayerStorage*    PlayerStorage                  ( CPF_Parm )

bool UUIDataProvider_OnlineProfileSettings::WriteData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage )
{
	static UFunction* pFnWriteData = NULL;

	if ( ! pFnWriteData )
		pFnWriteData = (UFunction*) UObject::GObjObjects()->Data[ 34407 ];

	UUIDataProvider_OnlineProfileSettings_execWriteData_Parms WriteData_Parms;
	WriteData_Parms.PlayerInterface = PlayerInterface;
	WriteData_Parms.LocalUserNum = LocalUserNum;
	WriteData_Parms.PlayerStorage = PlayerStorage;

	this->ProcessEvent ( pFnWriteData, &WriteData_Parms, NULL );

	return WriteData_Parms.ReturnValue;
};

// Function Engine.UIDataProvider_OnlineProfileSettings.ReadData
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlinePlayerInterface*  PlayerInterface                ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlinePlayerStorage*    PlayerStorage                  ( CPF_Parm )

bool UUIDataProvider_OnlineProfileSettings::ReadData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage )
{
	static UFunction* pFnReadData = NULL;

	if ( ! pFnReadData )
		pFnReadData = (UFunction*) UObject::GObjObjects()->Data[ 34402 ];

	UUIDataProvider_OnlineProfileSettings_execReadData_Parms ReadData_Parms;
	ReadData_Parms.PlayerInterface = PlayerInterface;
	ReadData_Parms.LocalUserNum = LocalUserNum;
	ReadData_Parms.PlayerStorage = PlayerStorage;

	this->ProcessEvent ( pFnReadData, &ReadData_Parms, NULL );

	return ReadData_Parms.ReturnValue;
};

// Function Engine.UIDataProvider_OnlinePlayers.OnPlayersReadComplete
// [0x00020002] 
// Parameters infos:

void UUIDataProvider_OnlinePlayers::OnPlayersReadComplete ( )
{
	static UFunction* pFnOnPlayersReadComplete = NULL;

	if ( ! pFnOnPlayersReadComplete )
		pFnOnPlayersReadComplete = (UFunction*) UObject::GObjObjects()->Data[ 34329 ];

	UUIDataProvider_OnlinePlayers_execOnPlayersReadComplete_Parms OnPlayersReadComplete_Parms;

	this->ProcessEvent ( pFnOnPlayersReadComplete, &OnPlayersReadComplete_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayers.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataProvider_OnlinePlayers::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = (UFunction*) UObject::GObjObjects()->Data[ 34325 ];

	UUIDataProvider_OnlinePlayers_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataProvider_PlayerAchievements.UpdateAchievements
// [0x00020002] 
// Parameters infos:

void UUIDataProvider_PlayerAchievements::UpdateAchievements ( )
{
	static UFunction* pFnUpdateAchievements = NULL;

	if ( ! pFnUpdateAchievements )
		pFnUpdateAchievements = (UFunction*) UObject::GObjObjects()->Data[ 34446 ];

	UUIDataProvider_PlayerAchievements_execUpdateAchievements_Parms UpdateAchievements_Parms;

	this->ProcessEvent ( pFnUpdateAchievements, &UpdateAchievements_Parms, NULL );
};

// Function Engine.UIDataProvider_PlayerAchievements.OnLoginChange
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UUIDataProvider_PlayerAchievements::OnLoginChange ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 34444 ];

	UUIDataProvider_PlayerAchievements_execOnLoginChange_Parms OnLoginChange_Parms;
	OnLoginChange_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.UIDataProvider_PlayerAchievements.OnUnregister
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataProvider_PlayerAchievements::eventOnUnregister ( )
{
	static UFunction* pFnOnUnregister = NULL;

	if ( ! pFnOnUnregister )
		pFnOnUnregister = (UFunction*) UObject::GObjObjects()->Data[ 34442 ];

	UUIDataProvider_PlayerAchievements_eventOnUnregister_Parms OnUnregister_Parms;

	this->ProcessEvent ( pFnOnUnregister, &OnUnregister_Parms, NULL );
};

// Function Engine.UIDataProvider_PlayerAchievements.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataProvider_PlayerAchievements::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = (UFunction*) UObject::GObjObjects()->Data[ 34439 ];

	UUIDataProvider_PlayerAchievements_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataProvider_PlayerAchievements.OnPlayerAchievementUnlocked
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UUIDataProvider_PlayerAchievements::OnPlayerAchievementUnlocked ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnPlayerAchievementUnlocked = NULL;

	if ( ! pFnOnPlayerAchievementUnlocked )
		pFnOnPlayerAchievementUnlocked = (UFunction*) UObject::GObjObjects()->Data[ 34437 ];

	UUIDataProvider_PlayerAchievements_execOnPlayerAchievementUnlocked_Parms OnPlayerAchievementUnlocked_Parms;
	OnPlayerAchievementUnlocked_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnPlayerAchievementUnlocked, &OnPlayerAchievementUnlocked_Parms, NULL );
};

// Function Engine.UIDataProvider_PlayerAchievements.OnPlayerAchievementsChanged
// [0x00020002] 
// Parameters infos:
// int                            TitleId                        ( CPF_Parm )

void UUIDataProvider_PlayerAchievements::OnPlayerAchievementsChanged ( int TitleId )
{
	static UFunction* pFnOnPlayerAchievementsChanged = NULL;

	if ( ! pFnOnPlayerAchievementsChanged )
		pFnOnPlayerAchievementsChanged = (UFunction*) UObject::GObjObjects()->Data[ 34433 ];

	UUIDataProvider_PlayerAchievements_execOnPlayerAchievementsChanged_Parms OnPlayerAchievementsChanged_Parms;
	OnPlayerAchievementsChanged_Parms.TitleId = TitleId;

	this->ProcessEvent ( pFnOnPlayerAchievementsChanged, &OnPlayerAchievementsChanged_Parms, NULL );
};

// Function Engine.UIDataProvider_PlayerAchievements.GetAchievementDetails
// [0x00420002] 
// Parameters infos:
// int                            AchievementId                  ( CPF_Const | CPF_Parm )
// struct FAchievementDetails     OutAchievementDetails          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIDataProvider_PlayerAchievements::GetAchievementDetails ( int AchievementId, struct FAchievementDetails* OutAchievementDetails )
{
	static UFunction* pFnGetAchievementDetails = NULL;

	if ( ! pFnGetAchievementDetails )
		pFnGetAchievementDetails = (UFunction*) UObject::GObjObjects()->Data[ 34429 ];

	UUIDataProvider_PlayerAchievements_execGetAchievementDetails_Parms GetAchievementDetails_Parms;
	GetAchievementDetails_Parms.AchievementId = AchievementId;

	this->ProcessEvent ( pFnGetAchievementDetails, &GetAchievementDetails_Parms, NULL );

	if ( OutAchievementDetails )
		memcpy ( OutAchievementDetails, &GetAchievementDetails_Parms.OutAchievementDetails, 0x44 );
};

// Function Engine.UIDataProvider_PlayerAchievements.GetAchievementIconPathName
// [0x00024000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            AchievementId                  ( CPF_Parm )
// unsigned long                  bReturnLockedIcon              ( CPF_OptionalParm | CPF_Parm )

struct FString UUIDataProvider_PlayerAchievements::GetAchievementIconPathName ( int AchievementId, unsigned long bReturnLockedIcon )
{
	static UFunction* pFnGetAchievementIconPathName = NULL;

	if ( ! pFnGetAchievementIconPathName )
		pFnGetAchievementIconPathName = (UFunction*) UObject::GObjObjects()->Data[ 34425 ];

	UUIDataProvider_PlayerAchievements_execGetAchievementIconPathName_Parms GetAchievementIconPathName_Parms;
	GetAchievementIconPathName_Parms.AchievementId = AchievementId;
	GetAchievementIconPathName_Parms.bReturnLockedIcon = bReturnLockedIcon;

	this->ProcessEvent ( pFnGetAchievementIconPathName, &GetAchievementIconPathName_Parms, NULL );

	return GetAchievementIconPathName_Parms.ReturnValue;
};

// Function Engine.UIDataProvider_PlayerAchievements.PopulateAchievementIcons
// [0x00020000] 
// Parameters infos:

void UUIDataProvider_PlayerAchievements::PopulateAchievementIcons ( )
{
	static UFunction* pFnPopulateAchievementIcons = NULL;

	if ( ! pFnPopulateAchievementIcons )
		pFnPopulateAchievementIcons = (UFunction*) UObject::GObjObjects()->Data[ 34424 ];

	UUIDataProvider_PlayerAchievements_execPopulateAchievementIcons_Parms PopulateAchievementIcons_Parms;

	this->ProcessEvent ( pFnPopulateAchievementIcons, &PopulateAchievementIcons_Parms, NULL );
};

// Function Engine.UIDataProvider_PlayerAchievements.GetMaxTotalGamerScore
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIDataProvider_PlayerAchievements::GetMaxTotalGamerScore ( )
{
	static UFunction* pFnGetMaxTotalGamerScore = NULL;

	if ( ! pFnGetMaxTotalGamerScore )
		pFnGetMaxTotalGamerScore = (UFunction*) UObject::GObjObjects()->Data[ 34422 ];

	UUIDataProvider_PlayerAchievements_execGetMaxTotalGamerScore_Parms GetMaxTotalGamerScore_Parms;

	pFnGetMaxTotalGamerScore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxTotalGamerScore, &GetMaxTotalGamerScore_Parms, NULL );

	pFnGetMaxTotalGamerScore->FunctionFlags |= 0x400;

	return GetMaxTotalGamerScore_Parms.ReturnValue;
};

// Function Engine.UIDataProvider_PlayerAchievements.GetTotalGamerScore
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIDataProvider_PlayerAchievements::GetTotalGamerScore ( )
{
	static UFunction* pFnGetTotalGamerScore = NULL;

	if ( ! pFnGetTotalGamerScore )
		pFnGetTotalGamerScore = (UFunction*) UObject::GObjObjects()->Data[ 34420 ];

	UUIDataProvider_PlayerAchievements_execGetTotalGamerScore_Parms GetTotalGamerScore_Parms;

	pFnGetTotalGamerScore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTotalGamerScore, &GetTotalGamerScore_Parms, NULL );

	pFnGetTotalGamerScore->FunctionFlags |= 0x400;

	return GetTotalGamerScore_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.Registered
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

void USceneDataStore::eventRegistered ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnRegistered = NULL;

	if ( ! pFnRegistered )
		pFnRegistered = (UFunction*) UObject::GObjObjects()->Data[ 29353 ];

	USceneDataStore_eventRegistered_Parms Registered_Parms;
	Registered_Parms.PlayerOwner = PlayerOwner;

	this->ProcessEvent ( pFnRegistered, &Registered_Parms, NULL );
};

// Function Engine.SceneDataStore.SceneDataFieldChanged
// [0x00024002] 
// Parameters infos:
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// struct FName                   PropTag                        ( CPF_OptionalParm | CPF_Parm )

void USceneDataStore::SceneDataFieldChanged ( class UUIDataProvider* SourceProvider, struct FName PropTag )
{
	static UFunction* pFnSceneDataFieldChanged = NULL;

	if ( ! pFnSceneDataFieldChanged )
		pFnSceneDataFieldChanged = (UFunction*) UObject::GObjObjects()->Data[ 29350 ];

	USceneDataStore_execSceneDataFieldChanged_Parms SceneDataFieldChanged_Parms;
	SceneDataFieldChanged_Parms.SourceProvider = SourceProvider;
	memcpy ( &SceneDataFieldChanged_Parms.PropTag, &PropTag, 0x8 );

	this->ProcessEvent ( pFnSceneDataFieldChanged, &SceneDataFieldChanged_Parms, NULL );
};

// Function Engine.SceneDataStore.FindCollectionValueIndex
// [0x00424003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 ValueToFind                    ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int USceneDataStore::FindCollectionValueIndex ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* ValueToFind )
{
	static UFunction* pFnFindCollectionValueIndex = NULL;

	if ( ! pFnFindCollectionValueIndex )
		pFnFindCollectionValueIndex = (UFunction*) UObject::GObjObjects()->Data[ 29342 ];

	USceneDataStore_execFindCollectionValueIndex_Parms FindCollectionValueIndex_Parms;
	memcpy ( &FindCollectionValueIndex_Parms.FieldName, &FieldName, 0x8 );
	FindCollectionValueIndex_Parms.bPersistent = bPersistent;
	memcpy ( &FindCollectionValueIndex_Parms.CellTag, &CellTag, 0x8 );

	this->ProcessEvent ( pFnFindCollectionValueIndex, &FindCollectionValueIndex_Parms, NULL );

	if ( ValueToFind )
		memcpy ( ValueToFind, &FindCollectionValueIndex_Parms.ValueToFind, 0x10 );

	return FindCollectionValueIndex_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.GetCollectionValue
// [0x00424003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 out_Value                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USceneDataStore::GetCollectionValue ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag, struct FString* out_Value )
{
	static UFunction* pFnGetCollectionValue = NULL;

	if ( ! pFnGetCollectionValue )
		pFnGetCollectionValue = (UFunction*) UObject::GObjObjects()->Data[ 29335 ];

	USceneDataStore_execGetCollectionValue_Parms GetCollectionValue_Parms;
	memcpy ( &GetCollectionValue_Parms.FieldName, &FieldName, 0x8 );
	GetCollectionValue_Parms.ValueIndex = ValueIndex;
	GetCollectionValue_Parms.bPersistent = bPersistent;
	memcpy ( &GetCollectionValue_Parms.CellTag, &CellTag, 0x8 );

	this->ProcessEvent ( pFnGetCollectionValue, &GetCollectionValue_Parms, NULL );

	if ( out_Value )
		memcpy ( out_Value, &GetCollectionValue_Parms.out_Value, 0x10 );

	return GetCollectionValue_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.ClearCollectionValueArray
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )

bool USceneDataStore::ClearCollectionValueArray ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag )
{
	static UFunction* pFnClearCollectionValueArray = NULL;

	if ( ! pFnClearCollectionValueArray )
		pFnClearCollectionValueArray = (UFunction*) UObject::GObjObjects()->Data[ 29330 ];

	USceneDataStore_execClearCollectionValueArray_Parms ClearCollectionValueArray_Parms;
	memcpy ( &ClearCollectionValueArray_Parms.FieldName, &FieldName, 0x8 );
	ClearCollectionValueArray_Parms.bPersistent = bPersistent;
	memcpy ( &ClearCollectionValueArray_Parms.CellTag, &CellTag, 0x8 );

	this->ProcessEvent ( pFnClearCollectionValueArray, &ClearCollectionValueArray_Parms, NULL );

	return ClearCollectionValueArray_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.ReplaceCollectionValueByIndex
// [0x00424003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USceneDataStore::ReplaceCollectionValueByIndex ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag, struct FString* NewValue )
{
	static UFunction* pFnReplaceCollectionValueByIndex = NULL;

	if ( ! pFnReplaceCollectionValueByIndex )
		pFnReplaceCollectionValueByIndex = (UFunction*) UObject::GObjObjects()->Data[ 29321 ];

	USceneDataStore_execReplaceCollectionValueByIndex_Parms ReplaceCollectionValueByIndex_Parms;
	memcpy ( &ReplaceCollectionValueByIndex_Parms.FieldName, &FieldName, 0x8 );
	ReplaceCollectionValueByIndex_Parms.ValueIndex = ValueIndex;
	ReplaceCollectionValueByIndex_Parms.bPersistent = bPersistent;
	memcpy ( &ReplaceCollectionValueByIndex_Parms.CellTag, &CellTag, 0x8 );

	this->ProcessEvent ( pFnReplaceCollectionValueByIndex, &ReplaceCollectionValueByIndex_Parms, NULL );

	if ( NewValue )
		memcpy ( NewValue, &ReplaceCollectionValueByIndex_Parms.NewValue, 0x10 );

	return ReplaceCollectionValueByIndex_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.ReplaceCollectionValue
// [0x00424003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 CurrentValue                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USceneDataStore::ReplaceCollectionValue ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* CurrentValue, struct FString* NewValue )
{
	static UFunction* pFnReplaceCollectionValue = NULL;

	if ( ! pFnReplaceCollectionValue )
		pFnReplaceCollectionValue = (UFunction*) UObject::GObjObjects()->Data[ 29312 ];

	USceneDataStore_execReplaceCollectionValue_Parms ReplaceCollectionValue_Parms;
	memcpy ( &ReplaceCollectionValue_Parms.FieldName, &FieldName, 0x8 );
	ReplaceCollectionValue_Parms.bPersistent = bPersistent;
	memcpy ( &ReplaceCollectionValue_Parms.CellTag, &CellTag, 0x8 );

	this->ProcessEvent ( pFnReplaceCollectionValue, &ReplaceCollectionValue_Parms, NULL );

	if ( CurrentValue )
		memcpy ( CurrentValue, &ReplaceCollectionValue_Parms.CurrentValue, 0x10 );

	if ( NewValue )
		memcpy ( NewValue, &ReplaceCollectionValue_Parms.NewValue, 0x10 );

	return ReplaceCollectionValue_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.RemoveCollectionValueByIndex
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )

bool USceneDataStore::RemoveCollectionValueByIndex ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag )
{
	static UFunction* pFnRemoveCollectionValueByIndex = NULL;

	if ( ! pFnRemoveCollectionValueByIndex )
		pFnRemoveCollectionValueByIndex = (UFunction*) UObject::GObjObjects()->Data[ 29304 ];

	USceneDataStore_execRemoveCollectionValueByIndex_Parms RemoveCollectionValueByIndex_Parms;
	memcpy ( &RemoveCollectionValueByIndex_Parms.FieldName, &FieldName, 0x8 );
	RemoveCollectionValueByIndex_Parms.ValueIndex = ValueIndex;
	RemoveCollectionValueByIndex_Parms.bPersistent = bPersistent;
	memcpy ( &RemoveCollectionValueByIndex_Parms.CellTag, &CellTag, 0x8 );

	this->ProcessEvent ( pFnRemoveCollectionValueByIndex, &RemoveCollectionValueByIndex_Parms, NULL );

	return RemoveCollectionValueByIndex_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.RemoveCollectionValue
// [0x00424003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 ValueToRemove                  ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USceneDataStore::RemoveCollectionValue ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* ValueToRemove )
{
	static UFunction* pFnRemoveCollectionValue = NULL;

	if ( ! pFnRemoveCollectionValue )
		pFnRemoveCollectionValue = (UFunction*) UObject::GObjObjects()->Data[ 29296 ];

	USceneDataStore_execRemoveCollectionValue_Parms RemoveCollectionValue_Parms;
	memcpy ( &RemoveCollectionValue_Parms.FieldName, &FieldName, 0x8 );
	RemoveCollectionValue_Parms.bPersistent = bPersistent;
	memcpy ( &RemoveCollectionValue_Parms.CellTag, &CellTag, 0x8 );

	this->ProcessEvent ( pFnRemoveCollectionValue, &RemoveCollectionValue_Parms, NULL );

	if ( ValueToRemove )
		memcpy ( ValueToRemove, &RemoveCollectionValue_Parms.ValueToRemove, 0x10 );

	return RemoveCollectionValue_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.InsertCollectionValue
// [0x00424003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAllowDuplicateValues          ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USceneDataStore::InsertCollectionValue ( struct FName FieldName, int InsertIndex, unsigned long bPersistent, unsigned long bAllowDuplicateValues, struct FName CellTag, struct FString* NewValue )
{
	static UFunction* pFnInsertCollectionValue = NULL;

	if ( ! pFnInsertCollectionValue )
		pFnInsertCollectionValue = (UFunction*) UObject::GObjObjects()->Data[ 29288 ];

	USceneDataStore_execInsertCollectionValue_Parms InsertCollectionValue_Parms;
	memcpy ( &InsertCollectionValue_Parms.FieldName, &FieldName, 0x8 );
	InsertCollectionValue_Parms.InsertIndex = InsertIndex;
	InsertCollectionValue_Parms.bPersistent = bPersistent;
	InsertCollectionValue_Parms.bAllowDuplicateValues = bAllowDuplicateValues;
	memcpy ( &InsertCollectionValue_Parms.CellTag, &CellTag, 0x8 );

	this->ProcessEvent ( pFnInsertCollectionValue, &InsertCollectionValue_Parms, NULL );

	if ( NewValue )
		memcpy ( NewValue, &InsertCollectionValue_Parms.NewValue, 0x10 );

	return InsertCollectionValue_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.SetCollectionValueArray
// [0x00424003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bClearExisting                 ( CPF_OptionalParm | CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct TArray<struct FString>  CollectionValues               ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USceneDataStore::SetCollectionValueArray ( struct FName FieldName, unsigned long bClearExisting, int InsertIndex, unsigned long bPersistent, struct FName CellTag, struct TArray<struct FString>* CollectionValues )
{
	static UFunction* pFnSetCollectionValueArray = NULL;

	if ( ! pFnSetCollectionValueArray )
		pFnSetCollectionValueArray = (UFunction*) UObject::GObjObjects()->Data[ 29277 ];

	USceneDataStore_execSetCollectionValueArray_Parms SetCollectionValueArray_Parms;
	memcpy ( &SetCollectionValueArray_Parms.FieldName, &FieldName, 0x8 );
	SetCollectionValueArray_Parms.bClearExisting = bClearExisting;
	SetCollectionValueArray_Parms.InsertIndex = InsertIndex;
	SetCollectionValueArray_Parms.bPersistent = bPersistent;
	memcpy ( &SetCollectionValueArray_Parms.CellTag, &CellTag, 0x8 );

	this->ProcessEvent ( pFnSetCollectionValueArray, &SetCollectionValueArray_Parms, NULL );

	if ( CollectionValues )
		memcpy ( CollectionValues, &SetCollectionValueArray_Parms.CollectionValues, 0x10 );

	return SetCollectionValueArray_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.GetCollectionValueArray
// [0x00424003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct TArray<struct FString>  out_DataValueArray             ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USceneDataStore::GetCollectionValueArray ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct TArray<struct FString>* out_DataValueArray )
{
	static UFunction* pFnGetCollectionValueArray = NULL;

	if ( ! pFnGetCollectionValueArray )
		pFnGetCollectionValueArray = (UFunction*) UObject::GObjObjects()->Data[ 29270 ];

	USceneDataStore_execGetCollectionValueArray_Parms GetCollectionValueArray_Parms;
	memcpy ( &GetCollectionValueArray_Parms.FieldName, &FieldName, 0x8 );
	GetCollectionValueArray_Parms.bPersistent = bPersistent;
	memcpy ( &GetCollectionValueArray_Parms.CellTag, &CellTag, 0x8 );

	this->ProcessEvent ( pFnGetCollectionValueArray, &GetCollectionValueArray_Parms, NULL );

	if ( out_DataValueArray )
		memcpy ( out_DataValueArray, &GetCollectionValueArray_Parms.out_DataValueArray, 0x10 );

	return GetCollectionValueArray_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.ClearFields
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bReinitializeRuntimeFields     ( CPF_OptionalParm | CPF_Parm )

bool USceneDataStore::ClearFields ( unsigned long bReinitializeRuntimeFields )
{
	static UFunction* pFnClearFields = NULL;

	if ( ! pFnClearFields )
		pFnClearFields = (UFunction*) UObject::GObjObjects()->Data[ 29265 ];

	USceneDataStore_execClearFields_Parms ClearFields_Parms;
	ClearFields_Parms.bReinitializeRuntimeFields = bReinitializeRuntimeFields;

	this->ProcessEvent ( pFnClearFields, &ClearFields_Parms, NULL );

	return ClearFields_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.FindFieldIndex
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bSearchPersistentFields        ( CPF_OptionalParm | CPF_Parm )

int USceneDataStore::FindFieldIndex ( struct FName FieldName, unsigned long bSearchPersistentFields )
{
	static UFunction* pFnFindFieldIndex = NULL;

	if ( ! pFnFindFieldIndex )
		pFnFindFieldIndex = (UFunction*) UObject::GObjObjects()->Data[ 29259 ];

	USceneDataStore_execFindFieldIndex_Parms FindFieldIndex_Parms;
	memcpy ( &FindFieldIndex_Parms.FieldName, &FieldName, 0x8 );
	FindFieldIndex_Parms.bSearchPersistentFields = bSearchPersistentFields;

	this->ProcessEvent ( pFnFindFieldIndex, &FindFieldIndex_Parms, NULL );

	return FindFieldIndex_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.RemoveField
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )

bool USceneDataStore::RemoveField ( struct FName FieldName )
{
	static UFunction* pFnRemoveField = NULL;

	if ( ! pFnRemoveField )
		pFnRemoveField = (UFunction*) UObject::GObjObjects()->Data[ 29254 ];

	USceneDataStore_execRemoveField_Parms RemoveField_Parms;
	memcpy ( &RemoveField_Parms.FieldName, &FieldName, 0x8 );

	this->ProcessEvent ( pFnRemoveField, &RemoveField_Parms, NULL );

	return RemoveField_Parms.ReturnValue;
};

// Function Engine.SceneDataStore.AddField
// [0x00424003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned char                  FieldType                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// int                            out_InsertPosition             ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool USceneDataStore::AddField ( struct FName FieldName, unsigned char FieldType, unsigned long bPersistent, int* out_InsertPosition )
{
	static UFunction* pFnAddField = NULL;

	if ( ! pFnAddField )
		pFnAddField = (UFunction*) UObject::GObjObjects()->Data[ 29245 ];

	USceneDataStore_execAddField_Parms AddField_Parms;
	memcpy ( &AddField_Parms.FieldName, &FieldName, 0x8 );
	AddField_Parms.FieldType = FieldType;
	AddField_Parms.bPersistent = bPersistent;

	this->ProcessEvent ( pFnAddField, &AddField_Parms, NULL );

	if ( out_InsertPosition )
		*out_InsertPosition = AddField_Parms.out_InsertPosition;

	return AddField_Parms.ReturnValue;
};

// Function Engine.UIDataStore_DynamicResource.Unregistered
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

void UUIDataStore_DynamicResource::eventUnregistered ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnUnregistered = NULL;

	if ( ! pFnUnregistered )
		pFnUnregistered = (UFunction*) UObject::GObjObjects()->Data[ 34526 ];

	UUIDataStore_DynamicResource_eventUnregistered_Parms Unregistered_Parms;
	Unregistered_Parms.PlayerOwner = PlayerOwner;

	this->ProcessEvent ( pFnUnregistered, &Unregistered_Parms, NULL );
};

// Function Engine.UIDataStore_DynamicResource.Registered
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

void UUIDataStore_DynamicResource::eventRegistered ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnRegistered = NULL;

	if ( ! pFnRegistered )
		pFnRegistered = (UFunction*) UObject::GObjObjects()->Data[ 34519 ];

	UUIDataStore_DynamicResource_eventRegistered_Parms Registered_Parms;
	Registered_Parms.PlayerOwner = PlayerOwner;

	this->ProcessEvent ( pFnRegistered, &Registered_Parms, NULL );
};

// Function Engine.UIDataStore_DynamicResource.OnLoginChange
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UUIDataStore_DynamicResource::OnLoginChange ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 34517 ];

	UUIDataStore_DynamicResource_execOnLoginChange_Parms OnLoginChange_Parms;
	OnLoginChange_Parms.LocalUserNum = LocalUserNum;

	pFnOnLoginChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );

	pFnOnLoginChange->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStore_DynamicResource.FindProviderIndexByFieldValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )
// struct FName                   SearchField                    ( CPF_Parm )
// struct FUIProviderScriptFieldValue ValueToSearchFor               ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int UUIDataStore_DynamicResource::FindProviderIndexByFieldValue ( struct FName ProviderTag, struct FName SearchField, struct FUIProviderScriptFieldValue* ValueToSearchFor )
{
	static UFunction* pFnFindProviderIndexByFieldValue = NULL;

	if ( ! pFnFindProviderIndexByFieldValue )
		pFnFindProviderIndexByFieldValue = (UFunction*) UObject::GObjObjects()->Data[ 34512 ];

	UUIDataStore_DynamicResource_execFindProviderIndexByFieldValue_Parms FindProviderIndexByFieldValue_Parms;
	memcpy ( &FindProviderIndexByFieldValue_Parms.ProviderTag, &ProviderTag, 0x8 );
	memcpy ( &FindProviderIndexByFieldValue_Parms.SearchField, &SearchField, 0x8 );

	pFnFindProviderIndexByFieldValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindProviderIndexByFieldValue, &FindProviderIndexByFieldValue_Parms, NULL );

	pFnFindProviderIndexByFieldValue->FunctionFlags |= 0x400;

	if ( ValueToSearchFor )
		memcpy ( ValueToSearchFor, &FindProviderIndexByFieldValue_Parms.ValueToSearchFor, 0x60 );

	return FindProviderIndexByFieldValue_Parms.ReturnValue;
};

// Function Engine.UIDataStore_DynamicResource.GetProviderFieldValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )
// struct FName                   SearchField                    ( CPF_Parm )
// int                            ProviderIndex                  ( CPF_Parm )
// struct FUIProviderScriptFieldValue out_FieldValue                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDataStore_DynamicResource::GetProviderFieldValue ( struct FName ProviderTag, struct FName SearchField, int ProviderIndex, struct FUIProviderScriptFieldValue* out_FieldValue )
{
	static UFunction* pFnGetProviderFieldValue = NULL;

	if ( ! pFnGetProviderFieldValue )
		pFnGetProviderFieldValue = (UFunction*) UObject::GObjObjects()->Data[ 34506 ];

	UUIDataStore_DynamicResource_execGetProviderFieldValue_Parms GetProviderFieldValue_Parms;
	memcpy ( &GetProviderFieldValue_Parms.ProviderTag, &ProviderTag, 0x8 );
	memcpy ( &GetProviderFieldValue_Parms.SearchField, &SearchField, 0x8 );
	GetProviderFieldValue_Parms.ProviderIndex = ProviderIndex;

	pFnGetProviderFieldValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProviderFieldValue, &GetProviderFieldValue_Parms, NULL );

	pFnGetProviderFieldValue->FunctionFlags |= 0x400;

	if ( out_FieldValue )
		memcpy ( out_FieldValue, &GetProviderFieldValue_Parms.out_FieldValue, 0x60 );

	return GetProviderFieldValue_Parms.ReturnValue;
};

// Function Engine.UIDataStore_DynamicResource.GetResourceProviderFields
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )
// struct TArray<struct FName>    ProviderFieldTags              ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDataStore_DynamicResource::GetResourceProviderFields ( struct FName ProviderTag, struct TArray<struct FName>* ProviderFieldTags )
{
	static UFunction* pFnGetResourceProviderFields = NULL;

	if ( ! pFnGetResourceProviderFields )
		pFnGetResourceProviderFields = (UFunction*) UObject::GObjObjects()->Data[ 34501 ];

	UUIDataStore_DynamicResource_execGetResourceProviderFields_Parms GetResourceProviderFields_Parms;
	memcpy ( &GetResourceProviderFields_Parms.ProviderTag, &ProviderTag, 0x8 );

	pFnGetResourceProviderFields->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResourceProviderFields, &GetResourceProviderFields_Parms, NULL );

	pFnGetResourceProviderFields->FunctionFlags |= 0x400;

	if ( ProviderFieldTags )
		memcpy ( ProviderFieldTags, &GetResourceProviderFields_Parms.ProviderFieldTags, 0x10 );

	return GetResourceProviderFields_Parms.ReturnValue;
};

// Function Engine.UIDataStore_DynamicResource.GetResourceProviders
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )
// struct TArray<class UUIResourceCombinationProvider*> out_Providers                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDataStore_DynamicResource::GetResourceProviders ( struct FName ProviderTag, struct TArray<class UUIResourceCombinationProvider*>* out_Providers )
{
	static UFunction* pFnGetResourceProviders = NULL;

	if ( ! pFnGetResourceProviders )
		pFnGetResourceProviders = (UFunction*) UObject::GObjObjects()->Data[ 34496 ];

	UUIDataStore_DynamicResource_execGetResourceProviders_Parms GetResourceProviders_Parms;
	memcpy ( &GetResourceProviders_Parms.ProviderTag, &ProviderTag, 0x8 );

	pFnGetResourceProviders->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResourceProviders, &GetResourceProviders_Parms, NULL );

	pFnGetResourceProviders->FunctionFlags |= 0x400;

	if ( out_Providers )
		memcpy ( out_Providers, &GetResourceProviders_Parms.out_Providers, 0x10 );

	return GetResourceProviders_Parms.ReturnValue;
};

// Function Engine.UIDataStore_DynamicResource.GetProviderCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )

int UUIDataStore_DynamicResource::GetProviderCount ( struct FName ProviderTag )
{
	static UFunction* pFnGetProviderCount = NULL;

	if ( ! pFnGetProviderCount )
		pFnGetProviderCount = (UFunction*) UObject::GObjObjects()->Data[ 34493 ];

	UUIDataStore_DynamicResource_execGetProviderCount_Parms GetProviderCount_Parms;
	memcpy ( &GetProviderCount_Parms.ProviderTag, &ProviderTag, 0x8 );

	pFnGetProviderCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProviderCount, &GetProviderCount_Parms, NULL );

	pFnGetProviderCount->FunctionFlags |= 0x400;

	return GetProviderCount_Parms.ReturnValue;
};

// Function Engine.UIDataStore_DynamicResource.GenerateProviderAccessTag
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProviderIndex                  ( CPF_Parm )
// int                            InstanceIndex                  ( CPF_Parm )

struct FName UUIDataStore_DynamicResource::GenerateProviderAccessTag ( int ProviderIndex, int InstanceIndex )
{
	static UFunction* pFnGenerateProviderAccessTag = NULL;

	if ( ! pFnGenerateProviderAccessTag )
		pFnGenerateProviderAccessTag = (UFunction*) UObject::GObjObjects()->Data[ 34489 ];

	UUIDataStore_DynamicResource_execGenerateProviderAccessTag_Parms GenerateProviderAccessTag_Parms;
	GenerateProviderAccessTag_Parms.ProviderIndex = ProviderIndex;
	GenerateProviderAccessTag_Parms.InstanceIndex = InstanceIndex;

	pFnGenerateProviderAccessTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGenerateProviderAccessTag, &GenerateProviderAccessTag_Parms, NULL );

	pFnGenerateProviderAccessTag->FunctionFlags |= 0x400;

	return GenerateProviderAccessTag_Parms.ReturnValue;
};

// Function Engine.UIDataStore_DynamicResource.FindProviderTypeIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )

int UUIDataStore_DynamicResource::FindProviderTypeIndex ( struct FName ProviderTag )
{
	static UFunction* pFnFindProviderTypeIndex = NULL;

	if ( ! pFnFindProviderTypeIndex )
		pFnFindProviderTypeIndex = (UFunction*) UObject::GObjObjects()->Data[ 34486 ];

	UUIDataStore_DynamicResource_execFindProviderTypeIndex_Parms FindProviderTypeIndex_Parms;
	memcpy ( &FindProviderTypeIndex_Parms.ProviderTag, &ProviderTag, 0x8 );

	pFnFindProviderTypeIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindProviderTypeIndex, &FindProviderTypeIndex_Parms, NULL );

	pFnFindProviderTypeIndex->FunctionFlags |= 0x400;

	return FindProviderTypeIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_GameResource.FindProviderIndexByFieldValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )
// struct FName                   SearchField                    ( CPF_Parm )
// struct FUIProviderScriptFieldValue ValueToSearchFor               ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int UUIDataStore_GameResource::FindProviderIndexByFieldValue ( struct FName ProviderTag, struct FName SearchField, struct FUIProviderScriptFieldValue* ValueToSearchFor )
{
	static UFunction* pFnFindProviderIndexByFieldValue = NULL;

	if ( ! pFnFindProviderIndexByFieldValue )
		pFnFindProviderIndexByFieldValue = (UFunction*) UObject::GObjObjects()->Data[ 34569 ];

	UUIDataStore_GameResource_execFindProviderIndexByFieldValue_Parms FindProviderIndexByFieldValue_Parms;
	memcpy ( &FindProviderIndexByFieldValue_Parms.ProviderTag, &ProviderTag, 0x8 );
	memcpy ( &FindProviderIndexByFieldValue_Parms.SearchField, &SearchField, 0x8 );

	pFnFindProviderIndexByFieldValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindProviderIndexByFieldValue, &FindProviderIndexByFieldValue_Parms, NULL );

	pFnFindProviderIndexByFieldValue->FunctionFlags |= 0x400;

	if ( ValueToSearchFor )
		memcpy ( ValueToSearchFor, &FindProviderIndexByFieldValue_Parms.ValueToSearchFor, 0x60 );

	return FindProviderIndexByFieldValue_Parms.ReturnValue;
};

// Function Engine.UIDataStore_GameResource.GetProviderFieldValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )
// struct FName                   SearchField                    ( CPF_Parm )
// int                            ProviderIndex                  ( CPF_Parm )
// struct FUIProviderScriptFieldValue out_FieldValue                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDataStore_GameResource::GetProviderFieldValue ( struct FName ProviderTag, struct FName SearchField, int ProviderIndex, struct FUIProviderScriptFieldValue* out_FieldValue )
{
	static UFunction* pFnGetProviderFieldValue = NULL;

	if ( ! pFnGetProviderFieldValue )
		pFnGetProviderFieldValue = (UFunction*) UObject::GObjObjects()->Data[ 34563 ];

	UUIDataStore_GameResource_execGetProviderFieldValue_Parms GetProviderFieldValue_Parms;
	memcpy ( &GetProviderFieldValue_Parms.ProviderTag, &ProviderTag, 0x8 );
	memcpy ( &GetProviderFieldValue_Parms.SearchField, &SearchField, 0x8 );
	GetProviderFieldValue_Parms.ProviderIndex = ProviderIndex;

	pFnGetProviderFieldValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProviderFieldValue, &GetProviderFieldValue_Parms, NULL );

	pFnGetProviderFieldValue->FunctionFlags |= 0x400;

	if ( out_FieldValue )
		memcpy ( out_FieldValue, &GetProviderFieldValue_Parms.out_FieldValue, 0x60 );

	return GetProviderFieldValue_Parms.ReturnValue;
};

// Function Engine.UIDataStore_GameResource.GetResourceProviderFields
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )
// struct TArray<struct FName>    ProviderFieldTags              ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDataStore_GameResource::GetResourceProviderFields ( struct FName ProviderTag, struct TArray<struct FName>* ProviderFieldTags )
{
	static UFunction* pFnGetResourceProviderFields = NULL;

	if ( ! pFnGetResourceProviderFields )
		pFnGetResourceProviderFields = (UFunction*) UObject::GObjObjects()->Data[ 34558 ];

	UUIDataStore_GameResource_execGetResourceProviderFields_Parms GetResourceProviderFields_Parms;
	memcpy ( &GetResourceProviderFields_Parms.ProviderTag, &ProviderTag, 0x8 );

	pFnGetResourceProviderFields->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResourceProviderFields, &GetResourceProviderFields_Parms, NULL );

	pFnGetResourceProviderFields->FunctionFlags |= 0x400;

	if ( ProviderFieldTags )
		memcpy ( ProviderFieldTags, &GetResourceProviderFields_Parms.ProviderFieldTags, 0x10 );

	return GetResourceProviderFields_Parms.ReturnValue;
};

// Function Engine.UIDataStore_GameResource.GetResourceProviders
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )
// struct TArray<class UUIResourceDataProvider*> out_Providers                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDataStore_GameResource::GetResourceProviders ( struct FName ProviderTag, struct TArray<class UUIResourceDataProvider*>* out_Providers )
{
	static UFunction* pFnGetResourceProviders = NULL;

	if ( ! pFnGetResourceProviders )
		pFnGetResourceProviders = (UFunction*) UObject::GObjObjects()->Data[ 34553 ];

	UUIDataStore_GameResource_execGetResourceProviders_Parms GetResourceProviders_Parms;
	memcpy ( &GetResourceProviders_Parms.ProviderTag, &ProviderTag, 0x8 );

	pFnGetResourceProviders->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResourceProviders, &GetResourceProviders_Parms, NULL );

	pFnGetResourceProviders->FunctionFlags |= 0x400;

	if ( out_Providers )
		memcpy ( out_Providers, &GetResourceProviders_Parms.out_Providers, 0x10 );

	return GetResourceProviders_Parms.ReturnValue;
};

// Function Engine.UIDataStore_GameResource.GetProviderCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )

int UUIDataStore_GameResource::GetProviderCount ( struct FName ProviderTag )
{
	static UFunction* pFnGetProviderCount = NULL;

	if ( ! pFnGetProviderCount )
		pFnGetProviderCount = (UFunction*) UObject::GObjObjects()->Data[ 34550 ];

	UUIDataStore_GameResource_execGetProviderCount_Parms GetProviderCount_Parms;
	memcpy ( &GetProviderCount_Parms.ProviderTag, &ProviderTag, 0x8 );

	pFnGetProviderCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProviderCount, &GetProviderCount_Parms, NULL );

	pFnGetProviderCount->FunctionFlags |= 0x400;

	return GetProviderCount_Parms.ReturnValue;
};

// Function Engine.UIDataStore_GameResource.GenerateProviderAccessTag
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProviderIndex                  ( CPF_Parm )
// int                            InstanceIndex                  ( CPF_Parm )

struct FName UUIDataStore_GameResource::GenerateProviderAccessTag ( int ProviderIndex, int InstanceIndex )
{
	static UFunction* pFnGenerateProviderAccessTag = NULL;

	if ( ! pFnGenerateProviderAccessTag )
		pFnGenerateProviderAccessTag = (UFunction*) UObject::GObjObjects()->Data[ 34546 ];

	UUIDataStore_GameResource_execGenerateProviderAccessTag_Parms GenerateProviderAccessTag_Parms;
	GenerateProviderAccessTag_Parms.ProviderIndex = ProviderIndex;
	GenerateProviderAccessTag_Parms.InstanceIndex = InstanceIndex;

	pFnGenerateProviderAccessTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGenerateProviderAccessTag, &GenerateProviderAccessTag_Parms, NULL );

	pFnGenerateProviderAccessTag->FunctionFlags |= 0x400;

	return GenerateProviderAccessTag_Parms.ReturnValue;
};

// Function Engine.UIDataStore_GameResource.FindProviderTypeIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )

int UUIDataStore_GameResource::FindProviderTypeIndex ( struct FName ProviderTag )
{
	static UFunction* pFnFindProviderTypeIndex = NULL;

	if ( ! pFnFindProviderTypeIndex )
		pFnFindProviderTypeIndex = (UFunction*) UObject::GObjObjects()->Data[ 34543 ];

	UUIDataStore_GameResource_execFindProviderTypeIndex_Parms FindProviderTypeIndex_Parms;
	memcpy ( &FindProviderTypeIndex_Parms.ProviderTag, &ProviderTag, 0x8 );

	pFnFindProviderTypeIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindProviderTypeIndex, &FindProviderTypeIndex_Parms, NULL );

	pFnFindProviderTypeIndex->FunctionFlags |= 0x400;

	return FindProviderTypeIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_MenuItems.Unregistered
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

void UUIDataStore_MenuItems::eventUnregistered ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnUnregistered = NULL;

	if ( ! pFnUnregistered )
		pFnUnregistered = (UFunction*) UObject::GObjObjects()->Data[ 34637 ];

	UUIDataStore_MenuItems_eventUnregistered_Parms Unregistered_Parms;
	Unregistered_Parms.PlayerOwner = PlayerOwner;

	this->ProcessEvent ( pFnUnregistered, &Unregistered_Parms, NULL );
};

// Function Engine.UIDataStore_MenuItems.Registered
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

void UUIDataStore_MenuItems::eventRegistered ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnRegistered = NULL;

	if ( ! pFnRegistered )
		pFnRegistered = (UFunction*) UObject::GObjObjects()->Data[ 34634 ];

	UUIDataStore_MenuItems_eventRegistered_Parms Registered_Parms;
	Registered_Parms.PlayerOwner = PlayerOwner;

	this->ProcessEvent ( pFnRegistered, &Registered_Parms, NULL );
};

// Function Engine.UIDataStore_MenuItems.OnGameSettingsChanged
// [0x00024002] 
// Parameters infos:
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// struct FName                   PropTag                        ( CPF_OptionalParm | CPF_Parm )

void UUIDataStore_MenuItems::OnGameSettingsChanged ( class UUIDataProvider* SourceProvider, struct FName PropTag )
{
	static UFunction* pFnOnGameSettingsChanged = NULL;

	if ( ! pFnOnGameSettingsChanged )
		pFnOnGameSettingsChanged = (UFunction*) UObject::GObjObjects()->Data[ 34629 ];

	UUIDataStore_MenuItems_execOnGameSettingsChanged_Parms OnGameSettingsChanged_Parms;
	OnGameSettingsChanged_Parms.SourceProvider = SourceProvider;
	memcpy ( &OnGameSettingsChanged_Parms.PropTag, &PropTag, 0x8 );

	this->ProcessEvent ( pFnOnGameSettingsChanged, &OnGameSettingsChanged_Parms, NULL );
};

// Function Engine.UIDataStore_MenuItems.GetSet
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FName                   SetName                        ( CPF_Parm )
// struct TArray<class UUIDataProvider_MenuItem*> OutProviders                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIDataStore_MenuItems::GetSet ( struct FName SetName, struct TArray<class UUIDataProvider_MenuItem*>* OutProviders )
{
	static UFunction* pFnGetSet = NULL;

	if ( ! pFnGetSet )
		pFnGetSet = (UFunction*) UObject::GObjObjects()->Data[ 34625 ];

	UUIDataStore_MenuItems_execGetSet_Parms GetSet_Parms;
	memcpy ( &GetSet_Parms.SetName, &SetName, 0x8 );

	pFnGetSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSet, &GetSet_Parms, NULL );

	pFnGetSet->FunctionFlags |= 0x400;

	if ( OutProviders )
		memcpy ( OutProviders, &GetSet_Parms.OutProviders, 0x10 );
};

// Function Engine.UIDataStore_MenuItems.AppendToSet
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   SetName                        ( CPF_Parm )
// int                            NumOptions                     ( CPF_Parm )

void UUIDataStore_MenuItems::AppendToSet ( struct FName SetName, int NumOptions )
{
	static UFunction* pFnAppendToSet = NULL;

	if ( ! pFnAppendToSet )
		pFnAppendToSet = (UFunction*) UObject::GObjObjects()->Data[ 34622 ];

	UUIDataStore_MenuItems_execAppendToSet_Parms AppendToSet_Parms;
	memcpy ( &AppendToSet_Parms.SetName, &SetName, 0x8 );
	AppendToSet_Parms.NumOptions = NumOptions;

	pFnAppendToSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAppendToSet, &AppendToSet_Parms, NULL );

	pFnAppendToSet->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStore_MenuItems.ClearSet
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   SetName                        ( CPF_Parm )

void UUIDataStore_MenuItems::ClearSet ( struct FName SetName )
{
	static UFunction* pFnClearSet = NULL;

	if ( ! pFnClearSet )
		pFnClearSet = (UFunction*) UObject::GObjObjects()->Data[ 34620 ];

	UUIDataStore_MenuItems_execClearSet_Parms ClearSet_Parms;
	memcpy ( &ClearSet_Parms.SetName, &SetName, 0x8 );

	pFnClearSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearSet, &ClearSet_Parms, NULL );

	pFnClearSet->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStore_GameState.NotifyGameSessionEnded
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDataStore_GameState::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 17990 ];

	UUIDataStore_GameState_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );

	return NotifyGameSessionEnded_Parms.ReturnValue;
};

// Function Engine.UIDataStore_GameState.OnRefreshDataFieldValue
// [0x00120000] 
// Parameters infos:

void UUIDataStore_GameState::OnRefreshDataFieldValue ( )
{
	static UFunction* pFnOnRefreshDataFieldValue = NULL;

	if ( ! pFnOnRefreshDataFieldValue )
		pFnOnRefreshDataFieldValue = (UFunction*) UObject::GObjObjects()->Data[ 17989 ];

	UUIDataStore_GameState_execOnRefreshDataFieldValue_Parms OnRefreshDataFieldValue_Parms;

	this->ProcessEvent ( pFnOnRefreshDataFieldValue, &OnRefreshDataFieldValue_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.OnAddTeamProvider
// [0x00120000] 
// Parameters infos:
// class UTeamDataProvider*       Provider                       ( CPF_Parm )

void UCurrentGameDataStore::OnAddTeamProvider ( class UTeamDataProvider* Provider )
{
	static UFunction* pFnOnAddTeamProvider = NULL;

	if ( ! pFnOnAddTeamProvider )
		pFnOnAddTeamProvider = (UFunction*) UObject::GObjObjects()->Data[ 18075 ];

	UCurrentGameDataStore_execOnAddTeamProvider_Parms OnAddTeamProvider_Parms;
	OnAddTeamProvider_Parms.Provider = Provider;

	this->ProcessEvent ( pFnOnAddTeamProvider, &OnAddTeamProvider_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.NotifyGameSessionEnded
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UCurrentGameDataStore::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 18073 ];

	UCurrentGameDataStore_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );

	return NotifyGameSessionEnded_Parms.ReturnValue;
};

// Function Engine.CurrentGameDataStore.RefreshTeamDataProviders
// [0x00020002] 
// Parameters infos:

void UCurrentGameDataStore::RefreshTeamDataProviders ( )
{
	static UFunction* pFnRefreshTeamDataProviders = NULL;

	if ( ! pFnRefreshTeamDataProviders )
		pFnRefreshTeamDataProviders = (UFunction*) UObject::GObjObjects()->Data[ 18071 ];

	UCurrentGameDataStore_execRefreshTeamDataProviders_Parms RefreshTeamDataProviders_Parms;

	this->ProcessEvent ( pFnRefreshTeamDataProviders, &RefreshTeamDataProviders_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.RefreshPlayerDataProviders
// [0x00020002] 
// Parameters infos:

void UCurrentGameDataStore::RefreshPlayerDataProviders ( )
{
	static UFunction* pFnRefreshPlayerDataProviders = NULL;

	if ( ! pFnRefreshPlayerDataProviders )
		pFnRefreshPlayerDataProviders = (UFunction*) UObject::GObjObjects()->Data[ 18070 ];

	UCurrentGameDataStore_execRefreshPlayerDataProviders_Parms RefreshPlayerDataProviders_Parms;

	this->ProcessEvent ( pFnRefreshPlayerDataProviders, &RefreshPlayerDataProviders_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.NotifyTeamChange
// [0x00020002] 
// Parameters infos:

void UCurrentGameDataStore::NotifyTeamChange ( )
{
	static UFunction* pFnNotifyTeamChange = NULL;

	if ( ! pFnNotifyTeamChange )
		pFnNotifyTeamChange = (UFunction*) UObject::GObjObjects()->Data[ 18069 ];

	UCurrentGameDataStore_execNotifyTeamChange_Parms NotifyTeamChange_Parms;

	this->ProcessEvent ( pFnNotifyTeamChange, &NotifyTeamChange_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.NotifyPlayersChanged
// [0x00020002] 
// Parameters infos:

void UCurrentGameDataStore::NotifyPlayersChanged ( )
{
	static UFunction* pFnNotifyPlayersChanged = NULL;

	if ( ! pFnNotifyPlayersChanged )
		pFnNotifyPlayersChanged = (UFunction*) UObject::GObjObjects()->Data[ 18068 ];

	UCurrentGameDataStore_execNotifyPlayersChanged_Parms NotifyPlayersChanged_Parms;

	this->ProcessEvent ( pFnNotifyPlayersChanged, &NotifyPlayersChanged_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.Timer
// [0x00020002] 
// Parameters infos:

void UCurrentGameDataStore::Timer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 18065 ];

	UCurrentGameDataStore_execTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.TeamDataProviderPropertyChange
// [0x00024002] 
// Parameters infos:
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// struct FName                   PropTag                        ( CPF_OptionalParm | CPF_Parm )

void UCurrentGameDataStore::TeamDataProviderPropertyChange ( class UUIDataProvider* SourceProvider, struct FName PropTag )
{
	static UFunction* pFnTeamDataProviderPropertyChange = NULL;

	if ( ! pFnTeamDataProviderPropertyChange )
		pFnTeamDataProviderPropertyChange = (UFunction*) UObject::GObjObjects()->Data[ 18058 ];

	UCurrentGameDataStore_execTeamDataProviderPropertyChange_Parms TeamDataProviderPropertyChange_Parms;
	TeamDataProviderPropertyChange_Parms.SourceProvider = SourceProvider;
	memcpy ( &TeamDataProviderPropertyChange_Parms.PropTag, &PropTag, 0x8 );

	this->ProcessEvent ( pFnTeamDataProviderPropertyChange, &TeamDataProviderPropertyChange_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.PlayerDataProviderPropertyChange
// [0x00024002] 
// Parameters infos:
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// struct FName                   PropTag                        ( CPF_OptionalParm | CPF_Parm )

void UCurrentGameDataStore::PlayerDataProviderPropertyChange ( class UUIDataProvider* SourceProvider, struct FName PropTag )
{
	static UFunction* pFnPlayerDataProviderPropertyChange = NULL;

	if ( ! pFnPlayerDataProviderPropertyChange )
		pFnPlayerDataProviderPropertyChange = (UFunction*) UObject::GObjObjects()->Data[ 18051 ];

	UCurrentGameDataStore_execPlayerDataProviderPropertyChange_Parms PlayerDataProviderPropertyChange_Parms;
	PlayerDataProviderPropertyChange_Parms.SourceProvider = SourceProvider;
	memcpy ( &PlayerDataProviderPropertyChange_Parms.PropTag, &PropTag, 0x8 );

	this->ProcessEvent ( pFnPlayerDataProviderPropertyChange, &PlayerDataProviderPropertyChange_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.ClearDataProviders
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UCurrentGameDataStore::ClearDataProviders ( )
{
	static UFunction* pFnClearDataProviders = NULL;

	if ( ! pFnClearDataProviders )
		pFnClearDataProviders = (UFunction*) UObject::GObjObjects()->Data[ 18049 ];

	UCurrentGameDataStore_execClearDataProviders_Parms ClearDataProviders_Parms;

	this->ProcessEvent ( pFnClearDataProviders, &ClearDataProviders_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.GetTeamDataProvider
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UTeamDataProvider*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATeamInfo*               TI                             ( CPF_Parm )

class UTeamDataProvider* UCurrentGameDataStore::GetTeamDataProvider ( class ATeamInfo* TI )
{
	static UFunction* pFnGetTeamDataProvider = NULL;

	if ( ! pFnGetTeamDataProvider )
		pFnGetTeamDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 18044 ];

	UCurrentGameDataStore_execGetTeamDataProvider_Parms GetTeamDataProvider_Parms;
	GetTeamDataProvider_Parms.TI = TI;

	this->ProcessEvent ( pFnGetTeamDataProvider, &GetTeamDataProvider_Parms, NULL );

	return GetTeamDataProvider_Parms.ReturnValue;
};

// Function Engine.CurrentGameDataStore.GetPlayerDataProvider
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UPlayerDataProvider*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

class UPlayerDataProvider* UCurrentGameDataStore::GetPlayerDataProvider ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnGetPlayerDataProvider = NULL;

	if ( ! pFnGetPlayerDataProvider )
		pFnGetPlayerDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 18039 ];

	UCurrentGameDataStore_execGetPlayerDataProvider_Parms GetPlayerDataProvider_Parms;
	GetPlayerDataProvider_Parms.PRI = PRI;

	this->ProcessEvent ( pFnGetPlayerDataProvider, &GetPlayerDataProvider_Parms, NULL );

	return GetPlayerDataProvider_Parms.ReturnValue;
};

// Function Engine.CurrentGameDataStore.FindTeamDataProviderIndex
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATeamInfo*               TI                             ( CPF_Parm )

int UCurrentGameDataStore::FindTeamDataProviderIndex ( class ATeamInfo* TI )
{
	static UFunction* pFnFindTeamDataProviderIndex = NULL;

	if ( ! pFnFindTeamDataProviderIndex )
		pFnFindTeamDataProviderIndex = (UFunction*) UObject::GObjObjects()->Data[ 18024 ];

	UCurrentGameDataStore_execFindTeamDataProviderIndex_Parms FindTeamDataProviderIndex_Parms;
	FindTeamDataProviderIndex_Parms.TI = TI;

	this->ProcessEvent ( pFnFindTeamDataProviderIndex, &FindTeamDataProviderIndex_Parms, NULL );

	return FindTeamDataProviderIndex_Parms.ReturnValue;
};

// Function Engine.CurrentGameDataStore.FindPlayerDataProviderIndex
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

int UCurrentGameDataStore::FindPlayerDataProviderIndex ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnFindPlayerDataProviderIndex = NULL;

	if ( ! pFnFindPlayerDataProviderIndex )
		pFnFindPlayerDataProviderIndex = (UFunction*) UObject::GObjObjects()->Data[ 18012 ];

	UCurrentGameDataStore_execFindPlayerDataProviderIndex_Parms FindPlayerDataProviderIndex_Parms;
	FindPlayerDataProviderIndex_Parms.PRI = PRI;

	this->ProcessEvent ( pFnFindPlayerDataProviderIndex, &FindPlayerDataProviderIndex_Parms, NULL );

	return FindPlayerDataProviderIndex_Parms.ReturnValue;
};

// Function Engine.CurrentGameDataStore.RemoveTeamDataProvider
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ATeamInfo*               TI                             ( CPF_Parm )

void UCurrentGameDataStore::RemoveTeamDataProvider ( class ATeamInfo* TI )
{
	static UFunction* pFnRemoveTeamDataProvider = NULL;

	if ( ! pFnRemoveTeamDataProvider )
		pFnRemoveTeamDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 18026 ];

	UCurrentGameDataStore_execRemoveTeamDataProvider_Parms RemoveTeamDataProvider_Parms;
	RemoveTeamDataProvider_Parms.TI = TI;

	this->ProcessEvent ( pFnRemoveTeamDataProvider, &RemoveTeamDataProvider_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.AddTeamDataProvider
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ATeamInfo*               TI                             ( CPF_Parm )

void UCurrentGameDataStore::AddTeamDataProvider ( class ATeamInfo* TI )
{
	static UFunction* pFnAddTeamDataProvider = NULL;

	if ( ! pFnAddTeamDataProvider )
		pFnAddTeamDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 18018 ];

	UCurrentGameDataStore_execAddTeamDataProvider_Parms AddTeamDataProvider_Parms;
	AddTeamDataProvider_Parms.TI = TI;

	this->ProcessEvent ( pFnAddTeamDataProvider, &AddTeamDataProvider_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.RemovePlayerDataProvider
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void UCurrentGameDataStore::RemovePlayerDataProvider ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnRemovePlayerDataProvider = NULL;

	if ( ! pFnRemovePlayerDataProvider )
		pFnRemovePlayerDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 18013 ];

	UCurrentGameDataStore_execRemovePlayerDataProvider_Parms RemovePlayerDataProvider_Parms;
	RemovePlayerDataProvider_Parms.PRI = PRI;

	this->ProcessEvent ( pFnRemovePlayerDataProvider, &RemovePlayerDataProvider_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.AddPlayerDataProvider
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void UCurrentGameDataStore::AddPlayerDataProvider ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnAddPlayerDataProvider = NULL;

	if ( ! pFnAddPlayerDataProvider )
		pFnAddPlayerDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 18007 ];

	UCurrentGameDataStore_execAddPlayerDataProvider_Parms AddPlayerDataProvider_Parms;
	AddPlayerDataProvider_Parms.PRI = PRI;

	this->ProcessEvent ( pFnAddPlayerDataProvider, &AddPlayerDataProvider_Parms, NULL );
};

// Function Engine.CurrentGameDataStore.CreateGameDataProvider
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AGameReplicationInfo*    GRI                            ( CPF_Parm )

void UCurrentGameDataStore::CreateGameDataProvider ( class AGameReplicationInfo* GRI )
{
	static UFunction* pFnCreateGameDataProvider = NULL;

	if ( ! pFnCreateGameDataProvider )
		pFnCreateGameDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 18001 ];

	UCurrentGameDataStore_execCreateGameDataProvider_Parms CreateGameDataProvider_Parms;
	CreateGameDataProvider_Parms.GRI = GRI;

	this->ProcessEvent ( pFnCreateGameDataProvider, &CreateGameDataProvider_Parms, NULL );
};

// Function Engine.PlayerOwnerDataStore.NotifyGameSessionEnded
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UPlayerOwnerDataStore::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 28341 ];

	UPlayerOwnerDataStore_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );

	return NotifyGameSessionEnded_Parms.ReturnValue;
};

// Function Engine.PlayerOwnerDataStore.ClearDataProviders
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UPlayerOwnerDataStore::ClearDataProviders ( )
{
	static UFunction* pFnClearDataProviders = NULL;

	if ( ! pFnClearDataProviders )
		pFnClearDataProviders = (UFunction*) UObject::GObjObjects()->Data[ 28338 ];

	UPlayerOwnerDataStore_execClearDataProviders_Parms ClearDataProviders_Parms;

	this->ProcessEvent ( pFnClearDataProviders, &ClearDataProviders_Parms, NULL );
};

// Function Engine.PlayerOwnerDataStore.SetPlayerDataProvider
// [0x00020002] 
// Parameters infos:
// class UPlayerDataProvider*     NewPlayerData                  ( CPF_Parm )

void UPlayerOwnerDataStore::SetPlayerDataProvider ( class UPlayerDataProvider* NewPlayerData )
{
	static UFunction* pFnSetPlayerDataProvider = NULL;

	if ( ! pFnSetPlayerDataProvider )
		pFnSetPlayerDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 28334 ];

	UPlayerOwnerDataStore_execSetPlayerDataProvider_Parms SetPlayerDataProvider_Parms;
	SetPlayerDataProvider_Parms.NewPlayerData = NewPlayerData;

	this->ProcessEvent ( pFnSetPlayerDataProvider, &SetPlayerDataProvider_Parms, NULL );
};

// Function Engine.UIDataStore_OnlinePlaylists.GetOnlinePlaylistProvider
// [0x00426002] 
// Parameters infos:
// class UOnlinePlaylistProvider* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )
// int                            PlaylistId                     ( CPF_Parm )
// int                            ProviderIndex                  ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

class UOnlinePlaylistProvider* UUIDataStore_OnlinePlaylists::GetOnlinePlaylistProvider ( struct FName ProviderTag, int PlaylistId, int* ProviderIndex )
{
	static UFunction* pFnGetOnlinePlaylistProvider = NULL;

	if ( ! pFnGetOnlinePlaylistProvider )
		pFnGetOnlinePlaylistProvider = (UFunction*) UObject::GObjObjects()->Data[ 34843 ];

	UUIDataStore_OnlinePlaylists_execGetOnlinePlaylistProvider_Parms GetOnlinePlaylistProvider_Parms;
	memcpy ( &GetOnlinePlaylistProvider_Parms.ProviderTag, &ProviderTag, 0x8 );
	GetOnlinePlaylistProvider_Parms.PlaylistId = PlaylistId;

	this->ProcessEvent ( pFnGetOnlinePlaylistProvider, &GetOnlinePlaylistProvider_Parms, NULL );

	if ( ProviderIndex )
		*ProviderIndex = GetOnlinePlaylistProvider_Parms.ProviderIndex;

	return GetOnlinePlaylistProvider_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlinePlaylists.GetPlaylistProvider
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )
// int                            ProviderIndex                  ( CPF_Parm )
// class UUIResourceDataProvider* out_Provider                   ( CPF_Parm | CPF_OutParm )

bool UUIDataStore_OnlinePlaylists::GetPlaylistProvider ( struct FName ProviderTag, int ProviderIndex, class UUIResourceDataProvider** out_Provider )
{
	static UFunction* pFnGetPlaylistProvider = NULL;

	if ( ! pFnGetPlaylistProvider )
		pFnGetPlaylistProvider = (UFunction*) UObject::GObjObjects()->Data[ 34838 ];

	UUIDataStore_OnlinePlaylists_execGetPlaylistProvider_Parms GetPlaylistProvider_Parms;
	memcpy ( &GetPlaylistProvider_Parms.ProviderTag, &ProviderTag, 0x8 );
	GetPlaylistProvider_Parms.ProviderIndex = ProviderIndex;

	pFnGetPlaylistProvider->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlaylistProvider, &GetPlaylistProvider_Parms, NULL );

	pFnGetPlaylistProvider->FunctionFlags |= 0x400;

	if ( out_Provider )
		*out_Provider = GetPlaylistProvider_Parms.out_Provider;

	return GetPlaylistProvider_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlinePlaylists.FindProviderIndexByFieldValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )
// struct FName                   SearchField                    ( CPF_Parm )
// struct FUIProviderScriptFieldValue ValueToSearchFor               ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int UUIDataStore_OnlinePlaylists::FindProviderIndexByFieldValue ( struct FName ProviderTag, struct FName SearchField, struct FUIProviderScriptFieldValue* ValueToSearchFor )
{
	static UFunction* pFnFindProviderIndexByFieldValue = NULL;

	if ( ! pFnFindProviderIndexByFieldValue )
		pFnFindProviderIndexByFieldValue = (UFunction*) UObject::GObjObjects()->Data[ 34833 ];

	UUIDataStore_OnlinePlaylists_execFindProviderIndexByFieldValue_Parms FindProviderIndexByFieldValue_Parms;
	memcpy ( &FindProviderIndexByFieldValue_Parms.ProviderTag, &ProviderTag, 0x8 );
	memcpy ( &FindProviderIndexByFieldValue_Parms.SearchField, &SearchField, 0x8 );

	pFnFindProviderIndexByFieldValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindProviderIndexByFieldValue, &FindProviderIndexByFieldValue_Parms, NULL );

	pFnFindProviderIndexByFieldValue->FunctionFlags |= 0x400;

	if ( ValueToSearchFor )
		memcpy ( ValueToSearchFor, &FindProviderIndexByFieldValue_Parms.ValueToSearchFor, 0x60 );

	return FindProviderIndexByFieldValue_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlinePlaylists.GetProviderFieldValue
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )
// struct FName                   SearchField                    ( CPF_Parm )
// int                            ProviderIndex                  ( CPF_Parm )
// struct FUIProviderScriptFieldValue out_FieldValue                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDataStore_OnlinePlaylists::GetProviderFieldValue ( struct FName ProviderTag, struct FName SearchField, int ProviderIndex, struct FUIProviderScriptFieldValue* out_FieldValue )
{
	static UFunction* pFnGetProviderFieldValue = NULL;

	if ( ! pFnGetProviderFieldValue )
		pFnGetProviderFieldValue = (UFunction*) UObject::GObjObjects()->Data[ 34827 ];

	UUIDataStore_OnlinePlaylists_execGetProviderFieldValue_Parms GetProviderFieldValue_Parms;
	memcpy ( &GetProviderFieldValue_Parms.ProviderTag, &ProviderTag, 0x8 );
	memcpy ( &GetProviderFieldValue_Parms.SearchField, &SearchField, 0x8 );
	GetProviderFieldValue_Parms.ProviderIndex = ProviderIndex;

	pFnGetProviderFieldValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProviderFieldValue, &GetProviderFieldValue_Parms, NULL );

	pFnGetProviderFieldValue->FunctionFlags |= 0x400;

	if ( out_FieldValue )
		memcpy ( out_FieldValue, &GetProviderFieldValue_Parms.out_FieldValue, 0x60 );

	return GetProviderFieldValue_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlinePlaylists.GetResourceProviderFields
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )
// struct TArray<struct FName>    ProviderFieldTags              ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDataStore_OnlinePlaylists::GetResourceProviderFields ( struct FName ProviderTag, struct TArray<struct FName>* ProviderFieldTags )
{
	static UFunction* pFnGetResourceProviderFields = NULL;

	if ( ! pFnGetResourceProviderFields )
		pFnGetResourceProviderFields = (UFunction*) UObject::GObjObjects()->Data[ 34822 ];

	UUIDataStore_OnlinePlaylists_execGetResourceProviderFields_Parms GetResourceProviderFields_Parms;
	memcpy ( &GetResourceProviderFields_Parms.ProviderTag, &ProviderTag, 0x8 );

	pFnGetResourceProviderFields->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResourceProviderFields, &GetResourceProviderFields_Parms, NULL );

	pFnGetResourceProviderFields->FunctionFlags |= 0x400;

	if ( ProviderFieldTags )
		memcpy ( ProviderFieldTags, &GetResourceProviderFields_Parms.ProviderFieldTags, 0x10 );

	return GetResourceProviderFields_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlinePlaylists.GetResourceProviders
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )
// struct TArray<class UUIResourceDataProvider*> out_Providers                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDataStore_OnlinePlaylists::GetResourceProviders ( struct FName ProviderTag, struct TArray<class UUIResourceDataProvider*>* out_Providers )
{
	static UFunction* pFnGetResourceProviders = NULL;

	if ( ! pFnGetResourceProviders )
		pFnGetResourceProviders = (UFunction*) UObject::GObjObjects()->Data[ 34817 ];

	UUIDataStore_OnlinePlaylists_execGetResourceProviders_Parms GetResourceProviders_Parms;
	memcpy ( &GetResourceProviders_Parms.ProviderTag, &ProviderTag, 0x8 );

	pFnGetResourceProviders->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResourceProviders, &GetResourceProviders_Parms, NULL );

	pFnGetResourceProviders->FunctionFlags |= 0x400;

	if ( out_Providers )
		memcpy ( out_Providers, &GetResourceProviders_Parms.out_Providers, 0x10 );

	return GetResourceProviders_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlinePlaylists.GetProviderCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )

int UUIDataStore_OnlinePlaylists::GetProviderCount ( struct FName ProviderTag )
{
	static UFunction* pFnGetProviderCount = NULL;

	if ( ! pFnGetProviderCount )
		pFnGetProviderCount = (UFunction*) UObject::GObjObjects()->Data[ 34814 ];

	UUIDataStore_OnlinePlaylists_execGetProviderCount_Parms GetProviderCount_Parms;
	memcpy ( &GetProviderCount_Parms.ProviderTag, &ProviderTag, 0x8 );

	pFnGetProviderCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProviderCount, &GetProviderCount_Parms, NULL );

	pFnGetProviderCount->FunctionFlags |= 0x400;

	return GetProviderCount_Parms.ReturnValue;
};

// Function Engine.UIDataStore_Registry.GetDataProvider
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UUIDynamicFieldProvider* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIDynamicFieldProvider* UUIDataStore_Registry::GetDataProvider ( )
{
	static UFunction* pFnGetDataProvider = NULL;

	if ( ! pFnGetDataProvider )
		pFnGetDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 21975 ];

	UUIDataStore_Registry_execGetDataProvider_Parms GetDataProvider_Parms;

	this->ProcessEvent ( pFnGetDataProvider, &GetDataProvider_Parms, NULL );

	return GetDataProvider_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.ClearAllSearchResults
// [0x00020002] 
// Parameters infos:

void UUIDataStore_OnlineGameSearch::ClearAllSearchResults ( )
{
	static UFunction* pFnClearAllSearchResults = NULL;

	if ( ! pFnClearAllSearchResults )
		pFnClearAllSearchResults = (UFunction*) UObject::GObjObjects()->Data[ 34702 ];

	UUIDataStore_OnlineGameSearch_execClearAllSearchResults_Parms ClearAllSearchResults_Parms;

	this->ProcessEvent ( pFnClearAllSearchResults, &ClearAllSearchResults_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSearch.MoveToPrevious
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bInvalidateExistingSearchResults ( CPF_OptionalParm | CPF_Parm )

void UUIDataStore_OnlineGameSearch::eventMoveToPrevious ( unsigned long bInvalidateExistingSearchResults )
{
	static UFunction* pFnMoveToPrevious = NULL;

	if ( ! pFnMoveToPrevious )
		pFnMoveToPrevious = (UFunction*) UObject::GObjObjects()->Data[ 34700 ];

	UUIDataStore_OnlineGameSearch_eventMoveToPrevious_Parms MoveToPrevious_Parms;
	MoveToPrevious_Parms.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	this->ProcessEvent ( pFnMoveToPrevious, &MoveToPrevious_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSearch.MoveToNext
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bInvalidateExistingSearchResults ( CPF_OptionalParm | CPF_Parm )

void UUIDataStore_OnlineGameSearch::eventMoveToNext ( unsigned long bInvalidateExistingSearchResults )
{
	static UFunction* pFnMoveToNext = NULL;

	if ( ! pFnMoveToNext )
		pFnMoveToNext = (UFunction*) UObject::GObjObjects()->Data[ 34698 ];

	UUIDataStore_OnlineGameSearch_eventMoveToNext_Parms MoveToNext_Parms;
	MoveToNext_Parms.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	this->ProcessEvent ( pFnMoveToNext, &MoveToNext_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByName
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// struct FName                   SearchName                     ( CPF_Parm )
// unsigned long                  bInvalidateExistingSearchResults ( CPF_OptionalParm | CPF_Parm )

void UUIDataStore_OnlineGameSearch::eventSetCurrentByName ( struct FName SearchName, unsigned long bInvalidateExistingSearchResults )
{
	static UFunction* pFnSetCurrentByName = NULL;

	if ( ! pFnSetCurrentByName )
		pFnSetCurrentByName = (UFunction*) UObject::GObjObjects()->Data[ 34694 ];

	UUIDataStore_OnlineGameSearch_eventSetCurrentByName_Parms SetCurrentByName_Parms;
	memcpy ( &SetCurrentByName_Parms.SearchName, &SearchName, 0x8 );
	SetCurrentByName_Parms.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	this->ProcessEvent ( pFnSetCurrentByName, &SetCurrentByName_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByIndex
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            NewIndex                       ( CPF_Parm )
// unsigned long                  bInvalidateExistingSearchResults ( CPF_OptionalParm | CPF_Parm )

void UUIDataStore_OnlineGameSearch::eventSetCurrentByIndex ( int NewIndex, unsigned long bInvalidateExistingSearchResults )
{
	static UFunction* pFnSetCurrentByIndex = NULL;

	if ( ! pFnSetCurrentByIndex )
		pFnSetCurrentByIndex = (UFunction*) UObject::GObjObjects()->Data[ 34691 ];

	UUIDataStore_OnlineGameSearch_eventSetCurrentByIndex_Parms SetCurrentByIndex_Parms;
	SetCurrentByIndex_Parms.NewIndex = NewIndex;
	SetCurrentByIndex_Parms.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	this->ProcessEvent ( pFnSetCurrentByIndex, &SetCurrentByIndex_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSearch.FindSearchConfigurationIndex
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SearchTag                      ( CPF_Parm )

int UUIDataStore_OnlineGameSearch::FindSearchConfigurationIndex ( struct FName SearchTag )
{
	static UFunction* pFnFindSearchConfigurationIndex = NULL;

	if ( ! pFnFindSearchConfigurationIndex )
		pFnFindSearchConfigurationIndex = (UFunction*) UObject::GObjObjects()->Data[ 34687 ];

	UUIDataStore_OnlineGameSearch_execFindSearchConfigurationIndex_Parms FindSearchConfigurationIndex_Parms;
	memcpy ( &FindSearchConfigurationIndex_Parms.SearchTag, &SearchTag, 0x8 );

	this->ProcessEvent ( pFnFindSearchConfigurationIndex, &FindSearchConfigurationIndex_Parms, NULL );

	return FindSearchConfigurationIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.GetActiveGameSearch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UOnlineGameSearch*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineGameSearch* UUIDataStore_OnlineGameSearch::eventGetActiveGameSearch ( )
{
	static UFunction* pFnGetActiveGameSearch = NULL;

	if ( ! pFnGetActiveGameSearch )
		pFnGetActiveGameSearch = (UFunction*) UObject::GObjObjects()->Data[ 34685 ];

	UUIDataStore_OnlineGameSearch_eventGetActiveGameSearch_Parms GetActiveGameSearch_Parms;

	this->ProcessEvent ( pFnGetActiveGameSearch, &GetActiveGameSearch_Parms, NULL );

	return GetActiveGameSearch_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.GetCurrentGameSearch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UOnlineGameSearch*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineGameSearch* UUIDataStore_OnlineGameSearch::eventGetCurrentGameSearch ( )
{
	static UFunction* pFnGetCurrentGameSearch = NULL;

	if ( ! pFnGetCurrentGameSearch )
		pFnGetCurrentGameSearch = (UFunction*) UObject::GObjObjects()->Data[ 34683 ];

	UUIDataStore_OnlineGameSearch_eventGetCurrentGameSearch_Parms GetCurrentGameSearch_Parms;

	this->ProcessEvent ( pFnGetCurrentGameSearch, &GetCurrentGameSearch_Parms, NULL );

	return GetCurrentGameSearch_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.BuildSearchResults
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIDataStore_OnlineGameSearch::BuildSearchResults ( )
{
	static UFunction* pFnBuildSearchResults = NULL;

	if ( ! pFnBuildSearchResults )
		pFnBuildSearchResults = (UFunction*) UObject::GObjObjects()->Data[ 34682 ];

	UUIDataStore_OnlineGameSearch_execBuildSearchResults_Parms BuildSearchResults_Parms;

	pFnBuildSearchResults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBuildSearchResults, &BuildSearchResults_Parms, NULL );

	pFnBuildSearchResults->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStore_OnlineGameSearch.ShowHostGamercard
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ControllerIndex                ( CPF_Parm )
// int                            ListIndex                      ( CPF_Parm )

bool UUIDataStore_OnlineGameSearch::eventShowHostGamercard ( unsigned char ControllerIndex, int ListIndex )
{
	static UFunction* pFnShowHostGamercard = NULL;

	if ( ! pFnShowHostGamercard )
		pFnShowHostGamercard = (UFunction*) UObject::GObjObjects()->Data[ 34676 ];

	UUIDataStore_OnlineGameSearch_eventShowHostGamercard_Parms ShowHostGamercard_Parms;
	ShowHostGamercard_Parms.ControllerIndex = ControllerIndex;
	ShowHostGamercard_Parms.ListIndex = ListIndex;

	this->ProcessEvent ( pFnShowHostGamercard, &ShowHostGamercard_Parms, NULL );

	return ShowHostGamercard_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.GetSearchResultFromIndex
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ListIndex                      ( CPF_Parm )
// struct FOnlineGameSearchResult Result                         ( CPF_Parm | CPF_OutParm )

bool UUIDataStore_OnlineGameSearch::eventGetSearchResultFromIndex ( int ListIndex, struct FOnlineGameSearchResult* Result )
{
	static UFunction* pFnGetSearchResultFromIndex = NULL;

	if ( ! pFnGetSearchResultFromIndex )
		pFnGetSearchResultFromIndex = (UFunction*) UObject::GObjObjects()->Data[ 34672 ];

	UUIDataStore_OnlineGameSearch_eventGetSearchResultFromIndex_Parms GetSearchResultFromIndex_Parms;
	GetSearchResultFromIndex_Parms.ListIndex = ListIndex;

	this->ProcessEvent ( pFnGetSearchResultFromIndex, &GetSearchResultFromIndex_Parms, NULL );

	if ( Result )
		memcpy ( Result, &GetSearchResultFromIndex_Parms.Result, 0x10 );

	return GetSearchResultFromIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.OnSearchComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UUIDataStore_OnlineGameSearch::OnSearchComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnSearchComplete = NULL;

	if ( ! pFnOnSearchComplete )
		pFnOnSearchComplete = (UFunction*) UObject::GObjObjects()->Data[ 34670 ];

	UUIDataStore_OnlineGameSearch_execOnSearchComplete_Parms OnSearchComplete_Parms;
	OnSearchComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnSearchComplete, &OnSearchComplete_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSearch.OverrideQuerySubmission
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ControllerId                   ( CPF_Parm )
// class UOnlineGameSearch*       Search                         ( CPF_Parm )

bool UUIDataStore_OnlineGameSearch::OverrideQuerySubmission ( unsigned char ControllerId, class UOnlineGameSearch* Search )
{
	static UFunction* pFnOverrideQuerySubmission = NULL;

	if ( ! pFnOverrideQuerySubmission )
		pFnOverrideQuerySubmission = (UFunction*) UObject::GObjObjects()->Data[ 34666 ];

	UUIDataStore_OnlineGameSearch_execOverrideQuerySubmission_Parms OverrideQuerySubmission_Parms;
	OverrideQuerySubmission_Parms.ControllerId = ControllerId;
	OverrideQuerySubmission_Parms.Search = Search;

	this->ProcessEvent ( pFnOverrideQuerySubmission, &OverrideQuerySubmission_Parms, NULL );

	return OverrideQuerySubmission_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.SubmitGameSearch
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ControllerIndex                ( CPF_Parm )
// unsigned long                  bInvalidateExistingSearchResults ( CPF_OptionalParm | CPF_Parm )

bool UUIDataStore_OnlineGameSearch::eventSubmitGameSearch ( unsigned char ControllerIndex, unsigned long bInvalidateExistingSearchResults )
{
	static UFunction* pFnSubmitGameSearch = NULL;

	if ( ! pFnSubmitGameSearch )
		pFnSubmitGameSearch = (UFunction*) UObject::GObjObjects()->Data[ 34661 ];

	UUIDataStore_OnlineGameSearch_eventSubmitGameSearch_Parms SubmitGameSearch_Parms;
	SubmitGameSearch_Parms.ControllerIndex = ControllerIndex;
	SubmitGameSearch_Parms.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	this->ProcessEvent ( pFnSubmitGameSearch, &SubmitGameSearch_Parms, NULL );

	return SubmitGameSearch_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.InvalidateCurrentSearchResults
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDataStore_OnlineGameSearch::InvalidateCurrentSearchResults ( )
{
	static UFunction* pFnInvalidateCurrentSearchResults = NULL;

	if ( ! pFnInvalidateCurrentSearchResults )
		pFnInvalidateCurrentSearchResults = (UFunction*) UObject::GObjObjects()->Data[ 34655 ];

	UUIDataStore_OnlineGameSearch_execInvalidateCurrentSearchResults_Parms InvalidateCurrentSearchResults_Parms;

	this->ProcessEvent ( pFnInvalidateCurrentSearchResults, &InvalidateCurrentSearchResults_Parms, NULL );

	return InvalidateCurrentSearchResults_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.Init
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataStore_OnlineGameSearch::eventInit ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 34652 ];

	UUIDataStore_OnlineGameSearch_eventInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Engine.UIDataStore_OnlinePlayerData.GetCachedPlayerStorage
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UOnlinePlayerStorage*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

class UOnlinePlayerStorage* UUIDataStore_OnlinePlayerData::eventGetCachedPlayerStorage ( int ControllerId )
{
	static UFunction* pFnGetCachedPlayerStorage = NULL;

	if ( ! pFnGetCachedPlayerStorage )
		pFnGetCachedPlayerStorage = (UFunction*) UObject::GObjObjects()->Data[ 34784 ];

	UUIDataStore_OnlinePlayerData_eventGetCachedPlayerStorage_Parms GetCachedPlayerStorage_Parms;
	GetCachedPlayerStorage_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnGetCachedPlayerStorage, &GetCachedPlayerStorage_Parms, NULL );

	return GetCachedPlayerStorage_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlinePlayerData.GetCachedPlayerProfile
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UOnlineProfileSettings*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

class UOnlineProfileSettings* UUIDataStore_OnlinePlayerData::eventGetCachedPlayerProfile ( int ControllerId )
{
	static UFunction* pFnGetCachedPlayerProfile = NULL;

	if ( ! pFnGetCachedPlayerProfile )
		pFnGetCachedPlayerProfile = (UFunction*) UObject::GObjObjects()->Data[ 34778 ];

	UUIDataStore_OnlinePlayerData_eventGetCachedPlayerProfile_Parms GetCachedPlayerProfile_Parms;
	GetCachedPlayerProfile_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnGetCachedPlayerProfile, &GetCachedPlayerProfile_Parms, NULL );

	return GetCachedPlayerProfile_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlinePlayerData.SaveProfileData
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDataStore_OnlinePlayerData::eventSaveProfileData ( )
{
	static UFunction* pFnSaveProfileData = NULL;

	if ( ! pFnSaveProfileData )
		pFnSaveProfileData = (UFunction*) UObject::GObjObjects()->Data[ 34776 ];

	UUIDataStore_OnlinePlayerData_eventSaveProfileData_Parms SaveProfileData_Parms;

	this->ProcessEvent ( pFnSaveProfileData, &SaveProfileData_Parms, NULL );

	return SaveProfileData_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlinePlayerData.OnDownloadableContentQueryDone
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UUIDataStore_OnlinePlayerData::OnDownloadableContentQueryDone ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDownloadableContentQueryDone = NULL;

	if ( ! pFnOnDownloadableContentQueryDone )
		pFnOnDownloadableContentQueryDone = (UFunction*) UObject::GObjObjects()->Data[ 34773 ];

	UUIDataStore_OnlinePlayerData_execOnDownloadableContentQueryDone_Parms OnDownloadableContentQueryDone_Parms;
	OnDownloadableContentQueryDone_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDownloadableContentQueryDone, &OnDownloadableContentQueryDone_Parms, NULL );
};

// Function Engine.UIDataStore_OnlinePlayerData.ClearDelegates
// [0x00020002] 
// Parameters infos:

void UUIDataStore_OnlinePlayerData::ClearDelegates ( )
{
	static UFunction* pFnClearDelegates = NULL;

	if ( ! pFnClearDelegates )
		pFnClearDelegates = (UFunction*) UObject::GObjObjects()->Data[ 34772 ];

	UUIDataStore_OnlinePlayerData_execClearDelegates_Parms ClearDelegates_Parms;

	this->ProcessEvent ( pFnClearDelegates, &ClearDelegates_Parms, NULL );
};

// Function Engine.UIDataStore_OnlinePlayerData.RegisterDelegates
// [0x00020002] 
// Parameters infos:

void UUIDataStore_OnlinePlayerData::RegisterDelegates ( )
{
	static UFunction* pFnRegisterDelegates = NULL;

	if ( ! pFnRegisterDelegates )
		pFnRegisterDelegates = (UFunction*) UObject::GObjObjects()->Data[ 34765 ];

	UUIDataStore_OnlinePlayerData_execRegisterDelegates_Parms RegisterDelegates_Parms;

	this->ProcessEvent ( pFnRegisterDelegates, &RegisterDelegates_Parms, NULL );
};

// Function Engine.UIDataStore_OnlinePlayerData.OnPlayerDataChange
// [0x00020002] 
// Parameters infos:

void UUIDataStore_OnlinePlayerData::OnPlayerDataChange ( )
{
	static UFunction* pFnOnPlayerDataChange = NULL;

	if ( ! pFnOnPlayerDataChange )
		pFnOnPlayerDataChange = (UFunction*) UObject::GObjObjects()->Data[ 34763 ];

	UUIDataStore_OnlinePlayerData_execOnPlayerDataChange_Parms OnPlayerDataChange_Parms;

	this->ProcessEvent ( pFnOnPlayerDataChange, &OnPlayerDataChange_Parms, NULL );
};

// Function Engine.UIDataStore_OnlinePlayerData.OnLoginChange
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UUIDataStore_OnlinePlayerData::OnLoginChange ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 34756 ];

	UUIDataStore_OnlinePlayerData_execOnLoginChange_Parms OnLoginChange_Parms;
	OnLoginChange_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.UIDataStore_OnlinePlayerData.OnUnregister
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataStore_OnlinePlayerData::eventOnUnregister ( )
{
	static UFunction* pFnOnUnregister = NULL;

	if ( ! pFnOnUnregister )
		pFnOnUnregister = (UFunction*) UObject::GObjObjects()->Data[ 34753 ];

	UUIDataStore_OnlinePlayerData_eventOnUnregister_Parms OnUnregister_Parms;

	this->ProcessEvent ( pFnOnUnregister, &OnUnregister_Parms, NULL );
};

// Function Engine.UIDataStore_OnlinePlayerData.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataStore_OnlinePlayerData::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = (UFunction*) UObject::GObjObjects()->Data[ 34748 ];

	UUIDataStore_OnlinePlayerData_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataStore_OnlinePlayerData.OnSettingProviderChanged
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// struct FName                   SettingsName                   ( CPF_OptionalParm | CPF_Parm )

void UUIDataStore_OnlinePlayerData::OnSettingProviderChanged ( class UUIDataProvider* SourceProvider, struct FName SettingsName )
{
	static UFunction* pFnOnSettingProviderChanged = NULL;

	if ( ! pFnOnSettingProviderChanged )
		pFnOnSettingProviderChanged = (UFunction*) UObject::GObjObjects()->Data[ 34745 ];

	UUIDataStore_OnlinePlayerData_execOnSettingProviderChanged_Parms OnSettingProviderChanged_Parms;
	OnSettingProviderChanged_Parms.SourceProvider = SourceProvider;
	memcpy ( &OnSettingProviderChanged_Parms.SettingsName, &SettingsName, 0x8 );

	pFnOnSettingProviderChanged->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnSettingProviderChanged, &OnSettingProviderChanged_Parms, NULL );

	pFnOnSettingProviderChanged->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStore_OnlineStats.SortResultsByRank
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIDataStore_OnlineStats::SortResultsByRank ( )
{
	static UFunction* pFnSortResultsByRank = NULL;

	if ( ! pFnSortResultsByRank )
		pFnSortResultsByRank = (UFunction*) UObject::GObjObjects()->Data[ 34887 ];

	UUIDataStore_OnlineStats_execSortResultsByRank_Parms SortResultsByRank_Parms;

	pFnSortResultsByRank->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSortResultsByRank, &SortResultsByRank_Parms, NULL );

	pFnSortResultsByRank->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStore_OnlineStats.OnReadComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UUIDataStore_OnlineStats::OnReadComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadComplete = NULL;

	if ( ! pFnOnReadComplete )
		pFnOnReadComplete = (UFunction*) UObject::GObjObjects()->Data[ 34885 ];

	UUIDataStore_OnlineStats_execOnReadComplete_Parms OnReadComplete_Parms;
	OnReadComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadComplete, &OnReadComplete_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineStats.ShowGamercard
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ConrollerIndex                 ( CPF_Parm )
// int                            ListIndex                      ( CPF_Parm )

bool UUIDataStore_OnlineStats::eventShowGamercard ( unsigned char ConrollerIndex, int ListIndex )
{
	static UFunction* pFnShowGamercard = NULL;

	if ( ! pFnShowGamercard )
		pFnShowGamercard = (UFunction*) UObject::GObjObjects()->Data[ 34878 ];

	UUIDataStore_OnlineStats_eventShowGamercard_Parms ShowGamercard_Parms;
	ShowGamercard_Parms.ConrollerIndex = ConrollerIndex;
	ShowGamercard_Parms.ListIndex = ListIndex;

	this->ProcessEvent ( pFnShowGamercard, &ShowGamercard_Parms, NULL );

	return ShowGamercard_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineStats.RefreshStats
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ControllerIndex                ( CPF_Parm )

bool UUIDataStore_OnlineStats::eventRefreshStats ( unsigned char ControllerIndex )
{
	static UFunction* pFnRefreshStats = NULL;

	if ( ! pFnRefreshStats )
		pFnRefreshStats = (UFunction*) UObject::GObjObjects()->Data[ 34872 ];

	UUIDataStore_OnlineStats_eventRefreshStats_Parms RefreshStats_Parms;
	RefreshStats_Parms.ControllerIndex = ControllerIndex;

	this->ProcessEvent ( pFnRefreshStats, &RefreshStats_Parms, NULL );

	return RefreshStats_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineStats.SetStatsReadInfo
// [0x00020002] 
// Parameters infos:

void UUIDataStore_OnlineStats::SetStatsReadInfo ( )
{
	static UFunction* pFnSetStatsReadInfo = NULL;

	if ( ! pFnSetStatsReadInfo )
		pFnSetStatsReadInfo = (UFunction*) UObject::GObjObjects()->Data[ 34869 ];

	UUIDataStore_OnlineStats_execSetStatsReadInfo_Parms SetStatsReadInfo_Parms;

	this->ProcessEvent ( pFnSetStatsReadInfo, &SetStatsReadInfo_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineStats.Init
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataStore_OnlineStats::eventInit ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 34865 ];

	UUIDataStore_OnlineStats_eventInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSettings.Unregistered
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

void UUIDataStore_OnlineGameSettings::eventUnregistered ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnUnregistered = NULL;

	if ( ! pFnUnregistered )
		pFnUnregistered = (UFunction*) UObject::GObjObjects()->Data[ 34740 ];

	UUIDataStore_OnlineGameSettings_eventUnregistered_Parms Unregistered_Parms;
	Unregistered_Parms.PlayerOwner = PlayerOwner;

	this->ProcessEvent ( pFnUnregistered, &Unregistered_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSettings.Registered
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

void UUIDataStore_OnlineGameSettings::eventRegistered ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnRegistered = NULL;

	if ( ! pFnRegistered )
		pFnRegistered = (UFunction*) UObject::GObjObjects()->Data[ 34736 ];

	UUIDataStore_OnlineGameSettings_eventRegistered_Parms Registered_Parms;
	Registered_Parms.PlayerOwner = PlayerOwner;

	this->ProcessEvent ( pFnRegistered, &Registered_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSettings.MoveToPrevious
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataStore_OnlineGameSettings::eventMoveToPrevious ( )
{
	static UFunction* pFnMoveToPrevious = NULL;

	if ( ! pFnMoveToPrevious )
		pFnMoveToPrevious = (UFunction*) UObject::GObjObjects()->Data[ 34734 ];

	UUIDataStore_OnlineGameSettings_eventMoveToPrevious_Parms MoveToPrevious_Parms;

	this->ProcessEvent ( pFnMoveToPrevious, &MoveToPrevious_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSettings.MoveToNext
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataStore_OnlineGameSettings::eventMoveToNext ( )
{
	static UFunction* pFnMoveToNext = NULL;

	if ( ! pFnMoveToNext )
		pFnMoveToNext = (UFunction*) UObject::GObjObjects()->Data[ 34732 ];

	UUIDataStore_OnlineGameSettings_eventMoveToNext_Parms MoveToNext_Parms;

	this->ProcessEvent ( pFnMoveToNext, &MoveToNext_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByName
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   SettingsName                   ( CPF_Parm )

void UUIDataStore_OnlineGameSettings::eventSetCurrentByName ( struct FName SettingsName )
{
	static UFunction* pFnSetCurrentByName = NULL;

	if ( ! pFnSetCurrentByName )
		pFnSetCurrentByName = (UFunction*) UObject::GObjObjects()->Data[ 34729 ];

	UUIDataStore_OnlineGameSettings_eventSetCurrentByName_Parms SetCurrentByName_Parms;
	memcpy ( &SetCurrentByName_Parms.SettingsName, &SettingsName, 0x8 );

	this->ProcessEvent ( pFnSetCurrentByName, &SetCurrentByName_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByIndex
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            NewIndex                       ( CPF_Parm )

void UUIDataStore_OnlineGameSettings::eventSetCurrentByIndex ( int NewIndex )
{
	static UFunction* pFnSetCurrentByIndex = NULL;

	if ( ! pFnSetCurrentByIndex )
		pFnSetCurrentByIndex = (UFunction*) UObject::GObjObjects()->Data[ 34727 ];

	UUIDataStore_OnlineGameSettings_eventSetCurrentByIndex_Parms SetCurrentByIndex_Parms;
	SetCurrentByIndex_Parms.NewIndex = NewIndex;

	this->ProcessEvent ( pFnSetCurrentByIndex, &SetCurrentByIndex_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSettings.GetCurrentProvider
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIDataProvider_Settings* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIDataProvider_Settings* UUIDataStore_OnlineGameSettings::eventGetCurrentProvider ( )
{
	static UFunction* pFnGetCurrentProvider = NULL;

	if ( ! pFnGetCurrentProvider )
		pFnGetCurrentProvider = (UFunction*) UObject::GObjObjects()->Data[ 34725 ];

	UUIDataStore_OnlineGameSettings_eventGetCurrentProvider_Parms GetCurrentProvider_Parms;

	this->ProcessEvent ( pFnGetCurrentProvider, &GetCurrentProvider_Parms, NULL );

	return GetCurrentProvider_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSettings.GetCurrentGameSettings
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UOnlineGameSettings*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineGameSettings* UUIDataStore_OnlineGameSettings::eventGetCurrentGameSettings ( )
{
	static UFunction* pFnGetCurrentGameSettings = NULL;

	if ( ! pFnGetCurrentGameSettings )
		pFnGetCurrentGameSettings = (UFunction*) UObject::GObjObjects()->Data[ 34723 ];

	UUIDataStore_OnlineGameSettings_eventGetCurrentGameSettings_Parms GetCurrentGameSettings_Parms;

	this->ProcessEvent ( pFnGetCurrentGameSettings, &GetCurrentGameSettings_Parms, NULL );

	return GetCurrentGameSettings_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSettings.CreateGame
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ControllerIndex                ( CPF_Parm )

bool UUIDataStore_OnlineGameSettings::eventCreateGame ( unsigned char ControllerIndex )
{
	static UFunction* pFnCreateGame = NULL;

	if ( ! pFnCreateGame )
		pFnCreateGame = (UFunction*) UObject::GObjObjects()->Data[ 34717 ];

	UUIDataStore_OnlineGameSettings_eventCreateGame_Parms CreateGame_Parms;
	CreateGame_Parms.ControllerIndex = ControllerIndex;

	this->ProcessEvent ( pFnCreateGame, &CreateGame_Parms, NULL );

	return CreateGame_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSettings.OnSettingProviderChanged
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// struct FName                   SettingsName                   ( CPF_OptionalParm | CPF_Parm )

void UUIDataStore_OnlineGameSettings::OnSettingProviderChanged ( class UUIDataProvider* SourceProvider, struct FName SettingsName )
{
	static UFunction* pFnOnSettingProviderChanged = NULL;

	if ( ! pFnOnSettingProviderChanged )
		pFnOnSettingProviderChanged = (UFunction*) UObject::GObjObjects()->Data[ 34714 ];

	UUIDataStore_OnlineGameSettings_execOnSettingProviderChanged_Parms OnSettingProviderChanged_Parms;
	OnSettingProviderChanged_Parms.SourceProvider = SourceProvider;
	memcpy ( &OnSettingProviderChanged_Parms.SettingsName, &SettingsName, 0x8 );

	pFnOnSettingProviderChanged->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnSettingProviderChanged, &OnSettingProviderChanged_Parms, NULL );

	pFnOnSettingProviderChanged->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStore_SessionSettings.NotifyGameSessionEnded
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDataStore_SessionSettings::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 34903 ];

	UUIDataStore_SessionSettings_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );

	return NotifyGameSessionEnded_Parms.ReturnValue;
};

// Function Engine.UIDataStore_SessionSettings.ClearDataProviders
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UUIDataStore_SessionSettings::ClearDataProviders ( )
{
	static UFunction* pFnClearDataProviders = NULL;

	if ( ! pFnClearDataProviders )
		pFnClearDataProviders = (UFunction*) UObject::GObjObjects()->Data[ 34901 ];

	UUIDataStore_SessionSettings_execClearDataProviders_Parms ClearDataProviders_Parms;

	this->ProcessEvent ( pFnClearDataProviders, &ClearDataProviders_Parms, NULL );
};

// Function Engine.UIDataStore_InputAlias.HasAliasMappingForPlatform
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DesiredAlias                   ( CPF_Parm )
// unsigned char                  DesiredPlatform                ( CPF_Parm )

bool UUIDataStore_InputAlias::HasAliasMappingForPlatform ( struct FName DesiredAlias, unsigned char DesiredPlatform )
{
	static UFunction* pFnHasAliasMappingForPlatform = NULL;

	if ( ! pFnHasAliasMappingForPlatform )
		pFnHasAliasMappingForPlatform = (UFunction*) UObject::GObjObjects()->Data[ 34613 ];

	UUIDataStore_InputAlias_execHasAliasMappingForPlatform_Parms HasAliasMappingForPlatform_Parms;
	memcpy ( &HasAliasMappingForPlatform_Parms.DesiredAlias, &DesiredAlias, 0x8 );
	HasAliasMappingForPlatform_Parms.DesiredPlatform = DesiredPlatform;

	pFnHasAliasMappingForPlatform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasAliasMappingForPlatform, &HasAliasMappingForPlatform_Parms, NULL );

	pFnHasAliasMappingForPlatform->FunctionFlags |= 0x400;

	return HasAliasMappingForPlatform_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.FindInputAliasIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DesiredAlias                   ( CPF_Parm )

int UUIDataStore_InputAlias::FindInputAliasIndex ( struct FName DesiredAlias )
{
	static UFunction* pFnFindInputAliasIndex = NULL;

	if ( ! pFnFindInputAliasIndex )
		pFnFindInputAliasIndex = (UFunction*) UObject::GObjObjects()->Data[ 34610 ];

	UUIDataStore_InputAlias_execFindInputAliasIndex_Parms FindInputAliasIndex_Parms;
	memcpy ( &FindInputAliasIndex_Parms.DesiredAlias, &DesiredAlias, 0x8 );

	pFnFindInputAliasIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindInputAliasIndex, &FindInputAliasIndex_Parms, NULL );

	pFnFindInputAliasIndex->FunctionFlags |= 0x400;

	return FindInputAliasIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyDataByIndex
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            AliasIndex                     ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )
// struct FRawInputKeyEventData   out_InputKeyData               ( CPF_Parm | CPF_OutParm )

bool UUIDataStore_InputAlias::GetAliasInputKeyDataByIndex ( int AliasIndex, unsigned char OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData )
{
	static UFunction* pFnGetAliasInputKeyDataByIndex = NULL;

	if ( ! pFnGetAliasInputKeyDataByIndex )
		pFnGetAliasInputKeyDataByIndex = (UFunction*) UObject::GObjObjects()->Data[ 34605 ];

	UUIDataStore_InputAlias_execGetAliasInputKeyDataByIndex_Parms GetAliasInputKeyDataByIndex_Parms;
	GetAliasInputKeyDataByIndex_Parms.AliasIndex = AliasIndex;
	GetAliasInputKeyDataByIndex_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasInputKeyDataByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasInputKeyDataByIndex, &GetAliasInputKeyDataByIndex_Parms, NULL );

	pFnGetAliasInputKeyDataByIndex->FunctionFlags |= 0x400;

	if ( out_InputKeyData )
		memcpy ( out_InputKeyData, &GetAliasInputKeyDataByIndex_Parms.out_InputKeyData, 0xC );

	return GetAliasInputKeyDataByIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyData
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DesiredAlias                   ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )
// struct FRawInputKeyEventData   out_InputKeyData               ( CPF_Parm | CPF_OutParm )

bool UUIDataStore_InputAlias::GetAliasInputKeyData ( struct FName DesiredAlias, unsigned char OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData )
{
	static UFunction* pFnGetAliasInputKeyData = NULL;

	if ( ! pFnGetAliasInputKeyData )
		pFnGetAliasInputKeyData = (UFunction*) UObject::GObjObjects()->Data[ 34600 ];

	UUIDataStore_InputAlias_execGetAliasInputKeyData_Parms GetAliasInputKeyData_Parms;
	memcpy ( &GetAliasInputKeyData_Parms.DesiredAlias, &DesiredAlias, 0x8 );
	GetAliasInputKeyData_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasInputKeyData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasInputKeyData, &GetAliasInputKeyData_Parms, NULL );

	pFnGetAliasInputKeyData->FunctionFlags |= 0x400;

	if ( out_InputKeyData )
		memcpy ( out_InputKeyData, &GetAliasInputKeyData_Parms.out_InputKeyData, 0xC );

	return GetAliasInputKeyData_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyNameByIndex
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            AliasIndex                     ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )

struct FName UUIDataStore_InputAlias::GetAliasInputKeyNameByIndex ( int AliasIndex, unsigned char OverridePlatform )
{
	static UFunction* pFnGetAliasInputKeyNameByIndex = NULL;

	if ( ! pFnGetAliasInputKeyNameByIndex )
		pFnGetAliasInputKeyNameByIndex = (UFunction*) UObject::GObjObjects()->Data[ 34596 ];

	UUIDataStore_InputAlias_execGetAliasInputKeyNameByIndex_Parms GetAliasInputKeyNameByIndex_Parms;
	GetAliasInputKeyNameByIndex_Parms.AliasIndex = AliasIndex;
	GetAliasInputKeyNameByIndex_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasInputKeyNameByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasInputKeyNameByIndex, &GetAliasInputKeyNameByIndex_Parms, NULL );

	pFnGetAliasInputKeyNameByIndex->FunctionFlags |= 0x400;

	return GetAliasInputKeyNameByIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyName
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DesiredAlias                   ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )

struct FName UUIDataStore_InputAlias::GetAliasInputKeyName ( struct FName DesiredAlias, unsigned char OverridePlatform )
{
	static UFunction* pFnGetAliasInputKeyName = NULL;

	if ( ! pFnGetAliasInputKeyName )
		pFnGetAliasInputKeyName = (UFunction*) UObject::GObjObjects()->Data[ 34592 ];

	UUIDataStore_InputAlias_execGetAliasInputKeyName_Parms GetAliasInputKeyName_Parms;
	memcpy ( &GetAliasInputKeyName_Parms.DesiredAlias, &DesiredAlias, 0x8 );
	GetAliasInputKeyName_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasInputKeyName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasInputKeyName, &GetAliasInputKeyName_Parms, NULL );

	pFnGetAliasInputKeyName->FunctionFlags |= 0x400;

	return GetAliasInputKeyName_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasFontMarkupByIndex
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            AliasIndex                     ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )

struct FString UUIDataStore_InputAlias::GetAliasFontMarkupByIndex ( int AliasIndex, unsigned char OverridePlatform )
{
	static UFunction* pFnGetAliasFontMarkupByIndex = NULL;

	if ( ! pFnGetAliasFontMarkupByIndex )
		pFnGetAliasFontMarkupByIndex = (UFunction*) UObject::GObjObjects()->Data[ 34588 ];

	UUIDataStore_InputAlias_execGetAliasFontMarkupByIndex_Parms GetAliasFontMarkupByIndex_Parms;
	GetAliasFontMarkupByIndex_Parms.AliasIndex = AliasIndex;
	GetAliasFontMarkupByIndex_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasFontMarkupByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasFontMarkupByIndex, &GetAliasFontMarkupByIndex_Parms, NULL );

	pFnGetAliasFontMarkupByIndex->FunctionFlags |= 0x400;

	return GetAliasFontMarkupByIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasFontMarkup
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   DesiredAlias                   ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )

struct FString UUIDataStore_InputAlias::GetAliasFontMarkup ( struct FName DesiredAlias, unsigned char OverridePlatform )
{
	static UFunction* pFnGetAliasFontMarkup = NULL;

	if ( ! pFnGetAliasFontMarkup )
		pFnGetAliasFontMarkup = (UFunction*) UObject::GObjObjects()->Data[ 34584 ];

	UUIDataStore_InputAlias_execGetAliasFontMarkup_Parms GetAliasFontMarkup_Parms;
	memcpy ( &GetAliasFontMarkup_Parms.DesiredAlias, &DesiredAlias, 0x8 );
	GetAliasFontMarkup_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasFontMarkup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasFontMarkup, &GetAliasFontMarkup_Parms, NULL );

	pFnGetAliasFontMarkup->FunctionFlags |= 0x400;

	return GetAliasFontMarkup_Parms.ReturnValue;
};

// Function Engine.UIDataStore_StringAliasMap.GetStringWithFieldName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FieldName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 MappedString                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int UUIDataStore_StringAliasMap::GetStringWithFieldName ( struct FString FieldName, struct FString* MappedString )
{
	static UFunction* pFnGetStringWithFieldName = NULL;

	if ( ! pFnGetStringWithFieldName )
		pFnGetStringWithFieldName = (UFunction*) UObject::GObjObjects()->Data[ 34917 ];

	UUIDataStore_StringAliasMap_execGetStringWithFieldName_Parms GetStringWithFieldName_Parms;
	memcpy ( &GetStringWithFieldName_Parms.FieldName, &FieldName, 0x10 );

	pFnGetStringWithFieldName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringWithFieldName, &GetStringWithFieldName_Parms, NULL );

	pFnGetStringWithFieldName->FunctionFlags |= 0x400;

	if ( MappedString )
		memcpy ( MappedString, &GetStringWithFieldName_Parms.MappedString, 0x10 );

	return GetStringWithFieldName_Parms.ReturnValue;
};

// Function Engine.UIDataStore_StringAliasMap.FindMappingWithFieldName
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FieldName                      ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SetName                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

int UUIDataStore_StringAliasMap::FindMappingWithFieldName ( struct FString FieldName, struct FString SetName )
{
	static UFunction* pFnFindMappingWithFieldName = NULL;

	if ( ! pFnFindMappingWithFieldName )
		pFnFindMappingWithFieldName = (UFunction*) UObject::GObjObjects()->Data[ 34913 ];

	UUIDataStore_StringAliasMap_execFindMappingWithFieldName_Parms FindMappingWithFieldName_Parms;
	memcpy ( &FindMappingWithFieldName_Parms.FieldName, &FieldName, 0x10 );
	memcpy ( &FindMappingWithFieldName_Parms.SetName, &SetName, 0x10 );

	pFnFindMappingWithFieldName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindMappingWithFieldName, &FindMappingWithFieldName_Parms, NULL );

	pFnFindMappingWithFieldName->FunctionFlags |= 0x400;

	return FindMappingWithFieldName_Parms.ReturnValue;
};

// Function Engine.UIDataStore_StringAliasMap.GetPlayerOwner
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULocalPlayer*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ULocalPlayer* UUIDataStore_StringAliasMap::GetPlayerOwner ( )
{
	static UFunction* pFnGetPlayerOwner = NULL;

	if ( ! pFnGetPlayerOwner )
		pFnGetPlayerOwner = (UFunction*) UObject::GObjObjects()->Data[ 34911 ];

	UUIDataStore_StringAliasMap_execGetPlayerOwner_Parms GetPlayerOwner_Parms;

	pFnGetPlayerOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerOwner, &GetPlayerOwner_Parms, NULL );

	pFnGetPlayerOwner->FunctionFlags |= 0x400;

	return GetPlayerOwner_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.FindCollectionValueIndex
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 ValueToFind                    ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int UUIDynamicFieldProvider::FindCollectionValueIndex ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* ValueToFind )
{
	static UFunction* pFnFindCollectionValueIndex = NULL;

	if ( ! pFnFindCollectionValueIndex )
		pFnFindCollectionValueIndex = (UFunction*) UObject::GObjObjects()->Data[ 29348 ];

	UUIDynamicFieldProvider_execFindCollectionValueIndex_Parms FindCollectionValueIndex_Parms;
	memcpy ( &FindCollectionValueIndex_Parms.FieldName, &FieldName, 0x8 );
	FindCollectionValueIndex_Parms.bPersistent = bPersistent;
	memcpy ( &FindCollectionValueIndex_Parms.CellTag, &CellTag, 0x8 );

	pFnFindCollectionValueIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindCollectionValueIndex, &FindCollectionValueIndex_Parms, NULL );

	pFnFindCollectionValueIndex->FunctionFlags |= 0x400;

	if ( ValueToFind )
		memcpy ( ValueToFind, &FindCollectionValueIndex_Parms.ValueToFind, 0x10 );

	return FindCollectionValueIndex_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.GetCollectionValue
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 out_Value                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDynamicFieldProvider::GetCollectionValue ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag, struct FString* out_Value )
{
	static UFunction* pFnGetCollectionValue = NULL;

	if ( ! pFnGetCollectionValue )
		pFnGetCollectionValue = (UFunction*) UObject::GObjObjects()->Data[ 22001 ];

	UUIDynamicFieldProvider_execGetCollectionValue_Parms GetCollectionValue_Parms;
	memcpy ( &GetCollectionValue_Parms.FieldName, &FieldName, 0x8 );
	GetCollectionValue_Parms.ValueIndex = ValueIndex;
	GetCollectionValue_Parms.bPersistent = bPersistent;
	memcpy ( &GetCollectionValue_Parms.CellTag, &CellTag, 0x8 );

	pFnGetCollectionValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCollectionValue, &GetCollectionValue_Parms, NULL );

	pFnGetCollectionValue->FunctionFlags |= 0x400;

	if ( out_Value )
		memcpy ( out_Value, &GetCollectionValue_Parms.out_Value, 0x10 );

	return GetCollectionValue_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.ClearCollectionValueArray
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )

bool UUIDynamicFieldProvider::ClearCollectionValueArray ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag )
{
	static UFunction* pFnClearCollectionValueArray = NULL;

	if ( ! pFnClearCollectionValueArray )
		pFnClearCollectionValueArray = (UFunction*) UObject::GObjObjects()->Data[ 21977 ];

	UUIDynamicFieldProvider_execClearCollectionValueArray_Parms ClearCollectionValueArray_Parms;
	memcpy ( &ClearCollectionValueArray_Parms.FieldName, &FieldName, 0x8 );
	ClearCollectionValueArray_Parms.bPersistent = bPersistent;
	memcpy ( &ClearCollectionValueArray_Parms.CellTag, &CellTag, 0x8 );

	pFnClearCollectionValueArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearCollectionValueArray, &ClearCollectionValueArray_Parms, NULL );

	pFnClearCollectionValueArray->FunctionFlags |= 0x400;

	return ClearCollectionValueArray_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.ReplaceCollectionValueByIndex
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDynamicFieldProvider::ReplaceCollectionValueByIndex ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag, struct FString* NewValue )
{
	static UFunction* pFnReplaceCollectionValueByIndex = NULL;

	if ( ! pFnReplaceCollectionValueByIndex )
		pFnReplaceCollectionValueByIndex = (UFunction*) UObject::GObjObjects()->Data[ 29328 ];

	UUIDynamicFieldProvider_execReplaceCollectionValueByIndex_Parms ReplaceCollectionValueByIndex_Parms;
	memcpy ( &ReplaceCollectionValueByIndex_Parms.FieldName, &FieldName, 0x8 );
	ReplaceCollectionValueByIndex_Parms.ValueIndex = ValueIndex;
	ReplaceCollectionValueByIndex_Parms.bPersistent = bPersistent;
	memcpy ( &ReplaceCollectionValueByIndex_Parms.CellTag, &CellTag, 0x8 );

	pFnReplaceCollectionValueByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReplaceCollectionValueByIndex, &ReplaceCollectionValueByIndex_Parms, NULL );

	pFnReplaceCollectionValueByIndex->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &ReplaceCollectionValueByIndex_Parms.NewValue, 0x10 );

	return ReplaceCollectionValueByIndex_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.ReplaceCollectionValue
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 CurrentValue                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDynamicFieldProvider::ReplaceCollectionValue ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* CurrentValue, struct FString* NewValue )
{
	static UFunction* pFnReplaceCollectionValue = NULL;

	if ( ! pFnReplaceCollectionValue )
		pFnReplaceCollectionValue = (UFunction*) UObject::GObjObjects()->Data[ 29319 ];

	UUIDynamicFieldProvider_execReplaceCollectionValue_Parms ReplaceCollectionValue_Parms;
	memcpy ( &ReplaceCollectionValue_Parms.FieldName, &FieldName, 0x8 );
	ReplaceCollectionValue_Parms.bPersistent = bPersistent;
	memcpy ( &ReplaceCollectionValue_Parms.CellTag, &CellTag, 0x8 );

	pFnReplaceCollectionValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReplaceCollectionValue, &ReplaceCollectionValue_Parms, NULL );

	pFnReplaceCollectionValue->FunctionFlags |= 0x400;

	if ( CurrentValue )
		memcpy ( CurrentValue, &ReplaceCollectionValue_Parms.CurrentValue, 0x10 );

	if ( NewValue )
		memcpy ( NewValue, &ReplaceCollectionValue_Parms.NewValue, 0x10 );

	return ReplaceCollectionValue_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.RemoveCollectionValueByIndex
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )

bool UUIDynamicFieldProvider::RemoveCollectionValueByIndex ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag )
{
	static UFunction* pFnRemoveCollectionValueByIndex = NULL;

	if ( ! pFnRemoveCollectionValueByIndex )
		pFnRemoveCollectionValueByIndex = (UFunction*) UObject::GObjObjects()->Data[ 29310 ];

	UUIDynamicFieldProvider_execRemoveCollectionValueByIndex_Parms RemoveCollectionValueByIndex_Parms;
	memcpy ( &RemoveCollectionValueByIndex_Parms.FieldName, &FieldName, 0x8 );
	RemoveCollectionValueByIndex_Parms.ValueIndex = ValueIndex;
	RemoveCollectionValueByIndex_Parms.bPersistent = bPersistent;
	memcpy ( &RemoveCollectionValueByIndex_Parms.CellTag, &CellTag, 0x8 );

	pFnRemoveCollectionValueByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveCollectionValueByIndex, &RemoveCollectionValueByIndex_Parms, NULL );

	pFnRemoveCollectionValueByIndex->FunctionFlags |= 0x400;

	return RemoveCollectionValueByIndex_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.RemoveCollectionValue
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 ValueToRemove                  ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDynamicFieldProvider::RemoveCollectionValue ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* ValueToRemove )
{
	static UFunction* pFnRemoveCollectionValue = NULL;

	if ( ! pFnRemoveCollectionValue )
		pFnRemoveCollectionValue = (UFunction*) UObject::GObjObjects()->Data[ 29302 ];

	UUIDynamicFieldProvider_execRemoveCollectionValue_Parms RemoveCollectionValue_Parms;
	memcpy ( &RemoveCollectionValue_Parms.FieldName, &FieldName, 0x8 );
	RemoveCollectionValue_Parms.bPersistent = bPersistent;
	memcpy ( &RemoveCollectionValue_Parms.CellTag, &CellTag, 0x8 );

	pFnRemoveCollectionValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveCollectionValue, &RemoveCollectionValue_Parms, NULL );

	pFnRemoveCollectionValue->FunctionFlags |= 0x400;

	if ( ValueToRemove )
		memcpy ( ValueToRemove, &RemoveCollectionValue_Parms.ValueToRemove, 0x10 );

	return RemoveCollectionValue_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.InsertCollectionValue
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAllowDuplicateValues          ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDynamicFieldProvider::InsertCollectionValue ( struct FName FieldName, int InsertIndex, unsigned long bPersistent, unsigned long bAllowDuplicateValues, struct FName CellTag, struct FString* NewValue )
{
	static UFunction* pFnInsertCollectionValue = NULL;

	if ( ! pFnInsertCollectionValue )
		pFnInsertCollectionValue = (UFunction*) UObject::GObjObjects()->Data[ 21980 ];

	UUIDynamicFieldProvider_execInsertCollectionValue_Parms InsertCollectionValue_Parms;
	memcpy ( &InsertCollectionValue_Parms.FieldName, &FieldName, 0x8 );
	InsertCollectionValue_Parms.InsertIndex = InsertIndex;
	InsertCollectionValue_Parms.bPersistent = bPersistent;
	InsertCollectionValue_Parms.bAllowDuplicateValues = bAllowDuplicateValues;
	memcpy ( &InsertCollectionValue_Parms.CellTag, &CellTag, 0x8 );

	pFnInsertCollectionValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInsertCollectionValue, &InsertCollectionValue_Parms, NULL );

	pFnInsertCollectionValue->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &InsertCollectionValue_Parms.NewValue, 0x10 );

	return InsertCollectionValue_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.SetCollectionValueArray
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bClearExisting                 ( CPF_OptionalParm | CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct TArray<struct FString>  CollectionValues               ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDynamicFieldProvider::SetCollectionValueArray ( struct FName FieldName, unsigned long bClearExisting, int InsertIndex, unsigned long bPersistent, struct FName CellTag, struct TArray<struct FString>* CollectionValues )
{
	static UFunction* pFnSetCollectionValueArray = NULL;

	if ( ! pFnSetCollectionValueArray )
		pFnSetCollectionValueArray = (UFunction*) UObject::GObjObjects()->Data[ 29286 ];

	UUIDynamicFieldProvider_execSetCollectionValueArray_Parms SetCollectionValueArray_Parms;
	memcpy ( &SetCollectionValueArray_Parms.FieldName, &FieldName, 0x8 );
	SetCollectionValueArray_Parms.bClearExisting = bClearExisting;
	SetCollectionValueArray_Parms.InsertIndex = InsertIndex;
	SetCollectionValueArray_Parms.bPersistent = bPersistent;
	memcpy ( &SetCollectionValueArray_Parms.CellTag, &CellTag, 0x8 );

	pFnSetCollectionValueArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCollectionValueArray, &SetCollectionValueArray_Parms, NULL );

	pFnSetCollectionValueArray->FunctionFlags |= 0x400;

	if ( CollectionValues )
		memcpy ( CollectionValues, &SetCollectionValueArray_Parms.CollectionValues, 0x10 );

	return SetCollectionValueArray_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.GetCollectionValueArray
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CellTag                        ( CPF_OptionalParm | CPF_Parm )
// struct TArray<struct FString>  out_DataValueArray             ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDynamicFieldProvider::GetCollectionValueArray ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct TArray<struct FString>* out_DataValueArray )
{
	static UFunction* pFnGetCollectionValueArray = NULL;

	if ( ! pFnGetCollectionValueArray )
		pFnGetCollectionValueArray = (UFunction*) UObject::GObjObjects()->Data[ 22105 ];

	UUIDynamicFieldProvider_execGetCollectionValueArray_Parms GetCollectionValueArray_Parms;
	memcpy ( &GetCollectionValueArray_Parms.FieldName, &FieldName, 0x8 );
	GetCollectionValueArray_Parms.bPersistent = bPersistent;
	memcpy ( &GetCollectionValueArray_Parms.CellTag, &CellTag, 0x8 );

	pFnGetCollectionValueArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCollectionValueArray, &GetCollectionValueArray_Parms, NULL );

	pFnGetCollectionValueArray->FunctionFlags |= 0x400;

	if ( out_DataValueArray )
		memcpy ( out_DataValueArray, &GetCollectionValueArray_Parms.out_DataValueArray, 0x10 );

	return GetCollectionValueArray_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.GetCollectionValueSchema
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct TArray<struct FName>    out_CellTagArray               ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDynamicFieldProvider::GetCollectionValueSchema ( struct FName FieldName, unsigned long bPersistent, struct TArray<struct FName>* out_CellTagArray )
{
	static UFunction* pFnGetCollectionValueSchema = NULL;

	if ( ! pFnGetCollectionValueSchema )
		pFnGetCollectionValueSchema = (UFunction*) UObject::GObjObjects()->Data[ 22103 ];

	UUIDynamicFieldProvider_execGetCollectionValueSchema_Parms GetCollectionValueSchema_Parms;
	memcpy ( &GetCollectionValueSchema_Parms.FieldName, &FieldName, 0x8 );
	GetCollectionValueSchema_Parms.bPersistent = bPersistent;

	pFnGetCollectionValueSchema->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCollectionValueSchema, &GetCollectionValueSchema_Parms, NULL );

	pFnGetCollectionValueSchema->FunctionFlags |= 0x400;

	if ( out_CellTagArray )
		memcpy ( out_CellTagArray, &GetCollectionValueSchema_Parms.out_CellTagArray, 0x10 );

	return GetCollectionValueSchema_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.SavePersistentProviderData
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIDynamicFieldProvider::SavePersistentProviderData ( )
{
	static UFunction* pFnSavePersistentProviderData = NULL;

	if ( ! pFnSavePersistentProviderData )
		pFnSavePersistentProviderData = (UFunction*) UObject::GObjObjects()->Data[ 34971 ];

	UUIDynamicFieldProvider_execSavePersistentProviderData_Parms SavePersistentProviderData_Parms;

	pFnSavePersistentProviderData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSavePersistentProviderData, &SavePersistentProviderData_Parms, NULL );

	pFnSavePersistentProviderData->FunctionFlags |= 0x400;
};

// Function Engine.UIDynamicFieldProvider.SetField
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bChangeExistingOnly            ( CPF_OptionalParm | CPF_Parm )
// struct FUIProviderScriptFieldValue FieldValue                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDynamicFieldProvider::SetField ( struct FName FieldName, unsigned long bChangeExistingOnly, struct FUIProviderScriptFieldValue* FieldValue )
{
	static UFunction* pFnSetField = NULL;

	if ( ! pFnSetField )
		pFnSetField = (UFunction*) UObject::GObjObjects()->Data[ 34966 ];

	UUIDynamicFieldProvider_execSetField_Parms SetField_Parms;
	memcpy ( &SetField_Parms.FieldName, &FieldName, 0x8 );
	SetField_Parms.bChangeExistingOnly = bChangeExistingOnly;

	pFnSetField->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetField, &SetField_Parms, NULL );

	pFnSetField->FunctionFlags |= 0x400;

	if ( FieldValue )
		memcpy ( FieldValue, &SetField_Parms.FieldValue, 0x60 );

	return SetField_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.GetField
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// struct FUIProviderScriptFieldValue out_Field                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDynamicFieldProvider::GetField ( struct FName FieldName, struct FUIProviderScriptFieldValue* out_Field )
{
	static UFunction* pFnGetField = NULL;

	if ( ! pFnGetField )
		pFnGetField = (UFunction*) UObject::GObjObjects()->Data[ 34962 ];

	UUIDynamicFieldProvider_execGetField_Parms GetField_Parms;
	memcpy ( &GetField_Parms.FieldName, &FieldName, 0x8 );

	pFnGetField->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetField, &GetField_Parms, NULL );

	pFnGetField->FunctionFlags |= 0x400;

	if ( out_Field )
		memcpy ( out_Field, &GetField_Parms.out_Field, 0x60 );

	return GetField_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.ClearFields
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bReinitializeRuntimeFields     ( CPF_OptionalParm | CPF_Parm )

bool UUIDynamicFieldProvider::ClearFields ( unsigned long bReinitializeRuntimeFields )
{
	static UFunction* pFnClearFields = NULL;

	if ( ! pFnClearFields )
		pFnClearFields = (UFunction*) UObject::GObjObjects()->Data[ 29268 ];

	UUIDynamicFieldProvider_execClearFields_Parms ClearFields_Parms;
	ClearFields_Parms.bReinitializeRuntimeFields = bReinitializeRuntimeFields;

	pFnClearFields->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearFields, &ClearFields_Parms, NULL );

	pFnClearFields->FunctionFlags |= 0x400;

	return ClearFields_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.FindFieldIndex
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bSearchPersistentFields        ( CPF_OptionalParm | CPF_Parm )

int UUIDynamicFieldProvider::FindFieldIndex ( struct FName FieldName, unsigned long bSearchPersistentFields )
{
	static UFunction* pFnFindFieldIndex = NULL;

	if ( ! pFnFindFieldIndex )
		pFnFindFieldIndex = (UFunction*) UObject::GObjObjects()->Data[ 29263 ];

	UUIDynamicFieldProvider_execFindFieldIndex_Parms FindFieldIndex_Parms;
	memcpy ( &FindFieldIndex_Parms.FieldName, &FieldName, 0x8 );
	FindFieldIndex_Parms.bSearchPersistentFields = bSearchPersistentFields;

	pFnFindFieldIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindFieldIndex, &FindFieldIndex_Parms, NULL );

	pFnFindFieldIndex->FunctionFlags |= 0x400;

	return FindFieldIndex_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.RemoveField
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )

bool UUIDynamicFieldProvider::RemoveField ( struct FName FieldName )
{
	static UFunction* pFnRemoveField = NULL;

	if ( ! pFnRemoveField )
		pFnRemoveField = (UFunction*) UObject::GObjObjects()->Data[ 29257 ];

	UUIDynamicFieldProvider_execRemoveField_Parms RemoveField_Parms;
	memcpy ( &RemoveField_Parms.FieldName, &FieldName, 0x8 );

	pFnRemoveField->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveField, &RemoveField_Parms, NULL );

	pFnRemoveField->FunctionFlags |= 0x400;

	return RemoveField_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.AddField
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned char                  FieldType                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// int                            out_InsertPosition             ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UUIDynamicFieldProvider::AddField ( struct FName FieldName, unsigned char FieldType, unsigned long bPersistent, int* out_InsertPosition )
{
	static UFunction* pFnAddField = NULL;

	if ( ! pFnAddField )
		pFnAddField = (UFunction*) UObject::GObjObjects()->Data[ 29252 ];

	UUIDynamicFieldProvider_execAddField_Parms AddField_Parms;
	memcpy ( &AddField_Parms.FieldName, &FieldName, 0x8 );
	AddField_Parms.FieldType = FieldType;
	AddField_Parms.bPersistent = bPersistent;

	pFnAddField->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddField, &AddField_Parms, NULL );

	pFnAddField->FunctionFlags |= 0x400;

	if ( out_InsertPosition )
		*out_InsertPosition = AddField_Parms.out_InsertPosition;

	return AddField_Parms.ReturnValue;
};

// Function Engine.UIDynamicFieldProvider.InitializeRuntimeFields
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIDynamicFieldProvider::InitializeRuntimeFields ( )
{
	static UFunction* pFnInitializeRuntimeFields = NULL;

	if ( ! pFnInitializeRuntimeFields )
		pFnInitializeRuntimeFields = (UFunction*) UObject::GObjObjects()->Data[ 34953 ];

	UUIDynamicFieldProvider_execInitializeRuntimeFields_Parms InitializeRuntimeFields_Parms;

	pFnInitializeRuntimeFields->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeRuntimeFields, &InitializeRuntimeFields_Parms, NULL );

	pFnInitializeRuntimeFields->FunctionFlags |= 0x400;
};

// Function Engine.UIPropertyDataProvider.GetCustomPropertyValue
// [0x00424800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ArrayIndex                     ( CPF_OptionalParm | CPF_Parm )
// struct FUIProviderScriptFieldValue PropertyValue                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIPropertyDataProvider::eventGetCustomPropertyValue ( int ArrayIndex, struct FUIProviderScriptFieldValue* PropertyValue )
{
	static UFunction* pFnGetCustomPropertyValue = NULL;

	if ( ! pFnGetCustomPropertyValue )
		pFnGetCustomPropertyValue = (UFunction*) UObject::GObjObjects()->Data[ 18083 ];

	UUIPropertyDataProvider_eventGetCustomPropertyValue_Parms GetCustomPropertyValue_Parms;
	GetCustomPropertyValue_Parms.ArrayIndex = ArrayIndex;

	this->ProcessEvent ( pFnGetCustomPropertyValue, &GetCustomPropertyValue_Parms, NULL );

	if ( PropertyValue )
		memcpy ( PropertyValue, &GetCustomPropertyValue_Parms.PropertyValue, 0x60 );

	return GetCustomPropertyValue_Parms.ReturnValue;
};

// Function Engine.UIPropertyDataProvider.CanSupportComplexPropertyType
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UProperty*               UnsupportedProperty            ( CPF_Parm )

bool UUIPropertyDataProvider::CanSupportComplexPropertyType ( class UProperty* UnsupportedProperty )
{
	static UFunction* pFnCanSupportComplexPropertyType = NULL;

	if ( ! pFnCanSupportComplexPropertyType )
		pFnCanSupportComplexPropertyType = (UFunction*) UObject::GObjObjects()->Data[ 18080 ];

	UUIPropertyDataProvider_execCanSupportComplexPropertyType_Parms CanSupportComplexPropertyType_Parms;
	CanSupportComplexPropertyType_Parms.UnsupportedProperty = UnsupportedProperty;

	this->ProcessEvent ( pFnCanSupportComplexPropertyType, &CanSupportComplexPropertyType_Parms, NULL );

	return CanSupportComplexPropertyType_Parms.ReturnValue;
};

// Function Engine.UIDynamicDataProvider.CleanupDataProvider
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDynamicDataProvider::eventCleanupDataProvider ( )
{
	static UFunction* pFnCleanupDataProvider = NULL;

	if ( ! pFnCleanupDataProvider )
		pFnCleanupDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 18016 ];

	UUIDynamicDataProvider_eventCleanupDataProvider_Parms CleanupDataProvider_Parms;

	this->ProcessEvent ( pFnCleanupDataProvider, &CleanupDataProvider_Parms, NULL );

	return CleanupDataProvider_Parms.ReturnValue;
};

// Function Engine.UIDynamicDataProvider.GetDataSource
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UObject* UUIDynamicDataProvider::GetDataSource ( )
{
	static UFunction* pFnGetDataSource = NULL;

	if ( ! pFnGetDataSource )
		pFnGetDataSource = (UFunction*) UObject::GObjObjects()->Data[ 18033 ];

	UUIDynamicDataProvider_execGetDataSource_Parms GetDataSource_Parms;

	this->ProcessEvent ( pFnGetDataSource, &GetDataSource_Parms, NULL );

	return GetDataSource_Parms.ReturnValue;
};

// Function Engine.UIDynamicDataProvider.IsValidDataSourceClass
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  PotentialDataSourceClass       ( CPF_Parm )

bool UUIDynamicDataProvider::eventIsValidDataSourceClass ( class UClass* PotentialDataSourceClass )
{
	static UFunction* pFnIsValidDataSourceClass = NULL;

	if ( ! pFnIsValidDataSourceClass )
		pFnIsValidDataSourceClass = (UFunction*) UObject::GObjObjects()->Data[ 18095 ];

	UUIDynamicDataProvider_eventIsValidDataSourceClass_Parms IsValidDataSourceClass_Parms;
	IsValidDataSourceClass_Parms.PotentialDataSourceClass = PotentialDataSourceClass;

	this->ProcessEvent ( pFnIsValidDataSourceClass, &IsValidDataSourceClass_Parms, NULL );

	return IsValidDataSourceClass_Parms.ReturnValue;
};

// Function Engine.UIDynamicDataProvider.ProviderInstanceUnbound
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UObject*                 DataSourceInstance             ( CPF_Parm )

void UUIDynamicDataProvider::eventProviderInstanceUnbound ( class UObject* DataSourceInstance )
{
	static UFunction* pFnProviderInstanceUnbound = NULL;

	if ( ! pFnProviderInstanceUnbound )
		pFnProviderInstanceUnbound = (UFunction*) UObject::GObjObjects()->Data[ 18093 ];

	UUIDynamicDataProvider_eventProviderInstanceUnbound_Parms ProviderInstanceUnbound_Parms;
	ProviderInstanceUnbound_Parms.DataSourceInstance = DataSourceInstance;

	this->ProcessEvent ( pFnProviderInstanceUnbound, &ProviderInstanceUnbound_Parms, NULL );
};

// Function Engine.UIDynamicDataProvider.ProviderInstanceBound
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UObject*                 DataSourceInstance             ( CPF_Parm )

void UUIDynamicDataProvider::eventProviderInstanceBound ( class UObject* DataSourceInstance )
{
	static UFunction* pFnProviderInstanceBound = NULL;

	if ( ! pFnProviderInstanceBound )
		pFnProviderInstanceBound = (UFunction*) UObject::GObjObjects()->Data[ 18091 ];

	UUIDynamicDataProvider_eventProviderInstanceBound_Parms ProviderInstanceBound_Parms;
	ProviderInstanceBound_Parms.DataSourceInstance = DataSourceInstance;

	this->ProcessEvent ( pFnProviderInstanceBound, &ProviderInstanceBound_Parms, NULL );
};

// Function Engine.UIDynamicDataProvider.UnbindProviderInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDynamicDataProvider::UnbindProviderInstance ( )
{
	static UFunction* pFnUnbindProviderInstance = NULL;

	if ( ! pFnUnbindProviderInstance )
		pFnUnbindProviderInstance = (UFunction*) UObject::GObjObjects()->Data[ 18089 ];

	UUIDynamicDataProvider_execUnbindProviderInstance_Parms UnbindProviderInstance_Parms;

	pFnUnbindProviderInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnbindProviderInstance, &UnbindProviderInstance_Parms, NULL );

	pFnUnbindProviderInstance->FunctionFlags |= 0x400;

	return UnbindProviderInstance_Parms.ReturnValue;
};

// Function Engine.UIDynamicDataProvider.BindProviderInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 DataSourceInstance             ( CPF_Parm )

bool UUIDynamicDataProvider::BindProviderInstance ( class UObject* DataSourceInstance )
{
	static UFunction* pFnBindProviderInstance = NULL;

	if ( ! pFnBindProviderInstance )
		pFnBindProviderInstance = (UFunction*) UObject::GObjObjects()->Data[ 18005 ];

	UUIDynamicDataProvider_execBindProviderInstance_Parms BindProviderInstance_Parms;
	BindProviderInstance_Parms.DataSourceInstance = DataSourceInstance;

	pFnBindProviderInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBindProviderInstance, &BindProviderInstance_Parms, NULL );

	pFnBindProviderInstance->FunctionFlags |= 0x400;

	return BindProviderInstance_Parms.ReturnValue;
};

// Function Engine.GameInfoDataProvider.ProviderInstanceBound
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UObject*                 DataSourceInstance             ( CPF_Parm )

void UGameInfoDataProvider::eventProviderInstanceBound ( class UObject* DataSourceInstance )
{
	static UFunction* pFnProviderInstanceBound = NULL;

	if ( ! pFnProviderInstanceBound )
		pFnProviderInstanceBound = (UFunction*) UObject::GObjObjects()->Data[ 21125 ];

	UGameInfoDataProvider_eventProviderInstanceBound_Parms ProviderInstanceBound_Parms;
	ProviderInstanceBound_Parms.DataSourceInstance = DataSourceInstance;

	this->ProcessEvent ( pFnProviderInstanceBound, &ProviderInstanceBound_Parms, NULL );
};

// Function Engine.PowerupDataProvider.IsValidDataSourceClass
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  PotentialDataSourceClass       ( CPF_Parm )

bool UPowerupDataProvider::eventIsValidDataSourceClass ( class UClass* PotentialDataSourceClass )
{
	static UFunction* pFnIsValidDataSourceClass = NULL;

	if ( ! pFnIsValidDataSourceClass )
		pFnIsValidDataSourceClass = (UFunction*) UObject::GObjObjects()->Data[ 28561 ];

	UPowerupDataProvider_eventIsValidDataSourceClass_Parms IsValidDataSourceClass_Parms;
	IsValidDataSourceClass_Parms.PotentialDataSourceClass = PotentialDataSourceClass;

	this->ProcessEvent ( pFnIsValidDataSourceClass, &IsValidDataSourceClass_Parms, NULL );

	return IsValidDataSourceClass_Parms.ReturnValue;
};

// Function Engine.PlayerOwnerDataProvider.CleanupDataProvider
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UPlayerOwnerDataProvider::eventCleanupDataProvider ( )
{
	static UFunction* pFnCleanupDataProvider = NULL;

	if ( ! pFnCleanupDataProvider )
		pFnCleanupDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 28323 ];

	UPlayerOwnerDataProvider_eventCleanupDataProvider_Parms CleanupDataProvider_Parms;

	this->ProcessEvent ( pFnCleanupDataProvider, &CleanupDataProvider_Parms, NULL );

	return CleanupDataProvider_Parms.ReturnValue;
};

// Function Engine.PlayerOwnerDataProvider.SetPlayerDataProvider
// [0x00020002] 
// Parameters infos:
// class UPlayerDataProvider*     NewPlayerData                  ( CPF_Parm )

void UPlayerOwnerDataProvider::SetPlayerDataProvider ( class UPlayerDataProvider* NewPlayerData )
{
	static UFunction* pFnSetPlayerDataProvider = NULL;

	if ( ! pFnSetPlayerDataProvider )
		pFnSetPlayerDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 28319 ];

	UPlayerOwnerDataProvider_execSetPlayerDataProvider_Parms SetPlayerDataProvider_Parms;
	SetPlayerDataProvider_Parms.NewPlayerData = NewPlayerData;

	this->ProcessEvent ( pFnSetPlayerDataProvider, &SetPlayerDataProvider_Parms, NULL );
};

// Function Engine.TeamDataProvider.RegeneratePlayerLists
// [0x00020002] 
// Parameters infos:
// struct TArray<class UPlayerDataProvider*> AllPlayers                     ( CPF_Parm | CPF_NeedCtorLink )

void UTeamDataProvider::RegeneratePlayerLists ( struct TArray<class UPlayerDataProvider*> AllPlayers )
{
	static UFunction* pFnRegeneratePlayerLists = NULL;

	if ( ! pFnRegeneratePlayerLists )
		pFnRegeneratePlayerLists = (UFunction*) UObject::GObjObjects()->Data[ 31714 ];

	UTeamDataProvider_execRegeneratePlayerLists_Parms RegeneratePlayerLists_Parms;
	memcpy ( &RegeneratePlayerLists_Parms.AllPlayers, &AllPlayers, 0x10 );

	this->ProcessEvent ( pFnRegeneratePlayerLists, &RegeneratePlayerLists_Parms, NULL );
};

// Function Engine.UIDataProvider_Settings.OnSettingValueUpdated
// [0x00020002] 
// Parameters infos:
// struct FName                   SettingName                    ( CPF_Parm )

void UUIDataProvider_Settings::OnSettingValueUpdated ( struct FName SettingName )
{
	static UFunction* pFnOnSettingValueUpdated = NULL;

	if ( ! pFnOnSettingValueUpdated )
		pFnOnSettingValueUpdated = (UFunction*) UObject::GObjObjects()->Data[ 34466 ];

	UUIDataProvider_Settings_execOnSettingValueUpdated_Parms OnSettingValueUpdated_Parms;
	memcpy ( &OnSettingValueUpdated_Parms.SettingName, &SettingName, 0x8 );

	this->ProcessEvent ( pFnOnSettingValueUpdated, &OnSettingValueUpdated_Parms, NULL );
};

// Function Engine.UIDataProvider_Settings.ArrayProviderPropertyChanged
// [0x00024002] 
// Parameters infos:
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// struct FName                   PropTag                        ( CPF_OptionalParm | CPF_Parm )

void UUIDataProvider_Settings::ArrayProviderPropertyChanged ( class UUIDataProvider* SourceProvider, struct FName PropTag )
{
	static UFunction* pFnArrayProviderPropertyChanged = NULL;

	if ( ! pFnArrayProviderPropertyChanged )
		pFnArrayProviderPropertyChanged = (UFunction*) UObject::GObjObjects()->Data[ 34461 ];

	UUIDataProvider_Settings_execArrayProviderPropertyChanged_Parms ArrayProviderPropertyChanged_Parms;
	ArrayProviderPropertyChanged_Parms.SourceProvider = SourceProvider;
	memcpy ( &ArrayProviderPropertyChanged_Parms.PropTag, &PropTag, 0x8 );

	this->ProcessEvent ( pFnArrayProviderPropertyChanged, &ArrayProviderPropertyChanged_Parms, NULL );
};

// Function Engine.UIDataProvider_Settings.ProviderInstanceUnbound
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UObject*                 DataSourceInstance             ( CPF_Parm )

void UUIDataProvider_Settings::eventProviderInstanceUnbound ( class UObject* DataSourceInstance )
{
	static UFunction* pFnProviderInstanceUnbound = NULL;

	if ( ! pFnProviderInstanceUnbound )
		pFnProviderInstanceUnbound = (UFunction*) UObject::GObjObjects()->Data[ 34458 ];

	UUIDataProvider_Settings_eventProviderInstanceUnbound_Parms ProviderInstanceUnbound_Parms;
	ProviderInstanceUnbound_Parms.DataSourceInstance = DataSourceInstance;

	this->ProcessEvent ( pFnProviderInstanceUnbound, &ProviderInstanceUnbound_Parms, NULL );
};

// Function Engine.UIDataProvider_Settings.ProviderInstanceBound
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UObject*                 DataSourceInstance             ( CPF_Parm )

void UUIDataProvider_Settings::eventProviderInstanceBound ( class UObject* DataSourceInstance )
{
	static UFunction* pFnProviderInstanceBound = NULL;

	if ( ! pFnProviderInstanceBound )
		pFnProviderInstanceBound = (UFunction*) UObject::GObjObjects()->Data[ 34455 ];

	UUIDataProvider_Settings_eventProviderInstanceBound_Parms ProviderInstanceBound_Parms;
	ProviderInstanceBound_Parms.DataSourceInstance = DataSourceInstance;

	this->ProcessEvent ( pFnProviderInstanceBound, &ProviderInstanceBound_Parms, NULL );
};

// Function Engine.UIResourceDataProvider.InitializeProvider
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bIsEditor                      ( CPF_Parm )

void UUIResourceDataProvider::eventInitializeProvider ( unsigned long bIsEditor )
{
	static UFunction* pFnInitializeProvider = NULL;

	if ( ! pFnInitializeProvider )
		pFnInitializeProvider = (UFunction*) UObject::GObjObjects()->Data[ 26369 ];

	UUIResourceDataProvider_eventInitializeProvider_Parms InitializeProvider_Parms;
	InitializeProvider_Parms.bIsEditor = bIsEditor;

	this->ProcessEvent ( pFnInitializeProvider, &InitializeProvider_Parms, NULL );
};

// Function Engine.UIDataProvider_MenuItem.IsFiltered
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDataProvider_MenuItem::IsFiltered ( )
{
	static UFunction* pFnIsFiltered = NULL;

	if ( ! pFnIsFiltered )
		pFnIsFiltered = (UFunction*) UObject::GObjObjects()->Data[ 34196 ];

	UUIDataProvider_MenuItem_execIsFiltered_Parms IsFiltered_Parms;

	pFnIsFiltered->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFiltered, &IsFiltered_Parms, NULL );

	pFnIsFiltered->FunctionFlags |= 0x400;

	return IsFiltered_Parms.ReturnValue;
};

// Function Engine.UISettingsProvider.CleanupDataProvider
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUISettingsProvider::eventCleanupDataProvider ( )
{
	static UFunction* pFnCleanupDataProvider = NULL;

	if ( ! pFnCleanupDataProvider )
		pFnCleanupDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 30326 ];

	UUISettingsProvider_eventCleanupDataProvider_Parms CleanupDataProvider_Parms;

	this->ProcessEvent ( pFnCleanupDataProvider, &CleanupDataProvider_Parms, NULL );

	return CleanupDataProvider_Parms.ReturnValue;
};

// Function Engine.UISettingsProvider.OnModifiedProperty
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PropertyName                   ( CPF_Parm )
// class UUIObject*               Widget                         ( CPF_Parm )

bool UUISettingsProvider::OnModifiedProperty ( struct FName PropertyName, class UUIObject* Widget )
{
	static UFunction* pFnOnModifiedProperty = NULL;

	if ( ! pFnOnModifiedProperty )
		pFnOnModifiedProperty = (UFunction*) UObject::GObjObjects()->Data[ 30322 ];

	UUISettingsProvider_execOnModifiedProperty_Parms OnModifiedProperty_Parms;
	memcpy ( &OnModifiedProperty_Parms.PropertyName, &PropertyName, 0x8 );
	OnModifiedProperty_Parms.Widget = Widget;

	this->ProcessEvent ( pFnOnModifiedProperty, &OnModifiedProperty_Parms, NULL );

	return OnModifiedProperty_Parms.ReturnValue;
};

// Function Engine.UISettingsProvider.SavePropertyValue
// [0x00020000] 
// Parameters infos:
// struct FName                   PropertyName                   ( CPF_Parm )
// class UUIObject*               Widget                         ( CPF_Parm )

void UUISettingsProvider::SavePropertyValue ( struct FName PropertyName, class UUIObject* Widget )
{
	static UFunction* pFnSavePropertyValue = NULL;

	if ( ! pFnSavePropertyValue )
		pFnSavePropertyValue = (UFunction*) UObject::GObjObjects()->Data[ 30319 ];

	UUISettingsProvider_execSavePropertyValue_Parms SavePropertyValue_Parms;
	memcpy ( &SavePropertyValue_Parms.PropertyName, &PropertyName, 0x8 );
	SavePropertyValue_Parms.Widget = Widget;

	this->ProcessEvent ( pFnSavePropertyValue, &SavePropertyValue_Parms, NULL );
};

// Function Engine.UISettingsProvider.LoadPropertyValue
// [0x00020000] 
// Parameters infos:
// struct FName                   PropertyName                   ( CPF_Parm )
// class UUIObject*               Widget                         ( CPF_Parm )

void UUISettingsProvider::LoadPropertyValue ( struct FName PropertyName, class UUIObject* Widget )
{
	static UFunction* pFnLoadPropertyValue = NULL;

	if ( ! pFnLoadPropertyValue )
		pFnLoadPropertyValue = (UFunction*) UObject::GObjObjects()->Data[ 30316 ];

	UUISettingsProvider_execLoadPropertyValue_Parms LoadPropertyValue_Parms;
	memcpy ( &LoadPropertyValue_Parms.PropertyName, &PropertyName, 0x8 );
	LoadPropertyValue_Parms.Widget = Widget;

	this->ProcessEvent ( pFnLoadPropertyValue, &LoadPropertyValue_Parms, NULL );
};

// Function Engine.SessionSettingsProvider.CleanupDataProvider
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USessionSettingsProvider::eventCleanupDataProvider ( )
{
	static UFunction* pFnCleanupDataProvider = NULL;

	if ( ! pFnCleanupDataProvider )
		pFnCleanupDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 30341 ];

	USessionSettingsProvider_eventCleanupDataProvider_Parms CleanupDataProvider_Parms;

	this->ProcessEvent ( pFnCleanupDataProvider, &CleanupDataProvider_Parms, NULL );

	return CleanupDataProvider_Parms.ReturnValue;
};

// Function Engine.SessionSettingsProvider.IsValidDataSourceClass
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  PotentialDataSourceClass       ( CPF_Parm )

bool USessionSettingsProvider::eventIsValidDataSourceClass ( class UClass* PotentialDataSourceClass )
{
	static UFunction* pFnIsValidDataSourceClass = NULL;

	if ( ! pFnIsValidDataSourceClass )
		pFnIsValidDataSourceClass = (UFunction*) UObject::GObjObjects()->Data[ 30338 ];

	USessionSettingsProvider_eventIsValidDataSourceClass_Parms IsValidDataSourceClass_Parms;
	IsValidDataSourceClass_Parms.PotentialDataSourceClass = PotentialDataSourceClass;

	this->ProcessEvent ( pFnIsValidDataSourceClass, &IsValidDataSourceClass_Parms, NULL );

	return IsValidDataSourceClass_Parms.ReturnValue;
};

// Function Engine.SessionSettingsProvider.ProviderClientUnbound
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UClass*                  DataSourceClass                ( CPF_Parm )

void USessionSettingsProvider::eventProviderClientUnbound ( class UClass* DataSourceClass )
{
	static UFunction* pFnProviderClientUnbound = NULL;

	if ( ! pFnProviderClientUnbound )
		pFnProviderClientUnbound = (UFunction*) UObject::GObjObjects()->Data[ 30336 ];

	USessionSettingsProvider_eventProviderClientUnbound_Parms ProviderClientUnbound_Parms;
	ProviderClientUnbound_Parms.DataSourceClass = DataSourceClass;

	this->ProcessEvent ( pFnProviderClientUnbound, &ProviderClientUnbound_Parms, NULL );
};

// Function Engine.SessionSettingsProvider.ProviderClientBound
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UClass*                  DataSourceClass                ( CPF_Parm )

void USessionSettingsProvider::eventProviderClientBound ( class UClass* DataSourceClass )
{
	static UFunction* pFnProviderClientBound = NULL;

	if ( ! pFnProviderClientBound )
		pFnProviderClientBound = (UFunction*) UObject::GObjObjects()->Data[ 30334 ];

	USessionSettingsProvider_eventProviderClientBound_Parms ProviderClientBound_Parms;
	ProviderClientBound_Parms.DataSourceClass = DataSourceClass;

	this->ProcessEvent ( pFnProviderClientBound, &ProviderClientBound_Parms, NULL );
};

// Function Engine.SessionSettingsProvider.UnbindProviderClient
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USessionSettingsProvider::UnbindProviderClient ( )
{
	static UFunction* pFnUnbindProviderClient = NULL;

	if ( ! pFnUnbindProviderClient )
		pFnUnbindProviderClient = (UFunction*) UObject::GObjObjects()->Data[ 30332 ];

	USessionSettingsProvider_execUnbindProviderClient_Parms UnbindProviderClient_Parms;

	pFnUnbindProviderClient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnbindProviderClient, &UnbindProviderClient_Parms, NULL );

	pFnUnbindProviderClient->FunctionFlags |= 0x400;

	return UnbindProviderClient_Parms.ReturnValue;
};

// Function Engine.SessionSettingsProvider.BindProviderClient
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  DataSourceClass                ( CPF_Parm )

bool USessionSettingsProvider::BindProviderClient ( class UClass* DataSourceClass )
{
	static UFunction* pFnBindProviderClient = NULL;

	if ( ! pFnBindProviderClient )
		pFnBindProviderClient = (UFunction*) UObject::GObjObjects()->Data[ 30329 ];

	USessionSettingsProvider_execBindProviderClient_Parms BindProviderClient_Parms;
	BindProviderClient_Parms.DataSourceClass = DataSourceClass;

	pFnBindProviderClient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBindProviderClient, &BindProviderClient_Parms, NULL );

	pFnBindProviderClient->FunctionFlags |= 0x400;

	return BindProviderClient_Parms.ReturnValue;
};

// Function Engine.UIResourceCombinationProvider.ReplaceProviderCollection
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   TargetFieldTag                 ( CPF_Parm )
// struct TArray<struct FUIDataProviderField> out_Fields                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct TArray<class UUIDataProvider*> ReplacementProviders           ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIResourceCombinationProvider::ReplaceProviderCollection ( struct FName TargetFieldTag, struct TArray<struct FUIDataProviderField>* out_Fields, struct TArray<class UUIDataProvider*>* ReplacementProviders )
{
	static UFunction* pFnReplaceProviderCollection = NULL;

	if ( ! pFnReplaceProviderCollection )
		pFnReplaceProviderCollection = (UFunction*) UObject::GObjObjects()->Data[ 35754 ];

	UUIResourceCombinationProvider_execReplaceProviderCollection_Parms ReplaceProviderCollection_Parms;
	memcpy ( &ReplaceProviderCollection_Parms.TargetFieldTag, &TargetFieldTag, 0x8 );

	this->ProcessEvent ( pFnReplaceProviderCollection, &ReplaceProviderCollection_Parms, NULL );

	if ( out_Fields )
		memcpy ( out_Fields, &ReplaceProviderCollection_Parms.out_Fields, 0x10 );

	if ( ReplacementProviders )
		memcpy ( ReplacementProviders, &ReplaceProviderCollection_Parms.ReplacementProviders, 0x10 );

	return ReplaceProviderCollection_Parms.ReturnValue;
};

// Function Engine.UIResourceCombinationProvider.ReplaceProviderValue
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   TargetFieldTag                 ( CPF_Parm )
// class UUIDataProvider*         ReplacementProvider            ( CPF_Parm )
// struct TArray<struct FUIDataProviderField> out_Fields                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIResourceCombinationProvider::ReplaceProviderValue ( struct FName TargetFieldTag, class UUIDataProvider* ReplacementProvider, struct TArray<struct FUIDataProviderField>* out_Fields )
{
	static UFunction* pFnReplaceProviderValue = NULL;

	if ( ! pFnReplaceProviderValue )
		pFnReplaceProviderValue = (UFunction*) UObject::GObjObjects()->Data[ 35746 ];

	UUIResourceCombinationProvider_execReplaceProviderValue_Parms ReplaceProviderValue_Parms;
	memcpy ( &ReplaceProviderValue_Parms.TargetFieldTag, &TargetFieldTag, 0x8 );
	ReplaceProviderValue_Parms.ReplacementProvider = ReplacementProvider;

	this->ProcessEvent ( pFnReplaceProviderValue, &ReplaceProviderValue_Parms, NULL );

	if ( out_Fields )
		memcpy ( out_Fields, &ReplaceProviderValue_Parms.out_Fields, 0x10 );

	return ReplaceProviderValue_Parms.ReturnValue;
};

// Function Engine.UIResourceCombinationProvider.ClearProviderReferences
// [0x00020002] 
// Parameters infos:

void UUIResourceCombinationProvider::ClearProviderReferences ( )
{
	static UFunction* pFnClearProviderReferences = NULL;

	if ( ! pFnClearProviderReferences )
		pFnClearProviderReferences = (UFunction*) UObject::GObjObjects()->Data[ 35745 ];

	UUIResourceCombinationProvider_execClearProviderReferences_Parms ClearProviderReferences_Parms;

	this->ProcessEvent ( pFnClearProviderReferences, &ClearProviderReferences_Parms, NULL );
};

// Function Engine.UIResourceCombinationProvider.GetCellFieldValue
// [0x00424802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// struct FName                   CellTag                        ( CPF_Parm )
// int                            ListIndex                      ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_OptionalParm | CPF_Parm )
// struct FUIProviderFieldValue   out_FieldValue                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIResourceCombinationProvider::eventGetCellFieldValue ( struct FName FieldName, struct FName CellTag, int ListIndex, int ArrayIndex, struct FUIProviderFieldValue* out_FieldValue )
{
	static UFunction* pFnGetCellFieldValue = NULL;

	if ( ! pFnGetCellFieldValue )
		pFnGetCellFieldValue = (UFunction*) UObject::GObjObjects()->Data[ 35737 ];

	UUIResourceCombinationProvider_eventGetCellFieldValue_Parms GetCellFieldValue_Parms;
	memcpy ( &GetCellFieldValue_Parms.FieldName, &FieldName, 0x8 );
	memcpy ( &GetCellFieldValue_Parms.CellTag, &CellTag, 0x8 );
	GetCellFieldValue_Parms.ListIndex = ListIndex;
	GetCellFieldValue_Parms.ArrayIndex = ArrayIndex;

	this->ProcessEvent ( pFnGetCellFieldValue, &GetCellFieldValue_Parms, NULL );

	if ( out_FieldValue )
		memcpy ( out_FieldValue, &GetCellFieldValue_Parms.out_FieldValue, 0x68 );

	return GetCellFieldValue_Parms.ReturnValue;
};

// Function Engine.UIResourceCombinationProvider.GetCellFieldType
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// struct FName                   CellTag                        ( CPF_Parm )
// unsigned char                  FieldType                      ( CPF_Parm | CPF_OutParm )

bool UUIResourceCombinationProvider::eventGetCellFieldType ( struct FName FieldName, struct FName CellTag, unsigned char* FieldType )
{
	static UFunction* pFnGetCellFieldType = NULL;

	if ( ! pFnGetCellFieldType )
		pFnGetCellFieldType = (UFunction*) UObject::GObjObjects()->Data[ 35731 ];

	UUIResourceCombinationProvider_eventGetCellFieldType_Parms GetCellFieldType_Parms;
	memcpy ( &GetCellFieldType_Parms.FieldName, &FieldName, 0x8 );
	memcpy ( &GetCellFieldType_Parms.CellTag, &CellTag, 0x8 );

	this->ProcessEvent ( pFnGetCellFieldType, &GetCellFieldType_Parms, NULL );

	if ( FieldType )
		*FieldType = GetCellFieldType_Parms.FieldType;

	return GetCellFieldType_Parms.ReturnValue;
};

// Function Engine.UIResourceCombinationProvider.GetElementCellTags
// [0x00424802] ( FUNC_Event )
// Parameters infos:
// struct FName                   FieldName                      ( CPF_Parm )
// struct TArray<struct FName>    CellFieldTags                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct TArray<struct FString>  ColumnHeaderDisplayText        ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIResourceCombinationProvider::eventGetElementCellTags ( struct FName FieldName, struct TArray<struct FName>* CellFieldTags, struct TArray<struct FString>* ColumnHeaderDisplayText )
{
	static UFunction* pFnGetElementCellTags = NULL;

	if ( ! pFnGetElementCellTags )
		pFnGetElementCellTags = (UFunction*) UObject::GObjObjects()->Data[ 35725 ];

	UUIResourceCombinationProvider_eventGetElementCellTags_Parms GetElementCellTags_Parms;
	memcpy ( &GetElementCellTags_Parms.FieldName, &FieldName, 0x8 );

	this->ProcessEvent ( pFnGetElementCellTags, &GetElementCellTags_Parms, NULL );

	if ( CellFieldTags )
		memcpy ( CellFieldTags, &GetElementCellTags_Parms.CellFieldTags, 0x10 );

	if ( ColumnHeaderDisplayText )
		memcpy ( ColumnHeaderDisplayText, &GetElementCellTags_Parms.ColumnHeaderDisplayText, 0x10 );
};

// Function Engine.UIResourceCombinationProvider.GetElementCellValueProvider
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            ListIndex                      ( CPF_Parm )
// class UUIListElementCellProvider* out_ValueProvider              ( CPF_Parm | CPF_OutParm )

bool UUIResourceCombinationProvider::eventGetElementCellValueProvider ( struct FName FieldName, int ListIndex, class UUIListElementCellProvider** out_ValueProvider )
{
	static UFunction* pFnGetElementCellValueProvider = NULL;

	if ( ! pFnGetElementCellValueProvider )
		pFnGetElementCellValueProvider = (UFunction*) UObject::GObjObjects()->Data[ 35719 ];

	UUIResourceCombinationProvider_eventGetElementCellValueProvider_Parms GetElementCellValueProvider_Parms;
	memcpy ( &GetElementCellValueProvider_Parms.FieldName, &FieldName, 0x8 );
	GetElementCellValueProvider_Parms.ListIndex = ListIndex;

	this->ProcessEvent ( pFnGetElementCellValueProvider, &GetElementCellValueProvider_Parms, NULL );

	if ( out_ValueProvider )
		*out_ValueProvider = GetElementCellValueProvider_Parms.out_ValueProvider;

	return GetElementCellValueProvider_Parms.ReturnValue;
};

// Function Engine.UIResourceCombinationProvider.GetElementCellSchemaProvider
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// class UUIListElementCellProvider* out_SchemaProvider             ( CPF_Parm | CPF_OutParm )

bool UUIResourceCombinationProvider::eventGetElementCellSchemaProvider ( struct FName FieldName, class UUIListElementCellProvider** out_SchemaProvider )
{
	static UFunction* pFnGetElementCellSchemaProvider = NULL;

	if ( ! pFnGetElementCellSchemaProvider )
		pFnGetElementCellSchemaProvider = (UFunction*) UObject::GObjObjects()->Data[ 35714 ];

	UUIResourceCombinationProvider_eventGetElementCellSchemaProvider_Parms GetElementCellSchemaProvider_Parms;
	memcpy ( &GetElementCellSchemaProvider_Parms.FieldName, &FieldName, 0x8 );

	this->ProcessEvent ( pFnGetElementCellSchemaProvider, &GetElementCellSchemaProvider_Parms, NULL );

	if ( out_SchemaProvider )
		*out_SchemaProvider = GetElementCellSchemaProvider_Parms.out_SchemaProvider;

	return GetElementCellSchemaProvider_Parms.ReturnValue;
};

// Function Engine.UIResourceCombinationProvider.IsElementEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            CollectionIndex                ( CPF_Parm )

bool UUIResourceCombinationProvider::eventIsElementEnabled ( struct FName FieldName, int CollectionIndex )
{
	static UFunction* pFnIsElementEnabled = NULL;

	if ( ! pFnIsElementEnabled )
		pFnIsElementEnabled = (UFunction*) UObject::GObjObjects()->Data[ 35709 ];

	UUIResourceCombinationProvider_eventIsElementEnabled_Parms IsElementEnabled_Parms;
	memcpy ( &IsElementEnabled_Parms.FieldName, &FieldName, 0x8 );
	IsElementEnabled_Parms.CollectionIndex = CollectionIndex;

	this->ProcessEvent ( pFnIsElementEnabled, &IsElementEnabled_Parms, NULL );

	return IsElementEnabled_Parms.ReturnValue;
};

// Function Engine.UIResourceCombinationProvider.GetListElements
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// struct TArray<int>             out_Elements                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIResourceCombinationProvider::eventGetListElements ( struct FName FieldName, struct TArray<int>* out_Elements )
{
	static UFunction* pFnGetListElements = NULL;

	if ( ! pFnGetListElements )
		pFnGetListElements = (UFunction*) UObject::GObjObjects()->Data[ 35703 ];

	UUIResourceCombinationProvider_eventGetListElements_Parms GetListElements_Parms;
	memcpy ( &GetListElements_Parms.FieldName, &FieldName, 0x8 );

	this->ProcessEvent ( pFnGetListElements, &GetListElements_Parms, NULL );

	if ( out_Elements )
		memcpy ( out_Elements, &GetListElements_Parms.out_Elements, 0x10 );

	return GetListElements_Parms.ReturnValue;
};

// Function Engine.UIResourceCombinationProvider.GetElementCount
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )

int UUIResourceCombinationProvider::eventGetElementCount ( struct FName FieldName )
{
	static UFunction* pFnGetElementCount = NULL;

	if ( ! pFnGetElementCount )
		pFnGetElementCount = (UFunction*) UObject::GObjObjects()->Data[ 35699 ];

	UUIResourceCombinationProvider_eventGetElementCount_Parms GetElementCount_Parms;
	memcpy ( &GetElementCount_Parms.FieldName, &FieldName, 0x8 );

	this->ProcessEvent ( pFnGetElementCount, &GetElementCount_Parms, NULL );

	return GetElementCount_Parms.ReturnValue;
};

// Function Engine.UIResourceCombinationProvider.GetElementProviderTags
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct TArray<struct FName>    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct TArray<struct FName> UUIResourceCombinationProvider::eventGetElementProviderTags ( )
{
	static UFunction* pFnGetElementProviderTags = NULL;

	if ( ! pFnGetElementProviderTags )
		pFnGetElementProviderTags = (UFunction*) UObject::GObjObjects()->Data[ 35694 ];

	UUIResourceCombinationProvider_eventGetElementProviderTags_Parms GetElementProviderTags_Parms;

	this->ProcessEvent ( pFnGetElementProviderTags, &GetElementProviderTags_Parms, NULL );

	return GetElementProviderTags_Parms.ReturnValue;
};

// Function Engine.UIResourceCombinationProvider.InitializeProvider
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bIsEditor                      ( CPF_Parm )
// class UUIResourceDataProvider* InStaticResourceProvider       ( CPF_Parm )
// class UUIDataProvider_OnlineProfileSettings* InProfileProvider              ( CPF_Parm )

void UUIResourceCombinationProvider::eventInitializeProvider ( unsigned long bIsEditor, class UUIResourceDataProvider* InStaticResourceProvider, class UUIDataProvider_OnlineProfileSettings* InProfileProvider )
{
	static UFunction* pFnInitializeProvider = NULL;

	if ( ! pFnInitializeProvider )
		pFnInitializeProvider = (UFunction*) UObject::GObjObjects()->Data[ 35688 ];

	UUIResourceCombinationProvider_eventInitializeProvider_Parms InitializeProvider_Parms;
	InitializeProvider_Parms.bIsEditor = bIsEditor;
	InitializeProvider_Parms.InStaticResourceProvider = InStaticResourceProvider;
	InitializeProvider_Parms.InProfileProvider = InProfileProvider;

	this->ProcessEvent ( pFnInitializeProvider, &InitializeProvider_Parms, NULL );
};

// Function Engine.GameUISceneClient.FindUIAnimation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIAnimationSeq*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NameOfSequence                 ( CPF_Parm )

class UUIAnimationSeq* UGameUISceneClient::FindUIAnimation ( struct FName NameOfSequence )
{
	static UFunction* pFnFindUIAnimation = NULL;

	if ( ! pFnFindUIAnimation )
		pFnFindUIAnimation = (UFunction*) UObject::GObjObjects()->Data[ 22107 ];

	UGameUISceneClient_execFindUIAnimation_Parms FindUIAnimation_Parms;
	memcpy ( &FindUIAnimation_Parms.NameOfSequence, &NameOfSequence, 0x8 );

	pFnFindUIAnimation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindUIAnimation, &FindUIAnimation_Parms, NULL );

	pFnFindUIAnimation->FunctionFlags |= 0x400;

	return FindUIAnimation_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.ShowMenuProgression
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameUISceneClient::ShowMenuProgression ( )
{
	static UFunction* pFnShowMenuProgression = NULL;

	if ( ! pFnShowMenuProgression )
		pFnShowMenuProgression = (UFunction*) UObject::GObjObjects()->Data[ 22093 ];

	UGameUISceneClient_execShowMenuProgression_Parms ShowMenuProgression_Parms;

	this->ProcessEvent ( pFnShowMenuProgression, &ShowMenuProgression_Parms, NULL );
};

// Function Engine.GameUISceneClient.DebugShowMessage
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Aliases                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Title                          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Question                       ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UGameUISceneClient::DebugShowMessage ( struct FString Message, struct FString Aliases, struct FString Title, struct FString Question )
{
	static UFunction* pFnDebugShowMessage = NULL;

	if ( ! pFnDebugShowMessage )
		pFnDebugShowMessage = (UFunction*) UObject::GObjObjects()->Data[ 22083 ];

	UGameUISceneClient_execDebugShowMessage_Parms DebugShowMessage_Parms;
	memcpy ( &DebugShowMessage_Parms.Message, &Message, 0x10 );
	memcpy ( &DebugShowMessage_Parms.Aliases, &Aliases, 0x10 );
	memcpy ( &DebugShowMessage_Parms.Title, &Title, 0x10 );
	memcpy ( &DebugShowMessage_Parms.Question, &Question, 0x10 );

	this->ProcessEvent ( pFnDebugShowMessage, &DebugShowMessage_Parms, NULL );
};

// Function Engine.GameUISceneClient.DebugMessageOptionSelected
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIMessageBoxBase*       Sender                         ( CPF_Parm )
// struct FName                   SelectedInputAlias             ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UGameUISceneClient::DebugMessageOptionSelected ( class UUIMessageBoxBase* Sender, struct FName SelectedInputAlias, int PlayerIndex )
{
	static UFunction* pFnDebugMessageOptionSelected = NULL;

	if ( ! pFnDebugMessageOptionSelected )
		pFnDebugMessageOptionSelected = (UFunction*) UObject::GObjObjects()->Data[ 22078 ];

	UGameUISceneClient_execDebugMessageOptionSelected_Parms DebugMessageOptionSelected_Parms;
	DebugMessageOptionSelected_Parms.Sender = Sender;
	memcpy ( &DebugMessageOptionSelected_Parms.SelectedInputAlias, &SelectedInputAlias, 0x8 );
	DebugMessageOptionSelected_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnDebugMessageOptionSelected, &DebugMessageOptionSelected_Parms, NULL );

	return DebugMessageOptionSelected_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.ShowDataStores
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bVerbose                       ( CPF_OptionalParm | CPF_Parm )

void UGameUISceneClient::ShowDataStores ( unsigned long bVerbose )
{
	static UFunction* pFnShowDataStores = NULL;

	if ( ! pFnShowDataStores )
		pFnShowDataStores = (UFunction*) UObject::GObjObjects()->Data[ 22076 ];

	UGameUISceneClient_execShowDataStores_Parms ShowDataStores_Parms;
	ShowDataStores_Parms.bVerbose = bVerbose;

	this->ProcessEvent ( pFnShowDataStores, &ShowDataStores_Parms, NULL );
};

// Function Engine.GameUISceneClient.RefreshFormatting
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameUISceneClient::RefreshFormatting ( )
{
	static UFunction* pFnRefreshFormatting = NULL;

	if ( ! pFnRefreshFormatting )
		pFnRefreshFormatting = (UFunction*) UObject::GObjObjects()->Data[ 22073 ];

	UGameUISceneClient_execRefreshFormatting_Parms RefreshFormatting_Parms;

	this->ProcessEvent ( pFnRefreshFormatting, &RefreshFormatting_Parms, NULL );
};

// Function Engine.GameUISceneClient.ShowDataStoreField
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 DataStoreMarkup                ( CPF_Parm | CPF_NeedCtorLink )

void UGameUISceneClient::ShowDataStoreField ( struct FString DataStoreMarkup )
{
	static UFunction* pFnShowDataStoreField = NULL;

	if ( ! pFnShowDataStoreField )
		pFnShowDataStoreField = (UFunction*) UObject::GObjObjects()->Data[ 22070 ];

	UGameUISceneClient_execShowDataStoreField_Parms ShowDataStoreField_Parms;
	memcpy ( &ShowDataStoreField_Parms.DataStoreMarkup, &DataStoreMarkup, 0x10 );

	this->ProcessEvent ( pFnShowDataStoreField, &ShowDataStoreField_Parms, NULL );
};

// Function Engine.GameUISceneClient.CloseMenu
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   SceneName                      ( CPF_OptionalParm | CPF_Parm )

void UGameUISceneClient::CloseMenu ( struct FName SceneName )
{
	static UFunction* pFnCloseMenu = NULL;

	if ( ! pFnCloseMenu )
		pFnCloseMenu = (UFunction*) UObject::GObjObjects()->Data[ 22064 ];

	UGameUISceneClient_execCloseMenu_Parms CloseMenu_Parms;
	memcpy ( &CloseMenu_Parms.SceneName, &SceneName, 0x8 );

	this->ProcessEvent ( pFnCloseMenu, &CloseMenu_Parms, NULL );
};

// Function Engine.GameUISceneClient.OpenMenu
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 MenuPath                       ( CPF_Parm | CPF_NeedCtorLink )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

void UGameUISceneClient::OpenMenu ( struct FString MenuPath, int PlayerIndex )
{
	static UFunction* pFnOpenMenu = NULL;

	if ( ! pFnOpenMenu )
		pFnOpenMenu = (UFunction*) UObject::GObjObjects()->Data[ 22059 ];

	UGameUISceneClient_execOpenMenu_Parms OpenMenu_Parms;
	memcpy ( &OpenMenu_Parms.MenuPath, &MenuPath, 0x10 );
	OpenMenu_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOpenMenu, &OpenMenu_Parms, NULL );
};

// Function Engine.GameUISceneClient.CreateMenu
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// class UClass*                  SceneClass                     ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

void UGameUISceneClient::CreateMenu ( class UClass* SceneClass, int PlayerIndex )
{
	static UFunction* pFnCreateMenu = NULL;

	if ( ! pFnCreateMenu )
		pFnCreateMenu = (UFunction*) UObject::GObjObjects()->Data[ 22054 ];

	UGameUISceneClient_execCreateMenu_Parms CreateMenu_Parms;
	CreateMenu_Parms.SceneClass = SceneClass;
	CreateMenu_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnCreateMenu, &CreateMenu_Parms, NULL );
};

// Function Engine.GameUISceneClient.ToggleDebugInput
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_OptionalParm | CPF_Parm )

void UGameUISceneClient::ToggleDebugInput ( unsigned long bEnable )
{
	static UFunction* pFnToggleDebugInput = NULL;

	if ( ! pFnToggleDebugInput )
		pFnToggleDebugInput = (UFunction*) UObject::GObjObjects()->Data[ 22051 ];

	UGameUISceneClient_execToggleDebugInput_Parms ToggleDebugInput_Parms;
	ToggleDebugInput_Parms.bEnable = bEnable;

	this->ProcessEvent ( pFnToggleDebugInput, &ToggleDebugInput_Parms, NULL );
};

// Function Engine.GameUISceneClient.ShowMenuStates
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameUISceneClient::ShowMenuStates ( )
{
	static UFunction* pFnShowMenuStates = NULL;

	if ( ! pFnShowMenuStates )
		pFnShowMenuStates = (UFunction*) UObject::GObjObjects()->Data[ 22049 ];

	UGameUISceneClient_execShowMenuStates_Parms ShowMenuStates_Parms;

	this->ProcessEvent ( pFnShowMenuStates, &ShowMenuStates_Parms, NULL );
};

// Function Engine.GameUISceneClient.ShowRenderBounds
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameUISceneClient::ShowRenderBounds ( )
{
	static UFunction* pFnShowRenderBounds = NULL;

	if ( ! pFnShowRenderBounds )
		pFnShowRenderBounds = (UFunction*) UObject::GObjObjects()->Data[ 22047 ];

	UGameUISceneClient_execShowRenderBounds_Parms ShowRenderBounds_Parms;

	this->ProcessEvent ( pFnShowRenderBounds, &ShowRenderBounds_Parms, NULL );
};

// Function Engine.GameUISceneClient.ShowDockingStacks
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameUISceneClient::ShowDockingStacks ( )
{
	static UFunction* pFnShowDockingStacks = NULL;

	if ( ! pFnShowDockingStacks )
		pFnShowDockingStacks = (UFunction*) UObject::GObjObjects()->Data[ 22044 ];

	UGameUISceneClient_execShowDockingStacks_Parms ShowDockingStacks_Parms;

	this->ProcessEvent ( pFnShowDockingStacks, &ShowDockingStacks_Parms, NULL );
};

// Function Engine.GameUISceneClient.ClearUIMessageScene
// [0x00026003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SceneTag                       ( CPF_Parm )
// class ULocalPlayer*            ScenePlayerOwner               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bCloseChildScenes              ( CPF_OptionalParm | CPF_Parm )

bool UGameUISceneClient::ClearUIMessageScene ( struct FName SceneTag, class ULocalPlayer* ScenePlayerOwner, unsigned long bCloseChildScenes )
{
	static UFunction* pFnClearUIMessageScene = NULL;

	if ( ! pFnClearUIMessageScene )
		pFnClearUIMessageScene = (UFunction*) UObject::GObjObjects()->Data[ 22036 ];

	UGameUISceneClient_execClearUIMessageScene_Parms ClearUIMessageScene_Parms;
	memcpy ( &ClearUIMessageScene_Parms.SceneTag, &SceneTag, 0x8 );
	ClearUIMessageScene_Parms.ScenePlayerOwner = ScenePlayerOwner;
	ClearUIMessageScene_Parms.bCloseChildScenes = bCloseChildScenes;

	this->ProcessEvent ( pFnClearUIMessageScene, &ClearUIMessageScene_Parms, NULL );

	return ClearUIMessageScene_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.ShowUIMessage
// [0x00426002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SceneTag                       ( CPF_Parm )
// struct FString                 Title                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Question                       ( CPF_Parm | CPF_NeedCtorLink )
// struct TArray<struct FName>    ButtonAliases                  ( CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         SelectionCallback              ( CPF_Parm | CPF_NeedCtorLink )
// class ULocalPlayer*            ScenePlayerOwner               ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  ForcedPriority                 ( CPF_OptionalParm | CPF_Parm )
// class UUIMessageBoxBase*       out_CreatedScene               ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UGameUISceneClient::ShowUIMessage ( struct FName SceneTag, struct FString Title, struct FString Message, struct FString Question, struct TArray<struct FName> ButtonAliases, struct FScriptDelegate SelectionCallback, class ULocalPlayer* ScenePlayerOwner, unsigned char ForcedPriority, class UUIMessageBoxBase** out_CreatedScene )
{
	static UFunction* pFnShowUIMessage = NULL;

	if ( ! pFnShowUIMessage )
		pFnShowUIMessage = (UFunction*) UObject::GObjObjects()->Data[ 22015 ];

	UGameUISceneClient_execShowUIMessage_Parms ShowUIMessage_Parms;
	memcpy ( &ShowUIMessage_Parms.SceneTag, &SceneTag, 0x8 );
	memcpy ( &ShowUIMessage_Parms.Title, &Title, 0x10 );
	memcpy ( &ShowUIMessage_Parms.Message, &Message, 0x10 );
	memcpy ( &ShowUIMessage_Parms.Question, &Question, 0x10 );
	memcpy ( &ShowUIMessage_Parms.ButtonAliases, &ButtonAliases, 0x10 );
	memcpy ( &ShowUIMessage_Parms.SelectionCallback, &SelectionCallback, 0x10 );
	ShowUIMessage_Parms.ScenePlayerOwner = ScenePlayerOwner;
	ShowUIMessage_Parms.ForcedPriority = ForcedPriority;

	this->ProcessEvent ( pFnShowUIMessage, &ShowUIMessage_Parms, NULL );

	if ( out_CreatedScene )
		*out_CreatedScene = ShowUIMessage_Parms.out_CreatedScene;

	return ShowUIMessage_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.CreateUIMessageBox
// [0x00026002] 
// Parameters infos:
// class UUIMessageBoxBase*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SceneTag                       ( CPF_Parm )
// class UClass*                  CustomMessageBoxClass          ( CPF_OptionalParm | CPF_Parm )
// class UUIMessageBoxBase*       SceneTemplate                  ( CPF_OptionalParm | CPF_Parm )

class UUIMessageBoxBase* UGameUISceneClient::CreateUIMessageBox ( struct FName SceneTag, class UClass* CustomMessageBoxClass, class UUIMessageBoxBase* SceneTemplate )
{
	static UFunction* pFnCreateUIMessageBox = NULL;

	if ( ! pFnCreateUIMessageBox )
		pFnCreateUIMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 22006 ];

	UGameUISceneClient_execCreateUIMessageBox_Parms CreateUIMessageBox_Parms;
	memcpy ( &CreateUIMessageBox_Parms.SceneTag, &SceneTag, 0x8 );
	CreateUIMessageBox_Parms.CustomMessageBoxClass = CustomMessageBoxClass;
	CreateUIMessageBox_Parms.SceneTemplate = SceneTemplate;

	this->ProcessEvent ( pFnCreateUIMessageBox, &CreateUIMessageBox_Parms, NULL );

	return CreateUIMessageBox_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.RestoreMenuProgression
// [0x00024002] 
// Parameters infos:
// class UUIScene*                BaseScene                      ( CPF_OptionalParm | CPF_Parm )

void UGameUISceneClient::RestoreMenuProgression ( class UUIScene* BaseScene )
{
	static UFunction* pFnRestoreMenuProgression = NULL;

	if ( ! pFnRestoreMenuProgression )
		pFnRestoreMenuProgression = (UFunction*) UObject::GObjObjects()->Data[ 21987 ];

	UGameUISceneClient_execRestoreMenuProgression_Parms RestoreMenuProgression_Parms;
	RestoreMenuProgression_Parms.BaseScene = BaseScene;

	this->ProcessEvent ( pFnRestoreMenuProgression, &RestoreMenuProgression_Parms, NULL );
};

// Function Engine.GameUISceneClient.ClearMenuProgression
// [0x00020002] 
// Parameters infos:

void UGameUISceneClient::ClearMenuProgression ( )
{
	static UFunction* pFnClearMenuProgression = NULL;

	if ( ! pFnClearMenuProgression )
		pFnClearMenuProgression = (UFunction*) UObject::GObjObjects()->Data[ 21983 ];

	UGameUISceneClient_execClearMenuProgression_Parms ClearMenuProgression_Parms;

	this->ProcessEvent ( pFnClearMenuProgression, &ClearMenuProgression_Parms, NULL );
};

// Function Engine.GameUISceneClient.SaveMenuProgression
// [0x00020002] 
// Parameters infos:

void UGameUISceneClient::SaveMenuProgression ( )
{
	static UFunction* pFnSaveMenuProgression = NULL;

	if ( ! pFnSaveMenuProgression )
		pFnSaveMenuProgression = (UFunction*) UObject::GObjObjects()->Data[ 21966 ];

	UGameUISceneClient_execSaveMenuProgression_Parms SaveMenuProgression_Parms;

	this->ProcessEvent ( pFnSaveMenuProgression, &SaveMenuProgression_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyStorageDeviceChanged
// [0x00020002] 
// Parameters infos:

void UGameUISceneClient::NotifyStorageDeviceChanged ( )
{
	static UFunction* pFnNotifyStorageDeviceChanged = NULL;

	if ( ! pFnNotifyStorageDeviceChanged )
		pFnNotifyStorageDeviceChanged = (UFunction*) UObject::GObjObjects()->Data[ 21964 ];

	UGameUISceneClient_execNotifyStorageDeviceChanged_Parms NotifyStorageDeviceChanged_Parms;

	this->ProcessEvent ( pFnNotifyStorageDeviceChanged, &NotifyStorageDeviceChanged_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyPlayerRemoved
// [0x00020002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            RemovedPlayer                  ( CPF_Parm )

void UGameUISceneClient::NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer )
{
	static UFunction* pFnNotifyPlayerRemoved = NULL;

	if ( ! pFnNotifyPlayerRemoved )
		pFnNotifyPlayerRemoved = (UFunction*) UObject::GObjObjects()->Data[ 21958 ];

	UGameUISceneClient_execNotifyPlayerRemoved_Parms NotifyPlayerRemoved_Parms;
	NotifyPlayerRemoved_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerRemoved_Parms.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyPlayerAdded
// [0x00020002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            AddedPlayer                    ( CPF_Parm )

void UGameUISceneClient::NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer )
{
	static UFunction* pFnNotifyPlayerAdded = NULL;

	if ( ! pFnNotifyPlayerAdded )
		pFnNotifyPlayerAdded = (UFunction*) UObject::GObjObjects()->Data[ 21952 ];

	UGameUISceneClient_execNotifyPlayerAdded_Parms NotifyPlayerAdded_Parms;
	NotifyPlayerAdded_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerAdded_Parms.AddedPlayer = AddedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerAdded, &NotifyPlayerAdded_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyLinkStatusChanged
// [0x00020002] 
// Parameters infos:
// unsigned long                  bConnected                     ( CPF_Parm )

void UGameUISceneClient::NotifyLinkStatusChanged ( unsigned long bConnected )
{
	static UFunction* pFnNotifyLinkStatusChanged = NULL;

	if ( ! pFnNotifyLinkStatusChanged )
		pFnNotifyLinkStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 21949 ];

	UGameUISceneClient_execNotifyLinkStatusChanged_Parms NotifyLinkStatusChanged_Parms;
	NotifyLinkStatusChanged_Parms.bConnected = bConnected;

	this->ProcessEvent ( pFnNotifyLinkStatusChanged, &NotifyLinkStatusChanged_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyOnlineServiceStatusChanged
// [0x00020002] 
// Parameters infos:
// unsigned char                  NewConnectionStatus            ( CPF_Parm )

void UGameUISceneClient::NotifyOnlineServiceStatusChanged ( unsigned char NewConnectionStatus )
{
	static UFunction* pFnNotifyOnlineServiceStatusChanged = NULL;

	if ( ! pFnNotifyOnlineServiceStatusChanged )
		pFnNotifyOnlineServiceStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 21946 ];

	UGameUISceneClient_execNotifyOnlineServiceStatusChanged_Parms NotifyOnlineServiceStatusChanged_Parms;
	NotifyOnlineServiceStatusChanged_Parms.NewConnectionStatus = NewConnectionStatus;

	this->ProcessEvent ( pFnNotifyOnlineServiceStatusChanged, &NotifyOnlineServiceStatusChanged_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyControllerChanged
// [0x00020002] 
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )
// unsigned long                  bConnected                     ( CPF_Parm )

void UGameUISceneClient::NotifyControllerChanged ( int ControllerId, unsigned long bConnected )
{
	static UFunction* pFnNotifyControllerChanged = NULL;

	if ( ! pFnNotifyControllerChanged )
		pFnNotifyControllerChanged = (UFunction*) UObject::GObjObjects()->Data[ 21942 ];

	UGameUISceneClient_execNotifyControllerChanged_Parms NotifyControllerChanged_Parms;
	NotifyControllerChanged_Parms.ControllerId = ControllerId;
	NotifyControllerChanged_Parms.bConnected = bConnected;

	this->ProcessEvent ( pFnNotifyControllerChanged, &NotifyControllerChanged_Parms, NULL );
};

// Function Engine.GameUISceneClient.OnLoginChange
// [0x00020002] 
// Parameters infos:
// unsigned char                  ControllerId                   ( CPF_Parm )

void UGameUISceneClient::OnLoginChange ( unsigned char ControllerId )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 21934 ];

	UGameUISceneClient_execOnLoginChange_Parms OnLoginChange_Parms;
	OnLoginChange_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyGameSessionEnded
// [0x00020002] 
// Parameters infos:

void UGameUISceneClient::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 21927 ];

	UGameUISceneClient_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyClientTravel
// [0x00020002] 
// Parameters infos:
// class APlayerController*       TravellingPlayer               ( CPF_Parm )
// struct FString                 TravelURL                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  TravelType                     ( CPF_Parm )
// unsigned long                  bIsSeamlessTravel              ( CPF_Parm )

void UGameUISceneClient::NotifyClientTravel ( class APlayerController* TravellingPlayer, struct FString TravelURL, unsigned char TravelType, unsigned long bIsSeamlessTravel )
{
	static UFunction* pFnNotifyClientTravel = NULL;

	if ( ! pFnNotifyClientTravel )
		pFnNotifyClientTravel = (UFunction*) UObject::GObjObjects()->Data[ 21916 ];

	UGameUISceneClient_execNotifyClientTravel_Parms NotifyClientTravel_Parms;
	NotifyClientTravel_Parms.TravellingPlayer = TravellingPlayer;
	memcpy ( &NotifyClientTravel_Parms.TravelURL, &TravelURL, 0x10 );
	NotifyClientTravel_Parms.TravelType = TravelType;
	NotifyClientTravel_Parms.bIsSeamlessTravel = bIsSeamlessTravel;

	this->ProcessEvent ( pFnNotifyClientTravel, &NotifyClientTravel_Parms, NULL );
};

// Function Engine.GameUISceneClient.IsAllowedToModifyPlayerCount
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameUISceneClient::IsAllowedToModifyPlayerCount ( )
{
	static UFunction* pFnIsAllowedToModifyPlayerCount = NULL;

	if ( ! pFnIsAllowedToModifyPlayerCount )
		pFnIsAllowedToModifyPlayerCount = (UFunction*) UObject::GObjObjects()->Data[ 21913 ];

	UGameUISceneClient_execIsAllowedToModifyPlayerCount_Parms IsAllowedToModifyPlayerCount_Parms;

	this->ProcessEvent ( pFnIsAllowedToModifyPlayerCount, &IsAllowedToModifyPlayerCount_Parms, NULL );

	return IsAllowedToModifyPlayerCount_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.SynchronizePlayers
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            MaxPlayersAllowed              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAllowJoins                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAllowRemoval                  ( CPF_OptionalParm | CPF_Parm )

void UGameUISceneClient::eventSynchronizePlayers ( int MaxPlayersAllowed, unsigned long bAllowJoins, unsigned long bAllowRemoval )
{
	static UFunction* pFnSynchronizePlayers = NULL;

	if ( ! pFnSynchronizePlayers )
		pFnSynchronizePlayers = (UFunction*) UObject::GObjObjects()->Data[ 21897 ];

	UGameUISceneClient_eventSynchronizePlayers_Parms SynchronizePlayers_Parms;
	SynchronizePlayers_Parms.MaxPlayersAllowed = MaxPlayersAllowed;
	SynchronizePlayers_Parms.bAllowJoins = bAllowJoins;
	SynchronizePlayers_Parms.bAllowRemoval = bAllowRemoval;

	this->ProcessEvent ( pFnSynchronizePlayers, &SynchronizePlayers_Parms, NULL );
};

// Function Engine.GameUISceneClient.InitializeSceneClient
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UGameUISceneClient::eventInitializeSceneClient ( )
{
	static UFunction* pFnInitializeSceneClient = NULL;

	if ( ! pFnInitializeSceneClient )
		pFnInitializeSceneClient = (UFunction*) UObject::GObjObjects()->Data[ 21895 ];

	UGameUISceneClient_eventInitializeSceneClient_Parms InitializeSceneClient_Parms;

	this->ProcessEvent ( pFnInitializeSceneClient, &InitializeSceneClient_Parms, NULL );
};

// Function Engine.GameUISceneClient.CanShowToolTips
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameUISceneClient::eventCanShowToolTips ( )
{
	static UFunction* pFnCanShowToolTips = NULL;

	if ( ! pFnCanShowToolTips )
		pFnCanShowToolTips = (UFunction*) UObject::GObjObjects()->Data[ 21892 ];

	UGameUISceneClient_eventCanShowToolTips_Parms CanShowToolTips_Parms;

	this->ProcessEvent ( pFnCanShowToolTips, &CanShowToolTips_Parms, NULL );

	return CanShowToolTips_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.PauseGame
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bDesiredPauseState             ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

void UGameUISceneClient::eventPauseGame ( unsigned long bDesiredPauseState, int PlayerIndex )
{
	static UFunction* pFnPauseGame = NULL;

	if ( ! pFnPauseGame )
		pFnPauseGame = (UFunction*) UObject::GObjObjects()->Data[ 21888 ];

	UGameUISceneClient_eventPauseGame_Parms PauseGame_Parms;
	PauseGame_Parms.bDesiredPauseState = bDesiredPauseState;
	PauseGame_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnPauseGame, &PauseGame_Parms, NULL );
};

// Function Engine.GameUISceneClient.SetActiveControl
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               NewActiveControl               ( CPF_Parm )

bool UGameUISceneClient::SetActiveControl ( class UUIObject* NewActiveControl )
{
	static UFunction* pFnSetActiveControl = NULL;

	if ( ! pFnSetActiveControl )
		pFnSetActiveControl = (UFunction*) UObject::GObjObjects()->Data[ 21885 ];

	UGameUISceneClient_execSetActiveControl_Parms SetActiveControl_Parms;
	SetActiveControl_Parms.NewActiveControl = NewActiveControl;

	pFnSetActiveControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveControl, &SetActiveControl_Parms, NULL );

	pFnSetActiveControl->FunctionFlags |= 0x400;

	return SetActiveControl_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.CanUnpauseInternalUI
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameUISceneClient::CanUnpauseInternalUI ( )
{
	static UFunction* pFnCanUnpauseInternalUI = NULL;

	if ( ! pFnCanUnpauseInternalUI )
		pFnCanUnpauseInternalUI = (UFunction*) UObject::GObjObjects()->Data[ 21883 ];

	UGameUISceneClient_execCanUnpauseInternalUI_Parms CanUnpauseInternalUI_Parms;

	pFnCanUnpauseInternalUI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanUnpauseInternalUI, &CanUnpauseInternalUI_Parms, NULL );

	pFnCanUnpauseInternalUI->FunctionFlags |= 0x400;

	return CanUnpauseInternalUI_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.RequestCursorRenderUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UGameUISceneClient::RequestCursorRenderUpdate ( )
{
	static UFunction* pFnRequestCursorRenderUpdate = NULL;

	if ( ! pFnRequestCursorRenderUpdate )
		pFnRequestCursorRenderUpdate = (UFunction*) UObject::GObjObjects()->Data[ 21882 ];

	UGameUISceneClient_execRequestCursorRenderUpdate_Parms RequestCursorRenderUpdate_Parms;

	pFnRequestCursorRenderUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestCursorRenderUpdate, &RequestCursorRenderUpdate_Parms, NULL );

	pFnRequestCursorRenderUpdate->FunctionFlags |= 0x400;
};

// Function Engine.GameUISceneClient.RequestInputProcessingUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UGameUISceneClient::RequestInputProcessingUpdate ( )
{
	static UFunction* pFnRequestInputProcessingUpdate = NULL;

	if ( ! pFnRequestInputProcessingUpdate )
		pFnRequestInputProcessingUpdate = (UFunction*) UObject::GObjObjects()->Data[ 21881 ];

	UGameUISceneClient_execRequestInputProcessingUpdate_Parms RequestInputProcessingUpdate_Parms;

	pFnRequestInputProcessingUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestInputProcessingUpdate, &RequestInputProcessingUpdate_Parms, NULL );

	pFnRequestInputProcessingUpdate->FunctionFlags |= 0x400;
};

// Function Engine.GameUISceneClient.AllActiveScenes
// [0x00424405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  SceneClass                     ( CPF_Parm )
// unsigned long                  bIterateBackwards              ( CPF_OptionalParm | CPF_Parm )
// int                            StartingIndex                  ( CPF_OptionalParm | CPF_Parm )
// int                            SceneFilterMask                ( CPF_OptionalParm | CPF_Parm )
// class UUIScene*                OutScene                       ( CPF_Parm | CPF_OutParm )

void UGameUISceneClient::AllActiveScenes ( class UClass* SceneClass, unsigned long bIterateBackwards, int StartingIndex, int SceneFilterMask, class UUIScene** OutScene )
{
	static UFunction* pFnAllActiveScenes = NULL;

	if ( ! pFnAllActiveScenes )
		pFnAllActiveScenes = (UFunction*) UObject::GObjObjects()->Data[ 21875 ];

	UGameUISceneClient_execAllActiveScenes_Parms AllActiveScenes_Parms;
	AllActiveScenes_Parms.SceneClass = SceneClass;
	AllActiveScenes_Parms.bIterateBackwards = bIterateBackwards;
	AllActiveScenes_Parms.StartingIndex = StartingIndex;
	AllActiveScenes_Parms.SceneFilterMask = SceneFilterMask;

	pFnAllActiveScenes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllActiveScenes, &AllActiveScenes_Parms, NULL );

	pFnAllActiveScenes->FunctionFlags |= 0x400;

	if ( OutScene )
		*OutScene = AllActiveScenes_Parms.OutScene;
};

// Function Engine.GameUISceneClient.GetNextSceneFromIndex
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StartingSceneIndex             ( CPF_Parm )
// class ULocalPlayer*            MatchingPlayerOwner            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreUnfocusedScenes         ( CPF_OptionalParm | CPF_Parm )

class UUIScene* UGameUISceneClient::GetNextSceneFromIndex ( int StartingSceneIndex, class ULocalPlayer* MatchingPlayerOwner, unsigned long bIgnoreUnfocusedScenes )
{
	static UFunction* pFnGetNextSceneFromIndex = NULL;

	if ( ! pFnGetNextSceneFromIndex )
		pFnGetNextSceneFromIndex = (UFunction*) UObject::GObjObjects()->Data[ 21870 ];

	UGameUISceneClient_execGetNextSceneFromIndex_Parms GetNextSceneFromIndex_Parms;
	GetNextSceneFromIndex_Parms.StartingSceneIndex = StartingSceneIndex;
	GetNextSceneFromIndex_Parms.MatchingPlayerOwner = MatchingPlayerOwner;
	GetNextSceneFromIndex_Parms.bIgnoreUnfocusedScenes = bIgnoreUnfocusedScenes;

	pFnGetNextSceneFromIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNextSceneFromIndex, &GetNextSceneFromIndex_Parms, NULL );

	pFnGetNextSceneFromIndex->FunctionFlags |= 0x400;

	return GetNextSceneFromIndex_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.GetNextScene
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                SourceScene                    ( CPF_Const | CPF_Parm )
// unsigned long                  bRequireMatchingPlayerOwner    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreUnfocusedScenes         ( CPF_OptionalParm | CPF_Parm )

class UUIScene* UGameUISceneClient::GetNextScene ( class UUIScene* SourceScene, unsigned long bRequireMatchingPlayerOwner, unsigned long bIgnoreUnfocusedScenes )
{
	static UFunction* pFnGetNextScene = NULL;

	if ( ! pFnGetNextScene )
		pFnGetNextScene = (UFunction*) UObject::GObjObjects()->Data[ 21865 ];

	UGameUISceneClient_execGetNextScene_Parms GetNextScene_Parms;
	GetNextScene_Parms.SourceScene = SourceScene;
	GetNextScene_Parms.bRequireMatchingPlayerOwner = bRequireMatchingPlayerOwner;
	GetNextScene_Parms.bIgnoreUnfocusedScenes = bIgnoreUnfocusedScenes;

	pFnGetNextScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNextScene, &GetNextScene_Parms, NULL );

	pFnGetNextScene->FunctionFlags |= 0x400;

	return GetNextScene_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.GetPreviousInputProcessingScene
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                SourceScene                    ( CPF_Const | CPF_Parm )
// unsigned long                  bIgnoreUnfocusedScenes         ( CPF_OptionalParm | CPF_Parm )

class UUIScene* UGameUISceneClient::GetPreviousInputProcessingScene ( class UUIScene* SourceScene, unsigned long bIgnoreUnfocusedScenes )
{
	static UFunction* pFnGetPreviousInputProcessingScene = NULL;

	if ( ! pFnGetPreviousInputProcessingScene )
		pFnGetPreviousInputProcessingScene = (UFunction*) UObject::GObjObjects()->Data[ 21861 ];

	UGameUISceneClient_execGetPreviousInputProcessingScene_Parms GetPreviousInputProcessingScene_Parms;
	GetPreviousInputProcessingScene_Parms.SourceScene = SourceScene;
	GetPreviousInputProcessingScene_Parms.bIgnoreUnfocusedScenes = bIgnoreUnfocusedScenes;

	pFnGetPreviousInputProcessingScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPreviousInputProcessingScene, &GetPreviousInputProcessingScene_Parms, NULL );

	pFnGetPreviousInputProcessingScene->FunctionFlags |= 0x400;

	return GetPreviousInputProcessingScene_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.GetPreviousSceneFromIndex
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StartingSceneIndex             ( CPF_Parm )
// class ULocalPlayer*            MatchingPlayerOwner            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreUnfocusedScenes         ( CPF_OptionalParm | CPF_Parm )

class UUIScene* UGameUISceneClient::GetPreviousSceneFromIndex ( int StartingSceneIndex, class ULocalPlayer* MatchingPlayerOwner, unsigned long bIgnoreUnfocusedScenes )
{
	static UFunction* pFnGetPreviousSceneFromIndex = NULL;

	if ( ! pFnGetPreviousSceneFromIndex )
		pFnGetPreviousSceneFromIndex = (UFunction*) UObject::GObjObjects()->Data[ 21856 ];

	UGameUISceneClient_execGetPreviousSceneFromIndex_Parms GetPreviousSceneFromIndex_Parms;
	GetPreviousSceneFromIndex_Parms.StartingSceneIndex = StartingSceneIndex;
	GetPreviousSceneFromIndex_Parms.MatchingPlayerOwner = MatchingPlayerOwner;
	GetPreviousSceneFromIndex_Parms.bIgnoreUnfocusedScenes = bIgnoreUnfocusedScenes;

	pFnGetPreviousSceneFromIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPreviousSceneFromIndex, &GetPreviousSceneFromIndex_Parms, NULL );

	pFnGetPreviousSceneFromIndex->FunctionFlags |= 0x400;

	return GetPreviousSceneFromIndex_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.GetPreviousScene
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                SourceScene                    ( CPF_Const | CPF_Parm )
// unsigned long                  bRequireMatchingPlayerOwner    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreUnfocusedScenes         ( CPF_OptionalParm | CPF_Parm )

class UUIScene* UGameUISceneClient::GetPreviousScene ( class UUIScene* SourceScene, unsigned long bRequireMatchingPlayerOwner, unsigned long bIgnoreUnfocusedScenes )
{
	static UFunction* pFnGetPreviousScene = NULL;

	if ( ! pFnGetPreviousScene )
		pFnGetPreviousScene = (UFunction*) UObject::GObjObjects()->Data[ 21851 ];

	UGameUISceneClient_execGetPreviousScene_Parms GetPreviousScene_Parms;
	GetPreviousScene_Parms.SourceScene = SourceScene;
	GetPreviousScene_Parms.bRequireMatchingPlayerOwner = bRequireMatchingPlayerOwner;
	GetPreviousScene_Parms.bIgnoreUnfocusedScenes = bIgnoreUnfocusedScenes;

	pFnGetPreviousScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPreviousScene, &GetPreviousScene_Parms, NULL );

	pFnGetPreviousScene->FunctionFlags |= 0x400;

	return GetPreviousScene_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.GetActiveScene
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            MatchingPlayerOwner            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreUnfocusedScenes         ( CPF_OptionalParm | CPF_Parm )

class UUIScene* UGameUISceneClient::GetActiveScene ( class ULocalPlayer* MatchingPlayerOwner, unsigned long bIgnoreUnfocusedScenes )
{
	static UFunction* pFnGetActiveScene = NULL;

	if ( ! pFnGetActiveScene )
		pFnGetActiveScene = (UFunction*) UObject::GObjObjects()->Data[ 21847 ];

	UGameUISceneClient_execGetActiveScene_Parms GetActiveScene_Parms;
	GetActiveScene_Parms.MatchingPlayerOwner = MatchingPlayerOwner;
	GetActiveScene_Parms.bIgnoreUnfocusedScenes = bIgnoreUnfocusedScenes;

	pFnGetActiveScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActiveScene, &GetActiveScene_Parms, NULL );

	pFnGetActiveScene->FunctionFlags |= 0x400;

	return GetActiveScene_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.GetActiveSceneCount
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            MatchingPlayerOwner            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreUnfocusedScenes         ( CPF_OptionalParm | CPF_Parm )

int UGameUISceneClient::GetActiveSceneCount ( class ULocalPlayer* MatchingPlayerOwner, unsigned long bIgnoreUnfocusedScenes )
{
	static UFunction* pFnGetActiveSceneCount = NULL;

	if ( ! pFnGetActiveSceneCount )
		pFnGetActiveSceneCount = (UFunction*) UObject::GObjObjects()->Data[ 21843 ];

	UGameUISceneClient_execGetActiveSceneCount_Parms GetActiveSceneCount_Parms;
	GetActiveSceneCount_Parms.MatchingPlayerOwner = MatchingPlayerOwner;
	GetActiveSceneCount_Parms.bIgnoreUnfocusedScenes = bIgnoreUnfocusedScenes;

	pFnGetActiveSceneCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActiveSceneCount, &GetActiveSceneCount_Parms, NULL );

	pFnGetActiveSceneCount->FunctionFlags |= 0x400;

	return GetActiveSceneCount_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.FindSceneIndexByTag
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SceneTag                       ( CPF_Parm )
// class ULocalPlayer*            SceneOwner                     ( CPF_OptionalParm | CPF_Parm )

int UGameUISceneClient::FindSceneIndexByTag ( struct FName SceneTag, class ULocalPlayer* SceneOwner )
{
	static UFunction* pFnFindSceneIndexByTag = NULL;

	if ( ! pFnFindSceneIndexByTag )
		pFnFindSceneIndexByTag = (UFunction*) UObject::GObjObjects()->Data[ 21839 ];

	UGameUISceneClient_execFindSceneIndexByTag_Parms FindSceneIndexByTag_Parms;
	memcpy ( &FindSceneIndexByTag_Parms.SceneTag, &SceneTag, 0x8 );
	FindSceneIndexByTag_Parms.SceneOwner = SceneOwner;

	pFnFindSceneIndexByTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSceneIndexByTag, &FindSceneIndexByTag_Parms, NULL );

	pFnFindSceneIndexByTag->FunctionFlags |= 0x400;

	return FindSceneIndexByTag_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.GetSceneAtIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SceneIndex                     ( CPF_Parm )

class UUIScene* UGameUISceneClient::GetSceneAtIndex ( int SceneIndex )
{
	static UFunction* pFnGetSceneAtIndex = NULL;

	if ( ! pFnGetSceneAtIndex )
		pFnGetSceneAtIndex = (UFunction*) UObject::GObjObjects()->Data[ 21836 ];

	UGameUISceneClient_execGetSceneAtIndex_Parms GetSceneAtIndex_Parms;
	GetSceneAtIndex_Parms.SceneIndex = SceneIndex;

	pFnGetSceneAtIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSceneAtIndex, &GetSceneAtIndex_Parms, NULL );

	pFnGetSceneAtIndex->FunctionFlags |= 0x400;

	return GetSceneAtIndex_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.FindSceneIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                SceneToFind                    ( CPF_Const | CPF_Parm )

int UGameUISceneClient::FindSceneIndex ( class UUIScene* SceneToFind )
{
	static UFunction* pFnFindSceneIndex = NULL;

	if ( ! pFnFindSceneIndex )
		pFnFindSceneIndex = (UFunction*) UObject::GObjObjects()->Data[ 21833 ];

	UGameUISceneClient_execFindSceneIndex_Parms FindSceneIndex_Parms;
	FindSceneIndex_Parms.SceneToFind = SceneToFind;

	pFnFindSceneIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSceneIndex, &FindSceneIndex_Parms, NULL );

	pFnFindSceneIndex->FunctionFlags |= 0x400;

	return FindSceneIndex_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.FindSceneByTag
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SceneTag                       ( CPF_Parm )
// class ULocalPlayer*            SceneOwner                     ( CPF_OptionalParm | CPF_Parm )

class UUIScene* UGameUISceneClient::FindSceneByTag ( struct FName SceneTag, class ULocalPlayer* SceneOwner )
{
	static UFunction* pFnFindSceneByTag = NULL;

	if ( ! pFnFindSceneByTag )
		pFnFindSceneByTag = (UFunction*) UObject::GObjObjects()->Data[ 21829 ];

	UGameUISceneClient_execFindSceneByTag_Parms FindSceneByTag_Parms;
	memcpy ( &FindSceneByTag_Parms.SceneTag, &SceneTag, 0x8 );
	FindSceneByTag_Parms.SceneOwner = SceneOwner;

	pFnFindSceneByTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSceneByTag, &FindSceneByTag_Parms, NULL );

	pFnFindSceneByTag->FunctionFlags |= 0x400;

	return FindSceneByTag_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.CreateTransientWidget
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  WidgetClass                    ( CPF_Parm )
// struct FName                   WidgetTag                      ( CPF_Parm )
// class UUIObject*               Owner                          ( CPF_OptionalParm | CPF_Parm )

class UUIObject* UGameUISceneClient::CreateTransientWidget ( class UClass* WidgetClass, struct FName WidgetTag, class UUIObject* Owner )
{
	static UFunction* pFnCreateTransientWidget = NULL;

	if ( ! pFnCreateTransientWidget )
		pFnCreateTransientWidget = (UFunction*) UObject::GObjObjects()->Data[ 21824 ];

	UGameUISceneClient_execCreateTransientWidget_Parms CreateTransientWidget_Parms;
	CreateTransientWidget_Parms.WidgetClass = WidgetClass;
	memcpy ( &CreateTransientWidget_Parms.WidgetTag, &WidgetTag, 0x8 );
	CreateTransientWidget_Parms.Owner = Owner;

	pFnCreateTransientWidget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateTransientWidget, &CreateTransientWidget_Parms, NULL );

	pFnCreateTransientWidget->FunctionFlags |= 0x400;

	return CreateTransientWidget_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.CreateScene
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  SceneClass                     ( CPF_Parm )
// struct FName                   SceneTag                       ( CPF_OptionalParm | CPF_Parm )
// class UUIScene*                SceneTemplate                  ( CPF_OptionalParm | CPF_Parm )

class UUIScene* UGameUISceneClient::CreateScene ( class UClass* SceneClass, struct FName SceneTag, class UUIScene* SceneTemplate )
{
	static UFunction* pFnCreateScene = NULL;

	if ( ! pFnCreateScene )
		pFnCreateScene = (UFunction*) UObject::GObjObjects()->Data[ 21819 ];

	UGameUISceneClient_execCreateScene_Parms CreateScene_Parms;
	CreateScene_Parms.SceneClass = SceneClass;
	memcpy ( &CreateScene_Parms.SceneTag, &SceneTag, 0x8 );
	CreateScene_Parms.SceneTemplate = SceneTemplate;

	pFnCreateScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateScene, &CreateScene_Parms, NULL );

	pFnCreateScene->FunctionFlags |= 0x400;

	return CreateScene_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.GetTransientScene
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScene* UGameUISceneClient::GetTransientScene ( )
{
	static UFunction* pFnGetTransientScene = NULL;

	if ( ! pFnGetTransientScene )
		pFnGetTransientScene = (UFunction*) UObject::GObjObjects()->Data[ 21817 ];

	UGameUISceneClient_execGetTransientScene_Parms GetTransientScene_Parms;

	pFnGetTransientScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTransientScene, &GetTransientScene_Parms, NULL );

	pFnGetTransientScene->FunctionFlags |= 0x400;

	return GetTransientScene_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.GetCurrentNetMode
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UGameUISceneClient::GetCurrentNetMode ( )
{
	static UFunction* pFnGetCurrentNetMode = NULL;

	if ( ! pFnGetCurrentNetMode )
		pFnGetCurrentNetMode = (UFunction*) UObject::GObjObjects()->Data[ 21815 ];

	UGameUISceneClient_execGetCurrentNetMode_Parms GetCurrentNetMode_Parms;

	pFnGetCurrentNetMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentNetMode, &GetCurrentNetMode_Parms, NULL );

	pFnGetCurrentNetMode->FunctionFlags |= 0x400;

	return GetCurrentNetMode_Parms.ReturnValue;
};

// Function Engine.UIButton.SetImage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USurface*                NewImage                       ( CPF_Parm )

void UUIButton::SetImage ( class USurface* NewImage )
{
	static UFunction* pFnSetImage = NULL;

	if ( ! pFnSetImage )
		pFnSetImage = (UFunction*) UObject::GObjObjects()->Data[ 33209 ];

	UUIButton_execSetImage_Parms SetImage_Parms;
	SetImage_Parms.NewImage = NewImage;

	this->ProcessEvent ( pFnSetImage, &SetImage_Parms, NULL );
};

// Function Engine.UILabelButton.SaveSubscriberValue
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )
// struct TArray<class UUIDataStore*> out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUILabelButton::SaveSubscriberValue ( int BindingIndex, struct TArray<class UUIDataStore*>* out_BoundDataStores )
{
	static UFunction* pFnSaveSubscriberValue = NULL;

	if ( ! pFnSaveSubscriberValue )
		pFnSaveSubscriberValue = (UFunction*) UObject::GObjObjects()->Data[ 33369 ];

	UUILabelButton_execSaveSubscriberValue_Parms SaveSubscriberValue_Parms;
	SaveSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnSaveSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSubscriberValue, &SaveSubscriberValue_Parms, NULL );

	pFnSaveSubscriberValue->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &SaveSubscriberValue_Parms.out_BoundDataStores, 0x10 );

	return SaveSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UILabelButton.ClearBoundDataStores
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUILabelButton::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = (UFunction*) UObject::GObjObjects()->Data[ 33368 ];

	UUILabelButton_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UILabelButton.GetBoundDataStores
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct TArray<class UUIDataStore*> out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUILabelButton::GetBoundDataStores ( struct TArray<class UUIDataStore*>* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = (UFunction*) UObject::GObjObjects()->Data[ 33365 ];

	UUILabelButton_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0x10 );
};

// Function Engine.UILabelButton.NotifyDataStoreValueUpdated
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUILabelButton::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = (UFunction*) UObject::GObjObjects()->Data[ 33359 ];

	UUILabelButton_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UILabelButton.RefreshSubscriberValue
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUILabelButton::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = (UFunction*) UObject::GObjObjects()->Data[ 33356 ];

	UUILabelButton_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UILabelButton.GetDataStoreBinding
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUILabelButton::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = (UFunction*) UObject::GObjObjects()->Data[ 33353 ];

	UUILabelButton_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UILabelButton.SetDataStoreBinding
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUILabelButton::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = (UFunction*) UObject::GObjObjects()->Data[ 33350 ];

	UUILabelButton_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0x10 );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UILabelButton.SetTextAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Horizontal                     ( CPF_Parm )
// unsigned char                  Vertical                       ( CPF_Parm )

void UUILabelButton::SetTextAlignment ( unsigned char Horizontal, unsigned char Vertical )
{
	static UFunction* pFnSetTextAlignment = NULL;

	if ( ! pFnSetTextAlignment )
		pFnSetTextAlignment = (UFunction*) UObject::GObjObjects()->Data[ 33347 ];

	UUILabelButton_execSetTextAlignment_Parms SetTextAlignment_Parms;
	SetTextAlignment_Parms.Horizontal = Horizontal;
	SetTextAlignment_Parms.Vertical = Vertical;

	pFnSetTextAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextAlignment, &SetTextAlignment_Parms, NULL );

	pFnSetTextAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UILabelButton.GetCaption
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UUILabelButton::eventGetCaption ( )
{
	static UFunction* pFnGetCaption = NULL;

	if ( ! pFnGetCaption )
		pFnGetCaption = (UFunction*) UObject::GObjObjects()->Data[ 33344 ];

	UUILabelButton_eventGetCaption_Parms GetCaption_Parms;

	this->ProcessEvent ( pFnGetCaption, &GetCaption_Parms, NULL );

	return GetCaption_Parms.ReturnValue;
};

// Function Engine.UILabelButton.SetCaption
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 NewText                        ( CPF_Parm | CPF_NeedCtorLink )

void UUILabelButton::SetCaption ( struct FString NewText )
{
	static UFunction* pFnSetCaption = NULL;

	if ( ! pFnSetCaption )
		pFnSetCaption = (UFunction*) UObject::GObjObjects()->Data[ 33342 ];

	UUILabelButton_execSetCaption_Parms SetCaption_Parms;
	memcpy ( &SetCaption_Parms.NewText, &NewText, 0x10 );

	pFnSetCaption->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCaption, &SetCaption_Parms, NULL );

	pFnSetCaption->FunctionFlags |= 0x400;
};

// Function Engine.UICalloutButton.GetCalloutInputProxy
// [0x00024002] 
// Parameters infos:
// class UUIEvent_CalloutButtonInputProxy* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bCreateIfNecessary             ( CPF_OptionalParm | CPF_Parm )

class UUIEvent_CalloutButtonInputProxy* UUICalloutButton::GetCalloutInputProxy ( unsigned long bCreateIfNecessary )
{
	static UFunction* pFnGetCalloutInputProxy = NULL;

	if ( ! pFnGetCalloutInputProxy )
		pFnGetCalloutInputProxy = (UFunction*) UObject::GObjObjects()->Data[ 33431 ];

	UUICalloutButton_execGetCalloutInputProxy_Parms GetCalloutInputProxy_Parms;
	GetCalloutInputProxy_Parms.bCreateIfNecessary = bCreateIfNecessary;

	this->ProcessEvent ( pFnGetCalloutInputProxy, &GetCalloutInputProxy_Parms, NULL );

	return GetCalloutInputProxy_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.VerifyDefaultMarkupString
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUICalloutButton::VerifyDefaultMarkupString ( )
{
	static UFunction* pFnVerifyDefaultMarkupString = NULL;

	if ( ! pFnVerifyDefaultMarkupString )
		pFnVerifyDefaultMarkupString = (UFunction*) UObject::GObjObjects()->Data[ 33428 ];

	UUICalloutButton_execVerifyDefaultMarkupString_Parms VerifyDefaultMarkupString_Parms;

	this->ProcessEvent ( pFnVerifyDefaultMarkupString, &VerifyDefaultMarkupString_Parms, NULL );

	return VerifyDefaultMarkupString_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.GetPanelOwner
// [0x00020002] 
// Parameters infos:
// class UUICalloutButtonPanel*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUICalloutButtonPanel* UUICalloutButton::GetPanelOwner ( )
{
	static UFunction* pFnGetPanelOwner = NULL;

	if ( ! pFnGetPanelOwner )
		pFnGetPanelOwner = (UFunction*) UObject::GObjObjects()->Data[ 33426 ];

	UUICalloutButton_execGetPanelOwner_Parms GetPanelOwner_Parms;

	this->ProcessEvent ( pFnGetPanelOwner, &GetPanelOwner_Parms, NULL );

	return GetPanelOwner_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.RemovedFromParent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )

void UUICalloutButton::eventRemovedFromParent ( class UUIScreenObject* WidgetOwner )
{
	static UFunction* pFnRemovedFromParent = NULL;

	if ( ! pFnRemovedFromParent )
		pFnRemovedFromParent = (UFunction*) UObject::GObjObjects()->Data[ 33423 ];

	UUICalloutButton_eventRemovedFromParent_Parms RemovedFromParent_Parms;
	RemovedFromParent_Parms.WidgetOwner = WidgetOwner;

	this->ProcessEvent ( pFnRemovedFromParent, &RemovedFromParent_Parms, NULL );
};

// Function Engine.UICalloutButton.PostInitialize
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUICalloutButton::eventPostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = (UFunction*) UObject::GObjObjects()->Data[ 33420 ];

	UUICalloutButton_eventPostInitialize_Parms PostInitialize_Parms;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );
};

// Function Engine.UICalloutButton.GenerateCompleteCaptionMarkup
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   InputAlias                     ( CPF_OptionalParm | CPF_Parm )

struct FString UUICalloutButton::eventGenerateCompleteCaptionMarkup ( struct FName InputAlias )
{
	static UFunction* pFnGenerateCompleteCaptionMarkup = NULL;

	if ( ! pFnGenerateCompleteCaptionMarkup )
		pFnGenerateCompleteCaptionMarkup = (UFunction*) UObject::GObjObjects()->Data[ 33412 ];

	UUICalloutButton_eventGenerateCompleteCaptionMarkup_Parms GenerateCompleteCaptionMarkup_Parms;
	memcpy ( &GenerateCompleteCaptionMarkup_Parms.InputAlias, &InputAlias, 0x8 );

	this->ProcessEvent ( pFnGenerateCompleteCaptionMarkup, &GenerateCompleteCaptionMarkup_Parms, NULL );

	return GenerateCompleteCaptionMarkup_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.GetCalloutMarkupString
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   AlternateInputAlias            ( CPF_OptionalParm | CPF_Parm )

struct FString UUICalloutButton::eventGetCalloutMarkupString ( struct FName AlternateInputAlias )
{
	static UFunction* pFnGetCalloutMarkupString = NULL;

	if ( ! pFnGetCalloutMarkupString )
		pFnGetCalloutMarkupString = (UFunction*) UObject::GObjObjects()->Data[ 33406 ];

	UUICalloutButton_eventGetCalloutMarkupString_Parms GetCalloutMarkupString_Parms;
	memcpy ( &GetCalloutMarkupString_Parms.AlternateInputAlias, &AlternateInputAlias, 0x8 );

	this->ProcessEvent ( pFnGetCalloutMarkupString, &GetCalloutMarkupString_Parms, NULL );

	return GetCalloutMarkupString_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.GetCalloutDataStoreName
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UUICalloutButton::eventGetCalloutDataStoreName ( )
{
	static UFunction* pFnGetCalloutDataStoreName = NULL;

	if ( ! pFnGetCalloutDataStoreName )
		pFnGetCalloutDataStoreName = (UFunction*) UObject::GObjObjects()->Data[ 33403 ];

	UUICalloutButton_eventGetCalloutDataStoreName_Parms GetCalloutDataStoreName_Parms;

	this->ProcessEvent ( pFnGetCalloutDataStoreName, &GetCalloutDataStoreName_Parms, NULL );

	return GetCalloutDataStoreName_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.SetInputAlias
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NewInputAlias                  ( CPF_Parm )

bool UUICalloutButton::eventSetInputAlias ( struct FName NewInputAlias )
{
	static UFunction* pFnSetInputAlias = NULL;

	if ( ! pFnSetInputAlias )
		pFnSetInputAlias = (UFunction*) UObject::GObjObjects()->Data[ 33397 ];

	UUICalloutButton_eventSetInputAlias_Parms SetInputAlias_Parms;
	memcpy ( &SetInputAlias_Parms.NewInputAlias, &NewInputAlias, 0x8 );

	this->ProcessEvent ( pFnSetInputAlias, &SetInputAlias_Parms, NULL );

	return SetInputAlias_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.OnReceivedInputKey
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FInputEventParameters   EventParms                     ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUICalloutButton::OnReceivedInputKey ( struct FInputEventParameters* EventParms )
{
	static UFunction* pFnOnReceivedInputKey = NULL;

	if ( ! pFnOnReceivedInputKey )
		pFnOnReceivedInputKey = (UFunction*) UObject::GObjObjects()->Data[ 33394 ];

	UUICalloutButton_execOnReceivedInputKey_Parms OnReceivedInputKey_Parms;

	pFnOnReceivedInputKey->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnReceivedInputKey, &OnReceivedInputKey_Parms, NULL );

	pFnOnReceivedInputKey->FunctionFlags |= 0x400;

	if ( EventParms )
		memcpy ( EventParms, &OnReceivedInputKey_Parms.EventParms, 0x20 );

	return OnReceivedInputKey_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.UnsubscribeFromInputProxy
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIEvent_CalloutButtonInputProxy* InputProxy                     ( CPF_Parm )
// unsigned long                  bUpdateProxyOutputLinks        ( CPF_OptionalParm | CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUICalloutButton::UnsubscribeFromInputProxy ( class UUIEvent_CalloutButtonInputProxy* InputProxy, unsigned long bUpdateProxyOutputLinks, int PlayerIndex )
{
	static UFunction* pFnUnsubscribeFromInputProxy = NULL;

	if ( ! pFnUnsubscribeFromInputProxy )
		pFnUnsubscribeFromInputProxy = (UFunction*) UObject::GObjObjects()->Data[ 33389 ];

	UUICalloutButton_execUnsubscribeFromInputProxy_Parms UnsubscribeFromInputProxy_Parms;
	UnsubscribeFromInputProxy_Parms.InputProxy = InputProxy;
	UnsubscribeFromInputProxy_Parms.bUpdateProxyOutputLinks = bUpdateProxyOutputLinks;
	UnsubscribeFromInputProxy_Parms.PlayerIndex = PlayerIndex;

	pFnUnsubscribeFromInputProxy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnsubscribeFromInputProxy, &UnsubscribeFromInputProxy_Parms, NULL );

	pFnUnsubscribeFromInputProxy->FunctionFlags |= 0x400;

	return UnsubscribeFromInputProxy_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.SubscribeToInputProxy
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIEvent_CalloutButtonInputProxy* InputProxy                     ( CPF_Parm )
// unsigned long                  bUpdateProxyOutputLinks        ( CPF_OptionalParm | CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUICalloutButton::SubscribeToInputProxy ( class UUIEvent_CalloutButtonInputProxy* InputProxy, unsigned long bUpdateProxyOutputLinks, int PlayerIndex )
{
	static UFunction* pFnSubscribeToInputProxy = NULL;

	if ( ! pFnSubscribeToInputProxy )
		pFnSubscribeToInputProxy = (UFunction*) UObject::GObjObjects()->Data[ 33384 ];

	UUICalloutButton_execSubscribeToInputProxy_Parms SubscribeToInputProxy_Parms;
	SubscribeToInputProxy_Parms.InputProxy = InputProxy;
	SubscribeToInputProxy_Parms.bUpdateProxyOutputLinks = bUpdateProxyOutputLinks;
	SubscribeToInputProxy_Parms.PlayerIndex = PlayerIndex;

	pFnSubscribeToInputProxy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSubscribeToInputProxy, &SubscribeToInputProxy_Parms, NULL );

	pFnSubscribeToInputProxy->FunctionFlags |= 0x400;

	return SubscribeToInputProxy_Parms.ReturnValue;
};

// Function Engine.UICalloutButton.SetInputTag
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   NewInputAlias                  ( CPF_Parm )

void UUICalloutButton::SetInputTag ( struct FName NewInputAlias )
{
	static UFunction* pFnSetInputTag = NULL;

	if ( ! pFnSetInputTag )
		pFnSetInputTag = (UFunction*) UObject::GObjObjects()->Data[ 33382 ];

	UUICalloutButton_execSetInputTag_Parms SetInputTag_Parms;
	memcpy ( &SetInputTag_Parms.NewInputAlias, &NewInputAlias, 0x8 );

	pFnSetInputTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetInputTag, &SetInputTag_Parms, NULL );

	pFnSetInputTag->FunctionFlags |= 0x400;
};

// Function Engine.UICalloutButton.GetCalloutDataStore
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore_InputAlias* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            AlternatePlayer                ( CPF_OptionalParm | CPF_Parm )

class UUIDataStore_InputAlias* UUICalloutButton::GetCalloutDataStore ( class ULocalPlayer* AlternatePlayer )
{
	static UFunction* pFnGetCalloutDataStore = NULL;

	if ( ! pFnGetCalloutDataStore )
		pFnGetCalloutDataStore = (UFunction*) UObject::GObjObjects()->Data[ 33379 ];

	UUICalloutButton_execGetCalloutDataStore_Parms GetCalloutDataStore_Parms;
	GetCalloutDataStore_Parms.AlternatePlayer = AlternatePlayer;

	pFnGetCalloutDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCalloutDataStore, &GetCalloutDataStore_Parms, NULL );

	pFnGetCalloutDataStore->FunctionFlags |= 0x400;

	return GetCalloutDataStore_Parms.ReturnValue;
};

// Function Engine.UIScrollbar.GetMarkerSizePercent
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScrollbar::GetMarkerSizePercent ( )
{
	static UFunction* pFnGetMarkerSizePercent = NULL;

	if ( ! pFnGetMarkerSizePercent )
		pFnGetMarkerSizePercent = (UFunction*) UObject::GObjObjects()->Data[ 33783 ];

	UUIScrollbar_execGetMarkerSizePercent_Parms GetMarkerSizePercent_Parms;

	this->ProcessEvent ( pFnGetMarkerSizePercent, &GetMarkerSizePercent_Parms, NULL );

	return GetMarkerSizePercent_Parms.ReturnValue;
};

// Function Engine.UIScrollbar.GetMarkerPosPercent
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScrollbar::GetMarkerPosPercent ( )
{
	static UFunction* pFnGetMarkerPosPercent = NULL;

	if ( ! pFnGetMarkerPosPercent )
		pFnGetMarkerPosPercent = (UFunction*) UObject::GObjObjects()->Data[ 33780 ];

	UUIScrollbar_execGetMarkerPosPercent_Parms GetMarkerPosPercent_Parms;

	this->ProcessEvent ( pFnGetMarkerPosPercent, &GetMarkerPosPercent_Parms, NULL );

	return GetMarkerPosPercent_Parms.ReturnValue;
};

// Function Engine.UIScrollbar.GetNudgePercent
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScrollbar::GetNudgePercent ( )
{
	static UFunction* pFnGetNudgePercent = NULL;

	if ( ! pFnGetNudgePercent )
		pFnGetNudgePercent = (UFunction*) UObject::GObjObjects()->Data[ 33777 ];

	UUIScrollbar_execGetNudgePercent_Parms GetNudgePercent_Parms;

	this->ProcessEvent ( pFnGetNudgePercent, &GetNudgePercent_Parms, NULL );

	return GetNudgePercent_Parms.ReturnValue;
};

// Function Engine.UIScrollbar.GetNudgeValue
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScrollbar::GetNudgeValue ( )
{
	static UFunction* pFnGetNudgeValue = NULL;

	if ( ! pFnGetNudgeValue )
		pFnGetNudgeValue = (UFunction*) UObject::GObjObjects()->Data[ 33774 ];

	UUIScrollbar_execGetNudgeValue_Parms GetNudgeValue_Parms;

	this->ProcessEvent ( pFnGetNudgeValue, &GetNudgeValue_Parms, NULL );

	return GetNudgeValue_Parms.ReturnValue;
};

// Function Engine.UIScrollbar.PostInitialize
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIScrollbar::eventPostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = (UFunction*) UObject::GObjObjects()->Data[ 33773 ];

	UUIScrollbar_eventPostInitialize_Parms PostInitialize_Parms;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );
};

// Function Engine.UIScrollbar.Initialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIScrollbar::eventInitialized ( )
{
	static UFunction* pFnInitialized = NULL;

	if ( ! pFnInitialized )
		pFnInitialized = (UFunction*) UObject::GObjObjects()->Data[ 33768 ];

	UUIScrollbar_eventInitialized_Parms Initialized_Parms;

	this->ProcessEvent ( pFnInitialized, &Initialized_Parms, NULL );
};

// Function Engine.UIScrollbar.DragScroll
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScrollbarMarkerButton* Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIScrollbar::DragScroll ( class UUIScrollbarMarkerButton* Sender, int PlayerIndex )
{
	static UFunction* pFnDragScroll = NULL;

	if ( ! pFnDragScroll )
		pFnDragScroll = (UFunction*) UObject::GObjObjects()->Data[ 33765 ];

	UUIScrollbar_execDragScroll_Parms DragScroll_Parms;
	DragScroll_Parms.Sender = Sender;
	DragScroll_Parms.PlayerIndex = PlayerIndex;

	pFnDragScroll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDragScroll, &DragScroll_Parms, NULL );

	pFnDragScroll->FunctionFlags |= 0x400;
};

// Function Engine.UIScrollbar.DragScrollEnd
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIScrollbar::DragScrollEnd ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnDragScrollEnd = NULL;

	if ( ! pFnDragScrollEnd )
		pFnDragScrollEnd = (UFunction*) UObject::GObjObjects()->Data[ 33762 ];

	UUIScrollbar_execDragScrollEnd_Parms DragScrollEnd_Parms;
	DragScrollEnd_Parms.Sender = Sender;
	DragScrollEnd_Parms.PlayerIndex = PlayerIndex;

	pFnDragScrollEnd->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDragScrollEnd, &DragScrollEnd_Parms, NULL );

	pFnDragScrollEnd->FunctionFlags |= 0x400;
};

// Function Engine.UIScrollbar.DragScrollBegin
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIScrollbar::DragScrollBegin ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnDragScrollBegin = NULL;

	if ( ! pFnDragScrollBegin )
		pFnDragScrollBegin = (UFunction*) UObject::GObjObjects()->Data[ 33759 ];

	UUIScrollbar_execDragScrollBegin_Parms DragScrollBegin_Parms;
	DragScrollBegin_Parms.Sender = Sender;
	DragScrollBegin_Parms.PlayerIndex = PlayerIndex;

	pFnDragScrollBegin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDragScrollBegin, &DragScrollBegin_Parms, NULL );

	pFnDragScrollBegin->FunctionFlags |= 0x400;
};

// Function Engine.UIScrollbar.ScrollDecrement
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIScrollbar::ScrollDecrement ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnScrollDecrement = NULL;

	if ( ! pFnScrollDecrement )
		pFnScrollDecrement = (UFunction*) UObject::GObjObjects()->Data[ 33756 ];

	UUIScrollbar_execScrollDecrement_Parms ScrollDecrement_Parms;
	ScrollDecrement_Parms.Sender = Sender;
	ScrollDecrement_Parms.PlayerIndex = PlayerIndex;

	pFnScrollDecrement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScrollDecrement, &ScrollDecrement_Parms, NULL );

	pFnScrollDecrement->FunctionFlags |= 0x400;
};

// Function Engine.UIScrollbar.ScrollIncrement
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIScrollbar::ScrollIncrement ( class UUIScreenObject* Sender, int PlayerIndex )
{
	static UFunction* pFnScrollIncrement = NULL;

	if ( ! pFnScrollIncrement )
		pFnScrollIncrement = (UFunction*) UObject::GObjObjects()->Data[ 33753 ];

	UUIScrollbar_execScrollIncrement_Parms ScrollIncrement_Parms;
	ScrollIncrement_Parms.Sender = Sender;
	ScrollIncrement_Parms.PlayerIndex = PlayerIndex;

	pFnScrollIncrement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScrollIncrement, &ScrollIncrement_Parms, NULL );

	pFnScrollIncrement->FunctionFlags |= 0x400;
};

// Function Engine.UIScrollbar.EnableCornerPadding
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  FlagValue                      ( CPF_Parm )

void UUIScrollbar::EnableCornerPadding ( unsigned long FlagValue )
{
	static UFunction* pFnEnableCornerPadding = NULL;

	if ( ! pFnEnableCornerPadding )
		pFnEnableCornerPadding = (UFunction*) UObject::GObjObjects()->Data[ 33751 ];

	UUIScrollbar_execEnableCornerPadding_Parms EnableCornerPadding_Parms;
	EnableCornerPadding_Parms.FlagValue = FlagValue;

	pFnEnableCornerPadding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableCornerPadding, &EnableCornerPadding_Parms, NULL );

	pFnEnableCornerPadding->FunctionFlags |= 0x400;
};

// Function Engine.UIScrollbar.SetNudgeSizePixels
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NudgePixels                    ( CPF_Parm )

void UUIScrollbar::SetNudgeSizePixels ( float NudgePixels )
{
	static UFunction* pFnSetNudgeSizePixels = NULL;

	if ( ! pFnSetNudgeSizePixels )
		pFnSetNudgeSizePixels = (UFunction*) UObject::GObjObjects()->Data[ 33749 ];

	UUIScrollbar_execSetNudgeSizePixels_Parms SetNudgeSizePixels_Parms;
	SetNudgeSizePixels_Parms.NudgePixels = NudgePixels;

	pFnSetNudgeSizePixels->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNudgeSizePixels, &SetNudgeSizePixels_Parms, NULL );

	pFnSetNudgeSizePixels->FunctionFlags |= 0x400;
};

// Function Engine.UIScrollbar.SetNudgeSizePercent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NudgePercentage                ( CPF_Parm )

void UUIScrollbar::SetNudgeSizePercent ( float NudgePercentage )
{
	static UFunction* pFnSetNudgeSizePercent = NULL;

	if ( ! pFnSetNudgeSizePercent )
		pFnSetNudgeSizePercent = (UFunction*) UObject::GObjObjects()->Data[ 33747 ];

	UUIScrollbar_execSetNudgeSizePercent_Parms SetNudgeSizePercent_Parms;
	SetNudgeSizePercent_Parms.NudgePercentage = NudgePercentage;

	pFnSetNudgeSizePercent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNudgeSizePercent, &SetNudgeSizePercent_Parms, NULL );

	pFnSetNudgeSizePercent->FunctionFlags |= 0x400;
};

// Function Engine.UIScrollbar.SetMarkerPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          PositionPercentage             ( CPF_Parm )

void UUIScrollbar::SetMarkerPosition ( float PositionPercentage )
{
	static UFunction* pFnSetMarkerPosition = NULL;

	if ( ! pFnSetMarkerPosition )
		pFnSetMarkerPosition = (UFunction*) UObject::GObjObjects()->Data[ 33745 ];

	UUIScrollbar_execSetMarkerPosition_Parms SetMarkerPosition_Parms;
	SetMarkerPosition_Parms.PositionPercentage = PositionPercentage;

	pFnSetMarkerPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMarkerPosition, &SetMarkerPosition_Parms, NULL );

	pFnSetMarkerPosition->FunctionFlags |= 0x400;
};

// Function Engine.UIScrollbar.SetMarkerSize
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          SizePercentage                 ( CPF_Parm )

void UUIScrollbar::SetMarkerSize ( float SizePercentage )
{
	static UFunction* pFnSetMarkerSize = NULL;

	if ( ! pFnSetMarkerSize )
		pFnSetMarkerSize = (UFunction*) UObject::GObjObjects()->Data[ 33743 ];

	UUIScrollbar_execSetMarkerSize_Parms SetMarkerSize_Parms;
	SetMarkerSize_Parms.SizePercentage = SizePercentage;

	pFnSetMarkerSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMarkerSize, &SetMarkerSize_Parms, NULL );

	pFnSetMarkerSize->FunctionFlags |= 0x400;
};

// Function Engine.UIScrollbar.GetScrollZoneWidth
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScrollbar::GetScrollZoneWidth ( )
{
	static UFunction* pFnGetScrollZoneWidth = NULL;

	if ( ! pFnGetScrollZoneWidth )
		pFnGetScrollZoneWidth = (UFunction*) UObject::GObjObjects()->Data[ 33741 ];

	UUIScrollbar_execGetScrollZoneWidth_Parms GetScrollZoneWidth_Parms;

	pFnGetScrollZoneWidth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScrollZoneWidth, &GetScrollZoneWidth_Parms, NULL );

	pFnGetScrollZoneWidth->FunctionFlags |= 0x400;

	return GetScrollZoneWidth_Parms.ReturnValue;
};

// Function Engine.UIScrollbar.GetScrollZoneExtent
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          ScrollZoneStart                ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

float UUIScrollbar::GetScrollZoneExtent ( float* ScrollZoneStart )
{
	static UFunction* pFnGetScrollZoneExtent = NULL;

	if ( ! pFnGetScrollZoneExtent )
		pFnGetScrollZoneExtent = (UFunction*) UObject::GObjObjects()->Data[ 33738 ];

	UUIScrollbar_execGetScrollZoneExtent_Parms GetScrollZoneExtent_Parms;

	pFnGetScrollZoneExtent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScrollZoneExtent, &GetScrollZoneExtent_Parms, NULL );

	pFnGetScrollZoneExtent->FunctionFlags |= 0x400;

	if ( ScrollZoneStart )
		*ScrollZoneStart = GetScrollZoneExtent_Parms.ScrollZoneStart;

	return GetScrollZoneExtent_Parms.ReturnValue;
};

// Function Engine.UIScrollbar.GetMarkerButtonPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UUIScrollbar::GetMarkerButtonPosition ( )
{
	static UFunction* pFnGetMarkerButtonPosition = NULL;

	if ( ! pFnGetMarkerButtonPosition )
		pFnGetMarkerButtonPosition = (UFunction*) UObject::GObjObjects()->Data[ 33736 ];

	UUIScrollbar_execGetMarkerButtonPosition_Parms GetMarkerButtonPosition_Parms;

	pFnGetMarkerButtonPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMarkerButtonPosition, &GetMarkerButtonPosition_Parms, NULL );

	pFnGetMarkerButtonPosition->FunctionFlags |= 0x400;

	return GetMarkerButtonPosition_Parms.ReturnValue;
};

// Function Engine.UIScrollbar.OnClickedScrollZone
// [0x00120000] 
// Parameters infos:
// class UUIScrollbar*            Sender                         ( CPF_Parm )
// float                          PositionPerc                   ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIScrollbar::OnClickedScrollZone ( class UUIScrollbar* Sender, float PositionPerc, int PlayerIndex )
{
	static UFunction* pFnOnClickedScrollZone = NULL;

	if ( ! pFnOnClickedScrollZone )
		pFnOnClickedScrollZone = (UFunction*) UObject::GObjObjects()->Data[ 33732 ];

	UUIScrollbar_execOnClickedScrollZone_Parms OnClickedScrollZone_Parms;
	OnClickedScrollZone_Parms.Sender = Sender;
	OnClickedScrollZone_Parms.PositionPerc = PositionPerc;
	OnClickedScrollZone_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnClickedScrollZone, &OnClickedScrollZone_Parms, NULL );
};

// Function Engine.UIScrollbar.OnScrollActivity
// [0x00124000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScrollbar*            Sender                         ( CPF_Parm )
// float                          PositionChange                 ( CPF_Parm )
// unsigned long                  bPositionMaxed                 ( CPF_OptionalParm | CPF_Parm )

bool UUIScrollbar::OnScrollActivity ( class UUIScrollbar* Sender, float PositionChange, unsigned long bPositionMaxed )
{
	static UFunction* pFnOnScrollActivity = NULL;

	if ( ! pFnOnScrollActivity )
		pFnOnScrollActivity = (UFunction*) UObject::GObjObjects()->Data[ 33727 ];

	UUIScrollbar_execOnScrollActivity_Parms OnScrollActivity_Parms;
	OnScrollActivity_Parms.Sender = Sender;
	OnScrollActivity_Parms.PositionChange = PositionChange;
	OnScrollActivity_Parms.bPositionMaxed = bPositionMaxed;

	this->ProcessEvent ( pFnOnScrollActivity, &OnScrollActivity_Parms, NULL );

	return OnScrollActivity_Parms.ReturnValue;
};

// Function Engine.UIScrollbarMarkerButton.OnButtonDragged
// [0x00120000] 
// Parameters infos:
// class UUIScrollbarMarkerButton* Sender                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

void UUIScrollbarMarkerButton::OnButtonDragged ( class UUIScrollbarMarkerButton* Sender, int PlayerIndex )
{
	static UFunction* pFnOnButtonDragged = NULL;

	if ( ! pFnOnButtonDragged )
		pFnOnButtonDragged = (UFunction*) UObject::GObjObjects()->Data[ 35774 ];

	UUIScrollbarMarkerButton_execOnButtonDragged_Parms OnButtonDragged_Parms;
	OnButtonDragged_Parms.Sender = Sender;
	OnButtonDragged_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnButtonDragged, &OnButtonDragged_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.OnButtonVisibilityChanged
// [0x00020002] 
// Parameters infos:
// class UUIScreenObject*         SourceWidget                   ( CPF_Parm )
// unsigned long                  bIsVisible                     ( CPF_Parm )

void UUICalloutButtonPanel::OnButtonVisibilityChanged ( class UUIScreenObject* SourceWidget, unsigned long bIsVisible )
{
	static UFunction* pFnOnButtonVisibilityChanged = NULL;

	if ( ! pFnOnButtonVisibilityChanged )
		pFnOnButtonVisibilityChanged = (UFunction*) UObject::GObjObjects()->Data[ 33569 ];

	UUICalloutButtonPanel_execOnButtonVisibilityChanged_Parms OnButtonVisibilityChanged_Parms;
	OnButtonVisibilityChanged_Parms.SourceWidget = SourceWidget;
	OnButtonVisibilityChanged_Parms.bIsVisible = bIsVisible;

	this->ProcessEvent ( pFnOnButtonVisibilityChanged, &OnButtonVisibilityChanged_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.InitializeInputProxy
// [0x00020002] 
// Parameters infos:

void UUICalloutButtonPanel::InitializeInputProxy ( )
{
	static UFunction* pFnInitializeInputProxy = NULL;

	if ( ! pFnInitializeInputProxy )
		pFnInitializeInputProxy = (UFunction*) UObject::GObjObjects()->Data[ 33566 ];

	UUICalloutButtonPanel_execInitializeInputProxy_Parms InitializeInputProxy_Parms;

	this->ProcessEvent ( pFnInitializeInputProxy, &InitializeInputProxy_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.ConfigureChildButton
// [0x00020002] 
// Parameters infos:
// class UUICalloutButton*        ChildButton                    ( CPF_Parm )

void UUICalloutButtonPanel::ConfigureChildButton ( class UUICalloutButton* ChildButton )
{
	static UFunction* pFnConfigureChildButton = NULL;

	if ( ! pFnConfigureChildButton )
		pFnConfigureChildButton = (UFunction*) UObject::GObjObjects()->Data[ 33564 ];

	UUICalloutButtonPanel_execConfigureChildButton_Parms ConfigureChildButton_Parms;
	ConfigureChildButton_Parms.ChildButton = ChildButton;

	this->ProcessEvent ( pFnConfigureChildButton, &ConfigureChildButton_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.RemovedFromParent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )

void UUICalloutButtonPanel::eventRemovedFromParent ( class UUIScreenObject* WidgetOwner )
{
	static UFunction* pFnRemovedFromParent = NULL;

	if ( ! pFnRemovedFromParent )
		pFnRemovedFromParent = (UFunction*) UObject::GObjObjects()->Data[ 33558 ];

	UUICalloutButtonPanel_eventRemovedFromParent_Parms RemovedFromParent_Parms;
	RemovedFromParent_Parms.WidgetOwner = WidgetOwner;

	this->ProcessEvent ( pFnRemovedFromParent, &RemovedFromParent_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.PostInitialize
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUICalloutButtonPanel::eventPostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = (UFunction*) UObject::GObjObjects()->Data[ 33557 ];

	UUICalloutButtonPanel_eventPostInitialize_Parms PostInitialize_Parms;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.CanButtonAcceptFocus
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InputAliasTag                  ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUICalloutButtonPanel::eventCanButtonAcceptFocus ( struct FName InputAliasTag, int PlayerIndex )
{
	static UFunction* pFnCanButtonAcceptFocus = NULL;

	if ( ! pFnCanButtonAcceptFocus )
		pFnCanButtonAcceptFocus = (UFunction*) UObject::GObjObjects()->Data[ 33551 ];

	UUICalloutButtonPanel_eventCanButtonAcceptFocus_Parms CanButtonAcceptFocus_Parms;
	memcpy ( &CanButtonAcceptFocus_Parms.InputAliasTag, &InputAliasTag, 0x8 );
	CanButtonAcceptFocus_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnCanButtonAcceptFocus, &CanButtonAcceptFocus_Parms, NULL );

	return CanButtonAcceptFocus_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.ContainsButton
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )

bool UUICalloutButtonPanel::eventContainsButton ( struct FName ButtonInputAlias )
{
	static UFunction* pFnContainsButton = NULL;

	if ( ! pFnContainsButton )
		pFnContainsButton = (UFunction*) UObject::GObjObjects()->Data[ 33547 ];

	UUICalloutButtonPanel_eventContainsButton_Parms ContainsButton_Parms;
	memcpy ( &ContainsButton_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );

	this->ProcessEvent ( pFnContainsButton, &ContainsButton_Parms, NULL );

	return ContainsButton_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.FindButtonIndex
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )

int UUICalloutButtonPanel::eventFindButtonIndex ( struct FName ButtonInputAlias )
{
	static UFunction* pFnFindButtonIndex = NULL;

	if ( ! pFnFindButtonIndex )
		pFnFindButtonIndex = (UFunction*) UObject::GObjObjects()->Data[ 33542 ];

	UUICalloutButtonPanel_eventFindButtonIndex_Parms FindButtonIndex_Parms;
	memcpy ( &FindButtonIndex_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );

	this->ProcessEvent ( pFnFindButtonIndex, &FindButtonIndex_Parms, NULL );

	return FindButtonIndex_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.FindButton
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUICalloutButton*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )

class UUICalloutButton* UUICalloutButtonPanel::eventFindButton ( struct FName ButtonInputAlias )
{
	static UFunction* pFnFindButton = NULL;

	if ( ! pFnFindButton )
		pFnFindButton = (UFunction*) UObject::GObjObjects()->Data[ 33537 ];

	UUICalloutButtonPanel_eventFindButton_Parms FindButton_Parms;
	memcpy ( &FindButton_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );

	this->ProcessEvent ( pFnFindButton, &FindButton_Parms, NULL );

	return FindButton_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.EnableButton
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bEnableButton                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUpdateButtonVisibility        ( CPF_OptionalParm | CPF_Parm )

bool UUICalloutButtonPanel::eventEnableButton ( struct FName ButtonInputAlias, int PlayerIndex, unsigned long bEnableButton, unsigned long bUpdateButtonVisibility )
{
	static UFunction* pFnEnableButton = NULL;

	if ( ! pFnEnableButton )
		pFnEnableButton = (UFunction*) UObject::GObjObjects()->Data[ 33529 ];

	UUICalloutButtonPanel_eventEnableButton_Parms EnableButton_Parms;
	memcpy ( &EnableButton_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );
	EnableButton_Parms.PlayerIndex = PlayerIndex;
	EnableButton_Parms.bEnableButton = bEnableButton;
	EnableButton_Parms.bUpdateButtonVisibility = bUpdateButtonVisibility;

	this->ProcessEvent ( pFnEnableButton, &EnableButton_Parms, NULL );

	return EnableButton_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.ShowButton
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )
// unsigned long                  bShowButton                    ( CPF_OptionalParm | CPF_Parm )

bool UUICalloutButtonPanel::eventShowButton ( struct FName ButtonInputAlias, unsigned long bShowButton )
{
	static UFunction* pFnShowButton = NULL;

	if ( ! pFnShowButton )
		pFnShowButton = (UFunction*) UObject::GObjObjects()->Data[ 33522 ];

	UUICalloutButtonPanel_eventShowButton_Parms ShowButton_Parms;
	memcpy ( &ShowButton_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );
	ShowButton_Parms.bShowButton = bShowButton;

	this->ProcessEvent ( pFnShowButton, &ShowButton_Parms, NULL );

	return ShowButton_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.SetButtonCallback
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )
// struct FScriptDelegate         NewClickHandler                ( CPF_Parm | CPF_NeedCtorLink )

bool UUICalloutButtonPanel::eventSetButtonCallback ( struct FName ButtonInputAlias, struct FScriptDelegate NewClickHandler )
{
	static UFunction* pFnSetButtonCallback = NULL;

	if ( ! pFnSetButtonCallback )
		pFnSetButtonCallback = (UFunction*) UObject::GObjObjects()->Data[ 33516 ];

	UUICalloutButtonPanel_eventSetButtonCallback_Parms SetButtonCallback_Parms;
	memcpy ( &SetButtonCallback_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );
	memcpy ( &SetButtonCallback_Parms.NewClickHandler, &NewClickHandler, 0x10 );

	this->ProcessEvent ( pFnSetButtonCallback, &SetButtonCallback_Parms, NULL );

	return SetButtonCallback_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.SetButtonInputAlias
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )
// struct FName                   NewButtonInputAlias            ( CPF_Parm | CPF_CoerceParm )

bool UUICalloutButtonPanel::eventSetButtonInputAlias ( struct FName ButtonInputAlias, struct FName NewButtonInputAlias )
{
	static UFunction* pFnSetButtonInputAlias = NULL;

	if ( ! pFnSetButtonInputAlias )
		pFnSetButtonInputAlias = (UFunction*) UObject::GObjObjects()->Data[ 33510 ];

	UUICalloutButtonPanel_eventSetButtonInputAlias_Parms SetButtonInputAlias_Parms;
	memcpy ( &SetButtonInputAlias_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );
	memcpy ( &SetButtonInputAlias_Parms.NewButtonInputAlias, &NewButtonInputAlias, 0x8 );

	this->ProcessEvent ( pFnSetButtonInputAlias, &SetButtonInputAlias_Parms, NULL );

	return SetButtonInputAlias_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.SetButtonCaption
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )
// struct FString                 NewButtonCaption               ( CPF_Parm | CPF_NeedCtorLink )

bool UUICalloutButtonPanel::eventSetButtonCaption ( struct FName ButtonInputAlias, struct FString NewButtonCaption )
{
	static UFunction* pFnSetButtonCaption = NULL;

	if ( ! pFnSetButtonCaption )
		pFnSetButtonCaption = (UFunction*) UObject::GObjObjects()->Data[ 33504 ];

	UUICalloutButtonPanel_eventSetButtonCaption_Parms SetButtonCaption_Parms;
	memcpy ( &SetButtonCaption_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );
	memcpy ( &SetButtonCaption_Parms.NewButtonCaption, &NewButtonCaption, 0x10 );

	this->ProcessEvent ( pFnSetButtonCaption, &SetButtonCaption_Parms, NULL );

	return SetButtonCaption_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.RemoveAllButtons
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUICalloutButtonPanel::eventRemoveAllButtons ( )
{
	static UFunction* pFnRemoveAllButtons = NULL;

	if ( ! pFnRemoveAllButtons )
		pFnRemoveAllButtons = (UFunction*) UObject::GObjObjects()->Data[ 33502 ];

	UUICalloutButtonPanel_eventRemoveAllButtons_Parms RemoveAllButtons_Parms;

	this->ProcessEvent ( pFnRemoveAllButtons, &RemoveAllButtons_Parms, NULL );

	return RemoveAllButtons_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.RemoveButtonByAlias
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )

bool UUICalloutButtonPanel::eventRemoveButtonByAlias ( struct FName ButtonInputAlias )
{
	static UFunction* pFnRemoveButtonByAlias = NULL;

	if ( ! pFnRemoveButtonByAlias )
		pFnRemoveButtonByAlias = (UFunction*) UObject::GObjObjects()->Data[ 33497 ];

	UUICalloutButtonPanel_eventRemoveButtonByAlias_Parms RemoveButtonByAlias_Parms;
	memcpy ( &RemoveButtonByAlias_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );

	this->ProcessEvent ( pFnRemoveButtonByAlias, &RemoveButtonByAlias_Parms, NULL );

	return RemoveButtonByAlias_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.RemoveButton
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUICalloutButton*        ButtonToRemove                 ( CPF_Parm )

bool UUICalloutButtonPanel::eventRemoveButton ( class UUICalloutButton* ButtonToRemove )
{
	static UFunction* pFnRemoveButton = NULL;

	if ( ! pFnRemoveButton )
		pFnRemoveButton = (UFunction*) UObject::GObjObjects()->Data[ 33493 ];

	UUICalloutButtonPanel_eventRemoveButton_Parms RemoveButton_Parms;
	RemoveButton_Parms.ButtonToRemove = ButtonToRemove;

	this->ProcessEvent ( pFnRemoveButton, &RemoveButton_Parms, NULL );

	return RemoveButton_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.InsertButton
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUICalloutButton*        NewButton                      ( CPF_Parm )

int UUICalloutButtonPanel::eventInsertButton ( class UUICalloutButton* NewButton )
{
	static UFunction* pFnInsertButton = NULL;

	if ( ! pFnInsertButton )
		pFnInsertButton = (UFunction*) UObject::GObjObjects()->Data[ 33488 ];

	UUICalloutButtonPanel_eventInsertButton_Parms InsertButton_Parms;
	InsertButton_Parms.NewButton = NewButton;

	this->ProcessEvent ( pFnInsertButton, &InsertButton_Parms, NULL );

	return InsertButton_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.RequestButtonDockingUpdate
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bImmediately                   ( CPF_OptionalParm | CPF_Parm )

void UUICalloutButtonPanel::RequestButtonDockingUpdate ( unsigned long bImmediately )
{
	static UFunction* pFnRequestButtonDockingUpdate = NULL;

	if ( ! pFnRequestButtonDockingUpdate )
		pFnRequestButtonDockingUpdate = (UFunction*) UObject::GObjObjects()->Data[ 33472 ];

	UUICalloutButtonPanel_execRequestButtonDockingUpdate_Parms RequestButtonDockingUpdate_Parms;
	RequestButtonDockingUpdate_Parms.bImmediately = bImmediately;

	pFnRequestButtonDockingUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestButtonDockingUpdate, &RequestButtonDockingUpdate_Parms, NULL );

	pFnRequestButtonDockingUpdate->FunctionFlags |= 0x400;
};

// Function Engine.UICalloutButtonPanel.FindBestInsertionIndex
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUICalloutButton*        ButtonToInsert                 ( CPF_Parm )
// unsigned long                  bSearchChildrenArray           ( CPF_OptionalParm | CPF_Parm )

int UUICalloutButtonPanel::FindBestInsertionIndex ( class UUICalloutButton* ButtonToInsert, unsigned long bSearchChildrenArray )
{
	static UFunction* pFnFindBestInsertionIndex = NULL;

	if ( ! pFnFindBestInsertionIndex )
		pFnFindBestInsertionIndex = (UFunction*) UObject::GObjObjects()->Data[ 33483 ];

	UUICalloutButtonPanel_execFindBestInsertionIndex_Parms FindBestInsertionIndex_Parms;
	FindBestInsertionIndex_Parms.ButtonToInsert = ButtonToInsert;
	FindBestInsertionIndex_Parms.bSearchChildrenArray = bSearchChildrenArray;

	pFnFindBestInsertionIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindBestInsertionIndex, &FindBestInsertionIndex_Parms, NULL );

	pFnFindBestInsertionIndex->FunctionFlags |= 0x400;

	return FindBestInsertionIndex_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.GetCalloutInputProxy
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIEvent_CalloutButtonInputProxy* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bCreateIfNecessary             ( CPF_OptionalParm | CPF_Parm )

class UUIEvent_CalloutButtonInputProxy* UUICalloutButtonPanel::GetCalloutInputProxy ( unsigned long bCreateIfNecessary )
{
	static UFunction* pFnGetCalloutInputProxy = NULL;

	if ( ! pFnGetCalloutInputProxy )
		pFnGetCalloutInputProxy = (UFunction*) UObject::GObjObjects()->Data[ 33436 ];

	UUICalloutButtonPanel_execGetCalloutInputProxy_Parms GetCalloutInputProxy_Parms;
	GetCalloutInputProxy_Parms.bCreateIfNecessary = bCreateIfNecessary;

	pFnGetCalloutInputProxy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCalloutInputProxy, &GetCalloutInputProxy_Parms, NULL );

	pFnGetCalloutInputProxy->FunctionFlags |= 0x400;

	return GetCalloutInputProxy_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.CreateCalloutButton
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UUICalloutButton*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonInputAlias               ( CPF_Parm )
// struct FName                   ButtonName                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bInsertChild                   ( CPF_OptionalParm | CPF_Parm )

class UUICalloutButton* UUICalloutButtonPanel::CreateCalloutButton ( struct FName ButtonInputAlias, struct FName ButtonName, unsigned long bInsertChild )
{
	static UFunction* pFnCreateCalloutButton = NULL;

	if ( ! pFnCreateCalloutButton )
		pFnCreateCalloutButton = (UFunction*) UObject::GObjObjects()->Data[ 33477 ];

	UUICalloutButtonPanel_execCreateCalloutButton_Parms CreateCalloutButton_Parms;
	memcpy ( &CreateCalloutButton_Parms.ButtonInputAlias, &ButtonInputAlias, 0x8 );
	memcpy ( &CreateCalloutButton_Parms.ButtonName, &ButtonName, 0x8 );
	CreateCalloutButton_Parms.bInsertChild = bInsertChild;

	pFnCreateCalloutButton->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateCalloutButton, &CreateCalloutButton_Parms, NULL );

	pFnCreateCalloutButton->FunctionFlags |= 0x400;

	return CreateCalloutButton_Parms.ReturnValue;
};

// Function Engine.UICalloutButtonPanel.GetAvailableCalloutButtonAliases
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_OptionalParm | CPF_Parm )
// struct TArray<struct FName>    AvailableAliases               ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUICalloutButtonPanel::GetAvailableCalloutButtonAliases ( class ULocalPlayer* PlayerOwner, struct TArray<struct FName>* AvailableAliases )
{
	static UFunction* pFnGetAvailableCalloutButtonAliases = NULL;

	if ( ! pFnGetAvailableCalloutButtonAliases )
		pFnGetAvailableCalloutButtonAliases = (UFunction*) UObject::GObjObjects()->Data[ 33473 ];

	UUICalloutButtonPanel_execGetAvailableCalloutButtonAliases_Parms GetAvailableCalloutButtonAliases_Parms;
	GetAvailableCalloutButtonAliases_Parms.PlayerOwner = PlayerOwner;

	pFnGetAvailableCalloutButtonAliases->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAvailableCalloutButtonAliases, &GetAvailableCalloutButtonAliases_Parms, NULL );

	pFnGetAvailableCalloutButtonAliases->FunctionFlags |= 0x400;

	if ( AvailableAliases )
		memcpy ( AvailableAliases, &GetAvailableCalloutButtonAliases_Parms.AvailableAliases, 0x10 );
};

// Function Engine.UICalloutButtonPanel.RemovedChild
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               OldChild                       ( CPF_Parm )
// struct TArray<class UUIObject*> ExclusionSet                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UUICalloutButtonPanel::eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, struct TArray<class UUIObject*> ExclusionSet )
{
	static UFunction* pFnRemovedChild = NULL;

	if ( ! pFnRemovedChild )
		pFnRemovedChild = (UFunction*) UObject::GObjObjects()->Data[ 33466 ];

	UUICalloutButtonPanel_eventRemovedChild_Parms RemovedChild_Parms;
	RemovedChild_Parms.WidgetOwner = WidgetOwner;
	RemovedChild_Parms.OldChild = OldChild;
	memcpy ( &RemovedChild_Parms.ExclusionSet, &ExclusionSet, 0x10 );

	this->ProcessEvent ( pFnRemovedChild, &RemovedChild_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.AddedChild
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               NewChild                       ( CPF_Parm )

void UUICalloutButtonPanel::eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild )
{
	static UFunction* pFnAddedChild = NULL;

	if ( ! pFnAddedChild )
		pFnAddedChild = (UFunction*) UObject::GObjObjects()->Data[ 33460 ];

	UUICalloutButtonPanel_eventAddedChild_Parms AddedChild_Parms;
	AddedChild_Parms.WidgetOwner = WidgetOwner;
	AddedChild_Parms.NewChild = NewChild;

	this->ProcessEvent ( pFnAddedChild, &AddedChild_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.SynchronizeInputAliases
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUICalloutButtonPanel::eventSynchronizeInputAliases ( )
{
	static UFunction* pFnSynchronizeInputAliases = NULL;

	if ( ! pFnSynchronizeInputAliases )
		pFnSynchronizeInputAliases = (UFunction*) UObject::GObjObjects()->Data[ 33458 ];

	UUICalloutButtonPanel_eventSynchronizeInputAliases_Parms SynchronizeInputAliases_Parms;

	this->ProcessEvent ( pFnSynchronizeInputAliases, &SynchronizeInputAliases_Parms, NULL );
};

// Function Engine.UICalloutButtonPanel.PopulateCalloutButtonArray
// [0x00020002] 
// Parameters infos:

void UUICalloutButtonPanel::PopulateCalloutButtonArray ( )
{
	static UFunction* pFnPopulateCalloutButtonArray = NULL;

	if ( ! pFnPopulateCalloutButtonArray )
		pFnPopulateCalloutButtonArray = (UFunction*) UObject::GObjObjects()->Data[ 33450 ];

	UUICalloutButtonPanel_execPopulateCalloutButtonArray_Parms PopulateCalloutButtonArray_Parms;

	this->ProcessEvent ( pFnPopulateCalloutButtonArray, &PopulateCalloutButtonArray_Parms, NULL );
};

// Function Engine.UIImage.SaveSubscriberValue
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )
// struct TArray<class UUIDataStore*> out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIImage::SaveSubscriberValue ( int BindingIndex, struct TArray<class UUIDataStore*>* out_BoundDataStores )
{
	static UFunction* pFnSaveSubscriberValue = NULL;

	if ( ! pFnSaveSubscriberValue )
		pFnSaveSubscriberValue = (UFunction*) UObject::GObjObjects()->Data[ 35137 ];

	UUIImage_execSaveSubscriberValue_Parms SaveSubscriberValue_Parms;
	SaveSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnSaveSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSubscriberValue, &SaveSubscriberValue_Parms, NULL );

	pFnSaveSubscriberValue->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &SaveSubscriberValue_Parms.out_BoundDataStores, 0x10 );

	return SaveSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIImage.ClearBoundDataStores
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIImage::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = (UFunction*) UObject::GObjObjects()->Data[ 35136 ];

	UUIImage_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UIImage.GetBoundDataStores
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct TArray<class UUIDataStore*> out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIImage::GetBoundDataStores ( struct TArray<class UUIDataStore*>* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = (UFunction*) UObject::GObjObjects()->Data[ 35133 ];

	UUIImage_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0x10 );
};

// Function Engine.UIImage.NotifyDataStoreValueUpdated
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUIImage::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = (UFunction*) UObject::GObjObjects()->Data[ 35127 ];

	UUIImage_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UIImage.RefreshSubscriberValue
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUIImage::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = (UFunction*) UObject::GObjObjects()->Data[ 35124 ];

	UUIImage_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIImage.GetDataStoreBinding
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUIImage::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = (UFunction*) UObject::GObjObjects()->Data[ 35121 ];

	UUIImage_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UIImage.SetDataStoreBinding
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUIImage::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = (UFunction*) UObject::GObjObjects()->Data[ 35118 ];

	UUIImage_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0x10 );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UIImage.SetValue
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USurface*                NewImage                       ( CPF_Parm )

void UUIImage::SetValue ( class USurface* NewImage )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = (UFunction*) UObject::GObjObjects()->Data[ 35115 ];

	UUIImage_execSetValue_Parms SetValue_Parms;
	SetValue_Parms.NewImage = NewImage;

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );
};

// Function Engine.UILabel.IgnoreMarkup
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bShouldIgnoreMarkup            ( CPF_Parm )

void UUILabel::IgnoreMarkup ( unsigned long bShouldIgnoreMarkup )
{
	static UFunction* pFnIgnoreMarkup = NULL;

	if ( ! pFnIgnoreMarkup )
		pFnIgnoreMarkup = (UFunction*) UObject::GObjObjects()->Data[ 35101 ];

	UUILabel_execIgnoreMarkup_Parms IgnoreMarkup_Parms;
	IgnoreMarkup_Parms.bShouldIgnoreMarkup = bShouldIgnoreMarkup;

	this->ProcessEvent ( pFnIgnoreMarkup, &IgnoreMarkup_Parms, NULL );
};

// Function Engine.UILabel.GetValue
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UUILabel::GetValue ( )
{
	static UFunction* pFnGetValue = NULL;

	if ( ! pFnGetValue )
		pFnGetValue = (UFunction*) UObject::GObjObjects()->Data[ 35098 ];

	UUILabel_execGetValue_Parms GetValue_Parms;

	this->ProcessEvent ( pFnGetValue, &GetValue_Parms, NULL );

	return GetValue_Parms.ReturnValue;
};

// Function Engine.UILabel.SetArrayValue
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct TArray<struct FString>  ValueArray                     ( CPF_Parm | CPF_NeedCtorLink )

void UUILabel::SetArrayValue ( struct TArray<struct FString> ValueArray )
{
	static UFunction* pFnSetArrayValue = NULL;

	if ( ! pFnSetArrayValue )
		pFnSetArrayValue = (UFunction*) UObject::GObjObjects()->Data[ 35094 ];

	UUILabel_execSetArrayValue_Parms SetArrayValue_Parms;
	memcpy ( &SetArrayValue_Parms.ValueArray, &ValueArray, 0x10 );

	this->ProcessEvent ( pFnSetArrayValue, &SetArrayValue_Parms, NULL );
};

// Function Engine.UILabel.ClearBoundDataStores
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUILabel::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = (UFunction*) UObject::GObjObjects()->Data[ 35093 ];

	UUILabel_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UILabel.GetBoundDataStores
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct TArray<class UUIDataStore*> out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUILabel::GetBoundDataStores ( struct TArray<class UUIDataStore*>* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = (UFunction*) UObject::GObjObjects()->Data[ 35090 ];

	UUILabel_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0x10 );
};

// Function Engine.UILabel.NotifyDataStoreValueUpdated
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUILabel::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = (UFunction*) UObject::GObjObjects()->Data[ 35084 ];

	UUILabel_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UILabel.RefreshSubscriberValue
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUILabel::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = (UFunction*) UObject::GObjObjects()->Data[ 35081 ];

	UUILabel_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UILabel.GetDataStoreBinding
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUILabel::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = (UFunction*) UObject::GObjObjects()->Data[ 35078 ];

	UUILabel_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UILabel.SetDataStoreBinding
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUILabel::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = (UFunction*) UObject::GObjObjects()->Data[ 35075 ];

	UUILabel_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0x10 );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UILabel.SetTextAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Horizontal                     ( CPF_Parm )
// unsigned char                  Vertical                       ( CPF_Parm )

void UUILabel::SetTextAlignment ( unsigned char Horizontal, unsigned char Vertical )
{
	static UFunction* pFnSetTextAlignment = NULL;

	if ( ! pFnSetTextAlignment )
		pFnSetTextAlignment = (UFunction*) UObject::GObjObjects()->Data[ 35072 ];

	UUILabel_execSetTextAlignment_Parms SetTextAlignment_Parms;
	SetTextAlignment_Parms.Horizontal = Horizontal;
	SetTextAlignment_Parms.Vertical = Vertical;

	pFnSetTextAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextAlignment, &SetTextAlignment_Parms, NULL );

	pFnSetTextAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UILabel.SetValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 NewText                        ( CPF_Parm | CPF_NeedCtorLink )

void UUILabel::SetValue ( struct FString NewText )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = (UFunction*) UObject::GObjObjects()->Data[ 35070 ];

	UUILabel_execSetValue_Parms SetValue_Parms;
	memcpy ( &SetValue_Parms.NewText, &NewText, 0x10 );

	pFnSetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );

	pFnSetValue->FunctionFlags |= 0x400;
};

// Function Engine.UIContextMenu.FindMenuItemIndex
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Parm )
// struct FString                 ItemToFind                     ( CPF_Parm | CPF_NeedCtorLink )

int UUIContextMenu::eventFindMenuItemIndex ( class UUIObject* Widget, struct FString ItemToFind )
{
	static UFunction* pFnFindMenuItemIndex = NULL;

	if ( ! pFnFindMenuItemIndex )
		pFnFindMenuItemIndex = (UFunction*) UObject::GObjObjects()->Data[ 34117 ];

	UUIContextMenu_eventFindMenuItemIndex_Parms FindMenuItemIndex_Parms;
	FindMenuItemIndex_Parms.Widget = Widget;
	memcpy ( &FindMenuItemIndex_Parms.ItemToFind, &ItemToFind, 0x10 );

	this->ProcessEvent ( pFnFindMenuItemIndex, &FindMenuItemIndex_Parms, NULL );

	return FindMenuItemIndex_Parms.ReturnValue;
};

// Function Engine.UIContextMenu.GetMenuItem
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Parm )
// int                            IndexToGet                     ( CPF_Parm )
// struct FString                 out_MenuItem                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIContextMenu::eventGetMenuItem ( class UUIObject* Widget, int IndexToGet, struct FString* out_MenuItem )
{
	static UFunction* pFnGetMenuItem = NULL;

	if ( ! pFnGetMenuItem )
		pFnGetMenuItem = (UFunction*) UObject::GObjObjects()->Data[ 34108 ];

	UUIContextMenu_eventGetMenuItem_Parms GetMenuItem_Parms;
	GetMenuItem_Parms.Widget = Widget;
	GetMenuItem_Parms.IndexToGet = IndexToGet;

	this->ProcessEvent ( pFnGetMenuItem, &GetMenuItem_Parms, NULL );

	if ( out_MenuItem )
		memcpy ( out_MenuItem, &GetMenuItem_Parms.out_MenuItem, 0x10 );

	return GetMenuItem_Parms.ReturnValue;
};

// Function Engine.UIContextMenu.GetAllMenuItems
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Parm )
// struct TArray<struct FString>  out_MenuItems                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIContextMenu::eventGetAllMenuItems ( class UUIObject* Widget, struct TArray<struct FString>* out_MenuItems )
{
	static UFunction* pFnGetAllMenuItems = NULL;

	if ( ! pFnGetAllMenuItems )
		pFnGetAllMenuItems = (UFunction*) UObject::GObjObjects()->Data[ 34099 ];

	UUIContextMenu_eventGetAllMenuItems_Parms GetAllMenuItems_Parms;
	GetAllMenuItems_Parms.Widget = Widget;

	this->ProcessEvent ( pFnGetAllMenuItems, &GetAllMenuItems_Parms, NULL );

	if ( out_MenuItems )
		memcpy ( out_MenuItems, &GetAllMenuItems_Parms.out_MenuItems, 0x10 );

	return GetAllMenuItems_Parms.ReturnValue;
};

// Function Engine.UIContextMenu.RemoveMenuItemAtIndex
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Parm )
// int                            IndexToRemove                  ( CPF_Parm )

bool UUIContextMenu::eventRemoveMenuItemAtIndex ( class UUIObject* Widget, int IndexToRemove )
{
	static UFunction* pFnRemoveMenuItemAtIndex = NULL;

	if ( ! pFnRemoveMenuItemAtIndex )
		pFnRemoveMenuItemAtIndex = (UFunction*) UObject::GObjObjects()->Data[ 34091 ];

	UUIContextMenu_eventRemoveMenuItemAtIndex_Parms RemoveMenuItemAtIndex_Parms;
	RemoveMenuItemAtIndex_Parms.Widget = Widget;
	RemoveMenuItemAtIndex_Parms.IndexToRemove = IndexToRemove;

	this->ProcessEvent ( pFnRemoveMenuItemAtIndex, &RemoveMenuItemAtIndex_Parms, NULL );

	return RemoveMenuItemAtIndex_Parms.ReturnValue;
};

// Function Engine.UIContextMenu.RemoveMenuItem
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Parm )
// struct FString                 ItemToRemove                   ( CPF_Parm | CPF_NeedCtorLink )

bool UUIContextMenu::eventRemoveMenuItem ( class UUIObject* Widget, struct FString ItemToRemove )
{
	static UFunction* pFnRemoveMenuItem = NULL;

	if ( ! pFnRemoveMenuItem )
		pFnRemoveMenuItem = (UFunction*) UObject::GObjObjects()->Data[ 34083 ];

	UUIContextMenu_eventRemoveMenuItem_Parms RemoveMenuItem_Parms;
	RemoveMenuItem_Parms.Widget = Widget;
	memcpy ( &RemoveMenuItem_Parms.ItemToRemove, &ItemToRemove, 0x10 );

	this->ProcessEvent ( pFnRemoveMenuItem, &RemoveMenuItem_Parms, NULL );

	return RemoveMenuItem_Parms.ReturnValue;
};

// Function Engine.UIContextMenu.ClearMenuItems
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Parm )

bool UUIContextMenu::eventClearMenuItems ( class UUIObject* Widget )
{
	static UFunction* pFnClearMenuItems = NULL;

	if ( ! pFnClearMenuItems )
		pFnClearMenuItems = (UFunction*) UObject::GObjObjects()->Data[ 34076 ];

	UUIContextMenu_eventClearMenuItems_Parms ClearMenuItems_Parms;
	ClearMenuItems_Parms.Widget = Widget;

	this->ProcessEvent ( pFnClearMenuItems, &ClearMenuItems_Parms, NULL );

	return ClearMenuItems_Parms.ReturnValue;
};

// Function Engine.UIContextMenu.InsertMenuItem
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Parm )
// struct FString                 Item                           ( CPF_Parm | CPF_NeedCtorLink )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAllowDuplicates               ( CPF_OptionalParm | CPF_Parm )

bool UUIContextMenu::eventInsertMenuItem ( class UUIObject* Widget, struct FString Item, int InsertIndex, unsigned long bAllowDuplicates )
{
	static UFunction* pFnInsertMenuItem = NULL;

	if ( ! pFnInsertMenuItem )
		pFnInsertMenuItem = (UFunction*) UObject::GObjObjects()->Data[ 34066 ];

	UUIContextMenu_eventInsertMenuItem_Parms InsertMenuItem_Parms;
	InsertMenuItem_Parms.Widget = Widget;
	memcpy ( &InsertMenuItem_Parms.Item, &Item, 0x10 );
	InsertMenuItem_Parms.InsertIndex = InsertIndex;
	InsertMenuItem_Parms.bAllowDuplicates = bAllowDuplicates;

	this->ProcessEvent ( pFnInsertMenuItem, &InsertMenuItem_Parms, NULL );

	return InsertMenuItem_Parms.ReturnValue;
};

// Function Engine.UIContextMenu.SetMenuItems
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIObject*               Widget                         ( CPF_Parm )
// struct TArray<struct FString>  NewMenuItems                   ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bClearExisting                 ( CPF_OptionalParm | CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIContextMenu::eventSetMenuItems ( class UUIObject* Widget, struct TArray<struct FString> NewMenuItems, unsigned long bClearExisting, int InsertIndex )
{
	static UFunction* pFnSetMenuItems = NULL;

	if ( ! pFnSetMenuItems )
		pFnSetMenuItems = (UFunction*) UObject::GObjObjects()->Data[ 34053 ];

	UUIContextMenu_eventSetMenuItems_Parms SetMenuItems_Parms;
	SetMenuItems_Parms.Widget = Widget;
	memcpy ( &SetMenuItems_Parms.NewMenuItems, &NewMenuItems, 0x10 );
	SetMenuItems_Parms.bClearExisting = bClearExisting;
	SetMenuItems_Parms.InsertIndex = InsertIndex;

	this->ProcessEvent ( pFnSetMenuItems, &SetMenuItems_Parms, NULL );

	return SetMenuItems_Parms.ReturnValue;
};

// Function Engine.UIContextMenu.Close
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIContextMenu::Close ( int PlayerIndex )
{
	static UFunction* pFnClose = NULL;

	if ( ! pFnClose )
		pFnClose = (UFunction*) UObject::GObjObjects()->Data[ 34050 ];

	UUIContextMenu_execClose_Parms Close_Parms;
	Close_Parms.PlayerIndex = PlayerIndex;

	pFnClose->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClose, &Close_Parms, NULL );

	pFnClose->FunctionFlags |= 0x400;

	return Close_Parms.ReturnValue;
};

// Function Engine.UIContextMenu.Open
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIContextMenu::Open ( int PlayerIndex )
{
	static UFunction* pFnOpen = NULL;

	if ( ! pFnOpen )
		pFnOpen = (UFunction*) UObject::GObjObjects()->Data[ 34047 ];

	UUIContextMenu_execOpen_Parms Open_Parms;
	Open_Parms.PlayerIndex = PlayerIndex;

	pFnOpen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpen, &Open_Parms, NULL );

	pFnOpen->FunctionFlags |= 0x400;

	return Open_Parms.ReturnValue;
};

// Function Engine.UIContextMenu.IsActiveContextMenu
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIContextMenu::IsActiveContextMenu ( )
{
	static UFunction* pFnIsActiveContextMenu = NULL;

	if ( ! pFnIsActiveContextMenu )
		pFnIsActiveContextMenu = (UFunction*) UObject::GObjObjects()->Data[ 34045 ];

	UUIContextMenu_execIsActiveContextMenu_Parms IsActiveContextMenu_Parms;

	pFnIsActiveContextMenu->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsActiveContextMenu, &IsActiveContextMenu_Parms, NULL );

	pFnIsActiveContextMenu->FunctionFlags |= 0x400;

	return IsActiveContextMenu_Parms.ReturnValue;
};

// Function Engine.UIPrefabInstance.DetachFromSourcePrefab
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIPrefabInstance::DetachFromSourcePrefab ( )
{
	static UFunction* pFnDetachFromSourcePrefab = NULL;

	if ( ! pFnDetachFromSourcePrefab )
		pFnDetachFromSourcePrefab = (UFunction*) UObject::GObjObjects()->Data[ 35682 ];

	UUIPrefabInstance_execDetachFromSourcePrefab_Parms DetachFromSourcePrefab_Parms;

	pFnDetachFromSourcePrefab->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetachFromSourcePrefab, &DetachFromSourcePrefab_Parms, NULL );

	pFnDetachFromSourcePrefab->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.DebugShowAnimators
// [0x00020002] 
// Parameters infos:

void UUIScene::DebugShowAnimators ( )
{
	static UFunction* pFnDebugShowAnimators = NULL;

	if ( ! pFnDebugShowAnimators )
		pFnDebugShowAnimators = (UFunction*) UObject::GObjObjects()->Data[ 35546 ];

	UUIScene_execDebugShowAnimators_Parms DebugShowAnimators_Parms;

	this->ProcessEvent ( pFnDebugShowAnimators, &DebugShowAnimators_Parms, NULL );
};

// Function Engine.UIScene.LogCurrentState
// [0x00020002] 
// Parameters infos:
// int                            Indent                         ( CPF_Parm )

void UUIScene::LogCurrentState ( int Indent )
{
	static UFunction* pFnLogCurrentState = NULL;

	if ( ! pFnLogCurrentState )
		pFnLogCurrentState = (UFunction*) UObject::GObjObjects()->Data[ 35542 ];

	UUIScene_execLogCurrentState_Parms LogCurrentState_Parms;
	LogCurrentState_Parms.Indent = Indent;

	this->ProcessEvent ( pFnLogCurrentState, &LogCurrentState_Parms, NULL );
};

// Function Engine.UIScene.LogRenderBounds
// [0x00020002] 
// Parameters infos:
// int                            Indent                         ( CPF_Parm )

void UUIScene::LogRenderBounds ( int Indent )
{
	static UFunction* pFnLogRenderBounds = NULL;

	if ( ! pFnLogRenderBounds )
		pFnLogRenderBounds = (UFunction*) UObject::GObjObjects()->Data[ 35539 ];

	UUIScene_execLogRenderBounds_Parms LogRenderBounds_Parms;
	LogRenderBounds_Parms.Indent = Indent;

	this->ProcessEvent ( pFnLogRenderBounds, &LogRenderBounds_Parms, NULL );
};

// Function Engine.UIScene.OnRegainedFocusAnimationComplete
// [0x00020002] 
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// struct FName                   AnimName                       ( CPF_Parm )
// int                            TrackTypeMask                  ( CPF_Parm )

void UUIScene::OnRegainedFocusAnimationComplete ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask )
{
	static UFunction* pFnOnRegainedFocusAnimationComplete = NULL;

	if ( ! pFnOnRegainedFocusAnimationComplete )
		pFnOnRegainedFocusAnimationComplete = (UFunction*) UObject::GObjObjects()->Data[ 35535 ];

	UUIScene_execOnRegainedFocusAnimationComplete_Parms OnRegainedFocusAnimationComplete_Parms;
	OnRegainedFocusAnimationComplete_Parms.Sender = Sender;
	memcpy ( &OnRegainedFocusAnimationComplete_Parms.AnimName, &AnimName, 0x8 );
	OnRegainedFocusAnimationComplete_Parms.TrackTypeMask = TrackTypeMask;

	this->ProcessEvent ( pFnOnRegainedFocusAnimationComplete, &OnRegainedFocusAnimationComplete_Parms, NULL );
};

// Function Engine.UIScene.OnRegainingFocusAnimationComplete
// [0x00020002] 
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// struct FName                   AnimName                       ( CPF_Parm )
// int                            TrackTypeMask                  ( CPF_Parm )

void UUIScene::OnRegainingFocusAnimationComplete ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask )
{
	static UFunction* pFnOnRegainingFocusAnimationComplete = NULL;

	if ( ! pFnOnRegainingFocusAnimationComplete )
		pFnOnRegainingFocusAnimationComplete = (UFunction*) UObject::GObjObjects()->Data[ 35531 ];

	UUIScene_execOnRegainingFocusAnimationComplete_Parms OnRegainingFocusAnimationComplete_Parms;
	OnRegainingFocusAnimationComplete_Parms.Sender = Sender;
	memcpy ( &OnRegainingFocusAnimationComplete_Parms.AnimName, &AnimName, 0x8 );
	OnRegainingFocusAnimationComplete_Parms.TrackTypeMask = TrackTypeMask;

	this->ProcessEvent ( pFnOnRegainingFocusAnimationComplete, &OnRegainingFocusAnimationComplete_Parms, NULL );
};

// Function Engine.UIScene.OnLostFocusAnimationComplete
// [0x00020002] 
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// struct FName                   AnimName                       ( CPF_Parm )
// int                            TrackTypeMask                  ( CPF_Parm )

void UUIScene::OnLostFocusAnimationComplete ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask )
{
	static UFunction* pFnOnLostFocusAnimationComplete = NULL;

	if ( ! pFnOnLostFocusAnimationComplete )
		pFnOnLostFocusAnimationComplete = (UFunction*) UObject::GObjObjects()->Data[ 35527 ];

	UUIScene_execOnLostFocusAnimationComplete_Parms OnLostFocusAnimationComplete_Parms;
	OnLostFocusAnimationComplete_Parms.Sender = Sender;
	memcpy ( &OnLostFocusAnimationComplete_Parms.AnimName, &AnimName, 0x8 );
	OnLostFocusAnimationComplete_Parms.TrackTypeMask = TrackTypeMask;

	this->ProcessEvent ( pFnOnLostFocusAnimationComplete, &OnLostFocusAnimationComplete_Parms, NULL );
};

// Function Engine.UIScene.OnCloseAnimationComplete_IgnoreChildScenes
// [0x00020002] 
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// struct FName                   AnimName                       ( CPF_Parm )
// int                            TrackTypeMask                  ( CPF_Parm )

void UUIScene::OnCloseAnimationComplete_IgnoreChildScenes ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask )
{
	static UFunction* pFnOnCloseAnimationComplete_IgnoreChildScenes = NULL;

	if ( ! pFnOnCloseAnimationComplete_IgnoreChildScenes )
		pFnOnCloseAnimationComplete_IgnoreChildScenes = (UFunction*) UObject::GObjObjects()->Data[ 35522 ];

	UUIScene_execOnCloseAnimationComplete_IgnoreChildScenes_Parms OnCloseAnimationComplete_IgnoreChildScenes_Parms;
	OnCloseAnimationComplete_IgnoreChildScenes_Parms.Sender = Sender;
	memcpy ( &OnCloseAnimationComplete_IgnoreChildScenes_Parms.AnimName, &AnimName, 0x8 );
	OnCloseAnimationComplete_IgnoreChildScenes_Parms.TrackTypeMask = TrackTypeMask;

	this->ProcessEvent ( pFnOnCloseAnimationComplete_IgnoreChildScenes, &OnCloseAnimationComplete_IgnoreChildScenes_Parms, NULL );
};

// Function Engine.UIScene.OnCloseAnimationComplete
// [0x00020002] 
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// struct FName                   AnimName                       ( CPF_Parm )
// int                            TrackTypeMask                  ( CPF_Parm )

void UUIScene::OnCloseAnimationComplete ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask )
{
	static UFunction* pFnOnCloseAnimationComplete = NULL;

	if ( ! pFnOnCloseAnimationComplete )
		pFnOnCloseAnimationComplete = (UFunction*) UObject::GObjObjects()->Data[ 35517 ];

	UUIScene_execOnCloseAnimationComplete_Parms OnCloseAnimationComplete_Parms;
	OnCloseAnimationComplete_Parms.Sender = Sender;
	memcpy ( &OnCloseAnimationComplete_Parms.AnimName, &AnimName, 0x8 );
	OnCloseAnimationComplete_Parms.TrackTypeMask = TrackTypeMask;

	this->ProcessEvent ( pFnOnCloseAnimationComplete, &OnCloseAnimationComplete_Parms, NULL );
};

// Function Engine.UIScene.OnOpenAnimationComplete
// [0x00020002] 
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// struct FName                   AnimName                       ( CPF_Parm )
// int                            TrackTypeMask                  ( CPF_Parm )

void UUIScene::OnOpenAnimationComplete ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask )
{
	static UFunction* pFnOnOpenAnimationComplete = NULL;

	if ( ! pFnOnOpenAnimationComplete )
		pFnOnOpenAnimationComplete = (UFunction*) UObject::GObjObjects()->Data[ 35513 ];

	UUIScene_execOnOpenAnimationComplete_Parms OnOpenAnimationComplete_Parms;
	OnOpenAnimationComplete_Parms.Sender = Sender;
	memcpy ( &OnOpenAnimationComplete_Parms.AnimName, &AnimName, 0x8 );
	OnOpenAnimationComplete_Parms.TrackTypeMask = TrackTypeMask;

	this->ProcessEvent ( pFnOnOpenAnimationComplete, &OnOpenAnimationComplete_Parms, NULL );
};

// Function Engine.UIScene.BeginSceneRegainedFocusAnimation
// [0x00020002] 
// Parameters infos:

void UUIScene::BeginSceneRegainedFocusAnimation ( )
{
	static UFunction* pFnBeginSceneRegainedFocusAnimation = NULL;

	if ( ! pFnBeginSceneRegainedFocusAnimation )
		pFnBeginSceneRegainedFocusAnimation = (UFunction*) UObject::GObjObjects()->Data[ 35511 ];

	UUIScene_execBeginSceneRegainedFocusAnimation_Parms BeginSceneRegainedFocusAnimation_Parms;

	this->ProcessEvent ( pFnBeginSceneRegainedFocusAnimation, &BeginSceneRegainedFocusAnimation_Parms, NULL );
};

// Function Engine.UIScene.BeginSceneRegainingFocusAnimation
// [0x00020002] 
// Parameters infos:

void UUIScene::BeginSceneRegainingFocusAnimation ( )
{
	static UFunction* pFnBeginSceneRegainingFocusAnimation = NULL;

	if ( ! pFnBeginSceneRegainingFocusAnimation )
		pFnBeginSceneRegainingFocusAnimation = (UFunction*) UObject::GObjObjects()->Data[ 35509 ];

	UUIScene_execBeginSceneRegainingFocusAnimation_Parms BeginSceneRegainingFocusAnimation_Parms;

	this->ProcessEvent ( pFnBeginSceneRegainingFocusAnimation, &BeginSceneRegainingFocusAnimation_Parms, NULL );
};

// Function Engine.UIScene.BeginSceneLostFocusAnimation
// [0x00020002] 
// Parameters infos:

void UUIScene::BeginSceneLostFocusAnimation ( )
{
	static UFunction* pFnBeginSceneLostFocusAnimation = NULL;

	if ( ! pFnBeginSceneLostFocusAnimation )
		pFnBeginSceneLostFocusAnimation = (UFunction*) UObject::GObjObjects()->Data[ 35508 ];

	UUIScene_execBeginSceneLostFocusAnimation_Parms BeginSceneLostFocusAnimation_Parms;

	this->ProcessEvent ( pFnBeginSceneLostFocusAnimation, &BeginSceneLostFocusAnimation_Parms, NULL );
};

// Function Engine.UIScene.BeginSceneCloseAnimation
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bCloseChildScenes              ( CPF_Parm )

bool UUIScene::BeginSceneCloseAnimation ( unsigned long bCloseChildScenes )
{
	static UFunction* pFnBeginSceneCloseAnimation = NULL;

	if ( ! pFnBeginSceneCloseAnimation )
		pFnBeginSceneCloseAnimation = (UFunction*) UObject::GObjObjects()->Data[ 35485 ];

	UUIScene_execBeginSceneCloseAnimation_Parms BeginSceneCloseAnimation_Parms;
	BeginSceneCloseAnimation_Parms.bCloseChildScenes = bCloseChildScenes;

	this->ProcessEvent ( pFnBeginSceneCloseAnimation, &BeginSceneCloseAnimation_Parms, NULL );

	return BeginSceneCloseAnimation_Parms.ReturnValue;
};

// Function Engine.UIScene.BeginSceneOpenAnimation
// [0x00020002] 
// Parameters infos:

void UUIScene::BeginSceneOpenAnimation ( )
{
	static UFunction* pFnBeginSceneOpenAnimation = NULL;

	if ( ! pFnBeginSceneOpenAnimation )
		pFnBeginSceneOpenAnimation = (UFunction*) UObject::GObjObjects()->Data[ 35502 ];

	UUIScene_execBeginSceneOpenAnimation_Parms BeginSceneOpenAnimation_Parms;

	this->ProcessEvent ( pFnBeginSceneOpenAnimation, &BeginSceneOpenAnimation_Parms, NULL );
};

// Function Engine.UIScene.StopSceneAnimation
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimationSequenceName          ( CPF_Parm )
// unsigned long                  bFinalize                      ( CPF_OptionalParm | CPF_Parm )

bool UUIScene::StopSceneAnimation ( struct FName AnimationSequenceName, unsigned long bFinalize )
{
	static UFunction* pFnStopSceneAnimation = NULL;

	if ( ! pFnStopSceneAnimation )
		pFnStopSceneAnimation = (UFunction*) UObject::GObjObjects()->Data[ 35473 ];

	UUIScene_execStopSceneAnimation_Parms StopSceneAnimation_Parms;
	memcpy ( &StopSceneAnimation_Parms.AnimationSequenceName, &AnimationSequenceName, 0x8 );
	StopSceneAnimation_Parms.bFinalize = bFinalize;

	this->ProcessEvent ( pFnStopSceneAnimation, &StopSceneAnimation_Parms, NULL );

	return StopSceneAnimation_Parms.ReturnValue;
};

// Function Engine.UIScene.BeginSceneAnimation
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimationSequenceName          ( CPF_Parm )
// struct FScriptDelegate         TrackCompletedDelegate         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UUIScene::BeginSceneAnimation ( struct FName AnimationSequenceName, struct FScriptDelegate TrackCompletedDelegate )
{
	static UFunction* pFnBeginSceneAnimation = NULL;

	if ( ! pFnBeginSceneAnimation )
		pFnBeginSceneAnimation = (UFunction*) UObject::GObjObjects()->Data[ 35494 ];

	UUIScene_execBeginSceneAnimation_Parms BeginSceneAnimation_Parms;
	memcpy ( &BeginSceneAnimation_Parms.AnimationSequenceName, &AnimationSequenceName, 0x8 );
	memcpy ( &BeginSceneAnimation_Parms.TrackCompletedDelegate, &TrackCompletedDelegate, 0x10 );

	this->ProcessEvent ( pFnBeginSceneAnimation, &BeginSceneAnimation_Parms, NULL );

	return BeginSceneAnimation_Parms.ReturnValue;
};

// Function Engine.UIScene.FindAnimatorIndex
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         SearchObj                      ( CPF_Parm )

int UUIScene::FindAnimatorIndex ( class UUIScreenObject* SearchObj )
{
	static UFunction* pFnFindAnimatorIndex = NULL;

	if ( ! pFnFindAnimatorIndex )
		pFnFindAnimatorIndex = (UFunction*) UObject::GObjObjects()->Data[ 35489 ];

	UUIScene_execFindAnimatorIndex_Parms FindAnimatorIndex_Parms;
	FindAnimatorIndex_Parms.SearchObj = SearchObj;

	this->ProcessEvent ( pFnFindAnimatorIndex, &FindAnimatorIndex_Parms, NULL );

	return FindAnimatorIndex_Parms.ReturnValue;
};

// Function Engine.UIScene.CloseScene
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                SceneToClose                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bCloseChildScenes              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bForceCloseImmediately         ( CPF_OptionalParm | CPF_Parm )

bool UUIScene::eventCloseScene ( class UUIScene* SceneToClose, unsigned long bCloseChildScenes, unsigned long bForceCloseImmediately )
{
	static UFunction* pFnCloseScene = NULL;

	if ( ! pFnCloseScene )
		pFnCloseScene = (UFunction*) UObject::GObjObjects()->Data[ 21932 ];

	UUIScene_eventCloseScene_Parms CloseScene_Parms;
	CloseScene_Parms.SceneToClose = SceneToClose;
	CloseScene_Parms.bCloseChildScenes = bCloseChildScenes;
	CloseScene_Parms.bForceCloseImmediately = bForceCloseImmediately;

	this->ProcessEvent ( pFnCloseScene, &CloseScene_Parms, NULL );

	return CloseScene_Parms.ReturnValue;
};

// Function Engine.UIScene.OpenScene
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                SceneToOpen                    ( CPF_Parm )
// class ULocalPlayer*            ScenePlayerOwner               ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  ForcedPriority                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipAnimation                 ( CPF_OptionalParm | CPF_Parm )
// struct FScriptDelegate         SceneDelegate                  ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

class UUIScene* UUIScene::eventOpenScene ( class UUIScene* SceneToOpen, class ULocalPlayer* ScenePlayerOwner, unsigned char ForcedPriority, unsigned long bSkipAnimation, struct FScriptDelegate SceneDelegate )
{
	static UFunction* pFnOpenScene = NULL;

	if ( ! pFnOpenScene )
		pFnOpenScene = (UFunction*) UObject::GObjObjects()->Data[ 22004 ];

	UUIScene_eventOpenScene_Parms OpenScene_Parms;
	OpenScene_Parms.SceneToOpen = SceneToOpen;
	OpenScene_Parms.ScenePlayerOwner = ScenePlayerOwner;
	OpenScene_Parms.ForcedPriority = ForcedPriority;
	OpenScene_Parms.bSkipAnimation = bSkipAnimation;
	memcpy ( &OpenScene_Parms.SceneDelegate, &SceneDelegate, 0x10 );

	this->ProcessEvent ( pFnOpenScene, &OpenScene_Parms, NULL );

	return OpenScene_Parms.ReturnValue;
};

// Function Engine.UIScene.NotifyPlayerRemoved
// [0x00020002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            RemovedPlayer                  ( CPF_Parm )

void UUIScene::NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer )
{
	static UFunction* pFnNotifyPlayerRemoved = NULL;

	if ( ! pFnNotifyPlayerRemoved )
		pFnNotifyPlayerRemoved = (UFunction*) UObject::GObjObjects()->Data[ 35460 ];

	UUIScene_execNotifyPlayerRemoved_Parms NotifyPlayerRemoved_Parms;
	NotifyPlayerRemoved_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerRemoved_Parms.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Parms, NULL );
};

// Function Engine.UIScene.NotifyPlayerAdded
// [0x00020002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            AddedPlayer                    ( CPF_Parm )

void UUIScene::NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer )
{
	static UFunction* pFnNotifyPlayerAdded = NULL;

	if ( ! pFnNotifyPlayerAdded )
		pFnNotifyPlayerAdded = (UFunction*) UObject::GObjObjects()->Data[ 35457 ];

	UUIScene_execNotifyPlayerAdded_Parms NotifyPlayerAdded_Parms;
	NotifyPlayerAdded_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerAdded_Parms.AddedPlayer = AddedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerAdded, &NotifyPlayerAdded_Parms, NULL );
};

// Function Engine.UIScene.NotifyStorageDeviceChanged
// [0x00020002] 
// Parameters infos:

void UUIScene::NotifyStorageDeviceChanged ( )
{
	static UFunction* pFnNotifyStorageDeviceChanged = NULL;

	if ( ! pFnNotifyStorageDeviceChanged )
		pFnNotifyStorageDeviceChanged = (UFunction*) UObject::GObjObjects()->Data[ 35455 ];

	UUIScene_execNotifyStorageDeviceChanged_Parms NotifyStorageDeviceChanged_Parms;

	this->ProcessEvent ( pFnNotifyStorageDeviceChanged, &NotifyStorageDeviceChanged_Parms, NULL );
};

// Function Engine.UIScene.NotifyLinkStatusChanged
// [0x00020002] 
// Parameters infos:
// unsigned long                  bConnected                     ( CPF_Parm )

void UUIScene::NotifyLinkStatusChanged ( unsigned long bConnected )
{
	static UFunction* pFnNotifyLinkStatusChanged = NULL;

	if ( ! pFnNotifyLinkStatusChanged )
		pFnNotifyLinkStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 35452 ];

	UUIScene_execNotifyLinkStatusChanged_Parms NotifyLinkStatusChanged_Parms;
	NotifyLinkStatusChanged_Parms.bConnected = bConnected;

	this->ProcessEvent ( pFnNotifyLinkStatusChanged, &NotifyLinkStatusChanged_Parms, NULL );
};

// Function Engine.UIScene.NotifyOnlineServiceStatusChanged
// [0x00020002] 
// Parameters infos:
// unsigned char                  NewConnectionStatus            ( CPF_Parm )

void UUIScene::NotifyOnlineServiceStatusChanged ( unsigned char NewConnectionStatus )
{
	static UFunction* pFnNotifyOnlineServiceStatusChanged = NULL;

	if ( ! pFnNotifyOnlineServiceStatusChanged )
		pFnNotifyOnlineServiceStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 35448 ];

	UUIScene_execNotifyOnlineServiceStatusChanged_Parms NotifyOnlineServiceStatusChanged_Parms;
	NotifyOnlineServiceStatusChanged_Parms.NewConnectionStatus = NewConnectionStatus;

	this->ProcessEvent ( pFnNotifyOnlineServiceStatusChanged, &NotifyOnlineServiceStatusChanged_Parms, NULL );
};

// Function Engine.UIScene.NotifyControllerStatusChanged
// [0x00020002] 
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )
// unsigned long                  bConnected                     ( CPF_Parm )

void UUIScene::NotifyControllerStatusChanged ( int ControllerId, unsigned long bConnected )
{
	static UFunction* pFnNotifyControllerStatusChanged = NULL;

	if ( ! pFnNotifyControllerStatusChanged )
		pFnNotifyControllerStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 35444 ];

	UUIScene_execNotifyControllerStatusChanged_Parms NotifyControllerStatusChanged_Parms;
	NotifyControllerStatusChanged_Parms.ControllerId = ControllerId;
	NotifyControllerStatusChanged_Parms.bConnected = bConnected;

	this->ProcessEvent ( pFnNotifyControllerStatusChanged, &NotifyControllerStatusChanged_Parms, NULL );
};

// Function Engine.UIScene.NotifyLoginStatusChanged
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// unsigned char                  NewStatus                      ( CPF_Parm )

bool UUIScene::NotifyLoginStatusChanged ( int ControllerId, unsigned char NewStatus )
{
	static UFunction* pFnNotifyLoginStatusChanged = NULL;

	if ( ! pFnNotifyLoginStatusChanged )
		pFnNotifyLoginStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 21940 ];

	UUIScene_execNotifyLoginStatusChanged_Parms NotifyLoginStatusChanged_Parms;
	NotifyLoginStatusChanged_Parms.ControllerId = ControllerId;
	NotifyLoginStatusChanged_Parms.NewStatus = NewStatus;

	this->ProcessEvent ( pFnNotifyLoginStatusChanged, &NotifyLoginStatusChanged_Parms, NULL );

	return NotifyLoginStatusChanged_Parms.ReturnValue;
};

// Function Engine.UIScene.NotifyGameSessionEnded
// [0x00020002] 
// Parameters infos:

void UUIScene::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 35439 ];

	UUIScene_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );
};

// Function Engine.UIScene.NotifyPreClientTravel
// [0x00020000] 
// Parameters infos:
// struct FString                 TravelURL                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  TravelType                     ( CPF_Parm )
// unsigned long                  bIsSeamless                    ( CPF_Parm )

void UUIScene::NotifyPreClientTravel ( struct FString TravelURL, unsigned char TravelType, unsigned long bIsSeamless )
{
	static UFunction* pFnNotifyPreClientTravel = NULL;

	if ( ! pFnNotifyPreClientTravel )
		pFnNotifyPreClientTravel = (UFunction*) UObject::GObjObjects()->Data[ 35435 ];

	UUIScene_execNotifyPreClientTravel_Parms NotifyPreClientTravel_Parms;
	memcpy ( &NotifyPreClientTravel_Parms.TravelURL, &TravelURL, 0x10 );
	NotifyPreClientTravel_Parms.TravelType = TravelType;
	NotifyPreClientTravel_Parms.bIsSeamless = bIsSeamless;

	this->ProcessEvent ( pFnNotifyPreClientTravel, &NotifyPreClientTravel_Parms, NULL );
};

// Function Engine.UIScene.SceneCreated
// [0x00020000] 
// Parameters infos:
// class UUIScene*                CreatedScene                   ( CPF_Parm )

void UUIScene::SceneCreated ( class UUIScene* CreatedScene )
{
	static UFunction* pFnSceneCreated = NULL;

	if ( ! pFnSceneCreated )
		pFnSceneCreated = (UFunction*) UObject::GObjObjects()->Data[ 35433 ];

	UUIScene_execSceneCreated_Parms SceneCreated_Parms;
	SceneCreated_Parms.CreatedScene = CreatedScene;

	this->ProcessEvent ( pFnSceneCreated, &SceneCreated_Parms, NULL );
};

// Function Engine.UIScene.UIAnimationEnded
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// struct FName                   AnimName                       ( CPF_Parm )
// int                            TrackTypeMask                  ( CPF_Parm )

void UUIScene::eventUIAnimationEnded ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask )
{
	static UFunction* pFnUIAnimationEnded = NULL;

	if ( ! pFnUIAnimationEnded )
		pFnUIAnimationEnded = (UFunction*) UObject::GObjObjects()->Data[ 35428 ];

	UUIScene_eventUIAnimationEnded_Parms UIAnimationEnded_Parms;
	UIAnimationEnded_Parms.Sender = Sender;
	memcpy ( &UIAnimationEnded_Parms.AnimName, &AnimName, 0x8 );
	UIAnimationEnded_Parms.TrackTypeMask = TrackTypeMask;

	this->ProcessEvent ( pFnUIAnimationEnded, &UIAnimationEnded_Parms, NULL );
};

// Function Engine.UIScene.UIAnimationStarted
// [0x00824802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         Sender                         ( CPF_Parm )
// struct FName                   AnimName                       ( CPF_Parm )
// int                            TrackTypeMask                  ( CPF_Parm )
// unsigned long                  bSetAnimatingFlag              ( CPF_OptionalParm | CPF_Parm )

void UUIScene::eventUIAnimationStarted ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask, unsigned long bSetAnimatingFlag )
{
	static UFunction* pFnUIAnimationStarted = NULL;

	if ( ! pFnUIAnimationStarted )
		pFnUIAnimationStarted = (UFunction*) UObject::GObjObjects()->Data[ 35414 ];

	UUIScene_eventUIAnimationStarted_Parms UIAnimationStarted_Parms;
	UIAnimationStarted_Parms.Sender = Sender;
	memcpy ( &UIAnimationStarted_Parms.AnimName, &AnimName, 0x8 );
	UIAnimationStarted_Parms.TrackTypeMask = TrackTypeMask;
	UIAnimationStarted_Parms.bSetAnimatingFlag = bSetAnimatingFlag;

	this->ProcessEvent ( pFnUIAnimationStarted, &UIAnimationStarted_Parms, NULL );
};

// Function Engine.UIScene.SetVisibility
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bIsVisible                     ( CPF_Parm )

void UUIScene::eventSetVisibility ( unsigned long bIsVisible )
{
	static UFunction* pFnSetVisibility = NULL;

	if ( ! pFnSetVisibility )
		pFnSetVisibility = (UFunction*) UObject::GObjObjects()->Data[ 35411 ];

	UUIScene_eventSetVisibility_Parms SetVisibility_Parms;
	SetVisibility_Parms.bIsVisible = bIsVisible;

	this->ProcessEvent ( pFnSetVisibility, &SetVisibility_Parms, NULL );
};

// Function Engine.UIScene.RemovedChild
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               OldChild                       ( CPF_Parm )
// struct TArray<class UUIObject*> ExclusionSet                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UUIScene::eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, struct TArray<class UUIObject*> ExclusionSet )
{
	static UFunction* pFnRemovedChild = NULL;

	if ( ! pFnRemovedChild )
		pFnRemovedChild = (UFunction*) UObject::GObjObjects()->Data[ 35405 ];

	UUIScene_eventRemovedChild_Parms RemovedChild_Parms;
	RemovedChild_Parms.WidgetOwner = WidgetOwner;
	RemovedChild_Parms.OldChild = OldChild;
	memcpy ( &RemovedChild_Parms.ExclusionSet, &ExclusionSet, 0x10 );

	this->ProcessEvent ( pFnRemovedChild, &RemovedChild_Parms, NULL );
};

// Function Engine.UIScene.AddedChild
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )
// class UUIObject*               NewChild                       ( CPF_Parm )

void UUIScene::eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild )
{
	static UFunction* pFnAddedChild = NULL;

	if ( ! pFnAddedChild )
		pFnAddedChild = (UFunction*) UObject::GObjObjects()->Data[ 35401 ];

	UUIScene_eventAddedChild_Parms AddedChild_Parms;
	AddedChild_Parms.WidgetOwner = WidgetOwner;
	AddedChild_Parms.NewChild = NewChild;

	this->ProcessEvent ( pFnAddedChild, &AddedChild_Parms, NULL );
};

// Function Engine.UIScene.CalculateInputMask
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UUIScene::eventCalculateInputMask ( )
{
	static UFunction* pFnCalculateInputMask = NULL;

	if ( ! pFnCalculateInputMask )
		pFnCalculateInputMask = (UFunction*) UObject::GObjObjects()->Data[ 35389 ];

	UUIScene_eventCalculateInputMask_Parms CalculateInputMask_Parms;

	this->ProcessEvent ( pFnCalculateInputMask, &CalculateInputMask_Parms, NULL );
};

// Function Engine.UIScene.SceneDeactivated
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UUIScene::eventSceneDeactivated ( )
{
	static UFunction* pFnSceneDeactivated = NULL;

	if ( ! pFnSceneDeactivated )
		pFnSceneDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 35388 ];

	UUIScene_eventSceneDeactivated_Parms SceneDeactivated_Parms;

	this->ProcessEvent ( pFnSceneDeactivated, &SceneDeactivated_Parms, NULL );
};

// Function Engine.UIScene.SceneActivated
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bInitialActivation             ( CPF_Parm )

void UUIScene::eventSceneActivated ( unsigned long bInitialActivation )
{
	static UFunction* pFnSceneActivated = NULL;

	if ( ! pFnSceneActivated )
		pFnSceneActivated = (UFunction*) UObject::GObjObjects()->Data[ 35386 ];

	UUIScene_eventSceneActivated_Parms SceneActivated_Parms;
	SceneActivated_Parms.bInitialActivation = bInitialActivation;

	this->ProcessEvent ( pFnSceneActivated, &SceneActivated_Parms, NULL );
};

// Function Engine.UIScene.GetFocusHint
// [0x00024800] ( FUNC_Event )
// Parameters infos:
// class UUIObject*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bQueryOnly                     ( CPF_OptionalParm | CPF_Parm )

class UUIObject* UUIScene::eventGetFocusHint ( unsigned long bQueryOnly )
{
	static UFunction* pFnGetFocusHint = NULL;

	if ( ! pFnGetFocusHint )
		pFnGetFocusHint = (UFunction*) UObject::GObjObjects()->Data[ 35383 ];

	UUIScene_eventGetFocusHint_Parms GetFocusHint_Parms;
	GetFocusHint_Parms.bQueryOnly = bQueryOnly;

	this->ProcessEvent ( pFnGetFocusHint, &GetFocusHint_Parms, NULL );

	return GetFocusHint_Parms.ReturnValue;
};

// Function Engine.UIScene.LogDockingStack
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScene::LogDockingStack ( )
{
	static UFunction* pFnLogDockingStack = NULL;

	if ( ! pFnLogDockingStack )
		pFnLogDockingStack = (UFunction*) UObject::GObjObjects()->Data[ 22046 ];

	UUIScene_execLogDockingStack_Parms LogDockingStack_Parms;

	pFnLogDockingStack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogDockingStack, &LogDockingStack_Parms, NULL );

	pFnLogDockingStack->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.SetActiveContextMenu
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIContextMenu*          NewContextMenu                 ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIScene::SetActiveContextMenu ( class UUIContextMenu* NewContextMenu, int PlayerIndex )
{
	static UFunction* pFnSetActiveContextMenu = NULL;

	if ( ! pFnSetActiveContextMenu )
		pFnSetActiveContextMenu = (UFunction*) UObject::GObjObjects()->Data[ 35379 ];

	UUIScene_execSetActiveContextMenu_Parms SetActiveContextMenu_Parms;
	SetActiveContextMenu_Parms.NewContextMenu = NewContextMenu;
	SetActiveContextMenu_Parms.PlayerIndex = PlayerIndex;

	pFnSetActiveContextMenu->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveContextMenu, &SetActiveContextMenu_Parms, NULL );

	pFnSetActiveContextMenu->FunctionFlags |= 0x400;

	return SetActiveContextMenu_Parms.ReturnValue;
};

// Function Engine.UIScene.GetActiveContextMenu
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIContextMenu*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIContextMenu* UUIScene::GetActiveContextMenu ( )
{
	static UFunction* pFnGetActiveContextMenu = NULL;

	if ( ! pFnGetActiveContextMenu )
		pFnGetActiveContextMenu = (UFunction*) UObject::GObjObjects()->Data[ 35377 ];

	UUIScene_execGetActiveContextMenu_Parms GetActiveContextMenu_Parms;

	pFnGetActiveContextMenu->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActiveContextMenu, &GetActiveContextMenu_Parms, NULL );

	pFnGetActiveContextMenu->FunctionFlags |= 0x400;

	return GetActiveContextMenu_Parms.ReturnValue;
};

// Function Engine.UIScene.GetDefaultContextMenu
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIContextMenu*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIContextMenu* UUIScene::GetDefaultContextMenu ( )
{
	static UFunction* pFnGetDefaultContextMenu = NULL;

	if ( ! pFnGetDefaultContextMenu )
		pFnGetDefaultContextMenu = (UFunction*) UObject::GObjObjects()->Data[ 35375 ];

	UUIScene_execGetDefaultContextMenu_Parms GetDefaultContextMenu_Parms;

	pFnGetDefaultContextMenu->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultContextMenu, &GetDefaultContextMenu_Parms, NULL );

	pFnGetDefaultContextMenu->FunctionFlags |= 0x400;

	return GetDefaultContextMenu_Parms.ReturnValue;
};

// Function Engine.UIScene.IsSceneActive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bTopmostScene                  ( CPF_OptionalParm | CPF_Parm )

bool UUIScene::IsSceneActive ( unsigned long bTopmostScene )
{
	static UFunction* pFnIsSceneActive = NULL;

	if ( ! pFnIsSceneActive )
		pFnIsSceneActive = (UFunction*) UObject::GObjObjects()->Data[ 35372 ];

	UUIScene_execIsSceneActive_Parms IsSceneActive_Parms;
	IsSceneActive_Parms.bTopmostScene = bTopmostScene;

	pFnIsSceneActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSceneActive, &IsSceneActive_Parms, NULL );

	pFnIsSceneActive->FunctionFlags |= 0x400;

	return IsSceneActive_Parms.ReturnValue;
};

// Function Engine.UIScene.GetWorldInfo
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class AWorldInfo*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AWorldInfo* UUIScene::GetWorldInfo ( )
{
	static UFunction* pFnGetWorldInfo = NULL;

	if ( ! pFnGetWorldInfo )
		pFnGetWorldInfo = (UFunction*) UObject::GObjObjects()->Data[ 35370 ];

	UUIScene_execGetWorldInfo_Parms GetWorldInfo_Parms;

	pFnGetWorldInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWorldInfo, &GetWorldInfo_Parms, NULL );

	pFnGetWorldInfo->FunctionFlags |= 0x400;

	return GetWorldInfo_Parms.ReturnValue;
};

// Function Engine.UIScene.SetSceneRenderMode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewRenderMode                  ( CPF_Parm )

void UUIScene::SetSceneRenderMode ( unsigned char NewRenderMode )
{
	static UFunction* pFnSetSceneRenderMode = NULL;

	if ( ! pFnSetSceneRenderMode )
		pFnSetSceneRenderMode = (UFunction*) UObject::GObjObjects()->Data[ 35368 ];

	UUIScene_execSetSceneRenderMode_Parms SetSceneRenderMode_Parms;
	SetSceneRenderMode_Parms.NewRenderMode = NewRenderMode;

	pFnSetSceneRenderMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSceneRenderMode, &SetSceneRenderMode_Parms, NULL );

	pFnSetSceneRenderMode->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.GetSceneRenderMode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UUIScene::GetSceneRenderMode ( )
{
	static UFunction* pFnGetSceneRenderMode = NULL;

	if ( ! pFnGetSceneRenderMode )
		pFnGetSceneRenderMode = (UFunction*) UObject::GObjObjects()->Data[ 35366 ];

	UUIScene_execGetSceneRenderMode_Parms GetSceneRenderMode_Parms;

	pFnGetSceneRenderMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSceneRenderMode, &GetSceneRenderMode_Parms, NULL );

	pFnGetSceneRenderMode->FunctionFlags |= 0x400;

	return GetSceneRenderMode_Parms.ReturnValue;
};

// Function Engine.UIScene.GetSceneInputMode
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bMemberValueOnly               ( CPF_OptionalParm | CPF_Parm )

unsigned char UUIScene::GetSceneInputMode ( unsigned long bMemberValueOnly )
{
	static UFunction* pFnGetSceneInputMode = NULL;

	if ( ! pFnGetSceneInputMode )
		pFnGetSceneInputMode = (UFunction*) UObject::GObjObjects()->Data[ 35363 ];

	UUIScene_execGetSceneInputMode_Parms GetSceneInputMode_Parms;
	GetSceneInputMode_Parms.bMemberValueOnly = bMemberValueOnly;

	pFnGetSceneInputMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSceneInputMode, &GetSceneInputMode_Parms, NULL );

	pFnGetSceneInputMode->FunctionFlags |= 0x400;

	return GetSceneInputMode_Parms.ReturnValue;
};

// Function Engine.UIScene.SetSceneInputMode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewInputMode                   ( CPF_Parm )

void UUIScene::SetSceneInputMode ( unsigned char NewInputMode )
{
	static UFunction* pFnSetSceneInputMode = NULL;

	if ( ! pFnSetSceneInputMode )
		pFnSetSceneInputMode = (UFunction*) UObject::GObjObjects()->Data[ 35361 ];

	UUIScene_execSetSceneInputMode_Parms SetSceneInputMode_Parms;
	SetSceneInputMode_Parms.NewInputMode = NewInputMode;

	pFnSetSceneInputMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSceneInputMode, &SetSceneInputMode_Parms, NULL );

	pFnSetSceneInputMode->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.GetScenePostProcessGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UUIScene::GetScenePostProcessGroup ( )
{
	static UFunction* pFnGetScenePostProcessGroup = NULL;

	if ( ! pFnGetScenePostProcessGroup )
		pFnGetScenePostProcessGroup = (UFunction*) UObject::GObjObjects()->Data[ 35359 ];

	UUIScene_execGetScenePostProcessGroup_Parms GetScenePostProcessGroup_Parms;

	pFnGetScenePostProcessGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScenePostProcessGroup, &GetScenePostProcessGroup_Parms, NULL );

	pFnGetScenePostProcessGroup->FunctionFlags |= 0x400;

	return GetScenePostProcessGroup_Parms.ReturnValue;
};

// Function Engine.UIScene.ShouldRenderParentScenes
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIScene::ShouldRenderParentScenes ( )
{
	static UFunction* pFnShouldRenderParentScenes = NULL;

	if ( ! pFnShouldRenderParentScenes )
		pFnShouldRenderParentScenes = (UFunction*) UObject::GObjObjects()->Data[ 35357 ];

	UUIScene_execShouldRenderParentScenes_Parms ShouldRenderParentScenes_Parms;

	pFnShouldRenderParentScenes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldRenderParentScenes, &ShouldRenderParentScenes_Parms, NULL );

	pFnShouldRenderParentScenes->FunctionFlags |= 0x400;

	return ShouldRenderParentScenes_Parms.ReturnValue;
};

// Function Engine.UIScene.GetPreviousScene
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bRequireMatchingPlayerOwner    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreUnfocusedScenes         ( CPF_OptionalParm | CPF_Parm )

class UUIScene* UUIScene::GetPreviousScene ( unsigned long bRequireMatchingPlayerOwner, unsigned long bIgnoreUnfocusedScenes )
{
	static UFunction* pFnGetPreviousScene = NULL;

	if ( ! pFnGetPreviousScene )
		pFnGetPreviousScene = (UFunction*) UObject::GObjObjects()->Data[ 35353 ];

	UUIScene_execGetPreviousScene_Parms GetPreviousScene_Parms;
	GetPreviousScene_Parms.bRequireMatchingPlayerOwner = bRequireMatchingPlayerOwner;
	GetPreviousScene_Parms.bIgnoreUnfocusedScenes = bIgnoreUnfocusedScenes;

	pFnGetPreviousScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPreviousScene, &GetPreviousScene_Parms, NULL );

	pFnGetPreviousScene->FunctionFlags |= 0x400;

	return GetPreviousScene_Parms.ReturnValue;
};

// Function Engine.UIScene.GetNextScene
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bRequireMatchingPlayerOwner    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreUnfocusedScenes         ( CPF_OptionalParm | CPF_Parm )

class UUIScene* UUIScene::GetNextScene ( unsigned long bRequireMatchingPlayerOwner, unsigned long bIgnoreUnfocusedScenes )
{
	static UFunction* pFnGetNextScene = NULL;

	if ( ! pFnGetNextScene )
		pFnGetNextScene = (UFunction*) UObject::GObjObjects()->Data[ 35349 ];

	UUIScene_execGetNextScene_Parms GetNextScene_Parms;
	GetNextScene_Parms.bRequireMatchingPlayerOwner = bRequireMatchingPlayerOwner;
	GetNextScene_Parms.bIgnoreUnfocusedScenes = bIgnoreUnfocusedScenes;

	pFnGetNextScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNextScene, &GetNextScene_Parms, NULL );

	pFnGetNextScene->FunctionFlags |= 0x400;

	return GetNextScene_Parms.ReturnValue;
};

// Function Engine.UIScene.ResolveDataStore
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DataStoreTag                   ( CPF_Parm )
// class ULocalPlayer*            InPlayerOwner                  ( CPF_OptionalParm | CPF_Parm )

class UUIDataStore* UUIScene::ResolveDataStore ( struct FName DataStoreTag, class ULocalPlayer* InPlayerOwner )
{
	static UFunction* pFnResolveDataStore = NULL;

	if ( ! pFnResolveDataStore )
		pFnResolveDataStore = (UFunction*) UObject::GObjObjects()->Data[ 17232 ];

	UUIScene_execResolveDataStore_Parms ResolveDataStore_Parms;
	memcpy ( &ResolveDataStore_Parms.DataStoreTag, &DataStoreTag, 0x8 );
	ResolveDataStore_Parms.InPlayerOwner = InPlayerOwner;

	pFnResolveDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveDataStore, &ResolveDataStore_Parms, NULL );

	pFnResolveDataStore->FunctionFlags |= 0x400;

	return ResolveDataStore_Parms.ReturnValue;
};

// Function Engine.UIScene.UnbindSubscribers
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScene::UnbindSubscribers ( )
{
	static UFunction* pFnUnbindSubscribers = NULL;

	if ( ! pFnUnbindSubscribers )
		pFnUnbindSubscribers = (UFunction*) UObject::GObjObjects()->Data[ 35346 ];

	UUIScene_execUnbindSubscribers_Parms UnbindSubscribers_Parms;

	pFnUnbindSubscribers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnbindSubscribers, &UnbindSubscribers_Parms, NULL );

	pFnUnbindSubscribers->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.SaveSceneDataValues
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bUnbindSubscribers             ( CPF_OptionalParm | CPF_Parm )

void UUIScene::SaveSceneDataValues ( unsigned long bUnbindSubscribers )
{
	static UFunction* pFnSaveSceneDataValues = NULL;

	if ( ! pFnSaveSceneDataValues )
		pFnSaveSceneDataValues = (UFunction*) UObject::GObjObjects()->Data[ 35344 ];

	UUIScene_execSaveSceneDataValues_Parms SaveSceneDataValues_Parms;
	SaveSceneDataValues_Parms.bUnbindSubscribers = bUnbindSubscribers;

	pFnSaveSceneDataValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSceneDataValues, &SaveSceneDataValues_Parms, NULL );

	pFnSaveSceneDataValues->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.LoadSceneDataValues
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScene::LoadSceneDataValues ( )
{
	static UFunction* pFnLoadSceneDataValues = NULL;

	if ( ! pFnLoadSceneDataValues )
		pFnLoadSceneDataValues = (UFunction*) UObject::GObjObjects()->Data[ 35343 ];

	UUIScene_execLoadSceneDataValues_Parms LoadSceneDataValues_Parms;

	pFnLoadSceneDataValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadSceneDataValues, &LoadSceneDataValues_Parms, NULL );

	pFnLoadSceneDataValues->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.GetSceneDataStore
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USceneDataStore*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USceneDataStore* UUIScene::GetSceneDataStore ( )
{
	static UFunction* pFnGetSceneDataStore = NULL;

	if ( ! pFnGetSceneDataStore )
		pFnGetSceneDataStore = (UFunction*) UObject::GObjObjects()->Data[ 34064 ];

	UUIScene_execGetSceneDataStore_Parms GetSceneDataStore_Parms;

	pFnGetSceneDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSceneDataStore, &GetSceneDataStore_Parms, NULL );

	pFnGetSceneDataStore->FunctionFlags |= 0x400;

	return GetSceneDataStore_Parms.ReturnValue;
};

// Function Engine.UIScene.FindTickableObjectIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUITickableObject*       ObjectToFind                   ( CPF_Parm )

int UUIScene::FindTickableObjectIndex ( class UUITickableObject* ObjectToFind )
{
	static UFunction* pFnFindTickableObjectIndex = NULL;

	if ( ! pFnFindTickableObjectIndex )
		pFnFindTickableObjectIndex = (UFunction*) UObject::GObjObjects()->Data[ 35340 ];

	UUIScene_execFindTickableObjectIndex_Parms FindTickableObjectIndex_Parms;
	FindTickableObjectIndex_Parms.ObjectToFind = ObjectToFind;

	pFnFindTickableObjectIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindTickableObjectIndex, &FindTickableObjectIndex_Parms, NULL );

	pFnFindTickableObjectIndex->FunctionFlags |= 0x400;

	return FindTickableObjectIndex_Parms.ReturnValue;
};

// Function Engine.UIScene.UnregisterTickableObject
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUITickableObject*       ObjectToRemove                 ( CPF_Parm )

bool UUIScene::UnregisterTickableObject ( class UUITickableObject* ObjectToRemove )
{
	static UFunction* pFnUnregisterTickableObject = NULL;

	if ( ! pFnUnregisterTickableObject )
		pFnUnregisterTickableObject = (UFunction*) UObject::GObjObjects()->Data[ 35337 ];

	UUIScene_execUnregisterTickableObject_Parms UnregisterTickableObject_Parms;
	UnregisterTickableObject_Parms.ObjectToRemove = ObjectToRemove;

	pFnUnregisterTickableObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnregisterTickableObject, &UnregisterTickableObject_Parms, NULL );

	pFnUnregisterTickableObject->FunctionFlags |= 0x400;

	return UnregisterTickableObject_Parms.ReturnValue;
};

// Function Engine.UIScene.RegisterTickableObject
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUITickableObject*       ObjectToRegister               ( CPF_Parm )
// int                            InsertIndex                    ( CPF_OptionalParm | CPF_Parm )

bool UUIScene::RegisterTickableObject ( class UUITickableObject* ObjectToRegister, int InsertIndex )
{
	static UFunction* pFnRegisterTickableObject = NULL;

	if ( ! pFnRegisterTickableObject )
		pFnRegisterTickableObject = (UFunction*) UObject::GObjObjects()->Data[ 35333 ];

	UUIScene_execRegisterTickableObject_Parms RegisterTickableObject_Parms;
	RegisterTickableObject_Parms.ObjectToRegister = ObjectToRegister;
	RegisterTickableObject_Parms.InsertIndex = InsertIndex;

	pFnRegisterTickableObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterTickableObject, &RegisterTickableObject_Parms, NULL );

	pFnRegisterTickableObject->FunctionFlags |= 0x400;

	return RegisterTickableObject_Parms.ReturnValue;
};

// Function Engine.UIScene.ResolveScenePositions
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScene::ResolveScenePositions ( )
{
	static UFunction* pFnResolveScenePositions = NULL;

	if ( ! pFnResolveScenePositions )
		pFnResolveScenePositions = (UFunction*) UObject::GObjObjects()->Data[ 35332 ];

	UUIScene_execResolveScenePositions_Parms ResolveScenePositions_Parms;

	pFnResolveScenePositions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveScenePositions, &ResolveScenePositions_Parms, NULL );

	pFnResolveScenePositions->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.RebuildDockingStack
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScene::RebuildDockingStack ( )
{
	static UFunction* pFnRebuildDockingStack = NULL;

	if ( ! pFnRebuildDockingStack )
		pFnRebuildDockingStack = (UFunction*) UObject::GObjObjects()->Data[ 35331 ];

	UUIScene_execRebuildDockingStack_Parms RebuildDockingStack_Parms;

	pFnRebuildDockingStack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRebuildDockingStack, &RebuildDockingStack_Parms, NULL );

	pFnRebuildDockingStack->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.ForceImmediateSceneUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UUIScene::ForceImmediateSceneUpdate ( )
{
	static UFunction* pFnForceImmediateSceneUpdate = NULL;

	if ( ! pFnForceImmediateSceneUpdate )
		pFnForceImmediateSceneUpdate = (UFunction*) UObject::GObjObjects()->Data[ 35330 ];

	UUIScene_execForceImmediateSceneUpdate_Parms ForceImmediateSceneUpdate_Parms;

	pFnForceImmediateSceneUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceImmediateSceneUpdate, &ForceImmediateSceneUpdate_Parms, NULL );

	pFnForceImmediateSceneUpdate->FunctionFlags |= 0x400;
};

// Function Engine.UIScene.OnQueryEndAnimation_EnableInput
// [0x00120002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimationSequenceName          ( CPF_Parm )
// int                            TrackTypeMask                  ( CPF_Parm )

bool UUIScene::OnQueryEndAnimation_EnableInput ( struct FName AnimationSequenceName, int TrackTypeMask )
{
	static UFunction* pFnOnQueryEndAnimation_EnableInput = NULL;

	if ( ! pFnOnQueryEndAnimation_EnableInput )
		pFnOnQueryEndAnimation_EnableInput = (UFunction*) UObject::GObjObjects()->Data[ 35325 ];

	UUIScene_execOnQueryEndAnimation_EnableInput_Parms OnQueryEndAnimation_EnableInput_Parms;
	memcpy ( &OnQueryEndAnimation_EnableInput_Parms.AnimationSequenceName, &AnimationSequenceName, 0x8 );
	OnQueryEndAnimation_EnableInput_Parms.TrackTypeMask = TrackTypeMask;

	this->ProcessEvent ( pFnOnQueryEndAnimation_EnableInput, &OnQueryEndAnimation_EnableInput_Parms, NULL );

	return OnQueryEndAnimation_EnableInput_Parms.ReturnValue;
};

// Function Engine.UIScene.OnQueryBeginAnimation_DisableInput
// [0x00120002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimationSequenceName          ( CPF_Parm )
// int                            TrackTypeMask                  ( CPF_Parm )

bool UUIScene::OnQueryBeginAnimation_DisableInput ( struct FName AnimationSequenceName, int TrackTypeMask )
{
	static UFunction* pFnOnQueryBeginAnimation_DisableInput = NULL;

	if ( ! pFnOnQueryBeginAnimation_DisableInput )
		pFnOnQueryBeginAnimation_DisableInput = (UFunction*) UObject::GObjObjects()->Data[ 35320 ];

	UUIScene_execOnQueryBeginAnimation_DisableInput_Parms OnQueryBeginAnimation_DisableInput_Parms;
	memcpy ( &OnQueryBeginAnimation_DisableInput_Parms.AnimationSequenceName, &AnimationSequenceName, 0x8 );
	OnQueryBeginAnimation_DisableInput_Parms.TrackTypeMask = TrackTypeMask;

	this->ProcessEvent ( pFnOnQueryBeginAnimation_DisableInput, &OnQueryBeginAnimation_DisableInput_Parms, NULL );

	return OnQueryBeginAnimation_DisableInput_Parms.ReturnValue;
};

// Function Engine.UIScene.ShouldModulateBackgroundAlpha
// [0x00520000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          AlphaModulationPercent         ( CPF_Parm | CPF_OutParm )

bool UUIScene::ShouldModulateBackgroundAlpha ( float* AlphaModulationPercent )
{
	static UFunction* pFnShouldModulateBackgroundAlpha = NULL;

	if ( ! pFnShouldModulateBackgroundAlpha )
		pFnShouldModulateBackgroundAlpha = (UFunction*) UObject::GObjObjects()->Data[ 35317 ];

	UUIScene_execShouldModulateBackgroundAlpha_Parms ShouldModulateBackgroundAlpha_Parms;

	this->ProcessEvent ( pFnShouldModulateBackgroundAlpha, &ShouldModulateBackgroundAlpha_Parms, NULL );

	if ( AlphaModulationPercent )
		*AlphaModulationPercent = ShouldModulateBackgroundAlpha_Parms.AlphaModulationPercent;

	return ShouldModulateBackgroundAlpha_Parms.ReturnValue;
};

// Function Engine.UIScene.OnTopSceneChanged
// [0x00120000] 
// Parameters infos:
// class UUIScene*                NewTopScene                    ( CPF_Parm )

void UUIScene::OnTopSceneChanged ( class UUIScene* NewTopScene )
{
	static UFunction* pFnOnTopSceneChanged = NULL;

	if ( ! pFnOnTopSceneChanged )
		pFnOnTopSceneChanged = (UFunction*) UObject::GObjObjects()->Data[ 35315 ];

	UUIScene_execOnTopSceneChanged_Parms OnTopSceneChanged_Parms;
	OnTopSceneChanged_Parms.NewTopScene = NewTopScene;

	this->ProcessEvent ( pFnOnTopSceneChanged, &OnTopSceneChanged_Parms, NULL );
};

// Function Engine.UIScene.OnQueryCloseSceneAllowed
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                SceneToDeactivate              ( CPF_Parm )
// unsigned long                  bCloseChildScenes              ( CPF_Parm )
// unsigned long                  bForcedClose                   ( CPF_Parm )

bool UUIScene::OnQueryCloseSceneAllowed ( class UUIScene* SceneToDeactivate, unsigned long bCloseChildScenes, unsigned long bForcedClose )
{
	static UFunction* pFnOnQueryCloseSceneAllowed = NULL;

	if ( ! pFnOnQueryCloseSceneAllowed )
		pFnOnQueryCloseSceneAllowed = (UFunction*) UObject::GObjObjects()->Data[ 35310 ];

	UUIScene_execOnQueryCloseSceneAllowed_Parms OnQueryCloseSceneAllowed_Parms;
	OnQueryCloseSceneAllowed_Parms.SceneToDeactivate = SceneToDeactivate;
	OnQueryCloseSceneAllowed_Parms.bCloseChildScenes = bCloseChildScenes;
	OnQueryCloseSceneAllowed_Parms.bForcedClose = bForcedClose;

	this->ProcessEvent ( pFnOnQueryCloseSceneAllowed, &OnQueryCloseSceneAllowed_Parms, NULL );

	return OnQueryCloseSceneAllowed_Parms.ReturnValue;
};

// Function Engine.UIScene.OnSceneDeactivated
// [0x00120000] 
// Parameters infos:
// class UUIScene*                DeactivatedScene               ( CPF_Parm )

void UUIScene::OnSceneDeactivated ( class UUIScene* DeactivatedScene )
{
	static UFunction* pFnOnSceneDeactivated = NULL;

	if ( ! pFnOnSceneDeactivated )
		pFnOnSceneDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 35308 ];

	UUIScene_execOnSceneDeactivated_Parms OnSceneDeactivated_Parms;
	OnSceneDeactivated_Parms.DeactivatedScene = DeactivatedScene;

	this->ProcessEvent ( pFnOnSceneDeactivated, &OnSceneDeactivated_Parms, NULL );
};

// Function Engine.UIScene.OnSceneActivated
// [0x00120000] 
// Parameters infos:
// class UUIScene*                ActivatedScene                 ( CPF_Parm )
// unsigned long                  bInitialActivation             ( CPF_Parm )

void UUIScene::OnSceneActivated ( class UUIScene* ActivatedScene, unsigned long bInitialActivation )
{
	static UFunction* pFnOnSceneActivated = NULL;

	if ( ! pFnOnSceneActivated )
		pFnOnSceneActivated = (UFunction*) UObject::GObjObjects()->Data[ 35305 ];

	UUIScene_execOnSceneActivated_Parms OnSceneActivated_Parms;
	OnSceneActivated_Parms.ActivatedScene = ActivatedScene;
	OnSceneActivated_Parms.bInitialActivation = bInitialActivation;

	this->ProcessEvent ( pFnOnSceneActivated, &OnSceneActivated_Parms, NULL );
};

// Function Engine.UIScene.OnInterceptRawInputKey
// [0x00520000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FInputEventParameters   EventParms                     ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UUIScene::OnInterceptRawInputKey ( struct FInputEventParameters* EventParms )
{
	static UFunction* pFnOnInterceptRawInputKey = NULL;

	if ( ! pFnOnInterceptRawInputKey )
		pFnOnInterceptRawInputKey = (UFunction*) UObject::GObjObjects()->Data[ 35302 ];

	UUIScene_execOnInterceptRawInputKey_Parms OnInterceptRawInputKey_Parms;

	this->ProcessEvent ( pFnOnInterceptRawInputKey, &OnInterceptRawInputKey_Parms, NULL );

	if ( EventParms )
		memcpy ( EventParms, &OnInterceptRawInputKey_Parms.EventParms, 0x20 );

	return OnInterceptRawInputKey_Parms.ReturnValue;
};

// Function Engine.UIScene.GetSceneInputModeOverride
// [0x00120000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UUIScene::GetSceneInputModeOverride ( )
{
	static UFunction* pFnGetSceneInputModeOverride = NULL;

	if ( ! pFnGetSceneInputModeOverride )
		pFnGetSceneInputModeOverride = (UFunction*) UObject::GObjObjects()->Data[ 35300 ];

	UUIScene_execGetSceneInputModeOverride_Parms GetSceneInputModeOverride_Parms;

	this->ProcessEvent ( pFnGetSceneInputModeOverride, &GetSceneInputModeOverride_Parms, NULL );

	return GetSceneInputModeOverride_Parms.ReturnValue;
};

// Function Engine.UIState_Focused.ActivateState
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         Target                         ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIState_Focused::eventActivateState ( class UUIScreenObject* Target, int PlayerIndex )
{
	static UFunction* pFnActivateState = NULL;

	if ( ! pFnActivateState )
		pFnActivateState = (UFunction*) UObject::GObjObjects()->Data[ 35858 ];

	UUIState_Focused_eventActivateState_Parms ActivateState_Parms;
	ActivateState_Parms.Target = Target;
	ActivateState_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnActivateState, &ActivateState_Parms, NULL );

	return ActivateState_Parms.ReturnValue;
};

// Function Engine.UIStyle_Data.MatchesStyleData
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIStyle_Data*           OtherStyle                     ( CPF_Const | CPF_Parm )

bool UUIStyle_Data::MatchesStyleData ( class UUIStyle_Data* OtherStyle )
{
	static UFunction* pFnMatchesStyleData = NULL;

	if ( ! pFnMatchesStyleData )
		pFnMatchesStyleData = (UFunction*) UObject::GObjObjects()->Data[ 35882 ];

	UUIStyle_Data_execMatchesStyleData_Parms MatchesStyleData_Parms;
	MatchesStyleData_Parms.OtherStyle = OtherStyle;

	this->ProcessEvent ( pFnMatchesStyleData, &MatchesStyleData_Parms, NULL );

	return MatchesStyleData_Parms.ReturnValue;
};

// Function Engine.UIStyle_Combo.GetComboImageStyle
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyle_Image*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIStyle_Image* UUIStyle_Combo::GetComboImageStyle ( )
{
	static UFunction* pFnGetComboImageStyle = NULL;

	if ( ! pFnGetComboImageStyle )
		pFnGetComboImageStyle = (UFunction*) UObject::GObjObjects()->Data[ 35898 ];

	UUIStyle_Combo_execGetComboImageStyle_Parms GetComboImageStyle_Parms;

	pFnGetComboImageStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetComboImageStyle, &GetComboImageStyle_Parms, NULL );

	pFnGetComboImageStyle->FunctionFlags |= 0x400;

	return GetComboImageStyle_Parms.ReturnValue;
};

// Function Engine.UIStyle_Combo.GetComboTextStyle
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyle_Text*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIStyle_Text* UUIStyle_Combo::GetComboTextStyle ( )
{
	static UFunction* pFnGetComboTextStyle = NULL;

	if ( ! pFnGetComboTextStyle )
		pFnGetComboTextStyle = (UFunction*) UObject::GObjObjects()->Data[ 35896 ];

	UUIStyle_Combo_execGetComboTextStyle_Parms GetComboTextStyle_Parms;

	pFnGetComboTextStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetComboTextStyle, &GetComboTextStyle_Parms, NULL );

	pFnGetComboTextStyle->FunctionFlags |= 0x400;

	return GetComboTextStyle_Parms.ReturnValue;
};

// Function Engine.UITexture.GetSurface
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USurface*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USurface* UUITexture::GetSurface ( )
{
	static UFunction* pFnGetSurface = NULL;

	if ( ! pFnGetSurface )
		pFnGetSurface = (UFunction*) UObject::GObjObjects()->Data[ 33684 ];

	UUITexture_execGetSurface_Parms GetSurface_Parms;

	this->ProcessEvent ( pFnGetSurface, &GetSurface_Parms, NULL );

	return GetSurface_Parms.ReturnValue;
};

// Function Engine.UITexture.HasValidStyleData
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUITexture::HasValidStyleData ( )
{
	static UFunction* pFnHasValidStyleData = NULL;

	if ( ! pFnHasValidStyleData )
		pFnHasValidStyleData = (UFunction*) UObject::GObjObjects()->Data[ 33682 ];

	UUITexture_execHasValidStyleData_Parms HasValidStyleData_Parms;

	pFnHasValidStyleData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasValidStyleData, &HasValidStyleData_Parms, NULL );

	pFnHasValidStyleData->FunctionFlags |= 0x400;

	return HasValidStyleData_Parms.ReturnValue;
};

// Function Engine.UITexture.SetImageStyle
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIStyle_Image*          NewImageStyle                  ( CPF_Parm )

void UUITexture::SetImageStyle ( class UUIStyle_Image* NewImageStyle )
{
	static UFunction* pFnSetImageStyle = NULL;

	if ( ! pFnSetImageStyle )
		pFnSetImageStyle = (UFunction*) UObject::GObjObjects()->Data[ 33680 ];

	UUITexture_execSetImageStyle_Parms SetImageStyle_Parms;
	SetImageStyle_Parms.NewImageStyle = NewImageStyle;

	pFnSetImageStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetImageStyle, &SetImageStyle_Parms, NULL );

	pFnSetImageStyle->FunctionFlags |= 0x400;
};

// Function Engine.UITexture.GetOwnerWidget
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIComponent*            OwnerComponent                 ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_EditInline )

class UUIScreenObject* UUITexture::GetOwnerWidget ( class UUIComponent** OwnerComponent )
{
	static UFunction* pFnGetOwnerWidget = NULL;

	if ( ! pFnGetOwnerWidget )
		pFnGetOwnerWidget = (UFunction*) UObject::GObjObjects()->Data[ 33677 ];

	UUITexture_execGetOwnerWidget_Parms GetOwnerWidget_Parms;

	pFnGetOwnerWidget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwnerWidget, &GetOwnerWidget_Parms, NULL );

	pFnGetOwnerWidget->FunctionFlags |= 0x400;

	if ( OwnerComponent )
		*OwnerComponent = GetOwnerWidget_Parms.OwnerComponent;

	return GetOwnerWidget_Parms.ReturnValue;
};

// Function Engine.UITickableObjectProxy.ScriptTick
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UUITickableObjectProxy::eventScriptTick ( float DeltaTime )
{
	static UFunction* pFnScriptTick = NULL;

	if ( ! pFnScriptTick )
		pFnScriptTick = (UFunction*) UObject::GObjObjects()->Data[ 35927 ];

	UUITickableObjectProxy_eventScriptTick_Parms ScriptTick_Parms;
	ScriptTick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnScriptTick, &ScriptTick_Parms, NULL );
};

// Function Engine.UITickableObjectProxy.OnScriptTick
// [0x00120000] 
// Parameters infos:
// class UUITickableObjectProxy*  Sender                         ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )

void UUITickableObjectProxy::OnScriptTick ( class UUITickableObjectProxy* Sender, float DeltaTime )
{
	static UFunction* pFnOnScriptTick = NULL;

	if ( ! pFnOnScriptTick )
		pFnOnScriptTick = (UFunction*) UObject::GObjObjects()->Data[ 35924 ];

	UUITickableObjectProxy_execOnScriptTick_Parms OnScriptTick_Parms;
	OnScriptTick_Parms.Sender = Sender;
	OnScriptTick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnOnScriptTick, &OnScriptTick_Parms, NULL );
};

// Function Engine.UIStringRenderer.SetTextAlignment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Horizontal                     ( CPF_Parm )
// unsigned char                  Vertical                       ( CPF_Parm )

void UUIStringRenderer::SetTextAlignment ( unsigned char Horizontal, unsigned char Vertical )
{
	static UFunction* pFnSetTextAlignment = NULL;

	if ( ! pFnSetTextAlignment )
		pFnSetTextAlignment = (UFunction*) UObject::GObjObjects()->Data[ 35865 ];

	UUIStringRenderer_execSetTextAlignment_Parms SetTextAlignment_Parms;
	SetTextAlignment_Parms.Horizontal = Horizontal;
	SetTextAlignment_Parms.Vertical = Vertical;

	pFnSetTextAlignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextAlignment, &SetTextAlignment_Parms, NULL );

	pFnSetTextAlignment->FunctionFlags |= 0x400;
};

// Function Engine.UIStyleResolver.NotifyResolveStyle
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUISkin*                 ActiveSkin                     ( CPF_Parm )
// unsigned long                  bClearExistingValue            ( CPF_Parm )
// class UUIState*                CurrentMenuState               ( CPF_OptionalParm | CPF_Parm )
// struct FName                   StylePropertyName              ( CPF_Const | CPF_OptionalParm | CPF_Parm )

bool UUIStyleResolver::NotifyResolveStyle ( class UUISkin* ActiveSkin, unsigned long bClearExistingValue, class UUIState* CurrentMenuState, struct FName StylePropertyName )
{
	static UFunction* pFnNotifyResolveStyle = NULL;

	if ( ! pFnNotifyResolveStyle )
		pFnNotifyResolveStyle = (UFunction*) UObject::GObjObjects()->Data[ 35918 ];

	UUIStyleResolver_execNotifyResolveStyle_Parms NotifyResolveStyle_Parms;
	NotifyResolveStyle_Parms.ActiveSkin = ActiveSkin;
	NotifyResolveStyle_Parms.bClearExistingValue = bClearExistingValue;
	NotifyResolveStyle_Parms.CurrentMenuState = CurrentMenuState;
	memcpy ( &NotifyResolveStyle_Parms.StylePropertyName, &StylePropertyName, 0x8 );

	pFnNotifyResolveStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyResolveStyle, &NotifyResolveStyle_Parms, NULL );

	pFnNotifyResolveStyle->FunctionFlags |= 0x400;

	return NotifyResolveStyle_Parms.ReturnValue;
};

// Function Engine.UIStyleResolver.SetStyleResolverTag
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NewResolverTag                 ( CPF_Parm )

bool UUIStyleResolver::SetStyleResolverTag ( struct FName NewResolverTag )
{
	static UFunction* pFnSetStyleResolverTag = NULL;

	if ( ! pFnSetStyleResolverTag )
		pFnSetStyleResolverTag = (UFunction*) UObject::GObjObjects()->Data[ 35915 ];

	UUIStyleResolver_execSetStyleResolverTag_Parms SetStyleResolverTag_Parms;
	memcpy ( &SetStyleResolverTag_Parms.NewResolverTag, &NewResolverTag, 0x8 );

	pFnSetStyleResolverTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStyleResolverTag, &SetStyleResolverTag_Parms, NULL );

	pFnSetStyleResolverTag->FunctionFlags |= 0x400;

	return SetStyleResolverTag_Parms.ReturnValue;
};

// Function Engine.UIStyleResolver.GetStyleResolverTag
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UUIStyleResolver::GetStyleResolverTag ( )
{
	static UFunction* pFnGetStyleResolverTag = NULL;

	if ( ! pFnGetStyleResolverTag )
		pFnGetStyleResolverTag = (UFunction*) UObject::GObjObjects()->Data[ 35913 ];

	UUIStyleResolver_execGetStyleResolverTag_Parms GetStyleResolverTag_Parms;

	pFnGetStyleResolverTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStyleResolverTag, &GetStyleResolverTag_Parms, NULL );

	pFnGetStyleResolverTag->FunctionFlags |= 0x400;

	return GetStyleResolverTag_Parms.ReturnValue;
};

// Function Engine.UISequence.RemoveSequenceObjects
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct TArray<class USequenceObject*> ObjectsToRemove                ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUISequence::RemoveSequenceObjects ( struct TArray<class USequenceObject*>* ObjectsToRemove )
{
	static UFunction* pFnRemoveSequenceObjects = NULL;

	if ( ! pFnRemoveSequenceObjects )
		pFnRemoveSequenceObjects = (UFunction*) UObject::GObjObjects()->Data[ 35792 ];

	UUISequence_execRemoveSequenceObjects_Parms RemoveSequenceObjects_Parms;

	pFnRemoveSequenceObjects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveSequenceObjects, &RemoveSequenceObjects_Parms, NULL );

	pFnRemoveSequenceObjects->FunctionFlags |= 0x400;

	if ( ObjectsToRemove )
		memcpy ( ObjectsToRemove, &RemoveSequenceObjects_Parms.ObjectsToRemove, 0x10 );
};

// Function Engine.UISequence.RemoveSequenceObject
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USequenceObject*         ObjectToRemove                 ( CPF_Parm )

void UUISequence::RemoveSequenceObject ( class USequenceObject* ObjectToRemove )
{
	static UFunction* pFnRemoveSequenceObject = NULL;

	if ( ! pFnRemoveSequenceObject )
		pFnRemoveSequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 33563 ];

	UUISequence_execRemoveSequenceObject_Parms RemoveSequenceObject_Parms;
	RemoveSequenceObject_Parms.ObjectToRemove = ObjectToRemove;

	pFnRemoveSequenceObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveSequenceObject, &RemoveSequenceObject_Parms, NULL );

	pFnRemoveSequenceObject->FunctionFlags |= 0x400;
};

// Function Engine.UISequence.AddSequenceObject
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USequenceObject*         NewObj                         ( CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )

bool UUISequence::AddSequenceObject ( class USequenceObject* NewObj, unsigned long bRecurse )
{
	static UFunction* pFnAddSequenceObject = NULL;

	if ( ! pFnAddSequenceObject )
		pFnAddSequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 35787 ];

	UUISequence_execAddSequenceObject_Parms AddSequenceObject_Parms;
	AddSequenceObject_Parms.NewObj = NewObj;
	AddSequenceObject_Parms.bRecurse = bRecurse;

	pFnAddSequenceObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSequenceObject, &AddSequenceObject_Parms, NULL );

	pFnAddSequenceObject->FunctionFlags |= 0x400;

	return AddSequenceObject_Parms.ReturnValue;
};

// Function Engine.UISequence.GetUIEvents
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  LimitClass                     ( CPF_OptionalParm | CPF_Parm )
// struct TArray<class UUIEvent*> out_Events                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUISequence::GetUIEvents ( class UClass* LimitClass, struct TArray<class UUIEvent*>* out_Events )
{
	static UFunction* pFnGetUIEvents = NULL;

	if ( ! pFnGetUIEvents )
		pFnGetUIEvents = (UFunction*) UObject::GObjObjects()->Data[ 35783 ];

	UUISequence_execGetUIEvents_Parms GetUIEvents_Parms;
	GetUIEvents_Parms.LimitClass = LimitClass;

	pFnGetUIEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUIEvents, &GetUIEvents_Parms, NULL );

	pFnGetUIEvents->FunctionFlags |= 0x400;

	if ( out_Events )
		memcpy ( out_Events, &GetUIEvents_Parms.out_Events, 0x10 );
};

// Function Engine.UISequence.GetOwner
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScreenObject* UUISequence::GetOwner ( )
{
	static UFunction* pFnGetOwner = NULL;

	if ( ! pFnGetOwner )
		pFnGetOwner = (UFunction*) UObject::GObjObjects()->Data[ 35781 ];

	UUISequence_execGetOwner_Parms GetOwner_Parms;

	pFnGetOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwner, &GetOwner_Parms, NULL );

	pFnGetOwner->FunctionFlags |= 0x400;

	return GetOwner_Parms.ReturnValue;
};

// Function Engine.UIStateSequence.GetOwnerState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIState*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIState* UUIStateSequence::GetOwnerState ( )
{
	static UFunction* pFnGetOwnerState = NULL;

	if ( ! pFnGetOwnerState )
		pFnGetOwnerState = (UFunction*) UObject::GObjObjects()->Data[ 35863 ];

	UUIStateSequence_execGetOwnerState_Parms GetOwnerState_Parms;

	pFnGetOwnerState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwnerState, &GetOwnerState_Parms, NULL );

	pFnGetOwnerState->FunctionFlags |= 0x400;

	return GetOwnerState_Parms.ReturnValue;
};

// Function Engine.UIAction.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIAction::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32157 ];

	UUIAction_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.UIAction.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIAction::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 32154 ];

	UUIAction_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIAction.IsValidLevelSequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIAction::eventIsValidLevelSequenceObject ( )
{
	static UFunction* pFnIsValidLevelSequenceObject = NULL;

	if ( ! pFnIsValidLevelSequenceObject )
		pFnIsValidLevelSequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 32152 ];

	UUIAction_eventIsValidLevelSequenceObject_Parms IsValidLevelSequenceObject_Parms;

	this->ProcessEvent ( pFnIsValidLevelSequenceObject, &IsValidLevelSequenceObject_Parms, NULL );

	return IsValidLevelSequenceObject_Parms.ReturnValue;
};

// Function Engine.UIAction.GetOwnerScene
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScene* UUIAction::GetOwnerScene ( )
{
	static UFunction* pFnGetOwnerScene = NULL;

	if ( ! pFnGetOwnerScene )
		pFnGetOwnerScene = (UFunction*) UObject::GObjObjects()->Data[ 32150 ];

	UUIAction_execGetOwnerScene_Parms GetOwnerScene_Parms;

	pFnGetOwnerScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwnerScene, &GetOwnerScene_Parms, NULL );

	pFnGetOwnerScene->FunctionFlags |= 0x400;

	return GetOwnerScene_Parms.ReturnValue;
};

// Function Engine.UIAction.GetOwner
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScreenObject* UUIAction::GetOwner ( )
{
	static UFunction* pFnGetOwner = NULL;

	if ( ! pFnGetOwner )
		pFnGetOwner = (UFunction*) UObject::GObjObjects()->Data[ 32148 ];

	UUIAction_execGetOwner_Parms GetOwner_Parms;

	pFnGetOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwner, &GetOwner_Parms, NULL );

	pFnGetOwner->FunctionFlags |= 0x400;

	return GetOwner_Parms.ReturnValue;
};

// Function Engine.UIEvent.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIEvent::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 33137 ];

	UUIEvent_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.UIEvent.ShouldAlwaysInstance
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIEvent::eventShouldAlwaysInstance ( )
{
	static UFunction* pFnShouldAlwaysInstance = NULL;

	if ( ! pFnShouldAlwaysInstance )
		pFnShouldAlwaysInstance = (UFunction*) UObject::GObjObjects()->Data[ 33135 ];

	UUIEvent_eventShouldAlwaysInstance_Parms ShouldAlwaysInstance_Parms;

	this->ProcessEvent ( pFnShouldAlwaysInstance, &ShouldAlwaysInstance_Parms, NULL );

	return ShouldAlwaysInstance_Parms.ReturnValue;
};

// Function Engine.UIEvent.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 33132 ];

	UUIEvent_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent.IsValidLevelSequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIEvent::eventIsValidLevelSequenceObject ( )
{
	static UFunction* pFnIsValidLevelSequenceObject = NULL;

	if ( ! pFnIsValidLevelSequenceObject )
		pFnIsValidLevelSequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 33130 ];

	UUIEvent_eventIsValidLevelSequenceObject_Parms IsValidLevelSequenceObject_Parms;

	this->ProcessEvent ( pFnIsValidLevelSequenceObject, &IsValidLevelSequenceObject_Parms, NULL );

	return IsValidLevelSequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent.ActivateUIEvent
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerIndex                ( CPF_Parm )
// class UUIScreenObject*         InEventOwner                   ( CPF_Parm )
// class UObject*                 InEventActivator               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bActivateImmediately           ( CPF_OptionalParm | CPF_Parm )
// struct TArray<int>             IndicesToActivate              ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIEvent::ActivateUIEvent ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, struct TArray<int>* IndicesToActivate )
{
	static UFunction* pFnActivateUIEvent = NULL;

	if ( ! pFnActivateUIEvent )
		pFnActivateUIEvent = (UFunction*) UObject::GObjObjects()->Data[ 33122 ];

	UUIEvent_execActivateUIEvent_Parms ActivateUIEvent_Parms;
	ActivateUIEvent_Parms.ControllerIndex = ControllerIndex;
	ActivateUIEvent_Parms.InEventOwner = InEventOwner;
	ActivateUIEvent_Parms.InEventActivator = InEventActivator;
	ActivateUIEvent_Parms.bActivateImmediately = bActivateImmediately;

	pFnActivateUIEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateUIEvent, &ActivateUIEvent_Parms, NULL );

	pFnActivateUIEvent->FunctionFlags |= 0x400;

	if ( IndicesToActivate )
		memcpy ( IndicesToActivate, &ActivateUIEvent_Parms.IndicesToActivate, 0x10 );

	return ActivateUIEvent_Parms.ReturnValue;
};

// Function Engine.UIEvent.ConditionalActivateUIEvent
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerIndex                ( CPF_Parm )
// class UUIScreenObject*         InEventOwner                   ( CPF_Parm )
// class UObject*                 InEventActivator               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bActivateImmediately           ( CPF_OptionalParm | CPF_Parm )
// struct TArray<int>             IndicesToActivate              ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIEvent::ConditionalActivateUIEvent ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, struct TArray<int>* IndicesToActivate )
{
	static UFunction* pFnConditionalActivateUIEvent = NULL;

	if ( ! pFnConditionalActivateUIEvent )
		pFnConditionalActivateUIEvent = (UFunction*) UObject::GObjObjects()->Data[ 33114 ];

	UUIEvent_execConditionalActivateUIEvent_Parms ConditionalActivateUIEvent_Parms;
	ConditionalActivateUIEvent_Parms.ControllerIndex = ControllerIndex;
	ConditionalActivateUIEvent_Parms.InEventOwner = InEventOwner;
	ConditionalActivateUIEvent_Parms.InEventActivator = InEventActivator;
	ConditionalActivateUIEvent_Parms.bActivateImmediately = bActivateImmediately;

	pFnConditionalActivateUIEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConditionalActivateUIEvent, &ConditionalActivateUIEvent_Parms, NULL );

	pFnConditionalActivateUIEvent->FunctionFlags |= 0x400;

	if ( IndicesToActivate )
		memcpy ( IndicesToActivate, &ConditionalActivateUIEvent_Parms.IndicesToActivate, 0x10 );

	return ConditionalActivateUIEvent_Parms.ReturnValue;
};

// Function Engine.UIEvent.CanBeActivated
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerIndex                ( CPF_Parm )
// class UUIScreenObject*         InEventOwner                   ( CPF_Parm )
// class UObject*                 InEventActivator               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bActivateImmediately           ( CPF_OptionalParm | CPF_Parm )
// struct TArray<int>             IndicesToActivate              ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIEvent::CanBeActivated ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, struct TArray<int>* IndicesToActivate )
{
	static UFunction* pFnCanBeActivated = NULL;

	if ( ! pFnCanBeActivated )
		pFnCanBeActivated = (UFunction*) UObject::GObjObjects()->Data[ 33106 ];

	UUIEvent_execCanBeActivated_Parms CanBeActivated_Parms;
	CanBeActivated_Parms.ControllerIndex = ControllerIndex;
	CanBeActivated_Parms.InEventOwner = InEventOwner;
	CanBeActivated_Parms.InEventActivator = InEventActivator;
	CanBeActivated_Parms.bActivateImmediately = bActivateImmediately;

	pFnCanBeActivated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanBeActivated, &CanBeActivated_Parms, NULL );

	pFnCanBeActivated->FunctionFlags |= 0x400;

	if ( IndicesToActivate )
		memcpy ( IndicesToActivate, &CanBeActivated_Parms.IndicesToActivate, 0x10 );

	return CanBeActivated_Parms.ReturnValue;
};

// Function Engine.UIEvent.GetOwnerScene
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScene* UUIEvent::GetOwnerScene ( )
{
	static UFunction* pFnGetOwnerScene = NULL;

	if ( ! pFnGetOwnerScene )
		pFnGetOwnerScene = (UFunction*) UObject::GObjObjects()->Data[ 33104 ];

	UUIEvent_execGetOwnerScene_Parms GetOwnerScene_Parms;

	pFnGetOwnerScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwnerScene, &GetOwnerScene_Parms, NULL );

	pFnGetOwnerScene->FunctionFlags |= 0x400;

	return GetOwnerScene_Parms.ReturnValue;
};

// Function Engine.UIEvent.GetOwner
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIScreenObject*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIScreenObject* UUIEvent::GetOwner ( )
{
	static UFunction* pFnGetOwner = NULL;

	if ( ! pFnGetOwner )
		pFnGetOwner = (UFunction*) UObject::GObjObjects()->Data[ 33102 ];

	UUIEvent_execGetOwner_Parms GetOwner_Parms;

	pFnGetOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwner, &GetOwner_Parms, NULL );

	pFnGetOwner->FunctionFlags |= 0x400;

	return GetOwner_Parms.ReturnValue;
};

// Function Engine.UIEvent.AllowEventActivation
// [0x00520000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerIndex                ( CPF_Parm )
// class UUIScreenObject*         InEventOwner                   ( CPF_Parm )
// class UObject*                 InEventActivator               ( CPF_Parm )
// unsigned long                  bActivateImmediately           ( CPF_Parm )
// struct TArray<int>             IndicesToActivate              ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIEvent::AllowEventActivation ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, struct TArray<int>* IndicesToActivate )
{
	static UFunction* pFnAllowEventActivation = NULL;

	if ( ! pFnAllowEventActivation )
		pFnAllowEventActivation = (UFunction*) UObject::GObjObjects()->Data[ 33094 ];

	UUIEvent_execAllowEventActivation_Parms AllowEventActivation_Parms;
	AllowEventActivation_Parms.ControllerIndex = ControllerIndex;
	AllowEventActivation_Parms.InEventOwner = InEventOwner;
	AllowEventActivation_Parms.InEventActivator = InEventActivator;
	AllowEventActivation_Parms.bActivateImmediately = bActivateImmediately;

	this->ProcessEvent ( pFnAllowEventActivation, &AllowEventActivation_Parms, NULL );

	if ( IndicesToActivate )
		memcpy ( IndicesToActivate, &AllowEventActivation_Parms.IndicesToActivate, 0x10 );

	return AllowEventActivation_Parms.ReturnValue;
};

// Function Engine.UIEvent_CalloutButtonInputProxy.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIEvent_CalloutButtonInputProxy::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 35044 ];

	UUIEvent_CalloutButtonInputProxy_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.UIEvent_CalloutButtonInputProxy.IsPastingIntoUISequenceAllowed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIEvent_CalloutButtonInputProxy::eventIsPastingIntoUISequenceAllowed ( )
{
	static UFunction* pFnIsPastingIntoUISequenceAllowed = NULL;

	if ( ! pFnIsPastingIntoUISequenceAllowed )
		pFnIsPastingIntoUISequenceAllowed = (UFunction*) UObject::GObjObjects()->Data[ 35042 ];

	UUIEvent_CalloutButtonInputProxy_eventIsPastingIntoUISequenceAllowed_Parms IsPastingIntoUISequenceAllowed_Parms;

	this->ProcessEvent ( pFnIsPastingIntoUISequenceAllowed, &IsPastingIntoUISequenceAllowed_Parms, NULL );

	return IsPastingIntoUISequenceAllowed_Parms.ReturnValue;
};

// Function Engine.UIEvent_CalloutButtonInputProxy.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_CalloutButtonInputProxy::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 35039 ];

	UUIEvent_CalloutButtonInputProxy_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent_CalloutButtonInputProxy.FindButtonAliasIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonAliasName                ( CPF_Parm )

int UUIEvent_CalloutButtonInputProxy::FindButtonAliasIndex ( struct FName ButtonAliasName )
{
	static UFunction* pFnFindButtonAliasIndex = NULL;

	if ( ! pFnFindButtonAliasIndex )
		pFnFindButtonAliasIndex = (UFunction*) UObject::GObjObjects()->Data[ 35036 ];

	UUIEvent_CalloutButtonInputProxy_execFindButtonAliasIndex_Parms FindButtonAliasIndex_Parms;
	memcpy ( &FindButtonAliasIndex_Parms.ButtonAliasName, &ButtonAliasName, 0x8 );

	pFnFindButtonAliasIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindButtonAliasIndex, &FindButtonAliasIndex_Parms, NULL );

	pFnFindButtonAliasIndex->FunctionFlags |= 0x400;

	return FindButtonAliasIndex_Parms.ReturnValue;
};

// Function Engine.UIEvent_CalloutButtonInputProxy.ChangeButtonAlias
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   CurrentAliasName               ( CPF_Parm )
// struct FName                   NewAliasName                   ( CPF_Parm )

bool UUIEvent_CalloutButtonInputProxy::ChangeButtonAlias ( struct FName CurrentAliasName, struct FName NewAliasName )
{
	static UFunction* pFnChangeButtonAlias = NULL;

	if ( ! pFnChangeButtonAlias )
		pFnChangeButtonAlias = (UFunction*) UObject::GObjObjects()->Data[ 35032 ];

	UUIEvent_CalloutButtonInputProxy_execChangeButtonAlias_Parms ChangeButtonAlias_Parms;
	memcpy ( &ChangeButtonAlias_Parms.CurrentAliasName, &CurrentAliasName, 0x8 );
	memcpy ( &ChangeButtonAlias_Parms.NewAliasName, &NewAliasName, 0x8 );

	pFnChangeButtonAlias->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChangeButtonAlias, &ChangeButtonAlias_Parms, NULL );

	pFnChangeButtonAlias->FunctionFlags |= 0x400;

	return ChangeButtonAlias_Parms.ReturnValue;
};

// Function Engine.UIEvent_CalloutButtonInputProxy.UnregisterButtonAlias
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonAliasName                ( CPF_Parm )

bool UUIEvent_CalloutButtonInputProxy::UnregisterButtonAlias ( struct FName ButtonAliasName )
{
	static UFunction* pFnUnregisterButtonAlias = NULL;

	if ( ! pFnUnregisterButtonAlias )
		pFnUnregisterButtonAlias = (UFunction*) UObject::GObjObjects()->Data[ 35029 ];

	UUIEvent_CalloutButtonInputProxy_execUnregisterButtonAlias_Parms UnregisterButtonAlias_Parms;
	memcpy ( &UnregisterButtonAlias_Parms.ButtonAliasName, &ButtonAliasName, 0x8 );

	pFnUnregisterButtonAlias->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnregisterButtonAlias, &UnregisterButtonAlias_Parms, NULL );

	pFnUnregisterButtonAlias->FunctionFlags |= 0x400;

	return UnregisterButtonAlias_Parms.ReturnValue;
};

// Function Engine.UIEvent_CalloutButtonInputProxy.RegisterButtonAlias
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonAliasName                ( CPF_Parm )

bool UUIEvent_CalloutButtonInputProxy::RegisterButtonAlias ( struct FName ButtonAliasName )
{
	static UFunction* pFnRegisterButtonAlias = NULL;

	if ( ! pFnRegisterButtonAlias )
		pFnRegisterButtonAlias = (UFunction*) UObject::GObjObjects()->Data[ 35026 ];

	UUIEvent_CalloutButtonInputProxy_execRegisterButtonAlias_Parms RegisterButtonAlias_Parms;
	memcpy ( &RegisterButtonAlias_Parms.ButtonAliasName, &ButtonAliasName, 0x8 );

	pFnRegisterButtonAlias->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterButtonAlias, &RegisterButtonAlias_Parms, NULL );

	pFnRegisterButtonAlias->FunctionFlags |= 0x400;

	return RegisterButtonAlias_Parms.ReturnValue;
};

// Function Engine.UIEvent_MetaObject.IsPastingIntoUISequenceAllowed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIEvent_MetaObject::eventIsPastingIntoUISequenceAllowed ( )
{
	static UFunction* pFnIsPastingIntoUISequenceAllowed = NULL;

	if ( ! pFnIsPastingIntoUISequenceAllowed )
		pFnIsPastingIntoUISequenceAllowed = (UFunction*) UObject::GObjObjects()->Data[ 35050 ];

	UUIEvent_MetaObject_eventIsPastingIntoUISequenceAllowed_Parms IsPastingIntoUISequenceAllowed_Parms;

	this->ProcessEvent ( pFnIsPastingIntoUISequenceAllowed, &IsPastingIntoUISequenceAllowed_Parms, NULL );

	return IsPastingIntoUISequenceAllowed_Parms.ReturnValue;
};

// Function Engine.UIEvent_MetaObject.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_MetaObject::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 35047 ];

	UUIEvent_MetaObject_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.UIEvent_ProcessInput.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool UUIEvent_ProcessInput::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 35053 ];

	UUIEvent_ProcessInput_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.InteractiveFoliageActor.Touch
// [0x00020D00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AInteractiveFoliageActor::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 22551 ];

	AInteractiveFoliageActor_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	pFnTouch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );

	pFnTouch->FunctionFlags |= 0x400;
};

// Function Engine.InteractiveFoliageActor.TakeDamage
// [0x00024D00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )
// class UDamageType*             pDamage                        ( CPF_OptionalParm | CPF_Parm )

void AInteractiveFoliageActor::eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UDamageType* pDamage )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 22542 ];

	AInteractiveFoliageActor_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x28 );
	TakeDamage_Parms.DamageCauser = DamageCauser;
	TakeDamage_Parms.pDamage = pDamage;

	pFnTakeDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );

	pFnTakeDamage->FunctionFlags |= 0x400;
};

// Function Engine.FluidInfluenceActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AFluidInfluenceActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 20074 ];

	AFluidInfluenceActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.FluidInfluenceActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void AFluidInfluenceActor::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 20069 ];

	AFluidInfluenceActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.FluidSurfaceActor.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AFluidSurfaceActor::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 20151 ];

	AFluidSurfaceActor_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.FluidSurfaceActor.TakeDamage
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )
// class UDamageType*             pDamage                        ( CPF_OptionalParm | CPF_Parm )

void AFluidSurfaceActor::eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UDamageType* pDamage )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 20142 ];

	AFluidSurfaceActor_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x28 );
	TakeDamage_Parms.DamageCauser = DamageCauser;
	TakeDamage_Parms.pDamage = pDamage;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.FluidSurfaceComponent.SetSimulationPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 WorldPos                       ( CPF_Parm )

void UFluidSurfaceComponent::SetSimulationPosition ( struct FVector WorldPos )
{
	static UFunction* pFnSetSimulationPosition = NULL;

	if ( ! pFnSetSimulationPosition )
		pFnSetSimulationPosition = (UFunction*) UObject::GObjObjects()->Data[ 20091 ];

	UFluidSurfaceComponent_execSetSimulationPosition_Parms SetSimulationPosition_Parms;
	memcpy ( &SetSimulationPosition_Parms.WorldPos, &WorldPos, 0xC );

	pFnSetSimulationPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSimulationPosition, &SetSimulationPosition_Parms, NULL );

	pFnSetSimulationPosition->FunctionFlags |= 0x400;
};

// Function Engine.FluidSurfaceComponent.SetDetailPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 WorldPos                       ( CPF_Parm )

void UFluidSurfaceComponent::SetDetailPosition ( struct FVector WorldPos )
{
	static UFunction* pFnSetDetailPosition = NULL;

	if ( ! pFnSetDetailPosition )
		pFnSetDetailPosition = (UFunction*) UObject::GObjObjects()->Data[ 20089 ];

	UFluidSurfaceComponent_execSetDetailPosition_Parms SetDetailPosition_Parms;
	memcpy ( &SetDetailPosition_Parms.WorldPos, &WorldPos, 0xC );

	pFnSetDetailPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDetailPosition, &SetDetailPosition_Parms, NULL );

	pFnSetDetailPosition->FunctionFlags |= 0x400;
};

// Function Engine.FluidSurfaceComponent.ApplyForce
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 WorldPos                       ( CPF_Parm )
// float                          Strength                       ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// unsigned long                  bImpulse                       ( CPF_OptionalParm | CPF_Parm )

void UFluidSurfaceComponent::ApplyForce ( struct FVector WorldPos, float Strength, float Radius, unsigned long bImpulse )
{
	static UFunction* pFnApplyForce = NULL;

	if ( ! pFnApplyForce )
		pFnApplyForce = (UFunction*) UObject::GObjObjects()->Data[ 6989 ];

	UFluidSurfaceComponent_execApplyForce_Parms ApplyForce_Parms;
	memcpy ( &ApplyForce_Parms.WorldPos, &WorldPos, 0xC );
	ApplyForce_Parms.Strength = Strength;
	ApplyForce_Parms.Radius = Radius;
	ApplyForce_Parms.bImpulse = bImpulse;

	pFnApplyForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyForce, &ApplyForce_Parms, NULL );

	pFnApplyForce->FunctionFlags |= 0x400;
};

// Function Engine.SpeedTreeComponent.SetMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  MeshType                       ( CPF_Parm )
// class UMaterialInterface*      Material                       ( CPF_Parm )

void USpeedTreeComponent::SetMaterial ( unsigned char MeshType, class UMaterialInterface* Material )
{
	static UFunction* pFnSetMaterial = NULL;

	if ( ! pFnSetMaterial )
		pFnSetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 31107 ];

	USpeedTreeComponent_execSetMaterial_Parms SetMaterial_Parms;
	SetMaterial_Parms.MeshType = MeshType;
	SetMaterial_Parms.Material = Material;

	pFnSetMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterial, &SetMaterial_Parms, NULL );

	pFnSetMaterial->FunctionFlags |= 0x400;
};

// Function Engine.SpeedTreeComponent.GetMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  MeshType                       ( CPF_Parm )

class UMaterialInterface* USpeedTreeComponent::GetMaterial ( unsigned char MeshType )
{
	static UFunction* pFnGetMaterial = NULL;

	if ( ! pFnGetMaterial )
		pFnGetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 31104 ];

	USpeedTreeComponent_execGetMaterial_Parms GetMaterial_Parms;
	GetMaterial_Parms.MeshType = MeshType;

	pFnGetMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaterial, &GetMaterial_Parms, NULL );

	pFnGetMaterial->FunctionFlags |= 0x400;

	return GetMaterial_Parms.ReturnValue;
};

// Function Engine.TextureFlipBook.SetCurrentFrame
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Row                            ( CPF_Parm )
// int                            Col                            ( CPF_Parm )

void UTextureFlipBook::SetCurrentFrame ( int Row, int Col )
{
	static UFunction* pFnSetCurrentFrame = NULL;

	if ( ! pFnSetCurrentFrame )
		pFnSetCurrentFrame = (UFunction*) UObject::GObjObjects()->Data[ 32029 ];

	UTextureFlipBook_execSetCurrentFrame_Parms SetCurrentFrame_Parms;
	SetCurrentFrame_Parms.Row = Row;
	SetCurrentFrame_Parms.Col = Col;

	pFnSetCurrentFrame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCurrentFrame, &SetCurrentFrame_Parms, NULL );

	pFnSetCurrentFrame->FunctionFlags |= 0x400;
};

// Function Engine.TextureFlipBook.Stop
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureFlipBook::Stop ( )
{
	static UFunction* pFnStop = NULL;

	if ( ! pFnStop )
		pFnStop = (UFunction*) UObject::GObjObjects()->Data[ 32028 ];

	UTextureFlipBook_execStop_Parms Stop_Parms;

	pFnStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStop, &Stop_Parms, NULL );

	pFnStop->FunctionFlags |= 0x400;
};

// Function Engine.TextureFlipBook.Pause
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureFlipBook::Pause ( )
{
	static UFunction* pFnPause = NULL;

	if ( ! pFnPause )
		pFnPause = (UFunction*) UObject::GObjObjects()->Data[ 32027 ];

	UTextureFlipBook_execPause_Parms Pause_Parms;

	pFnPause->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPause, &Pause_Parms, NULL );

	pFnPause->FunctionFlags |= 0x400;
};

// Function Engine.TextureFlipBook.Play
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureFlipBook::Play ( )
{
	static UFunction* pFnPlay = NULL;

	if ( ! pFnPlay )
		pFnPlay = (UFunction*) UObject::GObjObjects()->Data[ 32026 ];

	UTextureFlipBook_execPlay_Parms Play_Parms;

	pFnPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlay, &Play_Parms, NULL );

	pFnPlay->FunctionFlags |= 0x400;
};

// Function Engine.Texture2DComposite.ResetSourceRegions
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UTexture2DComposite::ResetSourceRegions ( )
{
	static UFunction* pFnResetSourceRegions = NULL;

	if ( ! pFnResetSourceRegions )
		pFnResetSourceRegions = (UFunction*) UObject::GObjObjects()->Data[ 31997 ];

	UTexture2DComposite_execResetSourceRegions_Parms ResetSourceRegions_Parms;

	pFnResetSourceRegions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetSourceRegions, &ResetSourceRegions_Parms, NULL );

	pFnResetSourceRegions->FunctionFlags |= 0x400;
};

// Function Engine.Texture2DComposite.UpdateCompositeTexture
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            NumMipsToGenerate              ( CPF_Parm )

void UTexture2DComposite::UpdateCompositeTexture ( int NumMipsToGenerate )
{
	static UFunction* pFnUpdateCompositeTexture = NULL;

	if ( ! pFnUpdateCompositeTexture )
		pFnUpdateCompositeTexture = (UFunction*) UObject::GObjObjects()->Data[ 31995 ];

	UTexture2DComposite_execUpdateCompositeTexture_Parms UpdateCompositeTexture_Parms;
	UpdateCompositeTexture_Parms.NumMipsToGenerate = NumMipsToGenerate;

	pFnUpdateCompositeTexture->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCompositeTexture, &UpdateCompositeTexture_Parms, NULL );

	pFnUpdateCompositeTexture->FunctionFlags |= 0x400;
};

// Function Engine.Texture2DComposite.SourceTexturesFullyStreamedIn
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTexture2DComposite::SourceTexturesFullyStreamedIn ( )
{
	static UFunction* pFnSourceTexturesFullyStreamedIn = NULL;

	if ( ! pFnSourceTexturesFullyStreamedIn )
		pFnSourceTexturesFullyStreamedIn = (UFunction*) UObject::GObjObjects()->Data[ 31993 ];

	UTexture2DComposite_execSourceTexturesFullyStreamedIn_Parms SourceTexturesFullyStreamedIn_Parms;

	pFnSourceTexturesFullyStreamedIn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSourceTexturesFullyStreamedIn, &SourceTexturesFullyStreamedIn_Parms, NULL );

	pFnSourceTexturesFullyStreamedIn->FunctionFlags |= 0x400;

	return SourceTexturesFullyStreamedIn_Parms.ReturnValue;
};

// Function Engine.Texture2DDynamic.Create
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture2DDynamic*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InSizeX                        ( CPF_Parm )
// int                            InSizeY                        ( CPF_Parm )
// unsigned char                  InFormat                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  InIsResolveTarget              ( CPF_OptionalParm | CPF_Parm )

class UTexture2DDynamic* UTexture2DDynamic::Create ( int InSizeX, int InSizeY, unsigned char InFormat, unsigned long InIsResolveTarget )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 32004 ];

	UTexture2DDynamic_execCreate_Parms Create_Parms;
	Create_Parms.InSizeX = InSizeX;
	Create_Parms.InSizeY = InSizeY;
	Create_Parms.InFormat = InFormat;
	Create_Parms.InIsResolveTarget = InIsResolveTarget;

	pFnCreate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );

	pFnCreate->FunctionFlags |= 0x400;

	return Create_Parms.ReturnValue;
};

// Function Engine.Texture2DDynamic.Init
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            InSizeX                        ( CPF_Parm )
// int                            InSizeY                        ( CPF_Parm )
// unsigned char                  InFormat                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  InIsResolveTarget              ( CPF_OptionalParm | CPF_Parm )

void UTexture2DDynamic::Init ( int InSizeX, int InSizeY, unsigned char InFormat, unsigned long InIsResolveTarget )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 31999 ];

	UTexture2DDynamic_execInit_Parms Init_Parms;
	Init_Parms.InSizeX = InSizeX;
	Init_Parms.InSizeY = InSizeY;
	Init_Parms.InFormat = InFormat;
	Init_Parms.InIsResolveTarget = InIsResolveTarget;

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;
};

// Function Engine.TextureMovie.Stop
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureMovie::Stop ( )
{
	static UFunction* pFnStop = NULL;

	if ( ! pFnStop )
		pFnStop = (UFunction*) UObject::GObjObjects()->Data[ 32054 ];

	UTextureMovie_execStop_Parms Stop_Parms;

	pFnStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStop, &Stop_Parms, NULL );

	pFnStop->FunctionFlags |= 0x400;
};

// Function Engine.TextureMovie.Pause
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureMovie::Pause ( )
{
	static UFunction* pFnPause = NULL;

	if ( ! pFnPause )
		pFnPause = (UFunction*) UObject::GObjObjects()->Data[ 32053 ];

	UTextureMovie_execPause_Parms Pause_Parms;

	pFnPause->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPause, &Pause_Parms, NULL );

	pFnPause->FunctionFlags |= 0x400;
};

// Function Engine.TextureMovie.Play
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureMovie::Play ( )
{
	static UFunction* pFnPlay = NULL;

	if ( ! pFnPlay )
		pFnPlay = (UFunction*) UObject::GObjObjects()->Data[ 32052 ];

	UTextureMovie_execPlay_Parms Play_Parms;

	pFnPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlay, &Play_Parms, NULL );

	pFnPlay->FunctionFlags |= 0x400;
};

// Function Engine.TextureRenderTarget2D.Create
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTextureRenderTarget2D*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InSizeX                        ( CPF_Parm )
// int                            InSizeY                        ( CPF_Parm )
// unsigned char                  InFormat                       ( CPF_OptionalParm | CPF_Parm )
// struct FLinearColor            InClearColor                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOnlyRenderOnce                ( CPF_OptionalParm | CPF_Parm )

class UTextureRenderTarget2D* UTextureRenderTarget2D::Create ( int InSizeX, int InSizeY, unsigned char InFormat, struct FLinearColor InClearColor, unsigned long bOnlyRenderOnce )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 29402 ];

	UTextureRenderTarget2D_execCreate_Parms Create_Parms;
	Create_Parms.InSizeX = InSizeX;
	Create_Parms.InSizeY = InSizeY;
	Create_Parms.InFormat = InFormat;
	memcpy ( &Create_Parms.InClearColor, &InClearColor, 0x10 );
	Create_Parms.bOnlyRenderOnce = bOnlyRenderOnce;

	pFnCreate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );

	pFnCreate->FunctionFlags |= 0x400;

	return Create_Parms.ReturnValue;
};

// Function Engine.ScriptedTexture.Render
// [0x00120000] 
// Parameters infos:
// class UCanvas*                 C                              ( CPF_Parm )

void UScriptedTexture::Render ( class UCanvas* C )
{
	static UFunction* pFnRender = NULL;

	if ( ! pFnRender )
		pFnRender = (UFunction*) UObject::GObjObjects()->Data[ 29416 ];

	UScriptedTexture_execRender_Parms Render_Parms;
	Render_Parms.C = C;

	this->ProcessEvent ( pFnRender, &Render_Parms, NULL );
};

// Function Engine.DebugCameraController.ConsoleCommand
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bWriteToLog                    ( CPF_OptionalParm | CPF_Parm )

struct FString ADebugCameraController::ConsoleCommand ( struct FString Command, unsigned long bWriteToLog )
{
	static UFunction* pFnConsoleCommand = NULL;

	if ( ! pFnConsoleCommand )
		pFnConsoleCommand = (UFunction*) UObject::GObjObjects()->Data[ 18204 ];

	ADebugCameraController_execConsoleCommand_Parms ConsoleCommand_Parms;
	memcpy ( &ConsoleCommand_Parms.Command, &Command, 0x10 );
	ConsoleCommand_Parms.bWriteToLog = bWriteToLog;

	pFnConsoleCommand->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConsoleCommand, &ConsoleCommand_Parms, NULL );

	pFnConsoleCommand->FunctionFlags |= 0x400;

	return ConsoleCommand_Parms.ReturnValue;
};

// Function Engine.DebugCameraController.ShowDebugSelectedInfo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ADebugCameraController::ShowDebugSelectedInfo ( )
{
	static UFunction* pFnShowDebugSelectedInfo = NULL;

	if ( ! pFnShowDebugSelectedInfo )
		pFnShowDebugSelectedInfo = (UFunction*) UObject::GObjObjects()->Data[ 18236 ];

	ADebugCameraController_execShowDebugSelectedInfo_Parms ShowDebugSelectedInfo_Parms;

	this->ProcessEvent ( pFnShowDebugSelectedInfo, &ShowDebugSelectedInfo_Parms, NULL );
};

// Function Engine.DebugCameraController.NativeInputKey
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  Event                          ( CPF_Parm )
// float                          AmountDepressed                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool ADebugCameraController::NativeInputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad )
{
	static UFunction* pFnNativeInputKey = NULL;

	if ( ! pFnNativeInputKey )
		pFnNativeInputKey = (UFunction*) UObject::GObjObjects()->Data[ 18217 ];

	ADebugCameraController_execNativeInputKey_Parms NativeInputKey_Parms;
	NativeInputKey_Parms.ControllerId = ControllerId;
	memcpy ( &NativeInputKey_Parms.Key, &Key, 0x8 );
	NativeInputKey_Parms.Event = Event;
	NativeInputKey_Parms.AmountDepressed = AmountDepressed;
	NativeInputKey_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnNativeInputKey, &NativeInputKey_Parms, NULL );

	return NativeInputKey_Parms.ReturnValue;
};

// Function Engine.DebugCameraController.DisableDebugCamera
// [0x00020002] 
// Parameters infos:

void ADebugCameraController::DisableDebugCamera ( )
{
	static UFunction* pFnDisableDebugCamera = NULL;

	if ( ! pFnDisableDebugCamera )
		pFnDisableDebugCamera = (UFunction*) UObject::GObjObjects()->Data[ 18212 ];

	ADebugCameraController_execDisableDebugCamera_Parms DisableDebugCamera_Parms;

	this->ProcessEvent ( pFnDisableDebugCamera, &DisableDebugCamera_Parms, NULL );
};

// Function Engine.DebugCameraController.NormalSpeed
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ADebugCameraController::NormalSpeed ( )
{
	static UFunction* pFnNormalSpeed = NULL;

	if ( ! pFnNormalSpeed )
		pFnNormalSpeed = (UFunction*) UObject::GObjObjects()->Data[ 18211 ];

	ADebugCameraController_execNormalSpeed_Parms NormalSpeed_Parms;

	this->ProcessEvent ( pFnNormalSpeed, &NormalSpeed_Parms, NULL );
};

// Function Engine.DebugCameraController.MoreSpeed
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ADebugCameraController::MoreSpeed ( )
{
	static UFunction* pFnMoreSpeed = NULL;

	if ( ! pFnMoreSpeed )
		pFnMoreSpeed = (UFunction*) UObject::GObjObjects()->Data[ 18210 ];

	ADebugCameraController_execMoreSpeed_Parms MoreSpeed_Parms;

	this->ProcessEvent ( pFnMoreSpeed, &MoreSpeed_Parms, NULL );
};

// Function Engine.DebugCameraController.SetFreezeRendering
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ADebugCameraController::SetFreezeRendering ( )
{
	static UFunction* pFnSetFreezeRendering = NULL;

	if ( ! pFnSetFreezeRendering )
		pFnSetFreezeRendering = (UFunction*) UObject::GObjObjects()->Data[ 18208 ];

	ADebugCameraController_execSetFreezeRendering_Parms SetFreezeRendering_Parms;

	this->ProcessEvent ( pFnSetFreezeRendering, &SetFreezeRendering_Parms, NULL );
};

// Function Engine.DebugCameraController.OnDeactivate
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void ADebugCameraController::OnDeactivate ( class APlayerController* PC )
{
	static UFunction* pFnOnDeactivate = NULL;

	if ( ! pFnOnDeactivate )
		pFnOnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 18206 ];

	ADebugCameraController_execOnDeactivate_Parms OnDeactivate_Parms;
	OnDeactivate_Parms.PC = PC;

	this->ProcessEvent ( pFnOnDeactivate, &OnDeactivate_Parms, NULL );
};

// Function Engine.DebugCameraController.OnActivate
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void ADebugCameraController::OnActivate ( class APlayerController* PC )
{
	static UFunction* pFnOnActivate = NULL;

	if ( ! pFnOnActivate )
		pFnOnActivate = (UFunction*) UObject::GObjObjects()->Data[ 18201 ];

	ADebugCameraController_execOnActivate_Parms OnActivate_Parms;
	OnActivate_Parms.PC = PC;

	this->ProcessEvent ( pFnOnActivate, &OnActivate_Parms, NULL );
};

// Function Engine.DebugCameraController.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ADebugCameraController::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 18199 ];

	ADebugCameraController_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.DebugCameraController.Unselect
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ADebugCameraController::Unselect ( )
{
	static UFunction* pFnUnselect = NULL;

	if ( ! pFnUnselect )
		pFnUnselect = (UFunction*) UObject::GObjObjects()->Data[ 18198 ];

	ADebugCameraController_execUnselect_Parms Unselect_Parms;

	pFnUnselect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnselect, &Unselect_Parms, NULL );

	pFnUnselect->FunctionFlags |= 0x400;
};

// Function Engine.DebugCameraController.SecondarySelect
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 HitLoc                         ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )

void ADebugCameraController::SecondarySelect ( struct FVector HitLoc, struct FVector HitNormal, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnSecondarySelect = NULL;

	if ( ! pFnSecondarySelect )
		pFnSecondarySelect = (UFunction*) UObject::GObjObjects()->Data[ 18194 ];

	ADebugCameraController_execSecondarySelect_Parms SecondarySelect_Parms;
	memcpy ( &SecondarySelect_Parms.HitLoc, &HitLoc, 0xC );
	memcpy ( &SecondarySelect_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &SecondarySelect_Parms.HitInfo, &HitInfo, 0x28 );

	pFnSecondarySelect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSecondarySelect, &SecondarySelect_Parms, NULL );

	pFnSecondarySelect->FunctionFlags |= 0x400;
};

// Function Engine.DebugCameraController.PrimarySelect
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 HitLoc                         ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )

void ADebugCameraController::PrimarySelect ( struct FVector HitLoc, struct FVector HitNormal, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnPrimarySelect = NULL;

	if ( ! pFnPrimarySelect )
		pFnPrimarySelect = (UFunction*) UObject::GObjObjects()->Data[ 18190 ];

	ADebugCameraController_execPrimarySelect_Parms PrimarySelect_Parms;
	memcpy ( &PrimarySelect_Parms.HitLoc, &HitLoc, 0xC );
	memcpy ( &PrimarySelect_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &PrimarySelect_Parms.HitInfo, &HitInfo, 0x28 );

	pFnPrimarySelect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrimarySelect, &PrimarySelect_Parms, NULL );

	pFnPrimarySelect->FunctionFlags |= 0x400;
};

// Function Engine.Scout.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AScout::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 29373 ];

	AScout_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.Light.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ALight::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 18847 ];

	ALight_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.Light.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ALight::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 18843 ];

	ALight_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.PointLightToggleable.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct APointLightToggleable_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void APointLightToggleable::ApplyCheckpointRecord ( struct APointLightToggleable_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 28467 ];

	APointLightToggleable_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.PointLightToggleable.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct APointLightToggleable_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void APointLightToggleable::CreateCheckpointRecord ( struct APointLightToggleable_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 28465 ];

	APointLightToggleable_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.PointLightToggleable.ShouldSaveForCheckpoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APointLightToggleable::ShouldSaveForCheckpoint ( )
{
	static UFunction* pFnShouldSaveForCheckpoint = NULL;

	if ( ! pFnShouldSaveForCheckpoint )
		pFnShouldSaveForCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 28463 ];

	APointLightToggleable_execShouldSaveForCheckpoint_Parms ShouldSaveForCheckpoint_Parms;

	this->ProcessEvent ( pFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Parms, NULL );

	return ShouldSaveForCheckpoint_Parms.ReturnValue;
};

// Function Engine.SpotLightToggleable.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ASpotLightToggleable_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void ASpotLightToggleable::ApplyCheckpointRecord ( struct ASpotLightToggleable_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 31248 ];

	ASpotLightToggleable_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.SpotLightToggleable.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ASpotLightToggleable_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void ASpotLightToggleable::CreateCheckpointRecord ( struct ASpotLightToggleable_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 31246 ];

	ASpotLightToggleable_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.SpotLightToggleable.ShouldSaveForCheckpoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASpotLightToggleable::ShouldSaveForCheckpoint ( )
{
	static UFunction* pFnShouldSaveForCheckpoint = NULL;

	if ( ! pFnShouldSaveForCheckpoint )
		pFnShouldSaveForCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 31244 ];

	ASpotLightToggleable_execShouldSaveForCheckpoint_Parms ShouldSaveForCheckpoint_Parms;

	this->ProcessEvent ( pFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Parms, NULL );

	return ShouldSaveForCheckpoint_Parms.ReturnValue;
};

// Function Engine.LightComponent.OnUpdatePropertyOcclusionMaskDarkness
// [0x00020002] 
// Parameters infos:

void ULightComponent::OnUpdatePropertyOcclusionMaskDarkness ( )
{
	static UFunction* pFnOnUpdatePropertyOcclusionMaskDarkness = NULL;

	if ( ! pFnOnUpdatePropertyOcclusionMaskDarkness )
		pFnOnUpdatePropertyOcclusionMaskDarkness = (UFunction*) UObject::GObjObjects()->Data[ 13288 ];

	ULightComponent_execOnUpdatePropertyOcclusionMaskDarkness_Parms OnUpdatePropertyOcclusionMaskDarkness_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyOcclusionMaskDarkness, &OnUpdatePropertyOcclusionMaskDarkness_Parms, NULL );
};

// Function Engine.LightComponent.OnUpdatePropertyBloomTint
// [0x00020002] 
// Parameters infos:

void ULightComponent::OnUpdatePropertyBloomTint ( )
{
	static UFunction* pFnOnUpdatePropertyBloomTint = NULL;

	if ( ! pFnOnUpdatePropertyBloomTint )
		pFnOnUpdatePropertyBloomTint = (UFunction*) UObject::GObjObjects()->Data[ 13287 ];

	ULightComponent_execOnUpdatePropertyBloomTint_Parms OnUpdatePropertyBloomTint_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyBloomTint, &OnUpdatePropertyBloomTint_Parms, NULL );
};

// Function Engine.LightComponent.OnUpdatePropertyBloomScale
// [0x00020002] 
// Parameters infos:

void ULightComponent::OnUpdatePropertyBloomScale ( )
{
	static UFunction* pFnOnUpdatePropertyBloomScale = NULL;

	if ( ! pFnOnUpdatePropertyBloomScale )
		pFnOnUpdatePropertyBloomScale = (UFunction*) UObject::GObjObjects()->Data[ 13286 ];

	ULightComponent_execOnUpdatePropertyBloomScale_Parms OnUpdatePropertyBloomScale_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyBloomScale, &OnUpdatePropertyBloomScale_Parms, NULL );
};

// Function Engine.LightComponent.UpdateLightShaftParameters
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ULightComponent::UpdateLightShaftParameters ( )
{
	static UFunction* pFnUpdateLightShaftParameters = NULL;

	if ( ! pFnUpdateLightShaftParameters )
		pFnUpdateLightShaftParameters = (UFunction*) UObject::GObjObjects()->Data[ 13285 ];

	ULightComponent_execUpdateLightShaftParameters_Parms UpdateLightShaftParameters_Parms;

	pFnUpdateLightShaftParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateLightShaftParameters, &UpdateLightShaftParameters_Parms, NULL );

	pFnUpdateLightShaftParameters->FunctionFlags |= 0x400;
};

// Function Engine.LightComponent.UpdateColorAndBrightness
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ULightComponent::UpdateColorAndBrightness ( )
{
	static UFunction* pFnUpdateColorAndBrightness = NULL;

	if ( ! pFnUpdateColorAndBrightness )
		pFnUpdateColorAndBrightness = (UFunction*) UObject::GObjObjects()->Data[ 13284 ];

	ULightComponent_execUpdateColorAndBrightness_Parms UpdateColorAndBrightness_Parms;

	pFnUpdateColorAndBrightness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateColorAndBrightness, &UpdateColorAndBrightness_Parms, NULL );

	pFnUpdateColorAndBrightness->FunctionFlags |= 0x400;
};

// Function Engine.LightComponent.GetDirection
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ULightComponent::GetDirection ( )
{
	static UFunction* pFnGetDirection = NULL;

	if ( ! pFnGetDirection )
		pFnGetDirection = (UFunction*) UObject::GObjObjects()->Data[ 13282 ];

	ULightComponent_execGetDirection_Parms GetDirection_Parms;

	pFnGetDirection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDirection, &GetDirection_Parms, NULL );

	pFnGetDirection->FunctionFlags |= 0x400;

	return GetDirection_Parms.ReturnValue;
};

// Function Engine.LightComponent.GetOrigin
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ULightComponent::GetOrigin ( )
{
	static UFunction* pFnGetOrigin = NULL;

	if ( ! pFnGetOrigin )
		pFnGetOrigin = (UFunction*) UObject::GObjObjects()->Data[ 13280 ];

	ULightComponent_execGetOrigin_Parms GetOrigin_Parms;

	pFnGetOrigin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOrigin, &GetOrigin_Parms, NULL );

	pFnGetOrigin->FunctionFlags |= 0x400;

	return GetOrigin_Parms.ReturnValue;
};

// Function Engine.LightComponent.SetLightProperties
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewBrightness                  ( CPF_OptionalParm | CPF_Parm )
// struct FColor                  NewLightColor                  ( CPF_OptionalParm | CPF_Parm )
// class ULightFunction*          NewLightFunction               ( CPF_OptionalParm | CPF_Parm )

void ULightComponent::SetLightProperties ( float NewBrightness, struct FColor NewLightColor, class ULightFunction* NewLightFunction )
{
	static UFunction* pFnSetLightProperties = NULL;

	if ( ! pFnSetLightProperties )
		pFnSetLightProperties = (UFunction*) UObject::GObjObjects()->Data[ 13273 ];

	ULightComponent_execSetLightProperties_Parms SetLightProperties_Parms;
	SetLightProperties_Parms.NewBrightness = NewBrightness;
	memcpy ( &SetLightProperties_Parms.NewLightColor, &NewLightColor, 0x4 );
	SetLightProperties_Parms.NewLightFunction = NewLightFunction;

	pFnSetLightProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLightProperties, &SetLightProperties_Parms, NULL );

	pFnSetLightProperties->FunctionFlags |= 0x400;
};

// Function Engine.LightComponent.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bSetEnabled                    ( CPF_Parm )

void ULightComponent::SetEnabled ( unsigned long bSetEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 13270 ];

	ULightComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bSetEnabled = bSetEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.DirectionalLightComponent.OnUpdatePropertyBrightness
// [0x00020002] 
// Parameters infos:

void UDirectionalLightComponent::OnUpdatePropertyBrightness ( )
{
	static UFunction* pFnOnUpdatePropertyBrightness = NULL;

	if ( ! pFnOnUpdatePropertyBrightness )
		pFnOnUpdatePropertyBrightness = (UFunction*) UObject::GObjObjects()->Data[ 18850 ];

	UDirectionalLightComponent_execOnUpdatePropertyBrightness_Parms OnUpdatePropertyBrightness_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyBrightness, &OnUpdatePropertyBrightness_Parms, NULL );
};

// Function Engine.DirectionalLightComponent.OnUpdatePropertyLightColor
// [0x00020002] 
// Parameters infos:

void UDirectionalLightComponent::OnUpdatePropertyLightColor ( )
{
	static UFunction* pFnOnUpdatePropertyLightColor = NULL;

	if ( ! pFnOnUpdatePropertyLightColor )
		pFnOnUpdatePropertyLightColor = (UFunction*) UObject::GObjObjects()->Data[ 18849 ];

	UDirectionalLightComponent_execOnUpdatePropertyLightColor_Parms OnUpdatePropertyLightColor_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyLightColor, &OnUpdatePropertyLightColor_Parms, NULL );
};

// Function Engine.PointLightComponent.OnUpdatePropertyBrightness
// [0x00020002] 
// Parameters infos:

void UPointLightComponent::OnUpdatePropertyBrightness ( )
{
	static UFunction* pFnOnUpdatePropertyBrightness = NULL;

	if ( ! pFnOnUpdatePropertyBrightness )
		pFnOnUpdatePropertyBrightness = (UFunction*) UObject::GObjObjects()->Data[ 18916 ];

	UPointLightComponent_execOnUpdatePropertyBrightness_Parms OnUpdatePropertyBrightness_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyBrightness, &OnUpdatePropertyBrightness_Parms, NULL );
};

// Function Engine.PointLightComponent.OnUpdatePropertyLightColor
// [0x00020002] 
// Parameters infos:

void UPointLightComponent::OnUpdatePropertyLightColor ( )
{
	static UFunction* pFnOnUpdatePropertyLightColor = NULL;

	if ( ! pFnOnUpdatePropertyLightColor )
		pFnOnUpdatePropertyLightColor = (UFunction*) UObject::GObjObjects()->Data[ 18915 ];

	UPointLightComponent_execOnUpdatePropertyLightColor_Parms OnUpdatePropertyLightColor_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyLightColor, &OnUpdatePropertyLightColor_Parms, NULL );
};

// Function Engine.PointLightComponent.SetTranslation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewTranslation                 ( CPF_Parm )

void UPointLightComponent::SetTranslation ( struct FVector NewTranslation )
{
	static UFunction* pFnSetTranslation = NULL;

	if ( ! pFnSetTranslation )
		pFnSetTranslation = (UFunction*) UObject::GObjObjects()->Data[ 18913 ];

	UPointLightComponent_execSetTranslation_Parms SetTranslation_Parms;
	memcpy ( &SetTranslation_Parms.NewTranslation, &NewTranslation, 0xC );

	pFnSetTranslation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTranslation, &SetTranslation_Parms, NULL );

	pFnSetTranslation->FunctionFlags |= 0x400;
};

// Function Engine.LightEnvironmentComponent.IsEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ULightEnvironmentComponent::IsEnabled ( )
{
	static UFunction* pFnIsEnabled = NULL;

	if ( ! pFnIsEnabled )
		pFnIsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 13264 ];

	ULightEnvironmentComponent_execIsEnabled_Parms IsEnabled_Parms;

	pFnIsEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEnabled, &IsEnabled_Parms, NULL );

	pFnIsEnabled->FunctionFlags |= 0x400;

	return IsEnabled_Parms.ReturnValue;
};

// Function Engine.LightEnvironmentComponent.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewEnabled                    ( CPF_Parm )

void ULightEnvironmentComponent::SetEnabled ( unsigned long bNewEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 13262 ];

	ULightEnvironmentComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bNewEnabled = bNewEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.BreakConstraint
// [0x00024103] ( FUNC_Final )
// Parameters infos:
// struct FVector                 Impulse                        ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FName                   InBoneName                     ( CPF_Parm )
// unsigned long                  bVelChange                     ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::BreakConstraint ( struct FVector Impulse, struct FVector HitLocation, struct FName InBoneName, unsigned long bVelChange )
{
	static UFunction* pFnBreakConstraint = NULL;

	if ( ! pFnBreakConstraint )
		pFnBreakConstraint = (UFunction*) UObject::GObjObjects()->Data[ 9733 ];

	USkeletalMeshComponent_execBreakConstraint_Parms BreakConstraint_Parms;
	memcpy ( &BreakConstraint_Parms.Impulse, &Impulse, 0xC );
	memcpy ( &BreakConstraint_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &BreakConstraint_Parms.InBoneName, &InBoneName, 0x8 );
	BreakConstraint_Parms.bVelChange = bVelChange;

	this->ProcessEvent ( pFnBreakConstraint, &BreakConstraint_Parms, NULL );
};

// Function Engine.SkeletalMeshComponent.SkelMeshCompOnParticleSystemFinished
// [0x00020102] 
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )

void USkeletalMeshComponent::SkelMeshCompOnParticleSystemFinished ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnSkelMeshCompOnParticleSystemFinished = NULL;

	if ( ! pFnSkelMeshCompOnParticleSystemFinished )
		pFnSkelMeshCompOnParticleSystemFinished = (UFunction*) UObject::GObjObjects()->Data[ 9731 ];

	USkeletalMeshComponent_execSkelMeshCompOnParticleSystemFinished_Parms SkelMeshCompOnParticleSystemFinished_Parms;
	SkelMeshCompOnParticleSystemFinished_Parms.PSC = PSC;

	this->ProcessEvent ( pFnSkelMeshCompOnParticleSystemFinished, &SkelMeshCompOnParticleSystemFinished_Parms, NULL );
};

// Function Engine.SkeletalMeshComponent.PlayParticleEffect
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UAnimNotify_PlayParticleEffect* AnimNotifyData                 ( CPF_Const | CPF_Parm )

void USkeletalMeshComponent::eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData )
{
	static UFunction* pFnPlayParticleEffect = NULL;

	if ( ! pFnPlayParticleEffect )
		pFnPlayParticleEffect = (UFunction*) UObject::GObjObjects()->Data[ 9707 ];

	USkeletalMeshComponent_eventPlayParticleEffect_Parms PlayParticleEffect_Parms;
	PlayParticleEffect_Parms.AnimNotifyData = AnimNotifyData;

	this->ProcessEvent ( pFnPlayParticleEffect, &PlayParticleEffect_Parms, NULL );
};

// Function Engine.SkeletalMeshComponent.StopAnim
// [0x00020002] 
// Parameters infos:

void USkeletalMeshComponent::StopAnim ( )
{
	static UFunction* pFnStopAnim = NULL;

	if ( ! pFnStopAnim )
		pFnStopAnim = (UFunction*) UObject::GObjObjects()->Data[ 9705 ];

	USkeletalMeshComponent_execStopAnim_Parms StopAnim_Parms;

	this->ProcessEvent ( pFnStopAnim, &StopAnim_Parms, NULL );
};

// Function Engine.SkeletalMeshComponent.PlayAnim
// [0x00024002] 
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRestartIfAlreadyPlaying       ( CPF_OptionalParm | CPF_Parm )
// float                          StartTime                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPlayBackwards                 ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::PlayAnim ( struct FName AnimName, float Duration, unsigned long bLoop, unsigned long bRestartIfAlreadyPlaying, float StartTime, unsigned long bPlayBackwards )
{
	static UFunction* pFnPlayAnim = NULL;

	if ( ! pFnPlayAnim )
		pFnPlayAnim = (UFunction*) UObject::GObjObjects()->Data[ 9687 ];

	USkeletalMeshComponent_execPlayAnim_Parms PlayAnim_Parms;
	memcpy ( &PlayAnim_Parms.AnimName, &AnimName, 0x8 );
	PlayAnim_Parms.Duration = Duration;
	PlayAnim_Parms.bLoop = bLoop;
	PlayAnim_Parms.bRestartIfAlreadyPlaying = bRestartIfAlreadyPlaying;
	PlayAnim_Parms.StartTime = StartTime;
	PlayAnim_Parms.bPlayBackwards = bPlayBackwards;

	this->ProcessEvent ( pFnPlayAnim, &PlayAnim_Parms, NULL );
};

// Function Engine.SkeletalMeshComponent.ShowMaterialSection
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            MaterialID                     ( CPF_Parm )
// unsigned long                  bShow                          ( CPF_Parm )

void USkeletalMeshComponent::ShowMaterialSection ( int MaterialID, unsigned long bShow )
{
	static UFunction* pFnShowMaterialSection = NULL;

	if ( ! pFnShowMaterialSection )
		pFnShowMaterialSection = (UFunction*) UObject::GObjObjects()->Data[ 9684 ];

	USkeletalMeshComponent_execShowMaterialSection_Parms ShowMaterialSection_Parms;
	ShowMaterialSection_Parms.MaterialID = MaterialID;
	ShowMaterialSection_Parms.bShow = bShow;

	pFnShowMaterialSection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowMaterialSection, &ShowMaterialSection_Parms, NULL );

	pFnShowMaterialSection->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.CalculateRootBodyOffsetInvTM
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::CalculateRootBodyOffsetInvTM ( )
{
	static UFunction* pFnCalculateRootBodyOffsetInvTM = NULL;

	if ( ! pFnCalculateRootBodyOffsetInvTM )
		pFnCalculateRootBodyOffsetInvTM = (UFunction*) UObject::GObjObjects()->Data[ 9683 ];

	USkeletalMeshComponent_execCalculateRootBodyOffsetInvTM_Parms CalculateRootBodyOffsetInvTM_Parms;

	pFnCalculateRootBodyOffsetInvTM->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalculateRootBodyOffsetInvTM, &CalculateRootBodyOffsetInvTM_Parms, NULL );

	pFnCalculateRootBodyOffsetInvTM->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.BioEnableFaceFX
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_Parm )

void USkeletalMeshComponent::BioEnableFaceFX ( unsigned long bEnable )
{
	static UFunction* pFnBioEnableFaceFX = NULL;

	if ( ! pFnBioEnableFaceFX )
		pFnBioEnableFaceFX = (UFunction*) UObject::GObjObjects()->Data[ 9681 ];

	USkeletalMeshComponent_execBioEnableFaceFX_Parms BioEnableFaceFX_Parms;
	BioEnableFaceFX_Parms.bEnable = bEnable;

	pFnBioEnableFaceFX->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioEnableFaceFX, &BioEnableFaceFX_Parms, NULL );

	pFnBioEnableFaceFX->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.IsFrozen
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USkeletalMeshComponent::IsFrozen ( )
{
	static UFunction* pFnIsFrozen = NULL;

	if ( ! pFnIsFrozen )
		pFnIsFrozen = (UFunction*) UObject::GObjObjects()->Data[ 9679 ];

	USkeletalMeshComponent_execIsFrozen_Parms IsFrozen_Parms;

	pFnIsFrozen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFrozen, &IsFrozen_Parms, NULL );

	pFnIsFrozen->FunctionFlags |= 0x400;

	return IsFrozen_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.SetFrozen
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bFrozen                        ( CPF_Parm )

void USkeletalMeshComponent::SetFrozen ( unsigned long bFrozen )
{
	static UFunction* pFnSetFrozen = NULL;

	if ( ! pFnSetFrozen )
		pFnSetFrozen = (UFunction*) UObject::GObjObjects()->Data[ 9677 ];

	USkeletalMeshComponent_execSetFrozen_Parms SetFrozen_Parms;
	SetFrozen_Parms.bFrozen = bFrozen;

	pFnSetFrozen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFrozen, &SetFrozen_Parms, NULL );

	pFnSetFrozen->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateMeshForBrokenConstraints
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::UpdateMeshForBrokenConstraints ( )
{
	static UFunction* pFnUpdateMeshForBrokenConstraints = NULL;

	if ( ! pFnUpdateMeshForBrokenConstraints )
		pFnUpdateMeshForBrokenConstraints = (UFunction*) UObject::GObjObjects()->Data[ 9676 ];

	USkeletalMeshComponent_execUpdateMeshForBrokenConstraints_Parms UpdateMeshForBrokenConstraints_Parms;

	pFnUpdateMeshForBrokenConstraints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateMeshForBrokenConstraints, &UpdateMeshForBrokenConstraints_Parms, NULL );

	pFnUpdateMeshForBrokenConstraints->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UnHideBoneByName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_Parm )

void USkeletalMeshComponent::UnHideBoneByName ( struct FName BoneName )
{
	static UFunction* pFnUnHideBoneByName = NULL;

	if ( ! pFnUnHideBoneByName )
		pFnUnHideBoneByName = (UFunction*) UObject::GObjObjects()->Data[ 9674 ];

	USkeletalMeshComponent_execUnHideBoneByName_Parms UnHideBoneByName_Parms;
	memcpy ( &UnHideBoneByName_Parms.BoneName, &BoneName, 0x8 );

	pFnUnHideBoneByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnHideBoneByName, &UnHideBoneByName_Parms, NULL );

	pFnUnHideBoneByName->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.HideBoneByName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_Parm )
// unsigned char                  PhysBodyOption                 ( CPF_Parm )

void USkeletalMeshComponent::HideBoneByName ( struct FName BoneName, unsigned char PhysBodyOption )
{
	static UFunction* pFnHideBoneByName = NULL;

	if ( ! pFnHideBoneByName )
		pFnHideBoneByName = (UFunction*) UObject::GObjObjects()->Data[ 9671 ];

	USkeletalMeshComponent_execHideBoneByName_Parms HideBoneByName_Parms;
	memcpy ( &HideBoneByName_Parms.BoneName, &BoneName, 0x8 );
	HideBoneByName_Parms.PhysBodyOption = PhysBodyOption;

	pFnHideBoneByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHideBoneByName, &HideBoneByName_Parms, NULL );

	pFnHideBoneByName->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.IsBoneHidden
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BoneIndex                      ( CPF_Parm )

bool USkeletalMeshComponent::IsBoneHidden ( int BoneIndex )
{
	static UFunction* pFnIsBoneHidden = NULL;

	if ( ! pFnIsBoneHidden )
		pFnIsBoneHidden = (UFunction*) UObject::GObjObjects()->Data[ 9668 ];

	USkeletalMeshComponent_execIsBoneHidden_Parms IsBoneHidden_Parms;
	IsBoneHidden_Parms.BoneIndex = BoneIndex;

	pFnIsBoneHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsBoneHidden, &IsBoneHidden_Parms, NULL );

	pFnIsBoneHidden->FunctionFlags |= 0x400;

	return IsBoneHidden_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.UnHideBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            BoneIndex                      ( CPF_Parm )

void USkeletalMeshComponent::UnHideBone ( int BoneIndex )
{
	static UFunction* pFnUnHideBone = NULL;

	if ( ! pFnUnHideBone )
		pFnUnHideBone = (UFunction*) UObject::GObjObjects()->Data[ 9666 ];

	USkeletalMeshComponent_execUnHideBone_Parms UnHideBone_Parms;
	UnHideBone_Parms.BoneIndex = BoneIndex;

	pFnUnHideBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnHideBone, &UnHideBone_Parms, NULL );

	pFnUnHideBone->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.HideBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            BoneIndex                      ( CPF_Parm )
// unsigned char                  PhysBodyOption                 ( CPF_Parm )

void USkeletalMeshComponent::HideBone ( int BoneIndex, unsigned char PhysBodyOption )
{
	static UFunction* pFnHideBone = NULL;

	if ( ! pFnHideBone )
		pFnHideBone = (UFunction*) UObject::GObjObjects()->Data[ 9663 ];

	USkeletalMeshComponent_execHideBone_Parms HideBone_Parms;
	HideBone_Parms.BoneIndex = BoneIndex;
	HideBone_Parms.PhysBodyOption = PhysBodyOption;

	pFnHideBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHideBone, &HideBone_Parms, NULL );

	pFnHideBone->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetFaceFXRegisterEx
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 RegName                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  RegOp                          ( CPF_Parm )
// float                          FirstValue                     ( CPF_Parm )
// float                          FirstInterpDuration            ( CPF_Parm )
// float                          NextValue                      ( CPF_Parm )
// float                          NextInterpDuration             ( CPF_Parm )

void USkeletalMeshComponent::SetFaceFXRegisterEx ( struct FString RegName, unsigned char RegOp, float FirstValue, float FirstInterpDuration, float NextValue, float NextInterpDuration )
{
	static UFunction* pFnSetFaceFXRegisterEx = NULL;

	if ( ! pFnSetFaceFXRegisterEx )
		pFnSetFaceFXRegisterEx = (UFunction*) UObject::GObjObjects()->Data[ 9656 ];

	USkeletalMeshComponent_execSetFaceFXRegisterEx_Parms SetFaceFXRegisterEx_Parms;
	memcpy ( &SetFaceFXRegisterEx_Parms.RegName, &RegName, 0x10 );
	SetFaceFXRegisterEx_Parms.RegOp = RegOp;
	SetFaceFXRegisterEx_Parms.FirstValue = FirstValue;
	SetFaceFXRegisterEx_Parms.FirstInterpDuration = FirstInterpDuration;
	SetFaceFXRegisterEx_Parms.NextValue = NextValue;
	SetFaceFXRegisterEx_Parms.NextInterpDuration = NextInterpDuration;

	pFnSetFaceFXRegisterEx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFaceFXRegisterEx, &SetFaceFXRegisterEx_Parms, NULL );

	pFnSetFaceFXRegisterEx->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetFaceFXRegister
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 RegName                        ( CPF_Parm | CPF_NeedCtorLink )
// float                          RegVal                         ( CPF_Parm )
// unsigned char                  RegOp                          ( CPF_Parm )
// float                          InterpDuration                 ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::SetFaceFXRegister ( struct FString RegName, float RegVal, unsigned char RegOp, float InterpDuration )
{
	static UFunction* pFnSetFaceFXRegister = NULL;

	if ( ! pFnSetFaceFXRegister )
		pFnSetFaceFXRegister = (UFunction*) UObject::GObjObjects()->Data[ 9651 ];

	USkeletalMeshComponent_execSetFaceFXRegister_Parms SetFaceFXRegister_Parms;
	memcpy ( &SetFaceFXRegister_Parms.RegName, &RegName, 0x10 );
	SetFaceFXRegister_Parms.RegVal = RegVal;
	SetFaceFXRegister_Parms.RegOp = RegOp;
	SetFaceFXRegister_Parms.InterpDuration = InterpDuration;

	pFnSetFaceFXRegister->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFaceFXRegister, &SetFaceFXRegister_Parms, NULL );

	pFnSetFaceFXRegister->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.GetFaceFXRegister
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 RegName                        ( CPF_Parm | CPF_NeedCtorLink )

float USkeletalMeshComponent::GetFaceFXRegister ( struct FString RegName )
{
	static UFunction* pFnGetFaceFXRegister = NULL;

	if ( ! pFnGetFaceFXRegister )
		pFnGetFaceFXRegister = (UFunction*) UObject::GObjObjects()->Data[ 9648 ];

	USkeletalMeshComponent_execGetFaceFXRegister_Parms GetFaceFXRegister_Parms;
	memcpy ( &GetFaceFXRegister_Parms.RegName, &RegName, 0x10 );

	pFnGetFaceFXRegister->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFaceFXRegister, &GetFaceFXRegister_Parms, NULL );

	pFnGetFaceFXRegister->FunctionFlags |= 0x400;

	return GetFaceFXRegister_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.DeclareFaceFXRegister
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 RegName                        ( CPF_Parm | CPF_NeedCtorLink )

void USkeletalMeshComponent::DeclareFaceFXRegister ( struct FString RegName )
{
	static UFunction* pFnDeclareFaceFXRegister = NULL;

	if ( ! pFnDeclareFaceFXRegister )
		pFnDeclareFaceFXRegister = (UFunction*) UObject::GObjObjects()->Data[ 9646 ];

	USkeletalMeshComponent_execDeclareFaceFXRegister_Parms DeclareFaceFXRegister_Parms;
	memcpy ( &DeclareFaceFXRegister_Parms.RegName, &RegName, 0x10 );

	pFnDeclareFaceFXRegister->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeclareFaceFXRegister, &DeclareFaceFXRegister_Parms, NULL );

	pFnDeclareFaceFXRegister->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.IsPlayingFaceFXAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USkeletalMeshComponent::IsPlayingFaceFXAnim ( )
{
	static UFunction* pFnIsPlayingFaceFXAnim = NULL;

	if ( ! pFnIsPlayingFaceFXAnim )
		pFnIsPlayingFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 9644 ];

	USkeletalMeshComponent_execIsPlayingFaceFXAnim_Parms IsPlayingFaceFXAnim_Parms;

	pFnIsPlayingFaceFXAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayingFaceFXAnim, &IsPlayingFaceFXAnim_Parms, NULL );

	pFnIsPlayingFaceFXAnim->FunctionFlags |= 0x400;

	return IsPlayingFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.StopFaceFXAnim
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          fBioRampDownTime               ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::StopFaceFXAnim ( float fBioRampDownTime )
{
	static UFunction* pFnStopFaceFXAnim = NULL;

	if ( ! pFnStopFaceFXAnim )
		pFnStopFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 9642 ];

	USkeletalMeshComponent_execStopFaceFXAnim_Parms StopFaceFXAnim_Parms;
	StopFaceFXAnim_Parms.fBioRampDownTime = fBioRampDownTime;

	pFnStopFaceFXAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopFaceFXAnim, &StopFaceFXAnim_Parms, NULL );

	pFnStopFaceFXAnim->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.PlayFaceFXAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UFaceFXAnimSet*          FaceFXAnimSetRef               ( CPF_Parm )
// struct FString                 AnimName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 GroupName                      ( CPF_Parm | CPF_NeedCtorLink )
// class USoundCue*               SoundCueToPlay                 ( CPF_Parm )

bool USkeletalMeshComponent::PlayFaceFXAnim ( class UFaceFXAnimSet* FaceFXAnimSetRef, struct FString AnimName, struct FString GroupName, class USoundCue* SoundCueToPlay )
{
	static UFunction* pFnPlayFaceFXAnim = NULL;

	if ( ! pFnPlayFaceFXAnim )
		pFnPlayFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 9636 ];

	USkeletalMeshComponent_execPlayFaceFXAnim_Parms PlayFaceFXAnim_Parms;
	PlayFaceFXAnim_Parms.FaceFXAnimSetRef = FaceFXAnimSetRef;
	memcpy ( &PlayFaceFXAnim_Parms.AnimName, &AnimName, 0x10 );
	memcpy ( &PlayFaceFXAnim_Parms.GroupName, &GroupName, 0x10 );
	PlayFaceFXAnim_Parms.SoundCueToPlay = SoundCueToPlay;

	pFnPlayFaceFXAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayFaceFXAnim, &PlayFaceFXAnim_Parms, NULL );

	pFnPlayFaceFXAnim->FunctionFlags |= 0x400;

	return PlayFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.ToggleInstanceVertexWeights
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_Parm )

void USkeletalMeshComponent::ToggleInstanceVertexWeights ( unsigned long bEnable )
{
	static UFunction* pFnToggleInstanceVertexWeights = NULL;

	if ( ! pFnToggleInstanceVertexWeights )
		pFnToggleInstanceVertexWeights = (UFunction*) UObject::GObjObjects()->Data[ 9634 ];

	USkeletalMeshComponent_execToggleInstanceVertexWeights_Parms ToggleInstanceVertexWeights_Parms;
	ToggleInstanceVertexWeights_Parms.bEnable = bEnable;

	pFnToggleInstanceVertexWeights->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnToggleInstanceVertexWeights, &ToggleInstanceVertexWeights_Parms, NULL );

	pFnToggleInstanceVertexWeights->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateInstanceVertexWeightBones
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct TArray<struct FBonePair> BonePairs                      ( CPF_Parm | CPF_NeedCtorLink )

void USkeletalMeshComponent::UpdateInstanceVertexWeightBones ( struct TArray<struct FBonePair> BonePairs )
{
	static UFunction* pFnUpdateInstanceVertexWeightBones = NULL;

	if ( ! pFnUpdateInstanceVertexWeightBones )
		pFnUpdateInstanceVertexWeightBones = (UFunction*) UObject::GObjObjects()->Data[ 9631 ];

	USkeletalMeshComponent_execUpdateInstanceVertexWeightBones_Parms UpdateInstanceVertexWeightBones_Parms;
	memcpy ( &UpdateInstanceVertexWeightBones_Parms.BonePairs, &BonePairs, 0x10 );

	pFnUpdateInstanceVertexWeightBones->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateInstanceVertexWeightBones, &UpdateInstanceVertexWeightBones_Parms, NULL );

	pFnUpdateInstanceVertexWeightBones->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.FindInstanceVertexweightBonePair
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBonePair               Bones                          ( CPF_Parm )

int USkeletalMeshComponent::FindInstanceVertexweightBonePair ( struct FBonePair Bones )
{
	static UFunction* pFnFindInstanceVertexweightBonePair = NULL;

	if ( ! pFnFindInstanceVertexweightBonePair )
		pFnFindInstanceVertexweightBonePair = (UFunction*) UObject::GObjObjects()->Data[ 9625 ];

	USkeletalMeshComponent_execFindInstanceVertexweightBonePair_Parms FindInstanceVertexweightBonePair_Parms;
	memcpy ( &FindInstanceVertexweightBonePair_Parms.Bones, &Bones, 0x10 );

	pFnFindInstanceVertexweightBonePair->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindInstanceVertexweightBonePair, &FindInstanceVertexweightBonePair_Parms, NULL );

	pFnFindInstanceVertexweightBonePair->FunctionFlags |= 0x400;

	return FindInstanceVertexweightBonePair_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.RemoveInstanceVertexWeightBoneParented
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_Parm )

void USkeletalMeshComponent::RemoveInstanceVertexWeightBoneParented ( struct FName BoneName )
{
	static UFunction* pFnRemoveInstanceVertexWeightBoneParented = NULL;

	if ( ! pFnRemoveInstanceVertexWeightBoneParented )
		pFnRemoveInstanceVertexWeightBoneParented = (UFunction*) UObject::GObjObjects()->Data[ 9623 ];

	USkeletalMeshComponent_execRemoveInstanceVertexWeightBoneParented_Parms RemoveInstanceVertexWeightBoneParented_Parms;
	memcpy ( &RemoveInstanceVertexWeightBoneParented_Parms.BoneName, &BoneName, 0x8 );

	pFnRemoveInstanceVertexWeightBoneParented->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveInstanceVertexWeightBoneParented, &RemoveInstanceVertexWeightBoneParented_Parms, NULL );

	pFnRemoveInstanceVertexWeightBoneParented->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.AddInstanceVertexWeightBoneParented
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_Parm )
// unsigned long                  bPairWithParent                ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::AddInstanceVertexWeightBoneParented ( struct FName BoneName, unsigned long bPairWithParent )
{
	static UFunction* pFnAddInstanceVertexWeightBoneParented = NULL;

	if ( ! pFnAddInstanceVertexWeightBoneParented )
		pFnAddInstanceVertexWeightBoneParented = (UFunction*) UObject::GObjObjects()->Data[ 9620 ];

	USkeletalMeshComponent_execAddInstanceVertexWeightBoneParented_Parms AddInstanceVertexWeightBoneParented_Parms;
	memcpy ( &AddInstanceVertexWeightBoneParented_Parms.BoneName, &BoneName, 0x8 );
	AddInstanceVertexWeightBoneParented_Parms.bPairWithParent = bPairWithParent;

	pFnAddInstanceVertexWeightBoneParented->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddInstanceVertexWeightBoneParented, &AddInstanceVertexWeightBoneParented_Parms, NULL );

	pFnAddInstanceVertexWeightBoneParented->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.GetBonesWithinRadius
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Origin                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// int                            TraceFlags                     ( CPF_Parm )
// struct TArray<struct FName>    out_Bones                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USkeletalMeshComponent::GetBonesWithinRadius ( struct FVector Origin, float Radius, int TraceFlags, struct TArray<struct FName>* out_Bones )
{
	static UFunction* pFnGetBonesWithinRadius = NULL;

	if ( ! pFnGetBonesWithinRadius )
		pFnGetBonesWithinRadius = (UFunction*) UObject::GObjObjects()->Data[ 9613 ];

	USkeletalMeshComponent_execGetBonesWithinRadius_Parms GetBonesWithinRadius_Parms;
	memcpy ( &GetBonesWithinRadius_Parms.Origin, &Origin, 0xC );
	GetBonesWithinRadius_Parms.Radius = Radius;
	GetBonesWithinRadius_Parms.TraceFlags = TraceFlags;

	pFnGetBonesWithinRadius->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBonesWithinRadius, &GetBonesWithinRadius_Parms, NULL );

	pFnGetBonesWithinRadius->FunctionFlags |= 0x400;

	if ( out_Bones )
		memcpy ( out_Bones, &GetBonesWithinRadius_Parms.out_Bones, 0x10 );

	return GetBonesWithinRadius_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.UpdateAnimations
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::UpdateAnimations ( )
{
	static UFunction* pFnUpdateAnimations = NULL;

	if ( ! pFnUpdateAnimations )
		pFnUpdateAnimations = (UFunction*) UObject::GObjObjects()->Data[ 9612 ];

	USkeletalMeshComponent_execUpdateAnimations_Parms UpdateAnimations_Parms;

	pFnUpdateAnimations->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateAnimations, &UpdateAnimations_Parms, NULL );

	pFnUpdateAnimations->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.ForceSkelUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::ForceSkelUpdate ( )
{
	static UFunction* pFnForceSkelUpdate = NULL;

	if ( ! pFnForceSkelUpdate )
		pFnForceSkelUpdate = (UFunction*) UObject::GObjObjects()->Data[ 9611 ];

	USkeletalMeshComponent_execForceSkelUpdate_Parms ForceSkelUpdate_Parms;

	pFnForceSkelUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceSkelUpdate, &ForceSkelUpdate_Parms, NULL );

	pFnForceSkelUpdate->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateRBBonesFromSpaceBases
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bMoveUnfixedBodies             ( CPF_Parm )
// unsigned long                  bTeleport                      ( CPF_Parm )

void USkeletalMeshComponent::UpdateRBBonesFromSpaceBases ( unsigned long bMoveUnfixedBodies, unsigned long bTeleport )
{
	static UFunction* pFnUpdateRBBonesFromSpaceBases = NULL;

	if ( ! pFnUpdateRBBonesFromSpaceBases )
		pFnUpdateRBBonesFromSpaceBases = (UFunction*) UObject::GObjObjects()->Data[ 9608 ];

	USkeletalMeshComponent_execUpdateRBBonesFromSpaceBases_Parms UpdateRBBonesFromSpaceBases_Parms;
	UpdateRBBonesFromSpaceBases_Parms.bMoveUnfixedBodies = bMoveUnfixedBodies;
	UpdateRBBonesFromSpaceBases_Parms.bTeleport = bTeleport;

	pFnUpdateRBBonesFromSpaceBases->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateRBBonesFromSpaceBases, &UpdateRBBonesFromSpaceBases_Parms, NULL );

	pFnUpdateRBBonesFromSpaceBases->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetHasPhysicsAssetInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bHasInstance                   ( CPF_Parm )

void USkeletalMeshComponent::SetHasPhysicsAssetInstance ( unsigned long bHasInstance )
{
	static UFunction* pFnSetHasPhysicsAssetInstance = NULL;

	if ( ! pFnSetHasPhysicsAssetInstance )
		pFnSetHasPhysicsAssetInstance = (UFunction*) UObject::GObjObjects()->Data[ 9606 ];

	USkeletalMeshComponent_execSetHasPhysicsAssetInstance_Parms SetHasPhysicsAssetInstance_Parms;
	SetHasPhysicsAssetInstance_Parms.bHasInstance = bHasInstance;

	pFnSetHasPhysicsAssetInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHasPhysicsAssetInstance, &SetHasPhysicsAssetInstance_Parms, NULL );

	pFnSetHasPhysicsAssetInstance->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.FindBodyInstanceNamed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class URB_BodyInstance*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )

class URB_BodyInstance* USkeletalMeshComponent::FindBodyInstanceNamed ( struct FName BoneName )
{
	static UFunction* pFnFindBodyInstanceNamed = NULL;

	if ( ! pFnFindBodyInstanceNamed )
		pFnFindBodyInstanceNamed = (UFunction*) UObject::GObjObjects()->Data[ 9603 ];

	USkeletalMeshComponent_execFindBodyInstanceNamed_Parms FindBodyInstanceNamed_Parms;
	memcpy ( &FindBodyInstanceNamed_Parms.BoneName, &BoneName, 0x8 );

	pFnFindBodyInstanceNamed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindBodyInstanceNamed, &FindBodyInstanceNamed_Parms, NULL );

	pFnFindBodyInstanceNamed->FunctionFlags |= 0x400;

	return FindBodyInstanceNamed_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindConstraintBoneName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ConstraintIndex                ( CPF_Parm )

struct FName USkeletalMeshComponent::FindConstraintBoneName ( int ConstraintIndex )
{
	static UFunction* pFnFindConstraintBoneName = NULL;

	if ( ! pFnFindConstraintBoneName )
		pFnFindConstraintBoneName = (UFunction*) UObject::GObjObjects()->Data[ 9600 ];

	USkeletalMeshComponent_execFindConstraintBoneName_Parms FindConstraintBoneName_Parms;
	FindConstraintBoneName_Parms.ConstraintIndex = ConstraintIndex;

	pFnFindConstraintBoneName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindConstraintBoneName, &FindConstraintBoneName_Parms, NULL );

	pFnFindConstraintBoneName->FunctionFlags |= 0x400;

	return FindConstraintBoneName_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindConstraintIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ConstraintName                 ( CPF_Parm )

int USkeletalMeshComponent::FindConstraintIndex ( struct FName ConstraintName )
{
	static UFunction* pFnFindConstraintIndex = NULL;

	if ( ! pFnFindConstraintIndex )
		pFnFindConstraintIndex = (UFunction*) UObject::GObjObjects()->Data[ 9597 ];

	USkeletalMeshComponent_execFindConstraintIndex_Parms FindConstraintIndex_Parms;
	memcpy ( &FindConstraintIndex_Parms.ConstraintName, &ConstraintName, 0x8 );

	pFnFindConstraintIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindConstraintIndex, &FindConstraintIndex_Parms, NULL );

	pFnFindConstraintIndex->FunctionFlags |= 0x400;

	return FindConstraintIndex_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.InitMorphTargets
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::InitMorphTargets ( )
{
	static UFunction* pFnInitMorphTargets = NULL;

	if ( ! pFnInitMorphTargets )
		pFnInitMorphTargets = (UFunction*) UObject::GObjObjects()->Data[ 9596 ];

	USkeletalMeshComponent_execInitMorphTargets_Parms InitMorphTargets_Parms;

	pFnInitMorphTargets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitMorphTargets, &InitMorphTargets_Parms, NULL );

	pFnInitMorphTargets->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.InitSkelControls
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::InitSkelControls ( )
{
	static UFunction* pFnInitSkelControls = NULL;

	if ( ! pFnInitSkelControls )
		pFnInitSkelControls = (UFunction*) UObject::GObjObjects()->Data[ 9595 ];

	USkeletalMeshComponent_execInitSkelControls_Parms InitSkelControls_Parms;

	pFnInitSkelControls->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitSkelControls, &InitSkelControls_Parms, NULL );

	pFnInitSkelControls->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateParentBoneMap
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::UpdateParentBoneMap ( )
{
	static UFunction* pFnUpdateParentBoneMap = NULL;

	if ( ! pFnUpdateParentBoneMap )
		pFnUpdateParentBoneMap = (UFunction*) UObject::GObjObjects()->Data[ 9594 ];

	USkeletalMeshComponent_execUpdateParentBoneMap_Parms UpdateParentBoneMap_Parms;

	pFnUpdateParentBoneMap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateParentBoneMap, &UpdateParentBoneMap_Parms, NULL );

	pFnUpdateParentBoneMap->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetParentAnimComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  NewParentAnimComp              ( CPF_Parm | CPF_EditInline )

void USkeletalMeshComponent::SetParentAnimComponent ( class USkeletalMeshComponent* NewParentAnimComp )
{
	static UFunction* pFnSetParentAnimComponent = NULL;

	if ( ! pFnSetParentAnimComponent )
		pFnSetParentAnimComponent = (UFunction*) UObject::GObjObjects()->Data[ 9592 ];

	USkeletalMeshComponent_execSetParentAnimComponent_Parms SetParentAnimComponent_Parms;
	SetParentAnimComponent_Parms.NewParentAnimComp = NewParentAnimComp;

	pFnSetParentAnimComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetParentAnimComponent, &SetParentAnimComponent_Parms, NULL );

	pFnSetParentAnimComponent->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetAnimTreeTemplate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimTree*               NewTemplate                    ( CPF_Parm )

void USkeletalMeshComponent::SetAnimTreeTemplate ( class UAnimTree* NewTemplate )
{
	static UFunction* pFnSetAnimTreeTemplate = NULL;

	if ( ! pFnSetAnimTreeTemplate )
		pFnSetAnimTreeTemplate = (UFunction*) UObject::GObjObjects()->Data[ 9590 ];

	USkeletalMeshComponent_execSetAnimTreeTemplate_Parms SetAnimTreeTemplate_Parms;
	SetAnimTreeTemplate_Parms.NewTemplate = NewTemplate;

	pFnSetAnimTreeTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAnimTreeTemplate, &SetAnimTreeTemplate_Parms, NULL );

	pFnSetAnimTreeTemplate->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.GetClosestCollidingBoneLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TestLocation                   ( CPF_Parm )
// unsigned long                  bCheckZeroExtent               ( CPF_Parm )
// unsigned long                  bCheckNonZeroExtent            ( CPF_Parm )

struct FVector USkeletalMeshComponent::GetClosestCollidingBoneLocation ( struct FVector TestLocation, unsigned long bCheckZeroExtent, unsigned long bCheckNonZeroExtent )
{
	static UFunction* pFnGetClosestCollidingBoneLocation = NULL;

	if ( ! pFnGetClosestCollidingBoneLocation )
		pFnGetClosestCollidingBoneLocation = (UFunction*) UObject::GObjObjects()->Data[ 9585 ];

	USkeletalMeshComponent_execGetClosestCollidingBoneLocation_Parms GetClosestCollidingBoneLocation_Parms;
	memcpy ( &GetClosestCollidingBoneLocation_Parms.TestLocation, &TestLocation, 0xC );
	GetClosestCollidingBoneLocation_Parms.bCheckZeroExtent = bCheckZeroExtent;
	GetClosestCollidingBoneLocation_Parms.bCheckNonZeroExtent = bCheckNonZeroExtent;

	pFnGetClosestCollidingBoneLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClosestCollidingBoneLocation, &GetClosestCollidingBoneLocation_Parms, NULL );

	pFnGetClosestCollidingBoneLocation->FunctionFlags |= 0x400;

	return GetClosestCollidingBoneLocation_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.BioFindClosestBones
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 vTestLocation                  ( CPF_Parm )
// float                          fRadius                        ( CPF_Parm )
// unsigned long                  bOutsideRadius                 ( CPF_OptionalParm | CPF_Parm )
// struct TArray<struct FName>    BoneNames                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USkeletalMeshComponent::BioFindClosestBones ( struct FVector vTestLocation, float fRadius, unsigned long bOutsideRadius, struct TArray<struct FName>* BoneNames )
{
	static UFunction* pFnBioFindClosestBones = NULL;

	if ( ! pFnBioFindClosestBones )
		pFnBioFindClosestBones = (UFunction*) UObject::GObjObjects()->Data[ 9579 ];

	USkeletalMeshComponent_execBioFindClosestBones_Parms BioFindClosestBones_Parms;
	memcpy ( &BioFindClosestBones_Parms.vTestLocation, &vTestLocation, 0xC );
	BioFindClosestBones_Parms.fRadius = fRadius;
	BioFindClosestBones_Parms.bOutsideRadius = bOutsideRadius;

	pFnBioFindClosestBones->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioFindClosestBones, &BioFindClosestBones_Parms, NULL );

	pFnBioFindClosestBones->FunctionFlags |= 0x400;

	if ( BoneNames )
		memcpy ( BoneNames, &BioFindClosestBones_Parms.BoneNames, 0x10 );
};

// Function Engine.SkeletalMeshComponent.FindClosestBone
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TestLocation                   ( CPF_Parm )
// float                          IgnoreScale                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 BoneLocation                   ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

struct FName USkeletalMeshComponent::FindClosestBone ( struct FVector TestLocation, float IgnoreScale, struct FVector* BoneLocation )
{
	static UFunction* pFnFindClosestBone = NULL;

	if ( ! pFnFindClosestBone )
		pFnFindClosestBone = (UFunction*) UObject::GObjObjects()->Data[ 9574 ];

	USkeletalMeshComponent_execFindClosestBone_Parms FindClosestBone_Parms;
	memcpy ( &FindClosestBone_Parms.TestLocation, &TestLocation, 0xC );
	FindClosestBone_Parms.IgnoreScale = IgnoreScale;

	pFnFindClosestBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindClosestBone, &FindClosestBone_Parms, NULL );

	pFnFindClosestBone->FunctionFlags |= 0x400;

	if ( BoneLocation )
		memcpy ( BoneLocation, &FindClosestBone_Parms.BoneLocation, 0xC );

	return FindClosestBone_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.TransformFromBoneSpace
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_Parm )
// struct FVector                 InPosition                     ( CPF_Parm )
// struct FRotator                InRotation                     ( CPF_Parm )
// struct FVector                 OutPosition                    ( CPF_Parm | CPF_OutParm )
// struct FRotator                OutRotation                    ( CPF_Parm | CPF_OutParm )

void USkeletalMeshComponent::TransformFromBoneSpace ( struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector* OutPosition, struct FRotator* OutRotation )
{
	static UFunction* pFnTransformFromBoneSpace = NULL;

	if ( ! pFnTransformFromBoneSpace )
		pFnTransformFromBoneSpace = (UFunction*) UObject::GObjObjects()->Data[ 9568 ];

	USkeletalMeshComponent_execTransformFromBoneSpace_Parms TransformFromBoneSpace_Parms;
	memcpy ( &TransformFromBoneSpace_Parms.BoneName, &BoneName, 0x8 );
	memcpy ( &TransformFromBoneSpace_Parms.InPosition, &InPosition, 0xC );
	memcpy ( &TransformFromBoneSpace_Parms.InRotation, &InRotation, 0xC );

	pFnTransformFromBoneSpace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTransformFromBoneSpace, &TransformFromBoneSpace_Parms, NULL );

	pFnTransformFromBoneSpace->FunctionFlags |= 0x400;

	if ( OutPosition )
		memcpy ( OutPosition, &TransformFromBoneSpace_Parms.OutPosition, 0xC );

	if ( OutRotation )
		memcpy ( OutRotation, &TransformFromBoneSpace_Parms.OutRotation, 0xC );
};

// Function Engine.SkeletalMeshComponent.TransformToBoneSpace
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_Parm )
// struct FVector                 InPosition                     ( CPF_Parm )
// struct FRotator                InRotation                     ( CPF_Parm )
// struct FVector                 OutPosition                    ( CPF_Parm | CPF_OutParm )
// struct FRotator                OutRotation                    ( CPF_Parm | CPF_OutParm )

void USkeletalMeshComponent::TransformToBoneSpace ( struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector* OutPosition, struct FRotator* OutRotation )
{
	static UFunction* pFnTransformToBoneSpace = NULL;

	if ( ! pFnTransformToBoneSpace )
		pFnTransformToBoneSpace = (UFunction*) UObject::GObjObjects()->Data[ 9562 ];

	USkeletalMeshComponent_execTransformToBoneSpace_Parms TransformToBoneSpace_Parms;
	memcpy ( &TransformToBoneSpace_Parms.BoneName, &BoneName, 0x8 );
	memcpy ( &TransformToBoneSpace_Parms.InPosition, &InPosition, 0xC );
	memcpy ( &TransformToBoneSpace_Parms.InRotation, &InRotation, 0xC );

	pFnTransformToBoneSpace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTransformToBoneSpace, &TransformToBoneSpace_Parms, NULL );

	pFnTransformToBoneSpace->FunctionFlags |= 0x400;

	if ( OutPosition )
		memcpy ( OutPosition, &TransformToBoneSpace_Parms.OutPosition, 0xC );

	if ( OutRotation )
		memcpy ( OutRotation, &TransformToBoneSpace_Parms.OutRotation, 0xC );
};

// Function Engine.SkeletalMeshComponent.GetBoneAxis
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )
// unsigned char                  Axis                           ( CPF_Parm )

struct FVector USkeletalMeshComponent::GetBoneAxis ( struct FName BoneName, unsigned char Axis )
{
	static UFunction* pFnGetBoneAxis = NULL;

	if ( ! pFnGetBoneAxis )
		pFnGetBoneAxis = (UFunction*) UObject::GObjObjects()->Data[ 9558 ];

	USkeletalMeshComponent_execGetBoneAxis_Parms GetBoneAxis_Parms;
	memcpy ( &GetBoneAxis_Parms.BoneName, &BoneName, 0x8 );
	GetBoneAxis_Parms.Axis = Axis;

	pFnGetBoneAxis->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneAxis, &GetBoneAxis_Parms, NULL );

	pFnGetBoneAxis->FunctionFlags |= 0x400;

	return GetBoneAxis_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetRefPosePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BoneIndex                      ( CPF_Parm )

struct FVector USkeletalMeshComponent::GetRefPosePosition ( int BoneIndex )
{
	static UFunction* pFnGetRefPosePosition = NULL;

	if ( ! pFnGetRefPosePosition )
		pFnGetRefPosePosition = (UFunction*) UObject::GObjObjects()->Data[ 9555 ];

	USkeletalMeshComponent_execGetRefPosePosition_Parms GetRefPosePosition_Parms;
	GetRefPosePosition_Parms.BoneIndex = BoneIndex;

	pFnGetRefPosePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRefPosePosition, &GetRefPosePosition_Parms, NULL );

	pFnGetRefPosePosition->FunctionFlags |= 0x400;

	return GetRefPosePosition_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.BoneIsChildOf
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )
// struct FName                   ParentBoneName                 ( CPF_Parm )

bool USkeletalMeshComponent::BoneIsChildOf ( struct FName BoneName, struct FName ParentBoneName )
{
	static UFunction* pFnBoneIsChildOf = NULL;

	if ( ! pFnBoneIsChildOf )
		pFnBoneIsChildOf = (UFunction*) UObject::GObjObjects()->Data[ 9551 ];

	USkeletalMeshComponent_execBoneIsChildOf_Parms BoneIsChildOf_Parms;
	memcpy ( &BoneIsChildOf_Parms.BoneName, &BoneName, 0x8 );
	memcpy ( &BoneIsChildOf_Parms.ParentBoneName, &ParentBoneName, 0x8 );

	pFnBoneIsChildOf->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBoneIsChildOf, &BoneIsChildOf_Parms, NULL );

	pFnBoneIsChildOf->FunctionFlags |= 0x400;

	return BoneIsChildOf_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneNames
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct TArray<struct FName>    BoneNames                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USkeletalMeshComponent::GetBoneNames ( struct TArray<struct FName>* BoneNames )
{
	static UFunction* pFnGetBoneNames = NULL;

	if ( ! pFnGetBoneNames )
		pFnGetBoneNames = (UFunction*) UObject::GObjObjects()->Data[ 9548 ];

	USkeletalMeshComponent_execGetBoneNames_Parms GetBoneNames_Parms;

	pFnGetBoneNames->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneNames, &GetBoneNames_Parms, NULL );

	pFnGetBoneNames->FunctionFlags |= 0x400;

	if ( BoneNames )
		memcpy ( BoneNames, &GetBoneNames_Parms.BoneNames, 0x10 );
};

// Function Engine.SkeletalMeshComponent.GetParentBoneIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BoneIndex                      ( CPF_Parm )

int USkeletalMeshComponent::GetParentBoneIndex ( int BoneIndex )
{
	static UFunction* pFnGetParentBoneIndex = NULL;

	if ( ! pFnGetParentBoneIndex )
		pFnGetParentBoneIndex = (UFunction*) UObject::GObjObjects()->Data[ 9545 ];

	USkeletalMeshComponent_execGetParentBoneIndex_Parms GetParentBoneIndex_Parms;
	GetParentBoneIndex_Parms.BoneIndex = BoneIndex;

	pFnGetParentBoneIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetParentBoneIndex, &GetParentBoneIndex_Parms, NULL );

	pFnGetParentBoneIndex->FunctionFlags |= 0x400;

	return GetParentBoneIndex_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetParentBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )

struct FName USkeletalMeshComponent::GetParentBone ( struct FName BoneName )
{
	static UFunction* pFnGetParentBone = NULL;

	if ( ! pFnGetParentBone )
		pFnGetParentBone = (UFunction*) UObject::GObjObjects()->Data[ 9542 ];

	USkeletalMeshComponent_execGetParentBone_Parms GetParentBone_Parms;
	memcpy ( &GetParentBone_Parms.BoneName, &BoneName, 0x8 );

	pFnGetParentBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetParentBone, &GetParentBone_Parms, NULL );

	pFnGetParentBone->FunctionFlags |= 0x400;

	return GetParentBone_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneMatrix
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BoneIndex                      ( CPF_Parm )

struct FMatrix USkeletalMeshComponent::GetBoneMatrix ( int BoneIndex )
{
	static UFunction* pFnGetBoneMatrix = NULL;

	if ( ! pFnGetBoneMatrix )
		pFnGetBoneMatrix = (UFunction*) UObject::GObjObjects()->Data[ 9539 ];

	USkeletalMeshComponent_execGetBoneMatrix_Parms GetBoneMatrix_Parms;
	GetBoneMatrix_Parms.BoneIndex = BoneIndex;

	pFnGetBoneMatrix->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneMatrix, &GetBoneMatrix_Parms, NULL );

	pFnGetBoneMatrix->FunctionFlags |= 0x400;

	return GetBoneMatrix_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BoneIndex                      ( CPF_Parm )

struct FName USkeletalMeshComponent::GetBoneName ( int BoneIndex )
{
	static UFunction* pFnGetBoneName = NULL;

	if ( ! pFnGetBoneName )
		pFnGetBoneName = (UFunction*) UObject::GObjObjects()->Data[ 9536 ];

	USkeletalMeshComponent_execGetBoneName_Parms GetBoneName_Parms;
	GetBoneName_Parms.BoneIndex = BoneIndex;

	pFnGetBoneName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneName, &GetBoneName_Parms, NULL );

	pFnGetBoneName->FunctionFlags |= 0x400;

	return GetBoneName_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.MatchRefBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )

int USkeletalMeshComponent::MatchRefBone ( struct FName BoneName )
{
	static UFunction* pFnMatchRefBone = NULL;

	if ( ! pFnMatchRefBone )
		pFnMatchRefBone = (UFunction*) UObject::GObjObjects()->Data[ 9533 ];

	USkeletalMeshComponent_execMatchRefBone_Parms MatchRefBone_Parms;
	memcpy ( &MatchRefBone_Parms.BoneName, &BoneName, 0x8 );

	pFnMatchRefBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMatchRefBone, &MatchRefBone_Parms, NULL );

	pFnMatchRefBone->FunctionFlags |= 0x400;

	return MatchRefBone_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneLocation
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )
// int                            Space                          ( CPF_OptionalParm | CPF_Parm )

struct FVector USkeletalMeshComponent::GetBoneLocation ( struct FName BoneName, int Space )
{
	static UFunction* pFnGetBoneLocation = NULL;

	if ( ! pFnGetBoneLocation )
		pFnGetBoneLocation = (UFunction*) UObject::GObjObjects()->Data[ 9529 ];

	USkeletalMeshComponent_execGetBoneLocation_Parms GetBoneLocation_Parms;
	memcpy ( &GetBoneLocation_Parms.BoneName, &BoneName, 0x8 );
	GetBoneLocation_Parms.Space = Space;

	pFnGetBoneLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneLocation, &GetBoneLocation_Parms, NULL );

	pFnGetBoneLocation->FunctionFlags |= 0x400;

	return GetBoneLocation_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneQuaternion
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FQuat                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )
// int                            Space                          ( CPF_OptionalParm | CPF_Parm )

struct FQuat USkeletalMeshComponent::GetBoneQuaternion ( struct FName BoneName, int Space )
{
	static UFunction* pFnGetBoneQuaternion = NULL;

	if ( ! pFnGetBoneQuaternion )
		pFnGetBoneQuaternion = (UFunction*) UObject::GObjObjects()->Data[ 9525 ];

	USkeletalMeshComponent_execGetBoneQuaternion_Parms GetBoneQuaternion_Parms;
	memcpy ( &GetBoneQuaternion_Parms.BoneName, &BoneName, 0x8 );
	GetBoneQuaternion_Parms.Space = Space;

	pFnGetBoneQuaternion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneQuaternion, &GetBoneQuaternion_Parms, NULL );

	pFnGetBoneQuaternion->FunctionFlags |= 0x400;

	return GetBoneQuaternion_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindMorphNode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMorphNodeBase*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InNodeName                     ( CPF_Parm )

class UMorphNodeBase* USkeletalMeshComponent::FindMorphNode ( struct FName InNodeName )
{
	static UFunction* pFnFindMorphNode = NULL;

	if ( ! pFnFindMorphNode )
		pFnFindMorphNode = (UFunction*) UObject::GObjObjects()->Data[ 9522 ];

	USkeletalMeshComponent_execFindMorphNode_Parms FindMorphNode_Parms;
	memcpy ( &FindMorphNode_Parms.InNodeName, &InNodeName, 0x8 );

	pFnFindMorphNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindMorphNode, &FindMorphNode_Parms, NULL );

	pFnFindMorphNode->FunctionFlags |= 0x400;

	return FindMorphNode_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindSkelControl
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkelControlBase*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InControlName                  ( CPF_Parm )

class USkelControlBase* USkeletalMeshComponent::FindSkelControl ( struct FName InControlName )
{
	static UFunction* pFnFindSkelControl = NULL;

	if ( ! pFnFindSkelControl )
		pFnFindSkelControl = (UFunction*) UObject::GObjObjects()->Data[ 9519 ];

	USkeletalMeshComponent_execFindSkelControl_Parms FindSkelControl_Parms;
	memcpy ( &FindSkelControl_Parms.InControlName, &InControlName, 0x8 );

	pFnFindSkelControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSkelControl, &FindSkelControl_Parms, NULL );

	pFnFindSkelControl->FunctionFlags |= 0x400;

	return FindSkelControl_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.AllAnimNodes
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct TArray<class UAnimNode*> ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class UClass*                  BaseClass                      ( CPF_Parm )

struct TArray<class UAnimNode*> USkeletalMeshComponent::AllAnimNodes ( class UClass* BaseClass )
{
	static UFunction* pFnAllAnimNodes = NULL;

	if ( ! pFnAllAnimNodes )
		pFnAllAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 9515 ];

	USkeletalMeshComponent_execAllAnimNodes_Parms AllAnimNodes_Parms;
	AllAnimNodes_Parms.BaseClass = BaseClass;

	pFnAllAnimNodes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllAnimNodes, &AllAnimNodes_Parms, NULL );

	pFnAllAnimNodes->FunctionFlags |= 0x400;

	return AllAnimNodes_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindAnimNode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNode*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InNodeName                     ( CPF_Parm )

class UAnimNode* USkeletalMeshComponent::FindAnimNode ( struct FName InNodeName )
{
	static UFunction* pFnFindAnimNode = NULL;

	if ( ! pFnFindAnimNode )
		pFnFindAnimNode = (UFunction*) UObject::GObjObjects()->Data[ 9512 ];

	USkeletalMeshComponent_execFindAnimNode_Parms FindAnimNode_Parms;
	memcpy ( &FindAnimNode_Parms.InNodeName, &InNodeName, 0x8 );

	pFnFindAnimNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindAnimNode, &FindAnimNode_Parms, NULL );

	pFnFindAnimNode->FunctionFlags |= 0x400;

	return FindAnimNode_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindMorphTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMorphTarget*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   MorphTargetName                ( CPF_Parm )

class UMorphTarget* USkeletalMeshComponent::FindMorphTarget ( struct FName MorphTargetName )
{
	static UFunction* pFnFindMorphTarget = NULL;

	if ( ! pFnFindMorphTarget )
		pFnFindMorphTarget = (UFunction*) UObject::GObjObjects()->Data[ 9509 ];

	USkeletalMeshComponent_execFindMorphTarget_Parms FindMorphTarget_Parms;
	memcpy ( &FindMorphTarget_Parms.MorphTargetName, &MorphTargetName, 0x8 );

	pFnFindMorphTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindMorphTarget, &FindMorphTarget_Parms, NULL );

	pFnFindMorphTarget->FunctionFlags |= 0x400;

	return FindMorphTarget_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetAnimLength
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimSeqName                    ( CPF_Parm )

float USkeletalMeshComponent::GetAnimLength ( struct FName AnimSeqName )
{
	static UFunction* pFnGetAnimLength = NULL;

	if ( ! pFnGetAnimLength )
		pFnGetAnimLength = (UFunction*) UObject::GObjObjects()->Data[ 9504 ];

	USkeletalMeshComponent_execGetAnimLength_Parms GetAnimLength_Parms;
	memcpy ( &GetAnimLength_Parms.AnimSeqName, &AnimSeqName, 0x8 );

	this->ProcessEvent ( pFnGetAnimLength, &GetAnimLength_Parms, NULL );

	return GetAnimLength_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetAnimRateByDuration
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimSeqName                    ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )

float USkeletalMeshComponent::GetAnimRateByDuration ( struct FName AnimSeqName, float Duration )
{
	static UFunction* pFnGetAnimRateByDuration = NULL;

	if ( ! pFnGetAnimRateByDuration )
		pFnGetAnimRateByDuration = (UFunction*) UObject::GObjObjects()->Data[ 9498 ];

	USkeletalMeshComponent_execGetAnimRateByDuration_Parms GetAnimRateByDuration_Parms;
	memcpy ( &GetAnimRateByDuration_Parms.AnimSeqName, &AnimSeqName, 0x8 );
	GetAnimRateByDuration_Parms.Duration = Duration;

	this->ProcessEvent ( pFnGetAnimRateByDuration, &GetAnimRateByDuration_Parms, NULL );

	return GetAnimRateByDuration_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.RestoreSavedAnimSets
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::RestoreSavedAnimSets ( )
{
	static UFunction* pFnRestoreSavedAnimSets = NULL;

	if ( ! pFnRestoreSavedAnimSets )
		pFnRestoreSavedAnimSets = (UFunction*) UObject::GObjObjects()->Data[ 9497 ];

	USkeletalMeshComponent_execRestoreSavedAnimSets_Parms RestoreSavedAnimSets_Parms;

	pFnRestoreSavedAnimSets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRestoreSavedAnimSets, &RestoreSavedAnimSets_Parms, NULL );

	pFnRestoreSavedAnimSets->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SaveAnimSets
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::SaveAnimSets ( )
{
	static UFunction* pFnSaveAnimSets = NULL;

	if ( ! pFnSaveAnimSets )
		pFnSaveAnimSets = (UFunction*) UObject::GObjObjects()->Data[ 9496 ];

	USkeletalMeshComponent_execSaveAnimSets_Parms SaveAnimSets_Parms;

	pFnSaveAnimSets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveAnimSets, &SaveAnimSets_Parms, NULL );

	pFnSaveAnimSets->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.BioGetDetails
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USkeletalMeshComponent::BioGetDetails ( )
{
	static UFunction* pFnBioGetDetails = NULL;

	if ( ! pFnBioGetDetails )
		pFnBioGetDetails = (UFunction*) UObject::GObjObjects()->Data[ 9494 ];

	USkeletalMeshComponent_execBioGetDetails_Parms BioGetDetails_Parms;

	pFnBioGetDetails->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioGetDetails, &BioGetDetails_Parms, NULL );

	pFnBioGetDetails->FunctionFlags |= 0x400;

	return BioGetDetails_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindAnimSequence
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimSequence*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimSeqName                    ( CPF_Parm )

class UAnimSequence* USkeletalMeshComponent::FindAnimSequence ( struct FName AnimSeqName )
{
	static UFunction* pFnFindAnimSequence = NULL;

	if ( ! pFnFindAnimSequence )
		pFnFindAnimSequence = (UFunction*) UObject::GObjObjects()->Data[ 9491 ];

	USkeletalMeshComponent_execFindAnimSequence_Parms FindAnimSequence_Parms;
	memcpy ( &FindAnimSequence_Parms.AnimSeqName, &AnimSeqName, 0x8 );

	pFnFindAnimSequence->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindAnimSequence, &FindAnimSequence_Parms, NULL );

	pFnFindAnimSequence->FunctionFlags |= 0x400;

	return FindAnimSequence_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.WakeSoftBody
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::WakeSoftBody ( )
{
	static UFunction* pFnWakeSoftBody = NULL;

	if ( ! pFnWakeSoftBody )
		pFnWakeSoftBody = (UFunction*) UObject::GObjObjects()->Data[ 9490 ];

	USkeletalMeshComponent_execWakeSoftBody_Parms WakeSoftBody_Parms;

	pFnWakeSoftBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWakeSoftBody, &WakeSoftBody_Parms, NULL );

	pFnWakeSoftBody->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetSoftBodyFrozen
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFrozen                     ( CPF_Parm )

void USkeletalMeshComponent::SetSoftBodyFrozen ( unsigned long bNewFrozen )
{
	static UFunction* pFnSetSoftBodyFrozen = NULL;

	if ( ! pFnSetSoftBodyFrozen )
		pFnSetSoftBodyFrozen = (UFunction*) UObject::GObjObjects()->Data[ 9488 ];

	USkeletalMeshComponent_execSetSoftBodyFrozen_Parms SetSoftBodyFrozen_Parms;
	SetSoftBodyFrozen_Parms.bNewFrozen = bNewFrozen;

	pFnSetSoftBodyFrozen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSoftBodyFrozen, &SetSoftBodyFrozen_Parms, NULL );

	pFnSetSoftBodyFrozen->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateSoftBodyParams
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::UpdateSoftBodyParams ( )
{
	static UFunction* pFnUpdateSoftBodyParams = NULL;

	if ( ! pFnUpdateSoftBodyParams )
		pFnUpdateSoftBodyParams = (UFunction*) UObject::GObjObjects()->Data[ 9487 ];

	USkeletalMeshComponent_execUpdateSoftBodyParams_Parms UpdateSoftBodyParams_Parms;

	pFnUpdateSoftBodyParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSoftBodyParams, &UpdateSoftBodyParams_Parms, NULL );

	pFnUpdateSoftBodyParams->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothValidBounds
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ClothValidBoundsMin            ( CPF_Parm )
// struct FVector                 ClothValidBoundsMax            ( CPF_Parm )

void USkeletalMeshComponent::SetClothValidBounds ( struct FVector ClothValidBoundsMin, struct FVector ClothValidBoundsMax )
{
	static UFunction* pFnSetClothValidBounds = NULL;

	if ( ! pFnSetClothValidBounds )
		pFnSetClothValidBounds = (UFunction*) UObject::GObjObjects()->Data[ 9484 ];

	USkeletalMeshComponent_execSetClothValidBounds_Parms SetClothValidBounds_Parms;
	memcpy ( &SetClothValidBounds_Parms.ClothValidBoundsMin, &ClothValidBoundsMin, 0xC );
	memcpy ( &SetClothValidBounds_Parms.ClothValidBoundsMax, &ClothValidBoundsMax, 0xC );

	pFnSetClothValidBounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothValidBounds, &SetClothValidBounds_Parms, NULL );

	pFnSetClothValidBounds->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.EnableClothValidBounds
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  IfEnableClothValidBounds       ( CPF_Parm )

void USkeletalMeshComponent::EnableClothValidBounds ( unsigned long IfEnableClothValidBounds )
{
	static UFunction* pFnEnableClothValidBounds = NULL;

	if ( ! pFnEnableClothValidBounds )
		pFnEnableClothValidBounds = (UFunction*) UObject::GObjObjects()->Data[ 9482 ];

	USkeletalMeshComponent_execEnableClothValidBounds_Parms EnableClothValidBounds_Parms;
	EnableClothValidBounds_Parms.IfEnableClothValidBounds = IfEnableClothValidBounds;

	pFnEnableClothValidBounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableClothValidBounds, &EnableClothValidBounds_Parms, NULL );

	pFnEnableClothValidBounds->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.AttachClothToCollidingShapes
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  AttatchTwoWay                  ( CPF_Parm )
// unsigned long                  AttachTearable                 ( CPF_Parm )

void USkeletalMeshComponent::AttachClothToCollidingShapes ( unsigned long AttatchTwoWay, unsigned long AttachTearable )
{
	static UFunction* pFnAttachClothToCollidingShapes = NULL;

	if ( ! pFnAttachClothToCollidingShapes )
		pFnAttachClothToCollidingShapes = (UFunction*) UObject::GObjObjects()->Data[ 9479 ];

	USkeletalMeshComponent_execAttachClothToCollidingShapes_Parms AttachClothToCollidingShapes_Parms;
	AttachClothToCollidingShapes_Parms.AttatchTwoWay = AttatchTwoWay;
	AttachClothToCollidingShapes_Parms.AttachTearable = AttachTearable;

	pFnAttachClothToCollidingShapes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachClothToCollidingShapes, &AttachClothToCollidingShapes_Parms, NULL );

	pFnAttachClothToCollidingShapes->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothVelocity
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 VelocityOffSet                 ( CPF_Parm )

void USkeletalMeshComponent::SetClothVelocity ( struct FVector VelocityOffSet )
{
	static UFunction* pFnSetClothVelocity = NULL;

	if ( ! pFnSetClothVelocity )
		pFnSetClothVelocity = (UFunction*) UObject::GObjObjects()->Data[ 9477 ];

	USkeletalMeshComponent_execSetClothVelocity_Parms SetClothVelocity_Parms;
	memcpy ( &SetClothVelocity_Parms.VelocityOffSet, &VelocityOffSet, 0xC );

	pFnSetClothVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothVelocity, &SetClothVelocity_Parms, NULL );

	pFnSetClothVelocity->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothPosition
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ClothOffSet                    ( CPF_Parm )

void USkeletalMeshComponent::SetClothPosition ( struct FVector ClothOffSet )
{
	static UFunction* pFnSetClothPosition = NULL;

	if ( ! pFnSetClothPosition )
		pFnSetClothPosition = (UFunction*) UObject::GObjObjects()->Data[ 9475 ];

	USkeletalMeshComponent_execSetClothPosition_Parms SetClothPosition_Parms;
	memcpy ( &SetClothPosition_Parms.ClothOffSet, &ClothOffSet, 0xC );

	pFnSetClothPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothPosition, &SetClothPosition_Parms, NULL );

	pFnSetClothPosition->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothSleep
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  IfClothSleep                   ( CPF_Parm )

void USkeletalMeshComponent::SetClothSleep ( unsigned long IfClothSleep )
{
	static UFunction* pFnSetClothSleep = NULL;

	if ( ! pFnSetClothSleep )
		pFnSetClothSleep = (UFunction*) UObject::GObjObjects()->Data[ 9473 ];

	USkeletalMeshComponent_execSetClothSleep_Parms SetClothSleep_Parms;
	SetClothSleep_Parms.IfClothSleep = IfClothSleep;

	pFnSetClothSleep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothSleep, &SetClothSleep_Parms, NULL );

	pFnSetClothSleep->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothThickness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothThickness                 ( CPF_Parm )

void USkeletalMeshComponent::SetClothThickness ( float ClothThickness )
{
	static UFunction* pFnSetClothThickness = NULL;

	if ( ! pFnSetClothThickness )
		pFnSetClothThickness = (UFunction*) UObject::GObjObjects()->Data[ 9471 ];

	USkeletalMeshComponent_execSetClothThickness_Parms SetClothThickness_Parms;
	SetClothThickness_Parms.ClothThickness = ClothThickness;

	pFnSetClothThickness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothThickness, &SetClothThickness_Parms, NULL );

	pFnSetClothThickness->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothTearFactor
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothTearFactor                ( CPF_Parm )

void USkeletalMeshComponent::SetClothTearFactor ( float ClothTearFactor )
{
	static UFunction* pFnSetClothTearFactor = NULL;

	if ( ! pFnSetClothTearFactor )
		pFnSetClothTearFactor = (UFunction*) UObject::GObjObjects()->Data[ 9469 ];

	USkeletalMeshComponent_execSetClothTearFactor_Parms SetClothTearFactor_Parms;
	SetClothTearFactor_Parms.ClothTearFactor = ClothTearFactor;

	pFnSetClothTearFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothTearFactor, &SetClothTearFactor_Parms, NULL );

	pFnSetClothTearFactor->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothStretchingStiffness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothStretchingStiffness       ( CPF_Parm )

void USkeletalMeshComponent::SetClothStretchingStiffness ( float ClothStretchingStiffness )
{
	static UFunction* pFnSetClothStretchingStiffness = NULL;

	if ( ! pFnSetClothStretchingStiffness )
		pFnSetClothStretchingStiffness = (UFunction*) UObject::GObjObjects()->Data[ 9467 ];

	USkeletalMeshComponent_execSetClothStretchingStiffness_Parms SetClothStretchingStiffness_Parms;
	SetClothStretchingStiffness_Parms.ClothStretchingStiffness = ClothStretchingStiffness;

	pFnSetClothStretchingStiffness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothStretchingStiffness, &SetClothStretchingStiffness_Parms, NULL );

	pFnSetClothStretchingStiffness->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothSolverIterations
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ClothSolverIterations          ( CPF_Parm )

void USkeletalMeshComponent::SetClothSolverIterations ( int ClothSolverIterations )
{
	static UFunction* pFnSetClothSolverIterations = NULL;

	if ( ! pFnSetClothSolverIterations )
		pFnSetClothSolverIterations = (UFunction*) UObject::GObjObjects()->Data[ 9465 ];

	USkeletalMeshComponent_execSetClothSolverIterations_Parms SetClothSolverIterations_Parms;
	SetClothSolverIterations_Parms.ClothSolverIterations = ClothSolverIterations;

	pFnSetClothSolverIterations->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothSolverIterations, &SetClothSolverIterations_Parms, NULL );

	pFnSetClothSolverIterations->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothSleepLinearVelocity
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothSleepLinearVelocity       ( CPF_Parm )

void USkeletalMeshComponent::SetClothSleepLinearVelocity ( float ClothSleepLinearVelocity )
{
	static UFunction* pFnSetClothSleepLinearVelocity = NULL;

	if ( ! pFnSetClothSleepLinearVelocity )
		pFnSetClothSleepLinearVelocity = (UFunction*) UObject::GObjObjects()->Data[ 9463 ];

	USkeletalMeshComponent_execSetClothSleepLinearVelocity_Parms SetClothSleepLinearVelocity_Parms;
	SetClothSleepLinearVelocity_Parms.ClothSleepLinearVelocity = ClothSleepLinearVelocity;

	pFnSetClothSleepLinearVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothSleepLinearVelocity, &SetClothSleepLinearVelocity_Parms, NULL );

	pFnSetClothSleepLinearVelocity->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothPressure
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothPressure                  ( CPF_Parm )

void USkeletalMeshComponent::SetClothPressure ( float ClothPressure )
{
	static UFunction* pFnSetClothPressure = NULL;

	if ( ! pFnSetClothPressure )
		pFnSetClothPressure = (UFunction*) UObject::GObjObjects()->Data[ 9461 ];

	USkeletalMeshComponent_execSetClothPressure_Parms SetClothPressure_Parms;
	SetClothPressure_Parms.ClothPressure = ClothPressure;

	pFnSetClothPressure->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothPressure, &SetClothPressure_Parms, NULL );

	pFnSetClothPressure->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothFriction
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothFriction                  ( CPF_Parm )

void USkeletalMeshComponent::SetClothFriction ( float ClothFriction )
{
	static UFunction* pFnSetClothFriction = NULL;

	if ( ! pFnSetClothFriction )
		pFnSetClothFriction = (UFunction*) UObject::GObjObjects()->Data[ 9459 ];

	USkeletalMeshComponent_execSetClothFriction_Parms SetClothFriction_Parms;
	SetClothFriction_Parms.ClothFriction = ClothFriction;

	pFnSetClothFriction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothFriction, &SetClothFriction_Parms, NULL );

	pFnSetClothFriction->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothFlags
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ClothFlags                     ( CPF_Parm )

void USkeletalMeshComponent::SetClothFlags ( int ClothFlags )
{
	static UFunction* pFnSetClothFlags = NULL;

	if ( ! pFnSetClothFlags )
		pFnSetClothFlags = (UFunction*) UObject::GObjObjects()->Data[ 9457 ];

	USkeletalMeshComponent_execSetClothFlags_Parms SetClothFlags_Parms;
	SetClothFlags_Parms.ClothFlags = ClothFlags;

	pFnSetClothFlags->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothFlags, &SetClothFlags_Parms, NULL );

	pFnSetClothFlags->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothDampingCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothDampingCoefficient        ( CPF_Parm )

void USkeletalMeshComponent::SetClothDampingCoefficient ( float ClothDampingCoefficient )
{
	static UFunction* pFnSetClothDampingCoefficient = NULL;

	if ( ! pFnSetClothDampingCoefficient )
		pFnSetClothDampingCoefficient = (UFunction*) UObject::GObjObjects()->Data[ 9455 ];

	USkeletalMeshComponent_execSetClothDampingCoefficient_Parms SetClothDampingCoefficient_Parms;
	SetClothDampingCoefficient_Parms.ClothDampingCoefficient = ClothDampingCoefficient;

	pFnSetClothDampingCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothDampingCoefficient, &SetClothDampingCoefficient_Parms, NULL );

	pFnSetClothDampingCoefficient->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothCollisionResponseCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothCollisionResponseCoefficient ( CPF_Parm )

void USkeletalMeshComponent::SetClothCollisionResponseCoefficient ( float ClothCollisionResponseCoefficient )
{
	static UFunction* pFnSetClothCollisionResponseCoefficient = NULL;

	if ( ! pFnSetClothCollisionResponseCoefficient )
		pFnSetClothCollisionResponseCoefficient = (UFunction*) UObject::GObjObjects()->Data[ 9453 ];

	USkeletalMeshComponent_execSetClothCollisionResponseCoefficient_Parms SetClothCollisionResponseCoefficient_Parms;
	SetClothCollisionResponseCoefficient_Parms.ClothCollisionResponseCoefficient = ClothCollisionResponseCoefficient;

	pFnSetClothCollisionResponseCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothCollisionResponseCoefficient, &SetClothCollisionResponseCoefficient_Parms, NULL );

	pFnSetClothCollisionResponseCoefficient->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothBendingStiffness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothBendingStiffness          ( CPF_Parm )

void USkeletalMeshComponent::SetClothBendingStiffness ( float ClothBendingStiffness )
{
	static UFunction* pFnSetClothBendingStiffness = NULL;

	if ( ! pFnSetClothBendingStiffness )
		pFnSetClothBendingStiffness = (UFunction*) UObject::GObjObjects()->Data[ 9451 ];

	USkeletalMeshComponent_execSetClothBendingStiffness_Parms SetClothBendingStiffness_Parms;
	SetClothBendingStiffness_Parms.ClothBendingStiffness = ClothBendingStiffness;

	pFnSetClothBendingStiffness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothBendingStiffness, &SetClothBendingStiffness_Parms, NULL );

	pFnSetClothBendingStiffness->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothAttachmentTearFactor
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothAttachTearFactor          ( CPF_Parm )

void USkeletalMeshComponent::SetClothAttachmentTearFactor ( float ClothAttachTearFactor )
{
	static UFunction* pFnSetClothAttachmentTearFactor = NULL;

	if ( ! pFnSetClothAttachmentTearFactor )
		pFnSetClothAttachmentTearFactor = (UFunction*) UObject::GObjObjects()->Data[ 9449 ];

	USkeletalMeshComponent_execSetClothAttachmentTearFactor_Parms SetClothAttachmentTearFactor_Parms;
	SetClothAttachmentTearFactor_Parms.ClothAttachTearFactor = ClothAttachTearFactor;

	pFnSetClothAttachmentTearFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothAttachmentTearFactor, &SetClothAttachmentTearFactor_Parms, NULL );

	pFnSetClothAttachmentTearFactor->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothAttachmentResponseCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothAttachmentResponseCoefficient ( CPF_Parm )

void USkeletalMeshComponent::SetClothAttachmentResponseCoefficient ( float ClothAttachmentResponseCoefficient )
{
	static UFunction* pFnSetClothAttachmentResponseCoefficient = NULL;

	if ( ! pFnSetClothAttachmentResponseCoefficient )
		pFnSetClothAttachmentResponseCoefficient = (UFunction*) UObject::GObjObjects()->Data[ 9447 ];

	USkeletalMeshComponent_execSetClothAttachmentResponseCoefficient_Parms SetClothAttachmentResponseCoefficient_Parms;
	SetClothAttachmentResponseCoefficient_Parms.ClothAttachmentResponseCoefficient = ClothAttachmentResponseCoefficient;

	pFnSetClothAttachmentResponseCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothAttachmentResponseCoefficient, &SetClothAttachmentResponseCoefficient_Parms, NULL );

	pFnSetClothAttachmentResponseCoefficient->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.GetBioFaceFXAsset
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFaceFXAsset*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFaceFXAsset* USkeletalMeshComponent::GetBioFaceFXAsset ( )
{
	static UFunction* pFnGetBioFaceFXAsset = NULL;

	if ( ! pFnGetBioFaceFXAsset )
		pFnGetBioFaceFXAsset = (UFunction*) UObject::GObjObjects()->Data[ 9445 ];

	USkeletalMeshComponent_execGetBioFaceFXAsset_Parms GetBioFaceFXAsset_Parms;

	pFnGetBioFaceFXAsset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBioFaceFXAsset, &GetBioFaceFXAsset_Parms, NULL );

	pFnGetBioFaceFXAsset->FunctionFlags |= 0x400;

	return GetBioFaceFXAsset_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothThickness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothThickness ( )
{
	static UFunction* pFnGetClothThickness = NULL;

	if ( ! pFnGetClothThickness )
		pFnGetClothThickness = (UFunction*) UObject::GObjObjects()->Data[ 9443 ];

	USkeletalMeshComponent_execGetClothThickness_Parms GetClothThickness_Parms;

	pFnGetClothThickness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothThickness, &GetClothThickness_Parms, NULL );

	pFnGetClothThickness->FunctionFlags |= 0x400;

	return GetClothThickness_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothTearFactor
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothTearFactor ( )
{
	static UFunction* pFnGetClothTearFactor = NULL;

	if ( ! pFnGetClothTearFactor )
		pFnGetClothTearFactor = (UFunction*) UObject::GObjObjects()->Data[ 9441 ];

	USkeletalMeshComponent_execGetClothTearFactor_Parms GetClothTearFactor_Parms;

	pFnGetClothTearFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothTearFactor, &GetClothTearFactor_Parms, NULL );

	pFnGetClothTearFactor->FunctionFlags |= 0x400;

	return GetClothTearFactor_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothStretchingStiffness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothStretchingStiffness ( )
{
	static UFunction* pFnGetClothStretchingStiffness = NULL;

	if ( ! pFnGetClothStretchingStiffness )
		pFnGetClothStretchingStiffness = (UFunction*) UObject::GObjObjects()->Data[ 9439 ];

	USkeletalMeshComponent_execGetClothStretchingStiffness_Parms GetClothStretchingStiffness_Parms;

	pFnGetClothStretchingStiffness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothStretchingStiffness, &GetClothStretchingStiffness_Parms, NULL );

	pFnGetClothStretchingStiffness->FunctionFlags |= 0x400;

	return GetClothStretchingStiffness_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothSolverIterations
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USkeletalMeshComponent::GetClothSolverIterations ( )
{
	static UFunction* pFnGetClothSolverIterations = NULL;

	if ( ! pFnGetClothSolverIterations )
		pFnGetClothSolverIterations = (UFunction*) UObject::GObjObjects()->Data[ 9437 ];

	USkeletalMeshComponent_execGetClothSolverIterations_Parms GetClothSolverIterations_Parms;

	pFnGetClothSolverIterations->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothSolverIterations, &GetClothSolverIterations_Parms, NULL );

	pFnGetClothSolverIterations->FunctionFlags |= 0x400;

	return GetClothSolverIterations_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothSleepLinearVelocity
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothSleepLinearVelocity ( )
{
	static UFunction* pFnGetClothSleepLinearVelocity = NULL;

	if ( ! pFnGetClothSleepLinearVelocity )
		pFnGetClothSleepLinearVelocity = (UFunction*) UObject::GObjObjects()->Data[ 9435 ];

	USkeletalMeshComponent_execGetClothSleepLinearVelocity_Parms GetClothSleepLinearVelocity_Parms;

	pFnGetClothSleepLinearVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothSleepLinearVelocity, &GetClothSleepLinearVelocity_Parms, NULL );

	pFnGetClothSleepLinearVelocity->FunctionFlags |= 0x400;

	return GetClothSleepLinearVelocity_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothPressure
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothPressure ( )
{
	static UFunction* pFnGetClothPressure = NULL;

	if ( ! pFnGetClothPressure )
		pFnGetClothPressure = (UFunction*) UObject::GObjObjects()->Data[ 9433 ];

	USkeletalMeshComponent_execGetClothPressure_Parms GetClothPressure_Parms;

	pFnGetClothPressure->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothPressure, &GetClothPressure_Parms, NULL );

	pFnGetClothPressure->FunctionFlags |= 0x400;

	return GetClothPressure_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothFriction
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothFriction ( )
{
	static UFunction* pFnGetClothFriction = NULL;

	if ( ! pFnGetClothFriction )
		pFnGetClothFriction = (UFunction*) UObject::GObjObjects()->Data[ 9431 ];

	USkeletalMeshComponent_execGetClothFriction_Parms GetClothFriction_Parms;

	pFnGetClothFriction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothFriction, &GetClothFriction_Parms, NULL );

	pFnGetClothFriction->FunctionFlags |= 0x400;

	return GetClothFriction_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothFlags
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USkeletalMeshComponent::GetClothFlags ( )
{
	static UFunction* pFnGetClothFlags = NULL;

	if ( ! pFnGetClothFlags )
		pFnGetClothFlags = (UFunction*) UObject::GObjObjects()->Data[ 9429 ];

	USkeletalMeshComponent_execGetClothFlags_Parms GetClothFlags_Parms;

	pFnGetClothFlags->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothFlags, &GetClothFlags_Parms, NULL );

	pFnGetClothFlags->FunctionFlags |= 0x400;

	return GetClothFlags_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothDampingCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothDampingCoefficient ( )
{
	static UFunction* pFnGetClothDampingCoefficient = NULL;

	if ( ! pFnGetClothDampingCoefficient )
		pFnGetClothDampingCoefficient = (UFunction*) UObject::GObjObjects()->Data[ 9427 ];

	USkeletalMeshComponent_execGetClothDampingCoefficient_Parms GetClothDampingCoefficient_Parms;

	pFnGetClothDampingCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothDampingCoefficient, &GetClothDampingCoefficient_Parms, NULL );

	pFnGetClothDampingCoefficient->FunctionFlags |= 0x400;

	return GetClothDampingCoefficient_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothCollisionResponseCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothCollisionResponseCoefficient ( )
{
	static UFunction* pFnGetClothCollisionResponseCoefficient = NULL;

	if ( ! pFnGetClothCollisionResponseCoefficient )
		pFnGetClothCollisionResponseCoefficient = (UFunction*) UObject::GObjObjects()->Data[ 9425 ];

	USkeletalMeshComponent_execGetClothCollisionResponseCoefficient_Parms GetClothCollisionResponseCoefficient_Parms;

	pFnGetClothCollisionResponseCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothCollisionResponseCoefficient, &GetClothCollisionResponseCoefficient_Parms, NULL );

	pFnGetClothCollisionResponseCoefficient->FunctionFlags |= 0x400;

	return GetClothCollisionResponseCoefficient_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothBendingStiffness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothBendingStiffness ( )
{
	static UFunction* pFnGetClothBendingStiffness = NULL;

	if ( ! pFnGetClothBendingStiffness )
		pFnGetClothBendingStiffness = (UFunction*) UObject::GObjObjects()->Data[ 9423 ];

	USkeletalMeshComponent_execGetClothBendingStiffness_Parms GetClothBendingStiffness_Parms;

	pFnGetClothBendingStiffness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothBendingStiffness, &GetClothBendingStiffness_Parms, NULL );

	pFnGetClothBendingStiffness->FunctionFlags |= 0x400;

	return GetClothBendingStiffness_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothAttachmentTearFactor
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothAttachmentTearFactor ( )
{
	static UFunction* pFnGetClothAttachmentTearFactor = NULL;

	if ( ! pFnGetClothAttachmentTearFactor )
		pFnGetClothAttachmentTearFactor = (UFunction*) UObject::GObjObjects()->Data[ 9421 ];

	USkeletalMeshComponent_execGetClothAttachmentTearFactor_Parms GetClothAttachmentTearFactor_Parms;

	pFnGetClothAttachmentTearFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothAttachmentTearFactor, &GetClothAttachmentTearFactor_Parms, NULL );

	pFnGetClothAttachmentTearFactor->FunctionFlags |= 0x400;

	return GetClothAttachmentTearFactor_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothAttachmentResponseCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothAttachmentResponseCoefficient ( )
{
	static UFunction* pFnGetClothAttachmentResponseCoefficient = NULL;

	if ( ! pFnGetClothAttachmentResponseCoefficient )
		pFnGetClothAttachmentResponseCoefficient = (UFunction*) UObject::GObjObjects()->Data[ 9419 ];

	USkeletalMeshComponent_execGetClothAttachmentResponseCoefficient_Parms GetClothAttachmentResponseCoefficient_Parms;

	pFnGetClothAttachmentResponseCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothAttachmentResponseCoefficient, &GetClothAttachmentResponseCoefficient_Parms, NULL );

	pFnGetClothAttachmentResponseCoefficient->FunctionFlags |= 0x400;

	return GetClothAttachmentResponseCoefficient_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.ResetClothVertsToRefPose
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::ResetClothVertsToRefPose ( )
{
	static UFunction* pFnResetClothVertsToRefPose = NULL;

	if ( ! pFnResetClothVertsToRefPose )
		pFnResetClothVertsToRefPose = (UFunction*) UObject::GObjObjects()->Data[ 9418 ];

	USkeletalMeshComponent_execResetClothVertsToRefPose_Parms ResetClothVertsToRefPose_Parms;

	pFnResetClothVertsToRefPose->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetClothVertsToRefPose, &ResetClothVertsToRefPose_Parms, NULL );

	pFnResetClothVertsToRefPose->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetAttachClothVertsToBaseBody
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bAttachVerts                   ( CPF_Parm )

void USkeletalMeshComponent::SetAttachClothVertsToBaseBody ( unsigned long bAttachVerts )
{
	static UFunction* pFnSetAttachClothVertsToBaseBody = NULL;

	if ( ! pFnSetAttachClothVertsToBaseBody )
		pFnSetAttachClothVertsToBaseBody = (UFunction*) UObject::GObjObjects()->Data[ 9416 ];

	USkeletalMeshComponent_execSetAttachClothVertsToBaseBody_Parms SetAttachClothVertsToBaseBody_Parms;
	SetAttachClothVertsToBaseBody_Parms.bAttachVerts = bAttachVerts;

	pFnSetAttachClothVertsToBaseBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAttachClothVertsToBaseBody, &SetAttachClothVertsToBaseBody_Parms, NULL );

	pFnSetAttachClothVertsToBaseBody->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothExternalForce
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 InForce                        ( CPF_Parm )

void USkeletalMeshComponent::SetClothExternalForce ( struct FVector InForce )
{
	static UFunction* pFnSetClothExternalForce = NULL;

	if ( ! pFnSetClothExternalForce )
		pFnSetClothExternalForce = (UFunction*) UObject::GObjObjects()->Data[ 9414 ];

	USkeletalMeshComponent_execSetClothExternalForce_Parms SetClothExternalForce_Parms;
	memcpy ( &SetClothExternalForce_Parms.InForce, &InForce, 0xC );

	pFnSetClothExternalForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothExternalForce, &SetClothExternalForce_Parms, NULL );

	pFnSetClothExternalForce->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateClothParams
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::UpdateClothParams ( )
{
	static UFunction* pFnUpdateClothParams = NULL;

	if ( ! pFnUpdateClothParams )
		pFnUpdateClothParams = (UFunction*) UObject::GObjObjects()->Data[ 9413 ];

	USkeletalMeshComponent_execUpdateClothParams_Parms UpdateClothParams_Parms;

	pFnUpdateClothParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateClothParams, &UpdateClothParams_Parms, NULL );

	pFnUpdateClothParams->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothFrozen
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFrozen                     ( CPF_Parm )

void USkeletalMeshComponent::SetClothFrozen ( unsigned long bNewFrozen )
{
	static UFunction* pFnSetClothFrozen = NULL;

	if ( ! pFnSetClothFrozen )
		pFnSetClothFrozen = (UFunction*) UObject::GObjObjects()->Data[ 9411 ];

	USkeletalMeshComponent_execSetClothFrozen_Parms SetClothFrozen_Parms;
	SetClothFrozen_Parms.bNewFrozen = bNewFrozen;

	pFnSetClothFrozen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothFrozen, &SetClothFrozen_Parms, NULL );

	pFnSetClothFrozen->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetEnableClothSimulation
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInEnable                      ( CPF_Parm )

void USkeletalMeshComponent::SetEnableClothSimulation ( unsigned long bInEnable )
{
	static UFunction* pFnSetEnableClothSimulation = NULL;

	if ( ! pFnSetEnableClothSimulation )
		pFnSetEnableClothSimulation = (UFunction*) UObject::GObjObjects()->Data[ 9409 ];

	USkeletalMeshComponent_execSetEnableClothSimulation_Parms SetEnableClothSimulation_Parms;
	SetEnableClothSimulation_Parms.bInEnable = bInEnable;

	pFnSetEnableClothSimulation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnableClothSimulation, &SetEnableClothSimulation_Parms, NULL );

	pFnSetEnableClothSimulation->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetForceRefPose
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewForceRefPose               ( CPF_Parm )

void USkeletalMeshComponent::SetForceRefPose ( unsigned long bNewForceRefPose )
{
	static UFunction* pFnSetForceRefPose = NULL;

	if ( ! pFnSetForceRefPose )
		pFnSetForceRefPose = (UFunction*) UObject::GObjObjects()->Data[ 9407 ];

	USkeletalMeshComponent_execSetForceRefPose_Parms SetForceRefPose_Parms;
	SetForceRefPose_Parms.bNewForceRefPose = bNewForceRefPose;

	pFnSetForceRefPose->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetForceRefPose, &SetForceRefPose_Parms, NULL );

	pFnSetForceRefPose->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetPhysicsAsset
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicsAsset*           NewPhysicsAsset                ( CPF_Parm )
// unsigned long                  bForceReInit                   ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::SetPhysicsAsset ( class UPhysicsAsset* NewPhysicsAsset, unsigned long bForceReInit )
{
	static UFunction* pFnSetPhysicsAsset = NULL;

	if ( ! pFnSetPhysicsAsset )
		pFnSetPhysicsAsset = (UFunction*) UObject::GObjObjects()->Data[ 9404 ];

	USkeletalMeshComponent_execSetPhysicsAsset_Parms SetPhysicsAsset_Parms;
	SetPhysicsAsset_Parms.NewPhysicsAsset = NewPhysicsAsset;
	SetPhysicsAsset_Parms.bForceReInit = bForceReInit;

	pFnSetPhysicsAsset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPhysicsAsset, &SetPhysicsAsset_Parms, NULL );

	pFnSetPhysicsAsset->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetSkeletalMesh
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkeletalMesh*           NewMesh                        ( CPF_Parm )
// unsigned long                  bKeepSpaceBases                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  InbAlwaysUseInstanceWeights    ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::SetSkeletalMesh ( class USkeletalMesh* NewMesh, unsigned long bKeepSpaceBases, unsigned long InbAlwaysUseInstanceWeights )
{
	static UFunction* pFnSetSkeletalMesh = NULL;

	if ( ! pFnSetSkeletalMesh )
		pFnSetSkeletalMesh = (UFunction*) UObject::GObjObjects()->Data[ 9400 ];

	USkeletalMeshComponent_execSetSkeletalMesh_Parms SetSkeletalMesh_Parms;
	SetSkeletalMesh_Parms.NewMesh = NewMesh;
	SetSkeletalMesh_Parms.bKeepSpaceBases = bKeepSpaceBases;
	SetSkeletalMesh_Parms.InbAlwaysUseInstanceWeights = InbAlwaysUseInstanceWeights;

	pFnSetSkeletalMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSkeletalMesh, &SetSkeletalMesh_Parms, NULL );

	pFnSetSkeletalMesh->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.BioComputeAttachedComponentPositionRotation
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UActorComponent*         Component                      ( CPF_Parm | CPF_EditInline )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Position                       ( CPF_Parm | CPF_OutParm )
// struct FRotator                Orientation                    ( CPF_Parm | CPF_OutParm )

bool USkeletalMeshComponent::BioComputeAttachedComponentPositionRotation ( class UActorComponent* Component, struct FName BoneName, struct FVector* Position, struct FRotator* Orientation )
{
	static UFunction* pFnBioComputeAttachedComponentPositionRotation = NULL;

	if ( ! pFnBioComputeAttachedComponentPositionRotation )
		pFnBioComputeAttachedComponentPositionRotation = (UFunction*) UObject::GObjObjects()->Data[ 9394 ];

	USkeletalMeshComponent_execBioComputeAttachedComponentPositionRotation_Parms BioComputeAttachedComponentPositionRotation_Parms;
	BioComputeAttachedComponentPositionRotation_Parms.Component = Component;
	memcpy ( &BioComputeAttachedComponentPositionRotation_Parms.BoneName, &BoneName, 0x8 );

	pFnBioComputeAttachedComponentPositionRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioComputeAttachedComponentPositionRotation, &BioComputeAttachedComponentPositionRotation_Parms, NULL );

	pFnBioComputeAttachedComponentPositionRotation->FunctionFlags |= 0x400;

	if ( Position )
		memcpy ( Position, &BioComputeAttachedComponentPositionRotation_Parms.Position, 0xC );

	if ( Orientation )
		memcpy ( Orientation, &BioComputeAttachedComponentPositionRotation_Parms.Orientation, 0xC );

	return BioComputeAttachedComponentPositionRotation_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.AttachedComponents
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class UActorComponent*         OutComponent                   ( CPF_Parm | CPF_OutParm | CPF_EditInline )

void USkeletalMeshComponent::AttachedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent )
{
	static UFunction* pFnAttachedComponents = NULL;

	if ( ! pFnAttachedComponents )
		pFnAttachedComponents = (UFunction*) UObject::GObjObjects()->Data[ 9391 ];

	USkeletalMeshComponent_execAttachedComponents_Parms AttachedComponents_Parms;
	AttachedComponents_Parms.BaseClass = BaseClass;

	pFnAttachedComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachedComponents, &AttachedComponents_Parms, NULL );

	pFnAttachedComponents->FunctionFlags |= 0x400;

	if ( OutComponent )
		*OutComponent = AttachedComponents_Parms.OutComponent;
};

// Function Engine.SkeletalMeshComponent.IsComponentAttached
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UActorComponent*         Component                      ( CPF_Parm | CPF_EditInline )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

bool USkeletalMeshComponent::IsComponentAttached ( class UActorComponent* Component, struct FName BoneName )
{
	static UFunction* pFnIsComponentAttached = NULL;

	if ( ! pFnIsComponentAttached )
		pFnIsComponentAttached = (UFunction*) UObject::GObjObjects()->Data[ 9387 ];

	USkeletalMeshComponent_execIsComponentAttached_Parms IsComponentAttached_Parms;
	IsComponentAttached_Parms.Component = Component;
	memcpy ( &IsComponentAttached_Parms.BoneName, &BoneName, 0x8 );

	pFnIsComponentAttached->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsComponentAttached, &IsComponentAttached_Parms, NULL );

	pFnIsComponentAttached->FunctionFlags |= 0x400;

	return IsComponentAttached_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindComponentAttachedToBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// struct FName                   InBoneName                     ( CPF_Parm )

class UActorComponent* USkeletalMeshComponent::FindComponentAttachedToBone ( struct FName InBoneName )
{
	static UFunction* pFnFindComponentAttachedToBone = NULL;

	if ( ! pFnFindComponentAttachedToBone )
		pFnFindComponentAttachedToBone = (UFunction*) UObject::GObjObjects()->Data[ 9384 ];

	USkeletalMeshComponent_execFindComponentAttachedToBone_Parms FindComponentAttachedToBone_Parms;
	memcpy ( &FindComponentAttachedToBone_Parms.InBoneName, &InBoneName, 0x8 );

	pFnFindComponentAttachedToBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindComponentAttachedToBone, &FindComponentAttachedToBone_Parms, NULL );

	pFnFindComponentAttachedToBone->FunctionFlags |= 0x400;

	return FindComponentAttachedToBone_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetSocketBoneName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InSocketName                   ( CPF_Parm )

struct FName USkeletalMeshComponent::GetSocketBoneName ( struct FName InSocketName )
{
	static UFunction* pFnGetSocketBoneName = NULL;

	if ( ! pFnGetSocketBoneName )
		pFnGetSocketBoneName = (UFunction*) UObject::GObjObjects()->Data[ 9381 ];

	USkeletalMeshComponent_execGetSocketBoneName_Parms GetSocketBoneName_Parms;
	memcpy ( &GetSocketBoneName_Parms.InSocketName, &InSocketName, 0x8 );

	pFnGetSocketBoneName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSocketBoneName, &GetSocketBoneName_Parms, NULL );

	pFnGetSocketBoneName->FunctionFlags |= 0x400;

	return GetSocketBoneName_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetSocketByName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkeletalMeshSocket*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InSocketName                   ( CPF_Parm )

class USkeletalMeshSocket* USkeletalMeshComponent::GetSocketByName ( struct FName InSocketName )
{
	static UFunction* pFnGetSocketByName = NULL;

	if ( ! pFnGetSocketByName )
		pFnGetSocketByName = (UFunction*) UObject::GObjObjects()->Data[ 9378 ];

	USkeletalMeshComponent_execGetSocketByName_Parms GetSocketByName_Parms;
	memcpy ( &GetSocketByName_Parms.InSocketName, &InSocketName, 0x8 );

	pFnGetSocketByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSocketByName, &GetSocketByName_Parms, NULL );

	pFnGetSocketByName->FunctionFlags |= 0x400;

	return GetSocketByName_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetSocketWorldLocationAndRotation
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InSocketName                   ( CPF_Parm )
// int                            Space                          ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 OutLocation                    ( CPF_Parm | CPF_OutParm )
// struct FRotator                OutRotation                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool USkeletalMeshComponent::GetSocketWorldLocationAndRotation ( struct FName InSocketName, int Space, struct FVector* OutLocation, struct FRotator* OutRotation )
{
	static UFunction* pFnGetSocketWorldLocationAndRotation = NULL;

	if ( ! pFnGetSocketWorldLocationAndRotation )
		pFnGetSocketWorldLocationAndRotation = (UFunction*) UObject::GObjObjects()->Data[ 9372 ];

	USkeletalMeshComponent_execGetSocketWorldLocationAndRotation_Parms GetSocketWorldLocationAndRotation_Parms;
	memcpy ( &GetSocketWorldLocationAndRotation_Parms.InSocketName, &InSocketName, 0x8 );
	GetSocketWorldLocationAndRotation_Parms.Space = Space;

	pFnGetSocketWorldLocationAndRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSocketWorldLocationAndRotation, &GetSocketWorldLocationAndRotation_Parms, NULL );

	pFnGetSocketWorldLocationAndRotation->FunctionFlags |= 0x400;

	if ( OutLocation )
		memcpy ( OutLocation, &GetSocketWorldLocationAndRotation_Parms.OutLocation, 0xC );

	if ( OutRotation )
		memcpy ( OutRotation, &GetSocketWorldLocationAndRotation_Parms.OutRotation, 0xC );

	return GetSocketWorldLocationAndRotation_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.AttachComponentToSocket
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         Component                      ( CPF_Parm | CPF_EditInline )
// struct FName                   SocketName                     ( CPF_Parm )

void USkeletalMeshComponent::AttachComponentToSocket ( class UActorComponent* Component, struct FName SocketName )
{
	static UFunction* pFnAttachComponentToSocket = NULL;

	if ( ! pFnAttachComponentToSocket )
		pFnAttachComponentToSocket = (UFunction*) UObject::GObjObjects()->Data[ 9369 ];

	USkeletalMeshComponent_execAttachComponentToSocket_Parms AttachComponentToSocket_Parms;
	AttachComponentToSocket_Parms.Component = Component;
	memcpy ( &AttachComponentToSocket_Parms.SocketName, &SocketName, 0x8 );

	pFnAttachComponentToSocket->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachComponentToSocket, &AttachComponentToSocket_Parms, NULL );

	pFnAttachComponentToSocket->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.DetachComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         Component                      ( CPF_Parm | CPF_EditInline )

void USkeletalMeshComponent::DetachComponent ( class UActorComponent* Component )
{
	static UFunction* pFnDetachComponent = NULL;

	if ( ! pFnDetachComponent )
		pFnDetachComponent = (UFunction*) UObject::GObjObjects()->Data[ 9367 ];

	USkeletalMeshComponent_execDetachComponent_Parms DetachComponent_Parms;
	DetachComponent_Parms.Component = Component;

	pFnDetachComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetachComponent, &DetachComponent_Parms, NULL );

	pFnDetachComponent->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.AttachComponent
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         Component                      ( CPF_Parm | CPF_EditInline )
// struct FName                   BoneName                       ( CPF_Parm )
// struct FVector                 RelativeLocation               ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                RelativeRotation               ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 RelativeScale                  ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::AttachComponent ( class UActorComponent* Component, struct FName BoneName, struct FVector RelativeLocation, struct FRotator RelativeRotation, struct FVector RelativeScale )
{
	static UFunction* pFnAttachComponent = NULL;

	if ( ! pFnAttachComponent )
		pFnAttachComponent = (UFunction*) UObject::GObjObjects()->Data[ 9361 ];

	USkeletalMeshComponent_execAttachComponent_Parms AttachComponent_Parms;
	AttachComponent_Parms.Component = Component;
	memcpy ( &AttachComponent_Parms.BoneName, &BoneName, 0x8 );
	memcpy ( &AttachComponent_Parms.RelativeLocation, &RelativeLocation, 0xC );
	memcpy ( &AttachComponent_Parms.RelativeRotation, &RelativeRotation, 0xC );
	memcpy ( &AttachComponent_Parms.RelativeScale, &RelativeScale, 0xC );

	pFnAttachComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachComponent, &AttachComponent_Parms, NULL );

	pFnAttachComponent->FunctionFlags |= 0x400;
};

// Function Engine.SplineActor.OnToggle
// [0x00020002] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ASplineActor::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 31185 ];

	ASplineActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.SplineActor.GetAllConnectedSplineActors
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct TArray<class ASplineActor*> OutSet                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASplineActor::GetAllConnectedSplineActors ( struct TArray<class ASplineActor*>* OutSet )
{
	static UFunction* pFnGetAllConnectedSplineActors = NULL;

	if ( ! pFnGetAllConnectedSplineActors )
		pFnGetAllConnectedSplineActors = (UFunction*) UObject::GObjObjects()->Data[ 31182 ];

	ASplineActor_execGetAllConnectedSplineActors_Parms GetAllConnectedSplineActors_Parms;

	pFnGetAllConnectedSplineActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAllConnectedSplineActors, &GetAllConnectedSplineActors_Parms, NULL );

	pFnGetAllConnectedSplineActors->FunctionFlags |= 0x400;

	if ( OutSet )
		memcpy ( OutSet, &GetAllConnectedSplineActors_Parms.OutSet, 0x10 );
};

// Function Engine.SplineActor.FindSplinePathTo
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASplineActor*            Goal                           ( CPF_Parm )
// struct TArray<class ASplineActor*> OutRoute                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ASplineActor::FindSplinePathTo ( class ASplineActor* Goal, struct TArray<class ASplineActor*>* OutRoute )
{
	static UFunction* pFnFindSplinePathTo = NULL;

	if ( ! pFnFindSplinePathTo )
		pFnFindSplinePathTo = (UFunction*) UObject::GObjObjects()->Data[ 31177 ];

	ASplineActor_execFindSplinePathTo_Parms FindSplinePathTo_Parms;
	FindSplinePathTo_Parms.Goal = Goal;

	pFnFindSplinePathTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSplinePathTo, &FindSplinePathTo_Parms, NULL );

	pFnFindSplinePathTo->FunctionFlags |= 0x400;

	if ( OutRoute )
		memcpy ( OutRoute, &FindSplinePathTo_Parms.OutRoute, 0x10 );

	return FindSplinePathTo_Parms.ReturnValue;
};

// Function Engine.SplineActor.GetBestConnectionInDirection
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class ASplineActor*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 DesiredDir                     ( CPF_Parm )
// unsigned long                  bUseLinksFrom                  ( CPF_OptionalParm | CPF_Parm )

class ASplineActor* ASplineActor::GetBestConnectionInDirection ( struct FVector DesiredDir, unsigned long bUseLinksFrom )
{
	static UFunction* pFnGetBestConnectionInDirection = NULL;

	if ( ! pFnGetBestConnectionInDirection )
		pFnGetBestConnectionInDirection = (UFunction*) UObject::GObjObjects()->Data[ 31173 ];

	ASplineActor_execGetBestConnectionInDirection_Parms GetBestConnectionInDirection_Parms;
	memcpy ( &GetBestConnectionInDirection_Parms.DesiredDir, &DesiredDir, 0xC );
	GetBestConnectionInDirection_Parms.bUseLinksFrom = bUseLinksFrom;

	pFnGetBestConnectionInDirection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBestConnectionInDirection, &GetBestConnectionInDirection_Parms, NULL );

	pFnGetBestConnectionInDirection->FunctionFlags |= 0x400;

	return GetBestConnectionInDirection_Parms.ReturnValue;
};

// Function Engine.SplineActor.GetRandomConnection
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class ASplineActor*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bUseLinksFrom                  ( CPF_OptionalParm | CPF_Parm )

class ASplineActor* ASplineActor::GetRandomConnection ( unsigned long bUseLinksFrom )
{
	static UFunction* pFnGetRandomConnection = NULL;

	if ( ! pFnGetRandomConnection )
		pFnGetRandomConnection = (UFunction*) UObject::GObjObjects()->Data[ 31170 ];

	ASplineActor_execGetRandomConnection_Parms GetRandomConnection_Parms;
	GetRandomConnection_Parms.bUseLinksFrom = bUseLinksFrom;

	pFnGetRandomConnection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRandomConnection, &GetRandomConnection_Parms, NULL );

	pFnGetRandomConnection->FunctionFlags |= 0x400;

	return GetRandomConnection_Parms.ReturnValue;
};

// Function Engine.SplineActor.BreakAllConnectionsFrom
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ASplineActor::BreakAllConnectionsFrom ( )
{
	static UFunction* pFnBreakAllConnectionsFrom = NULL;

	if ( ! pFnBreakAllConnectionsFrom )
		pFnBreakAllConnectionsFrom = (UFunction*) UObject::GObjObjects()->Data[ 31169 ];

	ASplineActor_execBreakAllConnectionsFrom_Parms BreakAllConnectionsFrom_Parms;

	pFnBreakAllConnectionsFrom->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBreakAllConnectionsFrom, &BreakAllConnectionsFrom_Parms, NULL );

	pFnBreakAllConnectionsFrom->FunctionFlags |= 0x400;
};

// Function Engine.SplineActor.BreakAllConnections
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ASplineActor::BreakAllConnections ( )
{
	static UFunction* pFnBreakAllConnections = NULL;

	if ( ! pFnBreakAllConnections )
		pFnBreakAllConnections = (UFunction*) UObject::GObjObjects()->Data[ 31168 ];

	ASplineActor_execBreakAllConnections_Parms BreakAllConnections_Parms;

	pFnBreakAllConnections->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBreakAllConnections, &BreakAllConnections_Parms, NULL );

	pFnBreakAllConnections->FunctionFlags |= 0x400;
};

// Function Engine.SplineActor.BreakConnectionTo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ASplineActor*            NextActor                      ( CPF_Parm )

void ASplineActor::BreakConnectionTo ( class ASplineActor* NextActor )
{
	static UFunction* pFnBreakConnectionTo = NULL;

	if ( ! pFnBreakConnectionTo )
		pFnBreakConnectionTo = (UFunction*) UObject::GObjObjects()->Data[ 31166 ];

	ASplineActor_execBreakConnectionTo_Parms BreakConnectionTo_Parms;
	BreakConnectionTo_Parms.NextActor = NextActor;

	pFnBreakConnectionTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBreakConnectionTo, &BreakConnectionTo_Parms, NULL );

	pFnBreakConnectionTo->FunctionFlags |= 0x400;
};

// Function Engine.SplineActor.FindTargetForComponent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ASplineActor*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USplineComponent*        SplineComp                     ( CPF_Parm | CPF_EditInline )

class ASplineActor* ASplineActor::FindTargetForComponent ( class USplineComponent* SplineComp )
{
	static UFunction* pFnFindTargetForComponent = NULL;

	if ( ! pFnFindTargetForComponent )
		pFnFindTargetForComponent = (UFunction*) UObject::GObjObjects()->Data[ 31163 ];

	ASplineActor_execFindTargetForComponent_Parms FindTargetForComponent_Parms;
	FindTargetForComponent_Parms.SplineComp = SplineComp;

	pFnFindTargetForComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindTargetForComponent, &FindTargetForComponent_Parms, NULL );

	pFnFindTargetForComponent->FunctionFlags |= 0x400;

	return FindTargetForComponent_Parms.ReturnValue;
};

// Function Engine.SplineActor.FindSplineComponentTo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USplineComponent*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class ASplineActor*            NextActor                      ( CPF_Parm )

class USplineComponent* ASplineActor::FindSplineComponentTo ( class ASplineActor* NextActor )
{
	static UFunction* pFnFindSplineComponentTo = NULL;

	if ( ! pFnFindSplineComponentTo )
		pFnFindSplineComponentTo = (UFunction*) UObject::GObjObjects()->Data[ 31160 ];

	ASplineActor_execFindSplineComponentTo_Parms FindSplineComponentTo_Parms;
	FindSplineComponentTo_Parms.NextActor = NextActor;

	pFnFindSplineComponentTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSplineComponentTo, &FindSplineComponentTo_Parms, NULL );

	pFnFindSplineComponentTo->FunctionFlags |= 0x400;

	return FindSplineComponentTo_Parms.ReturnValue;
};

// Function Engine.SplineActor.IsConnectedTo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASplineActor*            NextActor                      ( CPF_Parm )
// unsigned long                  bCheckForDisableDestination    ( CPF_Parm )

bool ASplineActor::IsConnectedTo ( class ASplineActor* NextActor, unsigned long bCheckForDisableDestination )
{
	static UFunction* pFnIsConnectedTo = NULL;

	if ( ! pFnIsConnectedTo )
		pFnIsConnectedTo = (UFunction*) UObject::GObjObjects()->Data[ 31156 ];

	ASplineActor_execIsConnectedTo_Parms IsConnectedTo_Parms;
	IsConnectedTo_Parms.NextActor = NextActor;
	IsConnectedTo_Parms.bCheckForDisableDestination = bCheckForDisableDestination;

	pFnIsConnectedTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsConnectedTo, &IsConnectedTo_Parms, NULL );

	pFnIsConnectedTo->FunctionFlags |= 0x400;

	return IsConnectedTo_Parms.ReturnValue;
};

// Function Engine.SplineActor.AddConnectionTo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ASplineActor*            NextActor                      ( CPF_Parm )

void ASplineActor::AddConnectionTo ( class ASplineActor* NextActor )
{
	static UFunction* pFnAddConnectionTo = NULL;

	if ( ! pFnAddConnectionTo )
		pFnAddConnectionTo = (UFunction*) UObject::GObjObjects()->Data[ 31154 ];

	ASplineActor_execAddConnectionTo_Parms AddConnectionTo_Parms;
	AddConnectionTo_Parms.NextActor = NextActor;

	pFnAddConnectionTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddConnectionTo, &AddConnectionTo_Parms, NULL );

	pFnAddConnectionTo->FunctionFlags |= 0x400;
};

// Function Engine.SplineActor.UpdateConnectedSplineComponents
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bFinish                        ( CPF_Parm )

void ASplineActor::UpdateConnectedSplineComponents ( unsigned long bFinish )
{
	static UFunction* pFnUpdateConnectedSplineComponents = NULL;

	if ( ! pFnUpdateConnectedSplineComponents )
		pFnUpdateConnectedSplineComponents = (UFunction*) UObject::GObjObjects()->Data[ 31152 ];

	ASplineActor_execUpdateConnectedSplineComponents_Parms UpdateConnectedSplineComponents_Parms;
	UpdateConnectedSplineComponents_Parms.bFinish = bFinish;

	pFnUpdateConnectedSplineComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateConnectedSplineComponents, &UpdateConnectedSplineComponents_Parms, NULL );

	pFnUpdateConnectedSplineComponents->FunctionFlags |= 0x400;
};

// Function Engine.SplineActor.UpdateSplineComponents
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bFinish                        ( CPF_Parm )

void ASplineActor::UpdateSplineComponents ( unsigned long bFinish )
{
	static UFunction* pFnUpdateSplineComponents = NULL;

	if ( ! pFnUpdateSplineComponents )
		pFnUpdateSplineComponents = (UFunction*) UObject::GObjObjects()->Data[ 31150 ];

	ASplineActor_execUpdateSplineComponents_Parms UpdateSplineComponents_Parms;
	UpdateSplineComponents_Parms.bFinish = bFinish;

	pFnUpdateSplineComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSplineComponents, &UpdateSplineComponents_Parms, NULL );

	pFnUpdateSplineComponents->FunctionFlags |= 0x400;
};

// Function Engine.SplineActor.GetWorldSpaceTangent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ASplineActor::GetWorldSpaceTangent ( )
{
	static UFunction* pFnGetWorldSpaceTangent = NULL;

	if ( ! pFnGetWorldSpaceTangent )
		pFnGetWorldSpaceTangent = (UFunction*) UObject::GObjObjects()->Data[ 31148 ];

	ASplineActor_execGetWorldSpaceTangent_Parms GetWorldSpaceTangent_Parms;

	pFnGetWorldSpaceTangent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWorldSpaceTangent, &GetWorldSpaceTangent_Parms, NULL );

	pFnGetWorldSpaceTangent->FunctionFlags |= 0x400;

	return GetWorldSpaceTangent_Parms.ReturnValue;
};

// Function Engine.SplineLoftActor.ClearLoftMesh
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ASplineLoftActor::ClearLoftMesh ( )
{
	static UFunction* pFnClearLoftMesh = NULL;

	if ( ! pFnClearLoftMesh )
		pFnClearLoftMesh = (UFunction*) UObject::GObjObjects()->Data[ 31218 ];

	ASplineLoftActor_execClearLoftMesh_Parms ClearLoftMesh_Parms;

	pFnClearLoftMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearLoftMesh, &ClearLoftMesh_Parms, NULL );

	pFnClearLoftMesh->FunctionFlags |= 0x400;
};

// Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Distance                       ( CPF_Parm )

struct FVector USplineComponent::GetTangentAtDistanceAlongSpline ( float Distance )
{
	static UFunction* pFnGetTangentAtDistanceAlongSpline = NULL;

	if ( ! pFnGetTangentAtDistanceAlongSpline )
		pFnGetTangentAtDistanceAlongSpline = (UFunction*) UObject::GObjObjects()->Data[ 31204 ];

	USplineComponent_execGetTangentAtDistanceAlongSpline_Parms GetTangentAtDistanceAlongSpline_Parms;
	GetTangentAtDistanceAlongSpline_Parms.Distance = Distance;

	pFnGetTangentAtDistanceAlongSpline->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTangentAtDistanceAlongSpline, &GetTangentAtDistanceAlongSpline_Parms, NULL );

	pFnGetTangentAtDistanceAlongSpline->FunctionFlags |= 0x400;

	return GetTangentAtDistanceAlongSpline_Parms.ReturnValue;
};

// Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Distance                       ( CPF_Parm )

struct FVector USplineComponent::GetLocationAtDistanceAlongSpline ( float Distance )
{
	static UFunction* pFnGetLocationAtDistanceAlongSpline = NULL;

	if ( ! pFnGetLocationAtDistanceAlongSpline )
		pFnGetLocationAtDistanceAlongSpline = (UFunction*) UObject::GObjObjects()->Data[ 31201 ];

	USplineComponent_execGetLocationAtDistanceAlongSpline_Parms GetLocationAtDistanceAlongSpline_Parms;
	GetLocationAtDistanceAlongSpline_Parms.Distance = Distance;

	pFnGetLocationAtDistanceAlongSpline->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLocationAtDistanceAlongSpline, &GetLocationAtDistanceAlongSpline_Parms, NULL );

	pFnGetLocationAtDistanceAlongSpline->FunctionFlags |= 0x400;

	return GetLocationAtDistanceAlongSpline_Parms.ReturnValue;
};

// Function Engine.SplineComponent.GetSplineLength
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USplineComponent::GetSplineLength ( )
{
	static UFunction* pFnGetSplineLength = NULL;

	if ( ! pFnGetSplineLength )
		pFnGetSplineLength = (UFunction*) UObject::GObjObjects()->Data[ 31199 ];

	USplineComponent_execGetSplineLength_Parms GetSplineLength_Parms;

	pFnGetSplineLength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSplineLength, &GetSplineLength_Parms, NULL );

	pFnGetSplineLength->FunctionFlags |= 0x400;

	return GetSplineLength_Parms.ReturnValue;
};

// Function Engine.SplineComponent.UpdateSplineReparamTable
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USplineComponent::UpdateSplineReparamTable ( )
{
	static UFunction* pFnUpdateSplineReparamTable = NULL;

	if ( ! pFnUpdateSplineReparamTable )
		pFnUpdateSplineReparamTable = (UFunction*) UObject::GObjObjects()->Data[ 31198 ];

	USplineComponent_execUpdateSplineReparamTable_Parms UpdateSplineReparamTable_Parms;

	pFnUpdateSplineReparamTable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSplineReparamTable, &UpdateSplineReparamTable_Parms, NULL );

	pFnUpdateSplineReparamTable->FunctionFlags |= 0x400;
};

// Function Engine.SplineComponent.UpdateSplineCurviness
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USplineComponent::UpdateSplineCurviness ( )
{
	static UFunction* pFnUpdateSplineCurviness = NULL;

	if ( ! pFnUpdateSplineCurviness )
		pFnUpdateSplineCurviness = (UFunction*) UObject::GObjObjects()->Data[ 31197 ];

	USplineComponent_execUpdateSplineCurviness_Parms UpdateSplineCurviness_Parms;

	pFnUpdateSplineCurviness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSplineCurviness, &UpdateSplineCurviness_Parms, NULL );

	pFnUpdateSplineCurviness->FunctionFlags |= 0x400;
};

// Function Engine.ProcBuilding.FindEdgeForTopLevelScope
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            TopLevelScopeIndex             ( CPF_Parm )
// unsigned char                  Edge                           ( CPF_Parm )

int AProcBuilding::FindEdgeForTopLevelScope ( int TopLevelScopeIndex, unsigned char Edge )
{
	static UFunction* pFnFindEdgeForTopLevelScope = NULL;

	if ( ! pFnFindEdgeForTopLevelScope )
		pFnFindEdgeForTopLevelScope = (UFunction*) UObject::GObjObjects()->Data[ 27888 ];

	AProcBuilding_execFindEdgeForTopLevelScope_Parms FindEdgeForTopLevelScope_Parms;
	FindEdgeForTopLevelScope_Parms.TopLevelScopeIndex = TopLevelScopeIndex;
	FindEdgeForTopLevelScope_Parms.Edge = Edge;

	pFnFindEdgeForTopLevelScope->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindEdgeForTopLevelScope, &FindEdgeForTopLevelScope_Parms, NULL );

	pFnFindEdgeForTopLevelScope->FunctionFlags |= 0x400;

	return FindEdgeForTopLevelScope_Parms.ReturnValue;
};

// Function Engine.ProcBuilding.GetAllGroupedProcBuildings
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct TArray<class AProcBuilding*> OutSet                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AProcBuilding::GetAllGroupedProcBuildings ( struct TArray<class AProcBuilding*>* OutSet )
{
	static UFunction* pFnGetAllGroupedProcBuildings = NULL;

	if ( ! pFnGetAllGroupedProcBuildings )
		pFnGetAllGroupedProcBuildings = (UFunction*) UObject::GObjObjects()->Data[ 27885 ];

	AProcBuilding_execGetAllGroupedProcBuildings_Parms GetAllGroupedProcBuildings_Parms;

	pFnGetAllGroupedProcBuildings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAllGroupedProcBuildings, &GetAllGroupedProcBuildings_Parms, NULL );

	pFnGetAllGroupedProcBuildings->FunctionFlags |= 0x400;

	if ( OutSet )
		memcpy ( OutSet, &GetAllGroupedProcBuildings_Parms.OutSet, 0x10 );
};

// Function Engine.ProcBuilding.GetBaseMostBuilding
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AProcBuilding*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AProcBuilding* AProcBuilding::GetBaseMostBuilding ( )
{
	static UFunction* pFnGetBaseMostBuilding = NULL;

	if ( ! pFnGetBaseMostBuilding )
		pFnGetBaseMostBuilding = (UFunction*) UObject::GObjObjects()->Data[ 27883 ];

	AProcBuilding_execGetBaseMostBuilding_Parms GetBaseMostBuilding_Parms;

	pFnGetBaseMostBuilding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBaseMostBuilding, &GetBaseMostBuilding_Parms, NULL );

	pFnGetBaseMostBuilding->FunctionFlags |= 0x400;

	return GetBaseMostBuilding_Parms.ReturnValue;
};

// Function Engine.ProcBuilding.FindComponentsForTopLevelScope
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct TArray<class UStaticMeshComponent*> ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink | CPF_EditInline )
// int                            TopLevelScopeIndex             ( CPF_Parm )

struct TArray<class UStaticMeshComponent*> AProcBuilding::FindComponentsForTopLevelScope ( int TopLevelScopeIndex )
{
	static UFunction* pFnFindComponentsForTopLevelScope = NULL;

	if ( ! pFnFindComponentsForTopLevelScope )
		pFnFindComponentsForTopLevelScope = (UFunction*) UObject::GObjObjects()->Data[ 27879 ];

	AProcBuilding_execFindComponentsForTopLevelScope_Parms FindComponentsForTopLevelScope_Parms;
	FindComponentsForTopLevelScope_Parms.TopLevelScopeIndex = TopLevelScopeIndex;

	pFnFindComponentsForTopLevelScope->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindComponentsForTopLevelScope, &FindComponentsForTopLevelScope_Parms, NULL );

	pFnFindComponentsForTopLevelScope->FunctionFlags |= 0x400;

	return FindComponentsForTopLevelScope_Parms.ReturnValue;
};

// Function Engine.ProcBuilding.ClearBuildingMeshes
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AProcBuilding::ClearBuildingMeshes ( )
{
	static UFunction* pFnClearBuildingMeshes = NULL;

	if ( ! pFnClearBuildingMeshes )
		pFnClearBuildingMeshes = (UFunction*) UObject::GObjObjects()->Data[ 27878 ];

	AProcBuilding_execClearBuildingMeshes_Parms ClearBuildingMeshes_Parms;

	pFnClearBuildingMeshes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBuildingMeshes, &ClearBuildingMeshes_Parms, NULL );

	pFnClearBuildingMeshes->FunctionFlags |= 0x400;
};

// Function Engine.PBRuleNodeMesh.PickRandomBuildingMesh
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UPBRuleNodeMesh::PickRandomBuildingMesh ( )
{
	static UFunction* pFnPickRandomBuildingMesh = NULL;

	if ( ! pFnPickRandomBuildingMesh )
		pFnPickRandomBuildingMesh = (UFunction*) UObject::GObjObjects()->Data[ 27982 ];

	UPBRuleNodeMesh_execPickRandomBuildingMesh_Parms PickRandomBuildingMesh_Parms;

	pFnPickRandomBuildingMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPickRandomBuildingMesh, &PickRandomBuildingMesh_Parms, NULL );

	pFnPickRandomBuildingMesh->FunctionFlags |= 0x400;

	return PickRandomBuildingMesh_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.ShouldShowGore
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameReplicationInfo::eventShouldShowGore ( )
{
	static UFunction* pFnShouldShowGore = NULL;

	if ( ! pFnShouldShowGore )
		pFnShouldShowGore = (UFunction*) UObject::GObjObjects()->Data[ 9716 ];

	AGameReplicationInfo_eventShouldShowGore_Parms ShouldShowGore_Parms;

	this->ProcessEvent ( pFnShouldShowGore, &ShouldShowGore_Parms, NULL );

	return ShouldShowGore_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.IsCoopMultiplayerGame
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameReplicationInfo::IsCoopMultiplayerGame ( )
{
	static UFunction* pFnIsCoopMultiplayerGame = NULL;

	if ( ! pFnIsCoopMultiplayerGame )
		pFnIsCoopMultiplayerGame = (UFunction*) UObject::GObjObjects()->Data[ 21666 ];

	AGameReplicationInfo_execIsCoopMultiplayerGame_Parms IsCoopMultiplayerGame_Parms;

	this->ProcessEvent ( pFnIsCoopMultiplayerGame, &IsCoopMultiplayerGame_Parms, NULL );

	return IsCoopMultiplayerGame_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.IsMultiplayerGame
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameReplicationInfo::IsMultiplayerGame ( )
{
	static UFunction* pFnIsMultiplayerGame = NULL;

	if ( ! pFnIsMultiplayerGame )
		pFnIsMultiplayerGame = (UFunction*) UObject::GObjObjects()->Data[ 21664 ];

	AGameReplicationInfo_execIsMultiplayerGame_Parms IsMultiplayerGame_Parms;

	this->ProcessEvent ( pFnIsMultiplayerGame, &IsMultiplayerGame_Parms, NULL );

	return IsMultiplayerGame_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.EndGame
// [0x00020102] 
// Parameters infos:

void AGameReplicationInfo::EndGame ( )
{
	static UFunction* pFnEndGame = NULL;

	if ( ! pFnEndGame )
		pFnEndGame = (UFunction*) UObject::GObjObjects()->Data[ 21663 ];

	AGameReplicationInfo_execEndGame_Parms EndGame_Parms;

	this->ProcessEvent ( pFnEndGame, &EndGame_Parms, NULL );
};

// Function Engine.GameReplicationInfo.StartMatch
// [0x00020102] 
// Parameters infos:

void AGameReplicationInfo::StartMatch ( )
{
	static UFunction* pFnStartMatch = NULL;

	if ( ! pFnStartMatch )
		pFnStartMatch = (UFunction*) UObject::GObjObjects()->Data[ 21662 ];

	AGameReplicationInfo_execStartMatch_Parms StartMatch_Parms;

	this->ProcessEvent ( pFnStartMatch, &StartMatch_Parms, NULL );
};

// Function Engine.GameReplicationInfo.CleanupGameDataStore
// [0x00020102] 
// Parameters infos:

void AGameReplicationInfo::CleanupGameDataStore ( )
{
	static UFunction* pFnCleanupGameDataStore = NULL;

	if ( ! pFnCleanupGameDataStore )
		pFnCleanupGameDataStore = (UFunction*) UObject::GObjObjects()->Data[ 21661 ];

	AGameReplicationInfo_execCleanupGameDataStore_Parms CleanupGameDataStore_Parms;

	this->ProcessEvent ( pFnCleanupGameDataStore, &CleanupGameDataStore_Parms, NULL );
};

// Function Engine.GameReplicationInfo.InitializeGameDataStore
// [0x00020102] 
// Parameters infos:

void AGameReplicationInfo::InitializeGameDataStore ( )
{
	static UFunction* pFnInitializeGameDataStore = NULL;

	if ( ! pFnInitializeGameDataStore )
		pFnInitializeGameDataStore = (UFunction*) UObject::GObjObjects()->Data[ 21659 ];

	AGameReplicationInfo_execInitializeGameDataStore_Parms InitializeGameDataStore_Parms;

	this->ProcessEvent ( pFnInitializeGameDataStore, &InitializeGameDataStore_Parms, NULL );
};

// Function Engine.GameReplicationInfo.ReplicatedDataBinding
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AGameReplicationInfo::eventReplicatedDataBinding ( struct FName VarName )
{
	static UFunction* pFnReplicatedDataBinding = NULL;

	if ( ! pFnReplicatedDataBinding )
		pFnReplicatedDataBinding = (UFunction*) UObject::GObjObjects()->Data[ 21657 ];

	AGameReplicationInfo_eventReplicatedDataBinding_Parms ReplicatedDataBinding_Parms;
	memcpy ( &ReplicatedDataBinding_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedDataBinding, &ReplicatedDataBinding_Parms, NULL );
};

// Function Engine.GameReplicationInfo.SortPRIArray
// [0x00020102] 
// Parameters infos:

void AGameReplicationInfo::SortPRIArray ( )
{
	static UFunction* pFnSortPRIArray = NULL;

	if ( ! pFnSortPRIArray )
		pFnSortPRIArray = (UFunction*) UObject::GObjObjects()->Data[ 21652 ];

	AGameReplicationInfo_execSortPRIArray_Parms SortPRIArray_Parms;

	this->ProcessEvent ( pFnSortPRIArray, &SortPRIArray_Parms, NULL );
};

// Function Engine.GameReplicationInfo.InOrder
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  P1                             ( CPF_Parm )
// class APlayerReplicationInfo*  P2                             ( CPF_Parm )

bool AGameReplicationInfo::InOrder ( class APlayerReplicationInfo* P1, class APlayerReplicationInfo* P2 )
{
	static UFunction* pFnInOrder = NULL;

	if ( ! pFnInOrder )
		pFnInOrder = (UFunction*) UObject::GObjObjects()->Data[ 21645 ];

	AGameReplicationInfo_execInOrder_Parms InOrder_Parms;
	InOrder_Parms.P1 = P1;
	InOrder_Parms.P2 = P2;

	this->ProcessEvent ( pFnInOrder, &InOrder_Parms, NULL );

	return InOrder_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.GetPRIArray
// [0x00420102] 
// Parameters infos:
// struct TArray<class APlayerReplicationInfo*> pris                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AGameReplicationInfo::GetPRIArray ( struct TArray<class APlayerReplicationInfo*>* pris )
{
	static UFunction* pFnGetPRIArray = NULL;

	if ( ! pFnGetPRIArray )
		pFnGetPRIArray = (UFunction*) UObject::GObjObjects()->Data[ 21640 ];

	AGameReplicationInfo_execGetPRIArray_Parms GetPRIArray_Parms;

	this->ProcessEvent ( pFnGetPRIArray, &GetPRIArray_Parms, NULL );

	if ( pris )
		memcpy ( pris, &GetPRIArray_Parms.pris, 0x10 );
};

// Function Engine.GameReplicationInfo.SetTeam
// [0x00020102] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ATeamInfo*               TI                             ( CPF_Parm )

void AGameReplicationInfo::SetTeam ( int Index, class ATeamInfo* TI )
{
	static UFunction* pFnSetTeam = NULL;

	if ( ! pFnSetTeam )
		pFnSetTeam = (UFunction*) UObject::GObjObjects()->Data[ 21637 ];

	AGameReplicationInfo_execSetTeam_Parms SetTeam_Parms;
	SetTeam_Parms.Index = Index;
	SetTeam_Parms.TI = TI;

	this->ProcessEvent ( pFnSetTeam, &SetTeam_Parms, NULL );
};

// Function Engine.GameReplicationInfo.RemovePRI
// [0x00020102] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void AGameReplicationInfo::RemovePRI ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnRemovePRI = NULL;

	if ( ! pFnRemovePRI )
		pFnRemovePRI = (UFunction*) UObject::GObjObjects()->Data[ 21634 ];

	AGameReplicationInfo_execRemovePRI_Parms RemovePRI_Parms;
	RemovePRI_Parms.PRI = PRI;

	this->ProcessEvent ( pFnRemovePRI, &RemovePRI_Parms, NULL );
};

// Function Engine.GameReplicationInfo.AddPRI
// [0x00020102] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void AGameReplicationInfo::AddPRI ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnAddPRI = NULL;

	if ( ! pFnAddPRI )
		pFnAddPRI = (UFunction*) UObject::GObjObjects()->Data[ 21631 ];

	AGameReplicationInfo_execAddPRI_Parms AddPRI_Parms;
	AddPRI_Parms.PRI = PRI;

	this->ProcessEvent ( pFnAddPRI, &AddPRI_Parms, NULL );
};

// Function Engine.GameReplicationInfo.FindPlayerByID
// [0x00020102] 
// Parameters infos:
// class APlayerReplicationInfo*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerID                       ( CPF_Parm )

class APlayerReplicationInfo* AGameReplicationInfo::FindPlayerByID ( int PlayerID )
{
	static UFunction* pFnFindPlayerByID = NULL;

	if ( ! pFnFindPlayerByID )
		pFnFindPlayerByID = (UFunction*) UObject::GObjObjects()->Data[ 20474 ];

	AGameReplicationInfo_execFindPlayerByID_Parms FindPlayerByID_Parms;
	FindPlayerByID_Parms.PlayerID = PlayerID;

	this->ProcessEvent ( pFnFindPlayerByID, &FindPlayerByID_Parms, NULL );

	return FindPlayerByID_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.OnSameTeam
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )
// class AActor*                  B                              ( CPF_Parm )

bool AGameReplicationInfo::OnSameTeam ( class AActor* A, class AActor* B )
{
	static UFunction* pFnOnSameTeam = NULL;

	if ( ! pFnOnSameTeam )
		pFnOnSameTeam = (UFunction*) UObject::GObjObjects()->Data[ 21625 ];

	AGameReplicationInfo_execOnSameTeam_Parms OnSameTeam_Parms;
	OnSameTeam_Parms.A = A;
	OnSameTeam_Parms.B = B;

	pFnOnSameTeam->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnSameTeam, &OnSameTeam_Parms, NULL );

	pFnOnSameTeam->FunctionFlags |= 0x400;

	return OnSameTeam_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.Timer
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AGameReplicationInfo::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 21619 ];

	AGameReplicationInfo_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Engine.GameReplicationInfo.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AGameReplicationInfo::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 21618 ];

	AGameReplicationInfo_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.GameReplicationInfo.Reset
// [0x00020002] 
// Parameters infos:

void AGameReplicationInfo::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 21616 ];

	AGameReplicationInfo_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.GameReplicationInfo.ReceivedGameClass
// [0x00020100] 
// Parameters infos:

void AGameReplicationInfo::ReceivedGameClass ( )
{
	static UFunction* pFnReceivedGameClass = NULL;

	if ( ! pFnReceivedGameClass )
		pFnReceivedGameClass = (UFunction*) UObject::GObjObjects()->Data[ 21615 ];

	AGameReplicationInfo_execReceivedGameClass_Parms ReceivedGameClass_Parms;

	this->ProcessEvent ( pFnReceivedGameClass, &ReceivedGameClass_Parms, NULL );
};

// Function Engine.GameReplicationInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AGameReplicationInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 21612 ];

	AGameReplicationInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.GameReplicationInfo.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AGameReplicationInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 21607 ];

	AGameReplicationInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.UnregisterPlayerFromSession
// [0x00020102] 
// Parameters infos:

void APlayerReplicationInfo::UnregisterPlayerFromSession ( )
{
	static UFunction* pFnUnregisterPlayerFromSession = NULL;

	if ( ! pFnUnregisterPlayerFromSession )
		pFnUnregisterPlayerFromSession = (UFunction*) UObject::GObjObjects()->Data[ 28441 ];

	APlayerReplicationInfo_execUnregisterPlayerFromSession_Parms UnregisterPlayerFromSession_Parms;

	this->ProcessEvent ( pFnUnregisterPlayerFromSession, &UnregisterPlayerFromSession_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.RegisterPlayerWithSession
// [0x00020102] 
// Parameters infos:

void APlayerReplicationInfo::RegisterPlayerWithSession ( )
{
	static UFunction* pFnRegisterPlayerWithSession = NULL;

	if ( ! pFnRegisterPlayerWithSession )
		pFnRegisterPlayerWithSession = (UFunction*) UObject::GObjObjects()->Data[ 28438 ];

	APlayerReplicationInfo_execRegisterPlayerWithSession_Parms RegisterPlayerWithSession_Parms;

	this->ProcessEvent ( pFnRegisterPlayerWithSession, &RegisterPlayerWithSession_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.IsInvalidName
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerReplicationInfo::IsInvalidName ( )
{
	static UFunction* pFnIsInvalidName = NULL;

	if ( ! pFnIsInvalidName )
		pFnIsInvalidName = (UFunction*) UObject::GObjObjects()->Data[ 28432 ];

	APlayerReplicationInfo_execIsInvalidName_Parms IsInvalidName_Parms;

	this->ProcessEvent ( pFnIsInvalidName, &IsInvalidName_Parms, NULL );

	return IsInvalidName_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char APlayerReplicationInfo::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = (UFunction*) UObject::GObjObjects()->Data[ 28430 ];

	APlayerReplicationInfo_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.SetUniqueId
// [0x00020102] 
// Parameters infos:
// struct FUniqueNetId            PlayerUniqueId                 ( CPF_Parm )

void APlayerReplicationInfo::SetUniqueId ( struct FUniqueNetId PlayerUniqueId )
{
	static UFunction* pFnSetUniqueId = NULL;

	if ( ! pFnSetUniqueId )
		pFnSetUniqueId = (UFunction*) UObject::GObjObjects()->Data[ 28428 ];

	APlayerReplicationInfo_execSetUniqueId_Parms SetUniqueId_Parms;
	memcpy ( &SetUniqueId_Parms.PlayerUniqueId, &PlayerUniqueId, 0x8 );

	this->ProcessEvent ( pFnSetUniqueId, &SetUniqueId_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.ServerSetSplitscreenIndex
// [0x002200C2] 
// Parameters infos:
// unsigned char                  PlayerIndex                    ( CPF_Parm )

void APlayerReplicationInfo::ServerSetSplitscreenIndex ( unsigned char PlayerIndex )
{
	static UFunction* pFnServerSetSplitscreenIndex = NULL;

	if ( ! pFnServerSetSplitscreenIndex )
		pFnServerSetSplitscreenIndex = (UFunction*) UObject::GObjObjects()->Data[ 28426 ];

	APlayerReplicationInfo_execServerSetSplitscreenIndex_Parms ServerSetSplitscreenIndex_Parms;
	ServerSetSplitscreenIndex_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnServerSetSplitscreenIndex, &ServerSetSplitscreenIndex_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.SetSplitscreenIndex
// [0x00020102] 
// Parameters infos:
// unsigned char                  PlayerIndex                    ( CPF_Parm )

void APlayerReplicationInfo::SetSplitscreenIndex ( unsigned char PlayerIndex )
{
	static UFunction* pFnSetSplitscreenIndex = NULL;

	if ( ! pFnSetSplitscreenIndex )
		pFnSetSplitscreenIndex = (UFunction*) UObject::GObjObjects()->Data[ 28424 ];

	APlayerReplicationInfo_execSetSplitscreenIndex_Parms SetSplitscreenIndex_Parms;
	SetSplitscreenIndex_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnSetSplitscreenIndex, &SetSplitscreenIndex_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.IsLocalPlayerPRI
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerReplicationInfo::IsLocalPlayerPRI ( )
{
	static UFunction* pFnIsLocalPlayerPRI = NULL;

	if ( ! pFnIsLocalPlayerPRI )
		pFnIsLocalPlayerPRI = (UFunction*) UObject::GObjObjects()->Data[ 11787 ];

	APlayerReplicationInfo_execIsLocalPlayerPRI_Parms IsLocalPlayerPRI_Parms;

	this->ProcessEvent ( pFnIsLocalPlayerPRI, &IsLocalPlayerPRI_Parms, NULL );

	return IsLocalPlayerPRI_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.BindPlayerOwnerDataProvider
// [0x00020102] 
// Parameters infos:

void APlayerReplicationInfo::BindPlayerOwnerDataProvider ( )
{
	static UFunction* pFnBindPlayerOwnerDataProvider = NULL;

	if ( ! pFnBindPlayerOwnerDataProvider )
		pFnBindPlayerOwnerDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 28417 ];

	APlayerReplicationInfo_execBindPlayerOwnerDataProvider_Parms BindPlayerOwnerDataProvider_Parms;

	this->ProcessEvent ( pFnBindPlayerOwnerDataProvider, &BindPlayerOwnerDataProvider_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.NotifyLocalPlayerTeamReceived
// [0x00020102] 
// Parameters infos:

void APlayerReplicationInfo::NotifyLocalPlayerTeamReceived ( )
{
	static UFunction* pFnNotifyLocalPlayerTeamReceived = NULL;

	if ( ! pFnNotifyLocalPlayerTeamReceived )
		pFnNotifyLocalPlayerTeamReceived = (UFunction*) UObject::GObjObjects()->Data[ 28416 ];

	APlayerReplicationInfo_execNotifyLocalPlayerTeamReceived_Parms NotifyLocalPlayerTeamReceived_Parms;

	this->ProcessEvent ( pFnNotifyLocalPlayerTeamReceived, &NotifyLocalPlayerTeamReceived_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.UpdateTeamDataProvider
// [0x00020102] 
// Parameters infos:

void APlayerReplicationInfo::UpdateTeamDataProvider ( )
{
	static UFunction* pFnUpdateTeamDataProvider = NULL;

	if ( ! pFnUpdateTeamDataProvider )
		pFnUpdateTeamDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 28414 ];

	APlayerReplicationInfo_execUpdateTeamDataProvider_Parms UpdateTeamDataProvider_Parms;

	this->ProcessEvent ( pFnUpdateTeamDataProvider, &UpdateTeamDataProvider_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.UpdatePlayerDataProvider
// [0x00024102] 
// Parameters infos:
// struct FName                   PropertyName                   ( CPF_OptionalParm | CPF_Parm )

void APlayerReplicationInfo::UpdatePlayerDataProvider ( struct FName PropertyName )
{
	static UFunction* pFnUpdatePlayerDataProvider = NULL;

	if ( ! pFnUpdatePlayerDataProvider )
		pFnUpdatePlayerDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 28407 ];

	APlayerReplicationInfo_execUpdatePlayerDataProvider_Parms UpdatePlayerDataProvider_Parms;
	memcpy ( &UpdatePlayerDataProvider_Parms.PropertyName, &PropertyName, 0x8 );

	this->ProcessEvent ( pFnUpdatePlayerDataProvider, &UpdatePlayerDataProvider_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.GetCurrentGameDS
// [0x00020102] 
// Parameters infos:
// class UCurrentGameDataStore*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UCurrentGameDataStore* APlayerReplicationInfo::GetCurrentGameDS ( )
{
	static UFunction* pFnGetCurrentGameDS = NULL;

	if ( ! pFnGetCurrentGameDS )
		pFnGetCurrentGameDS = (UFunction*) UObject::GObjObjects()->Data[ 28403 ];

	APlayerReplicationInfo_execGetCurrentGameDS_Parms GetCurrentGameDS_Parms;

	this->ProcessEvent ( pFnGetCurrentGameDS, &GetCurrentGameDS_Parms, NULL );

	return GetCurrentGameDS_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.SeamlessTravelTo
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  NewPRI                         ( CPF_Parm )

void APlayerReplicationInfo::SeamlessTravelTo ( class APlayerReplicationInfo* NewPRI )
{
	static UFunction* pFnSeamlessTravelTo = NULL;

	if ( ! pFnSeamlessTravelTo )
		pFnSeamlessTravelTo = (UFunction*) UObject::GObjObjects()->Data[ 28401 ];

	APlayerReplicationInfo_execSeamlessTravelTo_Parms SeamlessTravelTo_Parms;
	SeamlessTravelTo_Parms.NewPRI = NewPRI;

	this->ProcessEvent ( pFnSeamlessTravelTo, &SeamlessTravelTo_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.IncrementDeaths
// [0x00024002] 
// Parameters infos:
// int                            Amt                            ( CPF_OptionalParm | CPF_Parm )

void APlayerReplicationInfo::IncrementDeaths ( int Amt )
{
	static UFunction* pFnIncrementDeaths = NULL;

	if ( ! pFnIncrementDeaths )
		pFnIncrementDeaths = (UFunction*) UObject::GObjObjects()->Data[ 28399 ];

	APlayerReplicationInfo_execIncrementDeaths_Parms IncrementDeaths_Parms;
	IncrementDeaths_Parms.Amt = Amt;

	this->ProcessEvent ( pFnIncrementDeaths, &IncrementDeaths_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.CopyProperties
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void APlayerReplicationInfo::CopyProperties ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnCopyProperties = NULL;

	if ( ! pFnCopyProperties )
		pFnCopyProperties = (UFunction*) UObject::GObjObjects()->Data[ 28397 ];

	APlayerReplicationInfo_execCopyProperties_Parms CopyProperties_Parms;
	CopyProperties_Parms.PRI = PRI;

	this->ProcessEvent ( pFnCopyProperties, &CopyProperties_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.OverrideWith
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void APlayerReplicationInfo::OverrideWith ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnOverrideWith = NULL;

	if ( ! pFnOverrideWith )
		pFnOverrideWith = (UFunction*) UObject::GObjObjects()->Data[ 28395 ];

	APlayerReplicationInfo_execOverrideWith_Parms OverrideWith_Parms;
	OverrideWith_Parms.PRI = PRI;

	this->ProcessEvent ( pFnOverrideWith, &OverrideWith_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.Duplicate
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class APlayerReplicationInfo* APlayerReplicationInfo::Duplicate ( )
{
	static UFunction* pFnDuplicate = NULL;

	if ( ! pFnDuplicate )
		pFnDuplicate = (UFunction*) UObject::GObjObjects()->Data[ 20984 ];

	APlayerReplicationInfo_execDuplicate_Parms Duplicate_Parms;

	this->ProcessEvent ( pFnDuplicate, &Duplicate_Parms, NULL );

	return Duplicate_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.SetWaitingPlayer
// [0x00020002] 
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void APlayerReplicationInfo::SetWaitingPlayer ( unsigned long B )
{
	static UFunction* pFnSetWaitingPlayer = NULL;

	if ( ! pFnSetWaitingPlayer )
		pFnSetWaitingPlayer = (UFunction*) UObject::GObjObjects()->Data[ 28392 ];

	APlayerReplicationInfo_execSetWaitingPlayer_Parms SetWaitingPlayer_Parms;
	SetWaitingPlayer_Parms.B = B;

	this->ProcessEvent ( pFnSetWaitingPlayer, &SetWaitingPlayer_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.SetPlayerName
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void APlayerReplicationInfo::eventSetPlayerName ( struct FString S )
{
	static UFunction* pFnSetPlayerName = NULL;

	if ( ! pFnSetPlayerName )
		pFnSetPlayerName = (UFunction*) UObject::GObjObjects()->Data[ 28390 ];

	APlayerReplicationInfo_eventSetPlayerName_Parms SetPlayerName_Parms;
	memcpy ( &SetPlayerName_Parms.S, &S, 0x10 );

	this->ProcessEvent ( pFnSetPlayerName, &SetPlayerName_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.Timer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerReplicationInfo::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 28389 ];

	APlayerReplicationInfo_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          YL                             ( CPF_Parm | CPF_OutParm )
// float                          YPos                           ( CPF_Parm | CPF_OutParm )

void APlayerReplicationInfo::DisplayDebug ( class AHUD* HUD, float* YL, float* YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 28383 ];

	APlayerReplicationInfo_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( YL )
		*YL = DisplayDebug_Parms.YL;

	if ( YPos )
		*YPos = DisplayDebug_Parms.YPos;
};

// Function Engine.PlayerReplicationInfo.UpdatePlayerLocation
// [0x00020002] 
// Parameters infos:

void APlayerReplicationInfo::UpdatePlayerLocation ( )
{
	static UFunction* pFnUpdatePlayerLocation = NULL;

	if ( ! pFnUpdatePlayerLocation )
		pFnUpdatePlayerLocation = (UFunction*) UObject::GObjObjects()->Data[ 28379 ];

	APlayerReplicationInfo_execUpdatePlayerLocation_Parms UpdatePlayerLocation_Parms;

	this->ProcessEvent ( pFnUpdatePlayerLocation, &UpdatePlayerLocation_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.GetLocationName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerReplicationInfo::GetLocationName ( )
{
	static UFunction* pFnGetLocationName = NULL;

	if ( ! pFnGetLocationName )
		pFnGetLocationName = (UFunction*) UObject::GObjObjects()->Data[ 28373 ];

	APlayerReplicationInfo_execGetLocationName_Parms GetLocationName_Parms;

	this->ProcessEvent ( pFnGetLocationName, &GetLocationName_Parms, NULL );

	return GetLocationName_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerReplicationInfo::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = (UFunction*) UObject::GObjObjects()->Data[ 28371 ];

	APlayerReplicationInfo_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.Reset
// [0x00020002] 
// Parameters infos:

void APlayerReplicationInfo::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 28369 ];

	APlayerReplicationInfo_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APlayerReplicationInfo::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 28367 ];

	APlayerReplicationInfo_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.ShouldBroadCastWelcomeMessage
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bExiting                       ( CPF_OptionalParm | CPF_Parm )

bool APlayerReplicationInfo::ShouldBroadCastWelcomeMessage ( unsigned long bExiting )
{
	static UFunction* pFnShouldBroadCastWelcomeMessage = NULL;

	if ( ! pFnShouldBroadCastWelcomeMessage )
		pFnShouldBroadCastWelcomeMessage = (UFunction*) UObject::GObjObjects()->Data[ 28364 ];

	APlayerReplicationInfo_execShouldBroadCastWelcomeMessage_Parms ShouldBroadCastWelcomeMessage_Parms;
	ShouldBroadCastWelcomeMessage_Parms.bExiting = bExiting;

	this->ProcessEvent ( pFnShouldBroadCastWelcomeMessage, &ShouldBroadCastWelcomeMessage_Parms, NULL );

	return ShouldBroadCastWelcomeMessage_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.UpdatePing
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )

void APlayerReplicationInfo::UpdatePing ( float TimeStamp )
{
	static UFunction* pFnUpdatePing = NULL;

	if ( ! pFnUpdatePing )
		pFnUpdatePing = (UFunction*) UObject::GObjObjects()->Data[ 10558 ];

	APlayerReplicationInfo_execUpdatePing_Parms UpdatePing_Parms;
	UpdatePing_Parms.TimeStamp = TimeStamp;

	pFnUpdatePing->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdatePing, &UpdatePing_Parms, NULL );

	pFnUpdatePing->FunctionFlags |= 0x400;
};

// Function Engine.PlayerReplicationInfo.ReplicatedDataBinding
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void APlayerReplicationInfo::eventReplicatedDataBinding ( struct FName VarName )
{
	static UFunction* pFnReplicatedDataBinding = NULL;

	if ( ! pFnReplicatedDataBinding )
		pFnReplicatedDataBinding = (UFunction*) UObject::GObjObjects()->Data[ 28361 ];

	APlayerReplicationInfo_eventReplicatedDataBinding_Parms ReplicatedDataBinding_Parms;
	memcpy ( &ReplicatedDataBinding_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedDataBinding, &ReplicatedDataBinding_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void APlayerReplicationInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 28353 ];

	APlayerReplicationInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.SetPlayerTeam
// [0x00020002] 
// Parameters infos:
// class ATeamInfo*               NewTeam                        ( CPF_Parm )

void APlayerReplicationInfo::SetPlayerTeam ( class ATeamInfo* NewTeam )
{
	static UFunction* pFnSetPlayerTeam = NULL;

	if ( ! pFnSetPlayerTeam )
		pFnSetPlayerTeam = (UFunction*) UObject::GObjObjects()->Data[ 28351 ];

	APlayerReplicationInfo_execSetPlayerTeam_Parms SetPlayerTeam_Parms;
	SetPlayerTeam_Parms.NewTeam = NewTeam;

	this->ProcessEvent ( pFnSetPlayerTeam, &SetPlayerTeam_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.ClientInitialize
// [0x00020102] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )

void APlayerReplicationInfo::ClientInitialize ( class AController* C )
{
	static UFunction* pFnClientInitialize = NULL;

	if ( ! pFnClientInitialize )
		pFnClientInitialize = (UFunction*) UObject::GObjObjects()->Data[ 28345 ];

	APlayerReplicationInfo_execClientInitialize_Parms ClientInitialize_Parms;
	ClientInitialize_Parms.C = C;

	this->ProcessEvent ( pFnClientInitialize, &ClientInitialize_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APlayerReplicationInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 28343 ];

	APlayerReplicationInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.GetPlayerAlias
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerReplicationInfo::GetPlayerAlias ( )
{
	static UFunction* pFnGetPlayerAlias = NULL;

	if ( ! pFnGetPlayerAlias )
		pFnGetPlayerAlias = (UFunction*) UObject::GObjObjects()->Data[ 20517 ];

	APlayerReplicationInfo_execGetPlayerAlias_Parms GetPlayerAlias_Parms;

	pFnGetPlayerAlias->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerAlias, &GetPlayerAlias_Parms, NULL );

	pFnGetPlayerAlias->FunctionFlags |= 0x400;

	return GetPlayerAlias_Parms.ReturnValue;
};

// Function Engine.TeamInfo.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ATeamInfo::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = (UFunction*) UObject::GObjObjects()->Data[ 31741 ];

	ATeamInfo_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.TeamInfo.GetTextColor
// [0x00020002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FColor ATeamInfo::GetTextColor ( )
{
	static UFunction* pFnGetTextColor = NULL;

	if ( ! pFnGetTextColor )
		pFnGetTextColor = (UFunction*) UObject::GObjObjects()->Data[ 31739 ];

	ATeamInfo_execGetTextColor_Parms GetTextColor_Parms;

	this->ProcessEvent ( pFnGetTextColor, &GetTextColor_Parms, NULL );

	return GetTextColor_Parms.ReturnValue;
};

// Function Engine.TeamInfo.GetHUDColor
// [0x00020102] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FColor ATeamInfo::GetHUDColor ( )
{
	static UFunction* pFnGetHUDColor = NULL;

	if ( ! pFnGetHUDColor )
		pFnGetHUDColor = (UFunction*) UObject::GObjObjects()->Data[ 31736 ];

	ATeamInfo_execGetHUDColor_Parms GetHUDColor_Parms;

	this->ProcessEvent ( pFnGetHUDColor, &GetHUDColor_Parms, NULL );

	return GetHUDColor_Parms.ReturnValue;
};

// Function Engine.TeamInfo.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ATeamInfo::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = (UFunction*) UObject::GObjObjects()->Data[ 21142 ];

	ATeamInfo_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.TeamInfo.RemoveFromTeam
// [0x00020002] 
// Parameters infos:
// class AController*             Other                          ( CPF_Parm )

void ATeamInfo::RemoveFromTeam ( class AController* Other )
{
	static UFunction* pFnRemoveFromTeam = NULL;

	if ( ! pFnRemoveFromTeam )
		pFnRemoveFromTeam = (UFunction*) UObject::GObjObjects()->Data[ 31734 ];

	ATeamInfo_execRemoveFromTeam_Parms RemoveFromTeam_Parms;
	RemoveFromTeam_Parms.Other = Other;

	this->ProcessEvent ( pFnRemoveFromTeam, &RemoveFromTeam_Parms, NULL );
};

// Function Engine.TeamInfo.AddToTeam
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Other                          ( CPF_Parm )

bool ATeamInfo::AddToTeam ( class AController* Other )
{
	static UFunction* pFnAddToTeam = NULL;

	if ( ! pFnAddToTeam )
		pFnAddToTeam = (UFunction*) UObject::GObjObjects()->Data[ 31730 ];

	ATeamInfo_execAddToTeam_Parms AddToTeam_Parms;
	AddToTeam_Parms.Other = Other;

	this->ProcessEvent ( pFnAddToTeam, &AddToTeam_Parms, NULL );

	return AddToTeam_Parms.ReturnValue;
};

// Function Engine.TeamInfo.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATeamInfo::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 31728 ];

	ATeamInfo_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.TeamInfo.UnbindTeamDataProvider
// [0x00020102] 
// Parameters infos:

void ATeamInfo::UnbindTeamDataProvider ( )
{
	static UFunction* pFnUnbindTeamDataProvider = NULL;

	if ( ! pFnUnbindTeamDataProvider )
		pFnUnbindTeamDataProvider = (UFunction*) UObject::GObjObjects()->Data[ 31726 ];

	ATeamInfo_execUnbindTeamDataProvider_Parms UnbindTeamDataProvider_Parms;

	this->ProcessEvent ( pFnUnbindTeamDataProvider, &UnbindTeamDataProvider_Parms, NULL );
};

// Function Engine.TeamInfo.GetCurrentGameDS
// [0x00020102] 
// Parameters infos:
// class UCurrentGameDataStore*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UCurrentGameDataStore* ATeamInfo::GetCurrentGameDS ( )
{
	static UFunction* pFnGetCurrentGameDS = NULL;

	if ( ! pFnGetCurrentGameDS )
		pFnGetCurrentGameDS = (UFunction*) UObject::GObjObjects()->Data[ 31722 ];

	ATeamInfo_execGetCurrentGameDS_Parms GetCurrentGameDS_Parms;

	this->ProcessEvent ( pFnGetCurrentGameDS, &GetCurrentGameDS_Parms, NULL );

	return GetCurrentGameDS_Parms.ReturnValue;
};

// Function Engine.TeamInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATeamInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 31720 ];

	ATeamInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.Camera.StopCameraAnim
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// class UCameraAnimInst*         AnimInst                       ( CPF_Parm )
// unsigned long                  bImmediate                     ( CPF_OptionalParm | CPF_Parm )

void ACamera::StopCameraAnim ( class UCameraAnimInst* AnimInst, unsigned long bImmediate )
{
	static UFunction* pFnStopCameraAnim = NULL;

	if ( ! pFnStopCameraAnim )
		pFnStopCameraAnim = (UFunction*) UObject::GObjObjects()->Data[ 8846 ];

	ACamera_execStopCameraAnim_Parms StopCameraAnim_Parms;
	StopCameraAnim_Parms.AnimInst = AnimInst;
	StopCameraAnim_Parms.bImmediate = bImmediate;

	pFnStopCameraAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopCameraAnim, &StopCameraAnim_Parms, NULL );

	pFnStopCameraAnim->FunctionFlags |= 0x400;
};

// Function Engine.Camera.StopAllCameraAnimsByType
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// class UCameraAnim*             Anim                           ( CPF_Parm )
// unsigned long                  bImmediate                     ( CPF_OptionalParm | CPF_Parm )

void ACamera::StopAllCameraAnimsByType ( class UCameraAnim* Anim, unsigned long bImmediate )
{
	static UFunction* pFnStopAllCameraAnimsByType = NULL;

	if ( ! pFnStopAllCameraAnimsByType )
		pFnStopAllCameraAnimsByType = (UFunction*) UObject::GObjObjects()->Data[ 8843 ];

	ACamera_execStopAllCameraAnimsByType_Parms StopAllCameraAnimsByType_Parms;
	StopAllCameraAnimsByType_Parms.Anim = Anim;
	StopAllCameraAnimsByType_Parms.bImmediate = bImmediate;

	pFnStopAllCameraAnimsByType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAllCameraAnimsByType, &StopAllCameraAnimsByType_Parms, NULL );

	pFnStopAllCameraAnimsByType->FunctionFlags |= 0x400;
};

// Function Engine.Camera.StopAllCameraAnims
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bImmediate                     ( CPF_OptionalParm | CPF_Parm )

void ACamera::StopAllCameraAnims ( unsigned long bImmediate )
{
	static UFunction* pFnStopAllCameraAnims = NULL;

	if ( ! pFnStopAllCameraAnims )
		pFnStopAllCameraAnims = (UFunction*) UObject::GObjObjects()->Data[ 8841 ];

	ACamera_execStopAllCameraAnims_Parms StopAllCameraAnims_Parms;
	StopAllCameraAnims_Parms.bImmediate = bImmediate;

	pFnStopAllCameraAnims->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAllCameraAnims, &StopAllCameraAnims_Parms, NULL );

	pFnStopAllCameraAnims->FunctionFlags |= 0x400;
};

// Function Engine.Camera.PlayCameraAnim
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// class UCameraAnimInst*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UCameraAnim*             Anim                           ( CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )
// float                          Scale                          ( CPF_OptionalParm | CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRandomStartTime               ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSingleInstance                ( CPF_OptionalParm | CPF_Parm )

class UCameraAnimInst* ACamera::PlayCameraAnim ( class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bRandomStartTime, float Duration, unsigned long bSingleInstance )
{
	static UFunction* pFnPlayCameraAnim = NULL;

	if ( ! pFnPlayCameraAnim )
		pFnPlayCameraAnim = (UFunction*) UObject::GObjObjects()->Data[ 8830 ];

	ACamera_execPlayCameraAnim_Parms PlayCameraAnim_Parms;
	PlayCameraAnim_Parms.Anim = Anim;
	PlayCameraAnim_Parms.Rate = Rate;
	PlayCameraAnim_Parms.Scale = Scale;
	PlayCameraAnim_Parms.BlendInTime = BlendInTime;
	PlayCameraAnim_Parms.BlendOutTime = BlendOutTime;
	PlayCameraAnim_Parms.bLoop = bLoop;
	PlayCameraAnim_Parms.bRandomStartTime = bRandomStartTime;
	PlayCameraAnim_Parms.Duration = Duration;
	PlayCameraAnim_Parms.bSingleInstance = bSingleInstance;

	pFnPlayCameraAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCameraAnim, &PlayCameraAnim_Parms, NULL );

	pFnPlayCameraAnim->FunctionFlags |= 0x400;

	return PlayCameraAnim_Parms.ReturnValue;
};

// Function Engine.Camera.ClearAllCameraShakes
// [0x00020002] 
// Parameters infos:

void ACamera::ClearAllCameraShakes ( )
{
	static UFunction* pFnClearAllCameraShakes = NULL;

	if ( ! pFnClearAllCameraShakes )
		pFnClearAllCameraShakes = (UFunction*) UObject::GObjObjects()->Data[ 8829 ];

	ACamera_execClearAllCameraShakes_Parms ClearAllCameraShakes_Parms;

	this->ProcessEvent ( pFnClearAllCameraShakes, &ClearAllCameraShakes_Parms, NULL );
};

// Function Engine.Camera.PlayWorldCameraShake
// [0x00026002] 
// Parameters infos:
// class UCameraShake*            Shake                          ( CPF_Parm )
// class AActor*                  ShakeInstigator                ( CPF_Parm )
// struct FVector                 Epicenter                      ( CPF_Parm )
// float                          InnerRadius                    ( CPF_Parm )
// float                          OuterRadius                    ( CPF_Parm )
// float                          Falloff                        ( CPF_Parm )
// unsigned long                  bTryForceFeedback              ( CPF_Parm )
// unsigned long                  bOrientShakeTowardsEpicenter   ( CPF_OptionalParm | CPF_Parm )

void ACamera::PlayWorldCameraShake ( class UCameraShake* Shake, class AActor* ShakeInstigator, struct FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, unsigned long bTryForceFeedback, unsigned long bOrientShakeTowardsEpicenter )
{
	static UFunction* pFnPlayWorldCameraShake = NULL;

	if ( ! pFnPlayWorldCameraShake )
		pFnPlayWorldCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 8815 ];

	ACamera_execPlayWorldCameraShake_Parms PlayWorldCameraShake_Parms;
	PlayWorldCameraShake_Parms.Shake = Shake;
	PlayWorldCameraShake_Parms.ShakeInstigator = ShakeInstigator;
	memcpy ( &PlayWorldCameraShake_Parms.Epicenter, &Epicenter, 0xC );
	PlayWorldCameraShake_Parms.InnerRadius = InnerRadius;
	PlayWorldCameraShake_Parms.OuterRadius = OuterRadius;
	PlayWorldCameraShake_Parms.Falloff = Falloff;
	PlayWorldCameraShake_Parms.bTryForceFeedback = bTryForceFeedback;
	PlayWorldCameraShake_Parms.bOrientShakeTowardsEpicenter = bOrientShakeTowardsEpicenter;

	this->ProcessEvent ( pFnPlayWorldCameraShake, &PlayWorldCameraShake_Parms, NULL );
};

// Function Engine.Camera.CalcRadialShakeScale
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ACamera*                 Cam                            ( CPF_Parm )
// struct FVector                 Epicenter                      ( CPF_Parm )
// float                          InnerRadius                    ( CPF_Parm )
// float                          OuterRadius                    ( CPF_Parm )
// float                          Falloff                        ( CPF_Parm )

float ACamera::CalcRadialShakeScale ( class ACamera* Cam, struct FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff )
{
	static UFunction* pFnCalcRadialShakeScale = NULL;

	if ( ! pFnCalcRadialShakeScale )
		pFnCalcRadialShakeScale = (UFunction*) UObject::GObjObjects()->Data[ 8805 ];

	ACamera_execCalcRadialShakeScale_Parms CalcRadialShakeScale_Parms;
	CalcRadialShakeScale_Parms.Cam = Cam;
	memcpy ( &CalcRadialShakeScale_Parms.Epicenter, &Epicenter, 0xC );
	CalcRadialShakeScale_Parms.InnerRadius = InnerRadius;
	CalcRadialShakeScale_Parms.OuterRadius = OuterRadius;
	CalcRadialShakeScale_Parms.Falloff = Falloff;

	this->ProcessEvent ( pFnCalcRadialShakeScale, &CalcRadialShakeScale_Parms, NULL );

	return CalcRadialShakeScale_Parms.ReturnValue;
};

// Function Engine.Camera.StopCameraShake
// [0x00020002] 
// Parameters infos:
// class UCameraShake*            Shake                          ( CPF_Parm )

void ACamera::StopCameraShake ( class UCameraShake* Shake )
{
	static UFunction* pFnStopCameraShake = NULL;

	if ( ! pFnStopCameraShake )
		pFnStopCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 8803 ];

	ACamera_execStopCameraShake_Parms StopCameraShake_Parms;
	StopCameraShake_Parms.Shake = Shake;

	this->ProcessEvent ( pFnStopCameraShake, &StopCameraShake_Parms, NULL );
};

// Function Engine.Camera.PlayCameraShake
// [0x00024002] 
// Parameters infos:
// class UCameraShake*            Shake                          ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )
// unsigned char                  PlaySpace                      ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                UserPlaySpaceRot               ( CPF_OptionalParm | CPF_Parm )

void ACamera::PlayCameraShake ( class UCameraShake* Shake, float Scale, unsigned char PlaySpace, struct FRotator UserPlaySpaceRot )
{
	static UFunction* pFnPlayCameraShake = NULL;

	if ( ! pFnPlayCameraShake )
		pFnPlayCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 8798 ];

	ACamera_execPlayCameraShake_Parms PlayCameraShake_Parms;
	PlayCameraShake_Parms.Shake = Shake;
	PlayCameraShake_Parms.Scale = Scale;
	PlayCameraShake_Parms.PlaySpace = PlaySpace;
	memcpy ( &PlayCameraShake_Parms.UserPlaySpaceRot, &UserPlaySpaceRot, 0xC );

	this->ProcessEvent ( pFnPlayCameraShake, &PlayCameraShake_Parms, NULL );
};

// Function Engine.Camera.ClearCameraLensEffects
// [0x00020002] 
// Parameters infos:

void ACamera::ClearCameraLensEffects ( )
{
	static UFunction* pFnClearCameraLensEffects = NULL;

	if ( ! pFnClearCameraLensEffects )
		pFnClearCameraLensEffects = (UFunction*) UObject::GObjObjects()->Data[ 8796 ];

	ACamera_execClearCameraLensEffects_Parms ClearCameraLensEffects_Parms;

	this->ProcessEvent ( pFnClearCameraLensEffects, &ClearCameraLensEffects_Parms, NULL );
};

// Function Engine.Camera.RemoveCameraLensEffect
// [0x00020002] 
// Parameters infos:
// class AEmitterCameraLensEffectBase* Emitter                        ( CPF_Parm )

void ACamera::RemoveCameraLensEffect ( class AEmitterCameraLensEffectBase* Emitter )
{
	static UFunction* pFnRemoveCameraLensEffect = NULL;

	if ( ! pFnRemoveCameraLensEffect )
		pFnRemoveCameraLensEffect = (UFunction*) UObject::GObjObjects()->Data[ 8794 ];

	ACamera_execRemoveCameraLensEffect_Parms RemoveCameraLensEffect_Parms;
	RemoveCameraLensEffect_Parms.Emitter = Emitter;

	this->ProcessEvent ( pFnRemoveCameraLensEffect, &RemoveCameraLensEffect_Parms, NULL );
};

// Function Engine.Camera.AddCameraLensEffect
// [0x00020002] 
// Parameters infos:
// class UClass*                  LensEffectEmitterClass         ( CPF_Parm )

void ACamera::AddCameraLensEffect ( class UClass* LensEffectEmitterClass )
{
	static UFunction* pFnAddCameraLensEffect = NULL;

	if ( ! pFnAddCameraLensEffect )
		pFnAddCameraLensEffect = (UFunction*) UObject::GObjObjects()->Data[ 8786 ];

	ACamera_execAddCameraLensEffect_Parms AddCameraLensEffect_Parms;
	AddCameraLensEffect_Parms.LensEffectEmitterClass = LensEffectEmitterClass;

	this->ProcessEvent ( pFnAddCameraLensEffect, &AddCameraLensEffect_Parms, NULL );
};

// Function Engine.Camera.FindCameraLensEffect
// [0x00020002] 
// Parameters infos:
// class AEmitterCameraLensEffectBase* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  LensEffectEmitterClass         ( CPF_Parm )

class AEmitterCameraLensEffectBase* ACamera::FindCameraLensEffect ( class UClass* LensEffectEmitterClass )
{
	static UFunction* pFnFindCameraLensEffect = NULL;

	if ( ! pFnFindCameraLensEffect )
		pFnFindCameraLensEffect = (UFunction*) UObject::GObjObjects()->Data[ 8782 ];

	ACamera_execFindCameraLensEffect_Parms FindCameraLensEffect_Parms;
	FindCameraLensEffect_Parms.LensEffectEmitterClass = LensEffectEmitterClass;

	this->ProcessEvent ( pFnFindCameraLensEffect, &FindCameraLensEffect_Parms, NULL );

	return FindCameraLensEffect_Parms.ReturnValue;
};

// Function Engine.Camera.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void ACamera::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 8775 ];

	ACamera_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Camera.AllowPawnRotation
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ACamera::AllowPawnRotation ( )
{
	static UFunction* pFnAllowPawnRotation = NULL;

	if ( ! pFnAllowPawnRotation )
		pFnAllowPawnRotation = (UFunction*) UObject::GObjObjects()->Data[ 8773 ];

	ACamera_execAllowPawnRotation_Parms AllowPawnRotation_Parms;

	this->ProcessEvent ( pFnAllowPawnRotation, &AllowPawnRotation_Parms, NULL );

	return AllowPawnRotation_Parms.ReturnValue;
};

// Function Engine.Camera.ProcessViewRotation
// [0x00420002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                OutViewRotation                ( CPF_Parm | CPF_OutParm )
// struct FRotator                OutDeltaRot                    ( CPF_Parm | CPF_OutParm )

void ACamera::ProcessViewRotation ( float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 8766 ];

	ACamera_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( OutViewRotation )
		memcpy ( OutViewRotation, &ProcessViewRotation_Parms.OutViewRotation, 0xC );

	if ( OutDeltaRot )
		memcpy ( OutDeltaRot, &ProcessViewRotation_Parms.OutDeltaRot, 0xC );
};

// Function Engine.Camera.SetViewTarget
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  NewViewTarget                  ( CPF_Parm )
// struct FViewTargetTransitionParams TransitionParams               ( CPF_OptionalParm | CPF_Parm )

void ACamera::SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams )
{
	static UFunction* pFnSetViewTarget = NULL;

	if ( ! pFnSetViewTarget )
		pFnSetViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 8763 ];

	ACamera_execSetViewTarget_Parms SetViewTarget_Parms;
	SetViewTarget_Parms.NewViewTarget = NewViewTarget;
	memcpy ( &SetViewTarget_Parms.TransitionParams, &TransitionParams, 0xC );

	pFnSetViewTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetViewTarget, &SetViewTarget_Parms, NULL );

	pFnSetViewTarget->FunctionFlags |= 0x400;
};

// Function Engine.Camera.UpdateViewTarget
// [0x00C20002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FTViewTarget            OutVT                          ( CPF_Parm | CPF_OutParm )

void ACamera::UpdateViewTarget ( float DeltaTime, struct FTViewTarget* OutVT )
{
	static UFunction* pFnUpdateViewTarget = NULL;

	if ( ! pFnUpdateViewTarget )
		pFnUpdateViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 8743 ];

	ACamera_execUpdateViewTarget_Parms UpdateViewTarget_Parms;
	UpdateViewTarget_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateViewTarget, &UpdateViewTarget_Parms, NULL );

	if ( OutVT )
		memcpy ( OutVT, &UpdateViewTarget_Parms.OutVT, 0x38 );
};

// Function Engine.Camera.CheckViewTarget
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FTViewTarget            VT                             ( CPF_Parm | CPF_OutParm )

void ACamera::CheckViewTarget ( struct FTViewTarget* VT )
{
	static UFunction* pFnCheckViewTarget = NULL;

	if ( ! pFnCheckViewTarget )
		pFnCheckViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 8741 ];

	ACamera_execCheckViewTarget_Parms CheckViewTarget_Parms;

	pFnCheckViewTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckViewTarget, &CheckViewTarget_Parms, NULL );

	pFnCheckViewTarget->FunctionFlags |= 0x400;

	if ( VT )
		memcpy ( VT, &CheckViewTarget_Parms.VT, 0x38 );
};

// Function Engine.Camera.FillCameraCache
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// struct FTPOV                   NewPOV                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void ACamera::FillCameraCache ( struct FTPOV* NewPOV )
{
	static UFunction* pFnFillCameraCache = NULL;

	if ( ! pFnFillCameraCache )
		pFnFillCameraCache = (UFunction*) UObject::GObjObjects()->Data[ 8727 ];

	ACamera_execFillCameraCache_Parms FillCameraCache_Parms;

	this->ProcessEvent ( pFnFillCameraCache, &FillCameraCache_Parms, NULL );

	if ( NewPOV )
		memcpy ( NewPOV, &FillCameraCache_Parms.NewPOV, 0x1C );
};

// Function Engine.Camera.BlendViewTargets
// [0x00C20003] ( FUNC_Final )
// Parameters infos:
// struct FTPOV                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Alpha                          ( CPF_Parm )
// struct FTViewTarget            A                              ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FTViewTarget            B                              ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FTPOV ACamera::BlendViewTargets ( float Alpha, struct FTViewTarget* A, struct FTViewTarget* B )
{
	static UFunction* pFnBlendViewTargets = NULL;

	if ( ! pFnBlendViewTargets )
		pFnBlendViewTargets = (UFunction*) UObject::GObjObjects()->Data[ 8725 ];

	ACamera_execBlendViewTargets_Parms BlendViewTargets_Parms;
	BlendViewTargets_Parms.Alpha = Alpha;

	this->ProcessEvent ( pFnBlendViewTargets, &BlendViewTargets_Parms, NULL );

	if ( A )
		memcpy ( A, &BlendViewTargets_Parms.A, 0x38 );

	if ( B )
		memcpy ( B, &BlendViewTargets_Parms.B, 0x38 );

	return BlendViewTargets_Parms.ReturnValue;
};

// Function Engine.Camera.UpdateCamera
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ACamera::eventUpdateCamera ( float DeltaTime )
{
	static UFunction* pFnUpdateCamera = NULL;

	if ( ! pFnUpdateCamera )
		pFnUpdateCamera = (UFunction*) UObject::GObjObjects()->Data[ 8710 ];

	ACamera_eventUpdateCamera_Parms UpdateCamera_Parms;
	UpdateCamera_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateCamera, &UpdateCamera_Parms, NULL );
};

// Function Engine.Camera.SetDesiredColorScale
// [0x00020102] 
// Parameters infos:
// struct FVector                 NewColorScale                  ( CPF_Parm )
// float                          InterpTime                     ( CPF_Parm )

void ACamera::SetDesiredColorScale ( struct FVector NewColorScale, float InterpTime )
{
	static UFunction* pFnSetDesiredColorScale = NULL;

	if ( ! pFnSetDesiredColorScale )
		pFnSetDesiredColorScale = (UFunction*) UObject::GObjObjects()->Data[ 8700 ];

	ACamera_execSetDesiredColorScale_Parms SetDesiredColorScale_Parms;
	memcpy ( &SetDesiredColorScale_Parms.NewColorScale, &NewColorScale, 0xC );
	SetDesiredColorScale_Parms.InterpTime = InterpTime;

	this->ProcessEvent ( pFnSetDesiredColorScale, &SetDesiredColorScale_Parms, NULL );
};

// Function Engine.Camera.GetCameraViewPoint
// [0x00420002] 
// Parameters infos:
// struct FVector                 OutCamLoc                      ( CPF_Parm | CPF_OutParm )
// struct FRotator                OutCamRot                      ( CPF_Parm | CPF_OutParm )

void ACamera::GetCameraViewPoint ( struct FVector* OutCamLoc, struct FRotator* OutCamRot )
{
	static UFunction* pFnGetCameraViewPoint = NULL;

	if ( ! pFnGetCameraViewPoint )
		pFnGetCameraViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 8697 ];

	ACamera_execGetCameraViewPoint_Parms GetCameraViewPoint_Parms;

	this->ProcessEvent ( pFnGetCameraViewPoint, &GetCameraViewPoint_Parms, NULL );

	if ( OutCamLoc )
		memcpy ( OutCamLoc, &GetCameraViewPoint_Parms.OutCamLoc, 0xC );

	if ( OutCamRot )
		memcpy ( OutCamRot, &GetCameraViewPoint_Parms.OutCamRot, 0xC );
};

// Function Engine.Camera.SetFOV
// [0x00020002] 
// Parameters infos:
// float                          NewFOV                         ( CPF_Parm )

void ACamera::SetFOV ( float NewFOV )
{
	static UFunction* pFnSetFOV = NULL;

	if ( ! pFnSetFOV )
		pFnSetFOV = (UFunction*) UObject::GObjObjects()->Data[ 8695 ];

	ACamera_execSetFOV_Parms SetFOV_Parms;
	SetFOV_Parms.NewFOV = NewFOV;

	this->ProcessEvent ( pFnSetFOV, &SetFOV_Parms, NULL );
};

// Function Engine.Camera.GetFOVAngle
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ACamera::GetFOVAngle ( )
{
	static UFunction* pFnGetFOVAngle = NULL;

	if ( ! pFnGetFOVAngle )
		pFnGetFOVAngle = (UFunction*) UObject::GObjObjects()->Data[ 8691 ];

	ACamera_execGetFOVAngle_Parms GetFOVAngle_Parms;

	this->ProcessEvent ( pFnGetFOVAngle, &GetFOVAngle_Parms, NULL );

	return GetFOVAngle_Parms.ReturnValue;
};

// Function Engine.Camera.InitializeFor
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void ACamera::InitializeFor ( class APlayerController* PC )
{
	static UFunction* pFnInitializeFor = NULL;

	if ( ! pFnInitializeFor )
		pFnInitializeFor = (UFunction*) UObject::GObjObjects()->Data[ 8683 ];

	ACamera_execInitializeFor_Parms InitializeFor_Parms;
	InitializeFor_Parms.PC = PC;

	this->ProcessEvent ( pFnInitializeFor, &InitializeFor_Parms, NULL );
};

// Function Engine.Camera.ApplyCameraModifiers
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FTPOV                   OutPOV                         ( CPF_Parm | CPF_OutParm )

void ACamera::ApplyCameraModifiers ( float DeltaTime, struct FTPOV* OutPOV )
{
	static UFunction* pFnApplyCameraModifiers = NULL;

	if ( ! pFnApplyCameraModifiers )
		pFnApplyCameraModifiers = (UFunction*) UObject::GObjObjects()->Data[ 8680 ];

	ACamera_execApplyCameraModifiers_Parms ApplyCameraModifiers_Parms;
	ApplyCameraModifiers_Parms.DeltaTime = DeltaTime;

	pFnApplyCameraModifiers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyCameraModifiers, &ApplyCameraModifiers_Parms, NULL );

	pFnApplyCameraModifiers->FunctionFlags |= 0x400;

	if ( OutPOV )
		memcpy ( OutPOV, &ApplyCameraModifiers_Parms.OutPOV, 0x1C );
};

// Function Engine.Camera.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ACamera::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 8679 ];

	ACamera_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Camera.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void ACamera::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 8673 ];

	ACamera_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Camera.CreateCameraModifier
// [0x00080002] 
// Parameters infos:
// class UCameraModifier*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ModifierClass                  ( CPF_Parm )

class UCameraModifier* ACamera::CreateCameraModifier ( class UClass* ModifierClass )
{
	static UFunction* pFnCreateCameraModifier = NULL;

	if ( ! pFnCreateCameraModifier )
		pFnCreateCameraModifier = (UFunction*) UObject::GObjObjects()->Data[ 8667 ];

	ACamera_execCreateCameraModifier_Parms CreateCameraModifier_Parms;
	CreateCameraModifier_Parms.ModifierClass = ModifierClass;

	this->ProcessEvent ( pFnCreateCameraModifier, &CreateCameraModifier_Parms, NULL );

	return CreateCameraModifier_Parms.ReturnValue;
};

// Function Engine.CameraActor.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void ACameraActor::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 16151 ];

	ACameraActor_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.CameraActor.GetCameraView
// [0x00420102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FTPOV                   OutPOV                         ( CPF_Parm | CPF_OutParm )

void ACameraActor::GetCameraView ( float DeltaTime, struct FTPOV* OutPOV )
{
	static UFunction* pFnGetCameraView = NULL;

	if ( ! pFnGetCameraView )
		pFnGetCameraView = (UFunction*) UObject::GObjObjects()->Data[ 16147 ];

	ACameraActor_execGetCameraView_Parms GetCameraView_Parms;
	GetCameraView_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnGetCameraView, &GetCameraView_Parms, NULL );

	if ( OutPOV )
		memcpy ( OutPOV, &GetCameraView_Parms.OutPOV, 0x1C );
};

// Function Engine.CameraAnimInst.SetPlaySpace
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewSpace                       ( CPF_Parm )
// struct FRotator                UserPlaySpace                  ( CPF_OptionalParm | CPF_Parm )

void UCameraAnimInst::SetPlaySpace ( unsigned char NewSpace, struct FRotator UserPlaySpace )
{
	static UFunction* pFnSetPlaySpace = NULL;

	if ( ! pFnSetPlaySpace )
		pFnSetPlaySpace = (UFunction*) UObject::GObjObjects()->Data[ 11871 ];

	UCameraAnimInst_execSetPlaySpace_Parms SetPlaySpace_Parms;
	SetPlaySpace_Parms.NewSpace = NewSpace;
	memcpy ( &SetPlaySpace_Parms.UserPlaySpace, &UserPlaySpace, 0xC );

	pFnSetPlaySpace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPlaySpace, &SetPlaySpace_Parms, NULL );

	pFnSetPlaySpace->FunctionFlags |= 0x400;
};

// Function Engine.CameraAnimInst.ApplyTransientScaling
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          Scalar                         ( CPF_Parm )

void UCameraAnimInst::ApplyTransientScaling ( float Scalar )
{
	static UFunction* pFnApplyTransientScaling = NULL;

	if ( ! pFnApplyTransientScaling )
		pFnApplyTransientScaling = (UFunction*) UObject::GObjObjects()->Data[ 16203 ];

	UCameraAnimInst_execApplyTransientScaling_Parms ApplyTransientScaling_Parms;
	ApplyTransientScaling_Parms.Scalar = Scalar;

	pFnApplyTransientScaling->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyTransientScaling, &ApplyTransientScaling_Parms, NULL );

	pFnApplyTransientScaling->FunctionFlags |= 0x400;
};

// Function Engine.CameraAnimInst.Stop
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bImmediate                     ( CPF_OptionalParm | CPF_Parm )

void UCameraAnimInst::Stop ( unsigned long bImmediate )
{
	static UFunction* pFnStop = NULL;

	if ( ! pFnStop )
		pFnStop = (UFunction*) UObject::GObjObjects()->Data[ 16201 ];

	UCameraAnimInst_execStop_Parms Stop_Parms;
	Stop_Parms.bImmediate = bImmediate;

	pFnStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStop, &Stop_Parms, NULL );

	pFnStop->FunctionFlags |= 0x400;
};

// Function Engine.CameraAnimInst.AdvanceAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// unsigned long                  bJump                          ( CPF_Parm )

void UCameraAnimInst::AdvanceAnim ( float DeltaTime, unsigned long bJump )
{
	static UFunction* pFnAdvanceAnim = NULL;

	if ( ! pFnAdvanceAnim )
		pFnAdvanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 16198 ];

	UCameraAnimInst_execAdvanceAnim_Parms AdvanceAnim_Parms;
	AdvanceAnim_Parms.DeltaTime = DeltaTime;
	AdvanceAnim_Parms.bJump = bJump;

	pFnAdvanceAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdvanceAnim, &AdvanceAnim_Parms, NULL );

	pFnAdvanceAnim->FunctionFlags |= 0x400;
};

// Function Engine.CameraAnimInst.Update
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewRate                        ( CPF_Parm )
// float                          NewScale                       ( CPF_Parm )
// float                          NewBlendInTime                 ( CPF_Parm )
// float                          NewBlendOutTime                ( CPF_Parm )
// float                          NewDuration                    ( CPF_OptionalParm | CPF_Parm )

void UCameraAnimInst::Update ( float NewRate, float NewScale, float NewBlendInTime, float NewBlendOutTime, float NewDuration )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 16192 ];

	UCameraAnimInst_execUpdate_Parms Update_Parms;
	Update_Parms.NewRate = NewRate;
	Update_Parms.NewScale = NewScale;
	Update_Parms.NewBlendInTime = NewBlendInTime;
	Update_Parms.NewBlendOutTime = NewBlendOutTime;
	Update_Parms.NewDuration = NewDuration;

	pFnUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );

	pFnUpdate->FunctionFlags |= 0x400;
};

// Function Engine.CameraAnimInst.PlayEx
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UCameraAnim*             Anim                           ( CPF_Parm )
// class AActor*                  CamActor                       ( CPF_Parm )
// float                          InRate                         ( CPF_Parm )
// float                          InScale                        ( CPF_Parm )
// float                          StartTime                      ( CPF_Parm )
// float                          InBlendInTime                  ( CPF_Parm )
// float                          InBlendOutTime                 ( CPF_Parm )
// unsigned long                  bInLoop                        ( CPF_Parm )
// unsigned long                  bRandomStartTime               ( CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )

void UCameraAnimInst::PlayEx ( class UCameraAnim* Anim, class AActor* CamActor, float InRate, float InScale, float StartTime, float InBlendInTime, float InBlendOutTime, unsigned long bInLoop, unsigned long bRandomStartTime, float Duration )
{
	static UFunction* pFnPlayEx = NULL;

	if ( ! pFnPlayEx )
		pFnPlayEx = (UFunction*) UObject::GObjObjects()->Data[ 16181 ];

	UCameraAnimInst_execPlayEx_Parms PlayEx_Parms;
	PlayEx_Parms.Anim = Anim;
	PlayEx_Parms.CamActor = CamActor;
	PlayEx_Parms.InRate = InRate;
	PlayEx_Parms.InScale = InScale;
	PlayEx_Parms.StartTime = StartTime;
	PlayEx_Parms.InBlendInTime = InBlendInTime;
	PlayEx_Parms.InBlendOutTime = InBlendOutTime;
	PlayEx_Parms.bInLoop = bInLoop;
	PlayEx_Parms.bRandomStartTime = bRandomStartTime;
	PlayEx_Parms.Duration = Duration;

	pFnPlayEx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayEx, &PlayEx_Parms, NULL );

	pFnPlayEx->FunctionFlags |= 0x400;
};

// Function Engine.CameraAnimInst.Play
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UCameraAnim*             Anim                           ( CPF_Parm )
// class AActor*                  CamActor                       ( CPF_Parm )
// float                          InRate                         ( CPF_Parm )
// float                          InScale                        ( CPF_Parm )
// float                          InBlendInTime                  ( CPF_Parm )
// float                          InBlendOutTime                 ( CPF_Parm )
// unsigned long                  bInLoop                        ( CPF_Parm )
// unsigned long                  bRandomStartTime               ( CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )

void UCameraAnimInst::Play ( class UCameraAnim* Anim, class AActor* CamActor, float InRate, float InScale, float InBlendInTime, float InBlendOutTime, unsigned long bInLoop, unsigned long bRandomStartTime, float Duration )
{
	static UFunction* pFnPlay = NULL;

	if ( ! pFnPlay )
		pFnPlay = (UFunction*) UObject::GObjObjects()->Data[ 16171 ];

	UCameraAnimInst_execPlay_Parms Play_Parms;
	Play_Parms.Anim = Anim;
	Play_Parms.CamActor = CamActor;
	Play_Parms.InRate = InRate;
	Play_Parms.InScale = InScale;
	Play_Parms.InBlendInTime = InBlendInTime;
	Play_Parms.InBlendOutTime = InBlendOutTime;
	Play_Parms.bInLoop = bInLoop;
	Play_Parms.bRandomStartTime = bRandomStartTime;
	Play_Parms.Duration = Duration;

	pFnPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlay, &Play_Parms, NULL );

	pFnPlay->FunctionFlags |= 0x400;
};

// Function Engine.CameraModifier.UpdateAlpha
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ACamera*                 Camera                         ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )

void UCameraModifier::UpdateAlpha ( class ACamera* Camera, float DeltaTime )
{
	static UFunction* pFnUpdateAlpha = NULL;

	if ( ! pFnUpdateAlpha )
		pFnUpdateAlpha = (UFunction*) UObject::GObjObjects()->Data[ 16267 ];

	UCameraModifier_execUpdateAlpha_Parms UpdateAlpha_Parms;
	UpdateAlpha_Parms.Camera = Camera;
	UpdateAlpha_Parms.DeltaTime = DeltaTime;

	pFnUpdateAlpha->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateAlpha, &UpdateAlpha_Parms, NULL );

	pFnUpdateAlpha->FunctionFlags |= 0x400;
};

// Function Engine.CameraModifier.ProcessViewRotation
// [0x00420100] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ViewTarget                     ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

bool UCameraModifier::ProcessViewRotation ( class AActor* ViewTarget, float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 8771 ];

	UCameraModifier_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.ViewTarget = ViewTarget;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &ProcessViewRotation_Parms.out_DeltaRot, 0xC );

	return ProcessViewRotation_Parms.ReturnValue;
};

// Function Engine.CameraModifier.ToggleModifier
// [0x00020002] 
// Parameters infos:

void UCameraModifier::ToggleModifier ( )
{
	static UFunction* pFnToggleModifier = NULL;

	if ( ! pFnToggleModifier )
		pFnToggleModifier = (UFunction*) UObject::GObjObjects()->Data[ 16262 ];

	UCameraModifier_execToggleModifier_Parms ToggleModifier_Parms;

	this->ProcessEvent ( pFnToggleModifier, &ToggleModifier_Parms, NULL );
};

// Function Engine.CameraModifier.EnableModifier
// [0x00020002] 
// Parameters infos:

void UCameraModifier::EnableModifier ( )
{
	static UFunction* pFnEnableModifier = NULL;

	if ( ! pFnEnableModifier )
		pFnEnableModifier = (UFunction*) UObject::GObjObjects()->Data[ 16261 ];

	UCameraModifier_execEnableModifier_Parms EnableModifier_Parms;

	this->ProcessEvent ( pFnEnableModifier, &EnableModifier_Parms, NULL );
};

// Function Engine.CameraModifier.DisableModifier
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bImmediate                     ( CPF_OptionalParm | CPF_Parm )

void UCameraModifier::eventDisableModifier ( unsigned long bImmediate )
{
	static UFunction* pFnDisableModifier = NULL;

	if ( ! pFnDisableModifier )
		pFnDisableModifier = (UFunction*) UObject::GObjObjects()->Data[ 16257 ];

	UCameraModifier_eventDisableModifier_Parms DisableModifier_Parms;
	DisableModifier_Parms.bImmediate = bImmediate;

	this->ProcessEvent ( pFnDisableModifier, &DisableModifier_Parms, NULL );
};

// Function Engine.CameraModifier.RemoveCameraModifier
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ACamera*                 Camera                         ( CPF_Parm )

bool UCameraModifier::RemoveCameraModifier ( class ACamera* Camera )
{
	static UFunction* pFnRemoveCameraModifier = NULL;

	if ( ! pFnRemoveCameraModifier )
		pFnRemoveCameraModifier = (UFunction*) UObject::GObjObjects()->Data[ 16253 ];

	UCameraModifier_execRemoveCameraModifier_Parms RemoveCameraModifier_Parms;
	RemoveCameraModifier_Parms.Camera = Camera;

	this->ProcessEvent ( pFnRemoveCameraModifier, &RemoveCameraModifier_Parms, NULL );

	return RemoveCameraModifier_Parms.ReturnValue;
};

// Function Engine.CameraModifier.AddCameraModifier
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ACamera*                 Camera                         ( CPF_Parm )

bool UCameraModifier::AddCameraModifier ( class ACamera* Camera )
{
	static UFunction* pFnAddCameraModifier = NULL;

	if ( ! pFnAddCameraModifier )
		pFnAddCameraModifier = (UFunction*) UObject::GObjObjects()->Data[ 8671 ];

	UCameraModifier_execAddCameraModifier_Parms AddCameraModifier_Parms;
	AddCameraModifier_Parms.Camera = Camera;

	this->ProcessEvent ( pFnAddCameraModifier, &AddCameraModifier_Parms, NULL );

	return AddCameraModifier_Parms.ReturnValue;
};

// Function Engine.CameraModifier.IsDisabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UCameraModifier::IsDisabled ( )
{
	static UFunction* pFnIsDisabled = NULL;

	if ( ! pFnIsDisabled )
		pFnIsDisabled = (UFunction*) UObject::GObjObjects()->Data[ 16243 ];

	UCameraModifier_execIsDisabled_Parms IsDisabled_Parms;

	pFnIsDisabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDisabled, &IsDisabled_Parms, NULL );

	pFnIsDisabled->FunctionFlags |= 0x400;

	return IsDisabled_Parms.ReturnValue;
};

// Function Engine.CameraModifier.ModifyCamera
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ACamera*                 Camera                         ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// struct FTPOV                   OutPOV                         ( CPF_Parm | CPF_OutParm )

bool UCameraModifier::ModifyCamera ( class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV )
{
	static UFunction* pFnModifyCamera = NULL;

	if ( ! pFnModifyCamera )
		pFnModifyCamera = (UFunction*) UObject::GObjObjects()->Data[ 16238 ];

	UCameraModifier_execModifyCamera_Parms ModifyCamera_Parms;
	ModifyCamera_Parms.Camera = Camera;
	ModifyCamera_Parms.DeltaTime = DeltaTime;

	pFnModifyCamera->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnModifyCamera, &ModifyCamera_Parms, NULL );

	pFnModifyCamera->FunctionFlags |= 0x400;

	if ( OutPOV )
		memcpy ( OutPOV, &ModifyCamera_Parms.OutPOV, 0x1C );

	return ModifyCamera_Parms.ReturnValue;
};

// Function Engine.CameraModifier.Init
// [0x00020000] 
// Parameters infos:

void UCameraModifier::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 16237 ];

	UCameraModifier_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Engine.CameraModifier_CameraShake.ModifyCamera
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ACamera*                 Camera                         ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// struct FTPOV                   OutPOV                         ( CPF_Parm | CPF_OutParm )

bool UCameraModifier_CameraShake::ModifyCamera ( class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV )
{
	static UFunction* pFnModifyCamera = NULL;

	if ( ! pFnModifyCamera )
		pFnModifyCamera = (UFunction*) UObject::GObjObjects()->Data[ 16364 ];

	UCameraModifier_CameraShake_execModifyCamera_Parms ModifyCamera_Parms;
	ModifyCamera_Parms.Camera = Camera;
	ModifyCamera_Parms.DeltaTime = DeltaTime;

	pFnModifyCamera->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnModifyCamera, &ModifyCamera_Parms, NULL );

	pFnModifyCamera->FunctionFlags |= 0x400;

	if ( OutPOV )
		memcpy ( OutPOV, &ModifyCamera_Parms.OutPOV, 0x1C );

	return ModifyCamera_Parms.ReturnValue;
};

// Function Engine.CameraModifier_CameraShake.UpdateCameraShake
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FCameraShakeInstance    Shake                          ( CPF_Parm | CPF_OutParm )
// struct FTPOV                   OutPOV                         ( CPF_Parm | CPF_OutParm )

void UCameraModifier_CameraShake::UpdateCameraShake ( float DeltaTime, struct FCameraShakeInstance* Shake, struct FTPOV* OutPOV )
{
	static UFunction* pFnUpdateCameraShake = NULL;

	if ( ! pFnUpdateCameraShake )
		pFnUpdateCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 16360 ];

	UCameraModifier_CameraShake_execUpdateCameraShake_Parms UpdateCameraShake_Parms;
	UpdateCameraShake_Parms.DeltaTime = DeltaTime;

	pFnUpdateCameraShake->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCameraShake, &UpdateCameraShake_Parms, NULL );

	pFnUpdateCameraShake->FunctionFlags |= 0x400;

	if ( Shake )
		memcpy ( Shake, &UpdateCameraShake_Parms.Shake, 0x90 );

	if ( OutPOV )
		memcpy ( OutPOV, &UpdateCameraShake_Parms.OutPOV, 0x1C );
};

// Function Engine.CameraModifier_CameraShake.RemoveAllCameraShakes
// [0x00020002] 
// Parameters infos:

void UCameraModifier_CameraShake::RemoveAllCameraShakes ( )
{
	static UFunction* pFnRemoveAllCameraShakes = NULL;

	if ( ! pFnRemoveAllCameraShakes )
		pFnRemoveAllCameraShakes = (UFunction*) UObject::GObjObjects()->Data[ 16357 ];

	UCameraModifier_CameraShake_execRemoveAllCameraShakes_Parms RemoveAllCameraShakes_Parms;

	this->ProcessEvent ( pFnRemoveAllCameraShakes, &RemoveAllCameraShakes_Parms, NULL );
};

// Function Engine.CameraModifier_CameraShake.RemoveCameraShake
// [0x00020002] 
// Parameters infos:
// class UCameraShake*            Shake                          ( CPF_Parm )

void UCameraModifier_CameraShake::RemoveCameraShake ( class UCameraShake* Shake )
{
	static UFunction* pFnRemoveCameraShake = NULL;

	if ( ! pFnRemoveCameraShake )
		pFnRemoveCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 16353 ];

	UCameraModifier_CameraShake_execRemoveCameraShake_Parms RemoveCameraShake_Parms;
	RemoveCameraShake_Parms.Shake = Shake;

	this->ProcessEvent ( pFnRemoveCameraShake, &RemoveCameraShake_Parms, NULL );
};

// Function Engine.CameraModifier_CameraShake.AddCameraShake
// [0x00024002] 
// Parameters infos:
// class UCameraShake*            NewShake                       ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )
// unsigned char                  PlaySpace                      ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                UserPlaySpaceRot               ( CPF_OptionalParm | CPF_Parm )

void UCameraModifier_CameraShake::AddCameraShake ( class UCameraShake* NewShake, float Scale, unsigned char PlaySpace, struct FRotator UserPlaySpaceRot )
{
	static UFunction* pFnAddCameraShake = NULL;

	if ( ! pFnAddCameraShake )
		pFnAddCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 16346 ];

	UCameraModifier_CameraShake_execAddCameraShake_Parms AddCameraShake_Parms;
	AddCameraShake_Parms.NewShake = NewShake;
	AddCameraShake_Parms.Scale = Scale;
	AddCameraShake_Parms.PlaySpace = PlaySpace;
	memcpy ( &AddCameraShake_Parms.UserPlaySpaceRot, &UserPlaySpaceRot, 0xC );

	this->ProcessEvent ( pFnAddCameraShake, &AddCameraShake_Parms, NULL );
};

// Function Engine.CameraModifier_CameraShake.InitializeShake
// [0x00084002] 
// Parameters infos:
// struct FCameraShakeInstance    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UCameraShake*            NewShake                       ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )
// unsigned char                  PlaySpace                      ( CPF_Parm )
// struct FRotator                UserPlaySpaceRot               ( CPF_OptionalParm | CPF_Parm )

struct FCameraShakeInstance UCameraModifier_CameraShake::InitializeShake ( class UCameraShake* NewShake, float Scale, unsigned char PlaySpace, struct FRotator UserPlaySpaceRot )
{
	static UFunction* pFnInitializeShake = NULL;

	if ( ! pFnInitializeShake )
		pFnInitializeShake = (UFunction*) UObject::GObjObjects()->Data[ 16336 ];

	UCameraModifier_CameraShake_execInitializeShake_Parms InitializeShake_Parms;
	InitializeShake_Parms.NewShake = NewShake;
	InitializeShake_Parms.Scale = Scale;
	InitializeShake_Parms.PlaySpace = PlaySpace;
	memcpy ( &InitializeShake_Parms.UserPlaySpaceRot, &UserPlaySpaceRot, 0xC );

	this->ProcessEvent ( pFnInitializeShake, &InitializeShake_Parms, NULL );

	return InitializeShake_Parms.ReturnValue;
};

// Function Engine.CameraModifier_CameraShake.ReinitShake
// [0x00080002] 
// Parameters infos:
// int                            ActiveShakeIdx                 ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void UCameraModifier_CameraShake::ReinitShake ( int ActiveShakeIdx, float Scale )
{
	static UFunction* pFnReinitShake = NULL;

	if ( ! pFnReinitShake )
		pFnReinitShake = (UFunction*) UObject::GObjObjects()->Data[ 16326 ];

	UCameraModifier_CameraShake_execReinitShake_Parms ReinitShake_Parms;
	ReinitShake_Parms.ActiveShakeIdx = ActiveShakeIdx;
	ReinitShake_Parms.Scale = Scale;

	this->ProcessEvent ( pFnReinitShake, &ReinitShake_Parms, NULL );
};

// Function Engine.CameraModifier_CameraShake.InitializeOffset
// [0x00482002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FFOscillator            Param                          ( CPF_Const | CPF_Parm | CPF_OutParm )

float UCameraModifier_CameraShake::InitializeOffset ( struct FFOscillator* Param )
{
	static UFunction* pFnInitializeOffset = NULL;

	if ( ! pFnInitializeOffset )
		pFnInitializeOffset = (UFunction*) UObject::GObjObjects()->Data[ 16323 ];

	UCameraModifier_CameraShake_execInitializeOffset_Parms InitializeOffset_Parms;

	this->ProcessEvent ( pFnInitializeOffset, &InitializeOffset_Parms, NULL );

	if ( Param )
		memcpy ( Param, &InitializeOffset_Parms.Param, 0xC );

	return InitializeOffset_Parms.ReturnValue;
};

// Function Engine.CameraShake.GetLocOscillationMagnitude
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UCameraShake::GetLocOscillationMagnitude ( )
{
	static UFunction* pFnGetLocOscillationMagnitude = NULL;

	if ( ! pFnGetLocOscillationMagnitude )
		pFnGetLocOscillationMagnitude = (UFunction*) UObject::GObjObjects()->Data[ 16301 ];

	UCameraShake_execGetLocOscillationMagnitude_Parms GetLocOscillationMagnitude_Parms;

	this->ProcessEvent ( pFnGetLocOscillationMagnitude, &GetLocOscillationMagnitude_Parms, NULL );

	return GetLocOscillationMagnitude_Parms.ReturnValue;
};

// Function Engine.CameraShake.GetRotOscillationMagnitude
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UCameraShake::GetRotOscillationMagnitude ( )
{
	static UFunction* pFnGetRotOscillationMagnitude = NULL;

	if ( ! pFnGetRotOscillationMagnitude )
		pFnGetRotOscillationMagnitude = (UFunction*) UObject::GObjObjects()->Data[ 16302 ];

	UCameraShake_execGetRotOscillationMagnitude_Parms GetRotOscillationMagnitude_Parms;

	this->ProcessEvent ( pFnGetRotOscillationMagnitude, &GetRotOscillationMagnitude_Parms, NULL );

	return GetRotOscillationMagnitude_Parms.ReturnValue;
};

// Function Engine.BioSFHandler.HandleButtonRefresh
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// unsigned long                  usingGamepad                   ( CPF_Parm )

void UBioSFHandler::eventHandleButtonRefresh ( unsigned long usingGamepad )
{
	static UFunction* pFnHandleButtonRefresh = NULL;

	if ( ! pFnHandleButtonRefresh )
		pFnHandleButtonRefresh = (UFunction*) UObject::GObjObjects()->Data[ 15228 ];

	UBioSFHandler_eventHandleButtonRefresh_Parms HandleButtonRefresh_Parms;
	HandleButtonRefresh_Parms.usingGamepad = usingGamepad;

	this->ProcessEvent ( pFnHandleButtonRefresh, &HandleButtonRefresh_Parms, NULL );
};

// Function Engine.BioSFHandler.PlayGuiSoundString
// [0x00020002] 
// Parameters infos:
// struct FString                 sSound                         ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFHandler::PlayGuiSoundString ( struct FString sSound )
{
	static UFunction* pFnPlayGuiSoundString = NULL;

	if ( ! pFnPlayGuiSoundString )
		pFnPlayGuiSoundString = (UFunction*) UObject::GObjObjects()->Data[ 15226 ];

	UBioSFHandler_execPlayGuiSoundString_Parms PlayGuiSoundString_Parms;
	memcpy ( &PlayGuiSoundString_Parms.sSound, &sSound, 0x10 );

	this->ProcessEvent ( pFnPlayGuiSoundString, &PlayGuiSoundString_Parms, NULL );
};

// Function Engine.BioSFHandler.GetPlayerController
// [0x00020002] 
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class APlayerController* UBioSFHandler::GetPlayerController ( )
{
	static UFunction* pFnGetPlayerController = NULL;

	if ( ! pFnGetPlayerController )
		pFnGetPlayerController = (UFunction*) UObject::GObjObjects()->Data[ 15222 ];

	UBioSFHandler_execGetPlayerController_Parms GetPlayerController_Parms;

	this->ProcessEvent ( pFnGetPlayerController, &GetPlayerController_Parms, NULL );

	return GetPlayerController_Parms.ReturnValue;
};

// Function Engine.BioSFHandler.QueueCommand
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FBioSFQueuedCommand     stQueuedCommand                ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler::QueueCommand ( struct FBioSFQueuedCommand* stQueuedCommand )
{
	static UFunction* pFnQueueCommand = NULL;

	if ( ! pFnQueueCommand )
		pFnQueueCommand = (UFunction*) UObject::GObjObjects()->Data[ 15220 ];

	UBioSFHandler_execQueueCommand_Parms QueueCommand_Parms;

	pFnQueueCommand->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnQueueCommand, &QueueCommand_Parms, NULL );

	pFnQueueCommand->FunctionFlags |= 0x400;

	if ( stQueuedCommand )
		memcpy ( stQueuedCommand, &QueueCommand_Parms.stQueuedCommand, 0x20 );
};

// Function Engine.BioSFHandler.PauseMenuAdditionalProcessing
// [0x00020000] 
// Parameters infos:

void UBioSFHandler::PauseMenuAdditionalProcessing ( )
{
	static UFunction* pFnPauseMenuAdditionalProcessing = NULL;

	if ( ! pFnPauseMenuAdditionalProcessing )
		pFnPauseMenuAdditionalProcessing = (UFunction*) UObject::GObjObjects()->Data[ 15219 ];

	UBioSFHandler_execPauseMenuAdditionalProcessing_Parms PauseMenuAdditionalProcessing_Parms;

	this->ProcessEvent ( pFnPauseMenuAdditionalProcessing, &PauseMenuAdditionalProcessing_Parms, NULL );
};

// Function Engine.BioSFHandler.SetExternalTextureOnPanel
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Resource                       ( CPF_Parm | CPF_NeedCtorLink )
// class UTexture*                Texture                        ( CPF_Parm )

bool UBioSFHandler::SetExternalTextureOnPanel ( struct FString Resource, class UTexture* Texture )
{
	static UFunction* pFnSetExternalTextureOnPanel = NULL;

	if ( ! pFnSetExternalTextureOnPanel )
		pFnSetExternalTextureOnPanel = (UFunction*) UObject::GObjObjects()->Data[ 15215 ];

	UBioSFHandler_execSetExternalTextureOnPanel_Parms SetExternalTextureOnPanel_Parms;
	memcpy ( &SetExternalTextureOnPanel_Parms.Resource, &Resource, 0x10 );
	SetExternalTextureOnPanel_Parms.Texture = Texture;

	pFnSetExternalTextureOnPanel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetExternalTextureOnPanel, &SetExternalTextureOnPanel_Parms, NULL );

	pFnSetExternalTextureOnPanel->FunctionFlags |= 0x400;

	return SetExternalTextureOnPanel_Parms.ReturnValue;
};

// Function Engine.BioSFHandler.StopGuiVoice
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFHandler::StopGuiVoice ( )
{
	static UFunction* pFnStopGuiVoice = NULL;

	if ( ! pFnStopGuiVoice )
		pFnStopGuiVoice = (UFunction*) UObject::GObjObjects()->Data[ 15214 ];

	UBioSFHandler_execStopGuiVoice_Parms StopGuiVoice_Parms;

	pFnStopGuiVoice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopGuiVoice, &StopGuiVoice_Parms, NULL );

	pFnStopGuiVoice->FunctionFlags |= 0x400;
};

// Function Engine.BioSFHandler.PlayGuiVoice
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmSound                        ( CPF_Parm )

void UBioSFHandler::PlayGuiVoice ( struct FName nmSound )
{
	static UFunction* pFnPlayGuiVoice = NULL;

	if ( ! pFnPlayGuiVoice )
		pFnPlayGuiVoice = (UFunction*) UObject::GObjObjects()->Data[ 15212 ];

	UBioSFHandler_execPlayGuiVoice_Parms PlayGuiVoice_Parms;
	memcpy ( &PlayGuiVoice_Parms.nmSound, &nmSound, 0x8 );

	pFnPlayGuiVoice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayGuiVoice, &PlayGuiVoice_Parms, NULL );

	pFnPlayGuiVoice->FunctionFlags |= 0x400;
};

// Function Engine.BioSFHandler.StopGuiMusic
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFHandler::StopGuiMusic ( )
{
	static UFunction* pFnStopGuiMusic = NULL;

	if ( ! pFnStopGuiMusic )
		pFnStopGuiMusic = (UFunction*) UObject::GObjObjects()->Data[ 15211 ];

	UBioSFHandler_execStopGuiMusic_Parms StopGuiMusic_Parms;

	pFnStopGuiMusic->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopGuiMusic, &StopGuiMusic_Parms, NULL );

	pFnStopGuiMusic->FunctionFlags |= 0x400;
};

// Function Engine.BioSFHandler.PlayGuiMusic
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmMusic                        ( CPF_Parm )
// unsigned long                  bForceRestart                  ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler::PlayGuiMusic ( struct FName nmMusic, unsigned long bForceRestart )
{
	static UFunction* pFnPlayGuiMusic = NULL;

	if ( ! pFnPlayGuiMusic )
		pFnPlayGuiMusic = (UFunction*) UObject::GObjObjects()->Data[ 15208 ];

	UBioSFHandler_execPlayGuiMusic_Parms PlayGuiMusic_Parms;
	memcpy ( &PlayGuiMusic_Parms.nmMusic, &nmMusic, 0x8 );
	PlayGuiMusic_Parms.bForceRestart = bForceRestart;

	pFnPlayGuiMusic->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayGuiMusic, &PlayGuiMusic_Parms, NULL );

	pFnPlayGuiMusic->FunctionFlags |= 0x400;
};

// Function Engine.BioSFHandler.PlayGuiSound
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmSound                        ( CPF_Parm )

void UBioSFHandler::PlayGuiSound ( struct FName nmSound )
{
	static UFunction* pFnPlayGuiSound = NULL;

	if ( ! pFnPlayGuiSound )
		pFnPlayGuiSound = (UFunction*) UObject::GObjObjects()->Data[ 15206 ];

	UBioSFHandler_execPlayGuiSound_Parms PlayGuiSound_Parms;
	memcpy ( &PlayGuiSound_Parms.nmSound, &nmSound, 0x8 );

	pFnPlayGuiSound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayGuiSound, &PlayGuiSound_Parms, NULL );

	pFnPlayGuiSound->FunctionFlags |= 0x400;
};

// Function Engine.BioSFHandler.HandleInputEvent
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler::eventHandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 15203 ];

	UBioSFHandler_eventHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function Engine.BioSFHandler.SetWorld
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFHandler::SetWorld ( )
{
	static UFunction* pFnSetWorld = NULL;

	if ( ! pFnSetWorld )
		pFnSetWorld = (UFunction*) UObject::GObjObjects()->Data[ 15202 ];

	UBioSFHandler_execSetWorld_Parms SetWorld_Parms;

	pFnSetWorld->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWorld, &SetWorld_Parms, NULL );

	pFnSetWorld->FunctionFlags |= 0x400;
};

// Function Engine.BioSFHandler.SendMouseToScaleForm
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  nEvent                         ( CPF_Parm )

void UBioSFHandler::SendMouseToScaleForm ( unsigned char nEvent )
{
	static UFunction* pFnSendMouseToScaleForm = NULL;

	if ( ! pFnSendMouseToScaleForm )
		pFnSendMouseToScaleForm = (UFunction*) UObject::GObjObjects()->Data[ 15200 ];

	UBioSFHandler_execSendMouseToScaleForm_Parms SendMouseToScaleForm_Parms;
	SendMouseToScaleForm_Parms.nEvent = nEvent;

	pFnSendMouseToScaleForm->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendMouseToScaleForm, &SendMouseToScaleForm_Parms, NULL );

	pFnSendMouseToScaleForm->FunctionFlags |= 0x400;
};

// Function Engine.BioSFHandler.SetMouseShown
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  showIt                         ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler::SetMouseShown ( unsigned long showIt )
{
	static UFunction* pFnSetMouseShown = NULL;

	if ( ! pFnSetMouseShown )
		pFnSetMouseShown = (UFunction*) UObject::GObjObjects()->Data[ 15198 ];

	UBioSFHandler_execSetMouseShown_Parms SetMouseShown_Parms;
	SetMouseShown_Parms.showIt = showIt;

	pFnSetMouseShown->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMouseShown, &SetMouseShown_Parms, NULL );

	pFnSetMouseShown->FunctionFlags |= 0x400;
};

// Function Engine.BioSFHandler.IsMouseShown
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioSFHandler::IsMouseShown ( )
{
	static UFunction* pFnIsMouseShown = NULL;

	if ( ! pFnIsMouseShown )
		pFnIsMouseShown = (UFunction*) UObject::GObjObjects()->Data[ 15196 ];

	UBioSFHandler_execIsMouseShown_Parms IsMouseShown_Parms;

	pFnIsMouseShown->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMouseShown, &IsMouseShown_Parms, NULL );

	pFnIsMouseShown->FunctionFlags |= 0x400;

	return IsMouseShown_Parms.ReturnValue;
};

// Function Engine.BioSFHandler.OnAspectRatioChanged
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UBioSFHandler::eventOnAspectRatioChanged ( )
{
	static UFunction* pFnOnAspectRatioChanged = NULL;

	if ( ! pFnOnAspectRatioChanged )
		pFnOnAspectRatioChanged = (UFunction*) UObject::GObjObjects()->Data[ 15195 ];

	UBioSFHandler_eventOnAspectRatioChanged_Parms OnAspectRatioChanged_Parms;

	this->ProcessEvent ( pFnOnAspectRatioChanged, &OnAspectRatioChanged_Parms, NULL );
};

// Function Engine.BioSFHandler.IsVisibleAndEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioSFHandler::eventIsVisibleAndEnabled ( )
{
	static UFunction* pFnIsVisibleAndEnabled = NULL;

	if ( ! pFnIsVisibleAndEnabled )
		pFnIsVisibleAndEnabled = (UFunction*) UObject::GObjObjects()->Data[ 15191 ];

	UBioSFHandler_eventIsVisibleAndEnabled_Parms IsVisibleAndEnabled_Parms;

	this->ProcessEvent ( pFnIsVisibleAndEnabled, &IsVisibleAndEnabled_Parms, NULL );

	return IsVisibleAndEnabled_Parms.ReturnValue;
};

// Function Engine.BioSFHandler.OnInputFocusRecieved
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UBioSFHandler::eventOnInputFocusRecieved ( )
{
	static UFunction* pFnOnInputFocusRecieved = NULL;

	if ( ! pFnOnInputFocusRecieved )
		pFnOnInputFocusRecieved = (UFunction*) UObject::GObjObjects()->Data[ 15190 ];

	UBioSFHandler_eventOnInputFocusRecieved_Parms OnInputFocusRecieved_Parms;

	this->ProcessEvent ( pFnOnInputFocusRecieved, &OnInputFocusRecieved_Parms, NULL );
};

// Function Engine.BioSFHandler.OnInputFocusLost
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UBioSFHandler::eventOnInputFocusLost ( )
{
	static UFunction* pFnOnInputFocusLost = NULL;

	if ( ! pFnOnInputFocusLost )
		pFnOnInputFocusLost = (UFunction*) UObject::GObjObjects()->Data[ 15189 ];

	UBioSFHandler_eventOnInputFocusLost_Parms OnInputFocusLost_Parms;

	this->ProcessEvent ( pFnOnInputFocusLost, &OnInputFocusLost_Parms, NULL );
};

// Function Engine.BioSFHandler.GameSessionEnded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler::GameSessionEnded ( )
{
	static UFunction* pFnGameSessionEnded = NULL;

	if ( ! pFnGameSessionEnded )
		pFnGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 15187 ];

	UBioSFHandler_execGameSessionEnded_Parms GameSessionEnded_Parms;

	this->ProcessEvent ( pFnGameSessionEnded, &GameSessionEnded_Parms, NULL );
};

// Function Engine.BioSFHandler.OnPanelRemoved
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSFHandler::eventOnPanelRemoved ( )
{
	static UFunction* pFnOnPanelRemoved = NULL;

	if ( ! pFnOnPanelRemoved )
		pFnOnPanelRemoved = (UFunction*) UObject::GObjObjects()->Data[ 15186 ];

	UBioSFHandler_eventOnPanelRemoved_Parms OnPanelRemoved_Parms;

	this->ProcessEvent ( pFnOnPanelRemoved, &OnPanelRemoved_Parms, NULL );
};

// Function Engine.BioSFHandler.HandleInputConfigurations
// [0x00020002] 
// Parameters infos:
// unsigned long                  bMenuAdvanceSwapped            ( CPF_Parm )
// unsigned long                  bStickSouthpaw                 ( CPF_Parm )
// unsigned long                  bTriggerSouthpaw               ( CPF_Parm )
// unsigned long                  bTriggersShouldersSwapped      ( CPF_Parm )

void UBioSFHandler::HandleInputConfigurations ( unsigned long bMenuAdvanceSwapped, unsigned long bStickSouthpaw, unsigned long bTriggerSouthpaw, unsigned long bTriggersShouldersSwapped )
{
	static UFunction* pFnHandleInputConfigurations = NULL;

	if ( ! pFnHandleInputConfigurations )
		pFnHandleInputConfigurations = (UFunction*) UObject::GObjObjects()->Data[ 15178 ];

	UBioSFHandler_execHandleInputConfigurations_Parms HandleInputConfigurations_Parms;
	HandleInputConfigurations_Parms.bMenuAdvanceSwapped = bMenuAdvanceSwapped;
	HandleInputConfigurations_Parms.bStickSouthpaw = bStickSouthpaw;
	HandleInputConfigurations_Parms.bTriggerSouthpaw = bTriggerSouthpaw;
	HandleInputConfigurations_Parms.bTriggersShouldersSwapped = bTriggersShouldersSwapped;

	this->ProcessEvent ( pFnHandleInputConfigurations, &HandleInputConfigurations_Parms, NULL );
};

// Function Engine.BioSFHandler.UpdateInputConfigurations
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSFHandler::eventUpdateInputConfigurations ( )
{
	static UFunction* pFnUpdateInputConfigurations = NULL;

	if ( ! pFnUpdateInputConfigurations )
		pFnUpdateInputConfigurations = (UFunction*) UObject::GObjObjects()->Data[ 15166 ];

	UBioSFHandler_eventUpdateInputConfigurations_Parms UpdateInputConfigurations_Parms;

	this->ProcessEvent ( pFnUpdateInputConfigurations, &UpdateInputConfigurations_Parms, NULL );
};

// Function Engine.BioSFHandler.OnPanelAdded
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSFHandler::eventOnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 15165 ];

	UBioSFHandler_eventOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function Engine.BioSFHandler.Update
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void UBioSFHandler::eventUpdate ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 15163 ];

	UBioSFHandler_eventUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function Engine.BioSFHandler.HandleExternalEvent
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// unsigned char                  nHandler                       ( CPF_Parm )
// unsigned char                  nCommand                       ( CPF_Parm )
// struct TArray<struct FString>  lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler::eventHandleExternalEvent ( unsigned char nHandler, unsigned char nCommand, struct TArray<struct FString>* lstArguments )
{
	static UFunction* pFnHandleExternalEvent = NULL;

	if ( ! pFnHandleExternalEvent )
		pFnHandleExternalEvent = (UFunction*) UObject::GObjObjects()->Data[ 15158 ];

	UBioSFHandler_eventHandleExternalEvent_Parms HandleExternalEvent_Parms;
	HandleExternalEvent_Parms.nHandler = nHandler;
	HandleExternalEvent_Parms.nCommand = nCommand;

	this->ProcessEvent ( pFnHandleExternalEvent, &HandleExternalEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleExternalEvent_Parms.lstArguments, 0x10 );
};

// Function Engine.BioSFHandler.HandleEvent
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// unsigned char                  nCommand                       ( CPF_Parm )
// struct TArray<struct FString>  lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler::eventHandleEvent ( unsigned char nCommand, struct TArray<struct FString>* lstArguments )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 15154 ];

	UBioSFHandler_eventHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.nCommand = nCommand;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleEvent_Parms.lstArguments, 0x10 );
};

// Function Engine.BioSFHandler.SetHighShadowBias
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bTurn                          ( CPF_Parm )

void UBioSFHandler::SetHighShadowBias ( unsigned long bTurn )
{
	static UFunction* pFnSetHighShadowBias = NULL;

	if ( ! pFnSetHighShadowBias )
		pFnSetHighShadowBias = (UFunction*) UObject::GObjObjects()->Data[ 15152 ];

	UBioSFHandler_execSetHighShadowBias_Parms SetHighShadowBias_Parms;
	SetHighShadowBias_Parms.bTurn = bTurn;

	pFnSetHighShadowBias->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHighShadowBias, &SetHighShadowBias_Parms, NULL );

	pFnSetHighShadowBias->FunctionFlags |= 0x400;
};

// Function Engine.BioSFManager.IsTriggerShoulderSwapped
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioSFManager::IsTriggerShoulderSwapped ( )
{
	static UFunction* pFnIsTriggerShoulderSwapped = NULL;

	if ( ! pFnIsTriggerShoulderSwapped )
		pFnIsTriggerShoulderSwapped = (UFunction*) UObject::GObjObjects()->Data[ 15176 ];

	UBioSFManager_execIsTriggerShoulderSwapped_Parms IsTriggerShoulderSwapped_Parms;

	pFnIsTriggerShoulderSwapped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTriggerShoulderSwapped, &IsTriggerShoulderSwapped_Parms, NULL );

	pFnIsTriggerShoulderSwapped->FunctionFlags |= 0x400;

	return IsTriggerShoulderSwapped_Parms.ReturnValue;
};

// Function Engine.BioSFManager.IsTriggerSouthpaw
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioSFManager::IsTriggerSouthpaw ( )
{
	static UFunction* pFnIsTriggerSouthpaw = NULL;

	if ( ! pFnIsTriggerSouthpaw )
		pFnIsTriggerSouthpaw = (UFunction*) UObject::GObjObjects()->Data[ 15174 ];

	UBioSFManager_execIsTriggerSouthpaw_Parms IsTriggerSouthpaw_Parms;

	pFnIsTriggerSouthpaw->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTriggerSouthpaw, &IsTriggerSouthpaw_Parms, NULL );

	pFnIsTriggerSouthpaw->FunctionFlags |= 0x400;

	return IsTriggerSouthpaw_Parms.ReturnValue;
};

// Function Engine.BioSFManager.IsStickSouthpaw
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioSFManager::IsStickSouthpaw ( )
{
	static UFunction* pFnIsStickSouthpaw = NULL;

	if ( ! pFnIsStickSouthpaw )
		pFnIsStickSouthpaw = (UFunction*) UObject::GObjObjects()->Data[ 15172 ];

	UBioSFManager_execIsStickSouthpaw_Parms IsStickSouthpaw_Parms;

	pFnIsStickSouthpaw->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsStickSouthpaw, &IsStickSouthpaw_Parms, NULL );

	pFnIsStickSouthpaw->FunctionFlags |= 0x400;

	return IsStickSouthpaw_Parms.ReturnValue;
};

// Function Engine.BioSFManager.IsEnterMenuButtonAssignmentSwapped
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioSFManager::IsEnterMenuButtonAssignmentSwapped ( )
{
	static UFunction* pFnIsEnterMenuButtonAssignmentSwapped = NULL;

	if ( ! pFnIsEnterMenuButtonAssignmentSwapped )
		pFnIsEnterMenuButtonAssignmentSwapped = (UFunction*) UObject::GObjObjects()->Data[ 15170 ];

	UBioSFManager_execIsEnterMenuButtonAssignmentSwapped_Parms IsEnterMenuButtonAssignmentSwapped_Parms;

	pFnIsEnterMenuButtonAssignmentSwapped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEnterMenuButtonAssignmentSwapped, &IsEnterMenuButtonAssignmentSwapped_Parms, NULL );

	pFnIsEnterMenuButtonAssignmentSwapped->FunctionFlags |= 0x400;

	return IsEnterMenuButtonAssignmentSwapped_Parms.ReturnValue;
};

// Function Engine.BioSFManager.IsGuiVisibleAndEnabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   Tag                            ( CPF_Parm )

bool UBioSFManager::IsGuiVisibleAndEnabled ( struct FName Tag )
{
	static UFunction* pFnIsGuiVisibleAndEnabled = NULL;

	if ( ! pFnIsGuiVisibleAndEnabled )
		pFnIsGuiVisibleAndEnabled = (UFunction*) UObject::GObjObjects()->Data[ 15802 ];

	UBioSFManager_execIsGuiVisibleAndEnabled_Parms IsGuiVisibleAndEnabled_Parms;
	memcpy ( &IsGuiVisibleAndEnabled_Parms.Tag, &Tag, 0x8 );

	pFnIsGuiVisibleAndEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsGuiVisibleAndEnabled, &IsGuiVisibleAndEnabled_Parms, NULL );

	pFnIsGuiVisibleAndEnabled->FunctionFlags |= 0x400;

	return IsGuiVisibleAndEnabled_Parms.ReturnValue;
};

// Function Engine.BioSFManager.IsMovieInFocus
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioSFManager::IsMovieInFocus ( )
{
	static UFunction* pFnIsMovieInFocus = NULL;

	if ( ! pFnIsMovieInFocus )
		pFnIsMovieInFocus = (UFunction*) UObject::GObjObjects()->Data[ 15800 ];

	UBioSFManager_execIsMovieInFocus_Parms IsMovieInFocus_Parms;

	pFnIsMovieInFocus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMovieInFocus, &IsMovieInFocus_Parms, NULL );

	pFnIsMovieInFocus->FunctionFlags |= 0x400;

	return IsMovieInFocus_Parms.ReturnValue;
};

// Function Engine.BioSFManager.GetFocusMovie
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioSFPanel*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioSFPanel* UBioSFManager::GetFocusMovie ( )
{
	static UFunction* pFnGetFocusMovie = NULL;

	if ( ! pFnGetFocusMovie )
		pFnGetFocusMovie = (UFunction*) UObject::GObjObjects()->Data[ 15798 ];

	UBioSFManager_execGetFocusMovie_Parms GetFocusMovie_Parms;

	pFnGetFocusMovie->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFocusMovie, &GetFocusMovie_Parms, NULL );

	pFnGetFocusMovie->FunctionFlags |= 0x400;

	return GetFocusMovie_Parms.ReturnValue;
};

// Function Engine.BioSFManager.GetPlayerController
// [0x00020000] 
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class APlayerController* UBioSFManager::GetPlayerController ( )
{
	static UFunction* pFnGetPlayerController = NULL;

	if ( ! pFnGetPlayerController )
		pFnGetPlayerController = (UFunction*) UObject::GObjObjects()->Data[ 15224 ];

	UBioSFManager_execGetPlayerController_Parms GetPlayerController_Parms;

	this->ProcessEvent ( pFnGetPlayerController, &GetPlayerController_Parms, NULL );

	return GetPlayerController_Parms.ReturnValue;
};

// Function Engine.BioSFManager.InitManager
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFManager::InitManager ( )
{
	static UFunction* pFnInitManager = NULL;

	if ( ! pFnInitManager )
		pFnInitManager = (UFunction*) UObject::GObjObjects()->Data[ 15797 ];

	UBioSFManager_execInitManager_Parms InitManager_Parms;

	pFnInitManager->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitManager, &InitManager_Parms, NULL );

	pFnInitManager->FunctionFlags |= 0x400;
};

// Function Engine.BioSFManager.SetMouseVisibility
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 pObject                        ( CPF_Parm )
// unsigned long                  bShow                          ( CPF_Parm )

bool UBioSFManager::SetMouseVisibility ( class UObject* pObject, unsigned long bShow )
{
	static UFunction* pFnSetMouseVisibility = NULL;

	if ( ! pFnSetMouseVisibility )
		pFnSetMouseVisibility = (UFunction*) UObject::GObjObjects()->Data[ 15793 ];

	UBioSFManager_execSetMouseVisibility_Parms SetMouseVisibility_Parms;
	SetMouseVisibility_Parms.pObject = pObject;
	SetMouseVisibility_Parms.bShow = bShow;

	pFnSetMouseVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMouseVisibility, &SetMouseVisibility_Parms, NULL );

	pFnSetMouseVisibility->FunctionFlags |= 0x400;

	return SetMouseVisibility_Parms.ReturnValue;
};

// Function Engine.BioSFManager.GameSessionEnded
// [0x00020002] 
// Parameters infos:

void UBioSFManager::GameSessionEnded ( )
{
	static UFunction* pFnGameSessionEnded = NULL;

	if ( ! pFnGameSessionEnded )
		pFnGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 15791 ];

	UBioSFManager_execGameSessionEnded_Parms GameSessionEnded_Parms;

	this->ProcessEvent ( pFnGameSessionEnded, &GameSessionEnded_Parms, NULL );
};

// Function Engine.BioSFManager.Update
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void UBioSFManager::eventUpdate ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 15789 ];

	UBioSFManager_eventUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function Engine.BioSFManager.AddEventCooldown
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  nEvent                         ( CPF_Parm )
// float                          fCooldown                      ( CPF_Parm )

void UBioSFManager::AddEventCooldown ( unsigned char nEvent, float fCooldown )
{
	static UFunction* pFnAddEventCooldown = NULL;

	if ( ! pFnAddEventCooldown )
		pFnAddEventCooldown = (UFunction*) UObject::GObjObjects()->Data[ 15786 ];

	UBioSFManager_execAddEventCooldown_Parms AddEventCooldown_Parms;
	AddEventCooldown_Parms.nEvent = nEvent;
	AddEventCooldown_Parms.fCooldown = fCooldown;

	pFnAddEventCooldown->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddEventCooldown, &AddEventCooldown_Parms, NULL );

	pFnAddEventCooldown->FunctionFlags |= 0x400;
};

// Function Engine.BioSFManager.SetWorldSoundPaused
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bPause                         ( CPF_Parm )

void UBioSFManager::SetWorldSoundPaused ( unsigned long bPause )
{
	static UFunction* pFnSetWorldSoundPaused = NULL;

	if ( ! pFnSetWorldSoundPaused )
		pFnSetWorldSoundPaused = (UFunction*) UObject::GObjObjects()->Data[ 15784 ];

	UBioSFManager_execSetWorldSoundPaused_Parms SetWorldSoundPaused_Parms;
	SetWorldSoundPaused_Parms.bPause = bPause;

	pFnSetWorldSoundPaused->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWorldSoundPaused, &SetWorldSoundPaused_Parms, NULL );

	pFnSetWorldSoundPaused->FunctionFlags |= 0x400;
};

// Function Engine.BioSFManager.StopGuiVoice
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFManager::StopGuiVoice ( )
{
	static UFunction* pFnStopGuiVoice = NULL;

	if ( ! pFnStopGuiVoice )
		pFnStopGuiVoice = (UFunction*) UObject::GObjObjects()->Data[ 15783 ];

	UBioSFManager_execStopGuiVoice_Parms StopGuiVoice_Parms;

	pFnStopGuiVoice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopGuiVoice, &StopGuiVoice_Parms, NULL );

	pFnStopGuiVoice->FunctionFlags |= 0x400;
};

// Function Engine.BioSFManager.PlayGuiVoice
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmSound                        ( CPF_Parm )

void UBioSFManager::PlayGuiVoice ( struct FName nmSound )
{
	static UFunction* pFnPlayGuiVoice = NULL;

	if ( ! pFnPlayGuiVoice )
		pFnPlayGuiVoice = (UFunction*) UObject::GObjObjects()->Data[ 15781 ];

	UBioSFManager_execPlayGuiVoice_Parms PlayGuiVoice_Parms;
	memcpy ( &PlayGuiVoice_Parms.nmSound, &nmSound, 0x8 );

	pFnPlayGuiVoice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayGuiVoice, &PlayGuiVoice_Parms, NULL );

	pFnPlayGuiVoice->FunctionFlags |= 0x400;
};

// Function Engine.BioSFManager.StopGuiMusic
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFManager::StopGuiMusic ( )
{
	static UFunction* pFnStopGuiMusic = NULL;

	if ( ! pFnStopGuiMusic )
		pFnStopGuiMusic = (UFunction*) UObject::GObjObjects()->Data[ 15780 ];

	UBioSFManager_execStopGuiMusic_Parms StopGuiMusic_Parms;

	pFnStopGuiMusic->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopGuiMusic, &StopGuiMusic_Parms, NULL );

	pFnStopGuiMusic->FunctionFlags |= 0x400;
};

// Function Engine.BioSFManager.PlayGuiMusic
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmMusic                        ( CPF_Parm )
// unsigned long                  bForceRestart                  ( CPF_OptionalParm | CPF_Parm )

void UBioSFManager::PlayGuiMusic ( struct FName nmMusic, unsigned long bForceRestart )
{
	static UFunction* pFnPlayGuiMusic = NULL;

	if ( ! pFnPlayGuiMusic )
		pFnPlayGuiMusic = (UFunction*) UObject::GObjObjects()->Data[ 15777 ];

	UBioSFManager_execPlayGuiMusic_Parms PlayGuiMusic_Parms;
	memcpy ( &PlayGuiMusic_Parms.nmMusic, &nmMusic, 0x8 );
	PlayGuiMusic_Parms.bForceRestart = bForceRestart;

	pFnPlayGuiMusic->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayGuiMusic, &PlayGuiMusic_Parms, NULL );

	pFnPlayGuiMusic->FunctionFlags |= 0x400;
};

// Function Engine.BioSFManager.PlayGuiSound
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmSound                        ( CPF_Parm )

void UBioSFManager::PlayGuiSound ( struct FName nmSound )
{
	static UFunction* pFnPlayGuiSound = NULL;

	if ( ! pFnPlayGuiSound )
		pFnPlayGuiSound = (UFunction*) UObject::GObjObjects()->Data[ 15775 ];

	UBioSFManager_execPlayGuiSound_Parms PlayGuiSound_Parms;
	memcpy ( &PlayGuiSound_Parms.nmSound, &nmSound, 0x8 );

	pFnPlayGuiSound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayGuiSound, &PlayGuiSound_Parms, NULL );

	pFnPlayGuiSound->FunctionFlags |= 0x400;
};

// Function Engine.BioSFManager.GetHandlerClass
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmTag                          ( CPF_Parm )

class UClass* UBioSFManager::GetHandlerClass ( struct FName nmTag )
{
	static UFunction* pFnGetHandlerClass = NULL;

	if ( ! pFnGetHandlerClass )
		pFnGetHandlerClass = (UFunction*) UObject::GObjObjects()->Data[ 15772 ];

	UBioSFManager_execGetHandlerClass_Parms GetHandlerClass_Parms;
	memcpy ( &GetHandlerClass_Parms.nmTag, &nmTag, 0x8 );

	pFnGetHandlerClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHandlerClass, &GetHandlerClass_Parms, NULL );

	pFnGetHandlerClass->FunctionFlags |= 0x400;

	return GetHandlerClass_Parms.ReturnValue;
};

// Function Engine.BioSFManager.HandleInputEvent
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fCooldown                      ( CPF_OptionalParm | CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )
// float                          fDeadzoneValue                 ( CPF_OptionalParm | CPF_Parm )

void UBioSFManager::HandleInputEvent ( unsigned char Event, float fCooldown, float fValue, float fDeadzoneValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 15767 ];

	UBioSFManager_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fCooldown = fCooldown;
	HandleInputEvent_Parms.fValue = fValue;
	HandleInputEvent_Parms.fDeadzoneValue = fDeadzoneValue;

	pFnHandleInputEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );

	pFnHandleInputEvent->FunctionFlags |= 0x400;
};

// Function Engine.BioSFManager.ClearAll
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFManager::ClearAll ( )
{
	static UFunction* pFnClearAll = NULL;

	if ( ! pFnClearAll )
		pFnClearAll = (UFunction*) UObject::GObjObjects()->Data[ 15766 ];

	UBioSFManager_execClearAll_Parms ClearAll_Parms;

	pFnClearAll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearAll, &ClearAll_Parms, NULL );

	pFnClearAll->FunctionFlags |= 0x400;
};

// Function Engine.BioSFManager.ShowAll
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFManager::ShowAll ( )
{
	static UFunction* pFnShowAll = NULL;

	if ( ! pFnShowAll )
		pFnShowAll = (UFunction*) UObject::GObjObjects()->Data[ 15765 ];

	UBioSFManager_execShowAll_Parms ShowAll_Parms;

	pFnShowAll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowAll, &ShowAll_Parms, NULL );

	pFnShowAll->FunctionFlags |= 0x400;
};

// Function Engine.BioSFManager.HideAllModal
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFManager::HideAllModal ( )
{
	static UFunction* pFnHideAllModal = NULL;

	if ( ! pFnHideAllModal )
		pFnHideAllModal = (UFunction*) UObject::GObjObjects()->Data[ 15764 ];

	UBioSFManager_execHideAllModal_Parms HideAllModal_Parms;

	pFnHideAllModal->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHideAllModal, &HideAllModal_Parms, NULL );

	pFnHideAllModal->FunctionFlags |= 0x400;
};

// Function Engine.BioSFManager.HideAllMessages
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFManager::HideAllMessages ( )
{
	static UFunction* pFnHideAllMessages = NULL;

	if ( ! pFnHideAllMessages )
		pFnHideAllMessages = (UFunction*) UObject::GObjObjects()->Data[ 15763 ];

	UBioSFManager_execHideAllMessages_Parms HideAllMessages_Parms;

	pFnHideAllMessages->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHideAllMessages, &HideAllMessages_Parms, NULL );

	pFnHideAllMessages->FunctionFlags |= 0x400;
};

// Function Engine.BioSFManager.HideAll
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFManager::HideAll ( )
{
	static UFunction* pFnHideAll = NULL;

	if ( ! pFnHideAll )
		pFnHideAll = (UFunction*) UObject::GObjObjects()->Data[ 15762 ];

	UBioSFManager_execHideAll_Parms HideAll_Parms;

	pFnHideAll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHideAll, &HideAll_Parms, NULL );

	pFnHideAll->FunctionFlags |= 0x400;
};

// Function Engine.BioSFManager.PopModalPanel
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioSFPanel*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioSFPanel* UBioSFManager::PopModalPanel ( )
{
	static UFunction* pFnPopModalPanel = NULL;

	if ( ! pFnPopModalPanel )
		pFnPopModalPanel = (UFunction*) UObject::GObjObjects()->Data[ 15760 ];

	UBioSFManager_execPopModalPanel_Parms PopModalPanel_Parms;

	pFnPopModalPanel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPopModalPanel, &PopModalPanel_Parms, NULL );

	pFnPopModalPanel->FunctionFlags |= 0x400;

	return PopModalPanel_Parms.ReturnValue;
};

// Function Engine.BioSFManager.PushModalPanel
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioSFPanel*             oPanel                         ( CPF_Parm )

bool UBioSFManager::PushModalPanel ( class UBioSFPanel* oPanel )
{
	static UFunction* pFnPushModalPanel = NULL;

	if ( ! pFnPushModalPanel )
		pFnPushModalPanel = (UFunction*) UObject::GObjObjects()->Data[ 15757 ];

	UBioSFManager_execPushModalPanel_Parms PushModalPanel_Parms;
	PushModalPanel_Parms.oPanel = oPanel;

	pFnPushModalPanel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPushModalPanel, &PushModalPanel_Parms, NULL );

	pFnPushModalPanel->FunctionFlags |= 0x400;

	return PushModalPanel_Parms.ReturnValue;
};

// Function Engine.BioSFManager.IsOnTop
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioSFPanel*             oPanel                         ( CPF_Parm )

bool UBioSFManager::IsOnTop ( class UBioSFPanel* oPanel )
{
	static UFunction* pFnIsOnTop = NULL;

	if ( ! pFnIsOnTop )
		pFnIsOnTop = (UFunction*) UObject::GObjObjects()->Data[ 15754 ];

	UBioSFManager_execIsOnTop_Parms IsOnTop_Parms;
	IsOnTop_Parms.oPanel = oPanel;

	pFnIsOnTop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsOnTop, &IsOnTop_Parms, NULL );

	pFnIsOnTop->FunctionFlags |= 0x400;

	return IsOnTop_Parms.ReturnValue;
};

// Function Engine.BioSFManager.IsFullScreen
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioSFManager::IsFullScreen ( )
{
	static UFunction* pFnIsFullScreen = NULL;

	if ( ! pFnIsFullScreen )
		pFnIsFullScreen = (UFunction*) UObject::GObjObjects()->Data[ 15752 ];

	UBioSFManager_execIsFullScreen_Parms IsFullScreen_Parms;

	pFnIsFullScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFullScreen, &IsFullScreen_Parms, NULL );

	pFnIsFullScreen->FunctionFlags |= 0x400;

	return IsFullScreen_Parms.ReturnValue;
};

// Function Engine.BioSFManager.PanelExists
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioSFPanel*             oPanel                         ( CPF_Parm )

bool UBioSFManager::PanelExists ( class UBioSFPanel* oPanel )
{
	static UFunction* pFnPanelExists = NULL;

	if ( ! pFnPanelExists )
		pFnPanelExists = (UFunction*) UObject::GObjObjects()->Data[ 15749 ];

	UBioSFManager_execPanelExists_Parms PanelExists_Parms;
	PanelExists_Parms.oPanel = oPanel;

	pFnPanelExists->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPanelExists, &PanelExists_Parms, NULL );

	pFnPanelExists->FunctionFlags |= 0x400;

	return PanelExists_Parms.ReturnValue;
};

// Function Engine.BioSFManager.GetPanelByTag
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioSFPanel*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmMovieTag                     ( CPF_Parm )

class UBioSFPanel* UBioSFManager::GetPanelByTag ( struct FName nmMovieTag )
{
	static UFunction* pFnGetPanelByTag = NULL;

	if ( ! pFnGetPanelByTag )
		pFnGetPanelByTag = (UFunction*) UObject::GObjObjects()->Data[ 15746 ];

	UBioSFManager_execGetPanelByTag_Parms GetPanelByTag_Parms;
	memcpy ( &GetPanelByTag_Parms.nmMovieTag, &nmMovieTag, 0x8 );

	pFnGetPanelByTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPanelByTag, &GetPanelByTag_Parms, NULL );

	pFnGetPanelByTag->FunctionFlags |= 0x400;

	return GetPanelByTag_Parms.ReturnValue;
};

// Function Engine.BioSFManager.AdjustConversationZOrder
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioSFPanel*             convPanel                      ( CPF_Parm )
// int                            usingGamepad                   ( CPF_Parm )

void UBioSFManager::AdjustConversationZOrder ( class UBioSFPanel* convPanel, int usingGamepad )
{
	static UFunction* pFnAdjustConversationZOrder = NULL;

	if ( ! pFnAdjustConversationZOrder )
		pFnAdjustConversationZOrder = (UFunction*) UObject::GObjObjects()->Data[ 15743 ];

	UBioSFManager_execAdjustConversationZOrder_Parms AdjustConversationZOrder_Parms;
	AdjustConversationZOrder_Parms.convPanel = convPanel;
	AdjustConversationZOrder_Parms.usingGamepad = usingGamepad;

	pFnAdjustConversationZOrder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdjustConversationZOrder, &AdjustConversationZOrder_Parms, NULL );

	pFnAdjustConversationZOrder->FunctionFlags |= 0x400;
};

// Function Engine.BioSFManager.RemovePanel
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioSFPanel*             oPanel                         ( CPF_Parm )
// unsigned long                  bReportUsage                   ( CPF_OptionalParm | CPF_Parm )

bool UBioSFManager::RemovePanel ( class UBioSFPanel* oPanel, unsigned long bReportUsage )
{
	static UFunction* pFnRemovePanel = NULL;

	if ( ! pFnRemovePanel )
		pFnRemovePanel = (UFunction*) UObject::GObjObjects()->Data[ 15739 ];

	UBioSFManager_execRemovePanel_Parms RemovePanel_Parms;
	RemovePanel_Parms.oPanel = oPanel;
	RemovePanel_Parms.bReportUsage = bReportUsage;

	pFnRemovePanel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemovePanel, &RemovePanel_Parms, NULL );

	pFnRemovePanel->FunctionFlags |= 0x400;

	return RemovePanel_Parms.ReturnValue;
};

// Function Engine.BioSFManager.SwitchPanel
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmMovieTag                     ( CPF_Parm )
// int                            Platform                       ( CPF_Parm )

void UBioSFManager::SwitchPanel ( struct FName nmMovieTag, int Platform )
{
	static UFunction* pFnSwitchPanel = NULL;

	if ( ! pFnSwitchPanel )
		pFnSwitchPanel = (UFunction*) UObject::GObjObjects()->Data[ 15736 ];

	UBioSFManager_execSwitchPanel_Parms SwitchPanel_Parms;
	memcpy ( &SwitchPanel_Parms.nmMovieTag, &nmMovieTag, 0x8 );
	SwitchPanel_Parms.Platform = Platform;

	pFnSwitchPanel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwitchPanel, &SwitchPanel_Parms, NULL );

	pFnSwitchPanel->FunctionFlags |= 0x400;
};

// Function Engine.BioSFManager.AddPanel
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UBioSFPanel*             oPanel                         ( CPF_Parm )
// unsigned long                  bModal                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAddDefaultHandler             ( CPF_OptionalParm | CPF_Parm )

void UBioSFManager::AddPanel ( class UBioSFPanel* oPanel, unsigned long bModal, unsigned long bAddDefaultHandler )
{
	static UFunction* pFnAddPanel = NULL;

	if ( ! pFnAddPanel )
		pFnAddPanel = (UFunction*) UObject::GObjObjects()->Data[ 15732 ];

	UBioSFManager_execAddPanel_Parms AddPanel_Parms;
	AddPanel_Parms.oPanel = oPanel;
	AddPanel_Parms.bModal = bModal;
	AddPanel_Parms.bAddDefaultHandler = bAddDefaultHandler;

	pFnAddPanel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddPanel, &AddPanel_Parms, NULL );

	pFnAddPanel->FunctionFlags |= 0x400;
};

// Function Engine.BioSFManager.CreatePanel
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UBioSFPanel*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmMovieTag                     ( CPF_Parm )
// unsigned long                  bAddPanel                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bModal                         ( CPF_OptionalParm | CPF_Parm )
// int                            Platform                       ( CPF_OptionalParm | CPF_Parm )

class UBioSFPanel* UBioSFManager::CreatePanel ( struct FName nmMovieTag, unsigned long bAddPanel, unsigned long bModal, int Platform )
{
	static UFunction* pFnCreatePanel = NULL;

	if ( ! pFnCreatePanel )
		pFnCreatePanel = (UFunction*) UObject::GObjObjects()->Data[ 15726 ];

	UBioSFManager_execCreatePanel_Parms CreatePanel_Parms;
	memcpy ( &CreatePanel_Parms.nmMovieTag, &nmMovieTag, 0x8 );
	CreatePanel_Parms.bAddPanel = bAddPanel;
	CreatePanel_Parms.bModal = bModal;
	CreatePanel_Parms.Platform = Platform;

	pFnCreatePanel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreatePanel, &CreatePanel_Parms, NULL );

	pFnCreatePanel->FunctionFlags |= 0x400;

	return CreatePanel_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.GetProfileTimes
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          fUpdateTime                    ( CPF_Parm | CPF_OutParm )
// float                          fRenderTime                    ( CPF_Parm | CPF_OutParm )
// float                          fAdvanceTime                   ( CPF_Parm | CPF_OutParm )

void UBioSFPanel::GetProfileTimes ( float* fUpdateTime, float* fRenderTime, float* fAdvanceTime )
{
	static UFunction* pFnGetProfileTimes = NULL;

	if ( ! pFnGetProfileTimes )
		pFnGetProfileTimes = (UFunction*) UObject::GObjObjects()->Data[ 16025 ];

	UBioSFPanel_execGetProfileTimes_Parms GetProfileTimes_Parms;

	pFnGetProfileTimes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileTimes, &GetProfileTimes_Parms, NULL );

	pFnGetProfileTimes->FunctionFlags |= 0x400;

	if ( fUpdateTime )
		*fUpdateTime = GetProfileTimes_Parms.fUpdateTime;

	if ( fRenderTime )
		*fRenderTime = GetProfileTimes_Parms.fRenderTime;

	if ( fAdvanceTime )
		*fAdvanceTime = GetProfileTimes_Parms.fAdvanceTime;
};

// Function Engine.BioSFPanel.GetDefaultHandler
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioSFHandler*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioSFHandler* UBioSFPanel::GetDefaultHandler ( )
{
	static UFunction* pFnGetDefaultHandler = NULL;

	if ( ! pFnGetDefaultHandler )
		pFnGetDefaultHandler = (UFunction*) UObject::GObjObjects()->Data[ 16023 ];

	UBioSFPanel_execGetDefaultHandler_Parms GetDefaultHandler_Parms;

	pFnGetDefaultHandler->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultHandler, &GetDefaultHandler_Parms, NULL );

	pFnGetDefaultHandler->FunctionFlags |= 0x400;

	return GetDefaultHandler_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.GetStageViewportOffset
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector2D               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector2D UBioSFPanel::GetStageViewportOffset ( )
{
	static UFunction* pFnGetStageViewportOffset = NULL;

	if ( ! pFnGetStageViewportOffset )
		pFnGetStageViewportOffset = (UFunction*) UObject::GObjObjects()->Data[ 16021 ];

	UBioSFPanel_execGetStageViewportOffset_Parms GetStageViewportOffset_Parms;

	pFnGetStageViewportOffset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStageViewportOffset, &GetStageViewportOffset_Parms, NULL );

	pFnGetStageViewportOffset->FunctionFlags |= 0x400;

	return GetStageViewportOffset_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.GameSessionEnded
// [0x00020002] 
// Parameters infos:

void UBioSFPanel::GameSessionEnded ( )
{
	static UFunction* pFnGameSessionEnded = NULL;

	if ( ! pFnGameSessionEnded )
		pFnGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 16018 ];

	UBioSFPanel_execGameSessionEnded_Parms GameSessionEnded_Parms;

	this->ProcessEvent ( pFnGameSessionEnded, &GameSessionEnded_Parms, NULL );
};

// Function Engine.BioSFPanel.GetMovieGamepadValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioSFPanel::GetMovieGamepadValue ( )
{
	static UFunction* pFnGetMovieGamepadValue = NULL;

	if ( ! pFnGetMovieGamepadValue )
		pFnGetMovieGamepadValue = (UFunction*) UObject::GObjObjects()->Data[ 16016 ];

	UBioSFPanel_execGetMovieGamepadValue_Parms GetMovieGamepadValue_Parms;

	pFnGetMovieGamepadValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMovieGamepadValue, &GetMovieGamepadValue_Parms, NULL );

	pFnGetMovieGamepadValue->FunctionFlags |= 0x400;

	return GetMovieGamepadValue_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.GetMovieAspectRatio
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioSFPanel::GetMovieAspectRatio ( )
{
	static UFunction* pFnGetMovieAspectRatio = NULL;

	if ( ! pFnGetMovieAspectRatio )
		pFnGetMovieAspectRatio = (UFunction*) UObject::GObjObjects()->Data[ 16014 ];

	UBioSFPanel_execGetMovieAspectRatio_Parms GetMovieAspectRatio_Parms;

	pFnGetMovieAspectRatio->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMovieAspectRatio, &GetMovieAspectRatio_Parms, NULL );

	pFnGetMovieAspectRatio->FunctionFlags |= 0x400;

	return GetMovieAspectRatio_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.GetViewportAspectRatio
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioSFPanel::GetViewportAspectRatio ( )
{
	static UFunction* pFnGetViewportAspectRatio = NULL;

	if ( ! pFnGetViewportAspectRatio )
		pFnGetViewportAspectRatio = (UFunction*) UObject::GObjObjects()->Data[ 16012 ];

	UBioSFPanel_execGetViewportAspectRatio_Parms GetViewportAspectRatio_Parms;

	pFnGetViewportAspectRatio->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportAspectRatio, &GetViewportAspectRatio_Parms, NULL );

	pFnGetViewportAspectRatio->FunctionFlags |= 0x400;

	return GetViewportAspectRatio_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.OnInputFocusRecieved
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFPanel::OnInputFocusRecieved ( )
{
	static UFunction* pFnOnInputFocusRecieved = NULL;

	if ( ! pFnOnInputFocusRecieved )
		pFnOnInputFocusRecieved = (UFunction*) UObject::GObjObjects()->Data[ 16011 ];

	UBioSFPanel_execOnInputFocusRecieved_Parms OnInputFocusRecieved_Parms;

	pFnOnInputFocusRecieved->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnInputFocusRecieved, &OnInputFocusRecieved_Parms, NULL );

	pFnOnInputFocusRecieved->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.OnInputFocusLost
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFPanel::OnInputFocusLost ( )
{
	static UFunction* pFnOnInputFocusLost = NULL;

	if ( ! pFnOnInputFocusLost )
		pFnOnInputFocusLost = (UFunction*) UObject::GObjObjects()->Data[ 16010 ];

	UBioSFPanel_execOnInputFocusLost_Parms OnInputFocusLost_Parms;

	pFnOnInputFocusLost->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnInputFocusLost, &OnInputFocusLost_Parms, NULL );

	pFnOnInputFocusLost->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.SetMouseVisible
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void UBioSFPanel::SetMouseVisible ( unsigned long bVisible )
{
	static UFunction* pFnSetMouseVisible = NULL;

	if ( ! pFnSetMouseVisible )
		pFnSetMouseVisible = (UFunction*) UObject::GObjObjects()->Data[ 16008 ];

	UBioSFPanel_execSetMouseVisible_Parms SetMouseVisible_Parms;
	SetMouseVisible_Parms.bVisible = bVisible;

	pFnSetMouseVisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMouseVisible, &SetMouseVisible_Parms, NULL );

	pFnSetMouseVisible->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.SetMovieVisibility
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void UBioSFPanel::SetMovieVisibility ( unsigned long bVisible )
{
	static UFunction* pFnSetMovieVisibility = NULL;

	if ( ! pFnSetMovieVisibility )
		pFnSetMovieVisibility = (UFunction*) UObject::GObjObjects()->Data[ 16006 ];

	UBioSFPanel_execSetMovieVisibility_Parms SetMovieVisibility_Parms;
	SetMovieVisibility_Parms.bVisible = bVisible;

	pFnSetMovieVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMovieVisibility, &SetMovieVisibility_Parms, NULL );

	pFnSetMovieVisibility->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.UpdateAspectRatio
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForce                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bHorizontal                    ( CPF_OptionalParm | CPF_Parm )

float UBioSFPanel::UpdateAspectRatio ( unsigned long bForce, unsigned long bHorizontal )
{
	static UFunction* pFnUpdateAspectRatio = NULL;

	if ( ! pFnUpdateAspectRatio )
		pFnUpdateAspectRatio = (UFunction*) UObject::GObjObjects()->Data[ 16002 ];

	UBioSFPanel_execUpdateAspectRatio_Parms UpdateAspectRatio_Parms;
	UpdateAspectRatio_Parms.bForce = bForce;
	UpdateAspectRatio_Parms.bHorizontal = bHorizontal;

	pFnUpdateAspectRatio->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateAspectRatio, &UpdateAspectRatio_Parms, NULL );

	pFnUpdateAspectRatio->FunctionFlags |= 0x400;

	return UpdateAspectRatio_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.ExIntGetPlatform
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioSFPanel::ExIntGetPlatform ( )
{
	static UFunction* pFnExIntGetPlatform = NULL;

	if ( ! pFnExIntGetPlatform )
		pFnExIntGetPlatform = (UFunction*) UObject::GObjObjects()->Data[ 16000 ];

	UBioSFPanel_execExIntGetPlatform_Parms ExIntGetPlatform_Parms;

	pFnExIntGetPlatform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExIntGetPlatform, &ExIntGetPlatform_Parms, NULL );

	pFnExIntGetPlatform->FunctionFlags |= 0x400;

	return ExIntGetPlatform_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.SetExternalInterface
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oInterface                     ( CPF_Parm )

void UBioSFPanel::SetExternalInterface ( class UObject* oInterface )
{
	static UFunction* pFnSetExternalInterface = NULL;

	if ( ! pFnSetExternalInterface )
		pFnSetExternalInterface = (UFunction*) UObject::GObjObjects()->Data[ 15998 ];

	UBioSFPanel_execSetExternalInterface_Parms SetExternalInterface_Parms;
	SetExternalInterface_Parms.oInterface = oInterface;

	pFnSetExternalInterface->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetExternalInterface, &SetExternalInterface_Parms, NULL );

	pFnSetExternalInterface->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.HandleInputEvent
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void UBioSFPanel::HandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 15995 ];

	UBioSFPanel_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	pFnHandleInputEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );

	pFnHandleInputEvent->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.SetEventsDisabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bDisabled                      ( CPF_Parm )

void UBioSFPanel::SetEventsDisabled ( unsigned long bDisabled )
{
	static UFunction* pFnSetEventsDisabled = NULL;

	if ( ! pFnSetEventsDisabled )
		pFnSetEventsDisabled = (UFunction*) UObject::GObjObjects()->Data[ 15993 ];

	UBioSFPanel_execSetEventsDisabled_Parms SetEventsDisabled_Parms;
	SetEventsDisabled_Parms.bDisabled = bDisabled;

	pFnSetEventsDisabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEventsDisabled, &SetEventsDisabled_Parms, NULL );

	pFnSetEventsDisabled->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.SetInputDisabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bDisabled                      ( CPF_Parm )

void UBioSFPanel::SetInputDisabled ( unsigned long bDisabled )
{
	static UFunction* pFnSetInputDisabled = NULL;

	if ( ! pFnSetInputDisabled )
		pFnSetInputDisabled = (UFunction*) UObject::GObjObjects()->Data[ 15991 ];

	UBioSFPanel_execSetInputDisabled_Parms SetInputDisabled_Parms;
	SetInputDisabled_Parms.bDisabled = bDisabled;

	pFnSetInputDisabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetInputDisabled, &SetInputDisabled_Parms, NULL );

	pFnSetInputDisabled->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.SetToBeRemoved
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void UBioSFPanel::SetToBeRemoved ( unsigned long bRemove )
{
	static UFunction* pFnSetToBeRemoved = NULL;

	if ( ! pFnSetToBeRemoved )
		pFnSetToBeRemoved = (UFunction*) UObject::GObjObjects()->Data[ 15989 ];

	UBioSFPanel_execSetToBeRemoved_Parms SetToBeRemoved_Parms;
	SetToBeRemoved_Parms.bRemove = bRemove;

	pFnSetToBeRemoved->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetToBeRemoved, &SetToBeRemoved_Parms, NULL );

	pFnSetToBeRemoved->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.GetStrokeStyle
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UBioSFPanel::GetStrokeStyle ( )
{
	static UFunction* pFnGetStrokeStyle = NULL;

	if ( ! pFnGetStrokeStyle )
		pFnGetStrokeStyle = (UFunction*) UObject::GObjObjects()->Data[ 15987 ];

	UBioSFPanel_execGetStrokeStyle_Parms GetStrokeStyle_Parms;

	pFnGetStrokeStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStrokeStyle, &GetStrokeStyle_Parms, NULL );

	pFnGetStrokeStyle->FunctionFlags |= 0x400;

	return GetStrokeStyle_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.SetStrokeStyle
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  nStrokeStyle                   ( CPF_Parm )

void UBioSFPanel::SetStrokeStyle ( unsigned char nStrokeStyle )
{
	static UFunction* pFnSetStrokeStyle = NULL;

	if ( ! pFnSetStrokeStyle )
		pFnSetStrokeStyle = (UFunction*) UObject::GObjObjects()->Data[ 15985 ];

	UBioSFPanel_execSetStrokeStyle_Parms SetStrokeStyle_Parms;
	SetStrokeStyle_Parms.nStrokeStyle = nStrokeStyle;

	pFnSetStrokeStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStrokeStyle, &SetStrokeStyle_Parms, NULL );

	pFnSetStrokeStyle->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.GetCurvePixelError
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioSFPanel::GetCurvePixelError ( )
{
	static UFunction* pFnGetCurvePixelError = NULL;

	if ( ! pFnGetCurvePixelError )
		pFnGetCurvePixelError = (UFunction*) UObject::GObjObjects()->Data[ 15983 ];

	UBioSFPanel_execGetCurvePixelError_Parms GetCurvePixelError_Parms;

	pFnGetCurvePixelError->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurvePixelError, &GetCurvePixelError_Parms, NULL );

	pFnGetCurvePixelError->FunctionFlags |= 0x400;

	return GetCurvePixelError_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.SetCurvePixelError
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fCurvePixelError               ( CPF_Parm )

void UBioSFPanel::SetCurvePixelError ( float fCurvePixelError )
{
	static UFunction* pFnSetCurvePixelError = NULL;

	if ( ! pFnSetCurvePixelError )
		pFnSetCurvePixelError = (UFunction*) UObject::GObjObjects()->Data[ 15981 ];

	UBioSFPanel_execSetCurvePixelError_Parms SetCurvePixelError_Parms;
	SetCurvePixelError_Parms.fCurvePixelError = fCurvePixelError;

	pFnSetCurvePixelError->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCurvePixelError, &SetCurvePixelError_Parms, NULL );

	pFnSetCurvePixelError->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.GetUseEdgeAA
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioSFPanel::GetUseEdgeAA ( )
{
	static UFunction* pFnGetUseEdgeAA = NULL;

	if ( ! pFnGetUseEdgeAA )
		pFnGetUseEdgeAA = (UFunction*) UObject::GObjObjects()->Data[ 15979 ];

	UBioSFPanel_execGetUseEdgeAA_Parms GetUseEdgeAA_Parms;

	pFnGetUseEdgeAA->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUseEdgeAA, &GetUseEdgeAA_Parms, NULL );

	pFnGetUseEdgeAA->FunctionFlags |= 0x400;

	return GetUseEdgeAA_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.SetUseEdgeAA
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bUseEdgeAA                     ( CPF_Parm )

void UBioSFPanel::SetUseEdgeAA ( unsigned long bUseEdgeAA )
{
	static UFunction* pFnSetUseEdgeAA = NULL;

	if ( ! pFnSetUseEdgeAA )
		pFnSetUseEdgeAA = (UFunction*) UObject::GObjObjects()->Data[ 15977 ];

	UBioSFPanel_execSetUseEdgeAA_Parms SetUseEdgeAA_Parms;
	SetUseEdgeAA_Parms.bUseEdgeAA = bUseEdgeAA;

	pFnSetUseEdgeAA->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetUseEdgeAA, &SetUseEdgeAA_Parms, NULL );

	pFnSetUseEdgeAA->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.IsAvailable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sPath                          ( CPF_Parm | CPF_NeedCtorLink )

bool UBioSFPanel::IsAvailable ( struct FString sPath )
{
	static UFunction* pFnIsAvailable = NULL;

	if ( ! pFnIsAvailable )
		pFnIsAvailable = (UFunction*) UObject::GObjObjects()->Data[ 15974 ];

	UBioSFPanel_execIsAvailable_Parms IsAvailable_Parms;
	memcpy ( &IsAvailable_Parms.sPath, &sPath, 0x10 );

	pFnIsAvailable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAvailable, &IsAvailable_Parms, NULL );

	pFnIsAvailable->FunctionFlags |= 0x400;

	return IsAvailable_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.GetVariableInt
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sPath                          ( CPF_Parm | CPF_NeedCtorLink )

int UBioSFPanel::GetVariableInt ( struct FString sPath )
{
	static UFunction* pFnGetVariableInt = NULL;

	if ( ! pFnGetVariableInt )
		pFnGetVariableInt = (UFunction*) UObject::GObjObjects()->Data[ 15971 ];

	UBioSFPanel_execGetVariableInt_Parms GetVariableInt_Parms;
	memcpy ( &GetVariableInt_Parms.sPath, &sPath, 0x10 );

	pFnGetVariableInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVariableInt, &GetVariableInt_Parms, NULL );

	pFnGetVariableInt->FunctionFlags |= 0x400;

	return GetVariableInt_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.GetVariableBool
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sPath                          ( CPF_Parm | CPF_NeedCtorLink )

bool UBioSFPanel::GetVariableBool ( struct FString sPath )
{
	static UFunction* pFnGetVariableBool = NULL;

	if ( ! pFnGetVariableBool )
		pFnGetVariableBool = (UFunction*) UObject::GObjObjects()->Data[ 15968 ];

	UBioSFPanel_execGetVariableBool_Parms GetVariableBool_Parms;
	memcpy ( &GetVariableBool_Parms.sPath, &sPath, 0x10 );

	pFnGetVariableBool->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVariableBool, &GetVariableBool_Parms, NULL );

	pFnGetVariableBool->FunctionFlags |= 0x400;

	return GetVariableBool_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.GetVariableFloat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sPath                          ( CPF_Parm | CPF_NeedCtorLink )

float UBioSFPanel::GetVariableFloat ( struct FString sPath )
{
	static UFunction* pFnGetVariableFloat = NULL;

	if ( ! pFnGetVariableFloat )
		pFnGetVariableFloat = (UFunction*) UObject::GObjObjects()->Data[ 15965 ];

	UBioSFPanel_execGetVariableFloat_Parms GetVariableFloat_Parms;
	memcpy ( &GetVariableFloat_Parms.sPath, &sPath, 0x10 );

	pFnGetVariableFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVariableFloat, &GetVariableFloat_Parms, NULL );

	pFnGetVariableFloat->FunctionFlags |= 0x400;

	return GetVariableFloat_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.GetVariableString
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 sPath                          ( CPF_Parm | CPF_NeedCtorLink )

struct FString UBioSFPanel::GetVariableString ( struct FString sPath )
{
	static UFunction* pFnGetVariableString = NULL;

	if ( ! pFnGetVariableString )
		pFnGetVariableString = (UFunction*) UObject::GObjObjects()->Data[ 15962 ];

	UBioSFPanel_execGetVariableString_Parms GetVariableString_Parms;
	memcpy ( &GetVariableString_Parms.sPath, &sPath, 0x10 );

	pFnGetVariableString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVariableString, &GetVariableString_Parms, NULL );

	pFnGetVariableString->FunctionFlags |= 0x400;

	return GetVariableString_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.SetVariableIntArray
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Path                           ( CPF_Parm | CPF_NeedCtorLink )
// int                            Index                          ( CPF_Parm )
// struct TArray<int>             arg                            ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBioSFPanel::SetVariableIntArray ( struct FString Path, int Index, struct TArray<int>* arg )
{
	static UFunction* pFnSetVariableIntArray = NULL;

	if ( ! pFnSetVariableIntArray )
		pFnSetVariableIntArray = (UFunction*) UObject::GObjObjects()->Data[ 15956 ];

	UBioSFPanel_execSetVariableIntArray_Parms SetVariableIntArray_Parms;
	memcpy ( &SetVariableIntArray_Parms.Path, &Path, 0x10 );
	SetVariableIntArray_Parms.Index = Index;

	pFnSetVariableIntArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVariableIntArray, &SetVariableIntArray_Parms, NULL );

	pFnSetVariableIntArray->FunctionFlags |= 0x400;

	if ( arg )
		memcpy ( arg, &SetVariableIntArray_Parms.arg, 0x10 );

	return SetVariableIntArray_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.GetVariableIntArray
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Path                           ( CPF_Parm | CPF_NeedCtorLink )
// int                            Index                          ( CPF_Parm )
// struct TArray<int>             arg                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBioSFPanel::GetVariableIntArray ( struct FString Path, int Index, struct TArray<int>* arg )
{
	static UFunction* pFnGetVariableIntArray = NULL;

	if ( ! pFnGetVariableIntArray )
		pFnGetVariableIntArray = (UFunction*) UObject::GObjObjects()->Data[ 15950 ];

	UBioSFPanel_execGetVariableIntArray_Parms GetVariableIntArray_Parms;
	memcpy ( &GetVariableIntArray_Parms.Path, &Path, 0x10 );
	GetVariableIntArray_Parms.Index = Index;

	pFnGetVariableIntArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVariableIntArray, &GetVariableIntArray_Parms, NULL );

	pFnGetVariableIntArray->FunctionFlags |= 0x400;

	if ( arg )
		memcpy ( arg, &GetVariableIntArray_Parms.arg, 0x10 );

	return GetVariableIntArray_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.SetVariableStringArray
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Path                           ( CPF_Parm | CPF_NeedCtorLink )
// int                            Index                          ( CPF_Parm )
// struct TArray<struct FString>  arg                            ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBioSFPanel::SetVariableStringArray ( struct FString Path, int Index, struct TArray<struct FString>* arg )
{
	static UFunction* pFnSetVariableStringArray = NULL;

	if ( ! pFnSetVariableStringArray )
		pFnSetVariableStringArray = (UFunction*) UObject::GObjObjects()->Data[ 15944 ];

	UBioSFPanel_execSetVariableStringArray_Parms SetVariableStringArray_Parms;
	memcpy ( &SetVariableStringArray_Parms.Path, &Path, 0x10 );
	SetVariableStringArray_Parms.Index = Index;

	pFnSetVariableStringArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVariableStringArray, &SetVariableStringArray_Parms, NULL );

	pFnSetVariableStringArray->FunctionFlags |= 0x400;

	if ( arg )
		memcpy ( arg, &SetVariableStringArray_Parms.arg, 0x10 );

	return SetVariableStringArray_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.GetVariableStringArray
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Path                           ( CPF_Parm | CPF_NeedCtorLink )
// int                            Index                          ( CPF_Parm )
// struct TArray<struct FString>  arg                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBioSFPanel::GetVariableStringArray ( struct FString Path, int Index, struct TArray<struct FString>* arg )
{
	static UFunction* pFnGetVariableStringArray = NULL;

	if ( ! pFnGetVariableStringArray )
		pFnGetVariableStringArray = (UFunction*) UObject::GObjObjects()->Data[ 15938 ];

	UBioSFPanel_execGetVariableStringArray_Parms GetVariableStringArray_Parms;
	memcpy ( &GetVariableStringArray_Parms.Path, &Path, 0x10 );
	GetVariableStringArray_Parms.Index = Index;

	pFnGetVariableStringArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVariableStringArray, &GetVariableStringArray_Parms, NULL );

	pFnGetVariableStringArray->FunctionFlags |= 0x400;

	if ( arg )
		memcpy ( arg, &GetVariableStringArray_Parms.arg, 0x10 );

	return GetVariableStringArray_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.SetVariableInt
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 sPath                          ( CPF_Parm | CPF_NeedCtorLink )
// int                            nVar                           ( CPF_Parm )

void UBioSFPanel::SetVariableInt ( struct FString sPath, int nVar )
{
	static UFunction* pFnSetVariableInt = NULL;

	if ( ! pFnSetVariableInt )
		pFnSetVariableInt = (UFunction*) UObject::GObjObjects()->Data[ 15935 ];

	UBioSFPanel_execSetVariableInt_Parms SetVariableInt_Parms;
	memcpy ( &SetVariableInt_Parms.sPath, &sPath, 0x10 );
	SetVariableInt_Parms.nVar = nVar;

	pFnSetVariableInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVariableInt, &SetVariableInt_Parms, NULL );

	pFnSetVariableInt->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.SetVariableBool
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 sPath                          ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bVar                           ( CPF_Parm )

void UBioSFPanel::SetVariableBool ( struct FString sPath, unsigned long bVar )
{
	static UFunction* pFnSetVariableBool = NULL;

	if ( ! pFnSetVariableBool )
		pFnSetVariableBool = (UFunction*) UObject::GObjObjects()->Data[ 15932 ];

	UBioSFPanel_execSetVariableBool_Parms SetVariableBool_Parms;
	memcpy ( &SetVariableBool_Parms.sPath, &sPath, 0x10 );
	SetVariableBool_Parms.bVar = bVar;

	pFnSetVariableBool->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVariableBool, &SetVariableBool_Parms, NULL );

	pFnSetVariableBool->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.SetVariableFloat
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 sPath                          ( CPF_Parm | CPF_NeedCtorLink )
// float                          fVar                           ( CPF_Parm )

void UBioSFPanel::SetVariableFloat ( struct FString sPath, float fVar )
{
	static UFunction* pFnSetVariableFloat = NULL;

	if ( ! pFnSetVariableFloat )
		pFnSetVariableFloat = (UFunction*) UObject::GObjObjects()->Data[ 15929 ];

	UBioSFPanel_execSetVariableFloat_Parms SetVariableFloat_Parms;
	memcpy ( &SetVariableFloat_Parms.sPath, &sPath, 0x10 );
	SetVariableFloat_Parms.fVar = fVar;

	pFnSetVariableFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVariableFloat, &SetVariableFloat_Parms, NULL );

	pFnSetVariableFloat->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.SetVariableString
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 sPath                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sVar                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void UBioSFPanel::SetVariableString ( struct FString sPath, struct FString sVar )
{
	static UFunction* pFnSetVariableString = NULL;

	if ( ! pFnSetVariableString )
		pFnSetVariableString = (UFunction*) UObject::GObjObjects()->Data[ 15926 ];

	UBioSFPanel_execSetVariableString_Parms SetVariableString_Parms;
	memcpy ( &SetVariableString_Parms.sPath, &sPath, 0x10 );
	memcpy ( &SetVariableString_Parms.sVar, &sVar, 0x10 );

	pFnSetVariableString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVariableString, &SetVariableString_Parms, NULL );

	pFnSetVariableString->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.SetTextFieldText
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 sPath                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sText                          ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFPanel::SetTextFieldText ( struct FString sPath, struct FString sText )
{
	static UFunction* pFnSetTextFieldText = NULL;

	if ( ! pFnSetTextFieldText )
		pFnSetTextFieldText = (UFunction*) UObject::GObjObjects()->Data[ 15923 ];

	UBioSFPanel_execSetTextFieldText_Parms SetTextFieldText_Parms;
	memcpy ( &SetTextFieldText_Parms.sPath, &sPath, 0x10 );
	memcpy ( &SetTextFieldText_Parms.sText, &sText, 0x10 );

	pFnSetTextFieldText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextFieldText, &SetTextFieldText_Parms, NULL );

	pFnSetTextFieldText->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.SetClipLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 sPath                          ( CPF_Parm | CPF_NeedCtorLink )
// float                          fX                             ( CPF_Parm )
// float                          fY                             ( CPF_Parm )

void UBioSFPanel::SetClipLocation ( struct FString sPath, float fX, float fY )
{
	static UFunction* pFnSetClipLocation = NULL;

	if ( ! pFnSetClipLocation )
		pFnSetClipLocation = (UFunction*) UObject::GObjObjects()->Data[ 15919 ];

	UBioSFPanel_execSetClipLocation_Parms SetClipLocation_Parms;
	memcpy ( &SetClipLocation_Parms.sPath, &sPath, 0x10 );
	SetClipLocation_Parms.fX = fX;
	SetClipLocation_Parms.fY = fY;

	pFnSetClipLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClipLocation, &SetClipLocation_Parms, NULL );

	pFnSetClipLocation->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.SetClipHeight
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 sPath                          ( CPF_Parm | CPF_NeedCtorLink )
// float                          fHeight                        ( CPF_Parm )

void UBioSFPanel::SetClipHeight ( struct FString sPath, float fHeight )
{
	static UFunction* pFnSetClipHeight = NULL;

	if ( ! pFnSetClipHeight )
		pFnSetClipHeight = (UFunction*) UObject::GObjObjects()->Data[ 15916 ];

	UBioSFPanel_execSetClipHeight_Parms SetClipHeight_Parms;
	memcpy ( &SetClipHeight_Parms.sPath, &sPath, 0x10 );
	SetClipHeight_Parms.fHeight = fHeight;

	pFnSetClipHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClipHeight, &SetClipHeight_Parms, NULL );

	pFnSetClipHeight->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.SetClipWidth
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 sPath                          ( CPF_Parm | CPF_NeedCtorLink )
// float                          fWidth                         ( CPF_Parm )

void UBioSFPanel::SetClipWidth ( struct FString sPath, float fWidth )
{
	static UFunction* pFnSetClipWidth = NULL;

	if ( ! pFnSetClipWidth )
		pFnSetClipWidth = (UFunction*) UObject::GObjObjects()->Data[ 15913 ];

	UBioSFPanel_execSetClipWidth_Parms SetClipWidth_Parms;
	memcpy ( &SetClipWidth_Parms.sPath, &sPath, 0x10 );
	SetClipWidth_Parms.fWidth = fWidth;

	pFnSetClipWidth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClipWidth, &SetClipWidth_Parms, NULL );

	pFnSetClipWidth->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.SetClipVisibility
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 sPath                          ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bVisible                       ( CPF_Parm )

void UBioSFPanel::SetClipVisibility ( struct FString sPath, unsigned long bVisible )
{
	static UFunction* pFnSetClipVisibility = NULL;

	if ( ! pFnSetClipVisibility )
		pFnSetClipVisibility = (UFunction*) UObject::GObjObjects()->Data[ 15910 ];

	UBioSFPanel_execSetClipVisibility_Parms SetClipVisibility_Parms;
	memcpy ( &SetClipVisibility_Parms.sPath, &sPath, 0x10 );
	SetClipVisibility_Parms.bVisible = bVisible;

	pFnSetClipVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClipVisibility, &SetClipVisibility_Parms, NULL );

	pFnSetClipVisibility->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.GotoLabelAndPlay
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 sPath                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sLabel                         ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFPanel::GotoLabelAndPlay ( struct FString sPath, struct FString sLabel )
{
	static UFunction* pFnGotoLabelAndPlay = NULL;

	if ( ! pFnGotoLabelAndPlay )
		pFnGotoLabelAndPlay = (UFunction*) UObject::GObjObjects()->Data[ 15907 ];

	UBioSFPanel_execGotoLabelAndPlay_Parms GotoLabelAndPlay_Parms;
	memcpy ( &GotoLabelAndPlay_Parms.sPath, &sPath, 0x10 );
	memcpy ( &GotoLabelAndPlay_Parms.sLabel, &sLabel, 0x10 );

	pFnGotoLabelAndPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGotoLabelAndPlay, &GotoLabelAndPlay_Parms, NULL );

	pFnGotoLabelAndPlay->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.GotoFrameAndPlay
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 sPath                          ( CPF_Parm | CPF_NeedCtorLink )
// int                            nFrame                         ( CPF_Parm )

void UBioSFPanel::GotoFrameAndPlay ( struct FString sPath, int nFrame )
{
	static UFunction* pFnGotoFrameAndPlay = NULL;

	if ( ! pFnGotoFrameAndPlay )
		pFnGotoFrameAndPlay = (UFunction*) UObject::GObjObjects()->Data[ 15904 ];

	UBioSFPanel_execGotoFrameAndPlay_Parms GotoFrameAndPlay_Parms;
	memcpy ( &GotoFrameAndPlay_Parms.sPath, &sPath, 0x10 );
	GotoFrameAndPlay_Parms.nFrame = nFrame;

	pFnGotoFrameAndPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGotoFrameAndPlay, &GotoFrameAndPlay_Parms, NULL );

	pFnGotoFrameAndPlay->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.GotoLabelAndStop
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 sPath                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sLabel                         ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFPanel::GotoLabelAndStop ( struct FString sPath, struct FString sLabel )
{
	static UFunction* pFnGotoLabelAndStop = NULL;

	if ( ! pFnGotoLabelAndStop )
		pFnGotoLabelAndStop = (UFunction*) UObject::GObjObjects()->Data[ 15901 ];

	UBioSFPanel_execGotoLabelAndStop_Parms GotoLabelAndStop_Parms;
	memcpy ( &GotoLabelAndStop_Parms.sPath, &sPath, 0x10 );
	memcpy ( &GotoLabelAndStop_Parms.sLabel, &sLabel, 0x10 );

	pFnGotoLabelAndStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGotoLabelAndStop, &GotoLabelAndStop_Parms, NULL );

	pFnGotoLabelAndStop->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.GotoFrameAndStop
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 sPath                          ( CPF_Parm | CPF_NeedCtorLink )
// int                            nFrame                         ( CPF_Parm )

void UBioSFPanel::GotoFrameAndStop ( struct FString sPath, int nFrame )
{
	static UFunction* pFnGotoFrameAndStop = NULL;

	if ( ! pFnGotoFrameAndStop )
		pFnGotoFrameAndStop = (UFunction*) UObject::GObjObjects()->Data[ 15898 ];

	UBioSFPanel_execGotoFrameAndStop_Parms GotoFrameAndStop_Parms;
	memcpy ( &GotoFrameAndStop_Parms.sPath, &sPath, 0x10 );
	GotoFrameAndStop_Parms.nFrame = nFrame;

	pFnGotoFrameAndStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGotoFrameAndStop, &GotoFrameAndStop_Parms, NULL );

	pFnGotoFrameAndStop->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.SetInvokePrereq
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  eCat                           ( CPF_Parm )
// unsigned char                  eInvoke                        ( CPF_Parm )
// unsigned long                  bAllowInvoke                   ( CPF_Parm )

void UBioSFPanel::SetInvokePrereq ( unsigned char eCat, unsigned char eInvoke, unsigned long bAllowInvoke )
{
	static UFunction* pFnSetInvokePrereq = NULL;

	if ( ! pFnSetInvokePrereq )
		pFnSetInvokePrereq = (UFunction*) UObject::GObjObjects()->Data[ 15894 ];

	UBioSFPanel_execSetInvokePrereq_Parms SetInvokePrereq_Parms;
	SetInvokePrereq_Parms.eCat = eCat;
	SetInvokePrereq_Parms.eInvoke = eInvoke;
	SetInvokePrereq_Parms.bAllowInvoke = bAllowInvoke;

	pFnSetInvokePrereq->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetInvokePrereq, &SetInvokePrereq_Parms, NULL );

	pFnSetInvokePrereq->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.RequestInvoke
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eCat                           ( CPF_Parm )
// unsigned char                  eInvoke                        ( CPF_Parm )
// struct FString                 sMethodName                    ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bUseCacheConditional           ( CPF_Parm )
// struct TArray<struct FASParams> lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBioSFPanel::RequestInvoke ( unsigned char eCat, unsigned char eInvoke, struct FString sMethodName, unsigned long bUseCacheConditional, struct TArray<struct FASParams>* lstArguments )
{
	static UFunction* pFnRequestInvoke = NULL;

	if ( ! pFnRequestInvoke )
		pFnRequestInvoke = (UFunction*) UObject::GObjObjects()->Data[ 15886 ];

	UBioSFPanel_execRequestInvoke_Parms RequestInvoke_Parms;
	RequestInvoke_Parms.eCat = eCat;
	RequestInvoke_Parms.eInvoke = eInvoke;
	memcpy ( &RequestInvoke_Parms.sMethodName, &sMethodName, 0x10 );
	RequestInvoke_Parms.bUseCacheConditional = bUseCacheConditional;

	pFnRequestInvoke->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestInvoke, &RequestInvoke_Parms, NULL );

	pFnRequestInvoke->FunctionFlags |= 0x400;

	if ( lstArguments )
		memcpy ( lstArguments, &RequestInvoke_Parms.lstArguments, 0x10 );

	return RequestInvoke_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.InvokeMethodArgsReturn
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 sMethodName                    ( CPF_Parm | CPF_NeedCtorLink )
// struct TArray<struct FASParams> lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FString UBioSFPanel::InvokeMethodArgsReturn ( struct FString sMethodName, struct TArray<struct FASParams>* lstArguments )
{
	static UFunction* pFnInvokeMethodArgsReturn = NULL;

	if ( ! pFnInvokeMethodArgsReturn )
		pFnInvokeMethodArgsReturn = (UFunction*) UObject::GObjObjects()->Data[ 15881 ];

	UBioSFPanel_execInvokeMethodArgsReturn_Parms InvokeMethodArgsReturn_Parms;
	memcpy ( &InvokeMethodArgsReturn_Parms.sMethodName, &sMethodName, 0x10 );

	pFnInvokeMethodArgsReturn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInvokeMethodArgsReturn, &InvokeMethodArgsReturn_Parms, NULL );

	pFnInvokeMethodArgsReturn->FunctionFlags |= 0x400;

	if ( lstArguments )
		memcpy ( lstArguments, &InvokeMethodArgsReturn_Parms.lstArguments, 0x10 );

	return InvokeMethodArgsReturn_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.InvokeMethodReturn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 sMethodName                    ( CPF_Parm | CPF_NeedCtorLink )

struct FString UBioSFPanel::InvokeMethodReturn ( struct FString sMethodName )
{
	static UFunction* pFnInvokeMethodReturn = NULL;

	if ( ! pFnInvokeMethodReturn )
		pFnInvokeMethodReturn = (UFunction*) UObject::GObjObjects()->Data[ 15878 ];

	UBioSFPanel_execInvokeMethodReturn_Parms InvokeMethodReturn_Parms;
	memcpy ( &InvokeMethodReturn_Parms.sMethodName, &sMethodName, 0x10 );

	pFnInvokeMethodReturn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInvokeMethodReturn, &InvokeMethodReturn_Parms, NULL );

	pFnInvokeMethodReturn->FunctionFlags |= 0x400;

	return InvokeMethodReturn_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.InvokeMethodArgs
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sMethodName                    ( CPF_Parm | CPF_NeedCtorLink )
// struct TArray<struct FASParams> lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFPanel::InvokeMethodArgs ( struct FString sMethodName, struct TArray<struct FASParams>* lstArguments )
{
	static UFunction* pFnInvokeMethodArgs = NULL;

	if ( ! pFnInvokeMethodArgs )
		pFnInvokeMethodArgs = (UFunction*) UObject::GObjObjects()->Data[ 15874 ];

	UBioSFPanel_execInvokeMethodArgs_Parms InvokeMethodArgs_Parms;
	memcpy ( &InvokeMethodArgs_Parms.sMethodName, &sMethodName, 0x10 );

	pFnInvokeMethodArgs->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInvokeMethodArgs, &InvokeMethodArgs_Parms, NULL );

	pFnInvokeMethodArgs->FunctionFlags |= 0x400;

	if ( lstArguments )
		memcpy ( lstArguments, &InvokeMethodArgs_Parms.lstArguments, 0x10 );
};

// Function Engine.BioSFPanel.InvokeMethod
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sMethodName                    ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFPanel::InvokeMethod ( struct FString sMethodName )
{
	static UFunction* pFnInvokeMethod = NULL;

	if ( ! pFnInvokeMethod )
		pFnInvokeMethod = (UFunction*) UObject::GObjObjects()->Data[ 15872 ];

	UBioSFPanel_execInvokeMethod_Parms InvokeMethod_Parms;
	memcpy ( &InvokeMethod_Parms.sMethodName, &sMethodName, 0x10 );

	pFnInvokeMethod->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInvokeMethod, &InvokeMethod_Parms, NULL );

	pFnInvokeMethod->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.Load
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sResourcePath                  ( CPF_Parm | CPF_NeedCtorLink )

bool UBioSFPanel::Load ( struct FString sResourcePath )
{
	static UFunction* pFnLoad = NULL;

	if ( ! pFnLoad )
		pFnLoad = (UFunction*) UObject::GObjObjects()->Data[ 15869 ];

	UBioSFPanel_execLoad_Parms Load_Parms;
	memcpy ( &Load_Parms.sResourcePath, &sResourcePath, 0x10 );

	pFnLoad->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoad, &Load_Parms, NULL );

	pFnLoad->FunctionFlags |= 0x400;

	return Load_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.ClearAllHandlers
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioSFPanel::ClearAllHandlers ( )
{
	static UFunction* pFnClearAllHandlers = NULL;

	if ( ! pFnClearAllHandlers )
		pFnClearAllHandlers = (UFunction*) UObject::GObjObjects()->Data[ 15868 ];

	UBioSFPanel_execClearAllHandlers_Parms ClearAllHandlers_Parms;

	pFnClearAllHandlers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearAllHandlers, &ClearAllHandlers_Parms, NULL );

	pFnClearAllHandlers->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.RemoveHandler
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  oHandlerClass                  ( CPF_Parm )

bool UBioSFPanel::RemoveHandler ( class UClass* oHandlerClass )
{
	static UFunction* pFnRemoveHandler = NULL;

	if ( ! pFnRemoveHandler )
		pFnRemoveHandler = (UFunction*) UObject::GObjObjects()->Data[ 15865 ];

	UBioSFPanel_execRemoveHandler_Parms RemoveHandler_Parms;
	RemoveHandler_Parms.oHandlerClass = oHandlerClass;

	pFnRemoveHandler->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveHandler, &RemoveHandler_Parms, NULL );

	pFnRemoveHandler->FunctionFlags |= 0x400;

	return RemoveHandler_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.AttachHandler
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioSFHandler*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  oHandlerClass                  ( CPF_Parm )

class UBioSFHandler* UBioSFPanel::AttachHandler ( class UClass* oHandlerClass )
{
	static UFunction* pFnAttachHandler = NULL;

	if ( ! pFnAttachHandler )
		pFnAttachHandler = (UFunction*) UObject::GObjObjects()->Data[ 15862 ];

	UBioSFPanel_execAttachHandler_Parms AttachHandler_Parms;
	AttachHandler_Parms.oHandlerClass = oHandlerClass;

	pFnAttachHandler->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachHandler, &AttachHandler_Parms, NULL );

	pFnAttachHandler->FunctionFlags |= 0x400;

	return AttachHandler_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.AttachDefaultHandler
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioSFHandler*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioSFHandler* UBioSFPanel::AttachDefaultHandler ( )
{
	static UFunction* pFnAttachDefaultHandler = NULL;

	if ( ! pFnAttachDefaultHandler )
		pFnAttachDefaultHandler = (UFunction*) UObject::GObjObjects()->Data[ 15860 ];

	UBioSFPanel_execAttachDefaultHandler_Parms AttachDefaultHandler_Parms;

	pFnAttachDefaultHandler->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachDefaultHandler, &AttachDefaultHandler_Parms, NULL );

	pFnAttachDefaultHandler->FunctionFlags |= 0x400;

	return AttachDefaultHandler_Parms.ReturnValue;
};

// Function Engine.BioSFPanel.CleanupGameMode
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UBioSFHandler*           oHandler                       ( CPF_Parm )
// unsigned long                  bForce                         ( CPF_OptionalParm | CPF_Parm )

void UBioSFPanel::CleanupGameMode ( class UBioSFHandler* oHandler, unsigned long bForce )
{
	static UFunction* pFnCleanupGameMode = NULL;

	if ( ! pFnCleanupGameMode )
		pFnCleanupGameMode = (UFunction*) UObject::GObjObjects()->Data[ 15857 ];

	UBioSFPanel_execCleanupGameMode_Parms CleanupGameMode_Parms;
	CleanupGameMode_Parms.oHandler = oHandler;
	CleanupGameMode_Parms.bForce = bForce;

	pFnCleanupGameMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCleanupGameMode, &CleanupGameMode_Parms, NULL );

	pFnCleanupGameMode->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.RemoveScriptHandler
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioSFHandler*           oHandler                       ( CPF_Parm )

void UBioSFPanel::RemoveScriptHandler ( class UBioSFHandler* oHandler )
{
	static UFunction* pFnRemoveScriptHandler = NULL;

	if ( ! pFnRemoveScriptHandler )
		pFnRemoveScriptHandler = (UFunction*) UObject::GObjObjects()->Data[ 15855 ];

	UBioSFPanel_execRemoveScriptHandler_Parms RemoveScriptHandler_Parms;
	RemoveScriptHandler_Parms.oHandler = oHandler;

	pFnRemoveScriptHandler->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveScriptHandler, &RemoveScriptHandler_Parms, NULL );

	pFnRemoveScriptHandler->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.AddScriptHandler
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioSFHandler*           oHandler                       ( CPF_Parm )

void UBioSFPanel::AddScriptHandler ( class UBioSFHandler* oHandler )
{
	static UFunction* pFnAddScriptHandler = NULL;

	if ( ! pFnAddScriptHandler )
		pFnAddScriptHandler = (UFunction*) UObject::GObjObjects()->Data[ 15853 ];

	UBioSFPanel_execAddScriptHandler_Parms AddScriptHandler_Parms;
	AddScriptHandler_Parms.oHandler = oHandler;

	pFnAddScriptHandler->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddScriptHandler, &AddScriptHandler_Parms, NULL );

	pFnAddScriptHandler->FunctionFlags |= 0x400;
};

// Function Engine.BioSFPanel.GetMovieResource
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FBioScaleformResource   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FBioScaleformResource UBioSFPanel::GetMovieResource ( )
{
	static UFunction* pFnGetMovieResource = NULL;

	if ( ! pFnGetMovieResource )
		pFnGetMovieResource = (UFunction*) UObject::GObjObjects()->Data[ 15851 ];

	UBioSFPanel_execGetMovieResource_Parms GetMovieResource_Parms;

	pFnGetMovieResource->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMovieResource, &GetMovieResource_Parms, NULL );

	pFnGetMovieResource->FunctionFlags |= 0x400;

	return GetMovieResource_Parms.ReturnValue;
};

// Function Engine.BioRemoteLogger.TPMCheckinTestPlan
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioRemoteLogger::eventTPMCheckinTestPlan ( )
{
	static UFunction* pFnTPMCheckinTestPlan = NULL;

	if ( ! pFnTPMCheckinTestPlan )
		pFnTPMCheckinTestPlan = (UFunction*) UObject::GObjObjects()->Data[ 15042 ];

	UBioRemoteLogger_eventTPMCheckinTestPlan_Parms TPMCheckinTestPlan_Parms;

	this->ProcessEvent ( pFnTPMCheckinTestPlan, &TPMCheckinTestPlan_Parms, NULL );
};

// Function Engine.BioRemoteLogger.TPMCheckoutTestPlan
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nTestPlanID                    ( CPF_Parm )

void UBioRemoteLogger::eventTPMCheckoutTestPlan ( int nTestPlanID )
{
	static UFunction* pFnTPMCheckoutTestPlan = NULL;

	if ( ! pFnTPMCheckoutTestPlan )
		pFnTPMCheckoutTestPlan = (UFunction*) UObject::GObjObjects()->Data[ 15040 ];

	UBioRemoteLogger_eventTPMCheckoutTestPlan_Parms TPMCheckoutTestPlan_Parms;
	TPMCheckoutTestPlan_Parms.nTestPlanID = nTestPlanID;

	this->ProcessEvent ( pFnTPMCheckoutTestPlan, &TPMCheckoutTestPlan_Parms, NULL );
};

// Function Engine.BioRemoteLogger.TRun
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nResult                        ( CPF_Parm )

void UBioRemoteLogger::eventTRun ( int nResult )
{
	static UFunction* pFnTRun = NULL;

	if ( ! pFnTRun )
		pFnTRun = (UFunction*) UObject::GObjObjects()->Data[ 15038 ];

	UBioRemoteLogger_eventTRun_Parms TRun_Parms;
	TRun_Parms.nResult = nResult;

	this->ProcessEvent ( pFnTRun, &TRun_Parms, NULL );
};

// Function Engine.BioRemoteLogger.TAdd
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 sTestName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sTestCaseString                ( CPF_Parm | CPF_NeedCtorLink )

void UBioRemoteLogger::eventTAdd ( struct FString sTestName, struct FString sTestCaseString )
{
	static UFunction* pFnTAdd = NULL;

	if ( ! pFnTAdd )
		pFnTAdd = (UFunction*) UObject::GObjObjects()->Data[ 15032 ];

	UBioRemoteLogger_eventTAdd_Parms TAdd_Parms;
	memcpy ( &TAdd_Parms.sTestName, &sTestName, 0x10 );
	memcpy ( &TAdd_Parms.sTestCaseString, &sTestCaseString, 0x10 );

	this->ProcessEvent ( pFnTAdd, &TAdd_Parms, NULL );
};

// Function Engine.BioRemoteLogger.SendTPMMessage
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 sMessage                       ( CPF_Parm | CPF_NeedCtorLink )

void UBioRemoteLogger::eventSendTPMMessage ( struct FString sMessage )
{
	static UFunction* pFnSendTPMMessage = NULL;

	if ( ! pFnSendTPMMessage )
		pFnSendTPMMessage = (UFunction*) UObject::GObjObjects()->Data[ 15029 ];

	UBioRemoteLogger_eventSendTPMMessage_Parms SendTPMMessage_Parms;
	memcpy ( &SendTPMMessage_Parms.sMessage, &sMessage, 0x10 );

	this->ProcessEvent ( pFnSendTPMMessage, &SendTPMMessage_Parms, NULL );
};

// Function Engine.BioRemoteLogger.SendVocalizationEvent
// [0x00022002] 
// Parameters infos:
// struct FName                   SpeakerTag                     ( CPF_Parm )
// struct FName                   Sound                          ( CPF_Parm )

void UBioRemoteLogger::SendVocalizationEvent ( struct FName SpeakerTag, struct FName Sound )
{
	static UFunction* pFnSendVocalizationEvent = NULL;

	if ( ! pFnSendVocalizationEvent )
		pFnSendVocalizationEvent = (UFunction*) UObject::GObjObjects()->Data[ 15026 ];

	UBioRemoteLogger_execSendVocalizationEvent_Parms SendVocalizationEvent_Parms;
	memcpy ( &SendVocalizationEvent_Parms.SpeakerTag, &SpeakerTag, 0x8 );
	memcpy ( &SendVocalizationEvent_Parms.Sound, &Sound, 0x8 );

	this->ProcessEvent ( pFnSendVocalizationEvent, &SendVocalizationEvent_Parms, NULL );
};

// Function Engine.BioRemoteLogger.ShortName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class UObject*                 O                              ( CPF_Parm )

struct FString UBioRemoteLogger::ShortName ( class UObject* O )
{
	static UFunction* pFnShortName = NULL;

	if ( ! pFnShortName )
		pFnShortName = (UFunction*) UObject::GObjObjects()->Data[ 15023 ];

	UBioRemoteLogger_execShortName_Parms ShortName_Parms;
	ShortName_Parms.O = O;

	pFnShortName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShortName, &ShortName_Parms, NULL );

	pFnShortName->FunctionFlags |= 0x400;

	return ShortName_Parms.ReturnValue;
};

// Function Engine.BioRemoteLogger.GetGameMode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioRemoteLogger::GetGameMode ( )
{
	static UFunction* pFnGetGameMode = NULL;

	if ( ! pFnGetGameMode )
		pFnGetGameMode = (UFunction*) UObject::GObjObjects()->Data[ 15021 ];

	UBioRemoteLogger_execGetGameMode_Parms GetGameMode_Parms;

	pFnGetGameMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGameMode, &GetGameMode_Parms, NULL );

	pFnGetGameMode->FunctionFlags |= 0x400;

	return GetGameMode_Parms.ReturnValue;
};

// Function Engine.BioRemoteLogger.SetTPMLoggingEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  Enable                         ( CPF_Parm )

void UBioRemoteLogger::SetTPMLoggingEnabled ( unsigned long Enable )
{
	static UFunction* pFnSetTPMLoggingEnabled = NULL;

	if ( ! pFnSetTPMLoggingEnabled )
		pFnSetTPMLoggingEnabled = (UFunction*) UObject::GObjObjects()->Data[ 15019 ];

	UBioRemoteLogger_execSetTPMLoggingEnabled_Parms SetTPMLoggingEnabled_Parms;
	SetTPMLoggingEnabled_Parms.Enable = Enable;

	pFnSetTPMLoggingEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTPMLoggingEnabled, &SetTPMLoggingEnabled_Parms, NULL );

	pFnSetTPMLoggingEnabled->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.GetTPMLoggingEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioRemoteLogger::GetTPMLoggingEnabled ( )
{
	static UFunction* pFnGetTPMLoggingEnabled = NULL;

	if ( ! pFnGetTPMLoggingEnabled )
		pFnGetTPMLoggingEnabled = (UFunction*) UObject::GObjObjects()->Data[ 15017 ];

	UBioRemoteLogger_execGetTPMLoggingEnabled_Parms GetTPMLoggingEnabled_Parms;

	pFnGetTPMLoggingEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTPMLoggingEnabled, &GetTPMLoggingEnabled_Parms, NULL );

	pFnGetTPMLoggingEnabled->FunctionFlags |= 0x400;

	return GetTPMLoggingEnabled_Parms.ReturnValue;
};

// Function Engine.BioRemoteLogger.GetSessionBuild
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioRemoteLogger::GetSessionBuild ( )
{
	static UFunction* pFnGetSessionBuild = NULL;

	if ( ! pFnGetSessionBuild )
		pFnGetSessionBuild = (UFunction*) UObject::GObjObjects()->Data[ 15015 ];

	UBioRemoteLogger_execGetSessionBuild_Parms GetSessionBuild_Parms;

	pFnGetSessionBuild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSessionBuild, &GetSessionBuild_Parms, NULL );

	pFnGetSessionBuild->FunctionFlags |= 0x400;

	return GetSessionBuild_Parms.ReturnValue;
};

// Function Engine.BioRemoteLogger.GetRunID
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioRemoteLogger::GetRunID ( )
{
	static UFunction* pFnGetRunID = NULL;

	if ( ! pFnGetRunID )
		pFnGetRunID = (UFunction*) UObject::GObjObjects()->Data[ 15013 ];

	UBioRemoteLogger_execGetRunID_Parms GetRunID_Parms;

	pFnGetRunID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRunID, &GetRunID_Parms, NULL );

	pFnGetRunID->FunctionFlags |= 0x400;

	return GetRunID_Parms.ReturnValue;
};

// Function Engine.BioRemoteLogger.GetSessionID
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioRemoteLogger::GetSessionID ( )
{
	static UFunction* pFnGetSessionID = NULL;

	if ( ! pFnGetSessionID )
		pFnGetSessionID = (UFunction*) UObject::GObjObjects()->Data[ 15011 ];

	UBioRemoteLogger_execGetSessionID_Parms GetSessionID_Parms;

	pFnGetSessionID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSessionID, &GetSessionID_Parms, NULL );

	pFnGetSessionID->FunctionFlags |= 0x400;

	return GetSessionID_Parms.ReturnValue;
};

// Function Engine.BioRemoteLogger.GetSessionStatus
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioRemoteLogger::GetSessionStatus ( )
{
	static UFunction* pFnGetSessionStatus = NULL;

	if ( ! pFnGetSessionStatus )
		pFnGetSessionStatus = (UFunction*) UObject::GObjObjects()->Data[ 15009 ];

	UBioRemoteLogger_execGetSessionStatus_Parms GetSessionStatus_Parms;

	pFnGetSessionStatus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSessionStatus, &GetSessionStatus_Parms, NULL );

	pFnGetSessionStatus->FunctionFlags |= 0x400;

	return GetSessionStatus_Parms.ReturnValue;
};

// Function Engine.BioRemoteLogger.SetFlag
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:
// int                            nFlag                          ( CPF_Parm )
// unsigned long                  bVal                           ( CPF_Parm )

void UBioRemoteLogger::SetFlag ( int nFlag, unsigned long bVal )
{
	static UFunction* pFnSetFlag = NULL;

	if ( ! pFnSetFlag )
		pFnSetFlag = (UFunction*) UObject::GObjObjects()->Data[ 15006 ];

	UBioRemoteLogger_execSetFlag_Parms SetFlag_Parms;
	SetFlag_Parms.nFlag = nFlag;
	SetFlag_Parms.bVal = bVal;

	pFnSetFlag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFlag, &SetFlag_Parms, NULL );

	pFnSetFlag->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.ToggleFlag
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:
// int                            nFlag                          ( CPF_Parm )

void UBioRemoteLogger::ToggleFlag ( int nFlag )
{
	static UFunction* pFnToggleFlag = NULL;

	if ( ! pFnToggleFlag )
		pFnToggleFlag = (UFunction*) UObject::GObjObjects()->Data[ 15004 ];

	UBioRemoteLogger_execToggleFlag_Parms ToggleFlag_Parms;
	ToggleFlag_Parms.nFlag = nFlag;

	pFnToggleFlag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnToggleFlag, &ToggleFlag_Parms, NULL );

	pFnToggleFlag->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.GetFlag
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nFlag                          ( CPF_Parm )

bool UBioRemoteLogger::GetFlag ( int nFlag )
{
	static UFunction* pFnGetFlag = NULL;

	if ( ! pFnGetFlag )
		pFnGetFlag = (UFunction*) UObject::GObjObjects()->Data[ 15001 ];

	UBioRemoteLogger_execGetFlag_Parms GetFlag_Parms;
	GetFlag_Parms.nFlag = nFlag;

	pFnGetFlag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFlag, &GetFlag_Parms, NULL );

	pFnGetFlag->FunctionFlags |= 0x400;

	return GetFlag_Parms.ReturnValue;
};

// Function Engine.BioRemoteLogger.SkynetScreenshot
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 sScreenshotName                ( CPF_Parm | CPF_NeedCtorLink )

void UBioRemoteLogger::SkynetScreenshot ( struct FString sScreenshotName )
{
	static UFunction* pFnSkynetScreenshot = NULL;

	if ( ! pFnSkynetScreenshot )
		pFnSkynetScreenshot = (UFunction*) UObject::GObjObjects()->Data[ 14999 ];

	UBioRemoteLogger_execSkynetScreenshot_Parms SkynetScreenshot_Parms;
	memcpy ( &SkynetScreenshot_Parms.sScreenshotName, &sScreenshotName, 0x10 );

	pFnSkynetScreenshot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSkynetScreenshot, &SkynetScreenshot_Parms, NULL );

	pFnSkynetScreenshot->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.SendStatistic
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 sStatisticName                 ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sOperationType                 ( CPF_Parm | CPF_NeedCtorLink )
// float                          fData                          ( CPF_Parm )

void UBioRemoteLogger::SendStatistic ( struct FString sStatisticName, struct FString sOperationType, float fData )
{
	static UFunction* pFnSendStatistic = NULL;

	if ( ! pFnSendStatistic )
		pFnSendStatistic = (UFunction*) UObject::GObjObjects()->Data[ 14995 ];

	UBioRemoteLogger_execSendStatistic_Parms SendStatistic_Parms;
	memcpy ( &SendStatistic_Parms.sStatisticName, &sStatisticName, 0x10 );
	memcpy ( &SendStatistic_Parms.sOperationType, &sOperationType, 0x10 );
	SendStatistic_Parms.fData = fData;

	pFnSendStatistic->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendStatistic, &SendStatistic_Parms, NULL );

	pFnSendStatistic->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.SendBugReport
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:
// float                          fX                             ( CPF_Parm )
// float                          fY                             ( CPF_Parm )
// float                          fZ                             ( CPF_Parm )
// float                          fOrientation                   ( CPF_Parm )
// int                            nWeaponType                    ( CPF_Parm )
// int                            nWeaponMod                     ( CPF_Parm )
// int                            nArmourType                    ( CPF_Parm )
// int                            nArmourMod                     ( CPF_Parm )
// struct FString                 sPartyMember1                  ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sPartyMember2                  ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bIsPercievingEnemy             ( CPF_Parm )
// struct FString                 sBugDescription                ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sEmailAddress                  ( CPF_Parm | CPF_NeedCtorLink )

void UBioRemoteLogger::SendBugReport ( float fX, float fY, float fZ, float fOrientation, int nWeaponType, int nWeaponMod, int nArmourType, int nArmourMod, struct FString sPartyMember1, struct FString sPartyMember2, unsigned long bIsPercievingEnemy, struct FString sBugDescription, struct FString sEmailAddress )
{
	static UFunction* pFnSendBugReport = NULL;

	if ( ! pFnSendBugReport )
		pFnSendBugReport = (UFunction*) UObject::GObjObjects()->Data[ 14981 ];

	UBioRemoteLogger_execSendBugReport_Parms SendBugReport_Parms;
	SendBugReport_Parms.fX = fX;
	SendBugReport_Parms.fY = fY;
	SendBugReport_Parms.fZ = fZ;
	SendBugReport_Parms.fOrientation = fOrientation;
	SendBugReport_Parms.nWeaponType = nWeaponType;
	SendBugReport_Parms.nWeaponMod = nWeaponMod;
	SendBugReport_Parms.nArmourType = nArmourType;
	SendBugReport_Parms.nArmourMod = nArmourMod;
	memcpy ( &SendBugReport_Parms.sPartyMember1, &sPartyMember1, 0x10 );
	memcpy ( &SendBugReport_Parms.sPartyMember2, &sPartyMember2, 0x10 );
	SendBugReport_Parms.bIsPercievingEnemy = bIsPercievingEnemy;
	memcpy ( &SendBugReport_Parms.sBugDescription, &sBugDescription, 0x10 );
	memcpy ( &SendBugReport_Parms.sEmailAddress, &sEmailAddress, 0x10 );

	pFnSendBugReport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendBugReport, &SendBugReport_Parms, NULL );

	pFnSendBugReport->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.SendDebugEmail
// [0x00024601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 sEmailDestination              ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sEmailSubject                  ( CPF_Parm | CPF_NeedCtorLink )
// int                            nExceptionType                 ( CPF_Parm )
// struct FString                 sEmailBody                     ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UBioRemoteLogger::SendDebugEmail ( struct FString sEmailDestination, struct FString sEmailSubject, int nExceptionType, struct FString sEmailBody )
{
	static UFunction* pFnSendDebugEmail = NULL;

	if ( ! pFnSendDebugEmail )
		pFnSendDebugEmail = (UFunction*) UObject::GObjObjects()->Data[ 14976 ];

	UBioRemoteLogger_execSendDebugEmail_Parms SendDebugEmail_Parms;
	memcpy ( &SendDebugEmail_Parms.sEmailDestination, &sEmailDestination, 0x10 );
	memcpy ( &SendDebugEmail_Parms.sEmailSubject, &sEmailSubject, 0x10 );
	SendDebugEmail_Parms.nExceptionType = nExceptionType;
	memcpy ( &SendDebugEmail_Parms.sEmailBody, &sEmailBody, 0x10 );

	pFnSendDebugEmail->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendDebugEmail, &SendDebugEmail_Parms, NULL );

	pFnSendDebugEmail->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.SendCustomEventFloat
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 sPacketHandler                 ( CPF_Parm | CPF_NeedCtorLink )
// int                            nLogEventID                    ( CPF_Parm )
// float                          fX                             ( CPF_Parm )
// float                          fY                             ( CPF_Parm )
// float                          fZ                             ( CPF_Parm )
// struct FString                 sAreaName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sNameObject                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sNameTarget                    ( CPF_Parm | CPF_NeedCtorLink )
// float                          fData0                         ( CPF_Parm )
// float                          fData1                         ( CPF_Parm )
// struct FString                 sString1                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sString2                       ( CPF_Parm | CPF_NeedCtorLink )
// int                            nObjectType                    ( CPF_Parm )
// unsigned long                  bIsPartyMember                 ( CPF_Parm )

void UBioRemoteLogger::SendCustomEventFloat ( struct FString sPacketHandler, int nLogEventID, float fX, float fY, float fZ, struct FString sAreaName, struct FString sNameObject, struct FString sNameTarget, float fData0, float fData1, struct FString sString1, struct FString sString2, int nObjectType, unsigned long bIsPartyMember )
{
	static UFunction* pFnSendCustomEventFloat = NULL;

	if ( ! pFnSendCustomEventFloat )
		pFnSendCustomEventFloat = (UFunction*) UObject::GObjObjects()->Data[ 14961 ];

	UBioRemoteLogger_execSendCustomEventFloat_Parms SendCustomEventFloat_Parms;
	memcpy ( &SendCustomEventFloat_Parms.sPacketHandler, &sPacketHandler, 0x10 );
	SendCustomEventFloat_Parms.nLogEventID = nLogEventID;
	SendCustomEventFloat_Parms.fX = fX;
	SendCustomEventFloat_Parms.fY = fY;
	SendCustomEventFloat_Parms.fZ = fZ;
	memcpy ( &SendCustomEventFloat_Parms.sAreaName, &sAreaName, 0x10 );
	memcpy ( &SendCustomEventFloat_Parms.sNameObject, &sNameObject, 0x10 );
	memcpy ( &SendCustomEventFloat_Parms.sNameTarget, &sNameTarget, 0x10 );
	SendCustomEventFloat_Parms.fData0 = fData0;
	SendCustomEventFloat_Parms.fData1 = fData1;
	memcpy ( &SendCustomEventFloat_Parms.sString1, &sString1, 0x10 );
	memcpy ( &SendCustomEventFloat_Parms.sString2, &sString2, 0x10 );
	SendCustomEventFloat_Parms.nObjectType = nObjectType;
	SendCustomEventFloat_Parms.bIsPartyMember = bIsPartyMember;

	pFnSendCustomEventFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendCustomEventFloat, &SendCustomEventFloat_Parms, NULL );

	pFnSendCustomEventFloat->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.SendCustomEvent
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 sPacketHandler                 ( CPF_Parm | CPF_NeedCtorLink )
// int                            nLogEventID                    ( CPF_Parm )
// float                          fX                             ( CPF_Parm )
// float                          fY                             ( CPF_Parm )
// float                          fZ                             ( CPF_Parm )
// struct FString                 sAreaName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sNameObject                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sNameTarget                    ( CPF_Parm | CPF_NeedCtorLink )
// int                            nIntVal1                       ( CPF_Parm )
// int                            nIntVal2                       ( CPF_Parm )
// struct FString                 sString1                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sString2                       ( CPF_Parm | CPF_NeedCtorLink )
// int                            nObjectType                    ( CPF_Parm )
// unsigned long                  bIsPartyMember                 ( CPF_Parm )

void UBioRemoteLogger::SendCustomEvent ( struct FString sPacketHandler, int nLogEventID, float fX, float fY, float fZ, struct FString sAreaName, struct FString sNameObject, struct FString sNameTarget, int nIntVal1, int nIntVal2, struct FString sString1, struct FString sString2, int nObjectType, unsigned long bIsPartyMember )
{
	static UFunction* pFnSendCustomEvent = NULL;

	if ( ! pFnSendCustomEvent )
		pFnSendCustomEvent = (UFunction*) UObject::GObjObjects()->Data[ 14946 ];

	UBioRemoteLogger_execSendCustomEvent_Parms SendCustomEvent_Parms;
	memcpy ( &SendCustomEvent_Parms.sPacketHandler, &sPacketHandler, 0x10 );
	SendCustomEvent_Parms.nLogEventID = nLogEventID;
	SendCustomEvent_Parms.fX = fX;
	SendCustomEvent_Parms.fY = fY;
	SendCustomEvent_Parms.fZ = fZ;
	memcpy ( &SendCustomEvent_Parms.sAreaName, &sAreaName, 0x10 );
	memcpy ( &SendCustomEvent_Parms.sNameObject, &sNameObject, 0x10 );
	memcpy ( &SendCustomEvent_Parms.sNameTarget, &sNameTarget, 0x10 );
	SendCustomEvent_Parms.nIntVal1 = nIntVal1;
	SendCustomEvent_Parms.nIntVal2 = nIntVal2;
	memcpy ( &SendCustomEvent_Parms.sString1, &sString1, 0x10 );
	memcpy ( &SendCustomEvent_Parms.sString2, &sString2, 0x10 );
	SendCustomEvent_Parms.nObjectType = nObjectType;
	SendCustomEvent_Parms.bIsPartyMember = bIsPartyMember;

	pFnSendCustomEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendCustomEvent, &SendCustomEvent_Parms, NULL );

	pFnSendCustomEvent->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.SendEventFloat
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:
// int                            nLogEventID                    ( CPF_Parm )
// float                          fX                             ( CPF_Parm )
// float                          fY                             ( CPF_Parm )
// float                          fZ                             ( CPF_Parm )
// struct FString                 sAreaName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sNameObject                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sNameTarget                    ( CPF_Parm | CPF_NeedCtorLink )
// float                          fData0                         ( CPF_Parm )
// float                          fData1                         ( CPF_Parm )
// struct FString                 sString1                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sString2                       ( CPF_Parm | CPF_NeedCtorLink )
// int                            nObjectType                    ( CPF_Parm )
// int                            bIsPartyMember                 ( CPF_Parm )

void UBioRemoteLogger::SendEventFloat ( int nLogEventID, float fX, float fY, float fZ, struct FString sAreaName, struct FString sNameObject, struct FString sNameTarget, float fData0, float fData1, struct FString sString1, struct FString sString2, int nObjectType, int bIsPartyMember )
{
	static UFunction* pFnSendEventFloat = NULL;

	if ( ! pFnSendEventFloat )
		pFnSendEventFloat = (UFunction*) UObject::GObjObjects()->Data[ 14932 ];

	UBioRemoteLogger_execSendEventFloat_Parms SendEventFloat_Parms;
	SendEventFloat_Parms.nLogEventID = nLogEventID;
	SendEventFloat_Parms.fX = fX;
	SendEventFloat_Parms.fY = fY;
	SendEventFloat_Parms.fZ = fZ;
	memcpy ( &SendEventFloat_Parms.sAreaName, &sAreaName, 0x10 );
	memcpy ( &SendEventFloat_Parms.sNameObject, &sNameObject, 0x10 );
	memcpy ( &SendEventFloat_Parms.sNameTarget, &sNameTarget, 0x10 );
	SendEventFloat_Parms.fData0 = fData0;
	SendEventFloat_Parms.fData1 = fData1;
	memcpy ( &SendEventFloat_Parms.sString1, &sString1, 0x10 );
	memcpy ( &SendEventFloat_Parms.sString2, &sString2, 0x10 );
	SendEventFloat_Parms.nObjectType = nObjectType;
	SendEventFloat_Parms.bIsPartyMember = bIsPartyMember;

	pFnSendEventFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendEventFloat, &SendEventFloat_Parms, NULL );

	pFnSendEventFloat->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.SendEvent
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:
// int                            nLogEventID                    ( CPF_Parm )
// float                          fX                             ( CPF_Parm )
// float                          fY                             ( CPF_Parm )
// float                          fZ                             ( CPF_Parm )
// struct FString                 sAreaName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sNameObject                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sNameTarget                    ( CPF_Parm | CPF_NeedCtorLink )
// int                            nIntVal1                       ( CPF_Parm )
// int                            nIntVal2                       ( CPF_Parm )
// struct FString                 sString1                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sString2                       ( CPF_Parm | CPF_NeedCtorLink )
// int                            nObjectType                    ( CPF_Parm )
// int                            bIsPartyMember                 ( CPF_Parm )

void UBioRemoteLogger::SendEvent ( int nLogEventID, float fX, float fY, float fZ, struct FString sAreaName, struct FString sNameObject, struct FString sNameTarget, int nIntVal1, int nIntVal2, struct FString sString1, struct FString sString2, int nObjectType, int bIsPartyMember )
{
	static UFunction* pFnSendEvent = NULL;

	if ( ! pFnSendEvent )
		pFnSendEvent = (UFunction*) UObject::GObjObjects()->Data[ 14918 ];

	UBioRemoteLogger_execSendEvent_Parms SendEvent_Parms;
	SendEvent_Parms.nLogEventID = nLogEventID;
	SendEvent_Parms.fX = fX;
	SendEvent_Parms.fY = fY;
	SendEvent_Parms.fZ = fZ;
	memcpy ( &SendEvent_Parms.sAreaName, &sAreaName, 0x10 );
	memcpy ( &SendEvent_Parms.sNameObject, &sNameObject, 0x10 );
	memcpy ( &SendEvent_Parms.sNameTarget, &sNameTarget, 0x10 );
	SendEvent_Parms.nIntVal1 = nIntVal1;
	SendEvent_Parms.nIntVal2 = nIntVal2;
	memcpy ( &SendEvent_Parms.sString1, &sString1, 0x10 );
	memcpy ( &SendEvent_Parms.sString2, &sString2, 0x10 );
	SendEvent_Parms.nObjectType = nObjectType;
	SendEvent_Parms.bIsPartyMember = bIsPartyMember;

	pFnSendEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendEvent, &SendEvent_Parms, NULL );

	pFnSendEvent->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.SendPlayerEventFloat
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            nLogEventID                    ( CPF_Parm )
// struct FString                 sString1                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sString2                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sString3                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sString4                       ( CPF_Parm | CPF_NeedCtorLink )
// float                          fData0                         ( CPF_Parm )
// float                          fData1                         ( CPF_Parm )
// int                            nInt3                          ( CPF_Parm )
// int                            nInt4                          ( CPF_Parm )

void UBioRemoteLogger::SendPlayerEventFloat ( int nLogEventID, struct FString sString1, struct FString sString2, struct FString sString3, struct FString sString4, float fData0, float fData1, int nInt3, int nInt4 )
{
	static UFunction* pFnSendPlayerEventFloat = NULL;

	if ( ! pFnSendPlayerEventFloat )
		pFnSendPlayerEventFloat = (UFunction*) UObject::GObjObjects()->Data[ 14908 ];

	UBioRemoteLogger_execSendPlayerEventFloat_Parms SendPlayerEventFloat_Parms;
	SendPlayerEventFloat_Parms.nLogEventID = nLogEventID;
	memcpy ( &SendPlayerEventFloat_Parms.sString1, &sString1, 0x10 );
	memcpy ( &SendPlayerEventFloat_Parms.sString2, &sString2, 0x10 );
	memcpy ( &SendPlayerEventFloat_Parms.sString3, &sString3, 0x10 );
	memcpy ( &SendPlayerEventFloat_Parms.sString4, &sString4, 0x10 );
	SendPlayerEventFloat_Parms.fData0 = fData0;
	SendPlayerEventFloat_Parms.fData1 = fData1;
	SendPlayerEventFloat_Parms.nInt3 = nInt3;
	SendPlayerEventFloat_Parms.nInt4 = nInt4;

	pFnSendPlayerEventFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendPlayerEventFloat, &SendPlayerEventFloat_Parms, NULL );

	pFnSendPlayerEventFloat->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.SendPlayerEvent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            nLogEventID                    ( CPF_Parm )
// struct FString                 sString1                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sString2                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sString3                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sString4                       ( CPF_Parm | CPF_NeedCtorLink )
// int                            nInt1                          ( CPF_Parm )
// int                            nInt2                          ( CPF_Parm )
// int                            nInt3                          ( CPF_Parm )
// int                            nInt4                          ( CPF_Parm )

void UBioRemoteLogger::SendPlayerEvent ( int nLogEventID, struct FString sString1, struct FString sString2, struct FString sString3, struct FString sString4, int nInt1, int nInt2, int nInt3, int nInt4 )
{
	static UFunction* pFnSendPlayerEvent = NULL;

	if ( ! pFnSendPlayerEvent )
		pFnSendPlayerEvent = (UFunction*) UObject::GObjObjects()->Data[ 14898 ];

	UBioRemoteLogger_execSendPlayerEvent_Parms SendPlayerEvent_Parms;
	SendPlayerEvent_Parms.nLogEventID = nLogEventID;
	memcpy ( &SendPlayerEvent_Parms.sString1, &sString1, 0x10 );
	memcpy ( &SendPlayerEvent_Parms.sString2, &sString2, 0x10 );
	memcpy ( &SendPlayerEvent_Parms.sString3, &sString3, 0x10 );
	memcpy ( &SendPlayerEvent_Parms.sString4, &sString4, 0x10 );
	SendPlayerEvent_Parms.nInt1 = nInt1;
	SendPlayerEvent_Parms.nInt2 = nInt2;
	SendPlayerEvent_Parms.nInt3 = nInt3;
	SendPlayerEvent_Parms.nInt4 = nInt4;

	pFnSendPlayerEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendPlayerEvent, &SendPlayerEvent_Parms, NULL );

	pFnSendPlayerEvent->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.SendMapEvent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            nLogEventID                    ( CPF_Parm )
// struct FVector                 pos                            ( CPF_Parm )
// struct FString                 sString1                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sString2                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sString3                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sString4                       ( CPF_Parm | CPF_NeedCtorLink )
// int                            nInt1                          ( CPF_Parm )
// int                            nInt2                          ( CPF_Parm )
// int                            nInt3                          ( CPF_Parm )
// int                            nInt4                          ( CPF_Parm )

void UBioRemoteLogger::SendMapEvent ( int nLogEventID, struct FVector pos, struct FString sString1, struct FString sString2, struct FString sString3, struct FString sString4, int nInt1, int nInt2, int nInt3, int nInt4 )
{
	static UFunction* pFnSendMapEvent = NULL;

	if ( ! pFnSendMapEvent )
		pFnSendMapEvent = (UFunction*) UObject::GObjObjects()->Data[ 14887 ];

	UBioRemoteLogger_execSendMapEvent_Parms SendMapEvent_Parms;
	SendMapEvent_Parms.nLogEventID = nLogEventID;
	memcpy ( &SendMapEvent_Parms.pos, &pos, 0xC );
	memcpy ( &SendMapEvent_Parms.sString1, &sString1, 0x10 );
	memcpy ( &SendMapEvent_Parms.sString2, &sString2, 0x10 );
	memcpy ( &SendMapEvent_Parms.sString3, &sString3, 0x10 );
	memcpy ( &SendMapEvent_Parms.sString4, &sString4, 0x10 );
	SendMapEvent_Parms.nInt1 = nInt1;
	SendMapEvent_Parms.nInt2 = nInt2;
	SendMapEvent_Parms.nInt3 = nInt3;
	SendMapEvent_Parms.nInt4 = nInt4;

	pFnSendMapEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendMapEvent, &SendMapEvent_Parms, NULL );

	pFnSendMapEvent->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.SendHardwareInfoMessage
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioRemoteLogger::SendHardwareInfoMessage ( )
{
	static UFunction* pFnSendHardwareInfoMessage = NULL;

	if ( ! pFnSendHardwareInfoMessage )
		pFnSendHardwareInfoMessage = (UFunction*) UObject::GObjObjects()->Data[ 14886 ];

	UBioRemoteLogger_execSendHardwareInfoMessage_Parms SendHardwareInfoMessage_Parms;

	pFnSendHardwareInfoMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendHardwareInfoMessage, &SendHardwareInfoMessage_Parms, NULL );

	pFnSendHardwareInfoMessage->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.SendFPSTest
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioRemoteLogger::SendFPSTest ( )
{
	static UFunction* pFnSendFPSTest = NULL;

	if ( ! pFnSendFPSTest )
		pFnSendFPSTest = (UFunction*) UObject::GObjObjects()->Data[ 14885 ];

	UBioRemoteLogger_execSendFPSTest_Parms SendFPSTest_Parms;

	pFnSendFPSTest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendFPSTest, &SendFPSTest_Parms, NULL );

	pFnSendFPSTest->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.SendTPMEvent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 sMessage                       ( CPF_Parm | CPF_NeedCtorLink )

void UBioRemoteLogger::SendTPMEvent ( struct FString sMessage )
{
	static UFunction* pFnSendTPMEvent = NULL;

	if ( ! pFnSendTPMEvent )
		pFnSendTPMEvent = (UFunction*) UObject::GObjObjects()->Data[ 14883 ];

	UBioRemoteLogger_execSendTPMEvent_Parms SendTPMEvent_Parms;
	memcpy ( &SendTPMEvent_Parms.sMessage, &sMessage, 0x10 );

	pFnSendTPMEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendTPMEvent, &SendTPMEvent_Parms, NULL );

	pFnSendTPMEvent->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.SendAssertEvent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            nLineNumber                    ( CPF_Parm )
// struct FString                 sAssertFileName                ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sAssertMessage                 ( CPF_Parm | CPF_NeedCtorLink )

void UBioRemoteLogger::SendAssertEvent ( int nLineNumber, struct FString sAssertFileName, struct FString sAssertMessage )
{
	static UFunction* pFnSendAssertEvent = NULL;

	if ( ! pFnSendAssertEvent )
		pFnSendAssertEvent = (UFunction*) UObject::GObjObjects()->Data[ 14879 ];

	UBioRemoteLogger_execSendAssertEvent_Parms SendAssertEvent_Parms;
	SendAssertEvent_Parms.nLineNumber = nLineNumber;
	memcpy ( &SendAssertEvent_Parms.sAssertFileName, &sAssertFileName, 0x10 );
	memcpy ( &SendAssertEvent_Parms.sAssertMessage, &sAssertMessage, 0x10 );

	pFnSendAssertEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendAssertEvent, &SendAssertEvent_Parms, NULL );

	pFnSendAssertEvent->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.SendQAEvent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            nMessageEventId                ( CPF_Parm )
// struct FString                 sType                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sLogMsg                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sCurrentMessage                ( CPF_Parm | CPF_NeedCtorLink )

void UBioRemoteLogger::SendQAEvent ( int nMessageEventId, struct FString sType, struct FString sLogMsg, struct FString sCurrentMessage )
{
	static UFunction* pFnSendQAEvent = NULL;

	if ( ! pFnSendQAEvent )
		pFnSendQAEvent = (UFunction*) UObject::GObjObjects()->Data[ 14874 ];

	UBioRemoteLogger_execSendQAEvent_Parms SendQAEvent_Parms;
	SendQAEvent_Parms.nMessageEventId = nMessageEventId;
	memcpy ( &SendQAEvent_Parms.sType, &sType, 0x10 );
	memcpy ( &SendQAEvent_Parms.sLogMsg, &sLogMsg, 0x10 );
	memcpy ( &SendQAEvent_Parms.sCurrentMessage, &sCurrentMessage, 0x10 );

	pFnSendQAEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendQAEvent, &SendQAEvent_Parms, NULL );

	pFnSendQAEvent->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.SendInvalidPlaythrough
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 sCheat                         ( CPF_Parm | CPF_NeedCtorLink )

void UBioRemoteLogger::SendInvalidPlaythrough ( struct FString sCheat )
{
	static UFunction* pFnSendInvalidPlaythrough = NULL;

	if ( ! pFnSendInvalidPlaythrough )
		pFnSendInvalidPlaythrough = (UFunction*) UObject::GObjObjects()->Data[ 14872 ];

	UBioRemoteLogger_execSendInvalidPlaythrough_Parms SendInvalidPlaythrough_Parms;
	memcpy ( &SendInvalidPlaythrough_Parms.sCheat, &sCheat, 0x10 );

	pFnSendInvalidPlaythrough->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendInvalidPlaythrough, &SendInvalidPlaythrough_Parms, NULL );

	pFnSendInvalidPlaythrough->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.SendLevelLoaded
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 LevelName                      ( CPF_Parm | CPF_NeedCtorLink )
// float                          fTime                          ( CPF_Parm )

void UBioRemoteLogger::SendLevelLoaded ( struct FString LevelName, float fTime )
{
	static UFunction* pFnSendLevelLoaded = NULL;

	if ( ! pFnSendLevelLoaded )
		pFnSendLevelLoaded = (UFunction*) UObject::GObjObjects()->Data[ 14869 ];

	UBioRemoteLogger_execSendLevelLoaded_Parms SendLevelLoaded_Parms;
	memcpy ( &SendLevelLoaded_Parms.LevelName, &LevelName, 0x10 );
	SendLevelLoaded_Parms.fTime = fTime;

	pFnSendLevelLoaded->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendLevelLoaded, &SendLevelLoaded_Parms, NULL );

	pFnSendLevelLoaded->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.SendStrRefNotFound
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            nStrRef                        ( CPF_Parm )

void UBioRemoteLogger::SendStrRefNotFound ( int nStrRef )
{
	static UFunction* pFnSendStrRefNotFound = NULL;

	if ( ! pFnSendStrRefNotFound )
		pFnSendStrRefNotFound = (UFunction*) UObject::GObjObjects()->Data[ 14867 ];

	UBioRemoteLogger_execSendStrRefNotFound_Parms SendStrRefNotFound_Parms;
	SendStrRefNotFound_Parms.nStrRef = nStrRef;

	pFnSendStrRefNotFound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendStrRefNotFound, &SendStrRefNotFound_Parms, NULL );

	pFnSendStrRefNotFound->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.SendTextureMemorySacrificed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            nOldTextureMemoryLimit         ( CPF_Parm )

void UBioRemoteLogger::SendTextureMemorySacrificed ( int nOldTextureMemoryLimit )
{
	static UFunction* pFnSendTextureMemorySacrificed = NULL;

	if ( ! pFnSendTextureMemorySacrificed )
		pFnSendTextureMemorySacrificed = (UFunction*) UObject::GObjObjects()->Data[ 14865 ];

	UBioRemoteLogger_execSendTextureMemorySacrificed_Parms SendTextureMemorySacrificed_Parms;
	SendTextureMemorySacrificed_Parms.nOldTextureMemoryLimit = nOldTextureMemoryLimit;

	pFnSendTextureMemorySacrificed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendTextureMemorySacrificed, &SendTextureMemorySacrificed_Parms, NULL );

	pFnSendTextureMemorySacrificed->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.SendPurpleLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 sObjRefName                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sObjLeakedName                 ( CPF_Parm | CPF_NeedCtorLink )

void UBioRemoteLogger::SendPurpleLevel ( struct FString sObjRefName, struct FString sObjLeakedName )
{
	static UFunction* pFnSendPurpleLevel = NULL;

	if ( ! pFnSendPurpleLevel )
		pFnSendPurpleLevel = (UFunction*) UObject::GObjObjects()->Data[ 14862 ];

	UBioRemoteLogger_execSendPurpleLevel_Parms SendPurpleLevel_Parms;
	memcpy ( &SendPurpleLevel_Parms.sObjRefName, &sObjRefName, 0x10 );
	memcpy ( &SendPurpleLevel_Parms.sObjLeakedName, &sObjLeakedName, 0x10 );

	pFnSendPurpleLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendPurpleLevel, &SendPurpleLevel_Parms, NULL );

	pFnSendPurpleLevel->FunctionFlags |= 0x400;
};

// Function Engine.BioRemoteLogger.GetLogger
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioRemoteLogger*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioRemoteLogger* UBioRemoteLogger::GetLogger ( )
{
	static UFunction* pFnGetLogger = NULL;

	if ( ! pFnGetLogger )
		pFnGetLogger = (UFunction*) UObject::GObjObjects()->Data[ 14860 ];

	UBioRemoteLogger_execGetLogger_Parms GetLogger_Parms;

	pFnGetLogger->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLogger, &GetLogger_Parms, NULL );

	pFnGetLogger->FunctionFlags |= 0x400;

	return GetLogger_Parms.ReturnValue;
};

// Function Engine.BioDynamicLightEnvironmentComponent.OnUpdatePropertyRimLightControl
// [0x00020002] 
// Parameters infos:

void UBioDynamicLightEnvironmentComponent::OnUpdatePropertyRimLightControl ( )
{
	static UFunction* pFnOnUpdatePropertyRimLightControl = NULL;

	if ( ! pFnOnUpdatePropertyRimLightControl )
		pFnOnUpdatePropertyRimLightControl = (UFunction*) UObject::GObjObjects()->Data[ 14561 ];

	UBioDynamicLightEnvironmentComponent_execOnUpdatePropertyRimLightControl_Parms OnUpdatePropertyRimLightControl_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyRimLightControl, &OnUpdatePropertyRimLightControl_Parms, NULL );
};

// Function Engine.BioDynamicLightEnvironmentComponent.OnUpdatePropertyRimLightColor
// [0x00020002] 
// Parameters infos:

void UBioDynamicLightEnvironmentComponent::OnUpdatePropertyRimLightColor ( )
{
	static UFunction* pFnOnUpdatePropertyRimLightColor = NULL;

	if ( ! pFnOnUpdatePropertyRimLightColor )
		pFnOnUpdatePropertyRimLightColor = (UFunction*) UObject::GObjObjects()->Data[ 14560 ];

	UBioDynamicLightEnvironmentComponent_execOnUpdatePropertyRimLightColor_Parms OnUpdatePropertyRimLightColor_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyRimLightColor, &OnUpdatePropertyRimLightColor_Parms, NULL );
};

// Function Engine.BioDynamicLightEnvironmentComponent.OnUpdatePropertyRimLightScale
// [0x00020002] 
// Parameters infos:

void UBioDynamicLightEnvironmentComponent::OnUpdatePropertyRimLightScale ( )
{
	static UFunction* pFnOnUpdatePropertyRimLightScale = NULL;

	if ( ! pFnOnUpdatePropertyRimLightScale )
		pFnOnUpdatePropertyRimLightScale = (UFunction*) UObject::GObjObjects()->Data[ 14559 ];

	UBioDynamicLightEnvironmentComponent_execOnUpdatePropertyRimLightScale_Parms OnUpdatePropertyRimLightScale_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyRimLightScale, &OnUpdatePropertyRimLightScale_Parms, NULL );
};

// Function Engine.BioDynamicLightEnvironmentComponent.OnUpdatePropertyRimLightPitch
// [0x00020002] 
// Parameters infos:

void UBioDynamicLightEnvironmentComponent::OnUpdatePropertyRimLightPitch ( )
{
	static UFunction* pFnOnUpdatePropertyRimLightPitch = NULL;

	if ( ! pFnOnUpdatePropertyRimLightPitch )
		pFnOnUpdatePropertyRimLightPitch = (UFunction*) UObject::GObjObjects()->Data[ 14558 ];

	UBioDynamicLightEnvironmentComponent_execOnUpdatePropertyRimLightPitch_Parms OnUpdatePropertyRimLightPitch_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyRimLightPitch, &OnUpdatePropertyRimLightPitch_Parms, NULL );
};

// Function Engine.BioDynamicLightEnvironmentComponent.OnUpdatePropertyRimLightYaw
// [0x00020002] 
// Parameters infos:

void UBioDynamicLightEnvironmentComponent::OnUpdatePropertyRimLightYaw ( )
{
	static UFunction* pFnOnUpdatePropertyRimLightYaw = NULL;

	if ( ! pFnOnUpdatePropertyRimLightYaw )
		pFnOnUpdatePropertyRimLightYaw = (UFunction*) UObject::GObjObjects()->Data[ 14557 ];

	UBioDynamicLightEnvironmentComponent_execOnUpdatePropertyRimLightYaw_Parms OnUpdatePropertyRimLightYaw_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyRimLightYaw, &OnUpdatePropertyRimLightYaw_Parms, NULL );
};

// Function Engine.BioDynamicLightEnvironmentComponent.OnUpdatePropertyAmbientLightScale
// [0x00020002] 
// Parameters infos:

void UBioDynamicLightEnvironmentComponent::OnUpdatePropertyAmbientLightScale ( )
{
	static UFunction* pFnOnUpdatePropertyAmbientLightScale = NULL;

	if ( ! pFnOnUpdatePropertyAmbientLightScale )
		pFnOnUpdatePropertyAmbientLightScale = (UFunction*) UObject::GObjObjects()->Data[ 14556 ];

	UBioDynamicLightEnvironmentComponent_execOnUpdatePropertyAmbientLightScale_Parms OnUpdatePropertyAmbientLightScale_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyAmbientLightScale, &OnUpdatePropertyAmbientLightScale_Parms, NULL );
};

// Function Engine.BioDynamicLightEnvironmentComponent.OnUpdatePropertyFillLightScale
// [0x00020002] 
// Parameters infos:

void UBioDynamicLightEnvironmentComponent::OnUpdatePropertyFillLightScale ( )
{
	static UFunction* pFnOnUpdatePropertyFillLightScale = NULL;

	if ( ! pFnOnUpdatePropertyFillLightScale )
		pFnOnUpdatePropertyFillLightScale = (UFunction*) UObject::GObjObjects()->Data[ 14555 ];

	UBioDynamicLightEnvironmentComponent_execOnUpdatePropertyFillLightScale_Parms OnUpdatePropertyFillLightScale_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyFillLightScale, &OnUpdatePropertyFillLightScale_Parms, NULL );
};

// Function Engine.BioDynamicLightEnvironmentComponent.OnUpdatePropertyKeyLightScale
// [0x00020002] 
// Parameters infos:

void UBioDynamicLightEnvironmentComponent::OnUpdatePropertyKeyLightScale ( )
{
	static UFunction* pFnOnUpdatePropertyKeyLightScale = NULL;

	if ( ! pFnOnUpdatePropertyKeyLightScale )
		pFnOnUpdatePropertyKeyLightScale = (UFunction*) UObject::GObjObjects()->Data[ 14554 ];

	UBioDynamicLightEnvironmentComponent_execOnUpdatePropertyKeyLightScale_Parms OnUpdatePropertyKeyLightScale_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyKeyLightScale, &OnUpdatePropertyKeyLightScale_Parms, NULL );
};

// Function Engine.BioDynamicLightEnvironmentComponent.OnUpdatePropertyBouncedKeyLightingDesaturation
// [0x00020002] 
// Parameters infos:

void UBioDynamicLightEnvironmentComponent::OnUpdatePropertyBouncedKeyLightingDesaturation ( )
{
	static UFunction* pFnOnUpdatePropertyBouncedKeyLightingDesaturation = NULL;

	if ( ! pFnOnUpdatePropertyBouncedKeyLightingDesaturation )
		pFnOnUpdatePropertyBouncedKeyLightingDesaturation = (UFunction*) UObject::GObjObjects()->Data[ 14553 ];

	UBioDynamicLightEnvironmentComponent_execOnUpdatePropertyBouncedKeyLightingDesaturation_Parms OnUpdatePropertyBouncedKeyLightingDesaturation_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyBouncedKeyLightingDesaturation, &OnUpdatePropertyBouncedKeyLightingDesaturation_Parms, NULL );
};

// Function Engine.BioDynamicLightEnvironmentComponent.OnUpdatePropertyBouncedKeyLightingIntensity
// [0x00020002] 
// Parameters infos:

void UBioDynamicLightEnvironmentComponent::OnUpdatePropertyBouncedKeyLightingIntensity ( )
{
	static UFunction* pFnOnUpdatePropertyBouncedKeyLightingIntensity = NULL;

	if ( ! pFnOnUpdatePropertyBouncedKeyLightingIntensity )
		pFnOnUpdatePropertyBouncedKeyLightingIntensity = (UFunction*) UObject::GObjObjects()->Data[ 14551 ];

	UBioDynamicLightEnvironmentComponent_execOnUpdatePropertyBouncedKeyLightingIntensity_Parms OnUpdatePropertyBouncedKeyLightingIntensity_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyBouncedKeyLightingIntensity, &OnUpdatePropertyBouncedKeyLightingIntensity_Parms, NULL );
};

// Function Engine.BioDynamicLightEnvironmentComponent.SetQuality
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  Quality                        ( CPF_Parm )

void UBioDynamicLightEnvironmentComponent::SetQuality ( unsigned char Quality )
{
	static UFunction* pFnSetQuality = NULL;

	if ( ! pFnSetQuality )
		pFnSetQuality = (UFunction*) UObject::GObjObjects()->Data[ 14549 ];

	UBioDynamicLightEnvironmentComponent_execSetQuality_Parms SetQuality_Parms;
	SetQuality_Parms.Quality = Quality;

	pFnSetQuality->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetQuality, &SetQuality_Parms, NULL );

	pFnSetQuality->FunctionFlags |= 0x400;
};

// Function Engine.Bio2DA.GetRowNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRowIndex                      ( CPF_Parm )

int UBio2DA::GetRowNumber ( int nRowIndex )
{
	static UFunction* pFnGetRowNumber = NULL;

	if ( ! pFnGetRowNumber )
		pFnGetRowNumber = (UFunction*) UObject::GObjObjects()->Data[ 13801 ];

	UBio2DA_execGetRowNumber_Parms GetRowNumber_Parms;
	GetRowNumber_Parms.nRowIndex = nRowIndex;

	pFnGetRowNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRowNumber, &GetRowNumber_Parms, NULL );

	pFnGetRowNumber->FunctionFlags |= 0x400;

	return GetRowNumber_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetRowNames
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct TArray<struct FName>    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct TArray<struct FName> UBio2DA::GetRowNames ( )
{
	static UFunction* pFnGetRowNames = NULL;

	if ( ! pFnGetRowNames )
		pFnGetRowNames = (UFunction*) UObject::GObjObjects()->Data[ 13803 ];

	UBio2DA_execGetRowNames_Parms GetRowNames_Parms;

	pFnGetRowNames->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRowNames, &GetRowNames_Parms, NULL );

	pFnGetRowNames->FunctionFlags |= 0x400;

	return GetRowNames_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetRowName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRowIndex                      ( CPF_Parm )

struct FName UBio2DA::GetRowName ( int nRowIndex )
{
	static UFunction* pFnGetRowName = NULL;

	if ( ! pFnGetRowName )
		pFnGetRowName = (UFunction*) UObject::GObjObjects()->Data[ 13806 ];

	UBio2DA_execGetRowName_Parms GetRowName_Parms;
	GetRowName_Parms.nRowIndex = nRowIndex;

	pFnGetRowName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRowName, &GetRowName_Parms, NULL );

	pFnGetRowName->FunctionFlags |= 0x400;

	return GetRowName_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetNumberedRowIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRowID                         ( CPF_Parm )

int UBio2DA::GetNumberedRowIndex ( int nRowID )
{
	static UFunction* pFnGetNumberedRowIndex = NULL;

	if ( ! pFnGetNumberedRowIndex )
		pFnGetNumberedRowIndex = (UFunction*) UObject::GObjObjects()->Data[ 13809 ];

	UBio2DA_execGetNumberedRowIndex_Parms GetNumberedRowIndex_Parms;
	GetNumberedRowIndex_Parms.nRowID = nRowID;

	pFnGetNumberedRowIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumberedRowIndex, &GetNumberedRowIndex_Parms, NULL );

	pFnGetNumberedRowIndex->FunctionFlags |= 0x400;

	return GetNumberedRowIndex_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetRowIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmRowLabel                     ( CPF_Parm )

int UBio2DA::GetRowIndex ( struct FName nmRowLabel )
{
	static UFunction* pFnGetRowIndex = NULL;

	if ( ! pFnGetRowIndex )
		pFnGetRowIndex = (UFunction*) UObject::GObjObjects()->Data[ 13812 ];

	UBio2DA_execGetRowIndex_Parms GetRowIndex_Parms;
	memcpy ( &GetRowIndex_Parms.nmRowLabel, &nmRowLabel, 0x8 );

	pFnGetRowIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRowIndex, &GetRowIndex_Parms, NULL );

	pFnGetRowIndex->FunctionFlags |= 0x400;

	return GetRowIndex_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetColumnNames
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct TArray<struct FName>    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct TArray<struct FName> UBio2DA::GetColumnNames ( )
{
	static UFunction* pFnGetColumnNames = NULL;

	if ( ! pFnGetColumnNames )
		pFnGetColumnNames = (UFunction*) UObject::GObjObjects()->Data[ 13815 ];

	UBio2DA_execGetColumnNames_Parms GetColumnNames_Parms;

	pFnGetColumnNames->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetColumnNames, &GetColumnNames_Parms, NULL );

	pFnGetColumnNames->FunctionFlags |= 0x400;

	return GetColumnNames_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetColumnName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nColumn                        ( CPF_Parm )

struct FName UBio2DA::GetColumnName ( int nColumn )
{
	static UFunction* pFnGetColumnName = NULL;

	if ( ! pFnGetColumnName )
		pFnGetColumnName = (UFunction*) UObject::GObjObjects()->Data[ 13818 ];

	UBio2DA_execGetColumnName_Parms GetColumnName_Parms;
	GetColumnName_Parms.nColumn = nColumn;

	pFnGetColumnName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetColumnName, &GetColumnName_Parms, NULL );

	pFnGetColumnName->FunctionFlags |= 0x400;

	return GetColumnName_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetColumnIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmColumnLabel                  ( CPF_Parm )

int UBio2DA::GetColumnIndex ( struct FName nmColumnLabel )
{
	static UFunction* pFnGetColumnIndex = NULL;

	if ( ! pFnGetColumnIndex )
		pFnGetColumnIndex = (UFunction*) UObject::GObjObjects()->Data[ 13821 ];

	UBio2DA_execGetColumnIndex_Parms GetColumnIndex_Parms;
	memcpy ( &GetColumnIndex_Parms.nmColumnLabel, &nmColumnLabel, 0x8 );

	pFnGetColumnIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetColumnIndex, &GetColumnIndex_Parms, NULL );

	pFnGetColumnIndex->FunctionFlags |= 0x400;

	return GetColumnIndex_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetFloatEntryNumN
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRowID                         ( CPF_Parm )
// struct FName                   sColumn                        ( CPF_Parm )
// float                          fEntry                         ( CPF_Parm | CPF_OutParm )

bool UBio2DA::GetFloatEntryNumN ( int nRowID, struct FName sColumn, float* fEntry )
{
	static UFunction* pFnGetFloatEntryNumN = NULL;

	if ( ! pFnGetFloatEntryNumN )
		pFnGetFloatEntryNumN = (UFunction*) UObject::GObjObjects()->Data[ 13824 ];

	UBio2DA_execGetFloatEntryNumN_Parms GetFloatEntryNumN_Parms;
	GetFloatEntryNumN_Parms.nRowID = nRowID;
	memcpy ( &GetFloatEntryNumN_Parms.sColumn, &sColumn, 0x8 );

	pFnGetFloatEntryNumN->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFloatEntryNumN, &GetFloatEntryNumN_Parms, NULL );

	pFnGetFloatEntryNumN->FunctionFlags |= 0x400;

	if ( fEntry )
		*fEntry = GetFloatEntryNumN_Parms.fEntry;

	return GetFloatEntryNumN_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetFloatEntryNumI
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRowID                         ( CPF_Parm )
// int                            nColumn                        ( CPF_Parm )
// float                          fEntry                         ( CPF_Parm | CPF_OutParm )

bool UBio2DA::GetFloatEntryNumI ( int nRowID, int nColumn, float* fEntry )
{
	static UFunction* pFnGetFloatEntryNumI = NULL;

	if ( ! pFnGetFloatEntryNumI )
		pFnGetFloatEntryNumI = (UFunction*) UObject::GObjObjects()->Data[ 13827 ];

	UBio2DA_execGetFloatEntryNumI_Parms GetFloatEntryNumI_Parms;
	GetFloatEntryNumI_Parms.nRowID = nRowID;
	GetFloatEntryNumI_Parms.nColumn = nColumn;

	pFnGetFloatEntryNumI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFloatEntryNumI, &GetFloatEntryNumI_Parms, NULL );

	pFnGetFloatEntryNumI->FunctionFlags |= 0x400;

	if ( fEntry )
		*fEntry = GetFloatEntryNumI_Parms.fEntry;

	return GetFloatEntryNumI_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetFloatEntryNN
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   sRow                           ( CPF_Parm )
// struct FName                   sColumn                        ( CPF_Parm )
// float                          fEntry                         ( CPF_Parm | CPF_OutParm )

bool UBio2DA::GetFloatEntryNN ( struct FName sRow, struct FName sColumn, float* fEntry )
{
	static UFunction* pFnGetFloatEntryNN = NULL;

	if ( ! pFnGetFloatEntryNN )
		pFnGetFloatEntryNN = (UFunction*) UObject::GObjObjects()->Data[ 13832 ];

	UBio2DA_execGetFloatEntryNN_Parms GetFloatEntryNN_Parms;
	memcpy ( &GetFloatEntryNN_Parms.sRow, &sRow, 0x8 );
	memcpy ( &GetFloatEntryNN_Parms.sColumn, &sColumn, 0x8 );

	pFnGetFloatEntryNN->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFloatEntryNN, &GetFloatEntryNN_Parms, NULL );

	pFnGetFloatEntryNN->FunctionFlags |= 0x400;

	if ( fEntry )
		*fEntry = GetFloatEntryNN_Parms.fEntry;

	return GetFloatEntryNN_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetFloatEntryNI
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   sRow                           ( CPF_Parm )
// int                            nColumn                        ( CPF_Parm )
// float                          fEntry                         ( CPF_Parm | CPF_OutParm )

bool UBio2DA::GetFloatEntryNI ( struct FName sRow, int nColumn, float* fEntry )
{
	static UFunction* pFnGetFloatEntryNI = NULL;

	if ( ! pFnGetFloatEntryNI )
		pFnGetFloatEntryNI = (UFunction*) UObject::GObjObjects()->Data[ 13837 ];

	UBio2DA_execGetFloatEntryNI_Parms GetFloatEntryNI_Parms;
	memcpy ( &GetFloatEntryNI_Parms.sRow, &sRow, 0x8 );
	GetFloatEntryNI_Parms.nColumn = nColumn;

	pFnGetFloatEntryNI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFloatEntryNI, &GetFloatEntryNI_Parms, NULL );

	pFnGetFloatEntryNI->FunctionFlags |= 0x400;

	if ( fEntry )
		*fEntry = GetFloatEntryNI_Parms.fEntry;

	return GetFloatEntryNI_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetFloatEntryIN
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRow                           ( CPF_Parm )
// struct FName                   sColumn                        ( CPF_Parm )
// float                          fEntry                         ( CPF_Parm | CPF_OutParm )

bool UBio2DA::GetFloatEntryIN ( int nRow, struct FName sColumn, float* fEntry )
{
	static UFunction* pFnGetFloatEntryIN = NULL;

	if ( ! pFnGetFloatEntryIN )
		pFnGetFloatEntryIN = (UFunction*) UObject::GObjObjects()->Data[ 13842 ];

	UBio2DA_execGetFloatEntryIN_Parms GetFloatEntryIN_Parms;
	GetFloatEntryIN_Parms.nRow = nRow;
	memcpy ( &GetFloatEntryIN_Parms.sColumn, &sColumn, 0x8 );

	pFnGetFloatEntryIN->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFloatEntryIN, &GetFloatEntryIN_Parms, NULL );

	pFnGetFloatEntryIN->FunctionFlags |= 0x400;

	if ( fEntry )
		*fEntry = GetFloatEntryIN_Parms.fEntry;

	return GetFloatEntryIN_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetFloatEntryII
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRow                           ( CPF_Parm )
// int                            nColumn                        ( CPF_Parm )
// float                          fEntry                         ( CPF_Parm | CPF_OutParm )

bool UBio2DA::GetFloatEntryII ( int nRow, int nColumn, float* fEntry )
{
	static UFunction* pFnGetFloatEntryII = NULL;

	if ( ! pFnGetFloatEntryII )
		pFnGetFloatEntryII = (UFunction*) UObject::GObjObjects()->Data[ 13847 ];

	UBio2DA_execGetFloatEntryII_Parms GetFloatEntryII_Parms;
	GetFloatEntryII_Parms.nRow = nRow;
	GetFloatEntryII_Parms.nColumn = nColumn;

	pFnGetFloatEntryII->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFloatEntryII, &GetFloatEntryII_Parms, NULL );

	pFnGetFloatEntryII->FunctionFlags |= 0x400;

	if ( fEntry )
		*fEntry = GetFloatEntryII_Parms.fEntry;

	return GetFloatEntryII_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetIntEntryNumN
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRowID                         ( CPF_Parm )
// struct FName                   sColumn                        ( CPF_Parm )
// int                            nEntry                         ( CPF_Parm | CPF_OutParm )

bool UBio2DA::GetIntEntryNumN ( int nRowID, struct FName sColumn, int* nEntry )
{
	static UFunction* pFnGetIntEntryNumN = NULL;

	if ( ! pFnGetIntEntryNumN )
		pFnGetIntEntryNumN = (UFunction*) UObject::GObjObjects()->Data[ 13852 ];

	UBio2DA_execGetIntEntryNumN_Parms GetIntEntryNumN_Parms;
	GetIntEntryNumN_Parms.nRowID = nRowID;
	memcpy ( &GetIntEntryNumN_Parms.sColumn, &sColumn, 0x8 );

	pFnGetIntEntryNumN->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetIntEntryNumN, &GetIntEntryNumN_Parms, NULL );

	pFnGetIntEntryNumN->FunctionFlags |= 0x400;

	if ( nEntry )
		*nEntry = GetIntEntryNumN_Parms.nEntry;

	return GetIntEntryNumN_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetIntEntryNumI
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRowID                         ( CPF_Parm )
// int                            nColumn                        ( CPF_Parm )
// int                            nEntry                         ( CPF_Parm | CPF_OutParm )

bool UBio2DA::GetIntEntryNumI ( int nRowID, int nColumn, int* nEntry )
{
	static UFunction* pFnGetIntEntryNumI = NULL;

	if ( ! pFnGetIntEntryNumI )
		pFnGetIntEntryNumI = (UFunction*) UObject::GObjObjects()->Data[ 13857 ];

	UBio2DA_execGetIntEntryNumI_Parms GetIntEntryNumI_Parms;
	GetIntEntryNumI_Parms.nRowID = nRowID;
	GetIntEntryNumI_Parms.nColumn = nColumn;

	pFnGetIntEntryNumI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetIntEntryNumI, &GetIntEntryNumI_Parms, NULL );

	pFnGetIntEntryNumI->FunctionFlags |= 0x400;

	if ( nEntry )
		*nEntry = GetIntEntryNumI_Parms.nEntry;

	return GetIntEntryNumI_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetIntEntryNN
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   sRow                           ( CPF_Parm )
// struct FName                   sColumn                        ( CPF_Parm )
// int                            nEntry                         ( CPF_Parm | CPF_OutParm )

bool UBio2DA::GetIntEntryNN ( struct FName sRow, struct FName sColumn, int* nEntry )
{
	static UFunction* pFnGetIntEntryNN = NULL;

	if ( ! pFnGetIntEntryNN )
		pFnGetIntEntryNN = (UFunction*) UObject::GObjObjects()->Data[ 13862 ];

	UBio2DA_execGetIntEntryNN_Parms GetIntEntryNN_Parms;
	memcpy ( &GetIntEntryNN_Parms.sRow, &sRow, 0x8 );
	memcpy ( &GetIntEntryNN_Parms.sColumn, &sColumn, 0x8 );

	pFnGetIntEntryNN->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetIntEntryNN, &GetIntEntryNN_Parms, NULL );

	pFnGetIntEntryNN->FunctionFlags |= 0x400;

	if ( nEntry )
		*nEntry = GetIntEntryNN_Parms.nEntry;

	return GetIntEntryNN_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetIntEntryNI
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   sRow                           ( CPF_Parm )
// int                            nColumn                        ( CPF_Parm )
// int                            nEntry                         ( CPF_Parm | CPF_OutParm )

bool UBio2DA::GetIntEntryNI ( struct FName sRow, int nColumn, int* nEntry )
{
	static UFunction* pFnGetIntEntryNI = NULL;

	if ( ! pFnGetIntEntryNI )
		pFnGetIntEntryNI = (UFunction*) UObject::GObjObjects()->Data[ 13867 ];

	UBio2DA_execGetIntEntryNI_Parms GetIntEntryNI_Parms;
	memcpy ( &GetIntEntryNI_Parms.sRow, &sRow, 0x8 );
	GetIntEntryNI_Parms.nColumn = nColumn;

	pFnGetIntEntryNI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetIntEntryNI, &GetIntEntryNI_Parms, NULL );

	pFnGetIntEntryNI->FunctionFlags |= 0x400;

	if ( nEntry )
		*nEntry = GetIntEntryNI_Parms.nEntry;

	return GetIntEntryNI_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetIntEntryIN
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRow                           ( CPF_Parm )
// struct FName                   sColumn                        ( CPF_Parm )
// int                            nEntry                         ( CPF_Parm | CPF_OutParm )

bool UBio2DA::GetIntEntryIN ( int nRow, struct FName sColumn, int* nEntry )
{
	static UFunction* pFnGetIntEntryIN = NULL;

	if ( ! pFnGetIntEntryIN )
		pFnGetIntEntryIN = (UFunction*) UObject::GObjObjects()->Data[ 13872 ];

	UBio2DA_execGetIntEntryIN_Parms GetIntEntryIN_Parms;
	GetIntEntryIN_Parms.nRow = nRow;
	memcpy ( &GetIntEntryIN_Parms.sColumn, &sColumn, 0x8 );

	pFnGetIntEntryIN->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetIntEntryIN, &GetIntEntryIN_Parms, NULL );

	pFnGetIntEntryIN->FunctionFlags |= 0x400;

	if ( nEntry )
		*nEntry = GetIntEntryIN_Parms.nEntry;

	return GetIntEntryIN_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetIntEntryII
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRow                           ( CPF_Parm )
// int                            nColumn                        ( CPF_Parm )
// int                            nEntry                         ( CPF_Parm | CPF_OutParm )

bool UBio2DA::GetIntEntryII ( int nRow, int nColumn, int* nEntry )
{
	static UFunction* pFnGetIntEntryII = NULL;

	if ( ! pFnGetIntEntryII )
		pFnGetIntEntryII = (UFunction*) UObject::GObjObjects()->Data[ 13877 ];

	UBio2DA_execGetIntEntryII_Parms GetIntEntryII_Parms;
	GetIntEntryII_Parms.nRow = nRow;
	GetIntEntryII_Parms.nColumn = nColumn;

	pFnGetIntEntryII->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetIntEntryII, &GetIntEntryII_Parms, NULL );

	pFnGetIntEntryII->FunctionFlags |= 0x400;

	if ( nEntry )
		*nEntry = GetIntEntryII_Parms.nEntry;

	return GetIntEntryII_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetNameEntryNumN
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRowID                         ( CPF_Parm )
// struct FName                   sColumn                        ( CPF_Parm )
// struct FName                   nEntry                         ( CPF_Parm | CPF_OutParm )

bool UBio2DA::GetNameEntryNumN ( int nRowID, struct FName sColumn, struct FName* nEntry )
{
	static UFunction* pFnGetNameEntryNumN = NULL;

	if ( ! pFnGetNameEntryNumN )
		pFnGetNameEntryNumN = (UFunction*) UObject::GObjObjects()->Data[ 13882 ];

	UBio2DA_execGetNameEntryNumN_Parms GetNameEntryNumN_Parms;
	GetNameEntryNumN_Parms.nRowID = nRowID;
	memcpy ( &GetNameEntryNumN_Parms.sColumn, &sColumn, 0x8 );

	pFnGetNameEntryNumN->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNameEntryNumN, &GetNameEntryNumN_Parms, NULL );

	pFnGetNameEntryNumN->FunctionFlags |= 0x400;

	if ( nEntry )
		memcpy ( nEntry, &GetNameEntryNumN_Parms.nEntry, 0x8 );

	return GetNameEntryNumN_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetNameEntryNumI
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRowID                         ( CPF_Parm )
// int                            nColumn                        ( CPF_Parm )
// struct FName                   nEntry                         ( CPF_Parm | CPF_OutParm )

bool UBio2DA::GetNameEntryNumI ( int nRowID, int nColumn, struct FName* nEntry )
{
	static UFunction* pFnGetNameEntryNumI = NULL;

	if ( ! pFnGetNameEntryNumI )
		pFnGetNameEntryNumI = (UFunction*) UObject::GObjObjects()->Data[ 13887 ];

	UBio2DA_execGetNameEntryNumI_Parms GetNameEntryNumI_Parms;
	GetNameEntryNumI_Parms.nRowID = nRowID;
	GetNameEntryNumI_Parms.nColumn = nColumn;

	pFnGetNameEntryNumI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNameEntryNumI, &GetNameEntryNumI_Parms, NULL );

	pFnGetNameEntryNumI->FunctionFlags |= 0x400;

	if ( nEntry )
		memcpy ( nEntry, &GetNameEntryNumI_Parms.nEntry, 0x8 );

	return GetNameEntryNumI_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetNameEntryNN
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   sRow                           ( CPF_Parm )
// struct FName                   sColumn                        ( CPF_Parm )
// struct FName                   nEntry                         ( CPF_Parm | CPF_OutParm )

bool UBio2DA::GetNameEntryNN ( struct FName sRow, struct FName sColumn, struct FName* nEntry )
{
	static UFunction* pFnGetNameEntryNN = NULL;

	if ( ! pFnGetNameEntryNN )
		pFnGetNameEntryNN = (UFunction*) UObject::GObjObjects()->Data[ 13892 ];

	UBio2DA_execGetNameEntryNN_Parms GetNameEntryNN_Parms;
	memcpy ( &GetNameEntryNN_Parms.sRow, &sRow, 0x8 );
	memcpy ( &GetNameEntryNN_Parms.sColumn, &sColumn, 0x8 );

	pFnGetNameEntryNN->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNameEntryNN, &GetNameEntryNN_Parms, NULL );

	pFnGetNameEntryNN->FunctionFlags |= 0x400;

	if ( nEntry )
		memcpy ( nEntry, &GetNameEntryNN_Parms.nEntry, 0x8 );

	return GetNameEntryNN_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetNameEntryNI
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   sRow                           ( CPF_Parm )
// int                            nColumn                        ( CPF_Parm )
// struct FName                   nEntry                         ( CPF_Parm | CPF_OutParm )

bool UBio2DA::GetNameEntryNI ( struct FName sRow, int nColumn, struct FName* nEntry )
{
	static UFunction* pFnGetNameEntryNI = NULL;

	if ( ! pFnGetNameEntryNI )
		pFnGetNameEntryNI = (UFunction*) UObject::GObjObjects()->Data[ 13897 ];

	UBio2DA_execGetNameEntryNI_Parms GetNameEntryNI_Parms;
	memcpy ( &GetNameEntryNI_Parms.sRow, &sRow, 0x8 );
	GetNameEntryNI_Parms.nColumn = nColumn;

	pFnGetNameEntryNI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNameEntryNI, &GetNameEntryNI_Parms, NULL );

	pFnGetNameEntryNI->FunctionFlags |= 0x400;

	if ( nEntry )
		memcpy ( nEntry, &GetNameEntryNI_Parms.nEntry, 0x8 );

	return GetNameEntryNI_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetNameEntryIN
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRow                           ( CPF_Parm )
// struct FName                   sColumn                        ( CPF_Parm )
// struct FName                   nEntry                         ( CPF_Parm | CPF_OutParm )

bool UBio2DA::GetNameEntryIN ( int nRow, struct FName sColumn, struct FName* nEntry )
{
	static UFunction* pFnGetNameEntryIN = NULL;

	if ( ! pFnGetNameEntryIN )
		pFnGetNameEntryIN = (UFunction*) UObject::GObjObjects()->Data[ 13902 ];

	UBio2DA_execGetNameEntryIN_Parms GetNameEntryIN_Parms;
	GetNameEntryIN_Parms.nRow = nRow;
	memcpy ( &GetNameEntryIN_Parms.sColumn, &sColumn, 0x8 );

	pFnGetNameEntryIN->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNameEntryIN, &GetNameEntryIN_Parms, NULL );

	pFnGetNameEntryIN->FunctionFlags |= 0x400;

	if ( nEntry )
		memcpy ( nEntry, &GetNameEntryIN_Parms.nEntry, 0x8 );

	return GetNameEntryIN_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetNameEntryII
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRow                           ( CPF_Parm )
// int                            nColumn                        ( CPF_Parm )
// struct FName                   nEntry                         ( CPF_Parm | CPF_OutParm )

bool UBio2DA::GetNameEntryII ( int nRow, int nColumn, struct FName* nEntry )
{
	static UFunction* pFnGetNameEntryII = NULL;

	if ( ! pFnGetNameEntryII )
		pFnGetNameEntryII = (UFunction*) UObject::GObjObjects()->Data[ 13907 ];

	UBio2DA_execGetNameEntryII_Parms GetNameEntryII_Parms;
	GetNameEntryII_Parms.nRow = nRow;
	GetNameEntryII_Parms.nColumn = nColumn;

	pFnGetNameEntryII->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNameEntryII, &GetNameEntryII_Parms, NULL );

	pFnGetNameEntryII->FunctionFlags |= 0x400;

	if ( nEntry )
		memcpy ( nEntry, &GetNameEntryII_Parms.nEntry, 0x8 );

	return GetNameEntryII_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetStringEntryNumN
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRowID                         ( CPF_Parm )
// struct FName                   sColumn                        ( CPF_Parm )
// struct FString                 sEntry                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBio2DA::GetStringEntryNumN ( int nRowID, struct FName sColumn, struct FString* sEntry )
{
	static UFunction* pFnGetStringEntryNumN = NULL;

	if ( ! pFnGetStringEntryNumN )
		pFnGetStringEntryNumN = (UFunction*) UObject::GObjObjects()->Data[ 13912 ];

	UBio2DA_execGetStringEntryNumN_Parms GetStringEntryNumN_Parms;
	GetStringEntryNumN_Parms.nRowID = nRowID;
	memcpy ( &GetStringEntryNumN_Parms.sColumn, &sColumn, 0x8 );

	pFnGetStringEntryNumN->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringEntryNumN, &GetStringEntryNumN_Parms, NULL );

	pFnGetStringEntryNumN->FunctionFlags |= 0x400;

	if ( sEntry )
		memcpy ( sEntry, &GetStringEntryNumN_Parms.sEntry, 0x10 );

	return GetStringEntryNumN_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetStringEntryNumI
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRowID                         ( CPF_Parm )
// int                            nColumn                        ( CPF_Parm )
// struct FString                 sEntry                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBio2DA::GetStringEntryNumI ( int nRowID, int nColumn, struct FString* sEntry )
{
	static UFunction* pFnGetStringEntryNumI = NULL;

	if ( ! pFnGetStringEntryNumI )
		pFnGetStringEntryNumI = (UFunction*) UObject::GObjObjects()->Data[ 13917 ];

	UBio2DA_execGetStringEntryNumI_Parms GetStringEntryNumI_Parms;
	GetStringEntryNumI_Parms.nRowID = nRowID;
	GetStringEntryNumI_Parms.nColumn = nColumn;

	pFnGetStringEntryNumI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringEntryNumI, &GetStringEntryNumI_Parms, NULL );

	pFnGetStringEntryNumI->FunctionFlags |= 0x400;

	if ( sEntry )
		memcpy ( sEntry, &GetStringEntryNumI_Parms.sEntry, 0x10 );

	return GetStringEntryNumI_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetStringEntryNN
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   sRow                           ( CPF_Parm )
// struct FName                   sColumn                        ( CPF_Parm )
// struct FString                 sEntry                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBio2DA::GetStringEntryNN ( struct FName sRow, struct FName sColumn, struct FString* sEntry )
{
	static UFunction* pFnGetStringEntryNN = NULL;

	if ( ! pFnGetStringEntryNN )
		pFnGetStringEntryNN = (UFunction*) UObject::GObjObjects()->Data[ 13922 ];

	UBio2DA_execGetStringEntryNN_Parms GetStringEntryNN_Parms;
	memcpy ( &GetStringEntryNN_Parms.sRow, &sRow, 0x8 );
	memcpy ( &GetStringEntryNN_Parms.sColumn, &sColumn, 0x8 );

	pFnGetStringEntryNN->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringEntryNN, &GetStringEntryNN_Parms, NULL );

	pFnGetStringEntryNN->FunctionFlags |= 0x400;

	if ( sEntry )
		memcpy ( sEntry, &GetStringEntryNN_Parms.sEntry, 0x10 );

	return GetStringEntryNN_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetStringEntryNI
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   sRow                           ( CPF_Parm )
// int                            nColumn                        ( CPF_Parm )
// struct FString                 sEntry                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBio2DA::GetStringEntryNI ( struct FName sRow, int nColumn, struct FString* sEntry )
{
	static UFunction* pFnGetStringEntryNI = NULL;

	if ( ! pFnGetStringEntryNI )
		pFnGetStringEntryNI = (UFunction*) UObject::GObjObjects()->Data[ 13927 ];

	UBio2DA_execGetStringEntryNI_Parms GetStringEntryNI_Parms;
	memcpy ( &GetStringEntryNI_Parms.sRow, &sRow, 0x8 );
	GetStringEntryNI_Parms.nColumn = nColumn;

	pFnGetStringEntryNI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringEntryNI, &GetStringEntryNI_Parms, NULL );

	pFnGetStringEntryNI->FunctionFlags |= 0x400;

	if ( sEntry )
		memcpy ( sEntry, &GetStringEntryNI_Parms.sEntry, 0x10 );

	return GetStringEntryNI_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetStringEntryIN
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRow                           ( CPF_Parm )
// struct FName                   sColumn                        ( CPF_Parm )
// struct FString                 sEntry                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBio2DA::GetStringEntryIN ( int nRow, struct FName sColumn, struct FString* sEntry )
{
	static UFunction* pFnGetStringEntryIN = NULL;

	if ( ! pFnGetStringEntryIN )
		pFnGetStringEntryIN = (UFunction*) UObject::GObjObjects()->Data[ 13932 ];

	UBio2DA_execGetStringEntryIN_Parms GetStringEntryIN_Parms;
	GetStringEntryIN_Parms.nRow = nRow;
	memcpy ( &GetStringEntryIN_Parms.sColumn, &sColumn, 0x8 );

	pFnGetStringEntryIN->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringEntryIN, &GetStringEntryIN_Parms, NULL );

	pFnGetStringEntryIN->FunctionFlags |= 0x400;

	if ( sEntry )
		memcpy ( sEntry, &GetStringEntryIN_Parms.sEntry, 0x10 );

	return GetStringEntryIN_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetStringEntryII
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRow                           ( CPF_Parm )
// int                            nColumn                        ( CPF_Parm )
// struct FString                 sEntry                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBio2DA::GetStringEntryII ( int nRow, int nColumn, struct FString* sEntry )
{
	static UFunction* pFnGetStringEntryII = NULL;

	if ( ! pFnGetStringEntryII )
		pFnGetStringEntryII = (UFunction*) UObject::GObjObjects()->Data[ 13937 ];

	UBio2DA_execGetStringEntryII_Parms GetStringEntryII_Parms;
	GetStringEntryII_Parms.nRow = nRow;
	GetStringEntryII_Parms.nColumn = nColumn;

	pFnGetStringEntryII->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringEntryII, &GetStringEntryII_Parms, NULL );

	pFnGetStringEntryII->FunctionFlags |= 0x400;

	if ( sEntry )
		memcpy ( sEntry, &GetStringEntryII_Parms.sEntry, 0x10 );

	return GetStringEntryII_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetNumRows
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBio2DA::GetNumRows ( )
{
	static UFunction* pFnGetNumRows = NULL;

	if ( ! pFnGetNumRows )
		pFnGetNumRows = (UFunction*) UObject::GObjObjects()->Data[ 13942 ];

	UBio2DA_execGetNumRows_Parms GetNumRows_Parms;

	pFnGetNumRows->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumRows, &GetNumRows_Parms, NULL );

	pFnGetNumRows->FunctionFlags |= 0x400;

	return GetNumRows_Parms.ReturnValue;
};

// Function Engine.Bio2DA.GetNumColumns
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBio2DA::GetNumColumns ( )
{
	static UFunction* pFnGetNumColumns = NULL;

	if ( ! pFnGetNumColumns )
		pFnGetNumColumns = (UFunction*) UObject::GObjObjects()->Data[ 13947 ];

	UBio2DA_execGetNumColumns_Parms GetNumColumns_Parms;

	pFnGetNumColumns->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumColumns, &GetNumColumns_Parms, NULL );

	pFnGetNumColumns->FunctionFlags |= 0x400;

	return GetNumColumns_Parms.ReturnValue;
};

// Function Engine.LocalMessage.PartiallyDuplicates
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch1                        ( CPF_Parm )
// int                            Switch2                        ( CPF_Parm )
// class UObject*                 OptionalObject1                ( CPF_Parm )
// class UObject*                 OptionalObject2                ( CPF_Parm )

bool ULocalMessage::PartiallyDuplicates ( int Switch1, int Switch2, class UObject* OptionalObject1, class UObject* OptionalObject2 )
{
	static UFunction* pFnPartiallyDuplicates = NULL;

	if ( ! pFnPartiallyDuplicates )
		pFnPartiallyDuplicates = (UFunction*) UObject::GObjObjects()->Data[ 18391 ];

	ULocalMessage_execPartiallyDuplicates_Parms PartiallyDuplicates_Parms;
	PartiallyDuplicates_Parms.Switch1 = Switch1;
	PartiallyDuplicates_Parms.Switch2 = Switch2;
	PartiallyDuplicates_Parms.OptionalObject1 = OptionalObject1;
	PartiallyDuplicates_Parms.OptionalObject2 = OptionalObject2;

	this->ProcessEvent ( pFnPartiallyDuplicates, &PartiallyDuplicates_Parms, NULL );

	return PartiallyDuplicates_Parms.ReturnValue;
};

// Function Engine.LocalMessage.IsKeyObjectiveMessage
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )

bool ULocalMessage::IsKeyObjectiveMessage ( int Switch )
{
	static UFunction* pFnIsKeyObjectiveMessage = NULL;

	if ( ! pFnIsKeyObjectiveMessage )
		pFnIsKeyObjectiveMessage = (UFunction*) UObject::GObjObjects()->Data[ 19999 ];

	ULocalMessage_execIsKeyObjectiveMessage_Parms IsKeyObjectiveMessage_Parms;
	IsKeyObjectiveMessage_Parms.Switch = Switch;

	this->ProcessEvent ( pFnIsKeyObjectiveMessage, &IsKeyObjectiveMessage_Parms, NULL );

	return IsKeyObjectiveMessage_Parms.ReturnValue;
};

// Function Engine.LocalMessage.IsConsoleMessage
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )

bool ULocalMessage::IsConsoleMessage ( int Switch )
{
	static UFunction* pFnIsConsoleMessage = NULL;

	if ( ! pFnIsConsoleMessage )
		pFnIsConsoleMessage = (UFunction*) UObject::GObjObjects()->Data[ 19995 ];

	ULocalMessage_execIsConsoleMessage_Parms IsConsoleMessage_Parms;
	IsConsoleMessage_Parms.Switch = Switch;

	this->ProcessEvent ( pFnIsConsoleMessage, &IsConsoleMessage_Parms, NULL );

	return IsConsoleMessage_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetLifeTime
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )

float ULocalMessage::GetLifeTime ( int Switch )
{
	static UFunction* pFnGetLifeTime = NULL;

	if ( ! pFnGetLifeTime )
		pFnGetLifeTime = (UFunction*) UObject::GObjObjects()->Data[ 19992 ];

	ULocalMessage_execGetLifeTime_Parms GetLifeTime_Parms;
	GetLifeTime_Parms.Switch = Switch;

	this->ProcessEvent ( pFnGetLifeTime, &GetLifeTime_Parms, NULL );

	return GetLifeTime_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetFontSize
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI1                    ( CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI2                    ( CPF_Parm )
// class APlayerReplicationInfo*  LocalPlayer                    ( CPF_Parm )

int ULocalMessage::GetFontSize ( int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer )
{
	static UFunction* pFnGetFontSize = NULL;

	if ( ! pFnGetFontSize )
		pFnGetFontSize = (UFunction*) UObject::GObjObjects()->Data[ 19985 ];

	ULocalMessage_execGetFontSize_Parms GetFontSize_Parms;
	GetFontSize_Parms.Switch = Switch;
	GetFontSize_Parms.RelatedPRI1 = RelatedPRI1;
	GetFontSize_Parms.RelatedPRI2 = RelatedPRI2;
	GetFontSize_Parms.LocalPlayer = LocalPlayer;

	this->ProcessEvent ( pFnGetFontSize, &GetFontSize_Parms, NULL );

	return GetFontSize_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetPos
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )
// class AHUD*                    myHUD                          ( CPF_Parm )

float ULocalMessage::GetPos ( int Switch, class AHUD* myHUD )
{
	static UFunction* pFnGetPos = NULL;

	if ( ! pFnGetPos )
		pFnGetPos = (UFunction*) UObject::GObjObjects()->Data[ 19980 ];

	ULocalMessage_execGetPos_Parms GetPos_Parms;
	GetPos_Parms.Switch = Switch;
	GetPos_Parms.myHUD = myHUD;

	this->ProcessEvent ( pFnGetPos, &GetPos_Parms, NULL );

	return GetPos_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetColor
// [0x00026002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FColor ULocalMessage::GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetColor = NULL;

	if ( ! pFnGetColor )
		pFnGetColor = (UFunction*) UObject::GObjObjects()->Data[ 19974 ];

	ULocalMessage_execGetColor_Parms GetColor_Parms;
	GetColor_Parms.Switch = Switch;
	GetColor_Parms.RelatedPRI = RelatedPRI;
	GetColor_Parms.RelatedPRI01 = RelatedPRI01;
	GetColor_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetColor, &GetColor_Parms, NULL );

	return GetColor_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetConsoleColor
// [0x00022002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_Parm )

struct FColor ULocalMessage::GetConsoleColor ( class APlayerReplicationInfo* RelatedPRI )
{
	static UFunction* pFnGetConsoleColor = NULL;

	if ( ! pFnGetConsoleColor )
		pFnGetConsoleColor = (UFunction*) UObject::GObjObjects()->Data[ 18371 ];

	ULocalMessage_execGetConsoleColor_Parms GetConsoleColor_Parms;
	GetConsoleColor_Parms.RelatedPRI = RelatedPRI;

	this->ProcessEvent ( pFnGetConsoleColor, &GetConsoleColor_Parms, NULL );

	return GetConsoleColor_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString ULocalMessage::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 19965 ];

	ULocalMessage_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Engine.LocalMessage.ClientReceive
// [0x00026002] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void ULocalMessage::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnClientReceive = NULL;

	if ( ! pFnClientReceive )
		pFnClientReceive = (UFunction*) UObject::GObjObjects()->Data[ 19958 ];

	ULocalMessage_execClientReceive_Parms ClientReceive_Parms;
	ClientReceive_Parms.P = P;
	ClientReceive_Parms.Switch = Switch;
	ClientReceive_Parms.RelatedPRI = RelatedPRI;
	ClientReceive_Parms.RelatedPRI01 = RelatedPRI01;
	ClientReceive_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnClientReceive, &ClientReceive_Parms, NULL );
};

// Function Engine.SFXModule_DamageBase.SFXTakeRadiusDamage
// [0x00020000] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )

void USFXModule_DamageBase::SFXTakeRadiusDamage ( float Damage, float DamageRadius, unsigned long bFullDamage, struct FVector HurtOrigin, float Momentum, class UClass* DamageType, class AController* InstigatedBy, class AActor* DamageCauser )
{
	static UFunction* pFnSFXTakeRadiusDamage = NULL;

	if ( ! pFnSFXTakeRadiusDamage )
		pFnSFXTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 30367 ];

	USFXModule_DamageBase_execSFXTakeRadiusDamage_Parms SFXTakeRadiusDamage_Parms;
	SFXTakeRadiusDamage_Parms.Damage = Damage;
	SFXTakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	SFXTakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	memcpy ( &SFXTakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	SFXTakeRadiusDamage_Parms.Momentum = Momentum;
	SFXTakeRadiusDamage_Parms.DamageType = DamageType;
	SFXTakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	SFXTakeRadiusDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnSFXTakeRadiusDamage, &SFXTakeRadiusDamage_Parms, NULL );
};

// Function Engine.SFXModule_DamageBase.SFXTakeDamage
// [0x00424000] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void USFXModule_DamageBase::SFXTakeDamage ( float Damage, class UClass* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* Momentum )
{
	static UFunction* pFnSFXTakeDamage = NULL;

	if ( ! pFnSFXTakeDamage )
		pFnSFXTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 30359 ];

	USFXModule_DamageBase_execSFXTakeDamage_Parms SFXTakeDamage_Parms;
	SFXTakeDamage_Parms.Damage = Damage;
	SFXTakeDamage_Parms.DamageType = DamageType;
	SFXTakeDamage_Parms.InstigatedBy = InstigatedBy;
	SFXTakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnSFXTakeDamage, &SFXTakeDamage_Parms, NULL );

	if ( HitInfo )
		memcpy ( HitInfo, &SFXTakeDamage_Parms.HitInfo, 0x28 );

	if ( HitLocation )
		memcpy ( HitLocation, &SFXTakeDamage_Parms.HitLocation, 0xC );

	if ( Momentum )
		memcpy ( Momentum, &SFXTakeDamage_Parms.Momentum, 0xC );
};

// Function Engine.SeqAct_SetVelocity.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetVelocity::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29941 ];

	USeqAct_SetVelocity_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ToggleHidden.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_ToggleHidden::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 29997 ];

	USeqAct_ToggleHidden_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_AttachToActor.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_AttachToActor::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29497 ];

	USeqAct_AttachToActor_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_MakeNoise.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_MakeNoise::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29732 ];

	USeqAct_MakeNoise_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.AccessControl.IsIDBanned
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            NetId                          ( CPF_Const | CPF_Parm | CPF_OutParm )

bool AAccessControl::IsIDBanned ( struct FUniqueNetId* NetId )
{
	static UFunction* pFnIsIDBanned = NULL;

	if ( ! pFnIsIDBanned )
		pFnIsIDBanned = (UFunction*) UObject::GObjObjects()->Data[ 7606 ];

	AAccessControl_execIsIDBanned_Parms IsIDBanned_Parms;

	this->ProcessEvent ( pFnIsIDBanned, &IsIDBanned_Parms, NULL );

	if ( NetId )
		memcpy ( NetId, &IsIDBanned_Parms.NetId, 0x8 );

	return IsIDBanned_Parms.ReturnValue;
};

// Function Engine.AccessControl.CheckIPPolicy
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Address                        ( CPF_Parm | CPF_NeedCtorLink )

bool AAccessControl::CheckIPPolicy ( struct FString Address )
{
	static UFunction* pFnCheckIPPolicy = NULL;

	if ( ! pFnCheckIPPolicy )
		pFnCheckIPPolicy = (UFunction*) UObject::GObjObjects()->Data[ 7595 ];

	AAccessControl_execCheckIPPolicy_Parms CheckIPPolicy_Parms;
	memcpy ( &CheckIPPolicy_Parms.Address, &Address, 0x10 );

	this->ProcessEvent ( pFnCheckIPPolicy, &CheckIPPolicy_Parms, NULL );

	return CheckIPPolicy_Parms.ReturnValue;
};

// Function Engine.AccessControl.PreLogin
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Address                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bSpectator                     ( CPF_Parm )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AAccessControl::eventPreLogin ( struct FString Options, struct FString Address, unsigned long bSpectator, struct FString* OutError )
{
	static UFunction* pFnPreLogin = NULL;

	if ( ! pFnPreLogin )
		pFnPreLogin = (UFunction*) UObject::GObjObjects()->Data[ 7586 ];

	AAccessControl_eventPreLogin_Parms PreLogin_Parms;
	memcpy ( &PreLogin_Parms.Options, &Options, 0x10 );
	memcpy ( &PreLogin_Parms.Address, &Address, 0x10 );
	PreLogin_Parms.bSpectator = bSpectator;

	this->ProcessEvent ( pFnPreLogin, &PreLogin_Parms, NULL );

	if ( OutError )
		memcpy ( OutError, &PreLogin_Parms.OutError, 0x10 );
};

// Function Engine.AccessControl.ValidLogin
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )

bool AAccessControl::ValidLogin ( struct FString UserName, struct FString Password )
{
	static UFunction* pFnValidLogin = NULL;

	if ( ! pFnValidLogin )
		pFnValidLogin = (UFunction*) UObject::GObjObjects()->Data[ 7582 ];

	AAccessControl_execValidLogin_Parms ValidLogin_Parms;
	memcpy ( &ValidLogin_Parms.UserName, &UserName, 0x10 );
	memcpy ( &ValidLogin_Parms.Password, &Password, 0x10 );

	this->ProcessEvent ( pFnValidLogin, &ValidLogin_Parms, NULL );

	return ValidLogin_Parms.ReturnValue;
};

// Function Engine.AccessControl.ParseAdminOptions
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )

bool AAccessControl::ParseAdminOptions ( struct FString Options )
{
	static UFunction* pFnParseAdminOptions = NULL;

	if ( ! pFnParseAdminOptions )
		pFnParseAdminOptions = (UFunction*) UObject::GObjObjects()->Data[ 7575 ];

	AAccessControl_execParseAdminOptions_Parms ParseAdminOptions_Parms;
	memcpy ( &ParseAdminOptions_Parms.Options, &Options, 0x10 );

	this->ProcessEvent ( pFnParseAdminOptions, &ParseAdminOptions_Parms, NULL );

	return ParseAdminOptions_Parms.ReturnValue;
};

// Function Engine.AccessControl.AdminExited
// [0x00020002] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )

void AAccessControl::AdminExited ( class APlayerController* P )
{
	static UFunction* pFnAdminExited = NULL;

	if ( ! pFnAdminExited )
		pFnAdminExited = (UFunction*) UObject::GObjObjects()->Data[ 7572 ];

	AAccessControl_execAdminExited_Parms AdminExited_Parms;
	AdminExited_Parms.P = P;

	this->ProcessEvent ( pFnAdminExited, &AdminExited_Parms, NULL );
};

// Function Engine.AccessControl.AdminEntered
// [0x00020002] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )

void AAccessControl::AdminEntered ( class APlayerController* P )
{
	static UFunction* pFnAdminEntered = NULL;

	if ( ! pFnAdminEntered )
		pFnAdminEntered = (UFunction*) UObject::GObjObjects()->Data[ 7569 ];

	AAccessControl_execAdminEntered_Parms AdminEntered_Parms;
	AdminEntered_Parms.P = P;

	this->ProcessEvent ( pFnAdminEntered, &AdminEntered_Parms, NULL );
};

// Function Engine.AccessControl.AdminLogout
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )

bool AAccessControl::AdminLogout ( class APlayerController* P )
{
	static UFunction* pFnAdminLogout = NULL;

	if ( ! pFnAdminLogout )
		pFnAdminLogout = (UFunction*) UObject::GObjObjects()->Data[ 7565 ];

	AAccessControl_execAdminLogout_Parms AdminLogout_Parms;
	AdminLogout_Parms.P = P;

	this->ProcessEvent ( pFnAdminLogout, &AdminLogout_Parms, NULL );

	return AdminLogout_Parms.ReturnValue;
};

// Function Engine.AccessControl.AdminLogin
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )

bool AAccessControl::AdminLogin ( class APlayerController* P, struct FString Password )
{
	static UFunction* pFnAdminLogin = NULL;

	if ( ! pFnAdminLogin )
		pFnAdminLogin = (UFunction*) UObject::GObjObjects()->Data[ 7561 ];

	AAccessControl_execAdminLogin_Parms AdminLogin_Parms;
	AdminLogin_Parms.P = P;
	memcpy ( &AdminLogin_Parms.Password, &Password, 0x10 );

	this->ProcessEvent ( pFnAdminLogin, &AdminLogin_Parms, NULL );

	return AdminLogin_Parms.ReturnValue;
};

// Function Engine.AccessControl.KickPlayer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       C                              ( CPF_Parm )
// struct FString                 KickReason                     ( CPF_Parm | CPF_NeedCtorLink )

bool AAccessControl::KickPlayer ( class APlayerController* C, struct FString KickReason )
{
	static UFunction* pFnKickPlayer = NULL;

	if ( ! pFnKickPlayer )
		pFnKickPlayer = (UFunction*) UObject::GObjObjects()->Data[ 7557 ];

	AAccessControl_execKickPlayer_Parms KickPlayer_Parms;
	KickPlayer_Parms.C = C;
	memcpy ( &KickPlayer_Parms.KickReason, &KickReason, 0x10 );

	this->ProcessEvent ( pFnKickPlayer, &KickPlayer_Parms, NULL );

	return KickPlayer_Parms.ReturnValue;
};

// Function Engine.AccessControl.ForceKickPlayer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       C                              ( CPF_Parm )
// struct FString                 KickReason                     ( CPF_Parm | CPF_NeedCtorLink )

bool AAccessControl::ForceKickPlayer ( class APlayerController* C, struct FString KickReason )
{
	static UFunction* pFnForceKickPlayer = NULL;

	if ( ! pFnForceKickPlayer )
		pFnForceKickPlayer = (UFunction*) UObject::GObjObjects()->Data[ 7553 ];

	AAccessControl_execForceKickPlayer_Parms ForceKickPlayer_Parms;
	ForceKickPlayer_Parms.C = C;
	memcpy ( &ForceKickPlayer_Parms.KickReason, &KickReason, 0x10 );

	this->ProcessEvent ( pFnForceKickPlayer, &ForceKickPlayer_Parms, NULL );

	return ForceKickPlayer_Parms.ReturnValue;
};

// Function Engine.AccessControl.KickBan
// [0x00020002] 
// Parameters infos:
// struct FString                 Target                         ( CPF_Parm | CPF_NeedCtorLink )

void AAccessControl::KickBan ( struct FString Target )
{
	static UFunction* pFnKickBan = NULL;

	if ( ! pFnKickBan )
		pFnKickBan = (UFunction*) UObject::GObjObjects()->Data[ 7543 ];

	AAccessControl_execKickBan_Parms KickBan_Parms;
	memcpy ( &KickBan_Parms.Target, &Target, 0x10 );

	this->ProcessEvent ( pFnKickBan, &KickBan_Parms, NULL );
};

// Function Engine.AccessControl.Kick
// [0x00020002] 
// Parameters infos:
// struct FString                 Target                         ( CPF_Parm | CPF_NeedCtorLink )

void AAccessControl::Kick ( struct FString Target )
{
	static UFunction* pFnKick = NULL;

	if ( ! pFnKick )
		pFnKick = (UFunction*) UObject::GObjObjects()->Data[ 7538 ];

	AAccessControl_execKick_Parms Kick_Parms;
	memcpy ( &Kick_Parms.Target, &Target, 0x10 );

	this->ProcessEvent ( pFnKick, &Kick_Parms, NULL );
};

// Function Engine.AccessControl.GetControllerFromString
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Target                         ( CPF_Parm | CPF_NeedCtorLink )

class AController* AAccessControl::GetControllerFromString ( struct FString Target )
{
	static UFunction* pFnGetControllerFromString = NULL;

	if ( ! pFnGetControllerFromString )
		pFnGetControllerFromString = (UFunction*) UObject::GObjObjects()->Data[ 7527 ];

	AAccessControl_execGetControllerFromString_Parms GetControllerFromString_Parms;
	memcpy ( &GetControllerFromString_Parms.Target, &Target, 0x10 );

	this->ProcessEvent ( pFnGetControllerFromString, &GetControllerFromString_Parms, NULL );

	return GetControllerFromString_Parms.ReturnValue;
};

// Function Engine.AccessControl.RequiresPassword
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AAccessControl::RequiresPassword ( )
{
	static UFunction* pFnRequiresPassword = NULL;

	if ( ! pFnRequiresPassword )
		pFnRequiresPassword = (UFunction*) UObject::GObjObjects()->Data[ 7525 ];

	AAccessControl_execRequiresPassword_Parms RequiresPassword_Parms;

	this->ProcessEvent ( pFnRequiresPassword, &RequiresPassword_Parms, NULL );

	return RequiresPassword_Parms.ReturnValue;
};

// Function Engine.AccessControl.SetGamePassword
// [0x00020002] 
// Parameters infos:
// struct FString                 P                              ( CPF_Parm | CPF_NeedCtorLink )

void AAccessControl::SetGamePassword ( struct FString P )
{
	static UFunction* pFnSetGamePassword = NULL;

	if ( ! pFnSetGamePassword )
		pFnSetGamePassword = (UFunction*) UObject::GObjObjects()->Data[ 7522 ];

	AAccessControl_execSetGamePassword_Parms SetGamePassword_Parms;
	memcpy ( &SetGamePassword_Parms.P, &P, 0x10 );

	this->ProcessEvent ( pFnSetGamePassword, &SetGamePassword_Parms, NULL );
};

// Function Engine.AccessControl.SetAdminPassword
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 P                              ( CPF_Parm | CPF_NeedCtorLink )

bool AAccessControl::SetAdminPassword ( struct FString P )
{
	static UFunction* pFnSetAdminPassword = NULL;

	if ( ! pFnSetAdminPassword )
		pFnSetAdminPassword = (UFunction*) UObject::GObjObjects()->Data[ 7518 ];

	AAccessControl_execSetAdminPassword_Parms SetAdminPassword_Parms;
	memcpy ( &SetAdminPassword_Parms.P, &P, 0x10 );

	this->ProcessEvent ( pFnSetAdminPassword, &SetAdminPassword_Parms, NULL );

	return SetAdminPassword_Parms.ReturnValue;
};

// Function Engine.AccessControl.IsAdmin
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )

bool AAccessControl::IsAdmin ( class APlayerController* P )
{
	static UFunction* pFnIsAdmin = NULL;

	if ( ! pFnIsAdmin )
		pFnIsAdmin = (UFunction*) UObject::GObjObjects()->Data[ 7512 ];

	AAccessControl_execIsAdmin_Parms IsAdmin_Parms;
	IsAdmin_Parms.P = P;

	this->ProcessEvent ( pFnIsAdmin, &IsAdmin_Parms, NULL );

	return IsAdmin_Parms.ReturnValue;
};

// Function Engine.Admin.ServerSwitch
// [0x002200C2] 
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::ServerSwitch ( struct FString URL )
{
	static UFunction* pFnServerSwitch = NULL;

	if ( ! pFnServerSwitch )
		pFnServerSwitch = (UFunction*) UObject::GObjObjects()->Data[ 11975 ];

	AAdmin_execServerSwitch_Parms ServerSwitch_Parms;
	memcpy ( &ServerSwitch_Parms.URL, &URL, 0x10 );

	this->ProcessEvent ( pFnServerSwitch, &ServerSwitch_Parms, NULL );
};

// Function Engine.Admin.Switch
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::Switch ( struct FString URL )
{
	static UFunction* pFnSwitch = NULL;

	if ( ! pFnSwitch )
		pFnSwitch = (UFunction*) UObject::GObjObjects()->Data[ 11973 ];

	AAdmin_execSwitch_Parms Switch_Parms;
	memcpy ( &Switch_Parms.URL, &URL, 0x10 );

	this->ProcessEvent ( pFnSwitch, &Switch_Parms, NULL );
};

// Function Engine.Admin.ServerRestartMap
// [0x002200C2] 
// Parameters infos:

void AAdmin::ServerRestartMap ( )
{
	static UFunction* pFnServerRestartMap = NULL;

	if ( ! pFnServerRestartMap )
		pFnServerRestartMap = (UFunction*) UObject::GObjObjects()->Data[ 11972 ];

	AAdmin_execServerRestartMap_Parms ServerRestartMap_Parms;

	this->ProcessEvent ( pFnServerRestartMap, &ServerRestartMap_Parms, NULL );
};

// Function Engine.Admin.RestartMap
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AAdmin::RestartMap ( )
{
	static UFunction* pFnRestartMap = NULL;

	if ( ! pFnRestartMap )
		pFnRestartMap = (UFunction*) UObject::GObjObjects()->Data[ 11971 ];

	AAdmin_execRestartMap_Parms RestartMap_Parms;

	this->ProcessEvent ( pFnRestartMap, &RestartMap_Parms, NULL );
};

// Function Engine.Admin.PlayerList
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AAdmin::PlayerList ( )
{
	static UFunction* pFnPlayerList = NULL;

	if ( ! pFnPlayerList )
		pFnPlayerList = (UFunction*) UObject::GObjObjects()->Data[ 11969 ];

	AAdmin_execPlayerList_Parms PlayerList_Parms;

	this->ProcessEvent ( pFnPlayerList, &PlayerList_Parms, NULL );
};

// Function Engine.Admin.ServerKick
// [0x002200C2] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::ServerKick ( struct FString S )
{
	static UFunction* pFnServerKick = NULL;

	if ( ! pFnServerKick )
		pFnServerKick = (UFunction*) UObject::GObjObjects()->Data[ 11967 ];

	AAdmin_execServerKick_Parms ServerKick_Parms;
	memcpy ( &ServerKick_Parms.S, &S, 0x10 );

	this->ProcessEvent ( pFnServerKick, &ServerKick_Parms, NULL );
};

// Function Engine.Admin.Kick
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::Kick ( struct FString S )
{
	static UFunction* pFnKick = NULL;

	if ( ! pFnKick )
		pFnKick = (UFunction*) UObject::GObjObjects()->Data[ 11965 ];

	AAdmin_execKick_Parms Kick_Parms;
	memcpy ( &Kick_Parms.S, &S, 0x10 );

	this->ProcessEvent ( pFnKick, &Kick_Parms, NULL );
};

// Function Engine.Admin.ServerKickBan
// [0x002200C2] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::ServerKickBan ( struct FString S )
{
	static UFunction* pFnServerKickBan = NULL;

	if ( ! pFnServerKickBan )
		pFnServerKickBan = (UFunction*) UObject::GObjObjects()->Data[ 11963 ];

	AAdmin_execServerKickBan_Parms ServerKickBan_Parms;
	memcpy ( &ServerKickBan_Parms.S, &S, 0x10 );

	this->ProcessEvent ( pFnServerKickBan, &ServerKickBan_Parms, NULL );
};

// Function Engine.Admin.KickBan
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::KickBan ( struct FString S )
{
	static UFunction* pFnKickBan = NULL;

	if ( ! pFnKickBan )
		pFnKickBan = (UFunction*) UObject::GObjObjects()->Data[ 11961 ];

	AAdmin_execKickBan_Parms KickBan_Parms;
	memcpy ( &KickBan_Parms.S, &S, 0x10 );

	this->ProcessEvent ( pFnKickBan, &KickBan_Parms, NULL );
};

// Function Engine.Admin.ServerAdmin
// [0x002200C2] 
// Parameters infos:
// struct FString                 CommandLine                    ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::ServerAdmin ( struct FString CommandLine )
{
	static UFunction* pFnServerAdmin = NULL;

	if ( ! pFnServerAdmin )
		pFnServerAdmin = (UFunction*) UObject::GObjObjects()->Data[ 11958 ];

	AAdmin_execServerAdmin_Parms ServerAdmin_Parms;
	memcpy ( &ServerAdmin_Parms.CommandLine, &CommandLine, 0x10 );

	this->ProcessEvent ( pFnServerAdmin, &ServerAdmin_Parms, NULL );
};

// Function Engine.Admin.Admin
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 CommandLine                    ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::Admin ( struct FString CommandLine )
{
	static UFunction* pFnAdmin = NULL;

	if ( ! pFnAdmin )
		pFnAdmin = (UFunction*) UObject::GObjObjects()->Data[ 11956 ];

	AAdmin_execAdmin_Parms Admin_Parms;
	memcpy ( &Admin_Parms.CommandLine, &CommandLine, 0x10 );

	this->ProcessEvent ( pFnAdmin, &Admin_Parms, NULL );
};

// Function Engine.Admin.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AAdmin::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 11955 ];

	AAdmin_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.EmitterSpawnable.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AEmitterSpawnable::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 19566 ];

	AEmitterSpawnable_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.EmitterSpawnable.SetTemplate
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// class UParticleSystem*         NewTemplate                    ( CPF_Parm )
// unsigned long                  bDestroyOnFinish               ( CPF_OptionalParm | CPF_Parm )

void AEmitterSpawnable::eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = (UFunction*) UObject::GObjObjects()->Data[ 19562 ];

	AEmitterSpawnable_eventSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.NewTemplate = NewTemplate;
	SetTemplate_Parms.bDestroyOnFinish = bDestroyOnFinish;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );
};

// Function Engine.SeqEvent_Death.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqEvent_Death::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 30104 ];

	USeqEvent_Death_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ToggleGodMode.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_ToggleGodMode::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 29992 ];

	USeqAct_ToggleGodMode_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_ToggleAffectedByHitEffects.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_ToggleAffectedByHitEffects::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 29976 ];

	USeqAct_ToggleAffectedByHitEffects_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_ControlMovieTexture.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqAct_ControlMovieTexture::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 9026 ];

	USeqAct_ControlMovieTexture_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.OnlineAccountInterface.GetLocalAccountNames
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct TArray<struct FString>  Accounts                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineAccountInterface::GetLocalAccountNames ( struct TArray<struct FString>* Accounts )
{
	static UFunction* pFnGetLocalAccountNames = NULL;

	if ( ! pFnGetLocalAccountNames )
		pFnGetLocalAccountNames = (UFunction*) UObject::GObjObjects()->Data[ 25373 ];

	UOnlineAccountInterface_execGetLocalAccountNames_Parms GetLocalAccountNames_Parms;

	this->ProcessEvent ( pFnGetLocalAccountNames, &GetLocalAccountNames_Parms, NULL );

	if ( Accounts )
		memcpy ( Accounts, &GetLocalAccountNames_Parms.Accounts, 0x10 );

	return GetLocalAccountNames_Parms.ReturnValue;
};

// Function Engine.OnlineAccountInterface.DeleteLocalAccount
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlineAccountInterface::DeleteLocalAccount ( struct FString UserName, struct FString Password )
{
	static UFunction* pFnDeleteLocalAccount = NULL;

	if ( ! pFnDeleteLocalAccount )
		pFnDeleteLocalAccount = (UFunction*) UObject::GObjObjects()->Data[ 25369 ];

	UOnlineAccountInterface_execDeleteLocalAccount_Parms DeleteLocalAccount_Parms;
	memcpy ( &DeleteLocalAccount_Parms.UserName, &UserName, 0x10 );
	memcpy ( &DeleteLocalAccount_Parms.Password, &Password, 0x10 );

	this->ProcessEvent ( pFnDeleteLocalAccount, &DeleteLocalAccount_Parms, NULL );

	return DeleteLocalAccount_Parms.ReturnValue;
};

// Function Engine.OnlineAccountInterface.RenameLocalAccount
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 NewUserName                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 OldUserName                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlineAccountInterface::RenameLocalAccount ( struct FString NewUserName, struct FString OldUserName, struct FString Password )
{
	static UFunction* pFnRenameLocalAccount = NULL;

	if ( ! pFnRenameLocalAccount )
		pFnRenameLocalAccount = (UFunction*) UObject::GObjObjects()->Data[ 25364 ];

	UOnlineAccountInterface_execRenameLocalAccount_Parms RenameLocalAccount_Parms;
	memcpy ( &RenameLocalAccount_Parms.NewUserName, &NewUserName, 0x10 );
	memcpy ( &RenameLocalAccount_Parms.OldUserName, &OldUserName, 0x10 );
	memcpy ( &RenameLocalAccount_Parms.Password, &Password, 0x10 );

	this->ProcessEvent ( pFnRenameLocalAccount, &RenameLocalAccount_Parms, NULL );

	return RenameLocalAccount_Parms.ReturnValue;
};

// Function Engine.OnlineAccountInterface.CreateLocalAccount
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlineAccountInterface::CreateLocalAccount ( struct FString UserName, struct FString Password )
{
	static UFunction* pFnCreateLocalAccount = NULL;

	if ( ! pFnCreateLocalAccount )
		pFnCreateLocalAccount = (UFunction*) UObject::GObjObjects()->Data[ 25360 ];

	UOnlineAccountInterface_execCreateLocalAccount_Parms CreateLocalAccount_Parms;
	memcpy ( &CreateLocalAccount_Parms.UserName, &UserName, 0x10 );
	memcpy ( &CreateLocalAccount_Parms.Password, &Password, 0x10 );

	this->ProcessEvent ( pFnCreateLocalAccount, &CreateLocalAccount_Parms, NULL );

	return CreateLocalAccount_Parms.ReturnValue;
};

// Function Engine.OnlineAccountInterface.ClearCreateOnlineAccountCompletedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         AccountCreateDelegate          ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAccountInterface::ClearCreateOnlineAccountCompletedDelegate ( struct FScriptDelegate AccountCreateDelegate )
{
	static UFunction* pFnClearCreateOnlineAccountCompletedDelegate = NULL;

	if ( ! pFnClearCreateOnlineAccountCompletedDelegate )
		pFnClearCreateOnlineAccountCompletedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25358 ];

	UOnlineAccountInterface_execClearCreateOnlineAccountCompletedDelegate_Parms ClearCreateOnlineAccountCompletedDelegate_Parms;
	memcpy ( &ClearCreateOnlineAccountCompletedDelegate_Parms.AccountCreateDelegate, &AccountCreateDelegate, 0x10 );

	this->ProcessEvent ( pFnClearCreateOnlineAccountCompletedDelegate, &ClearCreateOnlineAccountCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlineAccountInterface.AddCreateOnlineAccountCompletedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         AccountCreateDelegate          ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAccountInterface::AddCreateOnlineAccountCompletedDelegate ( struct FScriptDelegate AccountCreateDelegate )
{
	static UFunction* pFnAddCreateOnlineAccountCompletedDelegate = NULL;

	if ( ! pFnAddCreateOnlineAccountCompletedDelegate )
		pFnAddCreateOnlineAccountCompletedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25356 ];

	UOnlineAccountInterface_execAddCreateOnlineAccountCompletedDelegate_Parms AddCreateOnlineAccountCompletedDelegate_Parms;
	memcpy ( &AddCreateOnlineAccountCompletedDelegate_Parms.AccountCreateDelegate, &AccountCreateDelegate, 0x10 );

	this->ProcessEvent ( pFnAddCreateOnlineAccountCompletedDelegate, &AddCreateOnlineAccountCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlineAccountInterface.OnCreateOnlineAccountCompleted
// [0x00120000] 
// Parameters infos:
// unsigned char                  ErrorStatus                    ( CPF_Parm )

void UOnlineAccountInterface::OnCreateOnlineAccountCompleted ( unsigned char ErrorStatus )
{
	static UFunction* pFnOnCreateOnlineAccountCompleted = NULL;

	if ( ! pFnOnCreateOnlineAccountCompleted )
		pFnOnCreateOnlineAccountCompleted = (UFunction*) UObject::GObjObjects()->Data[ 25354 ];

	UOnlineAccountInterface_execOnCreateOnlineAccountCompleted_Parms OnCreateOnlineAccountCompleted_Parms;
	OnCreateOnlineAccountCompleted_Parms.ErrorStatus = ErrorStatus;

	this->ProcessEvent ( pFnOnCreateOnlineAccountCompleted, &OnCreateOnlineAccountCompleted_Parms, NULL );
};

// Function Engine.OnlineAccountInterface.CreateOnlineAccount
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 EmailAddress                   ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ProductKey                     ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlineAccountInterface::CreateOnlineAccount ( struct FString UserName, struct FString Password, struct FString EmailAddress, struct FString ProductKey )
{
	static UFunction* pFnCreateOnlineAccount = NULL;

	if ( ! pFnCreateOnlineAccount )
		pFnCreateOnlineAccount = (UFunction*) UObject::GObjObjects()->Data[ 25348 ];

	UOnlineAccountInterface_execCreateOnlineAccount_Parms CreateOnlineAccount_Parms;
	memcpy ( &CreateOnlineAccount_Parms.UserName, &UserName, 0x10 );
	memcpy ( &CreateOnlineAccount_Parms.Password, &Password, 0x10 );
	memcpy ( &CreateOnlineAccount_Parms.EmailAddress, &EmailAddress, 0x10 );
	memcpy ( &CreateOnlineAccount_Parms.ProductKey, &ProductKey, 0x10 );

	this->ProcessEvent ( pFnCreateOnlineAccount, &CreateOnlineAccount_Parms, NULL );

	return CreateOnlineAccount_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetAchievements
// [0x00424000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            TitleId                        ( CPF_OptionalParm | CPF_Parm )
// int                            SetIndex                       ( CPF_OptionalParm | CPF_Parm )
// struct TArray<struct FAchievementDetails> Achievements                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

unsigned char UOnlinePlayerInterface::GetAchievements ( unsigned char LocalUserNum, int TitleId, int SetIndex, struct TArray<struct FAchievementDetails>* Achievements )
{
	static UFunction* pFnGetAchievements = NULL;

	if ( ! pFnGetAchievements )
		pFnGetAchievements = (UFunction*) UObject::GObjObjects()->Data[ 26149 ];

	UOnlinePlayerInterface_execGetAchievements_Parms GetAchievements_Parms;
	GetAchievements_Parms.LocalUserNum = LocalUserNum;
	GetAchievements_Parms.TitleId = TitleId;
	GetAchievements_Parms.SetIndex = SetIndex;

	this->ProcessEvent ( pFnGetAchievements, &GetAchievements_Parms, NULL );

	if ( Achievements )
		memcpy ( Achievements, &GetAchievements_Parms.Achievements, 0x10 );

	return GetAchievements_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearReadAchievementsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadAchievementsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearReadAchievementsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadAchievementsCompleteDelegate )
{
	static UFunction* pFnClearReadAchievementsCompleteDelegate = NULL;

	if ( ! pFnClearReadAchievementsCompleteDelegate )
		pFnClearReadAchievementsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26146 ];

	UOnlinePlayerInterface_execClearReadAchievementsCompleteDelegate_Parms ClearReadAchievementsCompleteDelegate_Parms;
	ClearReadAchievementsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadAchievementsCompleteDelegate_Parms.ReadAchievementsCompleteDelegate, &ReadAchievementsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadAchievementsCompleteDelegate, &ClearReadAchievementsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddReadAchievementsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadAchievementsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddReadAchievementsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadAchievementsCompleteDelegate )
{
	static UFunction* pFnAddReadAchievementsCompleteDelegate = NULL;

	if ( ! pFnAddReadAchievementsCompleteDelegate )
		pFnAddReadAchievementsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26143 ];

	UOnlinePlayerInterface_execAddReadAchievementsCompleteDelegate_Parms AddReadAchievementsCompleteDelegate_Parms;
	AddReadAchievementsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadAchievementsCompleteDelegate_Parms.ReadAchievementsCompleteDelegate, &ReadAchievementsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadAchievementsCompleteDelegate, &AddReadAchievementsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnReadAchievementsComplete
// [0x00120000] 
// Parameters infos:
// int                            TitleId                        ( CPF_Parm )

void UOnlinePlayerInterface::OnReadAchievementsComplete ( int TitleId )
{
	static UFunction* pFnOnReadAchievementsComplete = NULL;

	if ( ! pFnOnReadAchievementsComplete )
		pFnOnReadAchievementsComplete = (UFunction*) UObject::GObjObjects()->Data[ 26141 ];

	UOnlinePlayerInterface_execOnReadAchievementsComplete_Parms OnReadAchievementsComplete_Parms;
	OnReadAchievementsComplete_Parms.TitleId = TitleId;

	this->ProcessEvent ( pFnOnReadAchievementsComplete, &OnReadAchievementsComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ReadAchievements
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            TitleId                        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldReadText                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldReadImages              ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::ReadAchievements ( unsigned char LocalUserNum, int TitleId, unsigned long bShouldReadText, unsigned long bShouldReadImages )
{
	static UFunction* pFnReadAchievements = NULL;

	if ( ! pFnReadAchievements )
		pFnReadAchievements = (UFunction*) UObject::GObjObjects()->Data[ 26135 ];

	UOnlinePlayerInterface_execReadAchievements_Parms ReadAchievements_Parms;
	ReadAchievements_Parms.LocalUserNum = LocalUserNum;
	ReadAchievements_Parms.TitleId = TitleId;
	ReadAchievements_Parms.bShouldReadText = bShouldReadText;
	ReadAchievements_Parms.bShouldReadImages = bShouldReadImages;

	this->ProcessEvent ( pFnReadAchievements, &ReadAchievements_Parms, NULL );

	return ReadAchievements_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearUnlockAchievementCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         UnlockAchievementCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearUnlockAchievementCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate UnlockAchievementCompleteDelegate )
{
	static UFunction* pFnClearUnlockAchievementCompleteDelegate = NULL;

	if ( ! pFnClearUnlockAchievementCompleteDelegate )
		pFnClearUnlockAchievementCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26132 ];

	UOnlinePlayerInterface_execClearUnlockAchievementCompleteDelegate_Parms ClearUnlockAchievementCompleteDelegate_Parms;
	ClearUnlockAchievementCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearUnlockAchievementCompleteDelegate_Parms.UnlockAchievementCompleteDelegate, &UnlockAchievementCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearUnlockAchievementCompleteDelegate, &ClearUnlockAchievementCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddUnlockAchievementCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         UnlockAchievementCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddUnlockAchievementCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate UnlockAchievementCompleteDelegate )
{
	static UFunction* pFnAddUnlockAchievementCompleteDelegate = NULL;

	if ( ! pFnAddUnlockAchievementCompleteDelegate )
		pFnAddUnlockAchievementCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26129 ];

	UOnlinePlayerInterface_execAddUnlockAchievementCompleteDelegate_Parms AddUnlockAchievementCompleteDelegate_Parms;
	AddUnlockAchievementCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddUnlockAchievementCompleteDelegate_Parms.UnlockAchievementCompleteDelegate, &UnlockAchievementCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddUnlockAchievementCompleteDelegate, &AddUnlockAchievementCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnUnlockAchievementComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnUnlockAchievementComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnUnlockAchievementComplete = NULL;

	if ( ! pFnOnUnlockAchievementComplete )
		pFnOnUnlockAchievementComplete = (UFunction*) UObject::GObjObjects()->Data[ 26127 ];

	UOnlinePlayerInterface_execOnUnlockAchievementComplete_Parms OnUnlockAchievementComplete_Parms;
	OnUnlockAchievementComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnUnlockAchievementComplete, &OnUnlockAchievementComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.UnlockAchievement
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            AchievementId                  ( CPF_Parm )

bool UOnlinePlayerInterface::UnlockAchievement ( unsigned char LocalUserNum, int AchievementId )
{
	static UFunction* pFnUnlockAchievement = NULL;

	if ( ! pFnUnlockAchievement )
		pFnUnlockAchievement = (UFunction*) UObject::GObjObjects()->Data[ 26123 ];

	UOnlinePlayerInterface_execUnlockAchievement_Parms UnlockAchievement_Parms;
	UnlockAchievement_Parms.LocalUserNum = LocalUserNum;
	UnlockAchievement_Parms.AchievementId = AchievementId;

	this->ProcessEvent ( pFnUnlockAchievement, &UnlockAchievement_Parms, NULL );

	return UnlockAchievement_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.DeleteMessage
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            MessageIndex                   ( CPF_Parm )

bool UOnlinePlayerInterface::DeleteMessage ( unsigned char LocalUserNum, int MessageIndex )
{
	static UFunction* pFnDeleteMessage = NULL;

	if ( ! pFnDeleteMessage )
		pFnDeleteMessage = (UFunction*) UObject::GObjObjects()->Data[ 26119 ];

	UOnlinePlayerInterface_execDeleteMessage_Parms DeleteMessage_Parms;
	DeleteMessage_Parms.LocalUserNum = LocalUserNum;
	DeleteMessage_Parms.MessageIndex = MessageIndex;

	this->ProcessEvent ( pFnDeleteMessage, &DeleteMessage_Parms, NULL );

	return DeleteMessage_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearFriendMessageReceivedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         MessageDelegate                ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearFriendMessageReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate MessageDelegate )
{
	static UFunction* pFnClearFriendMessageReceivedDelegate = NULL;

	if ( ! pFnClearFriendMessageReceivedDelegate )
		pFnClearFriendMessageReceivedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26116 ];

	UOnlinePlayerInterface_execClearFriendMessageReceivedDelegate_Parms ClearFriendMessageReceivedDelegate_Parms;
	ClearFriendMessageReceivedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearFriendMessageReceivedDelegate_Parms.MessageDelegate, &MessageDelegate, 0x10 );

	this->ProcessEvent ( pFnClearFriendMessageReceivedDelegate, &ClearFriendMessageReceivedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddFriendMessageReceivedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         MessageDelegate                ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddFriendMessageReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate MessageDelegate )
{
	static UFunction* pFnAddFriendMessageReceivedDelegate = NULL;

	if ( ! pFnAddFriendMessageReceivedDelegate )
		pFnAddFriendMessageReceivedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26113 ];

	UOnlinePlayerInterface_execAddFriendMessageReceivedDelegate_Parms AddFriendMessageReceivedDelegate_Parms;
	AddFriendMessageReceivedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddFriendMessageReceivedDelegate_Parms.MessageDelegate, &MessageDelegate, 0x10 );

	this->ProcessEvent ( pFnAddFriendMessageReceivedDelegate, &AddFriendMessageReceivedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnFriendMessageReceived
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            SendingPlayer                  ( CPF_Parm )
// struct FString                 SendingNick                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::OnFriendMessageReceived ( unsigned char LocalUserNum, struct FUniqueNetId SendingPlayer, struct FString SendingNick, struct FString Message )
{
	static UFunction* pFnOnFriendMessageReceived = NULL;

	if ( ! pFnOnFriendMessageReceived )
		pFnOnFriendMessageReceived = (UFunction*) UObject::GObjObjects()->Data[ 26108 ];

	UOnlinePlayerInterface_execOnFriendMessageReceived_Parms OnFriendMessageReceived_Parms;
	OnFriendMessageReceived_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnFriendMessageReceived_Parms.SendingPlayer, &SendingPlayer, 0x8 );
	memcpy ( &OnFriendMessageReceived_Parms.SendingNick, &SendingNick, 0x10 );
	memcpy ( &OnFriendMessageReceived_Parms.Message, &Message, 0x10 );

	this->ProcessEvent ( pFnOnFriendMessageReceived, &OnFriendMessageReceived_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.GetFriendMessages
// [0x00420000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct TArray<struct FOnlineFriendMessage> FriendMessages                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::GetFriendMessages ( unsigned char LocalUserNum, struct TArray<struct FOnlineFriendMessage>* FriendMessages )
{
	static UFunction* pFnGetFriendMessages = NULL;

	if ( ! pFnGetFriendMessages )
		pFnGetFriendMessages = (UFunction*) UObject::GObjObjects()->Data[ 26104 ];

	UOnlinePlayerInterface_execGetFriendMessages_Parms GetFriendMessages_Parms;
	GetFriendMessages_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetFriendMessages, &GetFriendMessages_Parms, NULL );

	if ( FriendMessages )
		memcpy ( FriendMessages, &GetFriendMessages_Parms.FriendMessages, 0x10 );
};

// Function Engine.OnlinePlayerInterface.ClearJoinFriendGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         JoinFriendGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearJoinFriendGameCompleteDelegate ( struct FScriptDelegate JoinFriendGameCompleteDelegate )
{
	static UFunction* pFnClearJoinFriendGameCompleteDelegate = NULL;

	if ( ! pFnClearJoinFriendGameCompleteDelegate )
		pFnClearJoinFriendGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26102 ];

	UOnlinePlayerInterface_execClearJoinFriendGameCompleteDelegate_Parms ClearJoinFriendGameCompleteDelegate_Parms;
	memcpy ( &ClearJoinFriendGameCompleteDelegate_Parms.JoinFriendGameCompleteDelegate, &JoinFriendGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearJoinFriendGameCompleteDelegate, &ClearJoinFriendGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddJoinFriendGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         JoinFriendGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddJoinFriendGameCompleteDelegate ( struct FScriptDelegate JoinFriendGameCompleteDelegate )
{
	static UFunction* pFnAddJoinFriendGameCompleteDelegate = NULL;

	if ( ! pFnAddJoinFriendGameCompleteDelegate )
		pFnAddJoinFriendGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26100 ];

	UOnlinePlayerInterface_execAddJoinFriendGameCompleteDelegate_Parms AddJoinFriendGameCompleteDelegate_Parms;
	memcpy ( &AddJoinFriendGameCompleteDelegate_Parms.JoinFriendGameCompleteDelegate, &JoinFriendGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddJoinFriendGameCompleteDelegate, &AddJoinFriendGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnJoinFriendGameComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnJoinFriendGameComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnJoinFriendGameComplete = NULL;

	if ( ! pFnOnJoinFriendGameComplete )
		pFnOnJoinFriendGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 26098 ];

	UOnlinePlayerInterface_execOnJoinFriendGameComplete_Parms OnJoinFriendGameComplete_Parms;
	OnJoinFriendGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnJoinFriendGameComplete, &OnJoinFriendGameComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.JoinFriendGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            Friend                         ( CPF_Parm )

bool UOnlinePlayerInterface::JoinFriendGame ( unsigned char LocalUserNum, struct FUniqueNetId Friend )
{
	static UFunction* pFnJoinFriendGame = NULL;

	if ( ! pFnJoinFriendGame )
		pFnJoinFriendGame = (UFunction*) UObject::GObjObjects()->Data[ 26094 ];

	UOnlinePlayerInterface_execJoinFriendGame_Parms JoinFriendGame_Parms;
	JoinFriendGame_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &JoinFriendGame_Parms.Friend, &Friend, 0x8 );

	this->ProcessEvent ( pFnJoinFriendGame, &JoinFriendGame_Parms, NULL );

	return JoinFriendGame_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearReceivedGameInviteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReceivedGameInviteDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearReceivedGameInviteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReceivedGameInviteDelegate )
{
	static UFunction* pFnClearReceivedGameInviteDelegate = NULL;

	if ( ! pFnClearReceivedGameInviteDelegate )
		pFnClearReceivedGameInviteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26091 ];

	UOnlinePlayerInterface_execClearReceivedGameInviteDelegate_Parms ClearReceivedGameInviteDelegate_Parms;
	ClearReceivedGameInviteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReceivedGameInviteDelegate_Parms.ReceivedGameInviteDelegate, &ReceivedGameInviteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReceivedGameInviteDelegate, &ClearReceivedGameInviteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddReceivedGameInviteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReceivedGameInviteDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddReceivedGameInviteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReceivedGameInviteDelegate )
{
	static UFunction* pFnAddReceivedGameInviteDelegate = NULL;

	if ( ! pFnAddReceivedGameInviteDelegate )
		pFnAddReceivedGameInviteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26088 ];

	UOnlinePlayerInterface_execAddReceivedGameInviteDelegate_Parms AddReceivedGameInviteDelegate_Parms;
	AddReceivedGameInviteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReceivedGameInviteDelegate_Parms.ReceivedGameInviteDelegate, &ReceivedGameInviteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReceivedGameInviteDelegate, &AddReceivedGameInviteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnReceivedGameInvite
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 InviterName                    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::OnReceivedGameInvite ( unsigned char LocalUserNum, struct FString InviterName )
{
	static UFunction* pFnOnReceivedGameInvite = NULL;

	if ( ! pFnOnReceivedGameInvite )
		pFnOnReceivedGameInvite = (UFunction*) UObject::GObjObjects()->Data[ 26085 ];

	UOnlinePlayerInterface_execOnReceivedGameInvite_Parms OnReceivedGameInvite_Parms;
	OnReceivedGameInvite_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnReceivedGameInvite_Parms.InviterName, &InviterName, 0x10 );

	this->ProcessEvent ( pFnOnReceivedGameInvite, &OnReceivedGameInvite_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.SendGameInviteToFriends
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct TArray<struct FUniqueNetId> Friends                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Text                           ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlinePlayerInterface::SendGameInviteToFriends ( unsigned char LocalUserNum, struct TArray<struct FUniqueNetId> Friends, struct FString Text )
{
	static UFunction* pFnSendGameInviteToFriends = NULL;

	if ( ! pFnSendGameInviteToFriends )
		pFnSendGameInviteToFriends = (UFunction*) UObject::GObjObjects()->Data[ 26079 ];

	UOnlinePlayerInterface_execSendGameInviteToFriends_Parms SendGameInviteToFriends_Parms;
	SendGameInviteToFriends_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &SendGameInviteToFriends_Parms.Friends, &Friends, 0x10 );
	memcpy ( &SendGameInviteToFriends_Parms.Text, &Text, 0x10 );

	this->ProcessEvent ( pFnSendGameInviteToFriends, &SendGameInviteToFriends_Parms, NULL );

	return SendGameInviteToFriends_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.SendGameInviteToFriend
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            Friend                         ( CPF_Parm )
// struct FString                 Text                           ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlinePlayerInterface::SendGameInviteToFriend ( unsigned char LocalUserNum, struct FUniqueNetId Friend, struct FString Text )
{
	static UFunction* pFnSendGameInviteToFriend = NULL;

	if ( ! pFnSendGameInviteToFriend )
		pFnSendGameInviteToFriend = (UFunction*) UObject::GObjObjects()->Data[ 26074 ];

	UOnlinePlayerInterface_execSendGameInviteToFriend_Parms SendGameInviteToFriend_Parms;
	SendGameInviteToFriend_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &SendGameInviteToFriend_Parms.Friend, &Friend, 0x8 );
	memcpy ( &SendGameInviteToFriend_Parms.Text, &Text, 0x10 );

	this->ProcessEvent ( pFnSendGameInviteToFriend, &SendGameInviteToFriend_Parms, NULL );

	return SendGameInviteToFriend_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.SendMessageToFriend
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            Friend                         ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlinePlayerInterface::SendMessageToFriend ( unsigned char LocalUserNum, struct FUniqueNetId Friend, struct FString Message )
{
	static UFunction* pFnSendMessageToFriend = NULL;

	if ( ! pFnSendMessageToFriend )
		pFnSendMessageToFriend = (UFunction*) UObject::GObjObjects()->Data[ 26069 ];

	UOnlinePlayerInterface_execSendMessageToFriend_Parms SendMessageToFriend_Parms;
	SendMessageToFriend_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &SendMessageToFriend_Parms.Friend, &Friend, 0x8 );
	memcpy ( &SendMessageToFriend_Parms.Message, &Message, 0x10 );

	this->ProcessEvent ( pFnSendMessageToFriend, &SendMessageToFriend_Parms, NULL );

	return SendMessageToFriend_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearFriendInviteReceivedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         InviteDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearFriendInviteReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate InviteDelegate )
{
	static UFunction* pFnClearFriendInviteReceivedDelegate = NULL;

	if ( ! pFnClearFriendInviteReceivedDelegate )
		pFnClearFriendInviteReceivedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26066 ];

	UOnlinePlayerInterface_execClearFriendInviteReceivedDelegate_Parms ClearFriendInviteReceivedDelegate_Parms;
	ClearFriendInviteReceivedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearFriendInviteReceivedDelegate_Parms.InviteDelegate, &InviteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearFriendInviteReceivedDelegate, &ClearFriendInviteReceivedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddFriendInviteReceivedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         InviteDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddFriendInviteReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate InviteDelegate )
{
	static UFunction* pFnAddFriendInviteReceivedDelegate = NULL;

	if ( ! pFnAddFriendInviteReceivedDelegate )
		pFnAddFriendInviteReceivedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26063 ];

	UOnlinePlayerInterface_execAddFriendInviteReceivedDelegate_Parms AddFriendInviteReceivedDelegate_Parms;
	AddFriendInviteReceivedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddFriendInviteReceivedDelegate_Parms.InviteDelegate, &InviteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddFriendInviteReceivedDelegate, &AddFriendInviteReceivedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnFriendInviteReceived
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            RequestingPlayer               ( CPF_Parm )
// struct FString                 RequestingNick                 ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::OnFriendInviteReceived ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer, struct FString RequestingNick, struct FString Message )
{
	static UFunction* pFnOnFriendInviteReceived = NULL;

	if ( ! pFnOnFriendInviteReceived )
		pFnOnFriendInviteReceived = (UFunction*) UObject::GObjObjects()->Data[ 26058 ];

	UOnlinePlayerInterface_execOnFriendInviteReceived_Parms OnFriendInviteReceived_Parms;
	OnFriendInviteReceived_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnFriendInviteReceived_Parms.RequestingPlayer, &RequestingPlayer, 0x8 );
	memcpy ( &OnFriendInviteReceived_Parms.RequestingNick, &RequestingNick, 0x10 );
	memcpy ( &OnFriendInviteReceived_Parms.Message, &Message, 0x10 );

	this->ProcessEvent ( pFnOnFriendInviteReceived, &OnFriendInviteReceived_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.RemoveFriend
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            FormerFriend                   ( CPF_Parm )

bool UOnlinePlayerInterface::RemoveFriend ( unsigned char LocalUserNum, struct FUniqueNetId FormerFriend )
{
	static UFunction* pFnRemoveFriend = NULL;

	if ( ! pFnRemoveFriend )
		pFnRemoveFriend = (UFunction*) UObject::GObjObjects()->Data[ 26054 ];

	UOnlinePlayerInterface_execRemoveFriend_Parms RemoveFriend_Parms;
	RemoveFriend_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &RemoveFriend_Parms.FormerFriend, &FormerFriend, 0x8 );

	this->ProcessEvent ( pFnRemoveFriend, &RemoveFriend_Parms, NULL );

	return RemoveFriend_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.DenyFriendInvite
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            RequestingPlayer               ( CPF_Parm )

bool UOnlinePlayerInterface::DenyFriendInvite ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer )
{
	static UFunction* pFnDenyFriendInvite = NULL;

	if ( ! pFnDenyFriendInvite )
		pFnDenyFriendInvite = (UFunction*) UObject::GObjObjects()->Data[ 26050 ];

	UOnlinePlayerInterface_execDenyFriendInvite_Parms DenyFriendInvite_Parms;
	DenyFriendInvite_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &DenyFriendInvite_Parms.RequestingPlayer, &RequestingPlayer, 0x8 );

	this->ProcessEvent ( pFnDenyFriendInvite, &DenyFriendInvite_Parms, NULL );

	return DenyFriendInvite_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.AcceptFriendInvite
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            RequestingPlayer               ( CPF_Parm )

bool UOnlinePlayerInterface::AcceptFriendInvite ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer )
{
	static UFunction* pFnAcceptFriendInvite = NULL;

	if ( ! pFnAcceptFriendInvite )
		pFnAcceptFriendInvite = (UFunction*) UObject::GObjObjects()->Data[ 26046 ];

	UOnlinePlayerInterface_execAcceptFriendInvite_Parms AcceptFriendInvite_Parms;
	AcceptFriendInvite_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AcceptFriendInvite_Parms.RequestingPlayer, &RequestingPlayer, 0x8 );

	this->ProcessEvent ( pFnAcceptFriendInvite, &AcceptFriendInvite_Parms, NULL );

	return AcceptFriendInvite_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearAddFriendByNameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         FriendDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearAddFriendByNameCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendDelegate )
{
	static UFunction* pFnClearAddFriendByNameCompleteDelegate = NULL;

	if ( ! pFnClearAddFriendByNameCompleteDelegate )
		pFnClearAddFriendByNameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26043 ];

	UOnlinePlayerInterface_execClearAddFriendByNameCompleteDelegate_Parms ClearAddFriendByNameCompleteDelegate_Parms;
	ClearAddFriendByNameCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearAddFriendByNameCompleteDelegate_Parms.FriendDelegate, &FriendDelegate, 0x10 );

	this->ProcessEvent ( pFnClearAddFriendByNameCompleteDelegate, &ClearAddFriendByNameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddAddFriendByNameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         FriendDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddAddFriendByNameCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendDelegate )
{
	static UFunction* pFnAddAddFriendByNameCompleteDelegate = NULL;

	if ( ! pFnAddAddFriendByNameCompleteDelegate )
		pFnAddAddFriendByNameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26040 ];

	UOnlinePlayerInterface_execAddAddFriendByNameCompleteDelegate_Parms AddAddFriendByNameCompleteDelegate_Parms;
	AddAddFriendByNameCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddAddFriendByNameCompleteDelegate_Parms.FriendDelegate, &FriendDelegate, 0x10 );

	this->ProcessEvent ( pFnAddAddFriendByNameCompleteDelegate, &AddAddFriendByNameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnAddFriendByNameComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnAddFriendByNameComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnAddFriendByNameComplete = NULL;

	if ( ! pFnOnAddFriendByNameComplete )
		pFnOnAddFriendByNameComplete = (UFunction*) UObject::GObjObjects()->Data[ 26038 ];

	UOnlinePlayerInterface_execOnAddFriendByNameComplete_Parms OnAddFriendByNameComplete_Parms;
	OnAddFriendByNameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnAddFriendByNameComplete, &OnAddFriendByNameComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddFriendByName
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 FriendName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Message                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlinePlayerInterface::AddFriendByName ( unsigned char LocalUserNum, struct FString FriendName, struct FString Message )
{
	static UFunction* pFnAddFriendByName = NULL;

	if ( ! pFnAddFriendByName )
		pFnAddFriendByName = (UFunction*) UObject::GObjObjects()->Data[ 26033 ];

	UOnlinePlayerInterface_execAddFriendByName_Parms AddFriendByName_Parms;
	AddFriendByName_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddFriendByName_Parms.FriendName, &FriendName, 0x10 );
	memcpy ( &AddFriendByName_Parms.Message, &Message, 0x10 );

	this->ProcessEvent ( pFnAddFriendByName, &AddFriendByName_Parms, NULL );

	return AddFriendByName_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.AddFriend
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            NewFriend                      ( CPF_Parm )
// struct FString                 Message                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlinePlayerInterface::AddFriend ( unsigned char LocalUserNum, struct FUniqueNetId NewFriend, struct FString Message )
{
	static UFunction* pFnAddFriend = NULL;

	if ( ! pFnAddFriend )
		pFnAddFriend = (UFunction*) UObject::GObjObjects()->Data[ 26028 ];

	UOnlinePlayerInterface_execAddFriend_Parms AddFriend_Parms;
	AddFriend_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddFriend_Parms.NewFriend, &NewFriend, 0x8 );
	memcpy ( &AddFriend_Parms.Message, &Message, 0x10 );

	this->ProcessEvent ( pFnAddFriend, &AddFriend_Parms, NULL );

	return AddFriend_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetKeyboardInputResults
// [0x00420000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  bWasCanceled                   ( CPF_Parm | CPF_OutParm )

struct FString UOnlinePlayerInterface::GetKeyboardInputResults ( unsigned char* bWasCanceled )
{
	static UFunction* pFnGetKeyboardInputResults = NULL;

	if ( ! pFnGetKeyboardInputResults )
		pFnGetKeyboardInputResults = (UFunction*) UObject::GObjObjects()->Data[ 26025 ];

	UOnlinePlayerInterface_execGetKeyboardInputResults_Parms GetKeyboardInputResults_Parms;

	this->ProcessEvent ( pFnGetKeyboardInputResults, &GetKeyboardInputResults_Parms, NULL );

	if ( bWasCanceled )
		*bWasCanceled = GetKeyboardInputResults_Parms.bWasCanceled;

	return GetKeyboardInputResults_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearKeyboardInputDoneDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         InputDelegate                  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearKeyboardInputDoneDelegate ( struct FScriptDelegate InputDelegate )
{
	static UFunction* pFnClearKeyboardInputDoneDelegate = NULL;

	if ( ! pFnClearKeyboardInputDoneDelegate )
		pFnClearKeyboardInputDoneDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26023 ];

	UOnlinePlayerInterface_execClearKeyboardInputDoneDelegate_Parms ClearKeyboardInputDoneDelegate_Parms;
	memcpy ( &ClearKeyboardInputDoneDelegate_Parms.InputDelegate, &InputDelegate, 0x10 );

	this->ProcessEvent ( pFnClearKeyboardInputDoneDelegate, &ClearKeyboardInputDoneDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddKeyboardInputDoneDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         InputDelegate                  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddKeyboardInputDoneDelegate ( struct FScriptDelegate InputDelegate )
{
	static UFunction* pFnAddKeyboardInputDoneDelegate = NULL;

	if ( ! pFnAddKeyboardInputDoneDelegate )
		pFnAddKeyboardInputDoneDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26021 ];

	UOnlinePlayerInterface_execAddKeyboardInputDoneDelegate_Parms AddKeyboardInputDoneDelegate_Parms;
	memcpy ( &AddKeyboardInputDoneDelegate_Parms.InputDelegate, &InputDelegate, 0x10 );

	this->ProcessEvent ( pFnAddKeyboardInputDoneDelegate, &AddKeyboardInputDoneDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnKeyboardInputComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnKeyboardInputComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnKeyboardInputComplete = NULL;

	if ( ! pFnOnKeyboardInputComplete )
		pFnOnKeyboardInputComplete = (UFunction*) UObject::GObjObjects()->Data[ 26019 ];

	UOnlinePlayerInterface_execOnKeyboardInputComplete_Parms OnKeyboardInputComplete_Parms;
	OnKeyboardInputComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnKeyboardInputComplete, &OnKeyboardInputComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ShowKeyboardUI
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 TitleText                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 DescriptionText                ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bIsPassword                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldValidate                ( CPF_OptionalParm | CPF_Parm )
// struct FString                 DefaultText                    ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// int                            MaxResultLength                ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::ShowKeyboardUI ( unsigned char LocalUserNum, struct FString TitleText, struct FString DescriptionText, unsigned long bIsPassword, unsigned long bShouldValidate, struct FString DefaultText, int MaxResultLength )
{
	static UFunction* pFnShowKeyboardUI = NULL;

	if ( ! pFnShowKeyboardUI )
		pFnShowKeyboardUI = (UFunction*) UObject::GObjObjects()->Data[ 26010 ];

	UOnlinePlayerInterface_execShowKeyboardUI_Parms ShowKeyboardUI_Parms;
	ShowKeyboardUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowKeyboardUI_Parms.TitleText, &TitleText, 0x10 );
	memcpy ( &ShowKeyboardUI_Parms.DescriptionText, &DescriptionText, 0x10 );
	ShowKeyboardUI_Parms.bIsPassword = bIsPassword;
	ShowKeyboardUI_Parms.bShouldValidate = bShouldValidate;
	memcpy ( &ShowKeyboardUI_Parms.DefaultText, &DefaultText, 0x10 );
	ShowKeyboardUI_Parms.MaxResultLength = MaxResultLength;

	this->ProcessEvent ( pFnShowKeyboardUI, &ShowKeyboardUI_Parms, NULL );

	return ShowKeyboardUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.SetOnlineStatus
// [0x00420000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            StatusId                       ( CPF_Parm )
// struct TArray<struct FLocalizedStringSetting> LocalizedStringSettings        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct TArray<struct FSettingsProperty> Properties                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::SetOnlineStatus ( unsigned char LocalUserNum, int StatusId, struct TArray<struct FLocalizedStringSetting>* LocalizedStringSettings, struct TArray<struct FSettingsProperty>* Properties )
{
	static UFunction* pFnSetOnlineStatus = NULL;

	if ( ! pFnSetOnlineStatus )
		pFnSetOnlineStatus = (UFunction*) UObject::GObjObjects()->Data[ 26003 ];

	UOnlinePlayerInterface_execSetOnlineStatus_Parms SetOnlineStatus_Parms;
	SetOnlineStatus_Parms.LocalUserNum = LocalUserNum;
	SetOnlineStatus_Parms.StatusId = StatusId;

	this->ProcessEvent ( pFnSetOnlineStatus, &SetOnlineStatus_Parms, NULL );

	if ( LocalizedStringSettings )
		memcpy ( LocalizedStringSettings, &SetOnlineStatus_Parms.LocalizedStringSettings, 0x10 );

	if ( Properties )
		memcpy ( Properties, &SetOnlineStatus_Parms.Properties, 0x10 );
};

// Function Engine.OnlinePlayerInterface.GetFriendsList
// [0x00424000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            Count                          ( CPF_OptionalParm | CPF_Parm )
// int                            StartingAt                     ( CPF_OptionalParm | CPF_Parm )
// struct TArray<struct FOnlineFriend> Friends                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

unsigned char UOnlinePlayerInterface::GetFriendsList ( unsigned char LocalUserNum, int Count, int StartingAt, struct TArray<struct FOnlineFriend>* Friends )
{
	static UFunction* pFnGetFriendsList = NULL;

	if ( ! pFnGetFriendsList )
		pFnGetFriendsList = (UFunction*) UObject::GObjObjects()->Data[ 25996 ];

	UOnlinePlayerInterface_execGetFriendsList_Parms GetFriendsList_Parms;
	GetFriendsList_Parms.LocalUserNum = LocalUserNum;
	GetFriendsList_Parms.Count = Count;
	GetFriendsList_Parms.StartingAt = StartingAt;

	this->ProcessEvent ( pFnGetFriendsList, &GetFriendsList_Parms, NULL );

	if ( Friends )
		memcpy ( Friends, &GetFriendsList_Parms.Friends, 0x10 );

	return GetFriendsList_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearReadFriendsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadFriendsCompleteDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearReadFriendsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadFriendsCompleteDelegate )
{
	static UFunction* pFnClearReadFriendsCompleteDelegate = NULL;

	if ( ! pFnClearReadFriendsCompleteDelegate )
		pFnClearReadFriendsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25993 ];

	UOnlinePlayerInterface_execClearReadFriendsCompleteDelegate_Parms ClearReadFriendsCompleteDelegate_Parms;
	ClearReadFriendsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadFriendsCompleteDelegate_Parms.ReadFriendsCompleteDelegate, &ReadFriendsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadFriendsCompleteDelegate, &ClearReadFriendsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddReadFriendsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadFriendsCompleteDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddReadFriendsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadFriendsCompleteDelegate )
{
	static UFunction* pFnAddReadFriendsCompleteDelegate = NULL;

	if ( ! pFnAddReadFriendsCompleteDelegate )
		pFnAddReadFriendsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25990 ];

	UOnlinePlayerInterface_execAddReadFriendsCompleteDelegate_Parms AddReadFriendsCompleteDelegate_Parms;
	AddReadFriendsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadFriendsCompleteDelegate_Parms.ReadFriendsCompleteDelegate, &ReadFriendsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadFriendsCompleteDelegate, &AddReadFriendsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnReadFriendsComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnReadFriendsComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadFriendsComplete = NULL;

	if ( ! pFnOnReadFriendsComplete )
		pFnOnReadFriendsComplete = (UFunction*) UObject::GObjObjects()->Data[ 25988 ];

	UOnlinePlayerInterface_execOnReadFriendsComplete_Parms OnReadFriendsComplete_Parms;
	OnReadFriendsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadFriendsComplete, &OnReadFriendsComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ReadFriendsList
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            Count                          ( CPF_OptionalParm | CPF_Parm )
// int                            StartingAt                     ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::ReadFriendsList ( unsigned char LocalUserNum, int Count, int StartingAt )
{
	static UFunction* pFnReadFriendsList = NULL;

	if ( ! pFnReadFriendsList )
		pFnReadFriendsList = (UFunction*) UObject::GObjObjects()->Data[ 25983 ];

	UOnlinePlayerInterface_execReadFriendsList_Parms ReadFriendsList_Parms;
	ReadFriendsList_Parms.LocalUserNum = LocalUserNum;
	ReadFriendsList_Parms.Count = Count;
	ReadFriendsList_Parms.StartingAt = StartingAt;

	this->ProcessEvent ( pFnReadFriendsList, &ReadFriendsList_Parms, NULL );

	return ReadFriendsList_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearWritePlayerStorageCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         WritePlayerStorageCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearWritePlayerStorageCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WritePlayerStorageCompleteDelegate )
{
	static UFunction* pFnClearWritePlayerStorageCompleteDelegate = NULL;

	if ( ! pFnClearWritePlayerStorageCompleteDelegate )
		pFnClearWritePlayerStorageCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25980 ];

	UOnlinePlayerInterface_execClearWritePlayerStorageCompleteDelegate_Parms ClearWritePlayerStorageCompleteDelegate_Parms;
	ClearWritePlayerStorageCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearWritePlayerStorageCompleteDelegate_Parms.WritePlayerStorageCompleteDelegate, &WritePlayerStorageCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearWritePlayerStorageCompleteDelegate, &ClearWritePlayerStorageCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddWritePlayerStorageCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         WritePlayerStorageCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddWritePlayerStorageCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WritePlayerStorageCompleteDelegate )
{
	static UFunction* pFnAddWritePlayerStorageCompleteDelegate = NULL;

	if ( ! pFnAddWritePlayerStorageCompleteDelegate )
		pFnAddWritePlayerStorageCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25977 ];

	UOnlinePlayerInterface_execAddWritePlayerStorageCompleteDelegate_Parms AddWritePlayerStorageCompleteDelegate_Parms;
	AddWritePlayerStorageCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddWritePlayerStorageCompleteDelegate_Parms.WritePlayerStorageCompleteDelegate, &WritePlayerStorageCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddWritePlayerStorageCompleteDelegate, &AddWritePlayerStorageCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnWritePlayerStorageComplete
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnWritePlayerStorageComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnWritePlayerStorageComplete = NULL;

	if ( ! pFnOnWritePlayerStorageComplete )
		pFnOnWritePlayerStorageComplete = (UFunction*) UObject::GObjObjects()->Data[ 25974 ];

	UOnlinePlayerInterface_execOnWritePlayerStorageComplete_Parms OnWritePlayerStorageComplete_Parms;
	OnWritePlayerStorageComplete_Parms.LocalUserNum = LocalUserNum;
	OnWritePlayerStorageComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnWritePlayerStorageComplete, &OnWritePlayerStorageComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.WritePlayerStorage
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlinePlayerStorage*    PlayerStorage                  ( CPF_Parm )

bool UOnlinePlayerInterface::WritePlayerStorage ( unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage )
{
	static UFunction* pFnWritePlayerStorage = NULL;

	if ( ! pFnWritePlayerStorage )
		pFnWritePlayerStorage = (UFunction*) UObject::GObjObjects()->Data[ 25970 ];

	UOnlinePlayerInterface_execWritePlayerStorage_Parms WritePlayerStorage_Parms;
	WritePlayerStorage_Parms.LocalUserNum = LocalUserNum;
	WritePlayerStorage_Parms.PlayerStorage = PlayerStorage;

	this->ProcessEvent ( pFnWritePlayerStorage, &WritePlayerStorage_Parms, NULL );

	return WritePlayerStorage_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetPlayerStorage
// [0x00020000] 
// Parameters infos:
// class UOnlinePlayerStorage*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

class UOnlinePlayerStorage* UOnlinePlayerInterface::GetPlayerStorage ( unsigned char LocalUserNum )
{
	static UFunction* pFnGetPlayerStorage = NULL;

	if ( ! pFnGetPlayerStorage )
		pFnGetPlayerStorage = (UFunction*) UObject::GObjObjects()->Data[ 25967 ];

	UOnlinePlayerInterface_execGetPlayerStorage_Parms GetPlayerStorage_Parms;
	GetPlayerStorage_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetPlayerStorage, &GetPlayerStorage_Parms, NULL );

	return GetPlayerStorage_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearReadPlayerStorageForNetIdCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FUniqueNetId            NetId                          ( CPF_Parm )
// struct FScriptDelegate         ReadPlayerStorageForNetIdCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearReadPlayerStorageForNetIdCompleteDelegate ( struct FUniqueNetId NetId, struct FScriptDelegate ReadPlayerStorageForNetIdCompleteDelegate )
{
	static UFunction* pFnClearReadPlayerStorageForNetIdCompleteDelegate = NULL;

	if ( ! pFnClearReadPlayerStorageForNetIdCompleteDelegate )
		pFnClearReadPlayerStorageForNetIdCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25964 ];

	UOnlinePlayerInterface_execClearReadPlayerStorageForNetIdCompleteDelegate_Parms ClearReadPlayerStorageForNetIdCompleteDelegate_Parms;
	memcpy ( &ClearReadPlayerStorageForNetIdCompleteDelegate_Parms.NetId, &NetId, 0x8 );
	memcpy ( &ClearReadPlayerStorageForNetIdCompleteDelegate_Parms.ReadPlayerStorageForNetIdCompleteDelegate, &ReadPlayerStorageForNetIdCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadPlayerStorageForNetIdCompleteDelegate, &ClearReadPlayerStorageForNetIdCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddReadPlayerStorageForNetIdCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FUniqueNetId            NetId                          ( CPF_Parm )
// struct FScriptDelegate         ReadPlayerStorageForNetIdCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddReadPlayerStorageForNetIdCompleteDelegate ( struct FUniqueNetId NetId, struct FScriptDelegate ReadPlayerStorageForNetIdCompleteDelegate )
{
	static UFunction* pFnAddReadPlayerStorageForNetIdCompleteDelegate = NULL;

	if ( ! pFnAddReadPlayerStorageForNetIdCompleteDelegate )
		pFnAddReadPlayerStorageForNetIdCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25961 ];

	UOnlinePlayerInterface_execAddReadPlayerStorageForNetIdCompleteDelegate_Parms AddReadPlayerStorageForNetIdCompleteDelegate_Parms;
	memcpy ( &AddReadPlayerStorageForNetIdCompleteDelegate_Parms.NetId, &NetId, 0x8 );
	memcpy ( &AddReadPlayerStorageForNetIdCompleteDelegate_Parms.ReadPlayerStorageForNetIdCompleteDelegate, &ReadPlayerStorageForNetIdCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadPlayerStorageForNetIdCompleteDelegate, &AddReadPlayerStorageForNetIdCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnReadPlayerStorageForNetIdComplete
// [0x00120000] 
// Parameters infos:
// struct FUniqueNetId            NetId                          ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnReadPlayerStorageForNetIdComplete ( struct FUniqueNetId NetId, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadPlayerStorageForNetIdComplete = NULL;

	if ( ! pFnOnReadPlayerStorageForNetIdComplete )
		pFnOnReadPlayerStorageForNetIdComplete = (UFunction*) UObject::GObjObjects()->Data[ 25958 ];

	UOnlinePlayerInterface_execOnReadPlayerStorageForNetIdComplete_Parms OnReadPlayerStorageForNetIdComplete_Parms;
	memcpy ( &OnReadPlayerStorageForNetIdComplete_Parms.NetId, &NetId, 0x8 );
	OnReadPlayerStorageForNetIdComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadPlayerStorageForNetIdComplete, &OnReadPlayerStorageForNetIdComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ReadPlayerStorageForNetId
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            NetId                          ( CPF_Parm )
// class UOnlinePlayerStorage*    PlayerStorage                  ( CPF_Parm )

bool UOnlinePlayerInterface::ReadPlayerStorageForNetId ( struct FUniqueNetId NetId, class UOnlinePlayerStorage* PlayerStorage )
{
	static UFunction* pFnReadPlayerStorageForNetId = NULL;

	if ( ! pFnReadPlayerStorageForNetId )
		pFnReadPlayerStorageForNetId = (UFunction*) UObject::GObjObjects()->Data[ 25954 ];

	UOnlinePlayerInterface_execReadPlayerStorageForNetId_Parms ReadPlayerStorageForNetId_Parms;
	memcpy ( &ReadPlayerStorageForNetId_Parms.NetId, &NetId, 0x8 );
	ReadPlayerStorageForNetId_Parms.PlayerStorage = PlayerStorage;

	this->ProcessEvent ( pFnReadPlayerStorageForNetId, &ReadPlayerStorageForNetId_Parms, NULL );

	return ReadPlayerStorageForNetId_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearReadPlayerStorageCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadPlayerStorageCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearReadPlayerStorageCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadPlayerStorageCompleteDelegate )
{
	static UFunction* pFnClearReadPlayerStorageCompleteDelegate = NULL;

	if ( ! pFnClearReadPlayerStorageCompleteDelegate )
		pFnClearReadPlayerStorageCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25951 ];

	UOnlinePlayerInterface_execClearReadPlayerStorageCompleteDelegate_Parms ClearReadPlayerStorageCompleteDelegate_Parms;
	ClearReadPlayerStorageCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadPlayerStorageCompleteDelegate_Parms.ReadPlayerStorageCompleteDelegate, &ReadPlayerStorageCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadPlayerStorageCompleteDelegate, &ClearReadPlayerStorageCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddReadPlayerStorageCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadPlayerStorageCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddReadPlayerStorageCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadPlayerStorageCompleteDelegate )
{
	static UFunction* pFnAddReadPlayerStorageCompleteDelegate = NULL;

	if ( ! pFnAddReadPlayerStorageCompleteDelegate )
		pFnAddReadPlayerStorageCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25948 ];

	UOnlinePlayerInterface_execAddReadPlayerStorageCompleteDelegate_Parms AddReadPlayerStorageCompleteDelegate_Parms;
	AddReadPlayerStorageCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadPlayerStorageCompleteDelegate_Parms.ReadPlayerStorageCompleteDelegate, &ReadPlayerStorageCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadPlayerStorageCompleteDelegate, &AddReadPlayerStorageCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnReadPlayerStorageComplete
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnReadPlayerStorageComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadPlayerStorageComplete = NULL;

	if ( ! pFnOnReadPlayerStorageComplete )
		pFnOnReadPlayerStorageComplete = (UFunction*) UObject::GObjObjects()->Data[ 25945 ];

	UOnlinePlayerInterface_execOnReadPlayerStorageComplete_Parms OnReadPlayerStorageComplete_Parms;
	OnReadPlayerStorageComplete_Parms.LocalUserNum = LocalUserNum;
	OnReadPlayerStorageComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadPlayerStorageComplete, &OnReadPlayerStorageComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ReadPlayerStorage
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlinePlayerStorage*    PlayerStorage                  ( CPF_Parm )

bool UOnlinePlayerInterface::ReadPlayerStorage ( unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage )
{
	static UFunction* pFnReadPlayerStorage = NULL;

	if ( ! pFnReadPlayerStorage )
		pFnReadPlayerStorage = (UFunction*) UObject::GObjObjects()->Data[ 25941 ];

	UOnlinePlayerInterface_execReadPlayerStorage_Parms ReadPlayerStorage_Parms;
	ReadPlayerStorage_Parms.LocalUserNum = LocalUserNum;
	ReadPlayerStorage_Parms.PlayerStorage = PlayerStorage;

	this->ProcessEvent ( pFnReadPlayerStorage, &ReadPlayerStorage_Parms, NULL );

	return ReadPlayerStorage_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearWriteProfileSettingsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         WriteProfileSettingsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearWriteProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WriteProfileSettingsCompleteDelegate )
{
	static UFunction* pFnClearWriteProfileSettingsCompleteDelegate = NULL;

	if ( ! pFnClearWriteProfileSettingsCompleteDelegate )
		pFnClearWriteProfileSettingsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25938 ];

	UOnlinePlayerInterface_execClearWriteProfileSettingsCompleteDelegate_Parms ClearWriteProfileSettingsCompleteDelegate_Parms;
	ClearWriteProfileSettingsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearWriteProfileSettingsCompleteDelegate_Parms.WriteProfileSettingsCompleteDelegate, &WriteProfileSettingsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearWriteProfileSettingsCompleteDelegate, &ClearWriteProfileSettingsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddWriteProfileSettingsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         WriteProfileSettingsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddWriteProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WriteProfileSettingsCompleteDelegate )
{
	static UFunction* pFnAddWriteProfileSettingsCompleteDelegate = NULL;

	if ( ! pFnAddWriteProfileSettingsCompleteDelegate )
		pFnAddWriteProfileSettingsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25935 ];

	UOnlinePlayerInterface_execAddWriteProfileSettingsCompleteDelegate_Parms AddWriteProfileSettingsCompleteDelegate_Parms;
	AddWriteProfileSettingsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddWriteProfileSettingsCompleteDelegate_Parms.WriteProfileSettingsCompleteDelegate, &WriteProfileSettingsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddWriteProfileSettingsCompleteDelegate, &AddWriteProfileSettingsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnWriteProfileSettingsComplete
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnWriteProfileSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnWriteProfileSettingsComplete = NULL;

	if ( ! pFnOnWriteProfileSettingsComplete )
		pFnOnWriteProfileSettingsComplete = (UFunction*) UObject::GObjObjects()->Data[ 25932 ];

	UOnlinePlayerInterface_execOnWriteProfileSettingsComplete_Parms OnWriteProfileSettingsComplete_Parms;
	OnWriteProfileSettingsComplete_Parms.LocalUserNum = LocalUserNum;
	OnWriteProfileSettingsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnWriteProfileSettingsComplete, &OnWriteProfileSettingsComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.WriteProfileSettings
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlineProfileSettings*  ProfileSettings                ( CPF_Parm )
// unsigned long                  bIsTrilogyProfile              ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::WriteProfileSettings ( unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings, unsigned long bIsTrilogyProfile )
{
	static UFunction* pFnWriteProfileSettings = NULL;

	if ( ! pFnWriteProfileSettings )
		pFnWriteProfileSettings = (UFunction*) UObject::GObjObjects()->Data[ 25927 ];

	UOnlinePlayerInterface_execWriteProfileSettings_Parms WriteProfileSettings_Parms;
	WriteProfileSettings_Parms.LocalUserNum = LocalUserNum;
	WriteProfileSettings_Parms.ProfileSettings = ProfileSettings;
	WriteProfileSettings_Parms.bIsTrilogyProfile = bIsTrilogyProfile;

	this->ProcessEvent ( pFnWriteProfileSettings, &WriteProfileSettings_Parms, NULL );

	return WriteProfileSettings_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetProfileSettings
// [0x00020000] 
// Parameters infos:
// class UOnlineProfileSettings*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

class UOnlineProfileSettings* UOnlinePlayerInterface::GetProfileSettings ( unsigned char LocalUserNum )
{
	static UFunction* pFnGetProfileSettings = NULL;

	if ( ! pFnGetProfileSettings )
		pFnGetProfileSettings = (UFunction*) UObject::GObjObjects()->Data[ 25924 ];

	UOnlinePlayerInterface_execGetProfileSettings_Parms GetProfileSettings_Parms;
	GetProfileSettings_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetProfileSettings, &GetProfileSettings_Parms, NULL );

	return GetProfileSettings_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearReadProfileSettingsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadProfileSettingsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearReadProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate )
{
	static UFunction* pFnClearReadProfileSettingsCompleteDelegate = NULL;

	if ( ! pFnClearReadProfileSettingsCompleteDelegate )
		pFnClearReadProfileSettingsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25921 ];

	UOnlinePlayerInterface_execClearReadProfileSettingsCompleteDelegate_Parms ClearReadProfileSettingsCompleteDelegate_Parms;
	ClearReadProfileSettingsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadProfileSettingsCompleteDelegate_Parms.ReadProfileSettingsCompleteDelegate, &ReadProfileSettingsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadProfileSettingsCompleteDelegate, &ClearReadProfileSettingsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddReadProfileSettingsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadProfileSettingsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddReadProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate )
{
	static UFunction* pFnAddReadProfileSettingsCompleteDelegate = NULL;

	if ( ! pFnAddReadProfileSettingsCompleteDelegate )
		pFnAddReadProfileSettingsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25918 ];

	UOnlinePlayerInterface_execAddReadProfileSettingsCompleteDelegate_Parms AddReadProfileSettingsCompleteDelegate_Parms;
	AddReadProfileSettingsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadProfileSettingsCompleteDelegate_Parms.ReadProfileSettingsCompleteDelegate, &ReadProfileSettingsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadProfileSettingsCompleteDelegate, &AddReadProfileSettingsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnReadProfileSettingsComplete
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnReadProfileSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadProfileSettingsComplete = NULL;

	if ( ! pFnOnReadProfileSettingsComplete )
		pFnOnReadProfileSettingsComplete = (UFunction*) UObject::GObjObjects()->Data[ 25915 ];

	UOnlinePlayerInterface_execOnReadProfileSettingsComplete_Parms OnReadProfileSettingsComplete_Parms;
	OnReadProfileSettingsComplete_Parms.LocalUserNum = LocalUserNum;
	OnReadProfileSettingsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadProfileSettingsComplete, &OnReadProfileSettingsComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ReadProfileSettings
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlineProfileSettings*  ProfileSettings                ( CPF_Parm )
// unsigned long                  bIsTrilogyProfile              ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::ReadProfileSettings ( unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings, unsigned long bIsTrilogyProfile )
{
	static UFunction* pFnReadProfileSettings = NULL;

	if ( ! pFnReadProfileSettings )
		pFnReadProfileSettings = (UFunction*) UObject::GObjObjects()->Data[ 25910 ];

	UOnlinePlayerInterface_execReadProfileSettings_Parms ReadProfileSettings_Parms;
	ReadProfileSettings_Parms.LocalUserNum = LocalUserNum;
	ReadProfileSettings_Parms.ProfileSettings = ProfileSettings;
	ReadProfileSettings_Parms.bIsTrilogyProfile = bIsTrilogyProfile;

	this->ProcessEvent ( pFnReadProfileSettings, &ReadProfileSettings_Parms, NULL );

	return ReadProfileSettings_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearFriendsChangeDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         FriendsDelegate                ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearFriendsChangeDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendsDelegate )
{
	static UFunction* pFnClearFriendsChangeDelegate = NULL;

	if ( ! pFnClearFriendsChangeDelegate )
		pFnClearFriendsChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25907 ];

	UOnlinePlayerInterface_execClearFriendsChangeDelegate_Parms ClearFriendsChangeDelegate_Parms;
	ClearFriendsChangeDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearFriendsChangeDelegate_Parms.FriendsDelegate, &FriendsDelegate, 0x10 );

	this->ProcessEvent ( pFnClearFriendsChangeDelegate, &ClearFriendsChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddFriendsChangeDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         FriendsDelegate                ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddFriendsChangeDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendsDelegate )
{
	static UFunction* pFnAddFriendsChangeDelegate = NULL;

	if ( ! pFnAddFriendsChangeDelegate )
		pFnAddFriendsChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25904 ];

	UOnlinePlayerInterface_execAddFriendsChangeDelegate_Parms AddFriendsChangeDelegate_Parms;
	AddFriendsChangeDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddFriendsChangeDelegate_Parms.FriendsDelegate, &FriendsDelegate, 0x10 );

	this->ProcessEvent ( pFnAddFriendsChangeDelegate, &AddFriendsChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ClearMutingChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         MutingDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearMutingChangeDelegate ( struct FScriptDelegate MutingDelegate )
{
	static UFunction* pFnClearMutingChangeDelegate = NULL;

	if ( ! pFnClearMutingChangeDelegate )
		pFnClearMutingChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25902 ];

	UOnlinePlayerInterface_execClearMutingChangeDelegate_Parms ClearMutingChangeDelegate_Parms;
	memcpy ( &ClearMutingChangeDelegate_Parms.MutingDelegate, &MutingDelegate, 0x10 );

	this->ProcessEvent ( pFnClearMutingChangeDelegate, &ClearMutingChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddMutingChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         MutingDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddMutingChangeDelegate ( struct FScriptDelegate MutingDelegate )
{
	static UFunction* pFnAddMutingChangeDelegate = NULL;

	if ( ! pFnAddMutingChangeDelegate )
		pFnAddMutingChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25900 ];

	UOnlinePlayerInterface_execAddMutingChangeDelegate_Parms AddMutingChangeDelegate_Parms;
	memcpy ( &AddMutingChangeDelegate_Parms.MutingDelegate, &MutingDelegate, 0x10 );

	this->ProcessEvent ( pFnAddMutingChangeDelegate, &AddMutingChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ClearLoginCancelledDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CancelledDelegate              ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearLoginCancelledDelegate ( struct FScriptDelegate CancelledDelegate )
{
	static UFunction* pFnClearLoginCancelledDelegate = NULL;

	if ( ! pFnClearLoginCancelledDelegate )
		pFnClearLoginCancelledDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25898 ];

	UOnlinePlayerInterface_execClearLoginCancelledDelegate_Parms ClearLoginCancelledDelegate_Parms;
	memcpy ( &ClearLoginCancelledDelegate_Parms.CancelledDelegate, &CancelledDelegate, 0x10 );

	this->ProcessEvent ( pFnClearLoginCancelledDelegate, &ClearLoginCancelledDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddLoginCancelledDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CancelledDelegate              ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddLoginCancelledDelegate ( struct FScriptDelegate CancelledDelegate )
{
	static UFunction* pFnAddLoginCancelledDelegate = NULL;

	if ( ! pFnAddLoginCancelledDelegate )
		pFnAddLoginCancelledDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25896 ];

	UOnlinePlayerInterface_execAddLoginCancelledDelegate_Parms AddLoginCancelledDelegate_Parms;
	memcpy ( &AddLoginCancelledDelegate_Parms.CancelledDelegate, &CancelledDelegate, 0x10 );

	this->ProcessEvent ( pFnAddLoginCancelledDelegate, &AddLoginCancelledDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ClearLoginStatusChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LoginStatusDelegate            ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UOnlinePlayerInterface::ClearLoginStatusChangeDelegate ( struct FScriptDelegate LoginStatusDelegate, unsigned char LocalUserNum )
{
	static UFunction* pFnClearLoginStatusChangeDelegate = NULL;

	if ( ! pFnClearLoginStatusChangeDelegate )
		pFnClearLoginStatusChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25893 ];

	UOnlinePlayerInterface_execClearLoginStatusChangeDelegate_Parms ClearLoginStatusChangeDelegate_Parms;
	memcpy ( &ClearLoginStatusChangeDelegate_Parms.LoginStatusDelegate, &LoginStatusDelegate, 0x10 );
	ClearLoginStatusChangeDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnClearLoginStatusChangeDelegate, &ClearLoginStatusChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddLoginStatusChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LoginStatusDelegate            ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UOnlinePlayerInterface::AddLoginStatusChangeDelegate ( struct FScriptDelegate LoginStatusDelegate, unsigned char LocalUserNum )
{
	static UFunction* pFnAddLoginStatusChangeDelegate = NULL;

	if ( ! pFnAddLoginStatusChangeDelegate )
		pFnAddLoginStatusChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25890 ];

	UOnlinePlayerInterface_execAddLoginStatusChangeDelegate_Parms AddLoginStatusChangeDelegate_Parms;
	memcpy ( &AddLoginStatusChangeDelegate_Parms.LoginStatusDelegate, &LoginStatusDelegate, 0x10 );
	AddLoginStatusChangeDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnAddLoginStatusChangeDelegate, &AddLoginStatusChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnLoginStatusChange
// [0x00120000] 
// Parameters infos:
// unsigned char                  NewStatus                      ( CPF_Parm )
// struct FUniqueNetId            NewId                          ( CPF_Parm )

void UOnlinePlayerInterface::OnLoginStatusChange ( unsigned char NewStatus, struct FUniqueNetId NewId )
{
	static UFunction* pFnOnLoginStatusChange = NULL;

	if ( ! pFnOnLoginStatusChange )
		pFnOnLoginStatusChange = (UFunction*) UObject::GObjObjects()->Data[ 25887 ];

	UOnlinePlayerInterface_execOnLoginStatusChange_Parms OnLoginStatusChange_Parms;
	OnLoginStatusChange_Parms.NewStatus = NewStatus;
	memcpy ( &OnLoginStatusChange_Parms.NewId, &NewId, 0x8 );

	this->ProcessEvent ( pFnOnLoginStatusChange, &OnLoginStatusChange_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ClearLoginChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LoginDelegate                  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearLoginChangeDelegate ( struct FScriptDelegate LoginDelegate )
{
	static UFunction* pFnClearLoginChangeDelegate = NULL;

	if ( ! pFnClearLoginChangeDelegate )
		pFnClearLoginChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25885 ];

	UOnlinePlayerInterface_execClearLoginChangeDelegate_Parms ClearLoginChangeDelegate_Parms;
	memcpy ( &ClearLoginChangeDelegate_Parms.LoginDelegate, &LoginDelegate, 0x10 );

	this->ProcessEvent ( pFnClearLoginChangeDelegate, &ClearLoginChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddLoginChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LoginDelegate                  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddLoginChangeDelegate ( struct FScriptDelegate LoginDelegate )
{
	static UFunction* pFnAddLoginChangeDelegate = NULL;

	if ( ! pFnAddLoginChangeDelegate )
		pFnAddLoginChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25883 ];

	UOnlinePlayerInterface_execAddLoginChangeDelegate_Parms AddLoginChangeDelegate_Parms;
	memcpy ( &AddLoginChangeDelegate_Parms.LoginDelegate, &LoginDelegate, 0x10 );

	this->ProcessEvent ( pFnAddLoginChangeDelegate, &AddLoginChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ShowFriendsUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterface::ShowFriendsUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowFriendsUI = NULL;

	if ( ! pFnShowFriendsUI )
		pFnShowFriendsUI = (UFunction*) UObject::GObjObjects()->Data[ 25880 ];

	UOnlinePlayerInterface_execShowFriendsUI_Parms ShowFriendsUI_Parms;
	ShowFriendsUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowFriendsUI, &ShowFriendsUI_Parms, NULL );

	return ShowFriendsUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.IsMuted
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlinePlayerInterface::IsMuted ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnIsMuted = NULL;

	if ( ! pFnIsMuted )
		pFnIsMuted = (UFunction*) UObject::GObjObjects()->Data[ 25876 ];

	UOnlinePlayerInterface_execIsMuted_Parms IsMuted_Parms;
	IsMuted_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &IsMuted_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnIsMuted, &IsMuted_Parms, NULL );

	return IsMuted_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.AreAnyFriends
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct TArray<struct FFriendsQuery> Query                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePlayerInterface::AreAnyFriends ( unsigned char LocalUserNum, struct TArray<struct FFriendsQuery>* Query )
{
	static UFunction* pFnAreAnyFriends = NULL;

	if ( ! pFnAreAnyFriends )
		pFnAreAnyFriends = (UFunction*) UObject::GObjObjects()->Data[ 25871 ];

	UOnlinePlayerInterface_execAreAnyFriends_Parms AreAnyFriends_Parms;
	AreAnyFriends_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnAreAnyFriends, &AreAnyFriends_Parms, NULL );

	if ( Query )
		memcpy ( Query, &AreAnyFriends_Parms.Query, 0x10 );

	return AreAnyFriends_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.IsFriend
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlinePlayerInterface::IsFriend ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnIsFriend = NULL;

	if ( ! pFnIsFriend )
		pFnIsFriend = (UFunction*) UObject::GObjObjects()->Data[ 25867 ];

	UOnlinePlayerInterface_execIsFriend_Parms IsFriend_Parms;
	IsFriend_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &IsFriend_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnIsFriend, &IsFriend_Parms, NULL );

	return IsFriend_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanShowPresenceInformation
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

unsigned char UOnlinePlayerInterface::CanShowPresenceInformation ( unsigned char LocalUserNum )
{
	static UFunction* pFnCanShowPresenceInformation = NULL;

	if ( ! pFnCanShowPresenceInformation )
		pFnCanShowPresenceInformation = (UFunction*) UObject::GObjObjects()->Data[ 25864 ];

	UOnlinePlayerInterface_execCanShowPresenceInformation_Parms CanShowPresenceInformation_Parms;
	CanShowPresenceInformation_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnCanShowPresenceInformation, &CanShowPresenceInformation_Parms, NULL );

	return CanShowPresenceInformation_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanViewPlayerProfiles
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

unsigned char UOnlinePlayerInterface::CanViewPlayerProfiles ( unsigned char LocalUserNum )
{
	static UFunction* pFnCanViewPlayerProfiles = NULL;

	if ( ! pFnCanViewPlayerProfiles )
		pFnCanViewPlayerProfiles = (UFunction*) UObject::GObjObjects()->Data[ 25861 ];

	UOnlinePlayerInterface_execCanViewPlayerProfiles_Parms CanViewPlayerProfiles_Parms;
	CanViewPlayerProfiles_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnCanViewPlayerProfiles, &CanViewPlayerProfiles_Parms, NULL );

	return CanViewPlayerProfiles_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanPurchaseContent
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

unsigned char UOnlinePlayerInterface::CanPurchaseContent ( unsigned char LocalUserNum )
{
	static UFunction* pFnCanPurchaseContent = NULL;

	if ( ! pFnCanPurchaseContent )
		pFnCanPurchaseContent = (UFunction*) UObject::GObjObjects()->Data[ 25858 ];

	UOnlinePlayerInterface_execCanPurchaseContent_Parms CanPurchaseContent_Parms;
	CanPurchaseContent_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnCanPurchaseContent, &CanPurchaseContent_Parms, NULL );

	return CanPurchaseContent_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanDownloadUserContent
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

unsigned char UOnlinePlayerInterface::CanDownloadUserContent ( unsigned char LocalUserNum )
{
	static UFunction* pFnCanDownloadUserContent = NULL;

	if ( ! pFnCanDownloadUserContent )
		pFnCanDownloadUserContent = (UFunction*) UObject::GObjObjects()->Data[ 11741 ];

	UOnlinePlayerInterface_execCanDownloadUserContent_Parms CanDownloadUserContent_Parms;
	CanDownloadUserContent_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnCanDownloadUserContent, &CanDownloadUserContent_Parms, NULL );

	return CanDownloadUserContent_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanCommunicate
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

unsigned char UOnlinePlayerInterface::CanCommunicate ( unsigned char LocalUserNum )
{
	static UFunction* pFnCanCommunicate = NULL;

	if ( ! pFnCanCommunicate )
		pFnCanCommunicate = (UFunction*) UObject::GObjObjects()->Data[ 25854 ];

	UOnlinePlayerInterface_execCanCommunicate_Parms CanCommunicate_Parms;
	CanCommunicate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnCanCommunicate, &CanCommunicate_Parms, NULL );

	return CanCommunicate_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanPlayOnline
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

unsigned char UOnlinePlayerInterface::CanPlayOnline ( unsigned char LocalUserNum )
{
	static UFunction* pFnCanPlayOnline = NULL;

	if ( ! pFnCanPlayOnline )
		pFnCanPlayOnline = (UFunction*) UObject::GObjObjects()->Data[ 11606 ];

	UOnlinePlayerInterface_execCanPlayOnline_Parms CanPlayOnline_Parms;
	CanPlayOnline_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnCanPlayOnline, &CanPlayOnline_Parms, NULL );

	return CanPlayOnline_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.IsLocalLogin
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterface::IsLocalLogin ( unsigned char LocalUserNum )
{
	static UFunction* pFnIsLocalLogin = NULL;

	if ( ! pFnIsLocalLogin )
		pFnIsLocalLogin = (UFunction*) UObject::GObjObjects()->Data[ 25850 ];

	UOnlinePlayerInterface_execIsLocalLogin_Parms IsLocalLogin_Parms;
	IsLocalLogin_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnIsLocalLogin, &IsLocalLogin_Parms, NULL );

	return IsLocalLogin_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.IsGuestLogin
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterface::IsGuestLogin ( unsigned char LocalUserNum )
{
	static UFunction* pFnIsGuestLogin = NULL;

	if ( ! pFnIsGuestLogin )
		pFnIsGuestLogin = (UFunction*) UObject::GObjObjects()->Data[ 25847 ];

	UOnlinePlayerInterface_execIsGuestLogin_Parms IsGuestLogin_Parms;
	IsGuestLogin_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnIsGuestLogin, &IsGuestLogin_Parms, NULL );

	return IsGuestLogin_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetPlayerNickname
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

struct FString UOnlinePlayerInterface::GetPlayerNickname ( unsigned char LocalUserNum )
{
	static UFunction* pFnGetPlayerNickname = NULL;

	if ( ! pFnGetPlayerNickname )
		pFnGetPlayerNickname = (UFunction*) UObject::GObjObjects()->Data[ 10786 ];

	UOnlinePlayerInterface_execGetPlayerNickname_Parms GetPlayerNickname_Parms;
	GetPlayerNickname_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetPlayerNickname, &GetPlayerNickname_Parms, NULL );

	return GetPlayerNickname_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetUniquePlayerId
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterface::GetUniquePlayerId ( unsigned char LocalUserNum, struct FUniqueNetId* PlayerID )
{
	static UFunction* pFnGetUniquePlayerId = NULL;

	if ( ! pFnGetUniquePlayerId )
		pFnGetUniquePlayerId = (UFunction*) UObject::GObjObjects()->Data[ 10140 ];

	UOnlinePlayerInterface_execGetUniquePlayerId_Parms GetUniquePlayerId_Parms;
	GetUniquePlayerId_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetUniquePlayerId, &GetUniquePlayerId_Parms, NULL );

	if ( PlayerID )
		memcpy ( PlayerID, &GetUniquePlayerId_Parms.PlayerID, 0x8 );

	return GetUniquePlayerId_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetLoginStatus
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

unsigned char UOnlinePlayerInterface::GetLoginStatus ( unsigned char LocalUserNum )
{
	static UFunction* pFnGetLoginStatus = NULL;

	if ( ! pFnGetLoginStatus )
		pFnGetLoginStatus = (UFunction*) UObject::GObjObjects()->Data[ 10782 ];

	UOnlinePlayerInterface_execGetLoginStatus_Parms GetLoginStatus_Parms;
	GetLoginStatus_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetLoginStatus, &GetLoginStatus_Parms, NULL );

	return GetLoginStatus_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearLogoutCompletedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         LogoutDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearLogoutCompletedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LogoutDelegate )
{
	static UFunction* pFnClearLogoutCompletedDelegate = NULL;

	if ( ! pFnClearLogoutCompletedDelegate )
		pFnClearLogoutCompletedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25840 ];

	UOnlinePlayerInterface_execClearLogoutCompletedDelegate_Parms ClearLogoutCompletedDelegate_Parms;
	ClearLogoutCompletedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearLogoutCompletedDelegate_Parms.LogoutDelegate, &LogoutDelegate, 0x10 );

	this->ProcessEvent ( pFnClearLogoutCompletedDelegate, &ClearLogoutCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddLogoutCompletedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         LogoutDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddLogoutCompletedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LogoutDelegate )
{
	static UFunction* pFnAddLogoutCompletedDelegate = NULL;

	if ( ! pFnAddLogoutCompletedDelegate )
		pFnAddLogoutCompletedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25837 ];

	UOnlinePlayerInterface_execAddLogoutCompletedDelegate_Parms AddLogoutCompletedDelegate_Parms;
	AddLogoutCompletedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddLogoutCompletedDelegate_Parms.LogoutDelegate, &LogoutDelegate, 0x10 );

	this->ProcessEvent ( pFnAddLogoutCompletedDelegate, &AddLogoutCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnLogoutCompleted
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnLogoutCompleted ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnLogoutCompleted = NULL;

	if ( ! pFnOnLogoutCompleted )
		pFnOnLogoutCompleted = (UFunction*) UObject::GObjObjects()->Data[ 25835 ];

	UOnlinePlayerInterface_execOnLogoutCompleted_Parms OnLogoutCompleted_Parms;
	OnLogoutCompleted_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnLogoutCompleted, &OnLogoutCompleted_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.Logout
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterface::Logout ( unsigned char LocalUserNum )
{
	static UFunction* pFnLogout = NULL;

	if ( ! pFnLogout )
		pFnLogout = (UFunction*) UObject::GObjObjects()->Data[ 25832 ];

	UOnlinePlayerInterface_execLogout_Parms Logout_Parms;
	Logout_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnLogout, &Logout_Parms, NULL );

	return Logout_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearLoginFailedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         LoginDelegate                  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearLoginFailedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LoginDelegate )
{
	static UFunction* pFnClearLoginFailedDelegate = NULL;

	if ( ! pFnClearLoginFailedDelegate )
		pFnClearLoginFailedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25829 ];

	UOnlinePlayerInterface_execClearLoginFailedDelegate_Parms ClearLoginFailedDelegate_Parms;
	ClearLoginFailedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearLoginFailedDelegate_Parms.LoginDelegate, &LoginDelegate, 0x10 );

	this->ProcessEvent ( pFnClearLoginFailedDelegate, &ClearLoginFailedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddLoginFailedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         LoginDelegate                  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddLoginFailedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LoginDelegate )
{
	static UFunction* pFnAddLoginFailedDelegate = NULL;

	if ( ! pFnAddLoginFailedDelegate )
		pFnAddLoginFailedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25826 ];

	UOnlinePlayerInterface_execAddLoginFailedDelegate_Parms AddLoginFailedDelegate_Parms;
	AddLoginFailedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddLoginFailedDelegate_Parms.LoginDelegate, &LoginDelegate, 0x10 );

	this->ProcessEvent ( pFnAddLoginFailedDelegate, &AddLoginFailedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnLoginFailed
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  ErrorCode                      ( CPF_Parm )

void UOnlinePlayerInterface::OnLoginFailed ( unsigned char LocalUserNum, unsigned char ErrorCode )
{
	static UFunction* pFnOnLoginFailed = NULL;

	if ( ! pFnOnLoginFailed )
		pFnOnLoginFailed = (UFunction*) UObject::GObjObjects()->Data[ 25823 ];

	UOnlinePlayerInterface_execOnLoginFailed_Parms OnLoginFailed_Parms;
	OnLoginFailed_Parms.LocalUserNum = LocalUserNum;
	OnLoginFailed_Parms.ErrorCode = ErrorCode;

	this->ProcessEvent ( pFnOnLoginFailed, &OnLoginFailed_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AutoLogin
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlinePlayerInterface::AutoLogin ( )
{
	static UFunction* pFnAutoLogin = NULL;

	if ( ! pFnAutoLogin )
		pFnAutoLogin = (UFunction*) UObject::GObjObjects()->Data[ 21069 ];

	UOnlinePlayerInterface_execAutoLogin_Parms AutoLogin_Parms;

	this->ProcessEvent ( pFnAutoLogin, &AutoLogin_Parms, NULL );

	return AutoLogin_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.Login
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 LoginName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bWantsLocalOnly                ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::Login ( unsigned char LocalUserNum, struct FString LoginName, struct FString Password, unsigned long bWantsLocalOnly )
{
	static UFunction* pFnLogin = NULL;

	if ( ! pFnLogin )
		pFnLogin = (UFunction*) UObject::GObjObjects()->Data[ 25817 ];

	UOnlinePlayerInterface_execLogin_Parms Login_Parms;
	Login_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &Login_Parms.LoginName, &LoginName, 0x10 );
	memcpy ( &Login_Parms.Password, &Password, 0x10 );
	Login_Parms.bWantsLocalOnly = bWantsLocalOnly;

	this->ProcessEvent ( pFnLogin, &Login_Parms, NULL );

	return Login_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ShowLoginUI
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bShowOnlineOnly                ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::ShowLoginUI ( unsigned long bShowOnlineOnly )
{
	static UFunction* pFnShowLoginUI = NULL;

	if ( ! pFnShowLoginUI )
		pFnShowLoginUI = (UFunction*) UObject::GObjObjects()->Data[ 25814 ];

	UOnlinePlayerInterface_execShowLoginUI_Parms ShowLoginUI_Parms;
	ShowLoginUI_Parms.bShowOnlineOnly = bShowOnlineOnly;

	this->ProcessEvent ( pFnShowLoginUI, &ShowLoginUI_Parms, NULL );

	return ShowLoginUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.OnFriendsChange
// [0x00120000] 
// Parameters infos:

void UOnlinePlayerInterface::OnFriendsChange ( )
{
	static UFunction* pFnOnFriendsChange = NULL;

	if ( ! pFnOnFriendsChange )
		pFnOnFriendsChange = (UFunction*) UObject::GObjObjects()->Data[ 25813 ];

	UOnlinePlayerInterface_execOnFriendsChange_Parms OnFriendsChange_Parms;

	this->ProcessEvent ( pFnOnFriendsChange, &OnFriendsChange_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnMutingChange
// [0x00120000] 
// Parameters infos:

void UOnlinePlayerInterface::OnMutingChange ( )
{
	static UFunction* pFnOnMutingChange = NULL;

	if ( ! pFnOnMutingChange )
		pFnOnMutingChange = (UFunction*) UObject::GObjObjects()->Data[ 25812 ];

	UOnlinePlayerInterface_execOnMutingChange_Parms OnMutingChange_Parms;

	this->ProcessEvent ( pFnOnMutingChange, &OnMutingChange_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnLoginCancelled
// [0x00120000] 
// Parameters infos:

void UOnlinePlayerInterface::OnLoginCancelled ( )
{
	static UFunction* pFnOnLoginCancelled = NULL;

	if ( ! pFnOnLoginCancelled )
		pFnOnLoginCancelled = (UFunction*) UObject::GObjObjects()->Data[ 25811 ];

	UOnlinePlayerInterface_execOnLoginCancelled_Parms OnLoginCancelled_Parms;

	this->ProcessEvent ( pFnOnLoginCancelled, &OnLoginCancelled_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnLoginChange
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UOnlinePlayerInterface::OnLoginChange ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 25809 ];

	UOnlinePlayerInterface_execOnLoginChange_Parms OnLoginChange_Parms;
	OnLoginChange_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.ShowCustomPlayersUI
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 Title                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Description                    ( CPF_Parm | CPF_NeedCtorLink )
// struct TArray<struct FUniqueNetId> Players                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePlayerInterfaceEx::ShowCustomPlayersUI ( unsigned char LocalUserNum, struct FString Title, struct FString Description, struct TArray<struct FUniqueNetId>* Players )
{
	static UFunction* pFnShowCustomPlayersUI = NULL;

	if ( ! pFnShowCustomPlayersUI )
		pFnShowCustomPlayersUI = (UFunction*) UObject::GObjObjects()->Data[ 26244 ];

	UOnlinePlayerInterfaceEx_execShowCustomPlayersUI_Parms ShowCustomPlayersUI_Parms;
	ShowCustomPlayersUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowCustomPlayersUI_Parms.Title, &Title, 0x10 );
	memcpy ( &ShowCustomPlayersUI_Parms.Description, &Description, 0x10 );

	this->ProcessEvent ( pFnShowCustomPlayersUI, &ShowCustomPlayersUI_Parms, NULL );

	if ( Players )
		memcpy ( Players, &ShowCustomPlayersUI_Parms.Players, 0x10 );

	return ShowCustomPlayersUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowPlayersUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowPlayersUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowPlayersUI = NULL;

	if ( ! pFnShowPlayersUI )
		pFnShowPlayersUI = (UFunction*) UObject::GObjObjects()->Data[ 26241 ];

	UOnlinePlayerInterfaceEx_execShowPlayersUI_Parms ShowPlayersUI_Parms;
	ShowPlayersUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowPlayersUI, &ShowPlayersUI_Parms, NULL );

	return ShowPlayersUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowFriendsInviteUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowFriendsInviteUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnShowFriendsInviteUI = NULL;

	if ( ! pFnShowFriendsInviteUI )
		pFnShowFriendsInviteUI = (UFunction*) UObject::GObjObjects()->Data[ 26237 ];

	UOnlinePlayerInterfaceEx_execShowFriendsInviteUI_Parms ShowFriendsInviteUI_Parms;
	ShowFriendsInviteUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowFriendsInviteUI_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnShowFriendsInviteUI, &ShowFriendsInviteUI_Parms, NULL );

	return ShowFriendsInviteUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ClearProfileDataChangedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ProfileDataChangedDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterfaceEx::ClearProfileDataChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ProfileDataChangedDelegate )
{
	static UFunction* pFnClearProfileDataChangedDelegate = NULL;

	if ( ! pFnClearProfileDataChangedDelegate )
		pFnClearProfileDataChangedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26234 ];

	UOnlinePlayerInterfaceEx_execClearProfileDataChangedDelegate_Parms ClearProfileDataChangedDelegate_Parms;
	ClearProfileDataChangedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearProfileDataChangedDelegate_Parms.ProfileDataChangedDelegate, &ProfileDataChangedDelegate, 0x10 );

	this->ProcessEvent ( pFnClearProfileDataChangedDelegate, &ClearProfileDataChangedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.AddProfileDataChangedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ProfileDataChangedDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterfaceEx::AddProfileDataChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ProfileDataChangedDelegate )
{
	static UFunction* pFnAddProfileDataChangedDelegate = NULL;

	if ( ! pFnAddProfileDataChangedDelegate )
		pFnAddProfileDataChangedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26231 ];

	UOnlinePlayerInterfaceEx_execAddProfileDataChangedDelegate_Parms AddProfileDataChangedDelegate_Parms;
	AddProfileDataChangedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddProfileDataChangedDelegate_Parms.ProfileDataChangedDelegate, &ProfileDataChangedDelegate, 0x10 );

	this->ProcessEvent ( pFnAddProfileDataChangedDelegate, &AddProfileDataChangedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.OnProfileDataChanged
// [0x00120000] 
// Parameters infos:

void UOnlinePlayerInterfaceEx::OnProfileDataChanged ( )
{
	static UFunction* pFnOnProfileDataChanged = NULL;

	if ( ! pFnOnProfileDataChanged )
		pFnOnProfileDataChanged = (UFunction*) UObject::GObjObjects()->Data[ 26230 ];

	UOnlinePlayerInterfaceEx_execOnProfileDataChanged_Parms OnProfileDataChanged_Parms;

	this->ProcessEvent ( pFnOnProfileDataChanged, &OnProfileDataChanged_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.UnlockGamerPicture
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            PictureId                      ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::UnlockGamerPicture ( unsigned char LocalUserNum, int PictureId )
{
	static UFunction* pFnUnlockGamerPicture = NULL;

	if ( ! pFnUnlockGamerPicture )
		pFnUnlockGamerPicture = (UFunction*) UObject::GObjObjects()->Data[ 26226 ];

	UOnlinePlayerInterfaceEx_execUnlockGamerPicture_Parms UnlockGamerPicture_Parms;
	UnlockGamerPicture_Parms.LocalUserNum = LocalUserNum;
	UnlockGamerPicture_Parms.PictureId = PictureId;

	this->ProcessEvent ( pFnUnlockGamerPicture, &UnlockGamerPicture_Parms, NULL );

	return UnlockGamerPicture_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.IsDeviceValid
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            DeviceID                       ( CPF_Parm )
// int                            SizeNeeded                     ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterfaceEx::IsDeviceValid ( int DeviceID, int SizeNeeded )
{
	static UFunction* pFnIsDeviceValid = NULL;

	if ( ! pFnIsDeviceValid )
		pFnIsDeviceValid = (UFunction*) UObject::GObjObjects()->Data[ 26222 ];

	UOnlinePlayerInterfaceEx_execIsDeviceValid_Parms IsDeviceValid_Parms;
	IsDeviceValid_Parms.DeviceID = DeviceID;
	IsDeviceValid_Parms.SizeNeeded = SizeNeeded;

	this->ProcessEvent ( pFnIsDeviceValid, &IsDeviceValid_Parms, NULL );

	return IsDeviceValid_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.GetDeviceSelectionResults
// [0x00420000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 DeviceName                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int UOnlinePlayerInterfaceEx::GetDeviceSelectionResults ( unsigned char LocalUserNum, struct FString* DeviceName )
{
	static UFunction* pFnGetDeviceSelectionResults = NULL;

	if ( ! pFnGetDeviceSelectionResults )
		pFnGetDeviceSelectionResults = (UFunction*) UObject::GObjObjects()->Data[ 26218 ];

	UOnlinePlayerInterfaceEx_execGetDeviceSelectionResults_Parms GetDeviceSelectionResults_Parms;
	GetDeviceSelectionResults_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetDeviceSelectionResults, &GetDeviceSelectionResults_Parms, NULL );

	if ( DeviceName )
		memcpy ( DeviceName, &GetDeviceSelectionResults_Parms.DeviceName, 0x10 );

	return GetDeviceSelectionResults_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ClearDeviceSelectionDoneDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         DeviceDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterfaceEx::ClearDeviceSelectionDoneDelegate ( unsigned char LocalUserNum, struct FScriptDelegate DeviceDelegate )
{
	static UFunction* pFnClearDeviceSelectionDoneDelegate = NULL;

	if ( ! pFnClearDeviceSelectionDoneDelegate )
		pFnClearDeviceSelectionDoneDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26215 ];

	UOnlinePlayerInterfaceEx_execClearDeviceSelectionDoneDelegate_Parms ClearDeviceSelectionDoneDelegate_Parms;
	ClearDeviceSelectionDoneDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearDeviceSelectionDoneDelegate_Parms.DeviceDelegate, &DeviceDelegate, 0x10 );

	this->ProcessEvent ( pFnClearDeviceSelectionDoneDelegate, &ClearDeviceSelectionDoneDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.AddDeviceSelectionDoneDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         DeviceDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterfaceEx::AddDeviceSelectionDoneDelegate ( unsigned char LocalUserNum, struct FScriptDelegate DeviceDelegate )
{
	static UFunction* pFnAddDeviceSelectionDoneDelegate = NULL;

	if ( ! pFnAddDeviceSelectionDoneDelegate )
		pFnAddDeviceSelectionDoneDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26212 ];

	UOnlinePlayerInterfaceEx_execAddDeviceSelectionDoneDelegate_Parms AddDeviceSelectionDoneDelegate_Parms;
	AddDeviceSelectionDoneDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddDeviceSelectionDoneDelegate_Parms.DeviceDelegate, &DeviceDelegate, 0x10 );

	this->ProcessEvent ( pFnAddDeviceSelectionDoneDelegate, &AddDeviceSelectionDoneDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.OnDeviceSelectionComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterfaceEx::OnDeviceSelectionComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDeviceSelectionComplete = NULL;

	if ( ! pFnOnDeviceSelectionComplete )
		pFnOnDeviceSelectionComplete = (UFunction*) UObject::GObjObjects()->Data[ 26210 ];

	UOnlinePlayerInterfaceEx_execOnDeviceSelectionComplete_Parms OnDeviceSelectionComplete_Parms;
	OnDeviceSelectionComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDeviceSelectionComplete, &OnDeviceSelectionComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.ShowDeviceSelectionUI
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            SizeNeeded                     ( CPF_Parm )
// unsigned long                  bForceShowUI                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bManageStorage                 ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowDeviceSelectionUI ( unsigned char LocalUserNum, int SizeNeeded, unsigned long bForceShowUI, unsigned long bManageStorage )
{
	static UFunction* pFnShowDeviceSelectionUI = NULL;

	if ( ! pFnShowDeviceSelectionUI )
		pFnShowDeviceSelectionUI = (UFunction*) UObject::GObjObjects()->Data[ 26204 ];

	UOnlinePlayerInterfaceEx_execShowDeviceSelectionUI_Parms ShowDeviceSelectionUI_Parms;
	ShowDeviceSelectionUI_Parms.LocalUserNum = LocalUserNum;
	ShowDeviceSelectionUI_Parms.SizeNeeded = SizeNeeded;
	ShowDeviceSelectionUI_Parms.bForceShowUI = bForceShowUI;
	ShowDeviceSelectionUI_Parms.bManageStorage = bManageStorage;

	this->ProcessEvent ( pFnShowDeviceSelectionUI, &ShowDeviceSelectionUI_Parms, NULL );

	return ShowDeviceSelectionUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowMembershipMarketplaceUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowMembershipMarketplaceUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowMembershipMarketplaceUI = NULL;

	if ( ! pFnShowMembershipMarketplaceUI )
		pFnShowMembershipMarketplaceUI = (UFunction*) UObject::GObjObjects()->Data[ 26201 ];

	UOnlinePlayerInterfaceEx_execShowMembershipMarketplaceUI_Parms ShowMembershipMarketplaceUI_Parms;
	ShowMembershipMarketplaceUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowMembershipMarketplaceUI, &ShowMembershipMarketplaceUI_Parms, NULL );

	return ShowMembershipMarketplaceUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowContentMarketplaceUI
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            CategoryMask                   ( CPF_OptionalParm | CPF_Parm )
// int                            OfferId                        ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowContentMarketplaceUI ( unsigned char LocalUserNum, int CategoryMask, int OfferId )
{
	static UFunction* pFnShowContentMarketplaceUI = NULL;

	if ( ! pFnShowContentMarketplaceUI )
		pFnShowContentMarketplaceUI = (UFunction*) UObject::GObjObjects()->Data[ 26196 ];

	UOnlinePlayerInterfaceEx_execShowContentMarketplaceUI_Parms ShowContentMarketplaceUI_Parms;
	ShowContentMarketplaceUI_Parms.LocalUserNum = LocalUserNum;
	ShowContentMarketplaceUI_Parms.CategoryMask = CategoryMask;
	ShowContentMarketplaceUI_Parms.OfferId = OfferId;

	this->ProcessEvent ( pFnShowContentMarketplaceUI, &ShowContentMarketplaceUI_Parms, NULL );

	return ShowContentMarketplaceUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowInviteUI
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 InviteText                     ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlinePlayerInterfaceEx::ShowInviteUI ( unsigned char LocalUserNum, struct FString InviteText )
{
	static UFunction* pFnShowInviteUI = NULL;

	if ( ! pFnShowInviteUI )
		pFnShowInviteUI = (UFunction*) UObject::GObjObjects()->Data[ 26192 ];

	UOnlinePlayerInterfaceEx_execShowInviteUI_Parms ShowInviteUI_Parms;
	ShowInviteUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowInviteUI_Parms.InviteText, &InviteText, 0x10 );

	this->ProcessEvent ( pFnShowInviteUI, &ShowInviteUI_Parms, NULL );

	return ShowInviteUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowAchievementsUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowAchievementsUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowAchievementsUI = NULL;

	if ( ! pFnShowAchievementsUI )
		pFnShowAchievementsUI = (UFunction*) UObject::GObjObjects()->Data[ 26189 ];

	UOnlinePlayerInterfaceEx_execShowAchievementsUI_Parms ShowAchievementsUI_Parms;
	ShowAchievementsUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowAchievementsUI, &ShowAchievementsUI_Parms, NULL );

	return ShowAchievementsUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowMessagesUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowMessagesUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowMessagesUI = NULL;

	if ( ! pFnShowMessagesUI )
		pFnShowMessagesUI = (UFunction*) UObject::GObjObjects()->Data[ 26186 ];

	UOnlinePlayerInterfaceEx_execShowMessagesUI_Parms ShowMessagesUI_Parms;
	ShowMessagesUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowMessagesUI, &ShowMessagesUI_Parms, NULL );

	return ShowMessagesUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowGamerCardUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowGamerCardUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnShowGamerCardUI = NULL;

	if ( ! pFnShowGamerCardUI )
		pFnShowGamerCardUI = (UFunction*) UObject::GObjObjects()->Data[ 26182 ];

	UOnlinePlayerInterfaceEx_execShowGamerCardUI_Parms ShowGamerCardUI_Parms;
	ShowGamerCardUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowGamerCardUI_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnShowGamerCardUI, &ShowGamerCardUI_Parms, NULL );

	return ShowGamerCardUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowFeedbackUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowFeedbackUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnShowFeedbackUI = NULL;

	if ( ! pFnShowFeedbackUI )
		pFnShowFeedbackUI = (UFunction*) UObject::GObjObjects()->Data[ 26178 ];

	UOnlinePlayerInterfaceEx_execShowFeedbackUI_Parms ShowFeedbackUI_Parms;
	ShowFeedbackUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowFeedbackUI_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnShowFeedbackUI, &ShowFeedbackUI_Parms, NULL );

	return ShowFeedbackUI_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.GetTitleFileState
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

unsigned char UOnlineSystemInterface::GetTitleFileState ( struct FString Filename )
{
	static UFunction* pFnGetTitleFileState = NULL;

	if ( ! pFnGetTitleFileState )
		pFnGetTitleFileState = (UFunction*) UObject::GObjObjects()->Data[ 26795 ];

	UOnlineSystemInterface_execGetTitleFileState_Parms GetTitleFileState_Parms;
	memcpy ( &GetTitleFileState_Parms.Filename, &Filename, 0x10 );

	this->ProcessEvent ( pFnGetTitleFileState, &GetTitleFileState_Parms, NULL );

	return GetTitleFileState_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.GetTitleFileContents
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )
// struct TArray<unsigned char>   FileContents                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineSystemInterface::GetTitleFileContents ( struct FString Filename, struct TArray<unsigned char>* FileContents )
{
	static UFunction* pFnGetTitleFileContents = NULL;

	if ( ! pFnGetTitleFileContents )
		pFnGetTitleFileContents = (UFunction*) UObject::GObjObjects()->Data[ 22505 ];

	UOnlineSystemInterface_execGetTitleFileContents_Parms GetTitleFileContents_Parms;
	memcpy ( &GetTitleFileContents_Parms.Filename, &Filename, 0x10 );

	this->ProcessEvent ( pFnGetTitleFileContents, &GetTitleFileContents_Parms, NULL );

	if ( FileContents )
		memcpy ( FileContents, &GetTitleFileContents_Parms.FileContents, 0x10 );

	return GetTitleFileContents_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.ClearReadTitleFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearReadTitleFileCompleteDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate )
{
	static UFunction* pFnClearReadTitleFileCompleteDelegate = NULL;

	if ( ! pFnClearReadTitleFileCompleteDelegate )
		pFnClearReadTitleFileCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26790 ];

	UOnlineSystemInterface_execClearReadTitleFileCompleteDelegate_Parms ClearReadTitleFileCompleteDelegate_Parms;
	memcpy ( &ClearReadTitleFileCompleteDelegate_Parms.ReadTitleFileCompleteDelegate, &ReadTitleFileCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadTitleFileCompleteDelegate, &ClearReadTitleFileCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddReadTitleFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddReadTitleFileCompleteDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate )
{
	static UFunction* pFnAddReadTitleFileCompleteDelegate = NULL;

	if ( ! pFnAddReadTitleFileCompleteDelegate )
		pFnAddReadTitleFileCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26788 ];

	UOnlineSystemInterface_execAddReadTitleFileCompleteDelegate_Parms AddReadTitleFileCompleteDelegate_Parms;
	memcpy ( &AddReadTitleFileCompleteDelegate_Parms.ReadTitleFileCompleteDelegate, &ReadTitleFileCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadTitleFileCompleteDelegate, &AddReadTitleFileCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.ReadTitleFile
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FileToRead                     ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineSystemInterface::ReadTitleFile ( struct FString FileToRead )
{
	static UFunction* pFnReadTitleFile = NULL;

	if ( ! pFnReadTitleFile )
		pFnReadTitleFile = (UFunction*) UObject::GObjObjects()->Data[ 22497 ];

	UOnlineSystemInterface_execReadTitleFile_Parms ReadTitleFile_Parms;
	memcpy ( &ReadTitleFile_Parms.FileToRead, &FileToRead, 0x10 );

	this->ProcessEvent ( pFnReadTitleFile, &ReadTitleFile_Parms, NULL );

	return ReadTitleFile_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.OnReadTitleFileComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::OnReadTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename )
{
	static UFunction* pFnOnReadTitleFileComplete = NULL;

	if ( ! pFnOnReadTitleFileComplete )
		pFnOnReadTitleFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 26784 ];

	UOnlineSystemInterface_execOnReadTitleFileComplete_Parms OnReadTitleFileComplete_Parms;
	OnReadTitleFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnReadTitleFileComplete_Parms.Filename, &Filename, 0x10 );

	this->ProcessEvent ( pFnOnReadTitleFileComplete, &OnReadTitleFileComplete_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.ClearStorageDeviceChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         StorageDeviceChangeDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearStorageDeviceChangeDelegate ( struct FScriptDelegate StorageDeviceChangeDelegate )
{
	static UFunction* pFnClearStorageDeviceChangeDelegate = NULL;

	if ( ! pFnClearStorageDeviceChangeDelegate )
		pFnClearStorageDeviceChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26782 ];

	UOnlineSystemInterface_execClearStorageDeviceChangeDelegate_Parms ClearStorageDeviceChangeDelegate_Parms;
	memcpy ( &ClearStorageDeviceChangeDelegate_Parms.StorageDeviceChangeDelegate, &StorageDeviceChangeDelegate, 0x10 );

	this->ProcessEvent ( pFnClearStorageDeviceChangeDelegate, &ClearStorageDeviceChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddStorageDeviceChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         StorageDeviceChangeDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddStorageDeviceChangeDelegate ( struct FScriptDelegate StorageDeviceChangeDelegate )
{
	static UFunction* pFnAddStorageDeviceChangeDelegate = NULL;

	if ( ! pFnAddStorageDeviceChangeDelegate )
		pFnAddStorageDeviceChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26780 ];

	UOnlineSystemInterface_execAddStorageDeviceChangeDelegate_Parms AddStorageDeviceChangeDelegate_Parms;
	memcpy ( &AddStorageDeviceChangeDelegate_Parms.StorageDeviceChangeDelegate, &StorageDeviceChangeDelegate, 0x10 );

	this->ProcessEvent ( pFnAddStorageDeviceChangeDelegate, &AddStorageDeviceChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnStorageDeviceChange
// [0x00120000] 
// Parameters infos:

void UOnlineSystemInterface::OnStorageDeviceChange ( )
{
	static UFunction* pFnOnStorageDeviceChange = NULL;

	if ( ! pFnOnStorageDeviceChange )
		pFnOnStorageDeviceChange = (UFunction*) UObject::GObjObjects()->Data[ 26779 ];

	UOnlineSystemInterface_execOnStorageDeviceChange_Parms OnStorageDeviceChange_Parms;

	this->ProcessEvent ( pFnOnStorageDeviceChange, &OnStorageDeviceChange_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.GetNATType
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UOnlineSystemInterface::GetNATType ( )
{
	static UFunction* pFnGetNATType = NULL;

	if ( ! pFnGetNATType )
		pFnGetNATType = (UFunction*) UObject::GObjObjects()->Data[ 26777 ];

	UOnlineSystemInterface_execGetNATType_Parms GetNATType_Parms;

	this->ProcessEvent ( pFnGetNATType, &GetNATType_Parms, NULL );

	return GetNATType_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.ClearConnectionStatusChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ConnectionStatusDelegate       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearConnectionStatusChangeDelegate ( struct FScriptDelegate ConnectionStatusDelegate )
{
	static UFunction* pFnClearConnectionStatusChangeDelegate = NULL;

	if ( ! pFnClearConnectionStatusChangeDelegate )
		pFnClearConnectionStatusChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26775 ];

	UOnlineSystemInterface_execClearConnectionStatusChangeDelegate_Parms ClearConnectionStatusChangeDelegate_Parms;
	memcpy ( &ClearConnectionStatusChangeDelegate_Parms.ConnectionStatusDelegate, &ConnectionStatusDelegate, 0x10 );

	this->ProcessEvent ( pFnClearConnectionStatusChangeDelegate, &ClearConnectionStatusChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddConnectionStatusChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ConnectionStatusDelegate       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddConnectionStatusChangeDelegate ( struct FScriptDelegate ConnectionStatusDelegate )
{
	static UFunction* pFnAddConnectionStatusChangeDelegate = NULL;

	if ( ! pFnAddConnectionStatusChangeDelegate )
		pFnAddConnectionStatusChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26773 ];

	UOnlineSystemInterface_execAddConnectionStatusChangeDelegate_Parms AddConnectionStatusChangeDelegate_Parms;
	memcpy ( &AddConnectionStatusChangeDelegate_Parms.ConnectionStatusDelegate, &ConnectionStatusDelegate, 0x10 );

	this->ProcessEvent ( pFnAddConnectionStatusChangeDelegate, &AddConnectionStatusChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnConnectionStatusChange
// [0x00120000] 
// Parameters infos:
// unsigned char                  ConnectionStatus               ( CPF_Parm )

void UOnlineSystemInterface::OnConnectionStatusChange ( unsigned char ConnectionStatus )
{
	static UFunction* pFnOnConnectionStatusChange = NULL;

	if ( ! pFnOnConnectionStatusChange )
		pFnOnConnectionStatusChange = (UFunction*) UObject::GObjObjects()->Data[ 26771 ];

	UOnlineSystemInterface_execOnConnectionStatusChange_Parms OnConnectionStatusChange_Parms;
	OnConnectionStatusChange_Parms.ConnectionStatus = ConnectionStatus;

	this->ProcessEvent ( pFnOnConnectionStatusChange, &OnConnectionStatusChange_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.IsControllerConnected
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

bool UOnlineSystemInterface::IsControllerConnected ( int ControllerId )
{
	static UFunction* pFnIsControllerConnected = NULL;

	if ( ! pFnIsControllerConnected )
		pFnIsControllerConnected = (UFunction*) UObject::GObjObjects()->Data[ 26768 ];

	UOnlineSystemInterface_execIsControllerConnected_Parms IsControllerConnected_Parms;
	IsControllerConnected_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnIsControllerConnected, &IsControllerConnected_Parms, NULL );

	return IsControllerConnected_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.ClearControllerChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ControllerChangeDelegate       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearControllerChangeDelegate ( struct FScriptDelegate ControllerChangeDelegate )
{
	static UFunction* pFnClearControllerChangeDelegate = NULL;

	if ( ! pFnClearControllerChangeDelegate )
		pFnClearControllerChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26766 ];

	UOnlineSystemInterface_execClearControllerChangeDelegate_Parms ClearControllerChangeDelegate_Parms;
	memcpy ( &ClearControllerChangeDelegate_Parms.ControllerChangeDelegate, &ControllerChangeDelegate, 0x10 );

	this->ProcessEvent ( pFnClearControllerChangeDelegate, &ClearControllerChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddControllerChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ControllerChangeDelegate       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddControllerChangeDelegate ( struct FScriptDelegate ControllerChangeDelegate )
{
	static UFunction* pFnAddControllerChangeDelegate = NULL;

	if ( ! pFnAddControllerChangeDelegate )
		pFnAddControllerChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26764 ];

	UOnlineSystemInterface_execAddControllerChangeDelegate_Parms AddControllerChangeDelegate_Parms;
	memcpy ( &AddControllerChangeDelegate_Parms.ControllerChangeDelegate, &ControllerChangeDelegate, 0x10 );

	this->ProcessEvent ( pFnAddControllerChangeDelegate, &AddControllerChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnControllerChange
// [0x00120000] 
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )
// unsigned long                  bIsConnected                   ( CPF_Parm )

void UOnlineSystemInterface::OnControllerChange ( int ControllerId, unsigned long bIsConnected )
{
	static UFunction* pFnOnControllerChange = NULL;

	if ( ! pFnOnControllerChange )
		pFnOnControllerChange = (UFunction*) UObject::GObjObjects()->Data[ 26761 ];

	UOnlineSystemInterface_execOnControllerChange_Parms OnControllerChange_Parms;
	OnControllerChange_Parms.ControllerId = ControllerId;
	OnControllerChange_Parms.bIsConnected = bIsConnected;

	this->ProcessEvent ( pFnOnControllerChange, &OnControllerChange_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.SetNetworkNotificationPosition
// [0x00020000] 
// Parameters infos:
// unsigned char                  NewPos                         ( CPF_Parm )

void UOnlineSystemInterface::SetNetworkNotificationPosition ( unsigned char NewPos )
{
	static UFunction* pFnSetNetworkNotificationPosition = NULL;

	if ( ! pFnSetNetworkNotificationPosition )
		pFnSetNetworkNotificationPosition = (UFunction*) UObject::GObjObjects()->Data[ 26759 ];

	UOnlineSystemInterface_execSetNetworkNotificationPosition_Parms SetNetworkNotificationPosition_Parms;
	SetNetworkNotificationPosition_Parms.NewPos = NewPos;

	this->ProcessEvent ( pFnSetNetworkNotificationPosition, &SetNetworkNotificationPosition_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.GetNetworkNotificationPosition
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UOnlineSystemInterface::GetNetworkNotificationPosition ( )
{
	static UFunction* pFnGetNetworkNotificationPosition = NULL;

	if ( ! pFnGetNetworkNotificationPosition )
		pFnGetNetworkNotificationPosition = (UFunction*) UObject::GObjObjects()->Data[ 26757 ];

	UOnlineSystemInterface_execGetNetworkNotificationPosition_Parms GetNetworkNotificationPosition_Parms;

	this->ProcessEvent ( pFnGetNetworkNotificationPosition, &GetNetworkNotificationPosition_Parms, NULL );

	return GetNetworkNotificationPosition_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.ClearExternalUIChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ExternalUIDelegate             ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearExternalUIChangeDelegate ( struct FScriptDelegate ExternalUIDelegate )
{
	static UFunction* pFnClearExternalUIChangeDelegate = NULL;

	if ( ! pFnClearExternalUIChangeDelegate )
		pFnClearExternalUIChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26755 ];

	UOnlineSystemInterface_execClearExternalUIChangeDelegate_Parms ClearExternalUIChangeDelegate_Parms;
	memcpy ( &ClearExternalUIChangeDelegate_Parms.ExternalUIDelegate, &ExternalUIDelegate, 0x10 );

	this->ProcessEvent ( pFnClearExternalUIChangeDelegate, &ClearExternalUIChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddExternalUIChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ExternalUIDelegate             ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddExternalUIChangeDelegate ( struct FScriptDelegate ExternalUIDelegate )
{
	static UFunction* pFnAddExternalUIChangeDelegate = NULL;

	if ( ! pFnAddExternalUIChangeDelegate )
		pFnAddExternalUIChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26753 ];

	UOnlineSystemInterface_execAddExternalUIChangeDelegate_Parms AddExternalUIChangeDelegate_Parms;
	memcpy ( &AddExternalUIChangeDelegate_Parms.ExternalUIDelegate, &ExternalUIDelegate, 0x10 );

	this->ProcessEvent ( pFnAddExternalUIChangeDelegate, &AddExternalUIChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnExternalUIChange
// [0x00120000] 
// Parameters infos:
// unsigned long                  bIsOpening                     ( CPF_Parm )

void UOnlineSystemInterface::OnExternalUIChange ( unsigned long bIsOpening )
{
	static UFunction* pFnOnExternalUIChange = NULL;

	if ( ! pFnOnExternalUIChange )
		pFnOnExternalUIChange = (UFunction*) UObject::GObjObjects()->Data[ 26751 ];

	UOnlineSystemInterface_execOnExternalUIChange_Parms OnExternalUIChange_Parms;
	OnExternalUIChange_Parms.bIsOpening = bIsOpening;

	this->ProcessEvent ( pFnOnExternalUIChange, &OnExternalUIChange_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.ClearLinkStatusChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LinkStatusDelegate             ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearLinkStatusChangeDelegate ( struct FScriptDelegate LinkStatusDelegate )
{
	static UFunction* pFnClearLinkStatusChangeDelegate = NULL;

	if ( ! pFnClearLinkStatusChangeDelegate )
		pFnClearLinkStatusChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26749 ];

	UOnlineSystemInterface_execClearLinkStatusChangeDelegate_Parms ClearLinkStatusChangeDelegate_Parms;
	memcpy ( &ClearLinkStatusChangeDelegate_Parms.LinkStatusDelegate, &LinkStatusDelegate, 0x10 );

	this->ProcessEvent ( pFnClearLinkStatusChangeDelegate, &ClearLinkStatusChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddLinkStatusChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LinkStatusDelegate             ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddLinkStatusChangeDelegate ( struct FScriptDelegate LinkStatusDelegate )
{
	static UFunction* pFnAddLinkStatusChangeDelegate = NULL;

	if ( ! pFnAddLinkStatusChangeDelegate )
		pFnAddLinkStatusChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26747 ];

	UOnlineSystemInterface_execAddLinkStatusChangeDelegate_Parms AddLinkStatusChangeDelegate_Parms;
	memcpy ( &AddLinkStatusChangeDelegate_Parms.LinkStatusDelegate, &LinkStatusDelegate, 0x10 );

	this->ProcessEvent ( pFnAddLinkStatusChangeDelegate, &AddLinkStatusChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnLinkStatusChange
// [0x00120000] 
// Parameters infos:
// unsigned long                  bIsConnected                   ( CPF_Parm )

void UOnlineSystemInterface::OnLinkStatusChange ( unsigned long bIsConnected )
{
	static UFunction* pFnOnLinkStatusChange = NULL;

	if ( ! pFnOnLinkStatusChange )
		pFnOnLinkStatusChange = (UFunction*) UObject::GObjObjects()->Data[ 26745 ];

	UOnlineSystemInterface_execOnLinkStatusChange_Parms OnLinkStatusChange_Parms;
	OnLinkStatusChange_Parms.bIsConnected = bIsConnected;

	this->ProcessEvent ( pFnOnLinkStatusChange, &OnLinkStatusChange_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.HasLinkConnection
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineSystemInterface::HasLinkConnection ( )
{
	static UFunction* pFnHasLinkConnection = NULL;

	if ( ! pFnHasLinkConnection )
		pFnHasLinkConnection = (UFunction*) UObject::GObjObjects()->Data[ 26743 ];

	UOnlineSystemInterface_execHasLinkConnection_Parms HasLinkConnection_Parms;

	this->ProcessEvent ( pFnHasLinkConnection, &HasLinkConnection_Parms, NULL );

	return HasLinkConnection_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.RecalculateSkillRating
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct TArray<struct FUniqueNetId> Players                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineGameInterface::RecalculateSkillRating ( struct FName SessionName, struct TArray<struct FUniqueNetId>* Players )
{
	static UFunction* pFnRecalculateSkillRating = NULL;

	if ( ! pFnRecalculateSkillRating )
		pFnRecalculateSkillRating = (UFunction*) UObject::GObjObjects()->Data[ 21064 ];

	UOnlineGameInterface_execRecalculateSkillRating_Parms RecalculateSkillRating_Parms;
	memcpy ( &RecalculateSkillRating_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnRecalculateSkillRating, &RecalculateSkillRating_Parms, NULL );

	if ( Players )
		memcpy ( Players, &RecalculateSkillRating_Parms.Players, 0x10 );

	return RecalculateSkillRating_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.AcceptGameInvite
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineGameInterface::AcceptGameInvite ( unsigned char LocalUserNum, struct FName SessionName )
{
	static UFunction* pFnAcceptGameInvite = NULL;

	if ( ! pFnAcceptGameInvite )
		pFnAcceptGameInvite = (UFunction*) UObject::GObjObjects()->Data[ 11594 ];

	UOnlineGameInterface_execAcceptGameInvite_Parms AcceptGameInvite_Parms;
	AcceptGameInvite_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AcceptGameInvite_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnAcceptGameInvite, &AcceptGameInvite_Parms, NULL );

	return AcceptGameInvite_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearGameInviteAcceptedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         GameInviteAcceptedDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearGameInviteAcceptedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate GameInviteAcceptedDelegate )
{
	static UFunction* pFnClearGameInviteAcceptedDelegate = NULL;

	if ( ! pFnClearGameInviteAcceptedDelegate )
		pFnClearGameInviteAcceptedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25657 ];

	UOnlineGameInterface_execClearGameInviteAcceptedDelegate_Parms ClearGameInviteAcceptedDelegate_Parms;
	ClearGameInviteAcceptedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearGameInviteAcceptedDelegate_Parms.GameInviteAcceptedDelegate, &GameInviteAcceptedDelegate, 0x10 );

	this->ProcessEvent ( pFnClearGameInviteAcceptedDelegate, &ClearGameInviteAcceptedDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddGameInviteAcceptedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         GameInviteAcceptedDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddGameInviteAcceptedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate GameInviteAcceptedDelegate )
{
	static UFunction* pFnAddGameInviteAcceptedDelegate = NULL;

	if ( ! pFnAddGameInviteAcceptedDelegate )
		pFnAddGameInviteAcceptedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25654 ];

	UOnlineGameInterface_execAddGameInviteAcceptedDelegate_Parms AddGameInviteAcceptedDelegate_Parms;
	AddGameInviteAcceptedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddGameInviteAcceptedDelegate_Parms.GameInviteAcceptedDelegate, &GameInviteAcceptedDelegate, 0x10 );

	this->ProcessEvent ( pFnAddGameInviteAcceptedDelegate, &AddGameInviteAcceptedDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnGameInviteAccepted
// [0x00520000] 
// Parameters infos:
// struct FOnlineGameSearchResult InviteResult                   ( CPF_Const | CPF_Parm | CPF_OutParm )

void UOnlineGameInterface::OnGameInviteAccepted ( struct FOnlineGameSearchResult* InviteResult )
{
	static UFunction* pFnOnGameInviteAccepted = NULL;

	if ( ! pFnOnGameInviteAccepted )
		pFnOnGameInviteAccepted = (UFunction*) UObject::GObjObjects()->Data[ 25652 ];

	UOnlineGameInterface_execOnGameInviteAccepted_Parms OnGameInviteAccepted_Parms;

	this->ProcessEvent ( pFnOnGameInviteAccepted, &OnGameInviteAccepted_Parms, NULL );

	if ( InviteResult )
		memcpy ( InviteResult, &OnGameInviteAccepted_Parms.InviteResult, 0x10 );
};

// Function Engine.OnlineGameInterface.GetArbitratedPlayers
// [0x00020000] 
// Parameters infos:
// struct TArray<struct FOnlineArbitrationRegistrant> ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   SessionName                    ( CPF_Parm )

struct TArray<struct FOnlineArbitrationRegistrant> UOnlineGameInterface::GetArbitratedPlayers ( struct FName SessionName )
{
	static UFunction* pFnGetArbitratedPlayers = NULL;

	if ( ! pFnGetArbitratedPlayers )
		pFnGetArbitratedPlayers = (UFunction*) UObject::GObjObjects()->Data[ 25648 ];

	UOnlineGameInterface_execGetArbitratedPlayers_Parms GetArbitratedPlayers_Parms;
	memcpy ( &GetArbitratedPlayers_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnGetArbitratedPlayers, &GetArbitratedPlayers_Parms, NULL );

	return GetArbitratedPlayers_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearArbitrationRegistrationCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ArbitrationRegistrationCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearArbitrationRegistrationCompleteDelegate ( struct FScriptDelegate ArbitrationRegistrationCompleteDelegate )
{
	static UFunction* pFnClearArbitrationRegistrationCompleteDelegate = NULL;

	if ( ! pFnClearArbitrationRegistrationCompleteDelegate )
		pFnClearArbitrationRegistrationCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25646 ];

	UOnlineGameInterface_execClearArbitrationRegistrationCompleteDelegate_Parms ClearArbitrationRegistrationCompleteDelegate_Parms;
	memcpy ( &ClearArbitrationRegistrationCompleteDelegate_Parms.ArbitrationRegistrationCompleteDelegate, &ArbitrationRegistrationCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearArbitrationRegistrationCompleteDelegate, &ClearArbitrationRegistrationCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddArbitrationRegistrationCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ArbitrationRegistrationCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddArbitrationRegistrationCompleteDelegate ( struct FScriptDelegate ArbitrationRegistrationCompleteDelegate )
{
	static UFunction* pFnAddArbitrationRegistrationCompleteDelegate = NULL;

	if ( ! pFnAddArbitrationRegistrationCompleteDelegate )
		pFnAddArbitrationRegistrationCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25644 ];

	UOnlineGameInterface_execAddArbitrationRegistrationCompleteDelegate_Parms AddArbitrationRegistrationCompleteDelegate_Parms;
	memcpy ( &AddArbitrationRegistrationCompleteDelegate_Parms.ArbitrationRegistrationCompleteDelegate, &ArbitrationRegistrationCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddArbitrationRegistrationCompleteDelegate, &AddArbitrationRegistrationCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnArbitrationRegistrationComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnArbitrationRegistrationComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnArbitrationRegistrationComplete = NULL;

	if ( ! pFnOnArbitrationRegistrationComplete )
		pFnOnArbitrationRegistrationComplete = (UFunction*) UObject::GObjObjects()->Data[ 25641 ];

	UOnlineGameInterface_execOnArbitrationRegistrationComplete_Parms OnArbitrationRegistrationComplete_Parms;
	memcpy ( &OnArbitrationRegistrationComplete_Parms.SessionName, &SessionName, 0x8 );
	OnArbitrationRegistrationComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnArbitrationRegistrationComplete, &OnArbitrationRegistrationComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.RegisterForArbitration
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineGameInterface::RegisterForArbitration ( struct FName SessionName )
{
	static UFunction* pFnRegisterForArbitration = NULL;

	if ( ! pFnRegisterForArbitration )
		pFnRegisterForArbitration = (UFunction*) UObject::GObjObjects()->Data[ 11579 ];

	UOnlineGameInterface_execRegisterForArbitration_Parms RegisterForArbitration_Parms;
	memcpy ( &RegisterForArbitration_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnRegisterForArbitration, &RegisterForArbitration_Parms, NULL );

	return RegisterForArbitration_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearEndOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         EndOnlineGameCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearEndOnlineGameCompleteDelegate ( struct FScriptDelegate EndOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearEndOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearEndOnlineGameCompleteDelegate )
		pFnClearEndOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25638 ];

	UOnlineGameInterface_execClearEndOnlineGameCompleteDelegate_Parms ClearEndOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearEndOnlineGameCompleteDelegate_Parms.EndOnlineGameCompleteDelegate, &EndOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearEndOnlineGameCompleteDelegate, &ClearEndOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddEndOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         EndOnlineGameCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddEndOnlineGameCompleteDelegate ( struct FScriptDelegate EndOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddEndOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddEndOnlineGameCompleteDelegate )
		pFnAddEndOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25636 ];

	UOnlineGameInterface_execAddEndOnlineGameCompleteDelegate_Parms AddEndOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddEndOnlineGameCompleteDelegate_Parms.EndOnlineGameCompleteDelegate, &EndOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddEndOnlineGameCompleteDelegate, &AddEndOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnEndOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnEndOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnEndOnlineGameComplete = NULL;

	if ( ! pFnOnEndOnlineGameComplete )
		pFnOnEndOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 25633 ];

	UOnlineGameInterface_execOnEndOnlineGameComplete_Parms OnEndOnlineGameComplete_Parms;
	memcpy ( &OnEndOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnEndOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnEndOnlineGameComplete, &OnEndOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.EndOnlineGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineGameInterface::EndOnlineGame ( struct FName SessionName )
{
	static UFunction* pFnEndOnlineGame = NULL;

	if ( ! pFnEndOnlineGame )
		pFnEndOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 11592 ];

	UOnlineGameInterface_execEndOnlineGame_Parms EndOnlineGame_Parms;
	memcpy ( &EndOnlineGame_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnEndOnlineGame, &EndOnlineGame_Parms, NULL );

	return EndOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearStartOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         StartOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearStartOnlineGameCompleteDelegate ( struct FScriptDelegate StartOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearStartOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearStartOnlineGameCompleteDelegate )
		pFnClearStartOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25630 ];

	UOnlineGameInterface_execClearStartOnlineGameCompleteDelegate_Parms ClearStartOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearStartOnlineGameCompleteDelegate_Parms.StartOnlineGameCompleteDelegate, &StartOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearStartOnlineGameCompleteDelegate, &ClearStartOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddStartOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         StartOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddStartOnlineGameCompleteDelegate ( struct FScriptDelegate StartOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddStartOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddStartOnlineGameCompleteDelegate )
		pFnAddStartOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25628 ];

	UOnlineGameInterface_execAddStartOnlineGameCompleteDelegate_Parms AddStartOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddStartOnlineGameCompleteDelegate_Parms.StartOnlineGameCompleteDelegate, &StartOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddStartOnlineGameCompleteDelegate, &AddStartOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnStartOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnStartOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnStartOnlineGameComplete = NULL;

	if ( ! pFnOnStartOnlineGameComplete )
		pFnOnStartOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 25625 ];

	UOnlineGameInterface_execOnStartOnlineGameComplete_Parms OnStartOnlineGameComplete_Parms;
	memcpy ( &OnStartOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnStartOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnStartOnlineGameComplete, &OnStartOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.StartOnlineGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineGameInterface::StartOnlineGame ( struct FName SessionName )
{
	static UFunction* pFnStartOnlineGame = NULL;

	if ( ! pFnStartOnlineGame )
		pFnStartOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 11734 ];

	UOnlineGameInterface_execStartOnlineGame_Parms StartOnlineGame_Parms;
	memcpy ( &StartOnlineGame_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnStartOnlineGame, &StartOnlineGame_Parms, NULL );

	return StartOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearUnregisterPlayerCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UnregisterPlayerCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearUnregisterPlayerCompleteDelegate ( struct FScriptDelegate UnregisterPlayerCompleteDelegate )
{
	static UFunction* pFnClearUnregisterPlayerCompleteDelegate = NULL;

	if ( ! pFnClearUnregisterPlayerCompleteDelegate )
		pFnClearUnregisterPlayerCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25622 ];

	UOnlineGameInterface_execClearUnregisterPlayerCompleteDelegate_Parms ClearUnregisterPlayerCompleteDelegate_Parms;
	memcpy ( &ClearUnregisterPlayerCompleteDelegate_Parms.UnregisterPlayerCompleteDelegate, &UnregisterPlayerCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearUnregisterPlayerCompleteDelegate, &ClearUnregisterPlayerCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddUnregisterPlayerCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UnregisterPlayerCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddUnregisterPlayerCompleteDelegate ( struct FScriptDelegate UnregisterPlayerCompleteDelegate )
{
	static UFunction* pFnAddUnregisterPlayerCompleteDelegate = NULL;

	if ( ! pFnAddUnregisterPlayerCompleteDelegate )
		pFnAddUnregisterPlayerCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25620 ];

	UOnlineGameInterface_execAddUnregisterPlayerCompleteDelegate_Parms AddUnregisterPlayerCompleteDelegate_Parms;
	memcpy ( &AddUnregisterPlayerCompleteDelegate_Parms.UnregisterPlayerCompleteDelegate, &UnregisterPlayerCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddUnregisterPlayerCompleteDelegate, &AddUnregisterPlayerCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnUnregisterPlayerComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnUnregisterPlayerComplete ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnUnregisterPlayerComplete = NULL;

	if ( ! pFnOnUnregisterPlayerComplete )
		pFnOnUnregisterPlayerComplete = (UFunction*) UObject::GObjObjects()->Data[ 25616 ];

	UOnlineGameInterface_execOnUnregisterPlayerComplete_Parms OnUnregisterPlayerComplete_Parms;
	memcpy ( &OnUnregisterPlayerComplete_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &OnUnregisterPlayerComplete_Parms.PlayerID, &PlayerID, 0x8 );
	OnUnregisterPlayerComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnUnregisterPlayerComplete, &OnUnregisterPlayerComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.UnregisterPlayer
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineGameInterface::UnregisterPlayer ( struct FName SessionName, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnUnregisterPlayer = NULL;

	if ( ! pFnUnregisterPlayer )
		pFnUnregisterPlayer = (UFunction*) UObject::GObjObjects()->Data[ 20745 ];

	UOnlineGameInterface_execUnregisterPlayer_Parms UnregisterPlayer_Parms;
	memcpy ( &UnregisterPlayer_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &UnregisterPlayer_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnUnregisterPlayer, &UnregisterPlayer_Parms, NULL );

	return UnregisterPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearRegisterPlayerCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         RegisterPlayerCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearRegisterPlayerCompleteDelegate ( struct FScriptDelegate RegisterPlayerCompleteDelegate )
{
	static UFunction* pFnClearRegisterPlayerCompleteDelegate = NULL;

	if ( ! pFnClearRegisterPlayerCompleteDelegate )
		pFnClearRegisterPlayerCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25612 ];

	UOnlineGameInterface_execClearRegisterPlayerCompleteDelegate_Parms ClearRegisterPlayerCompleteDelegate_Parms;
	memcpy ( &ClearRegisterPlayerCompleteDelegate_Parms.RegisterPlayerCompleteDelegate, &RegisterPlayerCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearRegisterPlayerCompleteDelegate, &ClearRegisterPlayerCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddRegisterPlayerCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         RegisterPlayerCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddRegisterPlayerCompleteDelegate ( struct FScriptDelegate RegisterPlayerCompleteDelegate )
{
	static UFunction* pFnAddRegisterPlayerCompleteDelegate = NULL;

	if ( ! pFnAddRegisterPlayerCompleteDelegate )
		pFnAddRegisterPlayerCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25610 ];

	UOnlineGameInterface_execAddRegisterPlayerCompleteDelegate_Parms AddRegisterPlayerCompleteDelegate_Parms;
	memcpy ( &AddRegisterPlayerCompleteDelegate_Parms.RegisterPlayerCompleteDelegate, &RegisterPlayerCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddRegisterPlayerCompleteDelegate, &AddRegisterPlayerCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnRegisterPlayerComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnRegisterPlayerComplete ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnRegisterPlayerComplete = NULL;

	if ( ! pFnOnRegisterPlayerComplete )
		pFnOnRegisterPlayerComplete = (UFunction*) UObject::GObjObjects()->Data[ 25606 ];

	UOnlineGameInterface_execOnRegisterPlayerComplete_Parms OnRegisterPlayerComplete_Parms;
	memcpy ( &OnRegisterPlayerComplete_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &OnRegisterPlayerComplete_Parms.PlayerID, &PlayerID, 0x8 );
	OnRegisterPlayerComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnRegisterPlayerComplete, &OnRegisterPlayerComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.RegisterPlayer
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// unsigned long                  bWasInvited                    ( CPF_Parm )

bool UOnlineGameInterface::RegisterPlayer ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasInvited )
{
	static UFunction* pFnRegisterPlayer = NULL;

	if ( ! pFnRegisterPlayer )
		pFnRegisterPlayer = (UFunction*) UObject::GObjObjects()->Data[ 20662 ];

	UOnlineGameInterface_execRegisterPlayer_Parms RegisterPlayer_Parms;
	memcpy ( &RegisterPlayer_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &RegisterPlayer_Parms.PlayerID, &PlayerID, 0x8 );
	RegisterPlayer_Parms.bWasInvited = bWasInvited;

	this->ProcessEvent ( pFnRegisterPlayer, &RegisterPlayer_Parms, NULL );

	return RegisterPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.GetResolvedConnectString
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct FString                 ConnectInfo                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineGameInterface::GetResolvedConnectString ( struct FName SessionName, struct FString* ConnectInfo )
{
	static UFunction* pFnGetResolvedConnectString = NULL;

	if ( ! pFnGetResolvedConnectString )
		pFnGetResolvedConnectString = (UFunction*) UObject::GObjObjects()->Data[ 11622 ];

	UOnlineGameInterface_execGetResolvedConnectString_Parms GetResolvedConnectString_Parms;
	memcpy ( &GetResolvedConnectString_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnGetResolvedConnectString, &GetResolvedConnectString_Parms, NULL );

	if ( ConnectInfo )
		memcpy ( ConnectInfo, &GetResolvedConnectString_Parms.ConnectInfo, 0x10 );

	return GetResolvedConnectString_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearJoinOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         JoinOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearJoinOnlineGameCompleteDelegate ( struct FScriptDelegate JoinOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearJoinOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearJoinOnlineGameCompleteDelegate )
		pFnClearJoinOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25599 ];

	UOnlineGameInterface_execClearJoinOnlineGameCompleteDelegate_Parms ClearJoinOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearJoinOnlineGameCompleteDelegate_Parms.JoinOnlineGameCompleteDelegate, &JoinOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearJoinOnlineGameCompleteDelegate, &ClearJoinOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddJoinOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         JoinOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddJoinOnlineGameCompleteDelegate ( struct FScriptDelegate JoinOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddJoinOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddJoinOnlineGameCompleteDelegate )
		pFnAddJoinOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25597 ];

	UOnlineGameInterface_execAddJoinOnlineGameCompleteDelegate_Parms AddJoinOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddJoinOnlineGameCompleteDelegate_Parms.JoinOnlineGameCompleteDelegate, &JoinOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddJoinOnlineGameCompleteDelegate, &AddJoinOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnJoinOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnJoinOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnJoinOnlineGameComplete = NULL;

	if ( ! pFnOnJoinOnlineGameComplete )
		pFnOnJoinOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 25594 ];

	UOnlineGameInterface_execOnJoinOnlineGameComplete_Parms OnJoinOnlineGameComplete_Parms;
	memcpy ( &OnJoinOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnJoinOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnJoinOnlineGameComplete, &OnJoinOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.JoinOnlineGame
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct FOnlineGameSearchResult DesiredGame                    ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineGameInterface::JoinOnlineGame ( unsigned char PlayerNum, struct FName SessionName, struct FOnlineGameSearchResult* DesiredGame )
{
	static UFunction* pFnJoinOnlineGame = NULL;

	if ( ! pFnJoinOnlineGame )
		pFnJoinOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 11765 ];

	UOnlineGameInterface_execJoinOnlineGame_Parms JoinOnlineGame_Parms;
	JoinOnlineGame_Parms.PlayerNum = PlayerNum;
	memcpy ( &JoinOnlineGame_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnJoinOnlineGame, &JoinOnlineGame_Parms, NULL );

	if ( DesiredGame )
		memcpy ( DesiredGame, &JoinOnlineGame_Parms.DesiredGame, 0x10 );

	return JoinOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.QueryNonAdvertisedData
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StartAt                        ( CPF_Parm )
// int                            NumberToQuery                  ( CPF_Parm )

bool UOnlineGameInterface::QueryNonAdvertisedData ( int StartAt, int NumberToQuery )
{
	static UFunction* pFnQueryNonAdvertisedData = NULL;

	if ( ! pFnQueryNonAdvertisedData )
		pFnQueryNonAdvertisedData = (UFunction*) UObject::GObjObjects()->Data[ 25587 ];

	UOnlineGameInterface_execQueryNonAdvertisedData_Parms QueryNonAdvertisedData_Parms;
	QueryNonAdvertisedData_Parms.StartAt = StartAt;
	QueryNonAdvertisedData_Parms.NumberToQuery = NumberToQuery;

	this->ProcessEvent ( pFnQueryNonAdvertisedData, &QueryNonAdvertisedData_Parms, NULL );

	return QueryNonAdvertisedData_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.FreeSearchResults
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlineGameSearch*       Search                         ( CPF_OptionalParm | CPF_Parm )

bool UOnlineGameInterface::FreeSearchResults ( class UOnlineGameSearch* Search )
{
	static UFunction* pFnFreeSearchResults = NULL;

	if ( ! pFnFreeSearchResults )
		pFnFreeSearchResults = (UFunction*) UObject::GObjObjects()->Data[ 25584 ];

	UOnlineGameInterface_execFreeSearchResults_Parms FreeSearchResults_Parms;
	FreeSearchResults_Parms.Search = Search;

	this->ProcessEvent ( pFnFreeSearchResults, &FreeSearchResults_Parms, NULL );

	return FreeSearchResults_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.GetGameSearch
// [0x00020000] 
// Parameters infos:
// class UOnlineGameSearch*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineGameSearch* UOnlineGameInterface::GetGameSearch ( )
{
	static UFunction* pFnGetGameSearch = NULL;

	if ( ! pFnGetGameSearch )
		pFnGetGameSearch = (UFunction*) UObject::GObjObjects()->Data[ 25582 ];

	UOnlineGameInterface_execGetGameSearch_Parms GetGameSearch_Parms;

	this->ProcessEvent ( pFnGetGameSearch, &GetGameSearch_Parms, NULL );

	return GetGameSearch_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.BindPlatformSpecificSessionToSearch
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  SearchingPlayerNum             ( CPF_Parm )
// class UOnlineGameSearch*       SearchSettings                 ( CPF_Parm )
// unsigned char                  PlatformSpecificInfo           ( CPF_Parm )

bool UOnlineGameInterface::BindPlatformSpecificSessionToSearch ( unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings, unsigned char* PlatformSpecificInfo )
{
	static UFunction* pFnBindPlatformSpecificSessionToSearch = NULL;

	if ( ! pFnBindPlatformSpecificSessionToSearch )
		pFnBindPlatformSpecificSessionToSearch = (UFunction*) UObject::GObjObjects()->Data[ 11762 ];

	UOnlineGameInterface_execBindPlatformSpecificSessionToSearch_Parms BindPlatformSpecificSessionToSearch_Parms;
	BindPlatformSpecificSessionToSearch_Parms.SearchingPlayerNum = SearchingPlayerNum;
	BindPlatformSpecificSessionToSearch_Parms.SearchSettings = SearchSettings;
	memcpy ( &BindPlatformSpecificSessionToSearch_Parms.PlatformSpecificInfo, &PlatformSpecificInfo, 0x50 );

	this->ProcessEvent ( pFnBindPlatformSpecificSessionToSearch, &BindPlatformSpecificSessionToSearch_Parms, NULL );

	return BindPlatformSpecificSessionToSearch_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfoBySessionName
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned char                  PlatformSpecificInfo           ( CPF_Parm | CPF_OutParm )

bool UOnlineGameInterface::ReadPlatformSpecificSessionInfoBySessionName ( struct FName SessionName, unsigned char* PlatformSpecificInfo )
{
	static UFunction* pFnReadPlatformSpecificSessionInfoBySessionName = NULL;

	if ( ! pFnReadPlatformSpecificSessionInfoBySessionName )
		pFnReadPlatformSpecificSessionInfoBySessionName = (UFunction*) UObject::GObjObjects()->Data[ 25575 ];

	UOnlineGameInterface_execReadPlatformSpecificSessionInfoBySessionName_Parms ReadPlatformSpecificSessionInfoBySessionName_Parms;
	memcpy ( &ReadPlatformSpecificSessionInfoBySessionName_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnReadPlatformSpecificSessionInfoBySessionName, &ReadPlatformSpecificSessionInfoBySessionName_Parms, NULL );

	if ( PlatformSpecificInfo )
		memcpy ( PlatformSpecificInfo, &ReadPlatformSpecificSessionInfoBySessionName_Parms.PlatformSpecificInfo, 0x50 );

	return ReadPlatformSpecificSessionInfoBySessionName_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfo
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FOnlineGameSearchResult DesiredGame                    ( CPF_Const | CPF_Parm | CPF_OutParm )
// unsigned char                  PlatformSpecificInfo           ( CPF_Parm | CPF_OutParm )

bool UOnlineGameInterface::ReadPlatformSpecificSessionInfo ( struct FOnlineGameSearchResult* DesiredGame, unsigned char* PlatformSpecificInfo )
{
	static UFunction* pFnReadPlatformSpecificSessionInfo = NULL;

	if ( ! pFnReadPlatformSpecificSessionInfo )
		pFnReadPlatformSpecificSessionInfo = (UFunction*) UObject::GObjObjects()->Data[ 25571 ];

	UOnlineGameInterface_execReadPlatformSpecificSessionInfo_Parms ReadPlatformSpecificSessionInfo_Parms;

	this->ProcessEvent ( pFnReadPlatformSpecificSessionInfo, &ReadPlatformSpecificSessionInfo_Parms, NULL );

	if ( DesiredGame )
		memcpy ( DesiredGame, &ReadPlatformSpecificSessionInfo_Parms.DesiredGame, 0x10 );

	if ( PlatformSpecificInfo )
		memcpy ( PlatformSpecificInfo, &ReadPlatformSpecificSessionInfo_Parms.PlatformSpecificInfo, 0x50 );

	return ReadPlatformSpecificSessionInfo_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearCancelFindOnlineGamesCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CancelFindOnlineGamesCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearCancelFindOnlineGamesCompleteDelegate ( struct FScriptDelegate CancelFindOnlineGamesCompleteDelegate )
{
	static UFunction* pFnClearCancelFindOnlineGamesCompleteDelegate = NULL;

	if ( ! pFnClearCancelFindOnlineGamesCompleteDelegate )
		pFnClearCancelFindOnlineGamesCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25569 ];

	UOnlineGameInterface_execClearCancelFindOnlineGamesCompleteDelegate_Parms ClearCancelFindOnlineGamesCompleteDelegate_Parms;
	memcpy ( &ClearCancelFindOnlineGamesCompleteDelegate_Parms.CancelFindOnlineGamesCompleteDelegate, &CancelFindOnlineGamesCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearCancelFindOnlineGamesCompleteDelegate, &ClearCancelFindOnlineGamesCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddCancelFindOnlineGamesCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CancelFindOnlineGamesCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddCancelFindOnlineGamesCompleteDelegate ( struct FScriptDelegate CancelFindOnlineGamesCompleteDelegate )
{
	static UFunction* pFnAddCancelFindOnlineGamesCompleteDelegate = NULL;

	if ( ! pFnAddCancelFindOnlineGamesCompleteDelegate )
		pFnAddCancelFindOnlineGamesCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25567 ];

	UOnlineGameInterface_execAddCancelFindOnlineGamesCompleteDelegate_Parms AddCancelFindOnlineGamesCompleteDelegate_Parms;
	memcpy ( &AddCancelFindOnlineGamesCompleteDelegate_Parms.CancelFindOnlineGamesCompleteDelegate, &CancelFindOnlineGamesCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddCancelFindOnlineGamesCompleteDelegate, &AddCancelFindOnlineGamesCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnCancelFindOnlineGamesComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnCancelFindOnlineGamesComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnCancelFindOnlineGamesComplete = NULL;

	if ( ! pFnOnCancelFindOnlineGamesComplete )
		pFnOnCancelFindOnlineGamesComplete = (UFunction*) UObject::GObjObjects()->Data[ 25565 ];

	UOnlineGameInterface_execOnCancelFindOnlineGamesComplete_Parms OnCancelFindOnlineGamesComplete_Parms;
	OnCancelFindOnlineGamesComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnCancelFindOnlineGamesComplete, &OnCancelFindOnlineGamesComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.CancelFindOnlineGames
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineGameInterface::CancelFindOnlineGames ( )
{
	static UFunction* pFnCancelFindOnlineGames = NULL;

	if ( ! pFnCancelFindOnlineGames )
		pFnCancelFindOnlineGames = (UFunction*) UObject::GObjObjects()->Data[ 25563 ];

	UOnlineGameInterface_execCancelFindOnlineGames_Parms CancelFindOnlineGames_Parms;

	this->ProcessEvent ( pFnCancelFindOnlineGames, &CancelFindOnlineGames_Parms, NULL );

	return CancelFindOnlineGames_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearFindOnlineGamesCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         FindOnlineGamesCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearFindOnlineGamesCompleteDelegate ( struct FScriptDelegate FindOnlineGamesCompleteDelegate )
{
	static UFunction* pFnClearFindOnlineGamesCompleteDelegate = NULL;

	if ( ! pFnClearFindOnlineGamesCompleteDelegate )
		pFnClearFindOnlineGamesCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25561 ];

	UOnlineGameInterface_execClearFindOnlineGamesCompleteDelegate_Parms ClearFindOnlineGamesCompleteDelegate_Parms;
	memcpy ( &ClearFindOnlineGamesCompleteDelegate_Parms.FindOnlineGamesCompleteDelegate, &FindOnlineGamesCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearFindOnlineGamesCompleteDelegate, &ClearFindOnlineGamesCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddFindOnlineGamesCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         FindOnlineGamesCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddFindOnlineGamesCompleteDelegate ( struct FScriptDelegate FindOnlineGamesCompleteDelegate )
{
	static UFunction* pFnAddFindOnlineGamesCompleteDelegate = NULL;

	if ( ! pFnAddFindOnlineGamesCompleteDelegate )
		pFnAddFindOnlineGamesCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25559 ];

	UOnlineGameInterface_execAddFindOnlineGamesCompleteDelegate_Parms AddFindOnlineGamesCompleteDelegate_Parms;
	memcpy ( &AddFindOnlineGamesCompleteDelegate_Parms.FindOnlineGamesCompleteDelegate, &FindOnlineGamesCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddFindOnlineGamesCompleteDelegate, &AddFindOnlineGamesCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnFindOnlineGamesComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnFindOnlineGamesComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnFindOnlineGamesComplete = NULL;

	if ( ! pFnOnFindOnlineGamesComplete )
		pFnOnFindOnlineGamesComplete = (UFunction*) UObject::GObjObjects()->Data[ 25557 ];

	UOnlineGameInterface_execOnFindOnlineGamesComplete_Parms OnFindOnlineGamesComplete_Parms;
	OnFindOnlineGamesComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnFindOnlineGamesComplete, &OnFindOnlineGamesComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.FindOnlineGames
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  SearchingPlayerNum             ( CPF_Parm )
// class UOnlineGameSearch*       SearchSettings                 ( CPF_Parm )

bool UOnlineGameInterface::FindOnlineGames ( unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings )
{
	static UFunction* pFnFindOnlineGames = NULL;

	if ( ! pFnFindOnlineGames )
		pFnFindOnlineGames = (UFunction*) UObject::GObjObjects()->Data[ 25553 ];

	UOnlineGameInterface_execFindOnlineGames_Parms FindOnlineGames_Parms;
	FindOnlineGames_Parms.SearchingPlayerNum = SearchingPlayerNum;
	FindOnlineGames_Parms.SearchSettings = SearchSettings;

	this->ProcessEvent ( pFnFindOnlineGames, &FindOnlineGames_Parms, NULL );

	return FindOnlineGames_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearDestroyOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         DestroyOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearDestroyOnlineGameCompleteDelegate ( struct FScriptDelegate DestroyOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearDestroyOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearDestroyOnlineGameCompleteDelegate )
		pFnClearDestroyOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25551 ];

	UOnlineGameInterface_execClearDestroyOnlineGameCompleteDelegate_Parms ClearDestroyOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearDestroyOnlineGameCompleteDelegate_Parms.DestroyOnlineGameCompleteDelegate, &DestroyOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearDestroyOnlineGameCompleteDelegate, &ClearDestroyOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddDestroyOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         DestroyOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddDestroyOnlineGameCompleteDelegate ( struct FScriptDelegate DestroyOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddDestroyOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddDestroyOnlineGameCompleteDelegate )
		pFnAddDestroyOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25549 ];

	UOnlineGameInterface_execAddDestroyOnlineGameCompleteDelegate_Parms AddDestroyOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddDestroyOnlineGameCompleteDelegate_Parms.DestroyOnlineGameCompleteDelegate, &DestroyOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddDestroyOnlineGameCompleteDelegate, &AddDestroyOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnDestroyOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnDestroyOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDestroyOnlineGameComplete = NULL;

	if ( ! pFnOnDestroyOnlineGameComplete )
		pFnOnDestroyOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 25546 ];

	UOnlineGameInterface_execOnDestroyOnlineGameComplete_Parms OnDestroyOnlineGameComplete_Parms;
	memcpy ( &OnDestroyOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnDestroyOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDestroyOnlineGameComplete, &OnDestroyOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.DestroyOnlineGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineGameInterface::DestroyOnlineGame ( struct FName SessionName )
{
	static UFunction* pFnDestroyOnlineGame = NULL;

	if ( ! pFnDestroyOnlineGame )
		pFnDestroyOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 11612 ];

	UOnlineGameInterface_execDestroyOnlineGame_Parms DestroyOnlineGame_Parms;
	memcpy ( &DestroyOnlineGame_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnDestroyOnlineGame, &DestroyOnlineGame_Parms, NULL );

	return DestroyOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.GetGameSettings
// [0x00020000] 
// Parameters infos:
// class UOnlineGameSettings*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

class UOnlineGameSettings* UOnlineGameInterface::GetGameSettings ( struct FName SessionName )
{
	static UFunction* pFnGetGameSettings = NULL;

	if ( ! pFnGetGameSettings )
		pFnGetGameSettings = (UFunction*) UObject::GObjObjects()->Data[ 10784 ];

	UOnlineGameInterface_execGetGameSettings_Parms GetGameSettings_Parms;
	memcpy ( &GetGameSettings_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnGetGameSettings, &GetGameSettings_Parms, NULL );

	return GetGameSettings_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearUpdateOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UpdateOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearUpdateOnlineGameCompleteDelegate ( struct FScriptDelegate UpdateOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearUpdateOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearUpdateOnlineGameCompleteDelegate )
		pFnClearUpdateOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25542 ];

	UOnlineGameInterface_execClearUpdateOnlineGameCompleteDelegate_Parms ClearUpdateOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearUpdateOnlineGameCompleteDelegate_Parms.UpdateOnlineGameCompleteDelegate, &UpdateOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearUpdateOnlineGameCompleteDelegate, &ClearUpdateOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddUpdateOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UpdateOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddUpdateOnlineGameCompleteDelegate ( struct FScriptDelegate UpdateOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddUpdateOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddUpdateOnlineGameCompleteDelegate )
		pFnAddUpdateOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25540 ];

	UOnlineGameInterface_execAddUpdateOnlineGameCompleteDelegate_Parms AddUpdateOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddUpdateOnlineGameCompleteDelegate_Parms.UpdateOnlineGameCompleteDelegate, &UpdateOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddUpdateOnlineGameCompleteDelegate, &AddUpdateOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnUpdateOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnUpdateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnUpdateOnlineGameComplete = NULL;

	if ( ! pFnOnUpdateOnlineGameComplete )
		pFnOnUpdateOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 25537 ];

	UOnlineGameInterface_execOnUpdateOnlineGameComplete_Parms OnUpdateOnlineGameComplete_Parms;
	memcpy ( &OnUpdateOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnUpdateOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnUpdateOnlineGameComplete, &OnUpdateOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.UpdateOnlineGame
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// class UOnlineGameSettings*     UpdatedGameSettings            ( CPF_Parm )
// unsigned long                  bShouldRefreshOnlineData       ( CPF_OptionalParm | CPF_Parm )

bool UOnlineGameInterface::UpdateOnlineGame ( struct FName SessionName, class UOnlineGameSettings* UpdatedGameSettings, unsigned long bShouldRefreshOnlineData )
{
	static UFunction* pFnUpdateOnlineGame = NULL;

	if ( ! pFnUpdateOnlineGame )
		pFnUpdateOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 25532 ];

	UOnlineGameInterface_execUpdateOnlineGame_Parms UpdateOnlineGame_Parms;
	memcpy ( &UpdateOnlineGame_Parms.SessionName, &SessionName, 0x8 );
	UpdateOnlineGame_Parms.UpdatedGameSettings = UpdatedGameSettings;
	UpdateOnlineGame_Parms.bShouldRefreshOnlineData = bShouldRefreshOnlineData;

	this->ProcessEvent ( pFnUpdateOnlineGame, &UpdateOnlineGame_Parms, NULL );

	return UpdateOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearCreateOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CreateOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearCreateOnlineGameCompleteDelegate ( struct FScriptDelegate CreateOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearCreateOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearCreateOnlineGameCompleteDelegate )
		pFnClearCreateOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25530 ];

	UOnlineGameInterface_execClearCreateOnlineGameCompleteDelegate_Parms ClearCreateOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearCreateOnlineGameCompleteDelegate_Parms.CreateOnlineGameCompleteDelegate, &CreateOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearCreateOnlineGameCompleteDelegate, &ClearCreateOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddCreateOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CreateOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddCreateOnlineGameCompleteDelegate ( struct FScriptDelegate CreateOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddCreateOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddCreateOnlineGameCompleteDelegate )
		pFnAddCreateOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25528 ];

	UOnlineGameInterface_execAddCreateOnlineGameCompleteDelegate_Parms AddCreateOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddCreateOnlineGameCompleteDelegate_Parms.CreateOnlineGameCompleteDelegate, &CreateOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddCreateOnlineGameCompleteDelegate, &AddCreateOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnCreateOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnCreateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnCreateOnlineGameComplete = NULL;

	if ( ! pFnOnCreateOnlineGameComplete )
		pFnOnCreateOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 25525 ];

	UOnlineGameInterface_execOnCreateOnlineGameComplete_Parms OnCreateOnlineGameComplete_Parms;
	memcpy ( &OnCreateOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnCreateOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnCreateOnlineGameComplete, &OnCreateOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.CreateOnlineGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  HostingPlayerNum               ( CPF_Parm )
// struct FName                   SessionName                    ( CPF_Parm )
// class UOnlineGameSettings*     NewGameSettings                ( CPF_Parm )

bool UOnlineGameInterface::CreateOnlineGame ( unsigned char HostingPlayerNum, struct FName SessionName, class UOnlineGameSettings* NewGameSettings )
{
	static UFunction* pFnCreateOnlineGame = NULL;

	if ( ! pFnCreateOnlineGame )
		pFnCreateOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 21079 ];

	UOnlineGameInterface_execCreateOnlineGame_Parms CreateOnlineGame_Parms;
	CreateOnlineGame_Parms.HostingPlayerNum = HostingPlayerNum;
	memcpy ( &CreateOnlineGame_Parms.SessionName, &SessionName, 0x8 );
	CreateOnlineGame_Parms.NewGameSettings = NewGameSettings;

	this->ProcessEvent ( pFnCreateOnlineGame, &CreateOnlineGame_Parms, NULL );

	return CreateOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.GetAvailableDownloadCounts
// [0x00420000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            NewDownloads                   ( CPF_Parm | CPF_OutParm )
// int                            TotalDownloads                 ( CPF_Parm | CPF_OutParm )

void UOnlineContentInterface::GetAvailableDownloadCounts ( unsigned char LocalUserNum, int* NewDownloads, int* TotalDownloads )
{
	static UFunction* pFnGetAvailableDownloadCounts = NULL;

	if ( ! pFnGetAvailableDownloadCounts )
		pFnGetAvailableDownloadCounts = (UFunction*) UObject::GObjObjects()->Data[ 25500 ];

	UOnlineContentInterface_execGetAvailableDownloadCounts_Parms GetAvailableDownloadCounts_Parms;
	GetAvailableDownloadCounts_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetAvailableDownloadCounts, &GetAvailableDownloadCounts_Parms, NULL );

	if ( NewDownloads )
		*NewDownloads = GetAvailableDownloadCounts_Parms.NewDownloads;

	if ( TotalDownloads )
		*TotalDownloads = GetAvailableDownloadCounts_Parms.TotalDownloads;
};

// Function Engine.OnlineContentInterface.ClearQueryAvailableDownloadsComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         QueryDownloadsDelegate         ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::ClearQueryAvailableDownloadsComplete ( unsigned char LocalUserNum, struct FScriptDelegate QueryDownloadsDelegate )
{
	static UFunction* pFnClearQueryAvailableDownloadsComplete = NULL;

	if ( ! pFnClearQueryAvailableDownloadsComplete )
		pFnClearQueryAvailableDownloadsComplete = (UFunction*) UObject::GObjObjects()->Data[ 25497 ];

	UOnlineContentInterface_execClearQueryAvailableDownloadsComplete_Parms ClearQueryAvailableDownloadsComplete_Parms;
	ClearQueryAvailableDownloadsComplete_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearQueryAvailableDownloadsComplete_Parms.QueryDownloadsDelegate, &QueryDownloadsDelegate, 0x10 );

	this->ProcessEvent ( pFnClearQueryAvailableDownloadsComplete, &ClearQueryAvailableDownloadsComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.AddQueryAvailableDownloadsComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         QueryDownloadsDelegate         ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::AddQueryAvailableDownloadsComplete ( unsigned char LocalUserNum, struct FScriptDelegate QueryDownloadsDelegate )
{
	static UFunction* pFnAddQueryAvailableDownloadsComplete = NULL;

	if ( ! pFnAddQueryAvailableDownloadsComplete )
		pFnAddQueryAvailableDownloadsComplete = (UFunction*) UObject::GObjObjects()->Data[ 25494 ];

	UOnlineContentInterface_execAddQueryAvailableDownloadsComplete_Parms AddQueryAvailableDownloadsComplete_Parms;
	AddQueryAvailableDownloadsComplete_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddQueryAvailableDownloadsComplete_Parms.QueryDownloadsDelegate, &QueryDownloadsDelegate, 0x10 );

	this->ProcessEvent ( pFnAddQueryAvailableDownloadsComplete, &AddQueryAvailableDownloadsComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.OnQueryAvailableDownloadsComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineContentInterface::OnQueryAvailableDownloadsComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnQueryAvailableDownloadsComplete = NULL;

	if ( ! pFnOnQueryAvailableDownloadsComplete )
		pFnOnQueryAvailableDownloadsComplete = (UFunction*) UObject::GObjObjects()->Data[ 25492 ];

	UOnlineContentInterface_execOnQueryAvailableDownloadsComplete_Parms OnQueryAvailableDownloadsComplete_Parms;
	OnQueryAvailableDownloadsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnQueryAvailableDownloadsComplete, &OnQueryAvailableDownloadsComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.QueryAvailableDownloads
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            CategoryMask                   ( CPF_OptionalParm | CPF_Parm )

bool UOnlineContentInterface::QueryAvailableDownloads ( unsigned char LocalUserNum, int CategoryMask )
{
	static UFunction* pFnQueryAvailableDownloads = NULL;

	if ( ! pFnQueryAvailableDownloads )
		pFnQueryAvailableDownloads = (UFunction*) UObject::GObjObjects()->Data[ 25488 ];

	UOnlineContentInterface_execQueryAvailableDownloads_Parms QueryAvailableDownloads_Parms;
	QueryAvailableDownloads_Parms.LocalUserNum = LocalUserNum;
	QueryAvailableDownloads_Parms.CategoryMask = CategoryMask;

	this->ProcessEvent ( pFnQueryAvailableDownloads, &QueryAvailableDownloads_Parms, NULL );

	return QueryAvailableDownloads_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.GetContentList
// [0x00420000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct TArray<struct FOnlineContent> ContentList                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

unsigned char UOnlineContentInterface::GetContentList ( unsigned char LocalUserNum, struct TArray<struct FOnlineContent>* ContentList )
{
	static UFunction* pFnGetContentList = NULL;

	if ( ! pFnGetContentList )
		pFnGetContentList = (UFunction*) UObject::GObjObjects()->Data[ 25483 ];

	UOnlineContentInterface_execGetContentList_Parms GetContentList_Parms;
	GetContentList_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetContentList, &GetContentList_Parms, NULL );

	if ( ContentList )
		memcpy ( ContentList, &GetContentList_Parms.ContentList, 0x10 );

	return GetContentList_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.ReadContentList
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineContentInterface::ReadContentList ( unsigned char LocalUserNum )
{
	static UFunction* pFnReadContentList = NULL;

	if ( ! pFnReadContentList )
		pFnReadContentList = (UFunction*) UObject::GObjObjects()->Data[ 25480 ];

	UOnlineContentInterface_execReadContentList_Parms ReadContentList_Parms;
	ReadContentList_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnReadContentList, &ReadContentList_Parms, NULL );

	return ReadContentList_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.ClearReadContentComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadContentCompleteDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::ClearReadContentComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadContentCompleteDelegate )
{
	static UFunction* pFnClearReadContentComplete = NULL;

	if ( ! pFnClearReadContentComplete )
		pFnClearReadContentComplete = (UFunction*) UObject::GObjObjects()->Data[ 25477 ];

	UOnlineContentInterface_execClearReadContentComplete_Parms ClearReadContentComplete_Parms;
	ClearReadContentComplete_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadContentComplete_Parms.ReadContentCompleteDelegate, &ReadContentCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadContentComplete, &ClearReadContentComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.AddReadContentComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadContentCompleteDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::AddReadContentComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadContentCompleteDelegate )
{
	static UFunction* pFnAddReadContentComplete = NULL;

	if ( ! pFnAddReadContentComplete )
		pFnAddReadContentComplete = (UFunction*) UObject::GObjObjects()->Data[ 25474 ];

	UOnlineContentInterface_execAddReadContentComplete_Parms AddReadContentComplete_Parms;
	AddReadContentComplete_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadContentComplete_Parms.ReadContentCompleteDelegate, &ReadContentCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadContentComplete, &AddReadContentComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.OnReadContentComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineContentInterface::OnReadContentComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadContentComplete = NULL;

	if ( ! pFnOnReadContentComplete )
		pFnOnReadContentComplete = (UFunction*) UObject::GObjObjects()->Data[ 25472 ];

	UOnlineContentInterface_execOnReadContentComplete_Parms OnReadContentComplete_Parms;
	OnReadContentComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadContentComplete, &OnReadContentComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.ClearContentChangeDelegate
// [0x00024000] 
// Parameters infos:
// struct FScriptDelegate         ContentDelegate                ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  LocalUserNum                   ( CPF_OptionalParm | CPF_Parm )

void UOnlineContentInterface::ClearContentChangeDelegate ( struct FScriptDelegate ContentDelegate, unsigned char LocalUserNum )
{
	static UFunction* pFnClearContentChangeDelegate = NULL;

	if ( ! pFnClearContentChangeDelegate )
		pFnClearContentChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25469 ];

	UOnlineContentInterface_execClearContentChangeDelegate_Parms ClearContentChangeDelegate_Parms;
	memcpy ( &ClearContentChangeDelegate_Parms.ContentDelegate, &ContentDelegate, 0x10 );
	ClearContentChangeDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnClearContentChangeDelegate, &ClearContentChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineContentInterface.AddContentChangeDelegate
// [0x00024000] 
// Parameters infos:
// struct FScriptDelegate         ContentDelegate                ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  LocalUserNum                   ( CPF_OptionalParm | CPF_Parm )

void UOnlineContentInterface::AddContentChangeDelegate ( struct FScriptDelegate ContentDelegate, unsigned char LocalUserNum )
{
	static UFunction* pFnAddContentChangeDelegate = NULL;

	if ( ! pFnAddContentChangeDelegate )
		pFnAddContentChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25466 ];

	UOnlineContentInterface_execAddContentChangeDelegate_Parms AddContentChangeDelegate_Parms;
	memcpy ( &AddContentChangeDelegate_Parms.ContentDelegate, &ContentDelegate, 0x10 );
	AddContentChangeDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnAddContentChangeDelegate, &AddContentChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineContentInterface.OnContentChange
// [0x00120000] 
// Parameters infos:

void UOnlineContentInterface::OnContentChange ( )
{
	static UFunction* pFnOnContentChange = NULL;

	if ( ! pFnOnContentChange )
		pFnOnContentChange = (UFunction*) UObject::GObjObjects()->Data[ 25465 ];

	UOnlineContentInterface_execOnContentChange_Parms OnContentChange_Parms;

	this->ProcessEvent ( pFnOnContentChange, &OnContentChange_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.UnmuteAll
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::UnmuteAll ( unsigned char LocalUserNum )
{
	static UFunction* pFnUnmuteAll = NULL;

	if ( ! pFnUnmuteAll )
		pFnUnmuteAll = (UFunction*) UObject::GObjObjects()->Data[ 26876 ];

	UOnlineVoiceInterface_execUnmuteAll_Parms UnmuteAll_Parms;
	UnmuteAll_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnUnmuteAll, &UnmuteAll_Parms, NULL );

	return UnmuteAll_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.MuteAll
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bAllowFriends                  ( CPF_Parm )

bool UOnlineVoiceInterface::MuteAll ( unsigned char LocalUserNum, unsigned long bAllowFriends )
{
	static UFunction* pFnMuteAll = NULL;

	if ( ! pFnMuteAll )
		pFnMuteAll = (UFunction*) UObject::GObjObjects()->Data[ 26872 ];

	UOnlineVoiceInterface_execMuteAll_Parms MuteAll_Parms;
	MuteAll_Parms.LocalUserNum = LocalUserNum;
	MuteAll_Parms.bAllowFriends = bAllowFriends;

	this->ProcessEvent ( pFnMuteAll, &MuteAll_Parms, NULL );

	return MuteAll_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.SetSpeechRecognitionObject
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class USpeechRecognition*      SpeechRecogObj                 ( CPF_Parm )

bool UOnlineVoiceInterface::SetSpeechRecognitionObject ( unsigned char LocalUserNum, class USpeechRecognition* SpeechRecogObj )
{
	static UFunction* pFnSetSpeechRecognitionObject = NULL;

	if ( ! pFnSetSpeechRecognitionObject )
		pFnSetSpeechRecognitionObject = (UFunction*) UObject::GObjObjects()->Data[ 26868 ];

	UOnlineVoiceInterface_execSetSpeechRecognitionObject_Parms SetSpeechRecognitionObject_Parms;
	SetSpeechRecognitionObject_Parms.LocalUserNum = LocalUserNum;
	SetSpeechRecognitionObject_Parms.SpeechRecogObj = SpeechRecogObj;

	this->ProcessEvent ( pFnSetSpeechRecognitionObject, &SetSpeechRecognitionObject_Parms, NULL );

	return SetSpeechRecognitionObject_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.SelectVocabulary
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            VocabularyId                   ( CPF_Parm )

bool UOnlineVoiceInterface::SelectVocabulary ( unsigned char LocalUserNum, int VocabularyId )
{
	static UFunction* pFnSelectVocabulary = NULL;

	if ( ! pFnSelectVocabulary )
		pFnSelectVocabulary = (UFunction*) UObject::GObjObjects()->Data[ 26864 ];

	UOnlineVoiceInterface_execSelectVocabulary_Parms SelectVocabulary_Parms;
	SelectVocabulary_Parms.LocalUserNum = LocalUserNum;
	SelectVocabulary_Parms.VocabularyId = VocabularyId;

	this->ProcessEvent ( pFnSelectVocabulary, &SelectVocabulary_Parms, NULL );

	return SelectVocabulary_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.ClearRecognitionCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         RecognitionDelegate            ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineVoiceInterface::ClearRecognitionCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate RecognitionDelegate )
{
	static UFunction* pFnClearRecognitionCompleteDelegate = NULL;

	if ( ! pFnClearRecognitionCompleteDelegate )
		pFnClearRecognitionCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26861 ];

	UOnlineVoiceInterface_execClearRecognitionCompleteDelegate_Parms ClearRecognitionCompleteDelegate_Parms;
	ClearRecognitionCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearRecognitionCompleteDelegate_Parms.RecognitionDelegate, &RecognitionDelegate, 0x10 );

	this->ProcessEvent ( pFnClearRecognitionCompleteDelegate, &ClearRecognitionCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.AddRecognitionCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         RecognitionDelegate            ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineVoiceInterface::AddRecognitionCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate RecognitionDelegate )
{
	static UFunction* pFnAddRecognitionCompleteDelegate = NULL;

	if ( ! pFnAddRecognitionCompleteDelegate )
		pFnAddRecognitionCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26858 ];

	UOnlineVoiceInterface_execAddRecognitionCompleteDelegate_Parms AddRecognitionCompleteDelegate_Parms;
	AddRecognitionCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddRecognitionCompleteDelegate_Parms.RecognitionDelegate, &RecognitionDelegate, 0x10 );

	this->ProcessEvent ( pFnAddRecognitionCompleteDelegate, &AddRecognitionCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.OnRecognitionComplete
// [0x00120000] 
// Parameters infos:

void UOnlineVoiceInterface::OnRecognitionComplete ( )
{
	static UFunction* pFnOnRecognitionComplete = NULL;

	if ( ! pFnOnRecognitionComplete )
		pFnOnRecognitionComplete = (UFunction*) UObject::GObjObjects()->Data[ 26857 ];

	UOnlineVoiceInterface_execOnRecognitionComplete_Parms OnRecognitionComplete_Parms;

	this->ProcessEvent ( pFnOnRecognitionComplete, &OnRecognitionComplete_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.GetRecognitionResults
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct TArray<struct FSpeechRecognizedWord> Words                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineVoiceInterface::GetRecognitionResults ( unsigned char LocalUserNum, struct TArray<struct FSpeechRecognizedWord>* Words )
{
	static UFunction* pFnGetRecognitionResults = NULL;

	if ( ! pFnGetRecognitionResults )
		pFnGetRecognitionResults = (UFunction*) UObject::GObjObjects()->Data[ 26852 ];

	UOnlineVoiceInterface_execGetRecognitionResults_Parms GetRecognitionResults_Parms;
	GetRecognitionResults_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetRecognitionResults, &GetRecognitionResults_Parms, NULL );

	if ( Words )
		memcpy ( Words, &GetRecognitionResults_Parms.Words, 0x10 );

	return GetRecognitionResults_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.StopSpeechRecognition
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::StopSpeechRecognition ( unsigned char LocalUserNum )
{
	static UFunction* pFnStopSpeechRecognition = NULL;

	if ( ! pFnStopSpeechRecognition )
		pFnStopSpeechRecognition = (UFunction*) UObject::GObjObjects()->Data[ 26849 ];

	UOnlineVoiceInterface_execStopSpeechRecognition_Parms StopSpeechRecognition_Parms;
	StopSpeechRecognition_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnStopSpeechRecognition, &StopSpeechRecognition_Parms, NULL );

	return StopSpeechRecognition_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.StartSpeechRecognition
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::StartSpeechRecognition ( unsigned char LocalUserNum )
{
	static UFunction* pFnStartSpeechRecognition = NULL;

	if ( ! pFnStartSpeechRecognition )
		pFnStartSpeechRecognition = (UFunction*) UObject::GObjObjects()->Data[ 26846 ];

	UOnlineVoiceInterface_execStartSpeechRecognition_Parms StartSpeechRecognition_Parms;
	StartSpeechRecognition_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnStartSpeechRecognition, &StartSpeechRecognition_Parms, NULL );

	return StartSpeechRecognition_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.StopNetworkedVoice
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UOnlineVoiceInterface::StopNetworkedVoice ( unsigned char LocalUserNum )
{
	static UFunction* pFnStopNetworkedVoice = NULL;

	if ( ! pFnStopNetworkedVoice )
		pFnStopNetworkedVoice = (UFunction*) UObject::GObjObjects()->Data[ 26844 ];

	UOnlineVoiceInterface_execStopNetworkedVoice_Parms StopNetworkedVoice_Parms;
	StopNetworkedVoice_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnStopNetworkedVoice, &StopNetworkedVoice_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.StartNetworkedVoice
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UOnlineVoiceInterface::StartNetworkedVoice ( unsigned char LocalUserNum )
{
	static UFunction* pFnStartNetworkedVoice = NULL;

	if ( ! pFnStartNetworkedVoice )
		pFnStartNetworkedVoice = (UFunction*) UObject::GObjObjects()->Data[ 26842 ];

	UOnlineVoiceInterface_execStartNetworkedVoice_Parms StartNetworkedVoice_Parms;
	StartNetworkedVoice_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnStartNetworkedVoice, &StartNetworkedVoice_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.ClearPlayerTalkingDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         TalkerDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineVoiceInterface::ClearPlayerTalkingDelegate ( struct FScriptDelegate TalkerDelegate )
{
	static UFunction* pFnClearPlayerTalkingDelegate = NULL;

	if ( ! pFnClearPlayerTalkingDelegate )
		pFnClearPlayerTalkingDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26840 ];

	UOnlineVoiceInterface_execClearPlayerTalkingDelegate_Parms ClearPlayerTalkingDelegate_Parms;
	memcpy ( &ClearPlayerTalkingDelegate_Parms.TalkerDelegate, &TalkerDelegate, 0x10 );

	this->ProcessEvent ( pFnClearPlayerTalkingDelegate, &ClearPlayerTalkingDelegate_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.AddPlayerTalkingDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         TalkerDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineVoiceInterface::AddPlayerTalkingDelegate ( struct FScriptDelegate TalkerDelegate )
{
	static UFunction* pFnAddPlayerTalkingDelegate = NULL;

	if ( ! pFnAddPlayerTalkingDelegate )
		pFnAddPlayerTalkingDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26838 ];

	UOnlineVoiceInterface_execAddPlayerTalkingDelegate_Parms AddPlayerTalkingDelegate_Parms;
	memcpy ( &AddPlayerTalkingDelegate_Parms.TalkerDelegate, &TalkerDelegate, 0x10 );

	this->ProcessEvent ( pFnAddPlayerTalkingDelegate, &AddPlayerTalkingDelegate_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.OnPlayerTalkingStateChange
// [0x00120000] 
// Parameters infos:
// struct FUniqueNetId            Player                         ( CPF_Parm )
// unsigned long                  bIsTalking                     ( CPF_Parm )

void UOnlineVoiceInterface::OnPlayerTalkingStateChange ( struct FUniqueNetId Player, unsigned long bIsTalking )
{
	static UFunction* pFnOnPlayerTalkingStateChange = NULL;

	if ( ! pFnOnPlayerTalkingStateChange )
		pFnOnPlayerTalkingStateChange = (UFunction*) UObject::GObjObjects()->Data[ 26835 ];

	UOnlineVoiceInterface_execOnPlayerTalkingStateChange_Parms OnPlayerTalkingStateChange_Parms;
	memcpy ( &OnPlayerTalkingStateChange_Parms.Player, &Player, 0x8 );
	OnPlayerTalkingStateChange_Parms.bIsTalking = bIsTalking;

	this->ProcessEvent ( pFnOnPlayerTalkingStateChange, &OnPlayerTalkingStateChange_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.UnmuteRemoteTalker
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineVoiceInterface::UnmuteRemoteTalker ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnUnmuteRemoteTalker = NULL;

	if ( ! pFnUnmuteRemoteTalker )
		pFnUnmuteRemoteTalker = (UFunction*) UObject::GObjObjects()->Data[ 11556 ];

	UOnlineVoiceInterface_execUnmuteRemoteTalker_Parms UnmuteRemoteTalker_Parms;
	UnmuteRemoteTalker_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &UnmuteRemoteTalker_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnUnmuteRemoteTalker, &UnmuteRemoteTalker_Parms, NULL );

	return UnmuteRemoteTalker_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.MuteRemoteTalker
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineVoiceInterface::MuteRemoteTalker ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnMuteRemoteTalker = NULL;

	if ( ! pFnMuteRemoteTalker )
		pFnMuteRemoteTalker = (UFunction*) UObject::GObjObjects()->Data[ 11551 ];

	UOnlineVoiceInterface_execMuteRemoteTalker_Parms MuteRemoteTalker_Parms;
	MuteRemoteTalker_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &MuteRemoteTalker_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnMuteRemoteTalker, &MuteRemoteTalker_Parms, NULL );

	return MuteRemoteTalker_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.SetRemoteTalkerPriority
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// int                            Priority                       ( CPF_Parm )

bool UOnlineVoiceInterface::SetRemoteTalkerPriority ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID, int Priority )
{
	static UFunction* pFnSetRemoteTalkerPriority = NULL;

	if ( ! pFnSetRemoteTalkerPriority )
		pFnSetRemoteTalkerPriority = (UFunction*) UObject::GObjObjects()->Data[ 26826 ];

	UOnlineVoiceInterface_execSetRemoteTalkerPriority_Parms SetRemoteTalkerPriority_Parms;
	SetRemoteTalkerPriority_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &SetRemoteTalkerPriority_Parms.PlayerID, &PlayerID, 0x8 );
	SetRemoteTalkerPriority_Parms.Priority = Priority;

	this->ProcessEvent ( pFnSetRemoteTalkerPriority, &SetRemoteTalkerPriority_Parms, NULL );

	return SetRemoteTalkerPriority_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.IsHeadsetPresent
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::IsHeadsetPresent ( unsigned char LocalUserNum )
{
	static UFunction* pFnIsHeadsetPresent = NULL;

	if ( ! pFnIsHeadsetPresent )
		pFnIsHeadsetPresent = (UFunction*) UObject::GObjObjects()->Data[ 26823 ];

	UOnlineVoiceInterface_execIsHeadsetPresent_Parms IsHeadsetPresent_Parms;
	IsHeadsetPresent_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnIsHeadsetPresent, &IsHeadsetPresent_Parms, NULL );

	return IsHeadsetPresent_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.IsRemotePlayerTalking
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineVoiceInterface::IsRemotePlayerTalking ( struct FUniqueNetId PlayerID )
{
	static UFunction* pFnIsRemotePlayerTalking = NULL;

	if ( ! pFnIsRemotePlayerTalking )
		pFnIsRemotePlayerTalking = (UFunction*) UObject::GObjObjects()->Data[ 26820 ];

	UOnlineVoiceInterface_execIsRemotePlayerTalking_Parms IsRemotePlayerTalking_Parms;
	memcpy ( &IsRemotePlayerTalking_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnIsRemotePlayerTalking, &IsRemotePlayerTalking_Parms, NULL );

	return IsRemotePlayerTalking_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.IsLocalPlayerTalking
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::IsLocalPlayerTalking ( unsigned char LocalUserNum )
{
	static UFunction* pFnIsLocalPlayerTalking = NULL;

	if ( ! pFnIsLocalPlayerTalking )
		pFnIsLocalPlayerTalking = (UFunction*) UObject::GObjObjects()->Data[ 26817 ];

	UOnlineVoiceInterface_execIsLocalPlayerTalking_Parms IsLocalPlayerTalking_Parms;
	IsLocalPlayerTalking_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnIsLocalPlayerTalking, &IsLocalPlayerTalking_Parms, NULL );

	return IsLocalPlayerTalking_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.UnregisterRemoteTalker
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineVoiceInterface::UnregisterRemoteTalker ( struct FUniqueNetId PlayerID )
{
	static UFunction* pFnUnregisterRemoteTalker = NULL;

	if ( ! pFnUnregisterRemoteTalker )
		pFnUnregisterRemoteTalker = (UFunction*) UObject::GObjObjects()->Data[ 26814 ];

	UOnlineVoiceInterface_execUnregisterRemoteTalker_Parms UnregisterRemoteTalker_Parms;
	memcpy ( &UnregisterRemoteTalker_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnUnregisterRemoteTalker, &UnregisterRemoteTalker_Parms, NULL );

	return UnregisterRemoteTalker_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.RegisterRemoteTalker
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineVoiceInterface::RegisterRemoteTalker ( struct FUniqueNetId PlayerID )
{
	static UFunction* pFnRegisterRemoteTalker = NULL;

	if ( ! pFnRegisterRemoteTalker )
		pFnRegisterRemoteTalker = (UFunction*) UObject::GObjObjects()->Data[ 26811 ];

	UOnlineVoiceInterface_execRegisterRemoteTalker_Parms RegisterRemoteTalker_Parms;
	memcpy ( &RegisterRemoteTalker_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnRegisterRemoteTalker, &RegisterRemoteTalker_Parms, NULL );

	return RegisterRemoteTalker_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.UnregisterLocalTalker
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::UnregisterLocalTalker ( unsigned char LocalUserNum )
{
	static UFunction* pFnUnregisterLocalTalker = NULL;

	if ( ! pFnUnregisterLocalTalker )
		pFnUnregisterLocalTalker = (UFunction*) UObject::GObjObjects()->Data[ 26808 ];

	UOnlineVoiceInterface_execUnregisterLocalTalker_Parms UnregisterLocalTalker_Parms;
	UnregisterLocalTalker_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnUnregisterLocalTalker, &UnregisterLocalTalker_Parms, NULL );

	return UnregisterLocalTalker_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.RegisterLocalTalker
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::RegisterLocalTalker ( unsigned char LocalUserNum )
{
	static UFunction* pFnRegisterLocalTalker = NULL;

	if ( ! pFnRegisterLocalTalker )
		pFnRegisterLocalTalker = (UFunction*) UObject::GObjObjects()->Data[ 26805 ];

	UOnlineVoiceInterface_execRegisterLocalTalker_Parms RegisterLocalTalker_Parms;
	RegisterLocalTalker_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnRegisterLocalTalker, &RegisterLocalTalker_Parms, NULL );

	return RegisterLocalTalker_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.RegisterStatGuid
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// struct FString                 ClientStatGuid                 ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineStatsInterface::RegisterStatGuid ( struct FUniqueNetId PlayerID, struct FString* ClientStatGuid )
{
	static UFunction* pFnRegisterStatGuid = NULL;

	if ( ! pFnRegisterStatGuid )
		pFnRegisterStatGuid = (UFunction*) UObject::GObjObjects()->Data[ 11730 ];

	UOnlineStatsInterface_execRegisterStatGuid_Parms RegisterStatGuid_Parms;
	memcpy ( &RegisterStatGuid_Parms.PlayerID, &PlayerID, 0x8 );

	this->ProcessEvent ( pFnRegisterStatGuid, &RegisterStatGuid_Parms, NULL );

	if ( ClientStatGuid )
		memcpy ( ClientStatGuid, &RegisterStatGuid_Parms.ClientStatGuid, 0x10 );

	return RegisterStatGuid_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.GetClientStatGuid
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UOnlineStatsInterface::GetClientStatGuid ( )
{
	static UFunction* pFnGetClientStatGuid = NULL;

	if ( ! pFnGetClientStatGuid )
		pFnGetClientStatGuid = (UFunction*) UObject::GObjObjects()->Data[ 11726 ];

	UOnlineStatsInterface_execGetClientStatGuid_Parms GetClientStatGuid_Parms;

	this->ProcessEvent ( pFnGetClientStatGuid, &GetClientStatGuid_Parms, NULL );

	return GetClientStatGuid_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ClearRegisterHostStatGuidCompleteDelegateDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         RegisterHostStatGuidCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineStatsInterface::ClearRegisterHostStatGuidCompleteDelegateDelegate ( struct FScriptDelegate RegisterHostStatGuidCompleteDelegate )
{
	static UFunction* pFnClearRegisterHostStatGuidCompleteDelegateDelegate = NULL;

	if ( ! pFnClearRegisterHostStatGuidCompleteDelegateDelegate )
		pFnClearRegisterHostStatGuidCompleteDelegateDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26648 ];

	UOnlineStatsInterface_execClearRegisterHostStatGuidCompleteDelegateDelegate_Parms ClearRegisterHostStatGuidCompleteDelegateDelegate_Parms;
	memcpy ( &ClearRegisterHostStatGuidCompleteDelegateDelegate_Parms.RegisterHostStatGuidCompleteDelegate, &RegisterHostStatGuidCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearRegisterHostStatGuidCompleteDelegateDelegate, &ClearRegisterHostStatGuidCompleteDelegateDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.AddRegisterHostStatGuidCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         RegisterHostStatGuidCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineStatsInterface::AddRegisterHostStatGuidCompleteDelegate ( struct FScriptDelegate RegisterHostStatGuidCompleteDelegate )
{
	static UFunction* pFnAddRegisterHostStatGuidCompleteDelegate = NULL;

	if ( ! pFnAddRegisterHostStatGuidCompleteDelegate )
		pFnAddRegisterHostStatGuidCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26646 ];

	UOnlineStatsInterface_execAddRegisterHostStatGuidCompleteDelegate_Parms AddRegisterHostStatGuidCompleteDelegate_Parms;
	memcpy ( &AddRegisterHostStatGuidCompleteDelegate_Parms.RegisterHostStatGuidCompleteDelegate, &RegisterHostStatGuidCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddRegisterHostStatGuidCompleteDelegate, &AddRegisterHostStatGuidCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.OnRegisterHostStatGuidComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineStatsInterface::OnRegisterHostStatGuidComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnRegisterHostStatGuidComplete = NULL;

	if ( ! pFnOnRegisterHostStatGuidComplete )
		pFnOnRegisterHostStatGuidComplete = (UFunction*) UObject::GObjObjects()->Data[ 26644 ];

	UOnlineStatsInterface_execOnRegisterHostStatGuidComplete_Parms OnRegisterHostStatGuidComplete_Parms;
	OnRegisterHostStatGuidComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnRegisterHostStatGuidComplete, &OnRegisterHostStatGuidComplete_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.RegisterHostStatGuid
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 HostStatGuid                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineStatsInterface::RegisterHostStatGuid ( struct FString* HostStatGuid )
{
	static UFunction* pFnRegisterHostStatGuid = NULL;

	if ( ! pFnRegisterHostStatGuid )
		pFnRegisterHostStatGuid = (UFunction*) UObject::GObjObjects()->Data[ 11721 ];

	UOnlineStatsInterface_execRegisterHostStatGuid_Parms RegisterHostStatGuid_Parms;

	this->ProcessEvent ( pFnRegisterHostStatGuid, &RegisterHostStatGuid_Parms, NULL );

	if ( HostStatGuid )
		memcpy ( HostStatGuid, &RegisterHostStatGuid_Parms.HostStatGuid, 0x10 );

	return RegisterHostStatGuid_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.GetHostStatGuid
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UOnlineStatsInterface::GetHostStatGuid ( )
{
	static UFunction* pFnGetHostStatGuid = NULL;

	if ( ! pFnGetHostStatGuid )
		pFnGetHostStatGuid = (UFunction*) UObject::GObjObjects()->Data[ 20674 ];

	UOnlineStatsInterface_execGetHostStatGuid_Parms GetHostStatGuid_Parms;

	this->ProcessEvent ( pFnGetHostStatGuid, &GetHostStatGuid_Parms, NULL );

	return GetHostStatGuid_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.WriteOnlinePlayerScores
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// int                            LeaderboardId                  ( CPF_Parm )
// struct TArray<struct FOnlinePlayerScore> PlayerScores                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineStatsInterface::WriteOnlinePlayerScores ( struct FName SessionName, int LeaderboardId, struct TArray<struct FOnlinePlayerScore>* PlayerScores )
{
	static UFunction* pFnWriteOnlinePlayerScores = NULL;

	if ( ! pFnWriteOnlinePlayerScores )
		pFnWriteOnlinePlayerScores = (UFunction*) UObject::GObjObjects()->Data[ 11643 ];

	UOnlineStatsInterface_execWriteOnlinePlayerScores_Parms WriteOnlinePlayerScores_Parms;
	memcpy ( &WriteOnlinePlayerScores_Parms.SessionName, &SessionName, 0x8 );
	WriteOnlinePlayerScores_Parms.LeaderboardId = LeaderboardId;

	this->ProcessEvent ( pFnWriteOnlinePlayerScores, &WriteOnlinePlayerScores_Parms, NULL );

	if ( PlayerScores )
		memcpy ( PlayerScores, &WriteOnlinePlayerScores_Parms.PlayerScores, 0x10 );

	return WriteOnlinePlayerScores_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ClearFlushOnlineStatsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         FlushOnlineStatsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineStatsInterface::ClearFlushOnlineStatsCompleteDelegate ( struct FScriptDelegate FlushOnlineStatsCompleteDelegate )
{
	static UFunction* pFnClearFlushOnlineStatsCompleteDelegate = NULL;

	if ( ! pFnClearFlushOnlineStatsCompleteDelegate )
		pFnClearFlushOnlineStatsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26637 ];

	UOnlineStatsInterface_execClearFlushOnlineStatsCompleteDelegate_Parms ClearFlushOnlineStatsCompleteDelegate_Parms;
	memcpy ( &ClearFlushOnlineStatsCompleteDelegate_Parms.FlushOnlineStatsCompleteDelegate, &FlushOnlineStatsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearFlushOnlineStatsCompleteDelegate, &ClearFlushOnlineStatsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.AddFlushOnlineStatsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         FlushOnlineStatsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineStatsInterface::AddFlushOnlineStatsCompleteDelegate ( struct FScriptDelegate FlushOnlineStatsCompleteDelegate )
{
	static UFunction* pFnAddFlushOnlineStatsCompleteDelegate = NULL;

	if ( ! pFnAddFlushOnlineStatsCompleteDelegate )
		pFnAddFlushOnlineStatsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26635 ];

	UOnlineStatsInterface_execAddFlushOnlineStatsCompleteDelegate_Parms AddFlushOnlineStatsCompleteDelegate_Parms;
	memcpy ( &AddFlushOnlineStatsCompleteDelegate_Parms.FlushOnlineStatsCompleteDelegate, &FlushOnlineStatsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddFlushOnlineStatsCompleteDelegate, &AddFlushOnlineStatsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.OnFlushOnlineStatsComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineStatsInterface::OnFlushOnlineStatsComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnFlushOnlineStatsComplete = NULL;

	if ( ! pFnOnFlushOnlineStatsComplete )
		pFnOnFlushOnlineStatsComplete = (UFunction*) UObject::GObjObjects()->Data[ 26632 ];

	UOnlineStatsInterface_execOnFlushOnlineStatsComplete_Parms OnFlushOnlineStatsComplete_Parms;
	memcpy ( &OnFlushOnlineStatsComplete_Parms.SessionName, &SessionName, 0x8 );
	OnFlushOnlineStatsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnFlushOnlineStatsComplete, &OnFlushOnlineStatsComplete_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.FlushOnlineStats
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineStatsInterface::FlushOnlineStats ( struct FName SessionName )
{
	static UFunction* pFnFlushOnlineStats = NULL;

	if ( ! pFnFlushOnlineStats )
		pFnFlushOnlineStats = (UFunction*) UObject::GObjObjects()->Data[ 26629 ];

	UOnlineStatsInterface_execFlushOnlineStats_Parms FlushOnlineStats_Parms;
	memcpy ( &FlushOnlineStats_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnFlushOnlineStats, &FlushOnlineStats_Parms, NULL );

	return FlushOnlineStats_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.WriteOnlineStats
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct FUniqueNetId            Player                         ( CPF_Parm )
// class UOnlineStatsWrite*       StatsWrite                     ( CPF_Parm )

bool UOnlineStatsInterface::WriteOnlineStats ( struct FName SessionName, struct FUniqueNetId Player, class UOnlineStatsWrite* StatsWrite )
{
	static UFunction* pFnWriteOnlineStats = NULL;

	if ( ! pFnWriteOnlineStats )
		pFnWriteOnlineStats = (UFunction*) UObject::GObjObjects()->Data[ 26624 ];

	UOnlineStatsInterface_execWriteOnlineStats_Parms WriteOnlineStats_Parms;
	memcpy ( &WriteOnlineStats_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &WriteOnlineStats_Parms.Player, &Player, 0x8 );
	WriteOnlineStats_Parms.StatsWrite = StatsWrite;

	this->ProcessEvent ( pFnWriteOnlineStats, &WriteOnlineStats_Parms, NULL );

	return WriteOnlineStats_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.FreeStats
// [0x00020000] 
// Parameters infos:
// class UOnlineStatsRead*        StatsRead                      ( CPF_Parm )

void UOnlineStatsInterface::FreeStats ( class UOnlineStatsRead* StatsRead )
{
	static UFunction* pFnFreeStats = NULL;

	if ( ! pFnFreeStats )
		pFnFreeStats = (UFunction*) UObject::GObjObjects()->Data[ 26622 ];

	UOnlineStatsInterface_execFreeStats_Parms FreeStats_Parms;
	FreeStats_Parms.StatsRead = StatsRead;

	this->ProcessEvent ( pFnFreeStats, &FreeStats_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.ClearReadOnlineStatsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadOnlineStatsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineStatsInterface::ClearReadOnlineStatsCompleteDelegate ( struct FScriptDelegate ReadOnlineStatsCompleteDelegate )
{
	static UFunction* pFnClearReadOnlineStatsCompleteDelegate = NULL;

	if ( ! pFnClearReadOnlineStatsCompleteDelegate )
		pFnClearReadOnlineStatsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26620 ];

	UOnlineStatsInterface_execClearReadOnlineStatsCompleteDelegate_Parms ClearReadOnlineStatsCompleteDelegate_Parms;
	memcpy ( &ClearReadOnlineStatsCompleteDelegate_Parms.ReadOnlineStatsCompleteDelegate, &ReadOnlineStatsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadOnlineStatsCompleteDelegate, &ClearReadOnlineStatsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.AddReadOnlineStatsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadOnlineStatsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineStatsInterface::AddReadOnlineStatsCompleteDelegate ( struct FScriptDelegate ReadOnlineStatsCompleteDelegate )
{
	static UFunction* pFnAddReadOnlineStatsCompleteDelegate = NULL;

	if ( ! pFnAddReadOnlineStatsCompleteDelegate )
		pFnAddReadOnlineStatsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26618 ];

	UOnlineStatsInterface_execAddReadOnlineStatsCompleteDelegate_Parms AddReadOnlineStatsCompleteDelegate_Parms;
	memcpy ( &AddReadOnlineStatsCompleteDelegate_Parms.ReadOnlineStatsCompleteDelegate, &ReadOnlineStatsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadOnlineStatsCompleteDelegate, &AddReadOnlineStatsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.OnReadOnlineStatsComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineStatsInterface::OnReadOnlineStatsComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadOnlineStatsComplete = NULL;

	if ( ! pFnOnReadOnlineStatsComplete )
		pFnOnReadOnlineStatsComplete = (UFunction*) UObject::GObjObjects()->Data[ 26616 ];

	UOnlineStatsInterface_execOnReadOnlineStatsComplete_Parms OnReadOnlineStatsComplete_Parms;
	OnReadOnlineStatsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadOnlineStatsComplete, &OnReadOnlineStatsComplete_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.ReadOnlineStatsByRankAroundPlayer
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlineStatsRead*        StatsRead                      ( CPF_Parm )
// int                            NumRows                        ( CPF_OptionalParm | CPF_Parm )

bool UOnlineStatsInterface::ReadOnlineStatsByRankAroundPlayer ( unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead, int NumRows )
{
	static UFunction* pFnReadOnlineStatsByRankAroundPlayer = NULL;

	if ( ! pFnReadOnlineStatsByRankAroundPlayer )
		pFnReadOnlineStatsByRankAroundPlayer = (UFunction*) UObject::GObjObjects()->Data[ 26611 ];

	UOnlineStatsInterface_execReadOnlineStatsByRankAroundPlayer_Parms ReadOnlineStatsByRankAroundPlayer_Parms;
	ReadOnlineStatsByRankAroundPlayer_Parms.LocalUserNum = LocalUserNum;
	ReadOnlineStatsByRankAroundPlayer_Parms.StatsRead = StatsRead;
	ReadOnlineStatsByRankAroundPlayer_Parms.NumRows = NumRows;

	this->ProcessEvent ( pFnReadOnlineStatsByRankAroundPlayer, &ReadOnlineStatsByRankAroundPlayer_Parms, NULL );

	return ReadOnlineStatsByRankAroundPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ReadOnlineStatsByRank
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlineStatsRead*        StatsRead                      ( CPF_Parm )
// int                            StartIndex                     ( CPF_OptionalParm | CPF_Parm )
// int                            NumToRead                      ( CPF_OptionalParm | CPF_Parm )

bool UOnlineStatsInterface::ReadOnlineStatsByRank ( class UOnlineStatsRead* StatsRead, int StartIndex, int NumToRead )
{
	static UFunction* pFnReadOnlineStatsByRank = NULL;

	if ( ! pFnReadOnlineStatsByRank )
		pFnReadOnlineStatsByRank = (UFunction*) UObject::GObjObjects()->Data[ 26606 ];

	UOnlineStatsInterface_execReadOnlineStatsByRank_Parms ReadOnlineStatsByRank_Parms;
	ReadOnlineStatsByRank_Parms.StatsRead = StatsRead;
	ReadOnlineStatsByRank_Parms.StartIndex = StartIndex;
	ReadOnlineStatsByRank_Parms.NumToRead = NumToRead;

	this->ProcessEvent ( pFnReadOnlineStatsByRank, &ReadOnlineStatsByRank_Parms, NULL );

	return ReadOnlineStatsByRank_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ReadOnlineStatsForFriends
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlineStatsRead*        StatsRead                      ( CPF_Parm )

bool UOnlineStatsInterface::ReadOnlineStatsForFriends ( unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead )
{
	static UFunction* pFnReadOnlineStatsForFriends = NULL;

	if ( ! pFnReadOnlineStatsForFriends )
		pFnReadOnlineStatsForFriends = (UFunction*) UObject::GObjObjects()->Data[ 26602 ];

	UOnlineStatsInterface_execReadOnlineStatsForFriends_Parms ReadOnlineStatsForFriends_Parms;
	ReadOnlineStatsForFriends_Parms.LocalUserNum = LocalUserNum;
	ReadOnlineStatsForFriends_Parms.StatsRead = StatsRead;

	this->ProcessEvent ( pFnReadOnlineStatsForFriends, &ReadOnlineStatsForFriends_Parms, NULL );

	return ReadOnlineStatsForFriends_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ReadOnlineStats
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlineStatsRead*        StatsRead                      ( CPF_Parm )
// struct TArray<struct FUniqueNetId> Players                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineStatsInterface::ReadOnlineStats ( class UOnlineStatsRead* StatsRead, struct TArray<struct FUniqueNetId>* Players )
{
	static UFunction* pFnReadOnlineStats = NULL;

	if ( ! pFnReadOnlineStats )
		pFnReadOnlineStats = (UFunction*) UObject::GObjObjects()->Data[ 26597 ];

	UOnlineStatsInterface_execReadOnlineStats_Parms ReadOnlineStats_Parms;
	ReadOnlineStats_Parms.StatsRead = StatsRead;

	this->ProcessEvent ( pFnReadOnlineStats, &ReadOnlineStats_Parms, NULL );

	if ( Players )
		memcpy ( Players, &ReadOnlineStats_Parms.Players, 0x10 );

	return ReadOnlineStats_Parms.ReturnValue;
};

// Function Engine.OnlineNewsInterface.GetNews
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  NewsType                       ( CPF_Parm )

struct FString UOnlineNewsInterface::GetNews ( unsigned char LocalUserNum, unsigned char NewsType )
{
	static UFunction* pFnGetNews = NULL;

	if ( ! pFnGetNews )
		pFnGetNews = (UFunction*) UObject::GObjObjects()->Data[ 25770 ];

	UOnlineNewsInterface_execGetNews_Parms GetNews_Parms;
	GetNews_Parms.LocalUserNum = LocalUserNum;
	GetNews_Parms.NewsType = NewsType;

	this->ProcessEvent ( pFnGetNews, &GetNews_Parms, NULL );

	return GetNews_Parms.ReturnValue;
};

// Function Engine.OnlineNewsInterface.ClearReadNewsCompletedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadNewsDelegate               ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineNewsInterface::ClearReadNewsCompletedDelegate ( struct FScriptDelegate ReadNewsDelegate )
{
	static UFunction* pFnClearReadNewsCompletedDelegate = NULL;

	if ( ! pFnClearReadNewsCompletedDelegate )
		pFnClearReadNewsCompletedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25768 ];

	UOnlineNewsInterface_execClearReadNewsCompletedDelegate_Parms ClearReadNewsCompletedDelegate_Parms;
	memcpy ( &ClearReadNewsCompletedDelegate_Parms.ReadNewsDelegate, &ReadNewsDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadNewsCompletedDelegate, &ClearReadNewsCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlineNewsInterface.AddReadNewsCompletedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadNewsDelegate               ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineNewsInterface::AddReadNewsCompletedDelegate ( struct FScriptDelegate ReadNewsDelegate )
{
	static UFunction* pFnAddReadNewsCompletedDelegate = NULL;

	if ( ! pFnAddReadNewsCompletedDelegate )
		pFnAddReadNewsCompletedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25766 ];

	UOnlineNewsInterface_execAddReadNewsCompletedDelegate_Parms AddReadNewsCompletedDelegate_Parms;
	memcpy ( &AddReadNewsCompletedDelegate_Parms.ReadNewsDelegate, &ReadNewsDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadNewsCompletedDelegate, &AddReadNewsCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlineNewsInterface.OnReadNewsCompleted
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// unsigned char                  NewsType                       ( CPF_Parm )

void UOnlineNewsInterface::OnReadNewsCompleted ( unsigned long bWasSuccessful, unsigned char NewsType )
{
	static UFunction* pFnOnReadNewsCompleted = NULL;

	if ( ! pFnOnReadNewsCompleted )
		pFnOnReadNewsCompleted = (UFunction*) UObject::GObjObjects()->Data[ 25763 ];

	UOnlineNewsInterface_execOnReadNewsCompleted_Parms OnReadNewsCompleted_Parms;
	OnReadNewsCompleted_Parms.bWasSuccessful = bWasSuccessful;
	OnReadNewsCompleted_Parms.NewsType = NewsType;

	this->ProcessEvent ( pFnOnReadNewsCompleted, &OnReadNewsCompleted_Parms, NULL );
};

// Function Engine.OnlineNewsInterface.ReadNews
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  NewsType                       ( CPF_Parm )

bool UOnlineNewsInterface::ReadNews ( unsigned char LocalUserNum, unsigned char NewsType )
{
	static UFunction* pFnReadNews = NULL;

	if ( ! pFnReadNews )
		pFnReadNews = (UFunction*) UObject::GObjObjects()->Data[ 25759 ];

	UOnlineNewsInterface_execReadNews_Parms ReadNews_Parms;
	ReadNews_Parms.LocalUserNum = LocalUserNum;
	ReadNews_Parms.NewsType = NewsType;

	this->ProcessEvent ( pFnReadNews, &ReadNews_Parms, NULL );

	return ReadNews_Parms.ReturnValue;
};

// Function Engine.OnlinePartyChatInterface.ShowCommunitySessionsUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePartyChatInterface::ShowCommunitySessionsUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowCommunitySessionsUI = NULL;

	if ( ! pFnShowCommunitySessionsUI )
		pFnShowCommunitySessionsUI = (UFunction*) UObject::GObjObjects()->Data[ 25804 ];

	UOnlinePartyChatInterface_execShowCommunitySessionsUI_Parms ShowCommunitySessionsUI_Parms;
	ShowCommunitySessionsUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowCommunitySessionsUI, &ShowCommunitySessionsUI_Parms, NULL );

	return ShowCommunitySessionsUI_Parms.ReturnValue;
};

// Function Engine.OnlinePartyChatInterface.ShowVoiceChannelUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePartyChatInterface::ShowVoiceChannelUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowVoiceChannelUI = NULL;

	if ( ! pFnShowVoiceChannelUI )
		pFnShowVoiceChannelUI = (UFunction*) UObject::GObjObjects()->Data[ 25801 ];

	UOnlinePartyChatInterface_execShowVoiceChannelUI_Parms ShowVoiceChannelUI_Parms;
	ShowVoiceChannelUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowVoiceChannelUI, &ShowVoiceChannelUI_Parms, NULL );

	return ShowVoiceChannelUI_Parms.ReturnValue;
};

// Function Engine.OnlinePartyChatInterface.ShowPartyUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePartyChatInterface::ShowPartyUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowPartyUI = NULL;

	if ( ! pFnShowPartyUI )
		pFnShowPartyUI = (UFunction*) UObject::GObjObjects()->Data[ 25798 ];

	UOnlinePartyChatInterface_execShowPartyUI_Parms ShowPartyUI_Parms;
	ShowPartyUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowPartyUI, &ShowPartyUI_Parms, NULL );

	return ShowPartyUI_Parms.ReturnValue;
};

// Function Engine.OnlinePartyChatInterface.GetPartyBandwidth
// [0x00020000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UOnlinePartyChatInterface::GetPartyBandwidth ( )
{
	static UFunction* pFnGetPartyBandwidth = NULL;

	if ( ! pFnGetPartyBandwidth )
		pFnGetPartyBandwidth = (UFunction*) UObject::GObjObjects()->Data[ 25796 ];

	UOnlinePartyChatInterface_execGetPartyBandwidth_Parms GetPartyBandwidth_Parms;

	this->ProcessEvent ( pFnGetPartyBandwidth, &GetPartyBandwidth_Parms, NULL );

	return GetPartyBandwidth_Parms.ReturnValue;
};

// Function Engine.OnlinePartyChatInterface.SetPartyMemberCustomData
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FQWord                  Data1                          ( CPF_Parm )
// struct FQWord                  Data2                          ( CPF_Parm )

bool UOnlinePartyChatInterface::SetPartyMemberCustomData ( unsigned char LocalUserNum, struct FQWord Data1, struct FQWord Data2 )
{
	static UFunction* pFnSetPartyMemberCustomData = NULL;

	if ( ! pFnSetPartyMemberCustomData )
		pFnSetPartyMemberCustomData = (UFunction*) UObject::GObjObjects()->Data[ 25791 ];

	UOnlinePartyChatInterface_execSetPartyMemberCustomData_Parms SetPartyMemberCustomData_Parms;
	SetPartyMemberCustomData_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &SetPartyMemberCustomData_Parms.Data1, &Data1, 0x8 );
	memcpy ( &SetPartyMemberCustomData_Parms.Data2, &Data2, 0x8 );

	this->ProcessEvent ( pFnSetPartyMemberCustomData, &SetPartyMemberCustomData_Parms, NULL );

	return SetPartyMemberCustomData_Parms.ReturnValue;
};

// Function Engine.OnlinePartyChatInterface.GetPartyMemberInformation
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct TArray<struct FOnlinePartyMember> PartyMembers                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePartyChatInterface::GetPartyMemberInformation ( struct TArray<struct FOnlinePartyMember>* PartyMembers )
{
	static UFunction* pFnGetPartyMemberInformation = NULL;

	if ( ! pFnGetPartyMemberInformation )
		pFnGetPartyMemberInformation = (UFunction*) UObject::GObjObjects()->Data[ 25787 ];

	UOnlinePartyChatInterface_execGetPartyMemberInformation_Parms GetPartyMemberInformation_Parms;

	this->ProcessEvent ( pFnGetPartyMemberInformation, &GetPartyMemberInformation_Parms, NULL );

	if ( PartyMembers )
		memcpy ( PartyMembers, &GetPartyMemberInformation_Parms.PartyMembers, 0x10 );

	return GetPartyMemberInformation_Parms.ReturnValue;
};

// Function Engine.OnlinePartyChatInterface.ClearSendPartyGameInvitesCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         SendPartyGameInvitesCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePartyChatInterface::ClearSendPartyGameInvitesCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate SendPartyGameInvitesCompleteDelegate )
{
	static UFunction* pFnClearSendPartyGameInvitesCompleteDelegate = NULL;

	if ( ! pFnClearSendPartyGameInvitesCompleteDelegate )
		pFnClearSendPartyGameInvitesCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25784 ];

	UOnlinePartyChatInterface_execClearSendPartyGameInvitesCompleteDelegate_Parms ClearSendPartyGameInvitesCompleteDelegate_Parms;
	ClearSendPartyGameInvitesCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearSendPartyGameInvitesCompleteDelegate_Parms.SendPartyGameInvitesCompleteDelegate, &SendPartyGameInvitesCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearSendPartyGameInvitesCompleteDelegate, &ClearSendPartyGameInvitesCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePartyChatInterface.AddSendPartyGameInvitesCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         SendPartyGameInvitesCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePartyChatInterface::AddSendPartyGameInvitesCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate SendPartyGameInvitesCompleteDelegate )
{
	static UFunction* pFnAddSendPartyGameInvitesCompleteDelegate = NULL;

	if ( ! pFnAddSendPartyGameInvitesCompleteDelegate )
		pFnAddSendPartyGameInvitesCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25781 ];

	UOnlinePartyChatInterface_execAddSendPartyGameInvitesCompleteDelegate_Parms AddSendPartyGameInvitesCompleteDelegate_Parms;
	AddSendPartyGameInvitesCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddSendPartyGameInvitesCompleteDelegate_Parms.SendPartyGameInvitesCompleteDelegate, &SendPartyGameInvitesCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddSendPartyGameInvitesCompleteDelegate, &AddSendPartyGameInvitesCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePartyChatInterface.OnSendPartyGameInvitesComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePartyChatInterface::OnSendPartyGameInvitesComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnSendPartyGameInvitesComplete = NULL;

	if ( ! pFnOnSendPartyGameInvitesComplete )
		pFnOnSendPartyGameInvitesComplete = (UFunction*) UObject::GObjObjects()->Data[ 25779 ];

	UOnlinePartyChatInterface_execOnSendPartyGameInvitesComplete_Parms OnSendPartyGameInvitesComplete_Parms;
	OnSendPartyGameInvitesComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnSendPartyGameInvitesComplete, &OnSendPartyGameInvitesComplete_Parms, NULL );
};

// Function Engine.OnlinePartyChatInterface.SendPartyGameInvites
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePartyChatInterface::SendPartyGameInvites ( unsigned char LocalUserNum )
{
	static UFunction* pFnSendPartyGameInvites = NULL;

	if ( ! pFnSendPartyGameInvites )
		pFnSendPartyGameInvites = (UFunction*) UObject::GObjObjects()->Data[ 25776 ];

	UOnlinePartyChatInterface_execSendPartyGameInvites_Parms SendPartyGameInvites_Parms;
	SendPartyGameInvites_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnSendPartyGameInvites, &SendPartyGameInvites_Parms, NULL );

	return SendPartyGameInvites_Parms.ReturnValue;
};

// Function Engine.CoverReplicator.ClientReceiveLinkDisabledState
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned long                  bLinkDisabled                  ( CPF_Parm )

void ACoverReplicator::ClientReceiveLinkDisabledState ( int Index, class ACoverLink* Link, unsigned long bLinkDisabled )
{
	static UFunction* pFnClientReceiveLinkDisabledState = NULL;

	if ( ! pFnClientReceiveLinkDisabledState )
		pFnClientReceiveLinkDisabledState = (UFunction*) UObject::GObjObjects()->Data[ 17852 ];

	ACoverReplicator_execClientReceiveLinkDisabledState_Parms ClientReceiveLinkDisabledState_Parms;
	ClientReceiveLinkDisabledState_Parms.Index = Index;
	ClientReceiveLinkDisabledState_Parms.Link = Link;
	ClientReceiveLinkDisabledState_Parms.bLinkDisabled = bLinkDisabled;

	this->ProcessEvent ( pFnClientReceiveLinkDisabledState, &ClientReceiveLinkDisabledState_Parms, NULL );
};

// Function Engine.CoverReplicator.ServerSendLinkDisabledState
// [0x002200C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ACoverReplicator::ServerSendLinkDisabledState ( int Index )
{
	static UFunction* pFnServerSendLinkDisabledState = NULL;

	if ( ! pFnServerSendLinkDisabledState )
		pFnServerSendLinkDisabledState = (UFunction*) UObject::GObjObjects()->Data[ 17850 ];

	ACoverReplicator_execServerSendLinkDisabledState_Parms ServerSendLinkDisabledState_Parms;
	ServerSendLinkDisabledState_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSendLinkDisabledState, &ServerSendLinkDisabledState_Parms, NULL );
};

// Function Engine.CoverReplicator.NotifyLinkDisabledStateChange
// [0x00020002] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )

void ACoverReplicator::NotifyLinkDisabledStateChange ( class ACoverLink* Link )
{
	static UFunction* pFnNotifyLinkDisabledStateChange = NULL;

	if ( ! pFnNotifyLinkDisabledStateChange )
		pFnNotifyLinkDisabledStateChange = (UFunction*) UObject::GObjObjects()->Data[ 17846 ];

	ACoverReplicator_execNotifyLinkDisabledStateChange_Parms NotifyLinkDisabledStateChange_Parms;
	NotifyLinkDisabledStateChange_Parms.Link = Link;

	this->ProcessEvent ( pFnNotifyLinkDisabledStateChange, &NotifyLinkDisabledStateChange_Parms, NULL );
};

// Function Engine.CoverReplicator.ClientReceiveManualCoverTypeSlots
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned char                  NumCoverTypesChanged           ( CPF_Parm )
// struct FManualCoverTypeInfo    SlotsCoverTypeChanged          ( CPF_Parm )
// unsigned long                  bDone                          ( CPF_Parm )

void ACoverReplicator::ClientReceiveManualCoverTypeSlots ( int Index, class ACoverLink* Link, unsigned char NumCoverTypesChanged, struct FManualCoverTypeInfo* SlotsCoverTypeChanged, unsigned long bDone )
{
	static UFunction* pFnClientReceiveManualCoverTypeSlots = NULL;

	if ( ! pFnClientReceiveManualCoverTypeSlots )
		pFnClientReceiveManualCoverTypeSlots = (UFunction*) UObject::GObjObjects()->Data[ 17839 ];

	ACoverReplicator_execClientReceiveManualCoverTypeSlots_Parms ClientReceiveManualCoverTypeSlots_Parms;
	ClientReceiveManualCoverTypeSlots_Parms.Index = Index;
	ClientReceiveManualCoverTypeSlots_Parms.Link = Link;
	ClientReceiveManualCoverTypeSlots_Parms.NumCoverTypesChanged = NumCoverTypesChanged;
	memcpy ( &ClientReceiveManualCoverTypeSlots_Parms.SlotsCoverTypeChanged, &SlotsCoverTypeChanged, 0x20 );
	ClientReceiveManualCoverTypeSlots_Parms.bDone = bDone;

	this->ProcessEvent ( pFnClientReceiveManualCoverTypeSlots, &ClientReceiveManualCoverTypeSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.ServerSendManualCoverTypeSlots
// [0x002200C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ACoverReplicator::ServerSendManualCoverTypeSlots ( int Index )
{
	static UFunction* pFnServerSendManualCoverTypeSlots = NULL;

	if ( ! pFnServerSendManualCoverTypeSlots )
		pFnServerSendManualCoverTypeSlots = (UFunction*) UObject::GObjObjects()->Data[ 17832 ];

	ACoverReplicator_execServerSendManualCoverTypeSlots_Parms ServerSendManualCoverTypeSlots_Parms;
	ServerSendManualCoverTypeSlots_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSendManualCoverTypeSlots, &ServerSendManualCoverTypeSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.NotifySetManualCoverTypeForSlots
// [0x00420002] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned char                  NewCoverType                   ( CPF_Parm )
// struct TArray<int>             SlotIndices                    ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ACoverReplicator::NotifySetManualCoverTypeForSlots ( class ACoverLink* Link, unsigned char NewCoverType, struct TArray<int>* SlotIndices )
{
	static UFunction* pFnNotifySetManualCoverTypeForSlots = NULL;

	if ( ! pFnNotifySetManualCoverTypeForSlots )
		pFnNotifySetManualCoverTypeForSlots = (UFunction*) UObject::GObjObjects()->Data[ 17823 ];

	ACoverReplicator_execNotifySetManualCoverTypeForSlots_Parms NotifySetManualCoverTypeForSlots_Parms;
	NotifySetManualCoverTypeForSlots_Parms.Link = Link;
	NotifySetManualCoverTypeForSlots_Parms.NewCoverType = NewCoverType;

	this->ProcessEvent ( pFnNotifySetManualCoverTypeForSlots, &NotifySetManualCoverTypeForSlots_Parms, NULL );

	if ( SlotIndices )
		memcpy ( SlotIndices, &NotifySetManualCoverTypeForSlots_Parms.SlotIndices, 0x10 );
};

// Function Engine.CoverReplicator.ClientReceiveAdjustedSlots
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned char                  NumSlotsAdjusted               ( CPF_Parm )
// unsigned char                  SlotsAdjusted                  ( CPF_Parm )
// unsigned long                  bDone                          ( CPF_Parm )

void ACoverReplicator::ClientReceiveAdjustedSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsAdjusted, unsigned char* SlotsAdjusted, unsigned long bDone )
{
	static UFunction* pFnClientReceiveAdjustedSlots = NULL;

	if ( ! pFnClientReceiveAdjustedSlots )
		pFnClientReceiveAdjustedSlots = (UFunction*) UObject::GObjObjects()->Data[ 17816 ];

	ACoverReplicator_execClientReceiveAdjustedSlots_Parms ClientReceiveAdjustedSlots_Parms;
	ClientReceiveAdjustedSlots_Parms.Index = Index;
	ClientReceiveAdjustedSlots_Parms.Link = Link;
	ClientReceiveAdjustedSlots_Parms.NumSlotsAdjusted = NumSlotsAdjusted;
	memcpy ( &ClientReceiveAdjustedSlots_Parms.SlotsAdjusted, &SlotsAdjusted, 0x8 );
	ClientReceiveAdjustedSlots_Parms.bDone = bDone;

	this->ProcessEvent ( pFnClientReceiveAdjustedSlots, &ClientReceiveAdjustedSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.ServerSendAdjustedSlots
// [0x002200C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ACoverReplicator::ServerSendAdjustedSlots ( int Index )
{
	static UFunction* pFnServerSendAdjustedSlots = NULL;

	if ( ! pFnServerSendAdjustedSlots )
		pFnServerSendAdjustedSlots = (UFunction*) UObject::GObjObjects()->Data[ 17809 ];

	ACoverReplicator_execServerSendAdjustedSlots_Parms ServerSendAdjustedSlots_Parms;
	ServerSendAdjustedSlots_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSendAdjustedSlots, &ServerSendAdjustedSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.NotifyAutoAdjustSlots
// [0x00420002] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// struct TArray<int>             SlotIndices                    ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ACoverReplicator::NotifyAutoAdjustSlots ( class ACoverLink* Link, struct TArray<int>* SlotIndices )
{
	static UFunction* pFnNotifyAutoAdjustSlots = NULL;

	if ( ! pFnNotifyAutoAdjustSlots )
		pFnNotifyAutoAdjustSlots = (UFunction*) UObject::GObjObjects()->Data[ 17801 ];

	ACoverReplicator_execNotifyAutoAdjustSlots_Parms NotifyAutoAdjustSlots_Parms;
	NotifyAutoAdjustSlots_Parms.Link = Link;

	this->ProcessEvent ( pFnNotifyAutoAdjustSlots, &NotifyAutoAdjustSlots_Parms, NULL );

	if ( SlotIndices )
		memcpy ( SlotIndices, &NotifyAutoAdjustSlots_Parms.SlotIndices, 0x10 );
};

// Function Engine.CoverReplicator.ClientReceiveDisabledSlots
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned char                  NumSlotsDisabled               ( CPF_Parm )
// unsigned char                  SlotsDisabled                  ( CPF_Parm )
// unsigned long                  bDone                          ( CPF_Parm )

void ACoverReplicator::ClientReceiveDisabledSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsDisabled, unsigned char* SlotsDisabled, unsigned long bDone )
{
	static UFunction* pFnClientReceiveDisabledSlots = NULL;

	if ( ! pFnClientReceiveDisabledSlots )
		pFnClientReceiveDisabledSlots = (UFunction*) UObject::GObjObjects()->Data[ 17794 ];

	ACoverReplicator_execClientReceiveDisabledSlots_Parms ClientReceiveDisabledSlots_Parms;
	ClientReceiveDisabledSlots_Parms.Index = Index;
	ClientReceiveDisabledSlots_Parms.Link = Link;
	ClientReceiveDisabledSlots_Parms.NumSlotsDisabled = NumSlotsDisabled;
	memcpy ( &ClientReceiveDisabledSlots_Parms.SlotsDisabled, &SlotsDisabled, 0x8 );
	ClientReceiveDisabledSlots_Parms.bDone = bDone;

	this->ProcessEvent ( pFnClientReceiveDisabledSlots, &ClientReceiveDisabledSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.ServerSendDisabledSlots
// [0x002200C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ACoverReplicator::ServerSendDisabledSlots ( int Index )
{
	static UFunction* pFnServerSendDisabledSlots = NULL;

	if ( ! pFnServerSendDisabledSlots )
		pFnServerSendDisabledSlots = (UFunction*) UObject::GObjObjects()->Data[ 17787 ];

	ACoverReplicator_execServerSendDisabledSlots_Parms ServerSendDisabledSlots_Parms;
	ServerSendDisabledSlots_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSendDisabledSlots, &ServerSendDisabledSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.NotifyDisabledSlots
// [0x00420002] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// struct TArray<int>             SlotIndices                    ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ACoverReplicator::NotifyDisabledSlots ( class ACoverLink* Link, struct TArray<int>* SlotIndices )
{
	static UFunction* pFnNotifyDisabledSlots = NULL;

	if ( ! pFnNotifyDisabledSlots )
		pFnNotifyDisabledSlots = (UFunction*) UObject::GObjObjects()->Data[ 17779 ];

	ACoverReplicator_execNotifyDisabledSlots_Parms NotifyDisabledSlots_Parms;
	NotifyDisabledSlots_Parms.Link = Link;

	this->ProcessEvent ( pFnNotifyDisabledSlots, &NotifyDisabledSlots_Parms, NULL );

	if ( SlotIndices )
		memcpy ( SlotIndices, &NotifyDisabledSlots_Parms.SlotIndices, 0x10 );
};

// Function Engine.CoverReplicator.ClientReceiveEnabledSlots
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned char                  NumSlotsEnabled                ( CPF_Parm )
// unsigned char                  SlotsEnabled                   ( CPF_Parm )
// unsigned long                  bDone                          ( CPF_Parm )

void ACoverReplicator::ClientReceiveEnabledSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsEnabled, unsigned char* SlotsEnabled, unsigned long bDone )
{
	static UFunction* pFnClientReceiveEnabledSlots = NULL;

	if ( ! pFnClientReceiveEnabledSlots )
		pFnClientReceiveEnabledSlots = (UFunction*) UObject::GObjObjects()->Data[ 17772 ];

	ACoverReplicator_execClientReceiveEnabledSlots_Parms ClientReceiveEnabledSlots_Parms;
	ClientReceiveEnabledSlots_Parms.Index = Index;
	ClientReceiveEnabledSlots_Parms.Link = Link;
	ClientReceiveEnabledSlots_Parms.NumSlotsEnabled = NumSlotsEnabled;
	memcpy ( &ClientReceiveEnabledSlots_Parms.SlotsEnabled, &SlotsEnabled, 0x8 );
	ClientReceiveEnabledSlots_Parms.bDone = bDone;

	this->ProcessEvent ( pFnClientReceiveEnabledSlots, &ClientReceiveEnabledSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.ServerSendEnabledSlots
// [0x002200C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ACoverReplicator::ServerSendEnabledSlots ( int Index )
{
	static UFunction* pFnServerSendEnabledSlots = NULL;

	if ( ! pFnServerSendEnabledSlots )
		pFnServerSendEnabledSlots = (UFunction*) UObject::GObjObjects()->Data[ 17765 ];

	ACoverReplicator_execServerSendEnabledSlots_Parms ServerSendEnabledSlots_Parms;
	ServerSendEnabledSlots_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSendEnabledSlots, &ServerSendEnabledSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.NotifyEnabledSlots
// [0x00420002] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// struct TArray<int>             SlotIndices                    ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ACoverReplicator::NotifyEnabledSlots ( class ACoverLink* Link, struct TArray<int>* SlotIndices )
{
	static UFunction* pFnNotifyEnabledSlots = NULL;

	if ( ! pFnNotifyEnabledSlots )
		pFnNotifyEnabledSlots = (UFunction*) UObject::GObjObjects()->Data[ 17757 ];

	ACoverReplicator_execNotifyEnabledSlots_Parms NotifyEnabledSlots_Parms;
	NotifyEnabledSlots_Parms.Link = Link;

	this->ProcessEvent ( pFnNotifyEnabledSlots, &NotifyEnabledSlots_Parms, NULL );

	if ( SlotIndices )
		memcpy ( SlotIndices, &NotifyEnabledSlots_Parms.SlotIndices, 0x10 );
};

// Function Engine.CoverReplicator.ClientReceiveInitialCoverReplicationInfo
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned long                  bLinkDisabled                  ( CPF_Parm )
// unsigned char                  NumSlotsEnabled                ( CPF_Parm )
// unsigned char                  SlotsEnabled                   ( CPF_Parm )
// unsigned char                  NumSlotsDisabled               ( CPF_Parm )
// unsigned char                  SlotsDisabled                  ( CPF_Parm )
// unsigned char                  NumSlotsAdjusted               ( CPF_Parm )
// unsigned char                  SlotsAdjusted                  ( CPF_Parm )
// unsigned char                  NumCoverTypesChanged           ( CPF_Parm )
// struct FManualCoverTypeInfo    SlotsCoverTypeChanged          ( CPF_Parm )
// unsigned long                  bDone                          ( CPF_Parm )

void ACoverReplicator::ClientReceiveInitialCoverReplicationInfo ( int Index, class ACoverLink* Link, unsigned long bLinkDisabled, unsigned char NumSlotsEnabled, unsigned char* SlotsEnabled, unsigned char NumSlotsDisabled, unsigned char* SlotsDisabled, unsigned char NumSlotsAdjusted, unsigned char* SlotsAdjusted, unsigned char NumCoverTypesChanged, struct FManualCoverTypeInfo* SlotsCoverTypeChanged, unsigned long bDone )
{
	static UFunction* pFnClientReceiveInitialCoverReplicationInfo = NULL;

	if ( ! pFnClientReceiveInitialCoverReplicationInfo )
		pFnClientReceiveInitialCoverReplicationInfo = (UFunction*) UObject::GObjObjects()->Data[ 17743 ];

	ACoverReplicator_execClientReceiveInitialCoverReplicationInfo_Parms ClientReceiveInitialCoverReplicationInfo_Parms;
	ClientReceiveInitialCoverReplicationInfo_Parms.Index = Index;
	ClientReceiveInitialCoverReplicationInfo_Parms.Link = Link;
	ClientReceiveInitialCoverReplicationInfo_Parms.bLinkDisabled = bLinkDisabled;
	ClientReceiveInitialCoverReplicationInfo_Parms.NumSlotsEnabled = NumSlotsEnabled;
	memcpy ( &ClientReceiveInitialCoverReplicationInfo_Parms.SlotsEnabled, &SlotsEnabled, 0x8 );
	ClientReceiveInitialCoverReplicationInfo_Parms.NumSlotsDisabled = NumSlotsDisabled;
	memcpy ( &ClientReceiveInitialCoverReplicationInfo_Parms.SlotsDisabled, &SlotsDisabled, 0x8 );
	ClientReceiveInitialCoverReplicationInfo_Parms.NumSlotsAdjusted = NumSlotsAdjusted;
	memcpy ( &ClientReceiveInitialCoverReplicationInfo_Parms.SlotsAdjusted, &SlotsAdjusted, 0x8 );
	ClientReceiveInitialCoverReplicationInfo_Parms.NumCoverTypesChanged = NumCoverTypesChanged;
	memcpy ( &ClientReceiveInitialCoverReplicationInfo_Parms.SlotsCoverTypeChanged, &SlotsCoverTypeChanged, 0x20 );
	ClientReceiveInitialCoverReplicationInfo_Parms.bDone = bDone;

	this->ProcessEvent ( pFnClientReceiveInitialCoverReplicationInfo, &ClientReceiveInitialCoverReplicationInfo_Parms, NULL );
};

// Function Engine.CoverReplicator.ServerSendInitialCoverReplicationInfo
// [0x002200C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ACoverReplicator::ServerSendInitialCoverReplicationInfo ( int Index )
{
	static UFunction* pFnServerSendInitialCoverReplicationInfo = NULL;

	if ( ! pFnServerSendInitialCoverReplicationInfo )
		pFnServerSendInitialCoverReplicationInfo = (UFunction*) UObject::GObjObjects()->Data[ 17730 ];

	ACoverReplicator_execServerSendInitialCoverReplicationInfo_Parms ServerSendInitialCoverReplicationInfo_Parms;
	ServerSendInitialCoverReplicationInfo_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSendInitialCoverReplicationInfo, &ServerSendInitialCoverReplicationInfo_Parms, NULL );
};

// Function Engine.CoverReplicator.ClientSetOwner
// [0x010201C2] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void ACoverReplicator::ClientSetOwner ( class APlayerController* PC )
{
	static UFunction* pFnClientSetOwner = NULL;

	if ( ! pFnClientSetOwner )
		pFnClientSetOwner = (UFunction*) UObject::GObjObjects()->Data[ 17728 ];

	ACoverReplicator_execClientSetOwner_Parms ClientSetOwner_Parms;
	ClientSetOwner_Parms.PC = PC;

	this->ProcessEvent ( pFnClientSetOwner, &ClientSetOwner_Parms, NULL );
};

// Function Engine.CoverReplicator.ReplicateInitialCoverInfo
// [0x00020002] 
// Parameters infos:

void ACoverReplicator::ReplicateInitialCoverInfo ( )
{
	static UFunction* pFnReplicateInitialCoverInfo = NULL;

	if ( ! pFnReplicateInitialCoverInfo )
		pFnReplicateInitialCoverInfo = (UFunction*) UObject::GObjObjects()->Data[ 17726 ];

	ACoverReplicator_execReplicateInitialCoverInfo_Parms ReplicateInitialCoverInfo_Parms;

	this->ProcessEvent ( pFnReplicateInitialCoverInfo, &ReplicateInitialCoverInfo_Parms, NULL );
};

// Function Engine.CoverReplicator.PurgeOldEntries
// [0x00020002] 
// Parameters infos:

void ACoverReplicator::PurgeOldEntries ( )
{
	static UFunction* pFnPurgeOldEntries = NULL;

	if ( ! pFnPurgeOldEntries )
		pFnPurgeOldEntries = (UFunction*) UObject::GObjObjects()->Data[ 17724 ];

	ACoverReplicator_execPurgeOldEntries_Parms PurgeOldEntries_Parms;

	this->ProcessEvent ( pFnPurgeOldEntries, &PurgeOldEntries_Parms, NULL );
};

// Function Engine.GameMessage.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString UGameMessage::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 21129 ];

	UGameMessage_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Engine.ScoreBoard.ChangeState
// [0x00020000] 
// Parameters infos:
// unsigned long                  bIsVisible                     ( CPF_Parm )

void AScoreBoard::ChangeState ( unsigned long bIsVisible )
{
	static UFunction* pFnChangeState = NULL;

	if ( ! pFnChangeState )
		pFnChangeState = (UFunction*) UObject::GObjObjects()->Data[ 29362 ];

	AScoreBoard_execChangeState_Parms ChangeState_Parms;
	ChangeState_Parms.bIsVisible = bIsVisible;

	this->ProcessEvent ( pFnChangeState, &ChangeState_Parms, NULL );
};

// Function Engine.ScoreBoard.UpdateScoreBoard
// [0x00020000] 
// Parameters infos:

void AScoreBoard::UpdateScoreBoard ( )
{
	static UFunction* pFnUpdateScoreBoard = NULL;

	if ( ! pFnUpdateScoreBoard )
		pFnUpdateScoreBoard = (UFunction*) UObject::GObjObjects()->Data[ 29361 ];

	AScoreBoard_execUpdateScoreBoard_Parms UpdateScoreBoard_Parms;

	this->ProcessEvent ( pFnUpdateScoreBoard, &UpdateScoreBoard_Parms, NULL );
};

// Function Engine.ScoreBoard.UpdateGRI
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AScoreBoard::UpdateGRI ( )
{
	static UFunction* pFnUpdateGRI = NULL;

	if ( ! pFnUpdateGRI )
		pFnUpdateGRI = (UFunction*) UObject::GObjObjects()->Data[ 29359 ];

	AScoreBoard_execUpdateGRI_Parms UpdateGRI_Parms;

	this->ProcessEvent ( pFnUpdateGRI, &UpdateGRI_Parms, NULL );

	return UpdateGRI_Parms.ReturnValue;
};

// Function Engine.ScoreBoard.DrawHUD
// [0x00020002] 
// Parameters infos:

void AScoreBoard::DrawHUD ( )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 29358 ];

	AScoreBoard_execDrawHUD_Parms DrawHUD_Parms;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.SeqAct_ToggleInput.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_ToggleInput::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 30008 ];

	USeqAct_ToggleInput_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_ToggleCinematicMode.IsValidUISequenceObject
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         TargetObject                   ( CPF_OptionalParm | CPF_Parm )

bool USeqAct_ToggleCinematicMode::eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject )
{
	static UFunction* pFnIsValidUISequenceObject = NULL;

	if ( ! pFnIsValidUISequenceObject )
		pFnIsValidUISequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 29985 ];

	USeqAct_ToggleCinematicMode_eventIsValidUISequenceObject_Parms IsValidUISequenceObject_Parms;
	IsValidUISequenceObject_Parms.TargetObject = TargetObject;

	this->ProcessEvent ( pFnIsValidUISequenceObject, &IsValidUISequenceObject_Parms, NULL );

	return IsValidUISequenceObject_Parms.ReturnValue;
};

// Function Engine.SeqAct_ToggleCinematicMode.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqAct_ToggleCinematicMode::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 29980 ];

	USeqAct_ToggleCinematicMode_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.SeqAct_ConsoleCommand.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ConsoleCommand::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29549 ];

	USeqAct_ConsoleCommand_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ConsoleCommand.VersionUpdated
// [0x00020002] 
// Parameters infos:
// int                            OldVersion                     ( CPF_Parm )
// int                            NewVersion                     ( CPF_Parm )

void USeqAct_ConsoleCommand::VersionUpdated ( int OldVersion, int NewVersion )
{
	static UFunction* pFnVersionUpdated = NULL;

	if ( ! pFnVersionUpdated )
		pFnVersionUpdated = (UFunction*) UObject::GObjObjects()->Data[ 29545 ];

	USeqAct_ConsoleCommand_execVersionUpdated_Parms VersionUpdated_Parms;
	VersionUpdated_Parms.OldVersion = OldVersion;
	VersionUpdated_Parms.NewVersion = NewVersion;

	this->ProcessEvent ( pFnVersionUpdated, &VersionUpdated_Parms, NULL );
};

// Function Engine.SeqAct_SetSoundMode.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetSoundMode::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29917 ];

	USeqAct_SetSoundMode_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetSoundMode.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqAct_SetSoundMode::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 29915 ];

	USeqAct_SetSoundMode_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.AnimNotify_PlayFaceFXAnim.Notify
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Owner                          ( CPF_Parm )
// class UAnimNodeSequence*       AnimSeqInstigator              ( CPF_Parm )

void UAnimNotify_PlayFaceFXAnim::eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator )
{
	static UFunction* pFnNotify = NULL;

	if ( ! pFnNotify )
		pFnNotify = (UFunction*) UObject::GObjObjects()->Data[ 13087 ];

	UAnimNotify_PlayFaceFXAnim_eventNotify_Parms Notify_Parms;
	Notify_Parms.Owner = Owner;
	Notify_Parms.AnimSeqInstigator = AnimSeqInstigator;

	this->ProcessEvent ( pFnNotify, &Notify_Parms, NULL );
};

// Function Engine.BioSeqAct_EffectsMaterial.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_EffectsMaterial::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 15087 ];

	UBioSeqAct_EffectsMaterial_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.BioSeqAct_EffectsMaterial.SetUpInputs
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_EffectsMaterial::SetUpInputs ( )
{
	static UFunction* pFnSetUpInputs = NULL;

	if ( ! pFnSetUpInputs )
		pFnSetUpInputs = (UFunction*) UObject::GObjObjects()->Data[ 15079 ];

	UBioSeqAct_EffectsMaterial_execSetUpInputs_Parms SetUpInputs_Parms;

	this->ProcessEvent ( pFnSetUpInputs, &SetUpInputs_Parms, NULL );
};

// Function Engine.BroadcastHandler.AllowBroadcastLocalizedTeam
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            TeamIndex                      ( CPF_Parm )
// class AActor*                  Sender                         ( CPF_Parm )
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::eventAllowBroadcastLocalizedTeam ( int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnAllowBroadcastLocalizedTeam = NULL;

	if ( ! pFnAllowBroadcastLocalizedTeam )
		pFnAllowBroadcastLocalizedTeam = (UFunction*) UObject::GObjObjects()->Data[ 16130 ];

	ABroadcastHandler_eventAllowBroadcastLocalizedTeam_Parms AllowBroadcastLocalizedTeam_Parms;
	AllowBroadcastLocalizedTeam_Parms.TeamIndex = TeamIndex;
	AllowBroadcastLocalizedTeam_Parms.Sender = Sender;
	AllowBroadcastLocalizedTeam_Parms.Message = Message;
	AllowBroadcastLocalizedTeam_Parms.Switch = Switch;
	AllowBroadcastLocalizedTeam_Parms.RelatedPRI = RelatedPRI;
	AllowBroadcastLocalizedTeam_Parms.RelatedPRI01 = RelatedPRI01;
	AllowBroadcastLocalizedTeam_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnAllowBroadcastLocalizedTeam, &AllowBroadcastLocalizedTeam_Parms, NULL );
};

// Function Engine.BroadcastHandler.AllowBroadcastLocalized
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Sender                         ( CPF_Parm )
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::eventAllowBroadcastLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnAllowBroadcastLocalized = NULL;

	if ( ! pFnAllowBroadcastLocalized )
		pFnAllowBroadcastLocalized = (UFunction*) UObject::GObjObjects()->Data[ 16122 ];

	ABroadcastHandler_eventAllowBroadcastLocalized_Parms AllowBroadcastLocalized_Parms;
	AllowBroadcastLocalized_Parms.Sender = Sender;
	AllowBroadcastLocalized_Parms.Message = Message;
	AllowBroadcastLocalized_Parms.Switch = Switch;
	AllowBroadcastLocalized_Parms.RelatedPRI = RelatedPRI;
	AllowBroadcastLocalized_Parms.RelatedPRI01 = RelatedPRI01;
	AllowBroadcastLocalized_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnAllowBroadcastLocalized, &AllowBroadcastLocalized_Parms, NULL );
};

// Function Engine.BroadcastHandler.BroadcastTeam
// [0x00024002] 
// Parameters infos:
// class AController*             Sender                         ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::BroadcastTeam ( class AController* Sender, struct FString msg, struct FName Type )
{
	static UFunction* pFnBroadcastTeam = NULL;

	if ( ! pFnBroadcastTeam )
		pFnBroadcastTeam = (UFunction*) UObject::GObjObjects()->Data[ 16117 ];

	ABroadcastHandler_execBroadcastTeam_Parms BroadcastTeam_Parms;
	BroadcastTeam_Parms.Sender = Sender;
	memcpy ( &BroadcastTeam_Parms.msg, &msg, 0x10 );
	memcpy ( &BroadcastTeam_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnBroadcastTeam, &BroadcastTeam_Parms, NULL );
};

// Function Engine.BroadcastHandler.Broadcast
// [0x00024002] 
// Parameters infos:
// class AActor*                  Sender                         ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::Broadcast ( class AActor* Sender, struct FString msg, struct FName Type )
{
	static UFunction* pFnBroadcast = NULL;

	if ( ! pFnBroadcast )
		pFnBroadcast = (UFunction*) UObject::GObjObjects()->Data[ 16110 ];

	ABroadcastHandler_execBroadcast_Parms Broadcast_Parms;
	Broadcast_Parms.Sender = Sender;
	memcpy ( &Broadcast_Parms.msg, &msg, 0x10 );
	memcpy ( &Broadcast_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnBroadcast, &Broadcast_Parms, NULL );
};

// Function Engine.BroadcastHandler.BroadcastLocalized
// [0x00024002] 
// Parameters infos:
// class AActor*                  Sender                         ( CPF_Parm )
// class APlayerController*       Receiver                       ( CPF_Parm )
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::BroadcastLocalized ( class AActor* Sender, class APlayerController* Receiver, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnBroadcastLocalized = NULL;

	if ( ! pFnBroadcastLocalized )
		pFnBroadcastLocalized = (UFunction*) UObject::GObjObjects()->Data[ 16102 ];

	ABroadcastHandler_execBroadcastLocalized_Parms BroadcastLocalized_Parms;
	BroadcastLocalized_Parms.Sender = Sender;
	BroadcastLocalized_Parms.Receiver = Receiver;
	BroadcastLocalized_Parms.Message = Message;
	BroadcastLocalized_Parms.Switch = Switch;
	BroadcastLocalized_Parms.RelatedPRI = RelatedPRI;
	BroadcastLocalized_Parms.RelatedPRI01 = RelatedPRI01;
	BroadcastLocalized_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnBroadcastLocalized, &BroadcastLocalized_Parms, NULL );
};

// Function Engine.BroadcastHandler.BroadcastText
// [0x00024002] 
// Parameters infos:
// class APlayerReplicationInfo*  SenderPRI                      ( CPF_Parm )
// class APlayerController*       Receiver                       ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::BroadcastText ( class APlayerReplicationInfo* SenderPRI, class APlayerController* Receiver, struct FString msg, struct FName Type )
{
	static UFunction* pFnBroadcastText = NULL;

	if ( ! pFnBroadcastText )
		pFnBroadcastText = (UFunction*) UObject::GObjObjects()->Data[ 16097 ];

	ABroadcastHandler_execBroadcastText_Parms BroadcastText_Parms;
	BroadcastText_Parms.SenderPRI = SenderPRI;
	BroadcastText_Parms.Receiver = Receiver;
	memcpy ( &BroadcastText_Parms.msg, &msg, 0x10 );
	memcpy ( &BroadcastText_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnBroadcastText, &BroadcastText_Parms, NULL );
};

// Function Engine.BroadcastHandler.AllowsBroadcast
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  broadcaster                    ( CPF_Parm )
// int                            InLen                          ( CPF_Parm )

bool ABroadcastHandler::AllowsBroadcast ( class AActor* broadcaster, int InLen )
{
	static UFunction* pFnAllowsBroadcast = NULL;

	if ( ! pFnAllowsBroadcast )
		pFnAllowsBroadcast = (UFunction*) UObject::GObjObjects()->Data[ 16092 ];

	ABroadcastHandler_execAllowsBroadcast_Parms AllowsBroadcast_Parms;
	AllowsBroadcast_Parms.broadcaster = broadcaster;
	AllowsBroadcast_Parms.InLen = InLen;

	this->ProcessEvent ( pFnAllowsBroadcast, &AllowsBroadcast_Parms, NULL );

	return AllowsBroadcast_Parms.ReturnValue;
};

// Function Engine.BroadcastHandler.UpdateSentText
// [0x00020002] 
// Parameters infos:

void ABroadcastHandler::UpdateSentText ( )
{
	static UFunction* pFnUpdateSentText = NULL;

	if ( ! pFnUpdateSentText )
		pFnUpdateSentText = (UFunction*) UObject::GObjObjects()->Data[ 16090 ];

	ABroadcastHandler_execUpdateSentText_Parms UpdateSentText_Parms;

	this->ProcessEvent ( pFnUpdateSentText, &UpdateSentText_Parms, NULL );
};

// Function Engine.ColorScaleVolume.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AColorScaleVolume::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 16883 ];

	AColorScaleVolume_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function Engine.ColorScaleVolume.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AColorScaleVolume::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 16874 ];

	AColorScaleVolume_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.DebugCameraHUD.PostRender
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ADebugCameraHUD::eventPostRender ( )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = (UFunction*) UObject::GObjObjects()->Data[ 18468 ];

	ADebugCameraHUD_eventPostRender_Parms PostRender_Parms;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );
};

// Function Engine.DebugCameraHUD.DisplayMaterials
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          X                              ( CPF_Parm )
// float                          DY                             ( CPF_Parm )
// class UMeshComponent*          MeshComp                       ( CPF_Parm | CPF_EditInline )
// float                          Y                              ( CPF_Parm | CPF_OutParm )

bool ADebugCameraHUD::DisplayMaterials ( float X, float DY, class UMeshComponent* MeshComp, float* Y )
{
	static UFunction* pFnDisplayMaterials = NULL;

	if ( ! pFnDisplayMaterials )
		pFnDisplayMaterials = (UFunction*) UObject::GObjObjects()->Data[ 18459 ];

	ADebugCameraHUD_execDisplayMaterials_Parms DisplayMaterials_Parms;
	DisplayMaterials_Parms.X = X;
	DisplayMaterials_Parms.DY = DY;
	DisplayMaterials_Parms.MeshComp = MeshComp;

	this->ProcessEvent ( pFnDisplayMaterials, &DisplayMaterials_Parms, NULL );

	if ( Y )
		*Y = DisplayMaterials_Parms.Y;

	return DisplayMaterials_Parms.ReturnValue;
};

// Function Engine.DebugCameraHUD.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ADebugCameraHUD::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 18458 ];

	ADebugCameraHUD_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.DebugCameraInput.InputKey
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  Event                          ( CPF_Parm )
// float                          AmountDepressed                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool UDebugCameraInput::InputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad )
{
	static UFunction* pFnInputKey = NULL;

	if ( ! pFnInputKey )
		pFnInputKey = (UFunction*) UObject::GObjObjects()->Data[ 18594 ];

	UDebugCameraInput_execInputKey_Parms InputKey_Parms;
	InputKey_Parms.ControllerId = ControllerId;
	memcpy ( &InputKey_Parms.Key, &Key, 0x8 );
	InputKey_Parms.Event = Event;
	InputKey_Parms.AmountDepressed = AmountDepressed;
	InputKey_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnInputKey, &InputKey_Parms, NULL );

	return InputKey_Parms.ReturnValue;
};

// Function Engine.VolumeTimer.Timer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AVolumeTimer::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 35945 ];

	AVolumeTimer_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Engine.VolumeTimer.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AVolumeTimer::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 35943 ];

	AVolumeTimer_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.DialogueManager.TriggerDialogueEvent
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  InEventClass                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// class AActor*                  InOriginator                   ( CPF_Parm )

bool ADialogueManager::TriggerDialogueEvent ( class UClass* InEventClass, class AActor* InInstigator, class AActor* InOriginator )
{
	static UFunction* pFnTriggerDialogueEvent = NULL;

	if ( ! pFnTriggerDialogueEvent )
		pFnTriggerDialogueEvent = (UFunction*) UObject::GObjObjects()->Data[ 18771 ];

	ADialogueManager_execTriggerDialogueEvent_Parms TriggerDialogueEvent_Parms;
	TriggerDialogueEvent_Parms.InEventClass = InEventClass;
	TriggerDialogueEvent_Parms.InInstigator = InInstigator;
	TriggerDialogueEvent_Parms.InOriginator = InOriginator;

	this->ProcessEvent ( pFnTriggerDialogueEvent, &TriggerDialogueEvent_Parms, NULL );

	return TriggerDialogueEvent_Parms.ReturnValue;
};

// Function Engine.DynamicPhysicsVolume.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ADynamicPhysicsVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 19074 ];

	ADynamicPhysicsVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.DynamicTriggerVolume.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ADynamicTriggerVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 19139 ];

	ADynamicTriggerVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.FailedConnect.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString UFailedConnect::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 20011 ];

	UFailedConnect_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Engine.FailedConnect.GetFailSwitch
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FailString                     ( CPF_Parm | CPF_NeedCtorLink )

int UFailedConnect::GetFailSwitch ( struct FString FailString )
{
	static UFunction* pFnGetFailSwitch = NULL;

	if ( ! pFnGetFailSwitch )
		pFnGetFailSwitch = (UFunction*) UObject::GObjObjects()->Data[ 20008 ];

	UFailedConnect_execGetFailSwitch_Parms GetFailSwitch_Parms;
	memcpy ( &GetFailSwitch_Parms.FailString, &FailString, 0x10 );

	this->ProcessEvent ( pFnGetFailSwitch, &GetFailSwitch_Parms, NULL );

	return GetFailSwitch_Parms.ReturnValue;
};

// Function Engine.GameRules.NetDamage
// [0x00420002] 
// Parameters infos:
// int                            OriginalDamage                 ( CPF_Parm )
// class APawn*                   injured                        ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// int                            Damage                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void AGameRules::NetDamage ( int OriginalDamage, class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum )
{
	static UFunction* pFnNetDamage = NULL;

	if ( ! pFnNetDamage )
		pFnNetDamage = (UFunction*) UObject::GObjObjects()->Data[ 21712 ];

	AGameRules_execNetDamage_Parms NetDamage_Parms;
	NetDamage_Parms.OriginalDamage = OriginalDamage;
	NetDamage_Parms.injured = injured;
	NetDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NetDamage_Parms.HitLocation, &HitLocation, 0xC );
	NetDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnNetDamage, &NetDamage_Parms, NULL );

	if ( Damage )
		*Damage = NetDamage_Parms.Damage;

	if ( Momentum )
		memcpy ( Momentum, &NetDamage_Parms.Momentum, 0xC );
};

// Function Engine.GameRules.CriticalPlayer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Other                          ( CPF_Parm )

bool AGameRules::CriticalPlayer ( class AController* Other )
{
	static UFunction* pFnCriticalPlayer = NULL;

	if ( ! pFnCriticalPlayer )
		pFnCriticalPlayer = (UFunction*) UObject::GObjObjects()->Data[ 21709 ];

	AGameRules_execCriticalPlayer_Parms CriticalPlayer_Parms;
	CriticalPlayer_Parms.Other = Other;

	this->ProcessEvent ( pFnCriticalPlayer, &CriticalPlayer_Parms, NULL );

	return CriticalPlayer_Parms.ReturnValue;
};

// Function Engine.GameRules.ScoreKill
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Killed                         ( CPF_Parm )

void AGameRules::ScoreKill ( class AController* Killer, class AController* Killed )
{
	static UFunction* pFnScoreKill = NULL;

	if ( ! pFnScoreKill )
		pFnScoreKill = (UFunction*) UObject::GObjObjects()->Data[ 21706 ];

	AGameRules_execScoreKill_Parms ScoreKill_Parms;
	ScoreKill_Parms.Killer = Killer;
	ScoreKill_Parms.Killed = Killed;

	this->ProcessEvent ( pFnScoreKill, &ScoreKill_Parms, NULL );
};

// Function Engine.GameRules.ScoreObjective
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Scorer                         ( CPF_Parm )
// int                            Score                          ( CPF_Parm )

void AGameRules::ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score )
{
	static UFunction* pFnScoreObjective = NULL;

	if ( ! pFnScoreObjective )
		pFnScoreObjective = (UFunction*) UObject::GObjObjects()->Data[ 21703 ];

	AGameRules_execScoreObjective_Parms ScoreObjective_Parms;
	ScoreObjective_Parms.Scorer = Scorer;
	ScoreObjective_Parms.Score = Score;

	this->ProcessEvent ( pFnScoreObjective, &ScoreObjective_Parms, NULL );
};

// Function Engine.GameRules.PreventDeath
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Killed                         ( CPF_Parm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool AGameRules::PreventDeath ( class APawn* Killed, class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnPreventDeath = NULL;

	if ( ! pFnPreventDeath )
		pFnPreventDeath = (UFunction*) UObject::GObjObjects()->Data[ 21697 ];

	AGameRules_execPreventDeath_Parms PreventDeath_Parms;
	PreventDeath_Parms.Killed = Killed;
	PreventDeath_Parms.Killer = Killer;
	PreventDeath_Parms.DamageType = DamageType;
	memcpy ( &PreventDeath_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPreventDeath, &PreventDeath_Parms, NULL );

	return PreventDeath_Parms.ReturnValue;
};

// Function Engine.GameRules.OverridePickupQuery
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )
// unsigned char                  bAllowPickup                   ( CPF_Parm | CPF_OutParm )

bool AGameRules::OverridePickupQuery ( class APawn* Other, class UClass* ItemClass, class AActor* Pickup, unsigned char* bAllowPickup )
{
	static UFunction* pFnOverridePickupQuery = NULL;

	if ( ! pFnOverridePickupQuery )
		pFnOverridePickupQuery = (UFunction*) UObject::GObjObjects()->Data[ 21691 ];

	AGameRules_execOverridePickupQuery_Parms OverridePickupQuery_Parms;
	OverridePickupQuery_Parms.Other = Other;
	OverridePickupQuery_Parms.ItemClass = ItemClass;
	OverridePickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnOverridePickupQuery, &OverridePickupQuery_Parms, NULL );

	if ( bAllowPickup )
		*bAllowPickup = OverridePickupQuery_Parms.bAllowPickup;

	return OverridePickupQuery_Parms.ReturnValue;
};

// Function Engine.GameRules.CheckScore
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Scorer                         ( CPF_Parm )

bool AGameRules::CheckScore ( class APlayerReplicationInfo* Scorer )
{
	static UFunction* pFnCheckScore = NULL;

	if ( ! pFnCheckScore )
		pFnCheckScore = (UFunction*) UObject::GObjObjects()->Data[ 21688 ];

	AGameRules_execCheckScore_Parms CheckScore_Parms;
	CheckScore_Parms.Scorer = Scorer;

	this->ProcessEvent ( pFnCheckScore, &CheckScore_Parms, NULL );

	return CheckScore_Parms.ReturnValue;
};

// Function Engine.GameRules.CheckEndGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )

bool AGameRules::CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pFnCheckEndGame = NULL;

	if ( ! pFnCheckEndGame )
		pFnCheckEndGame = (UFunction*) UObject::GObjObjects()->Data[ 21684 ];

	AGameRules_execCheckEndGame_Parms CheckEndGame_Parms;
	CheckEndGame_Parms.Winner = Winner;
	memcpy ( &CheckEndGame_Parms.Reason, &Reason, 0x10 );

	this->ProcessEvent ( pFnCheckEndGame, &CheckEndGame_Parms, NULL );

	return CheckEndGame_Parms.ReturnValue;
};

// Function Engine.GameRules.HandleRestartGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameRules::HandleRestartGame ( )
{
	static UFunction* pFnHandleRestartGame = NULL;

	if ( ! pFnHandleRestartGame )
		pFnHandleRestartGame = (UFunction*) UObject::GObjObjects()->Data[ 21682 ];

	AGameRules_execHandleRestartGame_Parms HandleRestartGame_Parms;

	this->ProcessEvent ( pFnHandleRestartGame, &HandleRestartGame_Parms, NULL );

	return HandleRestartGame_Parms.ReturnValue;
};

// Function Engine.GameRules.GetRules
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AGameRules::GetRules ( )
{
	static UFunction* pFnGetRules = NULL;

	if ( ! pFnGetRules )
		pFnGetRules = (UFunction*) UObject::GObjObjects()->Data[ 21679 ];

	AGameRules_execGetRules_Parms GetRules_Parms;

	this->ProcessEvent ( pFnGetRules, &GetRules_Parms, NULL );

	return GetRules_Parms.ReturnValue;
};

// Function Engine.GameRules.FindPlayerStart
// [0x00024002] 
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )
// unsigned char                  InTeam                         ( CPF_OptionalParm | CPF_Parm )
// struct FString                 IncomingName                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

class ANavigationPoint* AGameRules::FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName )
{
	static UFunction* pFnFindPlayerStart = NULL;

	if ( ! pFnFindPlayerStart )
		pFnFindPlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 21674 ];

	AGameRules_execFindPlayerStart_Parms FindPlayerStart_Parms;
	FindPlayerStart_Parms.Player = Player;
	FindPlayerStart_Parms.InTeam = InTeam;
	memcpy ( &FindPlayerStart_Parms.IncomingName, &IncomingName, 0x10 );

	this->ProcessEvent ( pFnFindPlayerStart, &FindPlayerStart_Parms, NULL );

	return FindPlayerStart_Parms.ReturnValue;
};

// Function Engine.GameRules.AddGameRules
// [0x00020002] 
// Parameters infos:
// class AGameRules*              GR                             ( CPF_Parm )

void AGameRules::AddGameRules ( class AGameRules* GR )
{
	static UFunction* pFnAddGameRules = NULL;

	if ( ! pFnAddGameRules )
		pFnAddGameRules = (UFunction*) UObject::GObjObjects()->Data[ 21671 ];

	AGameRules_execAddGameRules_Parms AddGameRules_Parms;
	AddGameRules_Parms.GR = GR;

	this->ProcessEvent ( pFnAddGameRules, &AddGameRules_Parms, NULL );
};

// Function Engine.UIMessageBoxBase.HandleSceneActivated
// [0x00020002] 
// Parameters infos:
// class UUIScene*                ActivatedScene                 ( CPF_Parm )
// unsigned long                  bInitialActivation             ( CPF_Parm )

void UUIMessageBoxBase::HandleSceneActivated ( class UUIScene* ActivatedScene, unsigned long bInitialActivation )
{
	static UFunction* pFnHandleSceneActivated = NULL;

	if ( ! pFnHandleSceneActivated )
		pFnHandleSceneActivated = (UFunction*) UObject::GObjObjects()->Data[ 35655 ];

	UUIMessageBoxBase_execHandleSceneActivated_Parms HandleSceneActivated_Parms;
	HandleSceneActivated_Parms.ActivatedScene = ActivatedScene;
	HandleSceneActivated_Parms.bInitialActivation = bInitialActivation;

	this->ProcessEvent ( pFnHandleSceneActivated, &HandleSceneActivated_Parms, NULL );
};

// Function Engine.UIMessageBoxBase.OptionChosen
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScreenObject*         EventObject                    ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIMessageBoxBase::OptionChosen ( class UUIScreenObject* EventObject, int PlayerIndex )
{
	static UFunction* pFnOptionChosen = NULL;

	if ( ! pFnOptionChosen )
		pFnOptionChosen = (UFunction*) UObject::GObjObjects()->Data[ 35649 ];

	UUIMessageBoxBase_execOptionChosen_Parms OptionChosen_Parms;
	OptionChosen_Parms.EventObject = EventObject;
	OptionChosen_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOptionChosen, &OptionChosen_Parms, NULL );

	return OptionChosen_Parms.ReturnValue;
};

// Function Engine.UIMessageBoxBase.SetupDockingRelationships
// [0x00020000] 
// Parameters infos:

void UUIMessageBoxBase::SetupDockingRelationships ( )
{
	static UFunction* pFnSetupDockingRelationships = NULL;

	if ( ! pFnSetupDockingRelationships )
		pFnSetupDockingRelationships = (UFunction*) UObject::GObjObjects()->Data[ 35648 ];

	UUIMessageBoxBase_execSetupDockingRelationships_Parms SetupDockingRelationships_Parms;

	this->ProcessEvent ( pFnSetupDockingRelationships, &SetupDockingRelationships_Parms, NULL );
};

// Function Engine.UIMessageBoxBase.LayoutControls
// [0x00020002] 
// Parameters infos:

void UUIMessageBoxBase::LayoutControls ( )
{
	static UFunction* pFnLayoutControls = NULL;

	if ( ! pFnLayoutControls )
		pFnLayoutControls = (UFunction*) UObject::GObjObjects()->Data[ 35646 ];

	UUIMessageBoxBase_execLayoutControls_Parms LayoutControls_Parms;

	this->ProcessEvent ( pFnLayoutControls, &LayoutControls_Parms, NULL );
};

// Function Engine.UIMessageBoxBase.GetButtonBar
// [0x00020002] 
// Parameters infos:
// class UUICalloutButtonPanel*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUICalloutButtonPanel* UUIMessageBoxBase::GetButtonBar ( )
{
	static UFunction* pFnGetButtonBar = NULL;

	if ( ! pFnGetButtonBar )
		pFnGetButtonBar = (UFunction*) UObject::GObjObjects()->Data[ 35644 ];

	UUIMessageBoxBase_execGetButtonBar_Parms GetButtonBar_Parms;

	this->ProcessEvent ( pFnGetButtonBar, &GetButtonBar_Parms, NULL );

	return GetButtonBar_Parms.ReturnValue;
};

// Function Engine.UIMessageBoxBase.GetMessageLabel
// [0x00020002] 
// Parameters infos:
// class UUILabel*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUILabel* UUIMessageBoxBase::GetMessageLabel ( )
{
	static UFunction* pFnGetMessageLabel = NULL;

	if ( ! pFnGetMessageLabel )
		pFnGetMessageLabel = (UFunction*) UObject::GObjObjects()->Data[ 35642 ];

	UUIMessageBoxBase_execGetMessageLabel_Parms GetMessageLabel_Parms;

	this->ProcessEvent ( pFnGetMessageLabel, &GetMessageLabel_Parms, NULL );

	return GetMessageLabel_Parms.ReturnValue;
};

// Function Engine.UIMessageBoxBase.GetTitleLabel
// [0x00020002] 
// Parameters infos:
// class UUILabel*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUILabel* UUIMessageBoxBase::GetTitleLabel ( )
{
	static UFunction* pFnGetTitleLabel = NULL;

	if ( ! pFnGetTitleLabel )
		pFnGetTitleLabel = (UFunction*) UObject::GObjObjects()->Data[ 35640 ];

	UUIMessageBoxBase_execGetTitleLabel_Parms GetTitleLabel_Parms;

	this->ProcessEvent ( pFnGetTitleLabel, &GetTitleLabel_Parms, NULL );

	return GetTitleLabel_Parms.ReturnValue;
};

// Function Engine.UIMessageBoxBase.FindButtonIndex
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonAlias                    ( CPF_Parm )

int UUIMessageBoxBase::FindButtonIndex ( struct FName ButtonAlias )
{
	static UFunction* pFnFindButtonIndex = NULL;

	if ( ! pFnFindButtonIndex )
		pFnFindButtonIndex = (UFunction*) UObject::GObjObjects()->Data[ 35637 ];

	UUIMessageBoxBase_execFindButtonIndex_Parms FindButtonIndex_Parms;
	memcpy ( &FindButtonIndex_Parms.ButtonAlias, &ButtonAlias, 0x8 );

	this->ProcessEvent ( pFnFindButtonIndex, &FindButtonIndex_Parms, NULL );

	return FindButtonIndex_Parms.ReturnValue;
};

// Function Engine.UIMessageBoxBase.HasButton
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonAlias                    ( CPF_Parm )

bool UUIMessageBoxBase::HasButton ( struct FName ButtonAlias )
{
	static UFunction* pFnHasButton = NULL;

	if ( ! pFnHasButton )
		pFnHasButton = (UFunction*) UObject::GObjObjects()->Data[ 35634 ];

	UUIMessageBoxBase_execHasButton_Parms HasButton_Parms;
	memcpy ( &HasButton_Parms.ButtonAlias, &ButtonAlias, 0x8 );

	this->ProcessEvent ( pFnHasButton, &HasButton_Parms, NULL );

	return HasButton_Parms.ReturnValue;
};

// Function Engine.UIMessageBoxBase.RemoveButton
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonAlias                    ( CPF_Parm )

bool UUIMessageBoxBase::RemoveButton ( struct FName ButtonAlias )
{
	static UFunction* pFnRemoveButton = NULL;

	if ( ! pFnRemoveButton )
		pFnRemoveButton = (UFunction*) UObject::GObjObjects()->Data[ 35630 ];

	UUIMessageBoxBase_execRemoveButton_Parms RemoveButton_Parms;
	memcpy ( &RemoveButton_Parms.ButtonAlias, &ButtonAlias, 0x8 );

	this->ProcessEvent ( pFnRemoveButton, &RemoveButton_Parms, NULL );

	return RemoveButton_Parms.ReturnValue;
};

// Function Engine.UIMessageBoxBase.AddButton
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ButtonAlias                    ( CPF_Parm )

bool UUIMessageBoxBase::AddButton ( struct FName ButtonAlias )
{
	static UFunction* pFnAddButton = NULL;

	if ( ! pFnAddButton )
		pFnAddButton = (UFunction*) UObject::GObjObjects()->Data[ 35625 ];

	UUIMessageBoxBase_execAddButton_Parms AddButton_Parms;
	memcpy ( &AddButton_Parms.ButtonAlias, &ButtonAlias, 0x8 );

	this->ProcessEvent ( pFnAddButton, &AddButton_Parms, NULL );

	return AddButton_Parms.ReturnValue;
};

// Function Engine.UIMessageBoxBase.SetButtonCallback
// [0x00080002] 
// Parameters infos:
// class UUICalloutButton*        TargetButton                   ( CPF_Parm )

void UUIMessageBoxBase::SetButtonCallback ( class UUICalloutButton* TargetButton )
{
	static UFunction* pFnSetButtonCallback = NULL;

	if ( ! pFnSetButtonCallback )
		pFnSetButtonCallback = (UFunction*) UObject::GObjObjects()->Data[ 35621 ];

	UUIMessageBoxBase_execSetButtonCallback_Parms SetButtonCallback_Parms;
	SetButtonCallback_Parms.TargetButton = TargetButton;

	this->ProcessEvent ( pFnSetButtonCallback, &SetButtonCallback_Parms, NULL );
};

// Function Engine.UIMessageBoxBase.SetQuestion
// [0x00020002] 
// Parameters infos:
// struct FString                 NewMessageString               ( CPF_Parm | CPF_NeedCtorLink )

void UUIMessageBoxBase::SetQuestion ( struct FString NewMessageString )
{
	static UFunction* pFnSetQuestion = NULL;

	if ( ! pFnSetQuestion )
		pFnSetQuestion = (UFunction*) UObject::GObjObjects()->Data[ 35617 ];

	UUIMessageBoxBase_execSetQuestion_Parms SetQuestion_Parms;
	memcpy ( &SetQuestion_Parms.NewMessageString, &NewMessageString, 0x10 );

	this->ProcessEvent ( pFnSetQuestion, &SetQuestion_Parms, NULL );
};

// Function Engine.UIMessageBoxBase.SetMessage
// [0x00020002] 
// Parameters infos:
// struct FString                 NewMessageString               ( CPF_Parm | CPF_NeedCtorLink )

void UUIMessageBoxBase::SetMessage ( struct FString NewMessageString )
{
	static UFunction* pFnSetMessage = NULL;

	if ( ! pFnSetMessage )
		pFnSetMessage = (UFunction*) UObject::GObjObjects()->Data[ 35614 ];

	UUIMessageBoxBase_execSetMessage_Parms SetMessage_Parms;
	memcpy ( &SetMessage_Parms.NewMessageString, &NewMessageString, 0x10 );

	this->ProcessEvent ( pFnSetMessage, &SetMessage_Parms, NULL );
};

// Function Engine.UIMessageBoxBase.SetTitle
// [0x00020002] 
// Parameters infos:
// struct FString                 NewTitleString                 ( CPF_Parm | CPF_NeedCtorLink )

void UUIMessageBoxBase::SetTitle ( struct FString NewTitleString )
{
	static UFunction* pFnSetTitle = NULL;

	if ( ! pFnSetTitle )
		pFnSetTitle = (UFunction*) UObject::GObjObjects()->Data[ 35611 ];

	UUIMessageBoxBase_execSetTitle_Parms SetTitle_Parms;
	memcpy ( &SetTitle_Parms.NewTitleString, &NewTitleString, 0x10 );

	this->ProcessEvent ( pFnSetTitle, &SetTitle_Parms, NULL );
};

// Function Engine.UIMessageBoxBase.SetupMessageBox
// [0x00024002] 
// Parameters infos:
// struct FString                 Title                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Question                       ( CPF_Parm | CPF_NeedCtorLink )
// struct TArray<struct FName>    ButtonAliases                  ( CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         SelectionCallback              ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UUIMessageBoxBase::SetupMessageBox ( struct FString Title, struct FString Message, struct FString Question, struct TArray<struct FName> ButtonAliases, struct FScriptDelegate SelectionCallback )
{
	static UFunction* pFnSetupMessageBox = NULL;

	if ( ! pFnSetupMessageBox )
		pFnSetupMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 35601 ];

	UUIMessageBoxBase_execSetupMessageBox_Parms SetupMessageBox_Parms;
	memcpy ( &SetupMessageBox_Parms.Title, &Title, 0x10 );
	memcpy ( &SetupMessageBox_Parms.Message, &Message, 0x10 );
	memcpy ( &SetupMessageBox_Parms.Question, &Question, 0x10 );
	memcpy ( &SetupMessageBox_Parms.ButtonAliases, &ButtonAliases, 0x10 );
	memcpy ( &SetupMessageBox_Parms.SelectionCallback, &SelectionCallback, 0x10 );

	this->ProcessEvent ( pFnSetupMessageBox, &SetupMessageBox_Parms, NULL );
};

// Function Engine.UIMessageBoxBase.OnOptionSelected
// [0x00120002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIMessageBoxBase*       Sender                         ( CPF_Parm )
// struct FName                   SelectedInputAlias             ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_Parm )

bool UUIMessageBoxBase::OnOptionSelected ( class UUIMessageBoxBase* Sender, struct FName SelectedInputAlias, int PlayerIndex )
{
	static UFunction* pFnOnOptionSelected = NULL;

	if ( ! pFnOnOptionSelected )
		pFnOnOptionSelected = (UFunction*) UObject::GObjObjects()->Data[ 22018 ];

	UUIMessageBoxBase_execOnOptionSelected_Parms OnOptionSelected_Parms;
	OnOptionSelected_Parms.Sender = Sender;
	memcpy ( &OnOptionSelected_Parms.SelectedInputAlias, &SelectedInputAlias, 0x8 );
	OnOptionSelected_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnOnOptionSelected, &OnOptionSelected_Parms, NULL );

	return OnOptionSelected_Parms.ReturnValue;
};

// Function Engine.UIMessageBox.SetupDockingRelationships
// [0x00020002] 
// Parameters infos:

void UUIMessageBox::SetupDockingRelationships ( )
{
	static UFunction* pFnSetupDockingRelationships = NULL;

	if ( ! pFnSetupDockingRelationships )
		pFnSetupDockingRelationships = (UFunction*) UObject::GObjObjects()->Data[ 35665 ];

	UUIMessageBox_execSetupDockingRelationships_Parms SetupDockingRelationships_Parms;

	this->ProcessEvent ( pFnSetupDockingRelationships, &SetupDockingRelationships_Parms, NULL );
};

// Function Engine.HeightFog.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AHeightFog::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 22479 ];

	AHeightFog_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.HeightFog.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AHeightFog::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 22477 ];

	AHeightFog_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.HeightFog.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AHeightFog::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 22474 ];

	AHeightFog_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.RateContent
// [0x00420000] 
// Parameters infos:
// unsigned char                  PlayerNum                      ( CPF_Parm )
// int                            NewRating                      ( CPF_Parm )
// struct FCommunityContentFile   FileToRate                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::RateContent ( unsigned char PlayerNum, int NewRating, struct FCommunityContentFile* FileToRate )
{
	static UFunction* pFnRateContent = NULL;

	if ( ! pFnRateContent )
		pFnRateContent = (UFunction*) UObject::GObjObjects()->Data[ 25455 ];

	UOnlineCommunityContentInterface_execRateContent_Parms RateContent_Parms;
	RateContent_Parms.PlayerNum = PlayerNum;
	RateContent_Parms.NewRating = NewRating;

	this->ProcessEvent ( pFnRateContent, &RateContent_Parms, NULL );

	if ( FileToRate )
		memcpy ( FileToRate, &RateContent_Parms.FileToRate, 0x38 );
};

// Function Engine.OnlineCommunityContentInterface.ClearGetContentPayloadCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         GetContentPayloadCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::ClearGetContentPayloadCompleteDelegate ( struct FScriptDelegate GetContentPayloadCompleteDelegate )
{
	static UFunction* pFnClearGetContentPayloadCompleteDelegate = NULL;

	if ( ! pFnClearGetContentPayloadCompleteDelegate )
		pFnClearGetContentPayloadCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25453 ];

	UOnlineCommunityContentInterface_execClearGetContentPayloadCompleteDelegate_Parms ClearGetContentPayloadCompleteDelegate_Parms;
	memcpy ( &ClearGetContentPayloadCompleteDelegate_Parms.GetContentPayloadCompleteDelegate, &GetContentPayloadCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearGetContentPayloadCompleteDelegate, &ClearGetContentPayloadCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.AddGetContentPayloadCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         GetContentPayloadCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::AddGetContentPayloadCompleteDelegate ( struct FScriptDelegate GetContentPayloadCompleteDelegate )
{
	static UFunction* pFnAddGetContentPayloadCompleteDelegate = NULL;

	if ( ! pFnAddGetContentPayloadCompleteDelegate )
		pFnAddGetContentPayloadCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25451 ];

	UOnlineCommunityContentInterface_execAddGetContentPayloadCompleteDelegate_Parms AddGetContentPayloadCompleteDelegate_Parms;
	memcpy ( &AddGetContentPayloadCompleteDelegate_Parms.GetContentPayloadCompleteDelegate, &GetContentPayloadCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddGetContentPayloadCompleteDelegate, &AddGetContentPayloadCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.OnGetContentPayloadComplete
// [0x00520000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FCommunityContentFile   FileDownloaded                 ( CPF_Parm | CPF_NeedCtorLink )
// struct TArray<unsigned char>   Payload                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::OnGetContentPayloadComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile FileDownloaded, struct TArray<unsigned char>* Payload )
{
	static UFunction* pFnOnGetContentPayloadComplete = NULL;

	if ( ! pFnOnGetContentPayloadComplete )
		pFnOnGetContentPayloadComplete = (UFunction*) UObject::GObjObjects()->Data[ 25446 ];

	UOnlineCommunityContentInterface_execOnGetContentPayloadComplete_Parms OnGetContentPayloadComplete_Parms;
	OnGetContentPayloadComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnGetContentPayloadComplete_Parms.FileDownloaded, &FileDownloaded, 0x38 );

	this->ProcessEvent ( pFnOnGetContentPayloadComplete, &OnGetContentPayloadComplete_Parms, NULL );

	if ( Payload )
		memcpy ( Payload, &OnGetContentPayloadComplete_Parms.Payload, 0x10 );
};

// Function Engine.OnlineCommunityContentInterface.GetContentPayload
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// struct FCommunityContentFile   FileDownloaded                 ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineCommunityContentInterface::GetContentPayload ( unsigned char PlayerNum, struct FCommunityContentFile* FileDownloaded )
{
	static UFunction* pFnGetContentPayload = NULL;

	if ( ! pFnGetContentPayload )
		pFnGetContentPayload = (UFunction*) UObject::GObjObjects()->Data[ 25442 ];

	UOnlineCommunityContentInterface_execGetContentPayload_Parms GetContentPayload_Parms;
	GetContentPayload_Parms.PlayerNum = PlayerNum;

	this->ProcessEvent ( pFnGetContentPayload, &GetContentPayload_Parms, NULL );

	if ( FileDownloaded )
		memcpy ( FileDownloaded, &GetContentPayload_Parms.FileDownloaded, 0x38 );

	return GetContentPayload_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.ClearDownloadContentCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         DownloadContentCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::ClearDownloadContentCompleteDelegate ( struct FScriptDelegate DownloadContentCompleteDelegate )
{
	static UFunction* pFnClearDownloadContentCompleteDelegate = NULL;

	if ( ! pFnClearDownloadContentCompleteDelegate )
		pFnClearDownloadContentCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25440 ];

	UOnlineCommunityContentInterface_execClearDownloadContentCompleteDelegate_Parms ClearDownloadContentCompleteDelegate_Parms;
	memcpy ( &ClearDownloadContentCompleteDelegate_Parms.DownloadContentCompleteDelegate, &DownloadContentCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearDownloadContentCompleteDelegate, &ClearDownloadContentCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.AddDownloadContentCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         DownloadContentCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::AddDownloadContentCompleteDelegate ( struct FScriptDelegate DownloadContentCompleteDelegate )
{
	static UFunction* pFnAddDownloadContentCompleteDelegate = NULL;

	if ( ! pFnAddDownloadContentCompleteDelegate )
		pFnAddDownloadContentCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25438 ];

	UOnlineCommunityContentInterface_execAddDownloadContentCompleteDelegate_Parms AddDownloadContentCompleteDelegate_Parms;
	memcpy ( &AddDownloadContentCompleteDelegate_Parms.DownloadContentCompleteDelegate, &DownloadContentCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddDownloadContentCompleteDelegate, &AddDownloadContentCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.OnDownloadContentComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FCommunityContentFile   FileDownloaded                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::OnDownloadContentComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile FileDownloaded )
{
	static UFunction* pFnOnDownloadContentComplete = NULL;

	if ( ! pFnOnDownloadContentComplete )
		pFnOnDownloadContentComplete = (UFunction*) UObject::GObjObjects()->Data[ 25435 ];

	UOnlineCommunityContentInterface_execOnDownloadContentComplete_Parms OnDownloadContentComplete_Parms;
	OnDownloadContentComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnDownloadContentComplete_Parms.FileDownloaded, &FileDownloaded, 0x38 );

	this->ProcessEvent ( pFnOnDownloadContentComplete, &OnDownloadContentComplete_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.DownloadContent
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// struct FCommunityContentFile   FileToDownload                 ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineCommunityContentInterface::DownloadContent ( unsigned char PlayerNum, struct FCommunityContentFile* FileToDownload )
{
	static UFunction* pFnDownloadContent = NULL;

	if ( ! pFnDownloadContent )
		pFnDownloadContent = (UFunction*) UObject::GObjObjects()->Data[ 25431 ];

	UOnlineCommunityContentInterface_execDownloadContent_Parms DownloadContent_Parms;
	DownloadContent_Parms.PlayerNum = PlayerNum;

	this->ProcessEvent ( pFnDownloadContent, &DownloadContent_Parms, NULL );

	if ( FileToDownload )
		memcpy ( FileToDownload, &DownloadContent_Parms.FileToDownload, 0x38 );

	return DownloadContent_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.ClearUploadContentCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UploadContentCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::ClearUploadContentCompleteDelegate ( struct FScriptDelegate UploadContentCompleteDelegate )
{
	static UFunction* pFnClearUploadContentCompleteDelegate = NULL;

	if ( ! pFnClearUploadContentCompleteDelegate )
		pFnClearUploadContentCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25429 ];

	UOnlineCommunityContentInterface_execClearUploadContentCompleteDelegate_Parms ClearUploadContentCompleteDelegate_Parms;
	memcpy ( &ClearUploadContentCompleteDelegate_Parms.UploadContentCompleteDelegate, &UploadContentCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearUploadContentCompleteDelegate, &ClearUploadContentCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.AddUploadContentCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UploadContentCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::AddUploadContentCompleteDelegate ( struct FScriptDelegate UploadContentCompleteDelegate )
{
	static UFunction* pFnAddUploadContentCompleteDelegate = NULL;

	if ( ! pFnAddUploadContentCompleteDelegate )
		pFnAddUploadContentCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25427 ];

	UOnlineCommunityContentInterface_execAddUploadContentCompleteDelegate_Parms AddUploadContentCompleteDelegate_Parms;
	memcpy ( &AddUploadContentCompleteDelegate_Parms.UploadContentCompleteDelegate, &UploadContentCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddUploadContentCompleteDelegate, &AddUploadContentCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.OnUploadContentComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FCommunityContentFile   UploadedFile                   ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::OnUploadContentComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile UploadedFile )
{
	static UFunction* pFnOnUploadContentComplete = NULL;

	if ( ! pFnOnUploadContentComplete )
		pFnOnUploadContentComplete = (UFunction*) UObject::GObjObjects()->Data[ 25424 ];

	UOnlineCommunityContentInterface_execOnUploadContentComplete_Parms OnUploadContentComplete_Parms;
	OnUploadContentComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnUploadContentComplete_Parms.UploadedFile, &UploadedFile, 0x38 );

	this->ProcessEvent ( pFnOnUploadContentComplete, &OnUploadContentComplete_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.UploadContent
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// struct TArray<unsigned char>   Payload                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FCommunityContentMetadata MetaData                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineCommunityContentInterface::UploadContent ( unsigned char PlayerNum, struct TArray<unsigned char>* Payload, struct FCommunityContentMetadata* MetaData )
{
	static UFunction* pFnUploadContent = NULL;

	if ( ! pFnUploadContent )
		pFnUploadContent = (UFunction*) UObject::GObjObjects()->Data[ 25418 ];

	UOnlineCommunityContentInterface_execUploadContent_Parms UploadContent_Parms;
	UploadContent_Parms.PlayerNum = PlayerNum;

	this->ProcessEvent ( pFnUploadContent, &UploadContent_Parms, NULL );

	if ( Payload )
		memcpy ( Payload, &UploadContent_Parms.Payload, 0x10 );

	if ( MetaData )
		memcpy ( MetaData, &UploadContent_Parms.MetaData, 0x14 );

	return UploadContent_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.GetFriendsContentList
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// struct FOnlineFriend           Friend                         ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct TArray<struct FCommunityContentFile> ContentFiles                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineCommunityContentInterface::GetFriendsContentList ( unsigned char PlayerNum, struct FOnlineFriend* Friend, struct TArray<struct FCommunityContentFile>* ContentFiles )
{
	static UFunction* pFnGetFriendsContentList = NULL;

	if ( ! pFnGetFriendsContentList )
		pFnGetFriendsContentList = (UFunction*) UObject::GObjObjects()->Data[ 25412 ];

	UOnlineCommunityContentInterface_execGetFriendsContentList_Parms GetFriendsContentList_Parms;
	GetFriendsContentList_Parms.PlayerNum = PlayerNum;

	this->ProcessEvent ( pFnGetFriendsContentList, &GetFriendsContentList_Parms, NULL );

	if ( Friend )
		memcpy ( Friend, &GetFriendsContentList_Parms.Friend, 0x38 );

	if ( ContentFiles )
		memcpy ( ContentFiles, &GetFriendsContentList_Parms.ContentFiles, 0x10 );

	return GetFriendsContentList_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.ClearReadFriendsContentListCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadFriendsContentListCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::ClearReadFriendsContentListCompleteDelegate ( struct FScriptDelegate ReadFriendsContentListCompleteDelegate )
{
	static UFunction* pFnClearReadFriendsContentListCompleteDelegate = NULL;

	if ( ! pFnClearReadFriendsContentListCompleteDelegate )
		pFnClearReadFriendsContentListCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25410 ];

	UOnlineCommunityContentInterface_execClearReadFriendsContentListCompleteDelegate_Parms ClearReadFriendsContentListCompleteDelegate_Parms;
	memcpy ( &ClearReadFriendsContentListCompleteDelegate_Parms.ReadFriendsContentListCompleteDelegate, &ReadFriendsContentListCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadFriendsContentListCompleteDelegate, &ClearReadFriendsContentListCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.AddReadFriendsContentListCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadFriendsContentListCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::AddReadFriendsContentListCompleteDelegate ( struct FScriptDelegate ReadFriendsContentListCompleteDelegate )
{
	static UFunction* pFnAddReadFriendsContentListCompleteDelegate = NULL;

	if ( ! pFnAddReadFriendsContentListCompleteDelegate )
		pFnAddReadFriendsContentListCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25408 ];

	UOnlineCommunityContentInterface_execAddReadFriendsContentListCompleteDelegate_Parms AddReadFriendsContentListCompleteDelegate_Parms;
	memcpy ( &AddReadFriendsContentListCompleteDelegate_Parms.ReadFriendsContentListCompleteDelegate, &ReadFriendsContentListCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadFriendsContentListCompleteDelegate, &AddReadFriendsContentListCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.OnReadFriendsContentListComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineCommunityContentInterface::OnReadFriendsContentListComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadFriendsContentListComplete = NULL;

	if ( ! pFnOnReadFriendsContentListComplete )
		pFnOnReadFriendsContentListComplete = (UFunction*) UObject::GObjObjects()->Data[ 25406 ];

	UOnlineCommunityContentInterface_execOnReadFriendsContentListComplete_Parms OnReadFriendsContentListComplete_Parms;
	OnReadFriendsContentListComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadFriendsContentListComplete, &OnReadFriendsContentListComplete_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.ReadFriendsContentList
// [0x00424000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// int                            StartAt                        ( CPF_OptionalParm | CPF_Parm )
// int                            NumToRead                      ( CPF_OptionalParm | CPF_Parm )
// struct TArray<struct FOnlineFriend> Friends                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineCommunityContentInterface::ReadFriendsContentList ( unsigned char PlayerNum, int StartAt, int NumToRead, struct TArray<struct FOnlineFriend>* Friends )
{
	static UFunction* pFnReadFriendsContentList = NULL;

	if ( ! pFnReadFriendsContentList )
		pFnReadFriendsContentList = (UFunction*) UObject::GObjObjects()->Data[ 25399 ];

	UOnlineCommunityContentInterface_execReadFriendsContentList_Parms ReadFriendsContentList_Parms;
	ReadFriendsContentList_Parms.PlayerNum = PlayerNum;
	ReadFriendsContentList_Parms.StartAt = StartAt;
	ReadFriendsContentList_Parms.NumToRead = NumToRead;

	this->ProcessEvent ( pFnReadFriendsContentList, &ReadFriendsContentList_Parms, NULL );

	if ( Friends )
		memcpy ( Friends, &ReadFriendsContentList_Parms.Friends, 0x10 );

	return ReadFriendsContentList_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.GetContentList
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// struct TArray<struct FCommunityContentFile> ContentFiles                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineCommunityContentInterface::GetContentList ( unsigned char PlayerNum, struct TArray<struct FCommunityContentFile>* ContentFiles )
{
	static UFunction* pFnGetContentList = NULL;

	if ( ! pFnGetContentList )
		pFnGetContentList = (UFunction*) UObject::GObjObjects()->Data[ 25394 ];

	UOnlineCommunityContentInterface_execGetContentList_Parms GetContentList_Parms;
	GetContentList_Parms.PlayerNum = PlayerNum;

	this->ProcessEvent ( pFnGetContentList, &GetContentList_Parms, NULL );

	if ( ContentFiles )
		memcpy ( ContentFiles, &GetContentList_Parms.ContentFiles, 0x10 );

	return GetContentList_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.ClearReadContentListCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadContentListCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::ClearReadContentListCompleteDelegate ( struct FScriptDelegate ReadContentListCompleteDelegate )
{
	static UFunction* pFnClearReadContentListCompleteDelegate = NULL;

	if ( ! pFnClearReadContentListCompleteDelegate )
		pFnClearReadContentListCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25392 ];

	UOnlineCommunityContentInterface_execClearReadContentListCompleteDelegate_Parms ClearReadContentListCompleteDelegate_Parms;
	memcpy ( &ClearReadContentListCompleteDelegate_Parms.ReadContentListCompleteDelegate, &ReadContentListCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadContentListCompleteDelegate, &ClearReadContentListCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.AddReadContentListCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadContentListCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::AddReadContentListCompleteDelegate ( struct FScriptDelegate ReadContentListCompleteDelegate )
{
	static UFunction* pFnAddReadContentListCompleteDelegate = NULL;

	if ( ! pFnAddReadContentListCompleteDelegate )
		pFnAddReadContentListCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 25390 ];

	UOnlineCommunityContentInterface_execAddReadContentListCompleteDelegate_Parms AddReadContentListCompleteDelegate_Parms;
	memcpy ( &AddReadContentListCompleteDelegate_Parms.ReadContentListCompleteDelegate, &ReadContentListCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadContentListCompleteDelegate, &AddReadContentListCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.OnReadContentListComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineCommunityContentInterface::OnReadContentListComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadContentListComplete = NULL;

	if ( ! pFnOnReadContentListComplete )
		pFnOnReadContentListComplete = (UFunction*) UObject::GObjObjects()->Data[ 25388 ];

	UOnlineCommunityContentInterface_execOnReadContentListComplete_Parms OnReadContentListComplete_Parms;
	OnReadContentListComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadContentListComplete, &OnReadContentListComplete_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.ReadContentList
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// int                            StartAt                        ( CPF_OptionalParm | CPF_Parm )
// int                            NumToRead                      ( CPF_OptionalParm | CPF_Parm )

bool UOnlineCommunityContentInterface::ReadContentList ( unsigned char PlayerNum, int StartAt, int NumToRead )
{
	static UFunction* pFnReadContentList = NULL;

	if ( ! pFnReadContentList )
		pFnReadContentList = (UFunction*) UObject::GObjObjects()->Data[ 25383 ];

	UOnlineCommunityContentInterface_execReadContentList_Parms ReadContentList_Parms;
	ReadContentList_Parms.PlayerNum = PlayerNum;
	ReadContentList_Parms.StartAt = StartAt;
	ReadContentList_Parms.NumToRead = NumToRead;

	this->ProcessEvent ( pFnReadContentList, &ReadContentList_Parms, NULL );

	return ReadContentList_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.Exit
// [0x00020000] 
// Parameters infos:

void UOnlineCommunityContentInterface::Exit ( )
{
	static UFunction* pFnExit = NULL;

	if ( ! pFnExit )
		pFnExit = (UFunction*) UObject::GObjObjects()->Data[ 25382 ];

	UOnlineCommunityContentInterface_execExit_Parms Exit_Parms;

	this->ProcessEvent ( pFnExit, &Exit_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.Init
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineCommunityContentInterface::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 25380 ];

	UOnlineCommunityContentInterface_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	return Init_Parms.ReturnValue;
};

// Function Engine.OnlineEventsInterface.UploadHardwareData
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            UniqueId                       ( CPF_Parm )
// struct FString                 PlayerNick                     ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineEventsInterface::UploadHardwareData ( struct FUniqueNetId UniqueId, struct FString PlayerNick )
{
	static UFunction* pFnUploadHardwareData = NULL;

	if ( ! pFnUploadHardwareData )
		pFnUploadHardwareData = (UFunction*) UObject::GObjObjects()->Data[ 25517 ];

	UOnlineEventsInterface_execUploadHardwareData_Parms UploadHardwareData_Parms;
	memcpy ( &UploadHardwareData_Parms.UniqueId, &UniqueId, 0x8 );
	memcpy ( &UploadHardwareData_Parms.PlayerNick, &PlayerNick, 0x10 );

	this->ProcessEvent ( pFnUploadHardwareData, &UploadHardwareData_Parms, NULL );

	return UploadHardwareData_Parms.ReturnValue;
};

// Function Engine.OnlineEventsInterface.UploadGameplayEventsData
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlineGameplayEvents*   Events                         ( CPF_Parm )

bool UOnlineEventsInterface::UploadGameplayEventsData ( class UOnlineGameplayEvents* Events )
{
	static UFunction* pFnUploadGameplayEventsData = NULL;

	if ( ! pFnUploadGameplayEventsData )
		pFnUploadGameplayEventsData = (UFunction*) UObject::GObjObjects()->Data[ 25514 ];

	UOnlineEventsInterface_execUploadGameplayEventsData_Parms UploadGameplayEventsData_Parms;
	UploadGameplayEventsData_Parms.Events = Events;

	this->ProcessEvent ( pFnUploadGameplayEventsData, &UploadGameplayEventsData_Parms, NULL );

	return UploadGameplayEventsData_Parms.ReturnValue;
};

// Function Engine.OnlineEventsInterface.UploadProfileData
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            UniqueId                       ( CPF_Parm )
// struct FString                 PlayerNick                     ( CPF_Parm | CPF_NeedCtorLink )
// class UOnlineProfileSettings*  ProfileSettings                ( CPF_Parm )

bool UOnlineEventsInterface::UploadProfileData ( struct FUniqueNetId UniqueId, struct FString PlayerNick, class UOnlineProfileSettings* ProfileSettings )
{
	static UFunction* pFnUploadProfileData = NULL;

	if ( ! pFnUploadProfileData )
		pFnUploadProfileData = (UFunction*) UObject::GObjObjects()->Data[ 25509 ];

	UOnlineEventsInterface_execUploadProfileData_Parms UploadProfileData_Parms;
	memcpy ( &UploadProfileData_Parms.UniqueId, &UniqueId, 0x8 );
	memcpy ( &UploadProfileData_Parms.PlayerNick, &PlayerNick, 0x10 );
	UploadProfileData_Parms.ProfileSettings = ProfileSettings;

	this->ProcessEvent ( pFnUploadProfileData, &UploadProfileData_Parms, NULL );

	return UploadProfileData_Parms.ReturnValue;
};

// Function Engine.OnlineRecentPlayersList.GetCurrentPlayersListCount
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UOnlineRecentPlayersList::GetCurrentPlayersListCount ( )
{
	static UFunction* pFnGetCurrentPlayersListCount = NULL;

	if ( ! pFnGetCurrentPlayersListCount )
		pFnGetCurrentPlayersListCount = (UFunction*) UObject::GObjObjects()->Data[ 26585 ];

	UOnlineRecentPlayersList_execGetCurrentPlayersListCount_Parms GetCurrentPlayersListCount_Parms;

	this->ProcessEvent ( pFnGetCurrentPlayersListCount, &GetCurrentPlayersListCount_Parms, NULL );

	return GetCurrentPlayersListCount_Parms.ReturnValue;
};

// Function Engine.OnlineRecentPlayersList.SetCurrentPlayersList
// [0x00020002] 
// Parameters infos:
// struct TArray<struct FCurrentPlayerMet> Players                        ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

void UOnlineRecentPlayersList::SetCurrentPlayersList ( struct TArray<struct FCurrentPlayerMet> Players )
{
	static UFunction* pFnSetCurrentPlayersList = NULL;

	if ( ! pFnSetCurrentPlayersList )
		pFnSetCurrentPlayersList = (UFunction*) UObject::GObjObjects()->Data[ 26582 ];

	UOnlineRecentPlayersList_execSetCurrentPlayersList_Parms SetCurrentPlayersList_Parms;
	memcpy ( &SetCurrentPlayersList_Parms.Players, &Players, 0x10 );

	this->ProcessEvent ( pFnSetCurrentPlayersList, &SetCurrentPlayersList_Parms, NULL );
};

// Function Engine.OnlineRecentPlayersList.DumpPlayersList
// [0x00420002] 
// Parameters infos:
// struct TArray<struct FCurrentPlayerMet> Players                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineRecentPlayersList::DumpPlayersList ( struct TArray<struct FCurrentPlayerMet>* Players )
{
	static UFunction* pFnDumpPlayersList = NULL;

	if ( ! pFnDumpPlayersList )
		pFnDumpPlayersList = (UFunction*) UObject::GObjObjects()->Data[ 26576 ];

	UOnlineRecentPlayersList_execDumpPlayersList_Parms DumpPlayersList_Parms;

	this->ProcessEvent ( pFnDumpPlayersList, &DumpPlayersList_Parms, NULL );

	if ( Players )
		memcpy ( Players, &DumpPlayersList_Parms.Players, 0x10 );
};

// Function Engine.OnlineRecentPlayersList.ShowCurrentPlayersList
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 Title                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Description                    ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineRecentPlayersList::ShowCurrentPlayersList ( unsigned char LocalUserNum, struct FString Title, struct FString Description )
{
	static UFunction* pFnShowCurrentPlayersList = NULL;

	if ( ! pFnShowCurrentPlayersList )
		pFnShowCurrentPlayersList = (UFunction*) UObject::GObjObjects()->Data[ 26568 ];

	UOnlineRecentPlayersList_execShowCurrentPlayersList_Parms ShowCurrentPlayersList_Parms;
	ShowCurrentPlayersList_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowCurrentPlayersList_Parms.Title, &Title, 0x10 );
	memcpy ( &ShowCurrentPlayersList_Parms.Description, &Description, 0x10 );

	this->ProcessEvent ( pFnShowCurrentPlayersList, &ShowCurrentPlayersList_Parms, NULL );

	return ShowCurrentPlayersList_Parms.ReturnValue;
};

// Function Engine.OnlineRecentPlayersList.ShowLastPartyPlayerList
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 Title                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Description                    ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineRecentPlayersList::ShowLastPartyPlayerList ( unsigned char LocalUserNum, struct FString Title, struct FString Description )
{
	static UFunction* pFnShowLastPartyPlayerList = NULL;

	if ( ! pFnShowLastPartyPlayerList )
		pFnShowLastPartyPlayerList = (UFunction*) UObject::GObjObjects()->Data[ 26562 ];

	UOnlineRecentPlayersList_execShowLastPartyPlayerList_Parms ShowLastPartyPlayerList_Parms;
	ShowLastPartyPlayerList_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowLastPartyPlayerList_Parms.Title, &Title, 0x10 );
	memcpy ( &ShowLastPartyPlayerList_Parms.Description, &Description, 0x10 );

	this->ProcessEvent ( pFnShowLastPartyPlayerList, &ShowLastPartyPlayerList_Parms, NULL );

	return ShowLastPartyPlayerList_Parms.ReturnValue;
};

// Function Engine.OnlineRecentPlayersList.ShowRecentPartiesPlayerList
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 Title                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Description                    ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineRecentPlayersList::ShowRecentPartiesPlayerList ( unsigned char LocalUserNum, struct FString Title, struct FString Description )
{
	static UFunction* pFnShowRecentPartiesPlayerList = NULL;

	if ( ! pFnShowRecentPartiesPlayerList )
		pFnShowRecentPartiesPlayerList = (UFunction*) UObject::GObjObjects()->Data[ 26554 ];

	UOnlineRecentPlayersList_execShowRecentPartiesPlayerList_Parms ShowRecentPartiesPlayerList_Parms;
	ShowRecentPartiesPlayerList_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowRecentPartiesPlayerList_Parms.Title, &Title, 0x10 );
	memcpy ( &ShowRecentPartiesPlayerList_Parms.Description, &Description, 0x10 );

	this->ProcessEvent ( pFnShowRecentPartiesPlayerList, &ShowRecentPartiesPlayerList_Parms, NULL );

	return ShowRecentPartiesPlayerList_Parms.ReturnValue;
};

// Function Engine.OnlineRecentPlayersList.ShowRecentPlayerList
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 Title                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Description                    ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineRecentPlayersList::ShowRecentPlayerList ( unsigned char LocalUserNum, struct FString Title, struct FString Description )
{
	static UFunction* pFnShowRecentPlayerList = NULL;

	if ( ! pFnShowRecentPlayerList )
		pFnShowRecentPlayerList = (UFunction*) UObject::GObjObjects()->Data[ 26548 ];

	UOnlineRecentPlayersList_execShowRecentPlayerList_Parms ShowRecentPlayerList_Parms;
	ShowRecentPlayerList_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowRecentPlayerList_Parms.Title, &Title, 0x10 );
	memcpy ( &ShowRecentPlayerList_Parms.Description, &Description, 0x10 );

	this->ProcessEvent ( pFnShowRecentPlayerList, &ShowRecentPlayerList_Parms, NULL );

	return ShowRecentPlayerList_Parms.ReturnValue;
};

// Function Engine.OnlineRecentPlayersList.SetLastParty
// [0x00420002] 
// Parameters infos:
// struct FUniqueNetId            PartyLeader                    ( CPF_Parm )
// struct TArray<struct FUniqueNetId> PartyMembers                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineRecentPlayersList::SetLastParty ( struct FUniqueNetId PartyLeader, struct TArray<struct FUniqueNetId>* PartyMembers )
{
	static UFunction* pFnSetLastParty = NULL;

	if ( ! pFnSetLastParty )
		pFnSetLastParty = (UFunction*) UObject::GObjObjects()->Data[ 26543 ];

	UOnlineRecentPlayersList_execSetLastParty_Parms SetLastParty_Parms;
	memcpy ( &SetLastParty_Parms.PartyLeader, &PartyLeader, 0x8 );

	this->ProcessEvent ( pFnSetLastParty, &SetLastParty_Parms, NULL );

	if ( PartyMembers )
		memcpy ( PartyMembers, &SetLastParty_Parms.PartyMembers, 0x10 );
};

// Function Engine.OnlineRecentPlayersList.GetTeamForCurrentPlayer
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            Player                         ( CPF_Parm )

int UOnlineRecentPlayersList::GetTeamForCurrentPlayer ( struct FUniqueNetId Player )
{
	static UFunction* pFnGetTeamForCurrentPlayer = NULL;

	if ( ! pFnGetTeamForCurrentPlayer )
		pFnGetTeamForCurrentPlayer = (UFunction*) UObject::GObjObjects()->Data[ 26539 ];

	UOnlineRecentPlayersList_execGetTeamForCurrentPlayer_Parms GetTeamForCurrentPlayer_Parms;
	memcpy ( &GetTeamForCurrentPlayer_Parms.Player, &Player, 0x8 );

	this->ProcessEvent ( pFnGetTeamForCurrentPlayer, &GetTeamForCurrentPlayer_Parms, NULL );

	return GetTeamForCurrentPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineRecentPlayersList.GetSkillForCurrentPlayer
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            Player                         ( CPF_Parm )

int UOnlineRecentPlayersList::GetSkillForCurrentPlayer ( struct FUniqueNetId Player )
{
	static UFunction* pFnGetSkillForCurrentPlayer = NULL;

	if ( ! pFnGetSkillForCurrentPlayer )
		pFnGetSkillForCurrentPlayer = (UFunction*) UObject::GObjObjects()->Data[ 26535 ];

	UOnlineRecentPlayersList_execGetSkillForCurrentPlayer_Parms GetSkillForCurrentPlayer_Parms;
	memcpy ( &GetSkillForCurrentPlayer_Parms.Player, &Player, 0x8 );

	this->ProcessEvent ( pFnGetSkillForCurrentPlayer, &GetSkillForCurrentPlayer_Parms, NULL );

	return GetSkillForCurrentPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineRecentPlayersList.GetPlayersFromCurrentPlayers
// [0x00420002] 
// Parameters infos:
// struct TArray<struct FUniqueNetId> Players                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineRecentPlayersList::GetPlayersFromCurrentPlayers ( struct TArray<struct FUniqueNetId>* Players )
{
	static UFunction* pFnGetPlayersFromCurrentPlayers = NULL;

	if ( ! pFnGetPlayersFromCurrentPlayers )
		pFnGetPlayersFromCurrentPlayers = (UFunction*) UObject::GObjObjects()->Data[ 26531 ];

	UOnlineRecentPlayersList_execGetPlayersFromCurrentPlayers_Parms GetPlayersFromCurrentPlayers_Parms;

	this->ProcessEvent ( pFnGetPlayersFromCurrentPlayers, &GetPlayersFromCurrentPlayers_Parms, NULL );

	if ( Players )
		memcpy ( Players, &GetPlayersFromCurrentPlayers_Parms.Players, 0x10 );
};

// Function Engine.OnlineRecentPlayersList.GetPlayersFromRecentParties
// [0x00420002] 
// Parameters infos:
// struct TArray<struct FUniqueNetId> Players                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineRecentPlayersList::GetPlayersFromRecentParties ( struct TArray<struct FUniqueNetId>* Players )
{
	static UFunction* pFnGetPlayersFromRecentParties = NULL;

	if ( ! pFnGetPlayersFromRecentParties )
		pFnGetPlayersFromRecentParties = (UFunction*) UObject::GObjObjects()->Data[ 26525 ];

	UOnlineRecentPlayersList_execGetPlayersFromRecentParties_Parms GetPlayersFromRecentParties_Parms;

	this->ProcessEvent ( pFnGetPlayersFromRecentParties, &GetPlayersFromRecentParties_Parms, NULL );

	if ( Players )
		memcpy ( Players, &GetPlayersFromRecentParties_Parms.Players, 0x10 );
};

// Function Engine.OnlineRecentPlayersList.ClearRecentParties
// [0x00020002] 
// Parameters infos:

void UOnlineRecentPlayersList::ClearRecentParties ( )
{
	static UFunction* pFnClearRecentParties = NULL;

	if ( ! pFnClearRecentParties )
		pFnClearRecentParties = (UFunction*) UObject::GObjObjects()->Data[ 26524 ];

	UOnlineRecentPlayersList_execClearRecentParties_Parms ClearRecentParties_Parms;

	this->ProcessEvent ( pFnClearRecentParties, &ClearRecentParties_Parms, NULL );
};

// Function Engine.OnlineRecentPlayersList.AddPartyToRecentParties
// [0x00420002] 
// Parameters infos:
// struct FUniqueNetId            PartyLeader                    ( CPF_Parm )
// struct TArray<struct FUniqueNetId> PartyMembers                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineRecentPlayersList::AddPartyToRecentParties ( struct FUniqueNetId PartyLeader, struct TArray<struct FUniqueNetId>* PartyMembers )
{
	static UFunction* pFnAddPartyToRecentParties = NULL;

	if ( ! pFnAddPartyToRecentParties )
		pFnAddPartyToRecentParties = (UFunction*) UObject::GObjObjects()->Data[ 26517 ];

	UOnlineRecentPlayersList_execAddPartyToRecentParties_Parms AddPartyToRecentParties_Parms;
	memcpy ( &AddPartyToRecentParties_Parms.PartyLeader, &PartyLeader, 0x8 );

	this->ProcessEvent ( pFnAddPartyToRecentParties, &AddPartyToRecentParties_Parms, NULL );

	if ( PartyMembers )
		memcpy ( PartyMembers, &AddPartyToRecentParties_Parms.PartyMembers, 0x10 );
};

// Function Engine.OnlineRecentPlayersList.ClearRecentPlayers
// [0x00020002] 
// Parameters infos:

void UOnlineRecentPlayersList::ClearRecentPlayers ( )
{
	static UFunction* pFnClearRecentPlayers = NULL;

	if ( ! pFnClearRecentPlayers )
		pFnClearRecentPlayers = (UFunction*) UObject::GObjObjects()->Data[ 26516 ];

	UOnlineRecentPlayersList_execClearRecentPlayers_Parms ClearRecentPlayers_Parms;

	this->ProcessEvent ( pFnClearRecentPlayers, &ClearRecentPlayers_Parms, NULL );
};

// Function Engine.OnlineRecentPlayersList.AddPlayerToRecentPlayers
// [0x00020002] 
// Parameters infos:
// struct FUniqueNetId            NewPlayer                      ( CPF_Parm )

void UOnlineRecentPlayersList::AddPlayerToRecentPlayers ( struct FUniqueNetId NewPlayer )
{
	static UFunction* pFnAddPlayerToRecentPlayers = NULL;

	if ( ! pFnAddPlayerToRecentPlayers )
		pFnAddPlayerToRecentPlayers = (UFunction*) UObject::GObjObjects()->Data[ 26511 ];

	UOnlineRecentPlayersList_execAddPlayerToRecentPlayers_Parms AddPlayerToRecentPlayers_Parms;
	memcpy ( &AddPlayerToRecentPlayers_Parms.NewPlayer, &NewPlayer, 0x8 );

	this->ProcessEvent ( pFnAddPlayerToRecentPlayers, &AddPlayerToRecentPlayers_Parms, NULL );
};

// Function Engine.PathNode_Dynamic.GetDebugAbbrev
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APathNode_Dynamic::eventGetDebugAbbrev ( )
{
	static UFunction* pFnGetDebugAbbrev = NULL;

	if ( ! pFnGetDebugAbbrev )
		pFnGetDebugAbbrev = (UFunction*) UObject::GObjObjects()->Data[ 27807 ];

	APathNode_Dynamic_eventGetDebugAbbrev_Parms GetDebugAbbrev_Parms;

	this->ProcessEvent ( pFnGetDebugAbbrev, &GetDebugAbbrev_Parms, NULL );

	return GetDebugAbbrev_Parms.ReturnValue;
};

// Function Engine.SeqAct_PlayReplicatedSound.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_PlayReplicatedSound::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 29798 ];

	USeqAct_PlayReplicatedSound_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_PlayReplicatedSound.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqAct_PlayReplicatedSound::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 29792 ];

	USeqAct_PlayReplicatedSound_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.SeqAct_SetName.Activated
// [0x00020002] 
// Parameters infos:

void USeqAct_SetName::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 29897 ];

	USeqAct_SetName_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.SeqAct_SetVector.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqAct_SetVector::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 29930 ];

	USeqAct_SetVector_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.SeqAct_UpdateDynamicCover.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_UpdateDynamicCover::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 30024 ];

	USeqAct_UpdateDynamicCover_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_UpdatePhysBonesFromAnim.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_UpdatePhysBonesFromAnim::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 30028 ];

	USeqAct_UpdatePhysBonesFromAnim_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqEvent_LOS.PreVersionUpdated
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            OldVersion                     ( CPF_Parm )
// int                            NewVersion                     ( CPF_Parm )

void USeqEvent_LOS::eventPreVersionUpdated ( int OldVersion, int NewVersion )
{
	static UFunction* pFnPreVersionUpdated = NULL;

	if ( ! pFnPreVersionUpdated )
		pFnPreVersionUpdated = (UFunction*) UObject::GObjObjects()->Data[ 30115 ];

	USeqEvent_LOS_eventPreVersionUpdated_Parms PreVersionUpdated_Parms;
	PreVersionUpdated_Parms.OldVersion = OldVersion;
	PreVersionUpdated_Parms.NewVersion = NewVersion;

	this->ProcessEvent ( pFnPreVersionUpdated, &PreVersionUpdated_Parms, NULL );
};

// Function Engine.SeqEvent_LOS.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqEvent_LOS::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 30113 ];

	USeqEvent_LOS_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.Trigger_LOS.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATrigger_LOS::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 32101 ];

	ATrigger_LOS_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.TriggeredPath.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ATriggeredPath::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = (UFunction*) UObject::GObjObjects()->Data[ 32125 ];

	ATriggeredPath_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.TriggeredPath.SpecialHandling
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

class AActor* ATriggeredPath::eventSpecialHandling ( class APawn* Other )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = (UFunction*) UObject::GObjObjects()->Data[ 32120 ];

	ATriggeredPath_eventSpecialHandling_Parms SpecialHandling_Parms;
	SpecialHandling_Parms.Other = Other;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );

	return SpecialHandling_Parms.ReturnValue;
};

// Function Engine.TriggeredPath.OnToggle
// [0x00020002] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ATriggeredPath::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 32117 ];

	ATriggeredPath_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.TriggerStreamingLevel.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATriggerStreamingLevel::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 32138 ];

	ATriggerStreamingLevel_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.UICharacterSummary.IsProviderDisabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUICharacterSummary::eventIsProviderDisabled ( )
{
	static UFunction* pFnIsProviderDisabled = NULL;

	if ( ! pFnIsProviderDisabled )
		pFnIsProviderDisabled = (UFunction*) UObject::GObjObjects()->Data[ 33582 ];

	UUICharacterSummary_eventIsProviderDisabled_Parms IsProviderDisabled_Parms;

	this->ProcessEvent ( pFnIsProviderDisabled, &IsProviderDisabled_Parms, NULL );

	return IsProviderDisabled_Parms.ReturnValue;
};

// Function Engine.UIFocusHint.RemovedFromParent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIScreenObject*         WidgetOwner                    ( CPF_Parm )

void UUIFocusHint::eventRemovedFromParent ( class UUIScreenObject* WidgetOwner )
{
	static UFunction* pFnRemovedFromParent = NULL;

	if ( ! pFnRemovedFromParent )
		pFnRemovedFromParent = (UFunction*) UObject::GObjObjects()->Data[ 35110 ];

	UUIFocusHint_eventRemovedFromParent_Parms RemovedFromParent_Parms;
	RemovedFromParent_Parms.WidgetOwner = WidgetOwner;

	this->ProcessEvent ( pFnRemovedFromParent, &RemovedFromParent_Parms, NULL );
};

// Function Engine.UIWeaponSummary.IsProviderDisabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIWeaponSummary::eventIsProviderDisabled ( )
{
	static UFunction* pFnIsProviderDisabled = NULL;

	if ( ! pFnIsProviderDisabled )
		pFnIsProviderDisabled = (UFunction*) UObject::GObjObjects()->Data[ 35932 ];

	UUIWeaponSummary_eventIsProviderDisabled_Parms IsProviderDisabled_Parms;

	this->ProcessEvent ( pFnIsProviderDisabled, &IsProviderDisabled_Parms, NULL );

	return IsProviderDisabled_Parms.ReturnValue;
};

// Function Engine.WaterVolume.PlayExitSplash
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AWaterVolume::PlayExitSplash ( class AActor* Other )
{
	static UFunction* pFnPlayExitSplash = NULL;

	if ( ! pFnPlayExitSplash )
		pFnPlayExitSplash = (UFunction*) UObject::GObjObjects()->Data[ 35959 ];

	AWaterVolume_execPlayExitSplash_Parms PlayExitSplash_Parms;
	PlayExitSplash_Parms.Other = Other;

	this->ProcessEvent ( pFnPlayExitSplash, &PlayExitSplash_Parms, NULL );
};

// Function Engine.WaterVolume.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AWaterVolume::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 35957 ];

	AWaterVolume_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function Engine.WaterVolume.PlayEntrySplash
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AWaterVolume::PlayEntrySplash ( class AActor* Other )
{
	static UFunction* pFnPlayEntrySplash = NULL;

	if ( ! pFnPlayEntrySplash )
		pFnPlayEntrySplash = (UFunction*) UObject::GObjObjects()->Data[ 35953 ];

	AWaterVolume_execPlayEntrySplash_Parms PlayEntrySplash_Parms;
	PlayEntrySplash_Parms.Other = Other;

	this->ProcessEvent ( pFnPlayEntrySplash, &PlayEntrySplash_Parms, NULL );
};

// Function Engine.WaterVolume.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AWaterVolume::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 35948 ];

	AWaterVolume_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif